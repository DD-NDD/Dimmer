

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jul 04 16:08:24 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2,group=1
    92                           	psect	text69,local,class=CODE,merge=1,delta=2,group=1
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2,group=1
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	dabs	1,0x7E,2
   107  0000                     
   108                           ; Version 2.05
   109                           ; Generated 20/12/2018 GMT
   110                           ; 
   111                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   112                           ; All rights reserved.
   113                           ; 
   114                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   115                           ; 
   116                           ; Redistribution and use in source and binary forms, with or without modification, are
   117                           ; permitted provided that the following conditions are met:
   118                           ; 
   119                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   120                           ;        conditions and the following disclaimer.
   121                           ; 
   122                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   123                           ;        of conditions and the following disclaimer in the documentation and/or other
   124                           ;        materials provided with the distribution.
   125                           ; 
   126                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   127                           ;        software without specific prior written permission.
   128                           ; 
   129                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   130                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   131                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   132                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   133                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   134                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   135                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   136                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   137                           ; 
   138                           ; 
   139                           ; Code-generator required, PIC16LF1559 Definitions
   140                           ; 
   141                           ; SFR Addresses
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  001A                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  008C                     	;# 
   169  008D                     	;# 
   170  008E                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0095                     	;# 
   174  0096                     	;# 
   175  0097                     	;# 
   176  0099                     	;# 
   177  009A                     	;# 
   178  009B                     	;# 
   179  009B                     	;# 
   180  009C                     	;# 
   181  009D                     	;# 
   182  009E                     	;# 
   183  009F                     	;# 
   184  010C                     	;# 
   185  010D                     	;# 
   186  010E                     	;# 
   187  0116                     	;# 
   188  0117                     	;# 
   189  011D                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192  018E                     	;# 
   193  0191                     	;# 
   194  0191                     	;# 
   195  0192                     	;# 
   196  0193                     	;# 
   197  0193                     	;# 
   198  0194                     	;# 
   199  0195                     	;# 
   200  0196                     	;# 
   201  0199                     	;# 
   202  019A                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019D                     	;# 
   207  019E                     	;# 
   208  019F                     	;# 
   209  020C                     	;# 
   210  020D                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0391                     	;# 
   227  0392                     	;# 
   228  0393                     	;# 
   229  0394                     	;# 
   230  0395                     	;# 
   231  0396                     	;# 
   232  0611                     	;# 
   233  0612                     	;# 
   234  0613                     	;# 
   235  0613                     	;# 
   236  0614                     	;# 
   237  0615                     	;# 
   238  0616                     	;# 
   239  0616                     	;# 
   240  0711                     	;# 
   241  0711                     	;# 
   242  0711                     	;# 
   243  0712                     	;# 
   244  0712                     	;# 
   245  0713                     	;# 
   246  0713                     	;# 
   247  0713                     	;# 
   248  0714                     	;# 
   249  0714                     	;# 
   250  0714                     	;# 
   251  0715                     	;# 
   252  0715                     	;# 
   253  0716                     	;# 
   254  0716                     	;# 
   255  0716                     	;# 
   256  0716                     	;# 
   257  0717                     	;# 
   258  0717                     	;# 
   259  0717                     	;# 
   260  0717                     	;# 
   261  0718                     	;# 
   262  0718                     	;# 
   263  0718                     	;# 
   264  0719                     	;# 
   265  0719                     	;# 
   266  0719                     	;# 
   267  0719                     	;# 
   268  071A                     	;# 
   269  071A                     	;# 
   270  071A                     	;# 
   271  071A                     	;# 
   272  071A                     	;# 
   273  071B                     	;# 
   274  071B                     	;# 
   275  071C                     	;# 
   276  071C                     	;# 
   277  071C                     	;# 
   278  071C                     	;# 
   279  071C                     	;# 
   280  071D                     	;# 
   281  071D                     	;# 
   282  071E                     	;# 
   283  071E                     	;# 
   284  0791                     	;# 
   285  0791                     	;# 
   286  0793                     	;# 
   287  0793                     	;# 
   288  0794                     	;# 
   289  0794                     	;# 
   290  0796                     	;# 
   291  0796                     	;# 
   292  0796                     	;# 
   293  0797                     	;# 
   294  0797                     	;# 
   295  0797                     	;# 
   296  0798                     	;# 
   297  0798                     	;# 
   298  0799                     	;# 
   299  0799                     	;# 
   300  0799                     	;# 
   301  079A                     	;# 
   302  079A                     	;# 
   303  079A                     	;# 
   304  079B                     	;# 
   305  079C                     	;# 
   306  079C                     	;# 
   307  079C                     	;# 
   308  079D                     	;# 
   309  079E                     	;# 
   310  079E                     	;# 
   311  0F8C                     	;# 
   312  0F8D                     	;# 
   313  0F91                     	;# 
   314  0F96                     	;# 
   315  0F97                     	;# 
   316  0F9C                     	;# 
   317  0F9D                     	;# 
   318  0F9E                     	;# 
   319  0FE3                     	;# 
   320  0FE4                     	;# 
   321  0FE5                     	;# 
   322  0FE6                     	;# 
   323  0FE7                     	;# 
   324  0FE8                     	;# 
   325  0FE9                     	;# 
   326  0FEA                     	;# 
   327  0FEB                     	;# 
   328  0FED                     	;# 
   329  0FEE                     	;# 
   330  0FEF                     	;# 
   331  0000                     	;# 
   332  0001                     	;# 
   333  0002                     	;# 
   334  0003                     	;# 
   335  0004                     	;# 
   336  0005                     	;# 
   337  0006                     	;# 
   338  0007                     	;# 
   339  0008                     	;# 
   340  0009                     	;# 
   341  000A                     	;# 
   342  000B                     	;# 
   343  000C                     	;# 
   344  000D                     	;# 
   345  000E                     	;# 
   346  0011                     	;# 
   347  0012                     	;# 
   348  0015                     	;# 
   349  0016                     	;# 
   350  0016                     	;# 
   351  0017                     	;# 
   352  0018                     	;# 
   353  0019                     	;# 
   354  001A                     	;# 
   355  001B                     	;# 
   356  001C                     	;# 
   357  008C                     	;# 
   358  008D                     	;# 
   359  008E                     	;# 
   360  0091                     	;# 
   361  0092                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0097                     	;# 
   365  0099                     	;# 
   366  009A                     	;# 
   367  009B                     	;# 
   368  009B                     	;# 
   369  009C                     	;# 
   370  009D                     	;# 
   371  009E                     	;# 
   372  009F                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  0116                     	;# 
   377  0117                     	;# 
   378  011D                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381  018E                     	;# 
   382  0191                     	;# 
   383  0191                     	;# 
   384  0192                     	;# 
   385  0193                     	;# 
   386  0193                     	;# 
   387  0194                     	;# 
   388  0195                     	;# 
   389  0196                     	;# 
   390  0199                     	;# 
   391  019A                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019C                     	;# 
   395  019D                     	;# 
   396  019E                     	;# 
   397  019F                     	;# 
   398  020C                     	;# 
   399  020D                     	;# 
   400  0211                     	;# 
   401  0211                     	;# 
   402  0212                     	;# 
   403  0212                     	;# 
   404  0213                     	;# 
   405  0213                     	;# 
   406  0214                     	;# 
   407  0214                     	;# 
   408  0215                     	;# 
   409  0215                     	;# 
   410  0215                     	;# 
   411  0216                     	;# 
   412  0216                     	;# 
   413  0217                     	;# 
   414  0217                     	;# 
   415  0391                     	;# 
   416  0392                     	;# 
   417  0393                     	;# 
   418  0394                     	;# 
   419  0395                     	;# 
   420  0396                     	;# 
   421  0611                     	;# 
   422  0612                     	;# 
   423  0613                     	;# 
   424  0613                     	;# 
   425  0614                     	;# 
   426  0615                     	;# 
   427  0616                     	;# 
   428  0616                     	;# 
   429  0711                     	;# 
   430  0711                     	;# 
   431  0711                     	;# 
   432  0712                     	;# 
   433  0712                     	;# 
   434  0713                     	;# 
   435  0713                     	;# 
   436  0713                     	;# 
   437  0714                     	;# 
   438  0714                     	;# 
   439  0714                     	;# 
   440  0715                     	;# 
   441  0715                     	;# 
   442  0716                     	;# 
   443  0716                     	;# 
   444  0716                     	;# 
   445  0716                     	;# 
   446  0717                     	;# 
   447  0717                     	;# 
   448  0717                     	;# 
   449  0717                     	;# 
   450  0718                     	;# 
   451  0718                     	;# 
   452  0718                     	;# 
   453  0719                     	;# 
   454  0719                     	;# 
   455  0719                     	;# 
   456  0719                     	;# 
   457  071A                     	;# 
   458  071A                     	;# 
   459  071A                     	;# 
   460  071A                     	;# 
   461  071A                     	;# 
   462  071B                     	;# 
   463  071B                     	;# 
   464  071C                     	;# 
   465  071C                     	;# 
   466  071C                     	;# 
   467  071C                     	;# 
   468  071C                     	;# 
   469  071D                     	;# 
   470  071D                     	;# 
   471  071E                     	;# 
   472  071E                     	;# 
   473  0791                     	;# 
   474  0791                     	;# 
   475  0793                     	;# 
   476  0793                     	;# 
   477  0794                     	;# 
   478  0794                     	;# 
   479  0796                     	;# 
   480  0796                     	;# 
   481  0796                     	;# 
   482  0797                     	;# 
   483  0797                     	;# 
   484  0797                     	;# 
   485  0798                     	;# 
   486  0798                     	;# 
   487  0799                     	;# 
   488  0799                     	;# 
   489  0799                     	;# 
   490  079A                     	;# 
   491  079A                     	;# 
   492  079A                     	;# 
   493  079B                     	;# 
   494  079C                     	;# 
   495  079C                     	;# 
   496  079C                     	;# 
   497  079D                     	;# 
   498  079E                     	;# 
   499  079E                     	;# 
   500  0F8C                     	;# 
   501  0F8D                     	;# 
   502  0F91                     	;# 
   503  0F96                     	;# 
   504  0F97                     	;# 
   505  0F9C                     	;# 
   506  0F9D                     	;# 
   507  0F9E                     	;# 
   508  0FE3                     	;# 
   509  0FE4                     	;# 
   510  0FE5                     	;# 
   511  0FE6                     	;# 
   512  0FE7                     	;# 
   513  0FE8                     	;# 
   514  0FE9                     	;# 
   515  0FEA                     	;# 
   516  0FEB                     	;# 
   517  0FED                     	;# 
   518  0FEE                     	;# 
   519  0FEF                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  000E                     	;# 
   535  0011                     	;# 
   536  0012                     	;# 
   537  0015                     	;# 
   538  0016                     	;# 
   539  0016                     	;# 
   540  0017                     	;# 
   541  0018                     	;# 
   542  0019                     	;# 
   543  001A                     	;# 
   544  001B                     	;# 
   545  001C                     	;# 
   546  008C                     	;# 
   547  008D                     	;# 
   548  008E                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0095                     	;# 
   552  0096                     	;# 
   553  0097                     	;# 
   554  0099                     	;# 
   555  009A                     	;# 
   556  009B                     	;# 
   557  009B                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  009F                     	;# 
   562  010C                     	;# 
   563  010D                     	;# 
   564  010E                     	;# 
   565  0116                     	;# 
   566  0117                     	;# 
   567  011D                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  018E                     	;# 
   571  0191                     	;# 
   572  0191                     	;# 
   573  0192                     	;# 
   574  0193                     	;# 
   575  0193                     	;# 
   576  0194                     	;# 
   577  0195                     	;# 
   578  0196                     	;# 
   579  0199                     	;# 
   580  019A                     	;# 
   581  019B                     	;# 
   582  019B                     	;# 
   583  019C                     	;# 
   584  019D                     	;# 
   585  019E                     	;# 
   586  019F                     	;# 
   587  020C                     	;# 
   588  020D                     	;# 
   589  0211                     	;# 
   590  0211                     	;# 
   591  0212                     	;# 
   592  0212                     	;# 
   593  0213                     	;# 
   594  0213                     	;# 
   595  0214                     	;# 
   596  0214                     	;# 
   597  0215                     	;# 
   598  0215                     	;# 
   599  0215                     	;# 
   600  0216                     	;# 
   601  0216                     	;# 
   602  0217                     	;# 
   603  0217                     	;# 
   604  0391                     	;# 
   605  0392                     	;# 
   606  0393                     	;# 
   607  0394                     	;# 
   608  0395                     	;# 
   609  0396                     	;# 
   610  0611                     	;# 
   611  0612                     	;# 
   612  0613                     	;# 
   613  0613                     	;# 
   614  0614                     	;# 
   615  0615                     	;# 
   616  0616                     	;# 
   617  0616                     	;# 
   618  0711                     	;# 
   619  0711                     	;# 
   620  0711                     	;# 
   621  0712                     	;# 
   622  0712                     	;# 
   623  0713                     	;# 
   624  0713                     	;# 
   625  0713                     	;# 
   626  0714                     	;# 
   627  0714                     	;# 
   628  0714                     	;# 
   629  0715                     	;# 
   630  0715                     	;# 
   631  0716                     	;# 
   632  0716                     	;# 
   633  0716                     	;# 
   634  0716                     	;# 
   635  0717                     	;# 
   636  0717                     	;# 
   637  0717                     	;# 
   638  0717                     	;# 
   639  0718                     	;# 
   640  0718                     	;# 
   641  0718                     	;# 
   642  0719                     	;# 
   643  0719                     	;# 
   644  0719                     	;# 
   645  0719                     	;# 
   646  071A                     	;# 
   647  071A                     	;# 
   648  071A                     	;# 
   649  071A                     	;# 
   650  071A                     	;# 
   651  071B                     	;# 
   652  071B                     	;# 
   653  071C                     	;# 
   654  071C                     	;# 
   655  071C                     	;# 
   656  071C                     	;# 
   657  071C                     	;# 
   658  071D                     	;# 
   659  071D                     	;# 
   660  071E                     	;# 
   661  071E                     	;# 
   662  0791                     	;# 
   663  0791                     	;# 
   664  0793                     	;# 
   665  0793                     	;# 
   666  0794                     	;# 
   667  0794                     	;# 
   668  0796                     	;# 
   669  0796                     	;# 
   670  0796                     	;# 
   671  0797                     	;# 
   672  0797                     	;# 
   673  0797                     	;# 
   674  0798                     	;# 
   675  0798                     	;# 
   676  0799                     	;# 
   677  0799                     	;# 
   678  0799                     	;# 
   679  079A                     	;# 
   680  079A                     	;# 
   681  079A                     	;# 
   682  079B                     	;# 
   683  079C                     	;# 
   684  079C                     	;# 
   685  079C                     	;# 
   686  079D                     	;# 
   687  079E                     	;# 
   688  079E                     	;# 
   689  0F8C                     	;# 
   690  0F8D                     	;# 
   691  0F91                     	;# 
   692  0F96                     	;# 
   693  0F97                     	;# 
   694  0F9C                     	;# 
   695  0F9D                     	;# 
   696  0F9E                     	;# 
   697  0FE3                     	;# 
   698  0FE4                     	;# 
   699  0FE5                     	;# 
   700  0FE6                     	;# 
   701  0FE7                     	;# 
   702  0FE8                     	;# 
   703  0FE9                     	;# 
   704  0FEA                     	;# 
   705  0FEB                     	;# 
   706  0FED                     	;# 
   707  0FEE                     	;# 
   708  0FEF                     	;# 
   709  0000                     	;# 
   710  0001                     	;# 
   711  0002                     	;# 
   712  0003                     	;# 
   713  0004                     	;# 
   714  0005                     	;# 
   715  0006                     	;# 
   716  0007                     	;# 
   717  0008                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  0011                     	;# 
   725  0012                     	;# 
   726  0015                     	;# 
   727  0016                     	;# 
   728  0016                     	;# 
   729  0017                     	;# 
   730  0018                     	;# 
   731  0019                     	;# 
   732  001A                     	;# 
   733  001B                     	;# 
   734  001C                     	;# 
   735  008C                     	;# 
   736  008D                     	;# 
   737  008E                     	;# 
   738  0091                     	;# 
   739  0092                     	;# 
   740  0095                     	;# 
   741  0096                     	;# 
   742  0097                     	;# 
   743  0099                     	;# 
   744  009A                     	;# 
   745  009B                     	;# 
   746  009B                     	;# 
   747  009C                     	;# 
   748  009D                     	;# 
   749  009E                     	;# 
   750  009F                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  0116                     	;# 
   755  0117                     	;# 
   756  011D                     	;# 
   757  018C                     	;# 
   758  018D                     	;# 
   759  018E                     	;# 
   760  0191                     	;# 
   761  0191                     	;# 
   762  0192                     	;# 
   763  0193                     	;# 
   764  0193                     	;# 
   765  0194                     	;# 
   766  0195                     	;# 
   767  0196                     	;# 
   768  0199                     	;# 
   769  019A                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019C                     	;# 
   773  019D                     	;# 
   774  019E                     	;# 
   775  019F                     	;# 
   776  020C                     	;# 
   777  020D                     	;# 
   778  0211                     	;# 
   779  0211                     	;# 
   780  0212                     	;# 
   781  0212                     	;# 
   782  0213                     	;# 
   783  0213                     	;# 
   784  0214                     	;# 
   785  0214                     	;# 
   786  0215                     	;# 
   787  0215                     	;# 
   788  0215                     	;# 
   789  0216                     	;# 
   790  0216                     	;# 
   791  0217                     	;# 
   792  0217                     	;# 
   793  0391                     	;# 
   794  0392                     	;# 
   795  0393                     	;# 
   796  0394                     	;# 
   797  0395                     	;# 
   798  0396                     	;# 
   799  0611                     	;# 
   800  0612                     	;# 
   801  0613                     	;# 
   802  0613                     	;# 
   803  0614                     	;# 
   804  0615                     	;# 
   805  0616                     	;# 
   806  0616                     	;# 
   807  0711                     	;# 
   808  0711                     	;# 
   809  0711                     	;# 
   810  0712                     	;# 
   811  0712                     	;# 
   812  0713                     	;# 
   813  0713                     	;# 
   814  0713                     	;# 
   815  0714                     	;# 
   816  0714                     	;# 
   817  0714                     	;# 
   818  0715                     	;# 
   819  0715                     	;# 
   820  0716                     	;# 
   821  0716                     	;# 
   822  0716                     	;# 
   823  0716                     	;# 
   824  0717                     	;# 
   825  0717                     	;# 
   826  0717                     	;# 
   827  0717                     	;# 
   828  0718                     	;# 
   829  0718                     	;# 
   830  0718                     	;# 
   831  0719                     	;# 
   832  0719                     	;# 
   833  0719                     	;# 
   834  0719                     	;# 
   835  071A                     	;# 
   836  071A                     	;# 
   837  071A                     	;# 
   838  071A                     	;# 
   839  071A                     	;# 
   840  071B                     	;# 
   841  071B                     	;# 
   842  071C                     	;# 
   843  071C                     	;# 
   844  071C                     	;# 
   845  071C                     	;# 
   846  071C                     	;# 
   847  071D                     	;# 
   848  071D                     	;# 
   849  071E                     	;# 
   850  071E                     	;# 
   851  0791                     	;# 
   852  0791                     	;# 
   853  0793                     	;# 
   854  0793                     	;# 
   855  0794                     	;# 
   856  0794                     	;# 
   857  0796                     	;# 
   858  0796                     	;# 
   859  0796                     	;# 
   860  0797                     	;# 
   861  0797                     	;# 
   862  0797                     	;# 
   863  0798                     	;# 
   864  0798                     	;# 
   865  0799                     	;# 
   866  0799                     	;# 
   867  0799                     	;# 
   868  079A                     	;# 
   869  079A                     	;# 
   870  079A                     	;# 
   871  079B                     	;# 
   872  079C                     	;# 
   873  079C                     	;# 
   874  079C                     	;# 
   875  079D                     	;# 
   876  079E                     	;# 
   877  079E                     	;# 
   878  0F8C                     	;# 
   879  0F8D                     	;# 
   880  0F91                     	;# 
   881  0F96                     	;# 
   882  0F97                     	;# 
   883  0F9C                     	;# 
   884  0F9D                     	;# 
   885  0F9E                     	;# 
   886  0FE3                     	;# 
   887  0FE4                     	;# 
   888  0FE5                     	;# 
   889  0FE6                     	;# 
   890  0FE7                     	;# 
   891  0FE8                     	;# 
   892  0FE9                     	;# 
   893  0FEA                     	;# 
   894  0FEB                     	;# 
   895  0FED                     	;# 
   896  0FEE                     	;# 
   897  0FEF                     	;# 
   898  0000                     	;# 
   899  0001                     	;# 
   900  0002                     	;# 
   901  0003                     	;# 
   902  0004                     	;# 
   903  0005                     	;# 
   904  0006                     	;# 
   905  0007                     	;# 
   906  0008                     	;# 
   907  0009                     	;# 
   908  000A                     	;# 
   909  000B                     	;# 
   910  000C                     	;# 
   911  000D                     	;# 
   912  000E                     	;# 
   913  0011                     	;# 
   914  0012                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0016                     	;# 
   918  0017                     	;# 
   919  0018                     	;# 
   920  0019                     	;# 
   921  001A                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  008C                     	;# 
   925  008D                     	;# 
   926  008E                     	;# 
   927  0091                     	;# 
   928  0092                     	;# 
   929  0095                     	;# 
   930  0096                     	;# 
   931  0097                     	;# 
   932  0099                     	;# 
   933  009A                     	;# 
   934  009B                     	;# 
   935  009B                     	;# 
   936  009C                     	;# 
   937  009D                     	;# 
   938  009E                     	;# 
   939  009F                     	;# 
   940  010C                     	;# 
   941  010D                     	;# 
   942  010E                     	;# 
   943  0116                     	;# 
   944  0117                     	;# 
   945  011D                     	;# 
   946  018C                     	;# 
   947  018D                     	;# 
   948  018E                     	;# 
   949  0191                     	;# 
   950  0191                     	;# 
   951  0192                     	;# 
   952  0193                     	;# 
   953  0193                     	;# 
   954  0194                     	;# 
   955  0195                     	;# 
   956  0196                     	;# 
   957  0199                     	;# 
   958  019A                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019C                     	;# 
   962  019D                     	;# 
   963  019E                     	;# 
   964  019F                     	;# 
   965  020C                     	;# 
   966  020D                     	;# 
   967  0211                     	;# 
   968  0211                     	;# 
   969  0212                     	;# 
   970  0212                     	;# 
   971  0213                     	;# 
   972  0213                     	;# 
   973  0214                     	;# 
   974  0214                     	;# 
   975  0215                     	;# 
   976  0215                     	;# 
   977  0215                     	;# 
   978  0216                     	;# 
   979  0216                     	;# 
   980  0217                     	;# 
   981  0217                     	;# 
   982  0391                     	;# 
   983  0392                     	;# 
   984  0393                     	;# 
   985  0394                     	;# 
   986  0395                     	;# 
   987  0396                     	;# 
   988  0611                     	;# 
   989  0612                     	;# 
   990  0613                     	;# 
   991  0613                     	;# 
   992  0614                     	;# 
   993  0615                     	;# 
   994  0616                     	;# 
   995  0616                     	;# 
   996  0711                     	;# 
   997  0711                     	;# 
   998  0711                     	;# 
   999  0712                     	;# 
  1000  0712                     	;# 
  1001  0713                     	;# 
  1002  0713                     	;# 
  1003  0713                     	;# 
  1004  0714                     	;# 
  1005  0714                     	;# 
  1006  0714                     	;# 
  1007  0715                     	;# 
  1008  0715                     	;# 
  1009  0716                     	;# 
  1010  0716                     	;# 
  1011  0716                     	;# 
  1012  0716                     	;# 
  1013  0717                     	;# 
  1014  0717                     	;# 
  1015  0717                     	;# 
  1016  0717                     	;# 
  1017  0718                     	;# 
  1018  0718                     	;# 
  1019  0718                     	;# 
  1020  0719                     	;# 
  1021  0719                     	;# 
  1022  0719                     	;# 
  1023  0719                     	;# 
  1024  071A                     	;# 
  1025  071A                     	;# 
  1026  071A                     	;# 
  1027  071A                     	;# 
  1028  071A                     	;# 
  1029  071B                     	;# 
  1030  071B                     	;# 
  1031  071C                     	;# 
  1032  071C                     	;# 
  1033  071C                     	;# 
  1034  071C                     	;# 
  1035  071C                     	;# 
  1036  071D                     	;# 
  1037  071D                     	;# 
  1038  071E                     	;# 
  1039  071E                     	;# 
  1040  0791                     	;# 
  1041  0791                     	;# 
  1042  0793                     	;# 
  1043  0793                     	;# 
  1044  0794                     	;# 
  1045  0794                     	;# 
  1046  0796                     	;# 
  1047  0796                     	;# 
  1048  0796                     	;# 
  1049  0797                     	;# 
  1050  0797                     	;# 
  1051  0797                     	;# 
  1052  0798                     	;# 
  1053  0798                     	;# 
  1054  0799                     	;# 
  1055  0799                     	;# 
  1056  0799                     	;# 
  1057  079A                     	;# 
  1058  079A                     	;# 
  1059  079A                     	;# 
  1060  079B                     	;# 
  1061  079C                     	;# 
  1062  079C                     	;# 
  1063  079C                     	;# 
  1064  079D                     	;# 
  1065  079E                     	;# 
  1066  079E                     	;# 
  1067  0F8C                     	;# 
  1068  0F8D                     	;# 
  1069  0F91                     	;# 
  1070  0F96                     	;# 
  1071  0F97                     	;# 
  1072  0F9C                     	;# 
  1073  0F9D                     	;# 
  1074  0F9E                     	;# 
  1075  0FE3                     	;# 
  1076  0FE4                     	;# 
  1077  0FE5                     	;# 
  1078  0FE6                     	;# 
  1079  0FE7                     	;# 
  1080  0FE8                     	;# 
  1081  0FE9                     	;# 
  1082  0FEA                     	;# 
  1083  0FEB                     	;# 
  1084  0FED                     	;# 
  1085  0FEE                     	;# 
  1086  0FEF                     	;# 
  1087  0000                     	;# 
  1088  0001                     	;# 
  1089  0002                     	;# 
  1090  0003                     	;# 
  1091  0004                     	;# 
  1092  0005                     	;# 
  1093  0006                     	;# 
  1094  0007                     	;# 
  1095  0008                     	;# 
  1096  0009                     	;# 
  1097  000A                     	;# 
  1098  000B                     	;# 
  1099  000C                     	;# 
  1100  000D                     	;# 
  1101  000E                     	;# 
  1102  0011                     	;# 
  1103  0012                     	;# 
  1104  0015                     	;# 
  1105  0016                     	;# 
  1106  0016                     	;# 
  1107  0017                     	;# 
  1108  0018                     	;# 
  1109  0019                     	;# 
  1110  001A                     	;# 
  1111  001B                     	;# 
  1112  001C                     	;# 
  1113  008C                     	;# 
  1114  008D                     	;# 
  1115  008E                     	;# 
  1116  0091                     	;# 
  1117  0092                     	;# 
  1118  0095                     	;# 
  1119  0096                     	;# 
  1120  0097                     	;# 
  1121  0099                     	;# 
  1122  009A                     	;# 
  1123  009B                     	;# 
  1124  009B                     	;# 
  1125  009C                     	;# 
  1126  009D                     	;# 
  1127  009E                     	;# 
  1128  009F                     	;# 
  1129  010C                     	;# 
  1130  010D                     	;# 
  1131  010E                     	;# 
  1132  0116                     	;# 
  1133  0117                     	;# 
  1134  011D                     	;# 
  1135  018C                     	;# 
  1136  018D                     	;# 
  1137  018E                     	;# 
  1138  0191                     	;# 
  1139  0191                     	;# 
  1140  0192                     	;# 
  1141  0193                     	;# 
  1142  0193                     	;# 
  1143  0194                     	;# 
  1144  0195                     	;# 
  1145  0196                     	;# 
  1146  0199                     	;# 
  1147  019A                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019C                     	;# 
  1151  019D                     	;# 
  1152  019E                     	;# 
  1153  019F                     	;# 
  1154  020C                     	;# 
  1155  020D                     	;# 
  1156  0211                     	;# 
  1157  0211                     	;# 
  1158  0212                     	;# 
  1159  0212                     	;# 
  1160  0213                     	;# 
  1161  0213                     	;# 
  1162  0214                     	;# 
  1163  0214                     	;# 
  1164  0215                     	;# 
  1165  0215                     	;# 
  1166  0215                     	;# 
  1167  0216                     	;# 
  1168  0216                     	;# 
  1169  0217                     	;# 
  1170  0217                     	;# 
  1171  0391                     	;# 
  1172  0392                     	;# 
  1173  0393                     	;# 
  1174  0394                     	;# 
  1175  0395                     	;# 
  1176  0396                     	;# 
  1177  0611                     	;# 
  1178  0612                     	;# 
  1179  0613                     	;# 
  1180  0613                     	;# 
  1181  0614                     	;# 
  1182  0615                     	;# 
  1183  0616                     	;# 
  1184  0616                     	;# 
  1185  0711                     	;# 
  1186  0711                     	;# 
  1187  0711                     	;# 
  1188  0712                     	;# 
  1189  0712                     	;# 
  1190  0713                     	;# 
  1191  0713                     	;# 
  1192  0713                     	;# 
  1193  0714                     	;# 
  1194  0714                     	;# 
  1195  0714                     	;# 
  1196  0715                     	;# 
  1197  0715                     	;# 
  1198  0716                     	;# 
  1199  0716                     	;# 
  1200  0716                     	;# 
  1201  0716                     	;# 
  1202  0717                     	;# 
  1203  0717                     	;# 
  1204  0717                     	;# 
  1205  0717                     	;# 
  1206  0718                     	;# 
  1207  0718                     	;# 
  1208  0718                     	;# 
  1209  0719                     	;# 
  1210  0719                     	;# 
  1211  0719                     	;# 
  1212  0719                     	;# 
  1213  071A                     	;# 
  1214  071A                     	;# 
  1215  071A                     	;# 
  1216  071A                     	;# 
  1217  071A                     	;# 
  1218  071B                     	;# 
  1219  071B                     	;# 
  1220  071C                     	;# 
  1221  071C                     	;# 
  1222  071C                     	;# 
  1223  071C                     	;# 
  1224  071C                     	;# 
  1225  071D                     	;# 
  1226  071D                     	;# 
  1227  071E                     	;# 
  1228  071E                     	;# 
  1229  0791                     	;# 
  1230  0791                     	;# 
  1231  0793                     	;# 
  1232  0793                     	;# 
  1233  0794                     	;# 
  1234  0794                     	;# 
  1235  0796                     	;# 
  1236  0796                     	;# 
  1237  0796                     	;# 
  1238  0797                     	;# 
  1239  0797                     	;# 
  1240  0797                     	;# 
  1241  0798                     	;# 
  1242  0798                     	;# 
  1243  0799                     	;# 
  1244  0799                     	;# 
  1245  0799                     	;# 
  1246  079A                     	;# 
  1247  079A                     	;# 
  1248  079A                     	;# 
  1249  079B                     	;# 
  1250  079C                     	;# 
  1251  079C                     	;# 
  1252  079C                     	;# 
  1253  079D                     	;# 
  1254  079E                     	;# 
  1255  079E                     	;# 
  1256  0F8C                     	;# 
  1257  0F8D                     	;# 
  1258  0F91                     	;# 
  1259  0F96                     	;# 
  1260  0F97                     	;# 
  1261  0F9C                     	;# 
  1262  0F9D                     	;# 
  1263  0F9E                     	;# 
  1264  0FE3                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  009F                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018E                     	;# 
  1327  0191                     	;# 
  1328  0191                     	;# 
  1329  0192                     	;# 
  1330  0193                     	;# 
  1331  0193                     	;# 
  1332  0194                     	;# 
  1333  0195                     	;# 
  1334  0196                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019C                     	;# 
  1340  019D                     	;# 
  1341  019E                     	;# 
  1342  019F                     	;# 
  1343  020C                     	;# 
  1344  020D                     	;# 
  1345  0211                     	;# 
  1346  0211                     	;# 
  1347  0212                     	;# 
  1348  0212                     	;# 
  1349  0213                     	;# 
  1350  0213                     	;# 
  1351  0214                     	;# 
  1352  0214                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0216                     	;# 
  1357  0216                     	;# 
  1358  0217                     	;# 
  1359  0217                     	;# 
  1360  0391                     	;# 
  1361  0392                     	;# 
  1362  0393                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0611                     	;# 
  1367  0612                     	;# 
  1368  0613                     	;# 
  1369  0613                     	;# 
  1370  0614                     	;# 
  1371  0615                     	;# 
  1372  0616                     	;# 
  1373  0616                     	;# 
  1374  0711                     	;# 
  1375  0711                     	;# 
  1376  0711                     	;# 
  1377  0712                     	;# 
  1378  0712                     	;# 
  1379  0713                     	;# 
  1380  0713                     	;# 
  1381  0713                     	;# 
  1382  0714                     	;# 
  1383  0714                     	;# 
  1384  0714                     	;# 
  1385  0715                     	;# 
  1386  0715                     	;# 
  1387  0716                     	;# 
  1388  0716                     	;# 
  1389  0716                     	;# 
  1390  0716                     	;# 
  1391  0717                     	;# 
  1392  0717                     	;# 
  1393  0717                     	;# 
  1394  0717                     	;# 
  1395  0718                     	;# 
  1396  0718                     	;# 
  1397  0718                     	;# 
  1398  0719                     	;# 
  1399  0719                     	;# 
  1400  0719                     	;# 
  1401  0719                     	;# 
  1402  071A                     	;# 
  1403  071A                     	;# 
  1404  071A                     	;# 
  1405  071A                     	;# 
  1406  071A                     	;# 
  1407  071B                     	;# 
  1408  071B                     	;# 
  1409  071C                     	;# 
  1410  071C                     	;# 
  1411  071C                     	;# 
  1412  071C                     	;# 
  1413  071C                     	;# 
  1414  071D                     	;# 
  1415  071D                     	;# 
  1416  071E                     	;# 
  1417  071E                     	;# 
  1418  0791                     	;# 
  1419  0791                     	;# 
  1420  0793                     	;# 
  1421  0793                     	;# 
  1422  0794                     	;# 
  1423  0794                     	;# 
  1424  0796                     	;# 
  1425  0796                     	;# 
  1426  0796                     	;# 
  1427  0797                     	;# 
  1428  0797                     	;# 
  1429  0797                     	;# 
  1430  0798                     	;# 
  1431  0798                     	;# 
  1432  0799                     	;# 
  1433  0799                     	;# 
  1434  0799                     	;# 
  1435  079A                     	;# 
  1436  079A                     	;# 
  1437  079A                     	;# 
  1438  079B                     	;# 
  1439  079C                     	;# 
  1440  079C                     	;# 
  1441  079C                     	;# 
  1442  079D                     	;# 
  1443  079E                     	;# 
  1444  079E                     	;# 
  1445  0F8C                     	;# 
  1446  0F8D                     	;# 
  1447  0F91                     	;# 
  1448  0F96                     	;# 
  1449  0F97                     	;# 
  1450  0F9C                     	;# 
  1451  0F9D                     	;# 
  1452  0F9E                     	;# 
  1453  0FE3                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465  0000                     	;# 
  1466  0001                     	;# 
  1467  0002                     	;# 
  1468  0003                     	;# 
  1469  0004                     	;# 
  1470  0005                     	;# 
  1471  0006                     	;# 
  1472  0007                     	;# 
  1473  0008                     	;# 
  1474  0009                     	;# 
  1475  000A                     	;# 
  1476  000B                     	;# 
  1477  000C                     	;# 
  1478  000D                     	;# 
  1479  000E                     	;# 
  1480  0011                     	;# 
  1481  0012                     	;# 
  1482  0015                     	;# 
  1483  0016                     	;# 
  1484  0016                     	;# 
  1485  0017                     	;# 
  1486  0018                     	;# 
  1487  0019                     	;# 
  1488  001A                     	;# 
  1489  001B                     	;# 
  1490  001C                     	;# 
  1491  008C                     	;# 
  1492  008D                     	;# 
  1493  008E                     	;# 
  1494  0091                     	;# 
  1495  0092                     	;# 
  1496  0095                     	;# 
  1497  0096                     	;# 
  1498  0097                     	;# 
  1499  0099                     	;# 
  1500  009A                     	;# 
  1501  009B                     	;# 
  1502  009B                     	;# 
  1503  009C                     	;# 
  1504  009D                     	;# 
  1505  009E                     	;# 
  1506  009F                     	;# 
  1507  010C                     	;# 
  1508  010D                     	;# 
  1509  010E                     	;# 
  1510  0116                     	;# 
  1511  0117                     	;# 
  1512  011D                     	;# 
  1513  018C                     	;# 
  1514  018D                     	;# 
  1515  018E                     	;# 
  1516  0191                     	;# 
  1517  0191                     	;# 
  1518  0192                     	;# 
  1519  0193                     	;# 
  1520  0193                     	;# 
  1521  0194                     	;# 
  1522  0195                     	;# 
  1523  0196                     	;# 
  1524  0199                     	;# 
  1525  019A                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019C                     	;# 
  1529  019D                     	;# 
  1530  019E                     	;# 
  1531  019F                     	;# 
  1532  020C                     	;# 
  1533  020D                     	;# 
  1534  0211                     	;# 
  1535  0211                     	;# 
  1536  0212                     	;# 
  1537  0212                     	;# 
  1538  0213                     	;# 
  1539  0213                     	;# 
  1540  0214                     	;# 
  1541  0214                     	;# 
  1542  0215                     	;# 
  1543  0215                     	;# 
  1544  0215                     	;# 
  1545  0216                     	;# 
  1546  0216                     	;# 
  1547  0217                     	;# 
  1548  0217                     	;# 
  1549  0391                     	;# 
  1550  0392                     	;# 
  1551  0393                     	;# 
  1552  0394                     	;# 
  1553  0395                     	;# 
  1554  0396                     	;# 
  1555  0611                     	;# 
  1556  0612                     	;# 
  1557  0613                     	;# 
  1558  0613                     	;# 
  1559  0614                     	;# 
  1560  0615                     	;# 
  1561  0616                     	;# 
  1562  0616                     	;# 
  1563  0711                     	;# 
  1564  0711                     	;# 
  1565  0711                     	;# 
  1566  0712                     	;# 
  1567  0712                     	;# 
  1568  0713                     	;# 
  1569  0713                     	;# 
  1570  0713                     	;# 
  1571  0714                     	;# 
  1572  0714                     	;# 
  1573  0714                     	;# 
  1574  0715                     	;# 
  1575  0715                     	;# 
  1576  0716                     	;# 
  1577  0716                     	;# 
  1578  0716                     	;# 
  1579  0716                     	;# 
  1580  0717                     	;# 
  1581  0717                     	;# 
  1582  0717                     	;# 
  1583  0717                     	;# 
  1584  0718                     	;# 
  1585  0718                     	;# 
  1586  0718                     	;# 
  1587  0719                     	;# 
  1588  0719                     	;# 
  1589  0719                     	;# 
  1590  0719                     	;# 
  1591  071A                     	;# 
  1592  071A                     	;# 
  1593  071A                     	;# 
  1594  071A                     	;# 
  1595  071A                     	;# 
  1596  071B                     	;# 
  1597  071B                     	;# 
  1598  071C                     	;# 
  1599  071C                     	;# 
  1600  071C                     	;# 
  1601  071C                     	;# 
  1602  071C                     	;# 
  1603  071D                     	;# 
  1604  071D                     	;# 
  1605  071E                     	;# 
  1606  071E                     	;# 
  1607  0791                     	;# 
  1608  0791                     	;# 
  1609  0793                     	;# 
  1610  0793                     	;# 
  1611  0794                     	;# 
  1612  0794                     	;# 
  1613  0796                     	;# 
  1614  0796                     	;# 
  1615  0796                     	;# 
  1616  0797                     	;# 
  1617  0797                     	;# 
  1618  0797                     	;# 
  1619  0798                     	;# 
  1620  0798                     	;# 
  1621  0799                     	;# 
  1622  0799                     	;# 
  1623  0799                     	;# 
  1624  079A                     	;# 
  1625  079A                     	;# 
  1626  079A                     	;# 
  1627  079B                     	;# 
  1628  079C                     	;# 
  1629  079C                     	;# 
  1630  079C                     	;# 
  1631  079D                     	;# 
  1632  079E                     	;# 
  1633  079E                     	;# 
  1634  0F8C                     	;# 
  1635  0F8D                     	;# 
  1636  0F91                     	;# 
  1637  0F96                     	;# 
  1638  0F97                     	;# 
  1639  0F9C                     	;# 
  1640  0F9D                     	;# 
  1641  0F9E                     	;# 
  1642  0FE3                     	;# 
  1643  0FE4                     	;# 
  1644  0FE5                     	;# 
  1645  0FE6                     	;# 
  1646  0FE7                     	;# 
  1647  0FE8                     	;# 
  1648  0FE9                     	;# 
  1649  0FEA                     	;# 
  1650  0FEB                     	;# 
  1651  0FED                     	;# 
  1652  0FEE                     	;# 
  1653  0FEF                     	;# 
  1654  0000                     	;# 
  1655  0001                     	;# 
  1656  0002                     	;# 
  1657  0003                     	;# 
  1658  0004                     	;# 
  1659  0005                     	;# 
  1660  0006                     	;# 
  1661  0007                     	;# 
  1662  0008                     	;# 
  1663  0009                     	;# 
  1664  000A                     	;# 
  1665  000B                     	;# 
  1666  000C                     	;# 
  1667  000D                     	;# 
  1668  000E                     	;# 
  1669  0011                     	;# 
  1670  0012                     	;# 
  1671  0015                     	;# 
  1672  0016                     	;# 
  1673  0016                     	;# 
  1674  0017                     	;# 
  1675  0018                     	;# 
  1676  0019                     	;# 
  1677  001A                     	;# 
  1678  001B                     	;# 
  1679  001C                     	;# 
  1680  008C                     	;# 
  1681  008D                     	;# 
  1682  008E                     	;# 
  1683  0091                     	;# 
  1684  0092                     	;# 
  1685  0095                     	;# 
  1686  0096                     	;# 
  1687  0097                     	;# 
  1688  0099                     	;# 
  1689  009A                     	;# 
  1690  009B                     	;# 
  1691  009B                     	;# 
  1692  009C                     	;# 
  1693  009D                     	;# 
  1694  009E                     	;# 
  1695  009F                     	;# 
  1696  010C                     	;# 
  1697  010D                     	;# 
  1698  010E                     	;# 
  1699  0116                     	;# 
  1700  0117                     	;# 
  1701  011D                     	;# 
  1702  018C                     	;# 
  1703  018D                     	;# 
  1704  018E                     	;# 
  1705  0191                     	;# 
  1706  0191                     	;# 
  1707  0192                     	;# 
  1708  0193                     	;# 
  1709  0193                     	;# 
  1710  0194                     	;# 
  1711  0195                     	;# 
  1712  0196                     	;# 
  1713  0199                     	;# 
  1714  019A                     	;# 
  1715  019B                     	;# 
  1716  019B                     	;# 
  1717  019C                     	;# 
  1718  019D                     	;# 
  1719  019E                     	;# 
  1720  019F                     	;# 
  1721  020C                     	;# 
  1722  020D                     	;# 
  1723  0211                     	;# 
  1724  0211                     	;# 
  1725  0212                     	;# 
  1726  0212                     	;# 
  1727  0213                     	;# 
  1728  0213                     	;# 
  1729  0214                     	;# 
  1730  0214                     	;# 
  1731  0215                     	;# 
  1732  0215                     	;# 
  1733  0215                     	;# 
  1734  0216                     	;# 
  1735  0216                     	;# 
  1736  0217                     	;# 
  1737  0217                     	;# 
  1738  0391                     	;# 
  1739  0392                     	;# 
  1740  0393                     	;# 
  1741  0394                     	;# 
  1742  0395                     	;# 
  1743  0396                     	;# 
  1744  0611                     	;# 
  1745  0612                     	;# 
  1746  0613                     	;# 
  1747  0613                     	;# 
  1748  0614                     	;# 
  1749  0615                     	;# 
  1750  0616                     	;# 
  1751  0616                     	;# 
  1752  0711                     	;# 
  1753  0711                     	;# 
  1754  0711                     	;# 
  1755  0712                     	;# 
  1756  0712                     	;# 
  1757  0713                     	;# 
  1758  0713                     	;# 
  1759  0713                     	;# 
  1760  0714                     	;# 
  1761  0714                     	;# 
  1762  0714                     	;# 
  1763  0715                     	;# 
  1764  0715                     	;# 
  1765  0716                     	;# 
  1766  0716                     	;# 
  1767  0716                     	;# 
  1768  0716                     	;# 
  1769  0717                     	;# 
  1770  0717                     	;# 
  1771  0717                     	;# 
  1772  0717                     	;# 
  1773  0718                     	;# 
  1774  0718                     	;# 
  1775  0718                     	;# 
  1776  0719                     	;# 
  1777  0719                     	;# 
  1778  0719                     	;# 
  1779  0719                     	;# 
  1780  071A                     	;# 
  1781  071A                     	;# 
  1782  071A                     	;# 
  1783  071A                     	;# 
  1784  071A                     	;# 
  1785  071B                     	;# 
  1786  071B                     	;# 
  1787  071C                     	;# 
  1788  071C                     	;# 
  1789  071C                     	;# 
  1790  071C                     	;# 
  1791  071C                     	;# 
  1792  071D                     	;# 
  1793  071D                     	;# 
  1794  071E                     	;# 
  1795  071E                     	;# 
  1796  0791                     	;# 
  1797  0791                     	;# 
  1798  0793                     	;# 
  1799  0793                     	;# 
  1800  0794                     	;# 
  1801  0794                     	;# 
  1802  0796                     	;# 
  1803  0796                     	;# 
  1804  0796                     	;# 
  1805  0797                     	;# 
  1806  0797                     	;# 
  1807  0797                     	;# 
  1808  0798                     	;# 
  1809  0798                     	;# 
  1810  0799                     	;# 
  1811  0799                     	;# 
  1812  0799                     	;# 
  1813  079A                     	;# 
  1814  079A                     	;# 
  1815  079A                     	;# 
  1816  079B                     	;# 
  1817  079C                     	;# 
  1818  079C                     	;# 
  1819  079C                     	;# 
  1820  079D                     	;# 
  1821  079E                     	;# 
  1822  079E                     	;# 
  1823  0F8C                     	;# 
  1824  0F8D                     	;# 
  1825  0F91                     	;# 
  1826  0F96                     	;# 
  1827  0F97                     	;# 
  1828  0F9C                     	;# 
  1829  0F9D                     	;# 
  1830  0F9E                     	;# 
  1831  0FE3                     	;# 
  1832  0FE4                     	;# 
  1833  0FE5                     	;# 
  1834  0FE6                     	;# 
  1835  0FE7                     	;# 
  1836  0FE8                     	;# 
  1837  0FE9                     	;# 
  1838  0FEA                     	;# 
  1839  0FEB                     	;# 
  1840  0FED                     	;# 
  1841  0FEE                     	;# 
  1842  0FEF                     	;# 
  1843                           
  1844 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  1845  0000                     
  1846 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  1847  0000                     
  1848 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  1849  0000                     
  1850                           	psect	idataBANK1
  1851  0953                     __pidataBANK1:	
  1852                           
  1853                           ;initializer for _Button_StateMachine
  1854  0953  347F               	retlw	low _Button_State_Initializing
  1855  0954  340C               	retlw	high _Button_State_Initializing
  1856  0955  3472               	retlw	low _Button_State_NotPressed
  1857  0956  3401               	retlw	high _Button_State_NotPressed
  1858  0957  3458               	retlw	low _Button_State_Pressed
  1859  0958  340D               	retlw	high _Button_State_Pressed
  1860                           
  1861                           ;initializer for _callback_notPressed
  1862  0959  3432               	retlw	low _Button_DefaultCallback
  1863  095A  3416               	retlw	high _Button_DefaultCallback
  1864                           
  1865                           ;initializer for _callback_pressed
  1866  095B  3432               	retlw	low _Button_DefaultCallback
  1867  095C  3416               	retlw	high _Button_DefaultCallback
  1868                           
  1869                           ;initializer for _callback_sampled
  1870  095D  3404               	retlw	low _Sensor_DefaultCallback
  1871  095E  3400               	retlw	high _Sensor_DefaultCallback
  1872                           
  1873                           ;initializer for _sample_period
  1874  095F  34AE               	retlw	174
  1875                           
  1876                           ;initializer for _mtouch_sensor
  1877  0960  3400               	retlw	0
  1878  0961  3469               	retlw	105
  1879  0962  3430               	retlw	48
  1880  0963  3410               	retlw	16
  1881  0964  3420               	retlw	32
  1882  0965  3400               	retlw	0
  1883  0966  3400               	retlw	0
  1884  0967  3400               	retlw	0
  1885  0968  3400               	retlw	0
  1886  0969  3401               	retlw	1
  1887  096A  3461               	retlw	97
  1888  096B  3430               	retlw	48
  1889  096C  3410               	retlw	16
  1890  096D  3420               	retlw	32
  1891  096E  3400               	retlw	0
  1892  096F  3400               	retlw	0
  1893  0970  3400               	retlw	0
  1894  0971  3400               	retlw	0
  1895  0972  3402               	retlw	2
  1896  0973  3431               	retlw	49
  1897  0974  3430               	retlw	48
  1898  0975  3410               	retlw	16
  1899  0976  3420               	retlw	32
  1900  0977  3400               	retlw	0
  1901  0978  3400               	retlw	0
  1902  0979  3400               	retlw	0
  1903  097A  3400               	retlw	0
  1904                           
  1905                           	psect	stringtext1
  1906  181A                     __pstringtext1:	
  1907  181A                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  1908  181A  3400               	retlw	0
  1909  181B  340D               	retlw	13
  1910  181C  341C               	retlw	28
  1911  181D  341E               	retlw	30
  1912  181E  3417               	retlw	23
  1913  181F                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  1914                           
  1915                           	psect	stringtext2
  1916  1824                     __pstringtext2:	
  1917  1824                     _sensor_scan_group:	
  1918  1824  34BF               	retlw	low ((_mtouch_sensor| 0+18))
  1919  1825  34AD               	retlw	low (_mtouch_sensor| 0)
  1920  1826  3400               	retlw	0
  1921  1827  34B6               	retlw	low ((_mtouch_sensor| 0+9))
  1922  1828                     __end_of_sensor_scan_group:	
  1923                           
  1924                           	psect	stringtext3
  1925  1000                     __pstringtext3:	
  1926  1000                     _mtouch_button_init:	
  1927  1000  3400               	retlw	0
  1928  1001  3401               	retlw	1
  1929  1002  3400               	retlw	0
  1930  1003  3400               	retlw	0
  1931  1004  3400               	retlw	0
  1932  1005  3400               	retlw	0
  1933  1006  3400               	retlw	0
  1934  1007  3400               	retlw	0
  1935  1008  3400               	retlw	0
  1936  1009  3400               	retlw	0
  1937  100A  3400               	retlw	0
  1938  100B  3400               	retlw	0
  1939  100C  3400               	retlw	0
  1940  100D  3400               	retlw	0
  1941  100E  3464               	retlw	100
  1942  100F  3401               	retlw	1
  1943  1010  3401               	retlw	1
  1944  1011  3400               	retlw	0
  1945  1012  3400               	retlw	0
  1946  1013  3400               	retlw	0
  1947  1014  3400               	retlw	0
  1948  1015  3400               	retlw	0
  1949  1016  3400               	retlw	0
  1950  1017  3400               	retlw	0
  1951  1018  3400               	retlw	0
  1952  1019  3400               	retlw	0
  1953  101A  3400               	retlw	0
  1954  101B  3400               	retlw	0
  1955  101C  3400               	retlw	0
  1956  101D  3400               	retlw	0
  1957  101E  3464               	retlw	100
  1958  101F  3401               	retlw	1
  1959  1020  3402               	retlw	2
  1960  1021  3402               	retlw	2
  1961  1022  3400               	retlw	0
  1962  1023  3400               	retlw	0
  1963  1024  3400               	retlw	0
  1964  1025  3400               	retlw	0
  1965  1026  3400               	retlw	0
  1966  1027  3400               	retlw	0
  1967  1028  3400               	retlw	0
  1968  1029  3400               	retlw	0
  1969  102A  3400               	retlw	0
  1970  102B  3400               	retlw	0
  1971  102C  3400               	retlw	0
  1972  102D  3400               	retlw	0
  1973  102E  3464               	retlw	100
  1974  102F  3401               	retlw	1
  1975  1030                     __end_of_mtouch_button_init:	
  1976                           
  1977                           	psect	nvBANK1
  1978  00EE                     __pnvBANK1:	
  1979  00EE                     _EUSART_FramingErrorHandler:	
  1980  00EE                     	ds	2
  1981                           
  1982                           	psect	nvBANK3
  1983  01A0                     __pnvBANK3:	
  1984  01A0                     _EUSART_ErrorHandler:	
  1985  01A0                     	ds	2
  1986  01A2                     _EUSART_OverrunErrorHandler:	
  1987  01A2                     	ds	2
  1988  001C                     _T2CON	set	28
  1989  001A                     _TMR2	set	26
  1990  001B                     _PR2	set	27
  1991  000B                     _INTCONbits	set	11
  1992  0012                     _PIR2bits	set	18
  1993  0011                     _PIR1bits	set	17
  1994  001C                     _T2CONbits	set	28
  1995  005F                     _GIE	set	95
  1996  0095                     _OPTION_REGbits	set	149
  1997  008E                     _TRISC	set	142
  1998  008D                     _TRISB	set	141
  1999  008C                     _TRISA	set	140
  2000  0097                     _WDTCON	set	151
  2001  0099                     _OSCCON	set	153
  2002  011D                     _APFCON	set	285
  2003  010E                     _LATC	set	270
  2004  010D                     _LATB	set	269
  2005  010C                     _LATA	set	268
  2006  0116                     _BORCON	set	278
  2007  011D                     _APFCONbits	set	285
  2008  019A                     _TXREG	set	410
  2009  0199                     _RCREG	set	409
  2010  019D                     _RCSTAbits	set	413
  2011  019E                     _TXSTAbits	set	414
  2012  019C                     _SPBRGH	set	412
  2013  019B                     _SPBRGL	set	411
  2014  019E                     _TXSTA	set	414
  2015  019D                     _RCSTA	set	413
  2016  019F                     _BAUDCON	set	415
  2017  018C                     _ANSELA	set	396
  2018  018D                     _ANSELB	set	397
  2019  018E                     _ANSELC	set	398
  2020  020C                     _WPUA	set	524
  2021  020D                     _WPUB	set	525
  2022  071A                     _AAD1RES0	set	1818
  2023  0711                     _AD1CON0bits	set	1809
  2024  0714                     _AAD1CON3	set	1812
  2025  0713                     _AD1CON2	set	1811
  2026  0717                     _AD1ACQCON	set	1815
  2027  0716                     _AD1PRECON	set	1814
  2028  0718                     _AAD1GRD	set	1816
  2029  0713                     _AAD1CON2	set	1811
  2030  0719                     _AAD1CAP	set	1817
  2031  0714                     _AD1CON3	set	1812
  2032  0712                     _ADCOMCON	set	1810
  2033  0711                     _AD1CON0	set	1809
  2034  079A                     _AAD2RES0	set	1946
  2035  0791                     _AD2CON0bits	set	1937
  2036  0797                     _AD2ACQCON	set	1943
  2037  0796                     _AD2PRECON	set	1942
  2038  0794                     _AAD2CON3	set	1940
  2039  0798                     _AAD2GRD	set	1944
  2040  0793                     _AD2CON2	set	1939
  2041  0794                     _AD2CON3	set	1940
  2042  0791                     _AD2CON0	set	1937
  2043                           
  2044                           	psect	stringtext4
  2045  1800                     __pstringtext4:	
  2046  1800                     STR_1:	
  2047  1800  342D               	retlw	45	;'-'
  2048  1801  342D               	retlw	45	;'-'
  2049  1802  342D               	retlw	45	;'-'
  2050  1803  342D               	retlw	45	;'-'
  2051  1804  342D               	retlw	45	;'-'
  2052  1805  342D               	retlw	45	;'-'
  2053  1806  3425               	retlw	37	;'%'
  2054  1807  3464               	retlw	100	;'d'
  2055  1808  342D               	retlw	45	;'-'
  2056  1809  342D               	retlw	45	;'-'
  2057  180A  342D               	retlw	45	;'-'
  2058  180B  342D               	retlw	45	;'-'
  2059  180C  342D               	retlw	45	;'-'
  2060  180D  342D               	retlw	45	;'-'
  2061  180E  342D               	retlw	45	;'-'
  2062  180F  342D               	retlw	45	;'-'
  2063  1810  342D               	retlw	45	;'-'
  2064  1811  340D               	retlw	13
  2065  1812  340A               	retlw	10
  2066  1813  3400               	retlw	0
  2067                           
  2068                           	psect	stringtext5
  2069  1814                     __pstringtext5:	
  2070  1814                     STR_4:	
  2071  1814  344F               	retlw	79	;'O'
  2072  1815  3446               	retlw	70	;'F'
  2073  1816  3446               	retlw	70	;'F'
  2074  1817  340D               	retlw	13
  2075  1818  340A               	retlw	10
  2076  1819  3400               	retlw	0
  2077                           
  2078                           	psect	stringtext6
  2079  181F                     __pstringtext6:	
  2080  181F                     STR_3:	
  2081  181F  344F               	retlw	79	;'O'
  2082  1820  344E               	retlw	78	;'N'
  2083  1821  340D               	retlw	13
  2084  1822  340A               	retlw	10
  2085  1823  3400               	retlw	0
  2086                           
  2087                           	psect	stringtext7
  2088  0000                     __pstringtext7:	
  2089  1800                     
  2090                           ; #config settings
  2091  0000                     
  2092                           	psect	cinit
  2093  07E2                     start_initialization:	
  2094  07E2                     __initialization:	
  2095                           
  2096                           ; Initialize objects allocated to BANK1
  2097  07E2  3053               	movlw	low __pidataBANK1
  2098  07E3  0084               	movwf	4
  2099  07E4  3089               	movlw	(high __pidataBANK1)| (0+128)
  2100  07E5  0085               	movwf	5
  2101  07E6  30A0               	movlw	low __pdataBANK1
  2102  07E7  0086               	movwf	6
  2103  07E8  3000               	movlw	high __pdataBANK1
  2104  07E9  0087               	movwf	7
  2105  07EA  3028               	movlw	40
  2106  07EB  3196  267A  3187   	fcall	init_ram
  2107                           
  2108                           ; Clear objects allocated to BANK1
  2109  07EE  30C8               	movlw	low __pbssBANK1
  2110  07EF  0084               	movwf	4
  2111  07F0  3000               	movlw	high __pbssBANK1
  2112  07F1  0085               	movwf	5
  2113  07F2  3017               	movlw	23
  2114  07F3  3196  2674  3187   	fcall	clear_ram0
  2115                           
  2116                           ; Clear objects allocated to BANK2
  2117  07F6  3020               	movlw	low __pbssBANK2
  2118  07F7  0084               	movwf	4
  2119  07F8  3001               	movlw	high __pbssBANK2
  2120  07F9  0085               	movwf	5
  2121  07FA  3050               	movlw	80
  2122  07FB  3196  2674         	fcall	clear_ram0
  2123  07FD                     end_of_initialization:	
  2124                           ;End of C runtime variable initialization code
  2125                           
  2126  07FD                     __end_of__initialization:	
  2127  07FD  0020               	movlb	0
  2128  07FE  318C  2CEA         	ljmp	_main	;jump to C main() function
  2129                           
  2130                           	psect	bssBANK1
  2131  00C8                     __pbssBANK1:	
  2132  00C8                     _packet_sample:	
  2133  00C8                     	ds	4
  2134  00CC                     _nout:	
  2135  00CC                     	ds	2
  2136  00CE                     _width:	
  2137  00CE                     	ds	2
  2138  00D0                     _prec:	
  2139  00D0                     	ds	2
  2140  00D2                     _flags:	
  2141  00D2                     	ds	2
  2142  00D4                     _count:	
  2143  00D4                     	ds	2
  2144  00D6                     _user_touch:	
  2145  00D6                     	ds	2
  2146  00D8                     _packet_noise:	
  2147  00D8                     	ds	2
  2148  00DA                     _eusartRxLastError:	
  2149  00DA                     	ds	1
  2150  00DB                     _value:	
  2151  00DB                     	ds	1
  2152  00DC                     _sensor_globalFlags:	
  2153  00DC                     	ds	1
  2154  00DD                     _lowpowerActivated:	
  2155  00DD                     	ds	1
  2156  00DE                     _mtouch_time_toScan:	
  2157  00DE                     	ds	1
  2158                           
  2159                           	psect	dataBANK1
  2160  00A0                     __pdataBANK1:	
  2161  00A0                     _Button_StateMachine:	
  2162  00A0                     	ds	6
  2163  00A6                     _callback_notPressed:	
  2164  00A6                     	ds	2
  2165  00A8                     _callback_pressed:	
  2166  00A8                     	ds	2
  2167  00AA                     _callback_sampled:	
  2168  00AA                     	ds	2
  2169  00AC                     _sample_period:	
  2170  00AC                     	ds	1
  2171  00AD                     _mtouch_sensor:	
  2172  00AD                     	ds	27
  2173                           
  2174                           	psect	bssBANK2
  2175  0120                     __pbssBANK2:	
  2176  0120                     _mtouch_button:	
  2177  0120                     	ds	48
  2178  0150                     _dbuf:	
  2179  0150                     	ds	32
  2180                           
  2181                           	psect	inittext
  2182  167A                     init_ram:	
  2183  167A  00FE               	movwf	126
  2184  167B                     initloop:	
  2185  167B  0012               	moviw fsr0++
  2186  167C  001E               	movwi fsr1++
  2187  167D  0BFE               	decfsz	126,f
  2188  167E  2E7B               	goto	initloop
  2189  167F  3400               	retlw	0
  2190                           
  2191                           	psect	clrtext
  2192  1674                     clear_ram0:	
  2193                           ;	Called with FSR0 containing the base address, and
  2194                           ;	WREG with the size to clear
  2195                           
  2196  1674  0064               	clrwdt	;clear the watchdog before getting into this loop
  2197  1675                     clrloop0:	
  2198  1675  0180               	clrf	0	;clear RAM location pointed to by FSR
  2199  1676  3101               	addfsr 0,1
  2200  1677  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2201  1678  2E75               	goto	clrloop0	;have we reached the end yet?
  2202  1679  3400               	retlw	0	;all done for this memory range, return
  2203                           
  2204                           	psect	cstackBANK1
  2205  00DF                     __pcstackBANK1:	
  2206  00DF                     ??_myButtonPressedCallback:	
  2207                           
  2208                           ; 1 bytes @ 0x0
  2209  00DF                     	ds	2
  2210  00E1                     ??_Button_State_Initializing:	
  2211  00E1                     ??_Button_State_NotPressed:	
  2212                           ; 1 bytes @ 0x2
  2213                           
  2214  00E1                     ??_Button_State_Pressed:	
  2215                           ; 1 bytes @ 0x2
  2216                           
  2217                           
  2218                           ; 1 bytes @ 0x2
  2219  00E1                     	ds	4
  2220  00E5                     ??_Button_Service:	
  2221                           
  2222                           ; 1 bytes @ 0x6
  2223  00E5                     	ds	2
  2224  00E7                     Button_Service@name:	
  2225                           
  2226                           ; 1 bytes @ 0x8
  2227  00E7                     	ds	1
  2228  00E8                     Button_Service@button:	
  2229                           
  2230                           ; 1 bytes @ 0x9
  2231  00E8                     	ds	1
  2232  00E9                     ??_MTOUCH_Button_ServiceAll:	
  2233                           
  2234                           ; 1 bytes @ 0xA
  2235  00E9                     	ds	1
  2236  00EA                     MTOUCH_Button_ServiceAll@button:	
  2237                           
  2238                           ; 1 bytes @ 0xB
  2239  00EA                     	ds	1
  2240  00EB                     ??_MTOUCH_Service_Mainloop:	
  2241                           
  2242                           ; 1 bytes @ 0xC
  2243  00EB                     	ds	1
  2244  00EC                     ??_main:	
  2245                           
  2246                           ; 1 bytes @ 0xD
  2247  00EC                     	ds	2
  2248                           
  2249                           	psect	cstackCOMMON
  2250  0070                     __pcstackCOMMON:	
  2251  0070                     ?_MTOUCH_Service_Mainloop:	
  2252  0070                     ?_MTOUCH_Button_isPressed:	
  2253                           ; 1 bytes @ 0x0
  2254                           
  2255  0070                     ??_MTOUCH_Button_isPressed:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ?_MTOUCH_Button_InitializeAll:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270  0070                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276  0070                     ?_MTOUCH_Button_ServiceAll:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ?_MTOUCH_needReburst:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ??_MTOUCH_needReburst:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_MTOUCH_Tick:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ?_MTOUCH_Button_Tick:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_Sensor_DefaultCallback:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ?_MTOUCH_Sensor_Enable:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ?_Sensor_Sampled_Reset:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303  0070                     ??_Sensor_Sampled_Reset:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     ?_Sensor_Service:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     ?_Sensor_isEnabled:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     ??_Sensor_isEnabled:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315  0070                     ?_Sensor_RawSample_Update:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     ?_Sensor_setSampled:	
  2319                           ; 1 bytes @ 0x0
  2320                           
  2321  0070                     ??_Sensor_setSampled:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324  0070                     ?_Sensor_postAcquisitionProcess:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327  0070                     ?_Sensor_isActive:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330  0070                     ??_Sensor_isActive:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333  0070                     ?_Sensor_isCalibrated:	
  2334                           ; 1 bytes @ 0x0
  2335                           
  2336  0070                     ??_Sensor_isCalibrated:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339  0070                     ?_Sensor_setActive:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342  0070                     ??_Sensor_setActive:	
  2343                           ; 1 bytes @ 0x0
  2344                           
  2345  0070                     ?_Sensor_setInactive:	
  2346                           ; 1 bytes @ 0x0
  2347                           
  2348  0070                     ??_Sensor_setInactive:	
  2349                           ; 1 bytes @ 0x0
  2350                           
  2351  0070                     ?_Sensor_isCalibratingAcqTime:	
  2352                           ; 1 bytes @ 0x0
  2353                           
  2354  0070                     ??_Sensor_isCalibratingAcqTime:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0070                     ?_TMR2_LoadPeriodRegister:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0070                     ??_TMR2_LoadPeriodRegister:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363  0070                     ?_TMR2_StartTimer:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366  0070                     ??_TMR2_StartTimer:	
  2367                           ; 1 bytes @ 0x0
  2368                           
  2369  0070                     ?_TMR2_StopTimer:	
  2370                           ; 1 bytes @ 0x0
  2371                           
  2372  0070                     ??_TMR2_StopTimer:	
  2373                           ; 1 bytes @ 0x0
  2374                           
  2375  0070                     ?_Sensor_autoCalibration:	
  2376                           ; 1 bytes @ 0x0
  2377                           
  2378  0070                     ?_Sensor_setCalibratAcqTime:	
  2379                           ; 1 bytes @ 0x0
  2380                           
  2381  0070                     ??_Sensor_setCalibratAcqTime:	
  2382                           ; 1 bytes @ 0x0
  2383                           
  2384  0070                     ?_Sensor_setCalibrated:	
  2385                           ; 1 bytes @ 0x0
  2386                           
  2387  0070                     ??_Sensor_setCalibrated:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0070                     ?_memcpy:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  0070                     ?_Button_Service:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396  0070                     ?_Button_Reading_Update:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0070                     ?_Button_Deviation_Update:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0070                     ??_Button_Deviation_Update:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ?_Button_Baseline_Initialize:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_Button_Baseline_Update:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ??_Button_Baseline_Update:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?_Button_Tick_helper:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ??_Button_Tick_helper:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?_Button_Reading_Update_Helper:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ?_PIN_MANAGER_Initialize:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ??_PIN_MANAGER_Initialize:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?_OSCILLATOR_Initialize:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ??_OSCILLATOR_Initialize:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?_WDT_Initialize:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ??_WDT_Initialize:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     ?_EUSART_Initialize:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0070                     ?_EUSART_SetFramingErrorHandler:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0070                     ?_EUSART_SetOverrunErrorHandler:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0070                     ?_EUSART_SetErrorHandler:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0070                     ?_MTOUCH_Initialize:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0070                     ?_MTOUCH_Sensor_Initialize:	
  2457                           ; 1 bytes @ 0x0
  2458                           
  2459  0070                     ?_Sensor_getScanGroupIndex:	
  2460                           ; 1 bytes @ 0x0
  2461                           
  2462  0070                     ??_Sensor_getScanGroupIndex:	
  2463                           ; 1 bytes @ 0x0
  2464                           
  2465  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2466                           ; 1 bytes @ 0x0
  2467                           
  2468  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_MTOUCH_Button_Initialize:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_MTOUCH_Button_Buttonmask_Get:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_MTOUCH_Button_SetPressedCallback:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_TMR2_Initialize:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ??_TMR2_Initialize:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_SYSTEM_Initialize:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ?_main:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?_EUSART_Write:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ??_EUSART_Write:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?_putch:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ?___bmul:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ??___aodiv:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0070                     ??___aomod:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0070                     ?_strlen:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0070                     Sensor_DefaultCallback@sensor:	
  2517                           ; 2 bytes @ 0x0
  2518                           
  2519  0070                     Sensor_setActive@sensor:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0070                     Sensor_setInactive@sensor:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0070                     Sensor_isActive@sensor:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0070                     Sensor_isCalibrated@sensor:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0070                     Sensor_setCalibrated@sensor:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0070                     Sensor_setCalibratAcqTime@sensor:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     Sensor_isCalibratingAcqTime@sensor:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     Sensor_Sampled_Reset@sensor:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     Sensor_setSampled@sensor:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     TMR2_LoadPeriodRegister@periodVal:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     EUSART_Write@txData:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ___bmul@multiplicand:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     MTOUCH_Button_SetPressedCallback@callback:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     MTOUCH_Button_SetNotPressedCallback@callback:	
  2559                           ; 2 bytes @ 0x0
  2560                           
  2561  0070                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2562                           ; 2 bytes @ 0x0
  2563                           
  2564  0070                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2565                           ; 2 bytes @ 0x0
  2566                           
  2567  0070                     EUSART_SetErrorHandler@interruptHandler:	
  2568                           ; 2 bytes @ 0x0
  2569                           
  2570  0070                     memcpy@s1:	
  2571                           ; 2 bytes @ 0x0
  2572                           
  2573                           
  2574                           ; 2 bytes @ 0x0
  2575  0070                     	ds	1
  2576  0071                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2577  0071                     ??_Sensor_DefaultCallback:	
  2578                           ; 1 bytes @ 0x1
  2579                           
  2580  0071                     ?_Sensor_loadADCSettings:	
  2581                           ; 1 bytes @ 0x1
  2582                           
  2583  0071                     ??_putch:	
  2584                           ; 1 bytes @ 0x1
  2585                           
  2586  0071                     ??___bmul:	
  2587                           ; 1 bytes @ 0x1
  2588                           
  2589  0071                     Sensor_loadADCSettings@adc_index:	
  2590                           ; 1 bytes @ 0x1
  2591                           
  2592  0071                     Sensor_isEnabled@sensor:	
  2593                           ; 1 bytes @ 0x1
  2594                           
  2595  0071                     MTOUCH_Button_isPressed@name:	
  2596                           ; 1 bytes @ 0x1
  2597                           
  2598  0071                     putch@txData:	
  2599                           ; 1 bytes @ 0x1
  2600                           
  2601  0071                     ___aodiv@counter:	
  2602                           ; 1 bytes @ 0x1
  2603                           
  2604  0071                     ___aomod@counter:	
  2605                           ; 1 bytes @ 0x1
  2606                           
  2607                           
  2608                           ; 1 bytes @ 0x1
  2609  0071                     	ds	1
  2610  0072                     ??_EUSART_Initialize:	
  2611  0072                     ??_EUSART_SetFramingErrorHandler:	
  2612                           ; 1 bytes @ 0x2
  2613                           
  2614  0072                     ??_EUSART_SetOverrunErrorHandler:	
  2615                           ; 1 bytes @ 0x2
  2616                           
  2617  0072                     ??_EUSART_SetErrorHandler:	
  2618                           ; 1 bytes @ 0x2
  2619                           
  2620  0072                     ??_strlen:	
  2621                           ; 1 bytes @ 0x2
  2622                           
  2623  0072                     ??_Sensor_loadADCSettings:	
  2624                           ; 1 bytes @ 0x2
  2625                           
  2626  0072                     ??_MTOUCH_Button_Buttonmask_Get:	
  2627                           ; 1 bytes @ 0x2
  2628                           
  2629  0072                     ??_MTOUCH_Button_SetPressedCallback:	
  2630                           ; 1 bytes @ 0x2
  2631                           
  2632  0072                     ??_MTOUCH_Button_SetNotPressedCallback:	
  2633                           ; 1 bytes @ 0x2
  2634                           
  2635  0072                     ?_fputc:	
  2636                           ; 1 bytes @ 0x2
  2637                           
  2638  0072                     Sensor_getScanGroupIndex@sensor:	
  2639                           ; 2 bytes @ 0x2
  2640                           
  2641  0072                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  2642                           ; 1 bytes @ 0x2
  2643                           
  2644  0072                     Button_Tick_helper@button:	
  2645                           ; 1 bytes @ 0x2
  2646                           
  2647  0072                     ___bmul@product:	
  2648                           ; 1 bytes @ 0x2
  2649                           
  2650  0072                     ___aodiv@sign:	
  2651                           ; 1 bytes @ 0x2
  2652                           
  2653  0072                     ___aomod@sign:	
  2654                           ; 1 bytes @ 0x2
  2655                           
  2656  0072                     memcpy@n:	
  2657                           ; 1 bytes @ 0x2
  2658                           
  2659  0072                     fputc@c:	
  2660                           ; 2 bytes @ 0x2
  2661                           
  2662                           
  2663                           ; 2 bytes @ 0x2
  2664  0072                     	ds	1
  2665  0073                     ??_MTOUCH_Button_Tick:	
  2666  0073                     ?_abs:	
  2667                           ; 1 bytes @ 0x3
  2668                           
  2669  0073                     Sensor_getScanGroupIndex@sensorGroup:	
  2670                           ; 2 bytes @ 0x3
  2671                           
  2672  0073                     ___bmul@multiplier:	
  2673                           ; 1 bytes @ 0x3
  2674                           
  2675  0073                     strlen@a:	
  2676                           ; 1 bytes @ 0x3
  2677                           
  2678  0073                     abs@a:	
  2679                           ; 1 bytes @ 0x3
  2680                           
  2681  0073                     ___aodiv@quotient:	
  2682                           ; 2 bytes @ 0x3
  2683                           
  2684                           
  2685                           ; 8 bytes @ 0x3
  2686  0073                     	ds	1
  2687  0074                     ??_MTOUCH_Sensor_Enable:	
  2688  0074                     ??_MTOUCH_Sensor_Calibrate:	
  2689                           ; 1 bytes @ 0x4
  2690                           
  2691  0074                     ??_Sensor_RawSample_Update:	
  2692                           ; 1 bytes @ 0x4
  2693                           
  2694  0074                     ??_memcpy:	
  2695                           ; 1 bytes @ 0x4
  2696                           
  2697  0074                     ??_MTOUCH_Sensor_isCalibrated:	
  2698                           ; 1 bytes @ 0x4
  2699                           
  2700  0074                     ??_MTOUCH_Sensor_wasSampled:	
  2701                           ; 1 bytes @ 0x4
  2702                           
  2703  0074                     ?_MTOUCH_Sensor_RawSample_Get:	
  2704                           ; 1 bytes @ 0x4
  2705                           
  2706  0074                     MTOUCH_Button_Tick@i:	
  2707                           ; 2 bytes @ 0x4
  2708                           
  2709  0074                     MTOUCH_Button_Buttonmask_Get@output:	
  2710                           ; 1 bytes @ 0x4
  2711                           
  2712  0074                     fputc@fp:	
  2713                           ; 1 bytes @ 0x4
  2714                           
  2715  0074                     strlen@s:	
  2716                           ; 1 bytes @ 0x4
  2717                           
  2718                           
  2719                           ; 1 bytes @ 0x4
  2720  0074                     	ds	1
  2721  0075                     ??_MTOUCH_Tick:	
  2722  0075                     ??_abs:	
  2723                           ; 1 bytes @ 0x5
  2724                           
  2725  0075                     ??_fputc:	
  2726                           ; 1 bytes @ 0x5
  2727                           
  2728  0075                     Sensor_RawSample_Update@adcIndex:	
  2729                           ; 1 bytes @ 0x5
  2730                           
  2731  0075                     MTOUCH_Sensor_Enable@sensor:	
  2732                           ; 1 bytes @ 0x5
  2733                           
  2734  0075                     MTOUCH_Sensor_Calibrate@sensor:	
  2735                           ; 1 bytes @ 0x5
  2736                           
  2737  0075                     MTOUCH_Sensor_isCalibrated@sensor:	
  2738                           ; 1 bytes @ 0x5
  2739                           
  2740  0075                     MTOUCH_Sensor_wasSampled@sensor:	
  2741                           ; 1 bytes @ 0x5
  2742                           
  2743  0075                     MTOUCH_Button_Buttonmask_Get@i:	
  2744                           ; 1 bytes @ 0x5
  2745                           
  2746  0075                     _Sensor_loadADCSettings$554:	
  2747                           ; 1 bytes @ 0x5
  2748                           
  2749  0075                     memcpy@s:	
  2750                           ; 2 bytes @ 0x5
  2751                           
  2752                           
  2753                           ; 2 bytes @ 0x5
  2754  0075                     	ds	1
  2755  0076                     ??_MTOUCH_Sensor_Initialize:	
  2756  0076                     ??_MTOUCH_Sensor_RawSample_Get:	
  2757                           ; 1 bytes @ 0x6
  2758                           
  2759  0076                     ??_MTOUCH_Button_Initialize:	
  2760                           ; 1 bytes @ 0x6
  2761                           
  2762  0076                     Sensor_RawSample_Update@sensor:	
  2763                           ; 1 bytes @ 0x6
  2764                           
  2765  0076                     Button_Baseline_Update@button:	
  2766                           ; 1 bytes @ 0x6
  2767                           
  2768                           
  2769                           ; 1 bytes @ 0x6
  2770  0076                     	ds	1
  2771  0077                     ??_Sensor_postAcquisitionProcess:	
  2772  0077                     ??_Sensor_autoCalibration:	
  2773                           ; 1 bytes @ 0x7
  2774                           
  2775  0077                     MTOUCH_Sensor_Initialize@sensor:	
  2776                           ; 1 bytes @ 0x7
  2777                           
  2778  0077                     Sensor_loadADCSettings@addressOffset:	
  2779                           ; 1 bytes @ 0x7
  2780                           
  2781  0077                     MTOUCH_Sensor_RawSample_Get@name:	
  2782                           ; 1 bytes @ 0x7
  2783                           
  2784  0077                     memcpy@tmp:	
  2785                           ; 1 bytes @ 0x7
  2786                           
  2787                           
  2788                           ; 1 bytes @ 0x7
  2789  0077                     	ds	1
  2790  0078                     ??_MTOUCH_Sensor_InitializeAll:	
  2791  0078                     ??_Button_Baseline_Initialize:	
  2792                           ; 1 bytes @ 0x8
  2793                           
  2794  0078                     ??_Button_Reading_Update_Helper:	
  2795                           ; 1 bytes @ 0x8
  2796                           
  2797  0078                     Sensor_loadADCSettings@sensor:	
  2798                           ; 1 bytes @ 0x8
  2799                           
  2800  0078                     MTOUCH_Button_Initialize@name:	
  2801                           ; 1 bytes @ 0x8
  2802                           
  2803  0078                     memcpy@d1:	
  2804                           ; 1 bytes @ 0x8
  2805                           
  2806  0078                     Sensor_postAcquisitionProcess@deviation:	
  2807                           ; 1 bytes @ 0x8
  2808                           
  2809                           
  2810                           ; 2 bytes @ 0x8
  2811  0078                     	ds	1
  2812  0079                     MTOUCH_Sensor_InitializeAll@sensor:	
  2813  0079                     MTOUCH_Button_Initialize@button:	
  2814                           ; 1 bytes @ 0x9
  2815                           
  2816  0079                     memcpy@d:	
  2817                           ; 1 bytes @ 0x9
  2818                           
  2819                           
  2820                           ; 1 bytes @ 0x9
  2821  0079                     	ds	1
  2822  007A                     ??_MTOUCH_Button_InitializeAll:	
  2823  007A                     ?_fputs:	
  2824                           ; 1 bytes @ 0xA
  2825                           
  2826  007A                     Sensor_postAcquisitionProcess@adcIndex:	
  2827                           ; 2 bytes @ 0xA
  2828                           
  2829  007A                     Button_Reading_Update_Helper@button:	
  2830                           ; 1 bytes @ 0xA
  2831                           
  2832  007A                     fputs@fp:	
  2833                           ; 1 bytes @ 0xA
  2834                           
  2835                           
  2836                           ; 1 bytes @ 0xA
  2837  007A                     	ds	1
  2838  007B                     ??_Button_Reading_Update:	
  2839  007B                     ??_fputs:	
  2840                           ; 1 bytes @ 0xB
  2841                           
  2842  007B                     Sensor_postAcquisitionProcess@sensor:	
  2843                           ; 1 bytes @ 0xB
  2844                           
  2845  007B                     Sensor_autoCalibration@adcIndex:	
  2846                           ; 1 bytes @ 0xB
  2847                           
  2848  007B                     MTOUCH_Button_InitializeAll@button:	
  2849                           ; 1 bytes @ 0xB
  2850                           
  2851  007B                     Button_Reading_Update@button:	
  2852                           ; 1 bytes @ 0xB
  2853                           
  2854                           
  2855                           ; 1 bytes @ 0xB
  2856  007B                     	ds	1
  2857  007C                     ??_MTOUCH_Initialize:	
  2858  007C                     ??_SYSTEM_Initialize:	
  2859                           ; 1 bytes @ 0xC
  2860                           
  2861  007C                     Sensor_autoCalibration@sensor:	
  2862                           ; 1 bytes @ 0xC
  2863                           
  2864  007C                     Button_Baseline_Initialize@button:	
  2865                           ; 1 bytes @ 0xC
  2866                           
  2867                           
  2868                           ; 1 bytes @ 0xC
  2869  007C                     	ds	1
  2870  007D                     ?_Sensor_Acq_ExecutePacket:	
  2871  007D                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  2872                           ; 1 bytes @ 0xD
  2873                           
  2874                           
  2875                           ; 1 bytes @ 0xD
  2876  007D                     	ds	1
  2877  007E                     ??_Button_DefaultCallback:	
  2878  007E                     ??_myButtonReleasedCallback:	
  2879                           ; 1 bytes @ 0xE
  2880                           
  2881                           
  2882                           	psect	cstackBANK0
  2883  0020                     __pcstackBANK0:	
  2884                           ; 1 bytes @ 0xE
  2885                           
  2886  0020                     ?___aodiv:	
  2887  0020                     ?___aomod:	
  2888                           ; 8 bytes @ 0x0
  2889                           
  2890  0020                     Button_Deviation_Update@button:	
  2891                           ; 8 bytes @ 0x0
  2892                           
  2893  0020                     fputs@c:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0020                     ___aodiv@divisor:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0020                     ___aomod@divisor:	
  2900                           ; 8 bytes @ 0x0
  2901                           
  2902                           
  2903                           ; 8 bytes @ 0x0
  2904  0020                     	ds	1
  2905  0021                     fputs@i:	
  2906  0021                     Button_Deviation_Update@deviation:	
  2907                           ; 2 bytes @ 0x1
  2908                           
  2909                           
  2910                           ; 4 bytes @ 0x1
  2911  0021                     	ds	2
  2912  0023                     fputs@s:	
  2913                           
  2914                           ; 1 bytes @ 0x3
  2915  0023                     	ds	1
  2916  0024                     ?_pad:	
  2917  0024                     pad@buf:	
  2918                           ; 2 bytes @ 0x4
  2919                           
  2920                           
  2921                           ; 1 bytes @ 0x4
  2922  0024                     	ds	1
  2923  0025                     pad@p:	
  2924                           
  2925                           ; 2 bytes @ 0x5
  2926  0025                     	ds	2
  2927  0027                     ??_pad:	
  2928                           
  2929                           ; 1 bytes @ 0x7
  2930  0027                     	ds	1
  2931  0028                     pad@i:	
  2932  0028                     ___aodiv@dividend:	
  2933                           ; 2 bytes @ 0x8
  2934                           
  2935  0028                     ___aomod@dividend:	
  2936                           ; 8 bytes @ 0x8
  2937                           
  2938                           
  2939                           ; 8 bytes @ 0x8
  2940  0028                     	ds	2
  2941  002A                     pad@w:	
  2942                           
  2943                           ; 2 bytes @ 0xA
  2944  002A                     	ds	2
  2945  002C                     pad@fp:	
  2946                           
  2947                           ; 1 bytes @ 0xC
  2948  002C                     	ds	4
  2949  0030                     ??_Sensor_Acq_ExecutePacket:	
  2950  0030                     ?_dtoa:	
  2951                           ; 1 bytes @ 0x10
  2952                           
  2953  0030                     dtoa@d:	
  2954                           ; 2 bytes @ 0x10
  2955                           
  2956                           
  2957                           ; 8 bytes @ 0x10
  2958  0030                     	ds	1
  2959  0031                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  2960                           
  2961                           ; 1 bytes @ 0x11
  2962  0031                     	ds	1
  2963  0032                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  2964                           
  2965                           ; 1 bytes @ 0x12
  2966  0032                     	ds	1
  2967  0033                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  2968                           
  2969                           ; 1 bytes @ 0x13
  2970  0033                     	ds	1
  2971  0034                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  2972                           
  2973                           ; 1 bytes @ 0x14
  2974  0034                     	ds	1
  2975  0035                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  2976                           
  2977                           ; 1 bytes @ 0x15
  2978  0035                     	ds	1
  2979  0036                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  2980                           
  2981                           ; 1 bytes @ 0x16
  2982  0036                     	ds	1
  2983  0037                     Sensor_Acq_ExecutePacket@last_a:	
  2984                           
  2985                           ; 2 bytes @ 0x17
  2986  0037                     	ds	1
  2987  0038                     ??_dtoa:	
  2988                           
  2989                           ; 1 bytes @ 0x18
  2990  0038                     	ds	1
  2991  0039                     Sensor_Acq_ExecutePacket@last_b:	
  2992                           
  2993                           ; 2 bytes @ 0x19
  2994  0039                     	ds	2
  2995  003B                     Sensor_Acq_ExecutePacket@activeSensor:	
  2996  003B                     _dtoa$1628:	
  2997                           ; 1 bytes @ 0x1B
  2998                           
  2999                           
  3000                           ; 2 bytes @ 0x1B
  3001  003B                     	ds	1
  3002  003C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3003                           
  3004                           ; 1 bytes @ 0x1C
  3005  003C                     	ds	1
  3006  003D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3007  003D                     dtoa@p:	
  3008                           ; 1 bytes @ 0x1D
  3009                           
  3010                           
  3011                           ; 2 bytes @ 0x1D
  3012  003D                     	ds	1
  3013  003E                     ?_Sensor_Scanfrequency_Evaluation:	
  3014  003E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3015                           ; 1 bytes @ 0x1E
  3016                           
  3017                           
  3018                           ; 1 bytes @ 0x1E
  3019  003E                     	ds	1
  3020  003F                     ??_Sensor_Scanfrequency_Evaluation:	
  3021  003F                     dtoa@fp:	
  3022                           ; 1 bytes @ 0x1F
  3023                           
  3024                           
  3025                           ; 1 bytes @ 0x1F
  3026  003F                     	ds	1
  3027  0040                     dtoa@w:	
  3028                           
  3029                           ; 2 bytes @ 0x20
  3030  0040                     	ds	1
  3031  0041                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3032                           
  3033                           ; 2 bytes @ 0x21
  3034  0041                     	ds	1
  3035  0042                     dtoa@s:	
  3036                           
  3037                           ; 2 bytes @ 0x22
  3038  0042                     	ds	1
  3039  0043                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3040                           
  3041                           ; 1 bytes @ 0x23
  3042  0043                     	ds	1
  3043  0044                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3044  0044                     dtoa@n:	
  3045                           ; 1 bytes @ 0x24
  3046                           
  3047                           
  3048                           ; 8 bytes @ 0x24
  3049  0044                     	ds	1
  3050  0045                     Sensor_Scanfrequency_Evaluation@retry:	
  3051                           
  3052                           ; 1 bytes @ 0x25
  3053  0045                     	ds	1
  3054  0046                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3055                           
  3056                           ; 4 bytes @ 0x26
  3057  0046                     	ds	4
  3058  004A                     Sensor_Scanfrequency_Evaluation@i:	
  3059                           
  3060                           ; 1 bytes @ 0x2A
  3061  004A                     	ds	1
  3062  004B                     ?_Sensor_Acquisition:	
  3063  004B                     Sensor_Acquisition@sensor_adc2:	
  3064                           ; 1 bytes @ 0x2B
  3065                           
  3066                           
  3067                           ; 1 bytes @ 0x2B
  3068  004B                     	ds	1
  3069  004C                     ??_Sensor_Acquisition:	
  3070  004C                     dtoa@i:	
  3071                           ; 1 bytes @ 0x2C
  3072                           
  3073                           
  3074                           ; 2 bytes @ 0x2C
  3075  004C                     	ds	1
  3076  004D                     Sensor_Acquisition@retry:	
  3077                           
  3078                           ; 1 bytes @ 0x2D
  3079  004D                     	ds	1
  3080  004E                     ?_vfpfcnvrt:	
  3081  004E                     Sensor_Acquisition@sensor_adc1:	
  3082                           ; 2 bytes @ 0x2E
  3083                           
  3084  004E                     vfpfcnvrt@fmt:	
  3085                           ; 1 bytes @ 0x2E
  3086                           
  3087                           
  3088                           ; 1 bytes @ 0x2E
  3089  004E                     	ds	1
  3090  004F                     ??_Sensor_Service:	
  3091  004F                     vfpfcnvrt@ap:	
  3092                           ; 1 bytes @ 0x2F
  3093                           
  3094                           
  3095                           ; 1 bytes @ 0x2F
  3096  004F                     	ds	1
  3097  0050                     ??_vfpfcnvrt:	
  3098                           
  3099                           ; 1 bytes @ 0x30
  3100  0050                     	ds	2
  3101  0052                     Sensor_Service@scanGroup:	
  3102                           
  3103                           ; 1 bytes @ 0x32
  3104  0052                     	ds	1
  3105  0053                     Sensor_Service@error:	
  3106                           
  3107                           ; 1 bytes @ 0x33
  3108  0053                     	ds	1
  3109  0054                     Sensor_Service@sensor_adc1:	
  3110                           
  3111                           ; 1 bytes @ 0x34
  3112  0054                     	ds	1
  3113  0055                     Sensor_Service@sensor_adc2:	
  3114  0055                     vfpfcnvrt@ll:	
  3115                           ; 1 bytes @ 0x35
  3116                           
  3117                           
  3118                           ; 8 bytes @ 0x35
  3119  0055                     	ds	1
  3120  0056                     ??_MTOUCH_Sensor_SampleAll:	
  3121                           
  3122                           ; 1 bytes @ 0x36
  3123  0056                     	ds	1
  3124  0057                     MTOUCH_Sensor_SampleAll@group:	
  3125                           
  3126                           ; 1 bytes @ 0x37
  3127  0057                     	ds	6
  3128  005D                     vfpfcnvrt@fp:	
  3129                           
  3130                           ; 1 bytes @ 0x3D
  3131  005D                     	ds	1
  3132  005E                     ?_vfprintf:	
  3133  005E                     vfprintf@fmt:	
  3134                           ; 2 bytes @ 0x3E
  3135                           
  3136                           
  3137                           ; 2 bytes @ 0x3E
  3138  005E                     	ds	2
  3139  0060                     vfprintf@ap:	
  3140                           
  3141                           ; 1 bytes @ 0x40
  3142  0060                     	ds	1
  3143  0061                     ??_vfprintf:	
  3144                           
  3145                           ; 1 bytes @ 0x41
  3146  0061                     	ds	2
  3147  0063                     vfprintf@fp:	
  3148                           
  3149                           ; 1 bytes @ 0x43
  3150  0063                     	ds	1
  3151  0064                     vfprintf@cfmt:	
  3152                           
  3153                           ; 2 bytes @ 0x44
  3154  0064                     	ds	2
  3155  0066                     ?_printf:	
  3156  0066                     printf@fmt:	
  3157                           ; 2 bytes @ 0x46
  3158                           
  3159                           
  3160                           ; 2 bytes @ 0x46
  3161  0066                     	ds	4
  3162  006A                     ??_printf:	
  3163                           
  3164                           ; 1 bytes @ 0x4A
  3165  006A                     	ds	3
  3166  006D                     printf@ap:	
  3167                           
  3168                           ; 1 bytes @ 0x4D
  3169  006D                     	ds	1
  3170  006E                     ?_Button_DefaultCallback:	
  3171  006E                     ?_myButtonPressedCallback:	
  3172                           ; 1 bytes @ 0x4E
  3173                           
  3174  006E                     ?_myButtonReleasedCallback:	
  3175                           ; 1 bytes @ 0x4E
  3176                           
  3177  006E                     Button_DefaultCallback@button:	
  3178                           ; 1 bytes @ 0x4E
  3179                           
  3180  006E                     myButtonPressedCallback@button:	
  3181                           ; 1 bytes @ 0x4E
  3182                           
  3183  006E                     myButtonReleasedCallback@button:	
  3184                           ; 1 bytes @ 0x4E
  3185                           
  3186                           
  3187                           ; 1 bytes @ 0x4E
  3188  006E                     	ds	1
  3189  006F                     ?_Button_State_Initializing:	
  3190  006F                     ?_Button_State_NotPressed:	
  3191                           ; 1 bytes @ 0x4F
  3192                           
  3193  006F                     ?_Button_State_Pressed:	
  3194                           ; 1 bytes @ 0x4F
  3195                           
  3196  006F                     Button_State_Initializing@button:	
  3197                           ; 1 bytes @ 0x4F
  3198                           
  3199  006F                     Button_State_NotPressed@button:	
  3200                           ; 1 bytes @ 0x4F
  3201                           
  3202  006F                     Button_State_Pressed@button:	
  3203                           ; 1 bytes @ 0x4F
  3204                           
  3205                           
  3206                           ; 1 bytes @ 0x4F
  3207  006F                     	ds	1
  3208                           
  3209                           	psect	maintext
  3210  0CEA                     __pmaintext:	
  3211 ;;
  3212 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3213 ;;
  3214 ;; *************** function _main *****************
  3215 ;; Defined at:
  3216 ;;		line 12 in file "main.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : B1F/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3230 ;;      Params:         0       0       0       0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0       0
  3232 ;;      Temps:          0       0       2       0       0       0       0       0
  3233 ;;      Totals:         0       0       2       0       0       0       0       0
  3234 ;;Total ram usage:        2 bytes
  3235 ;; Hardware stack levels required when called:   14
  3236 ;; This function calls:
  3237 ;;		_MTOUCH_Button_Buttonmask_Get
  3238 ;;		_MTOUCH_Button_SetNotPressedCallback
  3239 ;;		_MTOUCH_Button_SetPressedCallback
  3240 ;;		_MTOUCH_Service_Mainloop
  3241 ;;		_SYSTEM_Initialize
  3242 ;;		_printf
  3243 ;; This function is called by:
  3244 ;;		Startup code after reset
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _main
  3250  0CEA                     _main:	
  3251                           
  3252                           ;main.c: 14:     SYSTEM_Initialize();
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3256  0CEA  3197  2785  318C   	fcall	_SYSTEM_Initialize
  3257                           
  3258                           ;main.c: 17:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3259  0CED  3021               	movlw	low _myButtonPressedCallback
  3260  0CEE  00F0               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3261  0CEF  300C               	movlw	high _myButtonPressedCallback
  3262  0CF0  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3263  0CF1  3196  2656  318C   	fcall	_MTOUCH_Button_SetPressedCallback
  3264                           
  3265                           ;main.c: 18:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3266  0CF4  303E               	movlw	low _myButtonReleasedCallback
  3267  0CF5  00F0               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3268  0CF6  3016               	movlw	high _myButtonReleasedCallback
  3269  0CF7  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3270  0CF8  3196  2650  318C   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3271                           
  3272                           ;main.c: 19:     value = 0;
  3273  0CFB  0021               	movlb	1	; select bank1
  3274  0CFC  01DB               	clrf	_value^(0+128)
  3275  0CFD                     l4281:	
  3276                           
  3277                           ;main.c: 20:     count = 0;
  3278  0CFD  01D4               	clrf	_count^(0+128)
  3279  0CFE  01D5               	clrf	(_count+1)^(0+128)
  3280  0CFF                     l752:	
  3281                           ;main.c: 21:     while (1)
  3282                           
  3283                           
  3284                           ;main.c: 22:     {;main.c: 23:         if(MTOUCH_Service_Mainloop())
  3285  0CFF  3188  2084  318C   	fcall	_MTOUCH_Service_Mainloop
  3286  0D02  3A00               	xorlw	0
  3287  0D03  1903               	skipnz
  3288  0D04  2CFF               	goto	l752
  3289                           
  3290                           ;main.c: 24:         {;main.c: 25:             if(user_touch.POWER)
  3291  0D05  0021               	movlb	1	; select bank1
  3292  0D06  1CD6               	btfss	_user_touch^(0+128),1
  3293  0D07  2CFF               	goto	l752
  3294                           
  3295                           ;main.c: 26:             {;main.c: 27:                 if(MTOUCH_Button_Buttonmask_Get()
      +                           == 1)
  3296  0D08  3188  20A0  318C   	fcall	_MTOUCH_Button_Buttonmask_Get
  3297  0D0B  3A01               	xorlw	1
  3298  0D0C  1D03               	skipz
  3299  0D0D  2D31               	goto	l4297
  3300                           
  3301                           ;main.c: 28:                 {;main.c: 29:                     count++;
  3302  0D0E  3001               	movlw	1
  3303  0D0F  0021               	movlb	1	; select bank1
  3304  0D10  07D4               	addwf	_count^(0+128),f
  3305  0D11  3000               	movlw	0
  3306  0D12  3DD5               	addwfc	(_count+1)^(0+128),f
  3307                           
  3308                           ;main.c: 30:                     if(count == 100)
  3309  0D13  3064               	movlw	100
  3310  0D14  0654               	xorwf	_count^(0+128),w
  3311  0D15  0455               	iorwf	(_count+1)^(0+128),w
  3312  0D16  1D03               	btfss	3,2
  3313  0D17  2CFF               	goto	l752
  3314                           
  3315                           ;main.c: 31:                     {;main.c: 32:                         printf("------%d-
      +                          --------\r\n",value++);
  3316  0D18  3000               	movlw	low (STR_1| (0+32768))
  3317  0D19  0020               	movlb	0	; select bank0
  3318  0D1A  00E6               	movwf	printf@fmt
  3319  0D1B  3098               	movlw	high (STR_1| (0+32768))
  3320  0D1C  00E7               	movwf	printf@fmt+1
  3321  0D1D  0021               	movlb	1	; select bank1
  3322  0D1E  085B               	movf	_value^(0+128),w
  3323  0D1F  00EC               	movwf	??_main^(0+128)
  3324  0D20  01ED               	clrf	(??_main^(0+128)+1)
  3325  0D21  086C               	movf	??_main^(0+128),w
  3326  0D22  0020               	movlb	0	; select bank0
  3327  0D23  00E8               	movwf	?_printf+2
  3328  0D24  0021               	movlb	1	; select bank1
  3329  0D25  086D               	movf	(??_main+1)^(0+128),w
  3330  0D26  0020               	movlb	0	; select bank0
  3331  0D27  00E9               	movwf	?_printf+3
  3332  0D28  3197  2763  318C   	fcall	_printf
  3333  0D2B  3001               	movlw	1
  3334  0D2C  0021               	movlb	1	; select bank1
  3335  0D2D  00EC               	movwf	??_main^(0+128)
  3336  0D2E  086C               	movf	??_main^(0+128),w
  3337  0D2F  07DB               	addwf	_value^(0+128),f
  3338  0D30  2CFD               	goto	l4281
  3339  0D31                     l4297:	
  3340  0D31  3188  20A0  318C   	fcall	_MTOUCH_Button_Buttonmask_Get
  3341  0D34  3A04               	xorlw	4
  3342  0D35  1D03               	skipz
  3343  0D36  2CFF               	goto	l752
  3344                           
  3345                           ;main.c: 37:                 {;main.c: 38:                     count++;
  3346  0D37  3001               	movlw	1
  3347  0D38  0021               	movlb	1	; select bank1
  3348  0D39  07D4               	addwf	_count^(0+128),f
  3349  0D3A  3000               	movlw	0
  3350  0D3B  3DD5               	addwfc	(_count+1)^(0+128),f
  3351                           
  3352                           ;main.c: 39:                     if(count == 100)
  3353  0D3C  3064               	movlw	100
  3354  0D3D  0654               	xorwf	_count^(0+128),w
  3355  0D3E  0455               	iorwf	(_count+1)^(0+128),w
  3356  0D3F  1D03               	btfss	3,2
  3357  0D40  2CFF               	goto	l752
  3358                           
  3359                           ;main.c: 40:                     {;main.c: 41:                         printf("------%d-
      +                          --------\r\n",value--);
  3360  0D41  3000               	movlw	low (STR_1| (0+32768))
  3361  0D42  0020               	movlb	0	; select bank0
  3362  0D43  00E6               	movwf	printf@fmt
  3363  0D44  3098               	movlw	high (STR_1| (0+32768))
  3364  0D45  00E7               	movwf	printf@fmt+1
  3365  0D46  0021               	movlb	1	; select bank1
  3366  0D47  085B               	movf	_value^(0+128),w
  3367  0D48  00EC               	movwf	??_main^(0+128)
  3368  0D49  01ED               	clrf	(??_main^(0+128)+1)
  3369  0D4A  086C               	movf	??_main^(0+128),w
  3370  0D4B  0020               	movlb	0	; select bank0
  3371  0D4C  00E8               	movwf	?_printf+2
  3372  0D4D  0021               	movlb	1	; select bank1
  3373  0D4E  086D               	movf	(??_main+1)^(0+128),w
  3374  0D4F  0020               	movlb	0	; select bank0
  3375  0D50  00E9               	movwf	?_printf+3
  3376  0D51  3197  2763  318C   	fcall	_printf
  3377  0D54  3001               	movlw	1
  3378  0D55  0021               	movlb	1	; select bank1
  3379  0D56  02DB               	subwf	_value^(0+128),f
  3380  0D57  2CFD               	goto	l4281
  3381  0D58                     __end_of_main:	
  3382                           ;main.c: 45:             }
  3383                           
  3384                           
  3385                           	psect	text1
  3386  1785                     __ptext1:	
  3387 ;; *************** function _SYSTEM_Initialize *****************
  3388 ;; Defined at:
  3389 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3403 ;;      Params:         0       0       0       0       0       0       0       0
  3404 ;;      Locals:         0       0       0       0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0
  3406 ;;      Totals:         0       0       0       0       0       0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    5
  3410 ;; This function calls:
  3411 ;;		_EUSART_Initialize
  3412 ;;		_MTOUCH_Initialize
  3413 ;;		_OSCILLATOR_Initialize
  3414 ;;		_PIN_MANAGER_Initialize
  3415 ;;		_TMR2_Initialize
  3416 ;;		_WDT_Initialize
  3417 ;; This function is called by:
  3418 ;;		_main
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _SYSTEM_Initialize
  3424  1785                     _SYSTEM_Initialize:	
  3425                           
  3426                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3427                           
  3428                           ;incstack = 0
  3429                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3430  1785  3180  2005  3197   	fcall	_PIN_MANAGER_Initialize
  3431                           
  3432                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3433  1788  3196  266E  3197   	fcall	_OSCILLATOR_Initialize
  3434                           
  3435                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3436  178B  3196  2642  3197   	fcall	_WDT_Initialize
  3437                           
  3438                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  3439  178E  3196  26A4  3197   	fcall	_TMR2_Initialize
  3440                           
  3441                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  3442  1791  3188  20BE  3197   	fcall	_EUSART_Initialize
  3443                           
  3444                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  3445  1794  3196  26C2         	fcall	_MTOUCH_Initialize
  3446  1796  0008               	return
  3447  1797                     __end_of_SYSTEM_Initialize:	
  3448                           
  3449                           	psect	text2
  3450  1642                     __ptext2:	
  3451 ;; *************** function _WDT_Initialize *****************
  3452 ;; Defined at:
  3453 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  1    wreg      void 
  3460 ;; Registers used:
  3461 ;;		wreg
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3467 ;;      Params:         0       0       0       0       0       0       0       0
  3468 ;;      Locals:         0       0       0       0       0       0       0       0
  3469 ;;      Temps:          0       0       0       0       0       0       0       0
  3470 ;;      Totals:         0       0       0       0       0       0       0       0
  3471 ;;Total ram usage:        0 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; This function calls:
  3474 ;;		Nothing
  3475 ;; This function is called by:
  3476 ;;		_SYSTEM_Initialize
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _WDT_Initialize
  3482  1642                     _WDT_Initialize:	
  3483                           
  3484                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in _WDT_Initialize: [wreg]
  3488  1642  3016               	movlw	22
  3489  1643  0021               	movlb	1	; select bank1
  3490  1644  0097               	movwf	23	;volatile
  3491  1645  0008               	return
  3492  1646                     __end_of_WDT_Initialize:	
  3493                           
  3494                           	psect	text3
  3495  16A4                     __ptext3:	
  3496 ;; *************** function _TMR2_Initialize *****************
  3497 ;; Defined at:
  3498 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3512 ;;      Params:         0       0       0       0       0       0       0       0
  3513 ;;      Locals:         0       0       0       0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0       0
  3515 ;;      Totals:         0       0       0       0       0       0       0       0
  3516 ;;Total ram usage:        0 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_SYSTEM_Initialize
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _TMR2_Initialize
  3527  16A4                     _TMR2_Initialize:	
  3528                           
  3529                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  3533  16A4  30FF               	movlw	255
  3534  16A5  0020               	movlb	0	; select bank0
  3535  16A6  009B               	movwf	27	;volatile
  3536                           
  3537                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  3538  16A7  019A               	clrf	26	;volatile
  3539                           
  3540                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  3541  16A8  1091               	bcf	17,1	;volatile
  3542                           
  3543                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  3544  16A9  3004               	movlw	4
  3545  16AA  009C               	movwf	28	;volatile
  3546  16AB  0008               	return
  3547  16AC                     __end_of_TMR2_Initialize:	
  3548                           
  3549                           	psect	text4
  3550  0005                     __ptext4:	
  3551 ;; *************** function _PIN_MANAGER_Initialize *****************
  3552 ;; Defined at:
  3553 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3567 ;;      Params:         0       0       0       0       0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0
  3570 ;;      Totals:         0       0       0       0       0       0       0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; This function calls:
  3574 ;;		Nothing
  3575 ;; This function is called by:
  3576 ;;		_SYSTEM_Initialize
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           
  3581                           ;psect for function _PIN_MANAGER_Initialize
  3582  0005                     _PIN_MANAGER_Initialize:	
  3583                           
  3584                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  3585                           
  3586                           ;incstack = 0
  3587                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3588  0005  3037               	movlw	55
  3589  0006  0022               	movlb	2	; select bank2
  3590  0007  008C               	movwf	12	;volatile
  3591                           
  3592                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  3593  0008  018D               	clrf	13	;volatile
  3594                           
  3595                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x01;
  3596  0009  3001               	movlw	1
  3597  000A  008E               	movwf	14	;volatile
  3598                           
  3599                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x0C;
  3600  000B  300C               	movlw	12
  3601  000C  0021               	movlb	1	; select bank1
  3602  000D  008C               	movwf	12	;volatile
  3603                           
  3604                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  3605  000E  3060               	movlw	96
  3606  000F  008D               	movwf	13	;volatile
  3607                           
  3608                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x52;
  3609  0010  3052               	movlw	82
  3610  0011  008E               	movwf	14	;volatile
  3611                           
  3612                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x1B;
  3613  0012  301B               	movlw	27
  3614  0013  0023               	movlb	3	; select bank3
  3615  0014  008E               	movwf	14	;volatile
  3616                           
  3617                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  3618  0015  3040               	movlw	64
  3619  0016  008D               	movwf	13	;volatile
  3620                           
  3621                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  3622  0017  3037               	movlw	55
  3623  0018  008C               	movwf	12	;volatile
  3624                           
  3625                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  3626  0019  0024               	movlb	4	; select bank4
  3627  001A  018D               	clrf	13	;volatile
  3628                           
  3629                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  3630  001B  018C               	clrf	12	;volatile
  3631                           
  3632                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  3633  001C  0021               	movlb	1	; select bank1
  3634  001D  1795               	bsf	21,7	;volatile
  3635                           
  3636                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  3637  001E  0022               	movlb	2	; select bank2
  3638  001F  019D               	clrf	29	;volatile
  3639  0020  0008               	return
  3640  0021                     __end_of_PIN_MANAGER_Initialize:	
  3641                           
  3642                           	psect	text5
  3643  166E                     __ptext5:	
  3644 ;; *************** function _OSCILLATOR_Initialize *****************
  3645 ;; Defined at:
  3646 ;;		line 61 in file "mcc_generated_files/mcc.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		wreg, status,2
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3660 ;;      Params:         0       0       0       0       0       0       0       0
  3661 ;;      Locals:         0       0       0       0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0       0
  3663 ;;      Totals:         0       0       0       0       0       0       0       0
  3664 ;;Total ram usage:        0 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; This function calls:
  3667 ;;		Nothing
  3668 ;; This function is called by:
  3669 ;;		_SYSTEM_Initialize
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           
  3674                           ;psect for function _OSCILLATOR_Initialize
  3675  166E                     _OSCILLATOR_Initialize:	
  3676                           
  3677                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  3678                           
  3679                           ;incstack = 0
  3680                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3681  166E  30F0               	movlw	240
  3682  166F  0021               	movlb	1	; select bank1
  3683  1670  0099               	movwf	25	;volatile
  3684                           
  3685                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  3686  1671  0022               	movlb	2	; select bank2
  3687  1672  0196               	clrf	22	;volatile
  3688  1673  0008               	return
  3689  1674                     __end_of_OSCILLATOR_Initialize:	
  3690                           
  3691                           	psect	text6
  3692  16C2                     __ptext6:	
  3693 ;; *************** function _MTOUCH_Initialize *****************
  3694 ;; Defined at:
  3695 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;		None
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;		None
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3709 ;;      Params:         0       0       0       0       0       0       0       0
  3710 ;;      Locals:         0       0       0       0       0       0       0       0
  3711 ;;      Temps:          0       0       0       0       0       0       0       0
  3712 ;;      Totals:         0       0       0       0       0       0       0       0
  3713 ;;Total ram usage:        0 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    4
  3716 ;; This function calls:
  3717 ;;		_MTOUCH_Button_InitializeAll
  3718 ;;		_MTOUCH_Sensor_InitializeAll
  3719 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  3720 ;;		_MTOUCH_Sensor_Scan_Initialize
  3721 ;; This function is called by:
  3722 ;;		_SYSTEM_Initialize
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           
  3727                           ;psect for function _MTOUCH_Initialize
  3728  16C2                     _MTOUCH_Initialize:	
  3729                           
  3730                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  3731                           
  3732                           ;incstack = 0
  3733                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3734  16C2  3197  2703  3196   	fcall	_MTOUCH_Sensor_InitializeAll
  3735                           
  3736                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  3737  16C5  3188  204F  3196   	fcall	_MTOUCH_Button_InitializeAll
  3738                           
  3739                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  3740  16C8  3197  2797  3196   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3741                           
  3742                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  3743  16CB  3197  2721         	fcall	_MTOUCH_Sensor_Scan_Initialize
  3744  16CD  0008               	return
  3745  16CE                     __end_of_MTOUCH_Initialize:	
  3746                           
  3747                           	psect	text7
  3748  1703                     __ptext7:	
  3749 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  3750 ;; Defined at:
  3751 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  sensor          1    9[COMMON] enum E2854
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3765 ;;      Params:         0       0       0       0       0       0       0       0
  3766 ;;      Locals:         1       0       0       0       0       0       0       0
  3767 ;;      Temps:          1       0       0       0       0       0       0       0
  3768 ;;      Totals:         2       0       0       0       0       0       0       0
  3769 ;;Total ram usage:        2 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    3
  3772 ;; This function calls:
  3773 ;;		_MTOUCH_Sensor_Initialize
  3774 ;; This function is called by:
  3775 ;;		_MTOUCH_Initialize
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           
  3780                           ;psect for function _MTOUCH_Sensor_InitializeAll
  3781  1703                     _MTOUCH_Sensor_InitializeAll:	
  3782                           
  3783                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3787  1703  01F9               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  3788  1704                     l3907:	
  3789                           
  3790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  3791  1704  0879               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  3792  1705  3197  27BF  3197   	fcall	_MTOUCH_Sensor_Initialize
  3793                           
  3794                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  3795  1708  3001               	movlw	1
  3796  1709  00F8               	movwf	??_MTOUCH_Sensor_InitializeAll
  3797  170A  0878               	movf	??_MTOUCH_Sensor_InitializeAll,w
  3798  170B  07F9               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  3799  170C  3003               	movlw	3
  3800  170D  0279               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  3801  170E  1803               	btfsc	3,0
  3802  170F  0008               	return
  3803  1710  2F04               	goto	l3907
  3804  1711                     __end_of_MTOUCH_Sensor_InitializeAll:	
  3805                           
  3806                           	psect	text8
  3807  17BF                     __ptext8:	
  3808 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  3809 ;; Defined at:
  3810 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  sensor          1    wreg     enum E2854
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  sensor          1    7[COMMON] enum E2854
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      enum E2858
  3817 ;; Registers used:
  3818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3824 ;;      Params:         0       0       0       0       0       0       0       0
  3825 ;;      Locals:         1       0       0       0       0       0       0       0
  3826 ;;      Temps:          1       0       0       0       0       0       0       0
  3827 ;;      Totals:         2       0       0       0       0       0       0       0
  3828 ;;Total ram usage:        2 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    2
  3831 ;; This function calls:
  3832 ;;		_MTOUCH_Sensor_Calibrate
  3833 ;;		_MTOUCH_Sensor_Enable
  3834 ;;		_Sensor_Sampled_Reset
  3835 ;;		___bmul
  3836 ;; This function is called by:
  3837 ;;		_MTOUCH_Sensor_InitializeAll
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _MTOUCH_Sensor_Initialize
  3843  17BF                     _MTOUCH_Sensor_Initialize:	
  3844                           
  3845                           ;incstack = 0
  3846                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  3847                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  3848  17BF  00F7               	movwf	MTOUCH_Sensor_Initialize@sensor
  3849                           
  3850                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  3851  17C0  0877               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3852  17C1  3197  2774  3197   	fcall	_MTOUCH_Sensor_Enable
  3853                           
  3854                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  3855  17C4  0877               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3856  17C5  3197  2752  3197   	fcall	_MTOUCH_Sensor_Calibrate
  3857                           
  3858                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  3859  17C8  3009               	movlw	9
  3860  17C9  00F6               	movwf	??_MTOUCH_Sensor_Initialize
  3861  17CA  0876               	movf	??_MTOUCH_Sensor_Initialize,w
  3862  17CB  00F0               	movwf	___bmul@multiplicand
  3863  17CC  0877               	movf	MTOUCH_Sensor_Initialize@sensor,w
  3864  17CD  3197  2741  3197   	fcall	___bmul
  3865  17D0  3EAD               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3866  17D1  3196  2695         	fcall	_Sensor_Sampled_Reset
  3867  17D3  0008               	return
  3868  17D4                     __end_of_MTOUCH_Sensor_Initialize:	
  3869                           
  3870                           	psect	text9
  3871  1774                     __ptext9:	
  3872 ;; *************** function _MTOUCH_Sensor_Enable *****************
  3873 ;; Defined at:
  3874 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  sensor          1    wreg     enum E2854
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  sensor          1    5[COMMON] enum E2854
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3888 ;;      Params:         0       0       0       0       0       0       0       0
  3889 ;;      Locals:         1       0       0       0       0       0       0       0
  3890 ;;      Temps:          1       0       0       0       0       0       0       0
  3891 ;;      Totals:         2       0       0       0       0       0       0       0
  3892 ;;Total ram usage:        2 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    1
  3895 ;; This function calls:
  3896 ;;		___bmul
  3897 ;; This function is called by:
  3898 ;;		_MTOUCH_Sensor_Initialize
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _MTOUCH_Sensor_Enable
  3904  1774                     _MTOUCH_Sensor_Enable:	
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3908                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  3909  1774  00F5               	movwf	MTOUCH_Sensor_Enable@sensor
  3910                           
  3911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  3912  1775  3003               	movlw	3
  3913  1776  0275               	subwf	MTOUCH_Sensor_Enable@sensor,w
  3914  1777  1803               	skipnc
  3915  1778  0008               	return
  3916                           
  3917                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  3918  1779  3009               	movlw	9
  3919  177A  00F4               	movwf	??_MTOUCH_Sensor_Enable
  3920  177B  0874               	movf	??_MTOUCH_Sensor_Enable,w
  3921  177C  00F0               	movwf	___bmul@multiplicand
  3922  177D  0875               	movf	MTOUCH_Sensor_Enable@sensor,w
  3923  177E  3197  2741         	fcall	___bmul
  3924  1780  3EB5               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  3925  1781  0086               	movwf	6
  3926  1782  0187               	clrf	7
  3927  1783  1581               	bsf	1,3
  3928  1784  0008               	return
  3929  1785                     __end_of_MTOUCH_Sensor_Enable:	
  3930                           
  3931                           	psect	text10
  3932  084F                     __ptext10:	
  3933 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  3934 ;; Defined at:
  3935 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  button          1   11[COMMON] enum E3069
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3949 ;;      Params:         0       0       0       0       0       0       0       0
  3950 ;;      Locals:         1       0       0       0       0       0       0       0
  3951 ;;      Temps:          1       0       0       0       0       0       0       0
  3952 ;;      Totals:         2       0       0       0       0       0       0       0
  3953 ;;Total ram usage:        2 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    3
  3956 ;; This function calls:
  3957 ;;		_MTOUCH_Button_Initialize
  3958 ;;		_memcpy
  3959 ;; This function is called by:
  3960 ;;		_MTOUCH_Initialize
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _MTOUCH_Button_InitializeAll
  3966  084F                     _MTOUCH_Button_InitializeAll:	
  3967                           
  3968                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3972  084F  3000               	movlw	low (_mtouch_button_init| (0+32768))
  3973  0850  00F0               	movwf	memcpy@s1
  3974  0851  3090               	movlw	high (_mtouch_button_init| (0+32768))
  3975  0852  00F1               	movwf	memcpy@s1+1
  3976  0853  3030               	movlw	48
  3977  0854  00F2               	movwf	memcpy@n
  3978  0855  3000               	movlw	0
  3979  0856  00F3               	movwf	memcpy@n+1
  3980  0857  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  3981  0858  3189  217B  3188   	fcall	_memcpy
  3982                           
  3983                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  3984  085B  01FB               	clrf	MTOUCH_Button_InitializeAll@button
  3985  085C                     l3921:	
  3986                           
  3987                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  3988  085C  087B               	movf	MTOUCH_Button_InitializeAll@button,w
  3989  085D  318A  2264  3188   	fcall	_MTOUCH_Button_Initialize
  3990                           
  3991                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  3992  0860  3001               	movlw	1
  3993  0861  00FA               	movwf	??_MTOUCH_Button_InitializeAll
  3994  0862  087A               	movf	??_MTOUCH_Button_InitializeAll,w
  3995  0863  07FB               	addwf	MTOUCH_Button_InitializeAll@button,f
  3996  0864  3003               	movlw	3
  3997  0865  027B               	subwf	MTOUCH_Button_InitializeAll@button,w
  3998  0866  1803               	btfsc	3,0
  3999  0867  0008               	return
  4000  0868  285C               	goto	l3921
  4001  0869                     __end_of_MTOUCH_Button_InitializeAll:	
  4002                           
  4003                           	psect	text11
  4004  097B                     __ptext11:	
  4005 ;; *************** function _memcpy *****************
  4006 ;; Defined at:
  4007 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  d1              1    wreg     PTR void 
  4010 ;;		 -> mtouch_button(48), 
  4011 ;;  s1              2    0[COMMON] PTR const void 
  4012 ;;		 -> mtouch_button_init(48), 
  4013 ;;  n               2    2[COMMON] unsigned int 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  d1              1    8[COMMON] PTR void 
  4016 ;;		 -> mtouch_button(48), 
  4017 ;;  s               2    5[COMMON] PTR const unsigned char 
  4018 ;;		 -> mtouch_button_init(48), 
  4019 ;;  d               1    9[COMMON] PTR unsigned char 
  4020 ;;		 -> mtouch_button(48), 
  4021 ;;  tmp             1    7[COMMON] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      PTR void 
  4024 ;; Registers used:
  4025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4031 ;;      Params:         4       0       0       0       0       0       0       0
  4032 ;;      Locals:         5       0       0       0       0       0       0       0
  4033 ;;      Temps:          1       0       0       0       0       0       0       0
  4034 ;;      Totals:        10       0       0       0       0       0       0       0
  4035 ;;Total ram usage:       10 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_MTOUCH_Button_InitializeAll
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _memcpy
  4046  097B                     _memcpy:	
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4050                           ;memcpy@d1 stored from wreg
  4051  097B  00F8               	movwf	memcpy@d1
  4052  097C  0871               	movf	memcpy@s1+1,w
  4053  097D  00F6               	movwf	memcpy@s+1
  4054  097E  0870               	movf	memcpy@s1,w
  4055  097F  00F5               	movwf	memcpy@s
  4056  0980  0878               	movf	memcpy@d1,w
  4057  0981  00F4               	movwf	??_memcpy
  4058  0982  0874               	movf	??_memcpy,w
  4059  0983  00F9               	movwf	memcpy@d
  4060  0984                     l3829:	
  4061  0984  3001               	movlw	1
  4062  0985  02F2               	subwf	memcpy@n,f
  4063  0986  3000               	movlw	0
  4064  0987  3BF3               	subwfb	memcpy@n+1,f
  4065  0988  0A72               	incf	memcpy@n,w
  4066  0989  1903               	btfsc	3,2
  4067  098A  0A73               	incf	memcpy@n+1,w
  4068  098B  1903               	btfsc	3,2
  4069  098C  0008               	return
  4070  098D  0875               	movf	memcpy@s,w
  4071  098E  0084               	movwf	4
  4072  098F  0876               	movf	memcpy@s+1,w
  4073  0990  0085               	movwf	5
  4074  0991  0800               	movf	0,w	;code access
  4075  0992  00F4               	movwf	??_memcpy
  4076  0993  0874               	movf	??_memcpy,w
  4077  0994  00F7               	movwf	memcpy@tmp
  4078  0995  3001               	movlw	1
  4079  0996  07F5               	addwf	memcpy@s,f
  4080  0997  3000               	movlw	0
  4081  0998  3DF6               	addwfc	memcpy@s+1,f
  4082  0999  0877               	movf	memcpy@tmp,w
  4083  099A  00F4               	movwf	??_memcpy
  4084  099B  0879               	movf	memcpy@d,w
  4085  099C  0086               	movwf	6
  4086  099D  3001               	movlw	1	; select bank2/3
  4087  099E  0087               	movwf	7
  4088  099F  0874               	movf	??_memcpy,w
  4089  09A0  0081               	movwf	1
  4090  09A1  3001               	movlw	1
  4091  09A2  00F4               	movwf	??_memcpy
  4092  09A3  0874               	movf	??_memcpy,w
  4093  09A4  07F9               	addwf	memcpy@d,f
  4094  09A5  2984               	goto	l3829
  4095  09A6                     __end_of_memcpy:	
  4096                           
  4097                           	psect	text12
  4098  08BE                     __ptext12:	
  4099 ;; *************** function _EUSART_Initialize *****************
  4100 ;; Defined at:
  4101 ;;		line 65 in file "mcc_generated_files/eusart.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      void 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0, pclath, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4115 ;;      Params:         0       0       0       0       0       0       0       0
  4116 ;;      Locals:         0       0       0       0       0       0       0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0
  4118 ;;      Totals:         0       0       0       0       0       0       0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    1
  4122 ;; This function calls:
  4123 ;;		_EUSART_SetErrorHandler
  4124 ;;		_EUSART_SetFramingErrorHandler
  4125 ;;		_EUSART_SetOverrunErrorHandler
  4126 ;; This function is called by:
  4127 ;;		_SYSTEM_Initialize
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function _EUSART_Initialize
  4133  08BE                     _EUSART_Initialize:	
  4134                           
  4135                           ;mcc_generated_files/eusart.c: 70:     BAUDCON = 0x0A;
  4136                           
  4137                           ;incstack = 0
  4138                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4139  08BE  300A               	movlw	10
  4140  08BF  0023               	movlb	3	; select bank3
  4141  08C0  009F               	movwf	31	;volatile
  4142                           
  4143                           ;mcc_generated_files/eusart.c: 73:     RCSTA = 0x90;
  4144  08C1  3090               	movlw	144
  4145  08C2  009D               	movwf	29	;volatile
  4146                           
  4147                           ;mcc_generated_files/eusart.c: 76:     TXSTA = 0x24;
  4148  08C3  3024               	movlw	36
  4149  08C4  009E               	movwf	30	;volatile
  4150                           
  4151                           ;mcc_generated_files/eusart.c: 79:     SPBRGL = 0x40;
  4152  08C5  3040               	movlw	64
  4153  08C6  009B               	movwf	27	;volatile
  4154                           
  4155                           ;mcc_generated_files/eusart.c: 82:     SPBRGH = 0x03;
  4156  08C7  3003               	movlw	3
  4157  08C8  009C               	movwf	28	;volatile
  4158                           
  4159                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
  4160  08C9  3000               	movlw	0
  4161  08CA  00F0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  4162  08CB  3000               	movlw	0
  4163  08CC  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  4164  08CD  3196  2662  3188   	fcall	_EUSART_SetFramingErrorHandler
  4165                           
  4166                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
  4167  08D0  3000               	movlw	0
  4168  08D1  00F0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  4169  08D2  3000               	movlw	0
  4170  08D3  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  4171  08D4  3196  2668  3188   	fcall	_EUSART_SetOverrunErrorHandler
  4172                           
  4173                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
  4174  08D7  3000               	movlw	0
  4175  08D8  00F0               	movwf	EUSART_SetErrorHandler@interruptHandler
  4176  08D9  3000               	movlw	0
  4177  08DA  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  4178  08DB  3196  265C         	fcall	_EUSART_SetErrorHandler
  4179                           
  4180                           ;mcc_generated_files/eusart.c: 89:     eusartRxLastError.status = 0;
  4181  08DD  0021               	movlb	1	; select bank1
  4182  08DE  01DA               	clrf	_eusartRxLastError^(0+128)	;volatile
  4183  08DF  0008               	return
  4184  08E0                     __end_of_EUSART_Initialize:	
  4185                           
  4186                           	psect	text13
  4187  1668                     __ptext13:	
  4188 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  4189 ;; Defined at:
  4190 ;;		line 171 in file "mcc_generated_files/eusart.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
  4193 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4205 ;;      Params:         2       0       0       0       0       0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0
  4208 ;;      Totals:         2       0       0       0       0       0       0       0
  4209 ;;Total ram usage:        2 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; This function calls:
  4212 ;;		Nothing
  4213 ;; This function is called by:
  4214 ;;		_EUSART_Initialize
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           
  4219                           ;psect for function _EUSART_SetOverrunErrorHandler
  4220  1668                     _EUSART_SetOverrunErrorHandler:	
  4221                           
  4222                           ;mcc_generated_files/eusart.c: 172:     EUSART_OverrunErrorHandler = interruptHandler;
  4223                           
  4224                           ;incstack = 0
  4225                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  4226  1668  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  4227  1669  0023               	movlb	3	; select bank3
  4228  166A  00A3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
  4229  166B  0870               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  4230  166C  00A2               	movwf	_EUSART_OverrunErrorHandler^(0+384)
  4231  166D  0008               	return
  4232  166E                     __end_of_EUSART_SetOverrunErrorHandler:	
  4233                           
  4234                           	psect	text14
  4235  1662                     __ptext14:	
  4236 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  4237 ;; Defined at:
  4238 ;;		line 167 in file "mcc_generated_files/eusart.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
  4241 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;		None
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		wreg
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4253 ;;      Params:         2       0       0       0       0       0       0       0
  4254 ;;      Locals:         0       0       0       0       0       0       0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0       0
  4256 ;;      Totals:         2       0       0       0       0       0       0       0
  4257 ;;Total ram usage:        2 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; This function calls:
  4260 ;;		Nothing
  4261 ;; This function is called by:
  4262 ;;		_EUSART_Initialize
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           
  4267                           ;psect for function _EUSART_SetFramingErrorHandler
  4268  1662                     _EUSART_SetFramingErrorHandler:	
  4269                           
  4270                           ;mcc_generated_files/eusart.c: 168:     EUSART_FramingErrorHandler = interruptHandler;
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  4274  1662  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  4275  1663  0021               	movlb	1	; select bank1
  4276  1664  00EF               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  4277  1665  0870               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  4278  1666  00EE               	movwf	_EUSART_FramingErrorHandler^(0+128)
  4279  1667  0008               	return
  4280  1668                     __end_of_EUSART_SetFramingErrorHandler:	
  4281                           
  4282                           	psect	text15
  4283  165C                     __ptext15:	
  4284 ;; *************** function _EUSART_SetErrorHandler *****************
  4285 ;; Defined at:
  4286 ;;		line 175 in file "mcc_generated_files/eusart.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
  4289 ;;		 -> EUSART_DefaultErrorHandler(1), 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;		None
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  1    wreg      void 
  4294 ;; Registers used:
  4295 ;;		wreg
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4301 ;;      Params:         2       0       0       0       0       0       0       0
  4302 ;;      Locals:         0       0       0       0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0       0
  4304 ;;      Totals:         2       0       0       0       0       0       0       0
  4305 ;;Total ram usage:        2 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_EUSART_Initialize
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _EUSART_SetErrorHandler
  4316  165C                     _EUSART_SetErrorHandler:	
  4317                           
  4318                           ;mcc_generated_files/eusart.c: 176:     EUSART_ErrorHandler = interruptHandler;
  4319                           
  4320                           ;incstack = 0
  4321                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  4322  165C  0871               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  4323  165D  0023               	movlb	3	; select bank3
  4324  165E  00A1               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
  4325  165F  0870               	movf	EUSART_SetErrorHandler@interruptHandler,w
  4326  1660  00A0               	movwf	_EUSART_ErrorHandler^(0+384)
  4327  1661  0008               	return
  4328  1662                     __end_of_EUSART_SetErrorHandler:	
  4329                           
  4330                           	psect	text16
  4331  0884                     __ptext16:	
  4332 ;; *************** function _MTOUCH_Service_Mainloop *****************
  4333 ;; Defined at:
  4334 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;		None
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      _Bool 
  4341 ;; Registers used:
  4342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4348 ;;      Params:         0       0       0       0       0       0       0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0       0
  4350 ;;      Temps:          0       0       1       0       0       0       0       0
  4351 ;;      Totals:         0       0       1       0       0       0       0       0
  4352 ;;Total ram usage:        1 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:   13
  4355 ;; This function calls:
  4356 ;;		_MTOUCH_Button_ServiceAll
  4357 ;;		_MTOUCH_Sensor_SampleAll
  4358 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4359 ;;		_MTOUCH_Tick
  4360 ;;		_MTOUCH_needReburst
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;;		_touch_example
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _MTOUCH_Service_Mainloop
  4369  0884                     _MTOUCH_Service_Mainloop:	
  4370                           
  4371                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4375  0884  0021               	movlb	1	; select bank1
  4376  0885  01DE               	clrf	_mtouch_time_toScan^(0+128)
  4377  0886  0ADE               	incf	_mtouch_time_toScan^(0+128),f
  4378                           
  4379                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  4380                           
  4381                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  4382  0887  3197  27D4  3188   	fcall	_MTOUCH_Sensor_SampleAll
  4383  088A  3A00               	xorlw	0
  4384  088B  1D03               	skipz
  4385  088C  288F               	goto	l4111
  4386                           
  4387                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  4388  088D  3000               	movlw	0
  4389  088E  0008               	return
  4390  088F                     l4111:	
  4391                           
  4392                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  4393  088F  3197  2711  3188   	fcall	_MTOUCH_Button_ServiceAll
  4394                           
  4395                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  4396  0892  3196  2633  3188   	fcall	_MTOUCH_needReburst
  4397  0895  0021               	movlb	1	; select bank1
  4398  0896  00EB               	movwf	??_MTOUCH_Service_Mainloop^(0+128)
  4399  0897  086B               	movf	??_MTOUCH_Service_Mainloop^(0+128),w
  4400  0898  00DE               	movwf	_mtouch_time_toScan^(0+128)
  4401                           
  4402                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  4403  0899  3197  2797  3188   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4404                           
  4405                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  4406  089C  3196  263B         	fcall	_MTOUCH_Tick
  4407                           
  4408                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  4409  089E  3001               	movlw	1
  4410  089F  0008               	return
  4411  08A0                     __end_of_MTOUCH_Service_Mainloop:	
  4412                           
  4413                           	psect	text17
  4414  1633                     __ptext17:	
  4415 ;; *************** function _MTOUCH_needReburst *****************
  4416 ;; Defined at:
  4417 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  needReburst     1    0        _Bool 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      _Bool 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4431 ;;      Params:         0       0       0       0       0       0       0       0
  4432 ;;      Locals:         1       0       0       0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0
  4434 ;;      Totals:         1       0       0       0       0       0       0       0
  4435 ;;Total ram usage:        1 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_MTOUCH_Service_Mainloop
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _MTOUCH_needReburst
  4446  1633                     _MTOUCH_needReburst:	
  4447                           
  4448                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  4452  1633  3000               	movlw	0
  4453  1634  0008               	return
  4454  1635                     __end_of_MTOUCH_needReburst:	
  4455                           
  4456                           	psect	text18
  4457  163B                     __ptext18:	
  4458 ;; *************** function _MTOUCH_Tick *****************
  4459 ;; Defined at:
  4460 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4474 ;;      Params:         0       0       0       0       0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0
  4477 ;;      Totals:         0       0       0       0       0       0       0       0
  4478 ;;Total ram usage:        0 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    2
  4481 ;; This function calls:
  4482 ;;		_MTOUCH_Button_Tick
  4483 ;; This function is called by:
  4484 ;;		_MTOUCH_Service_Mainloop
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           
  4489                           ;psect for function _MTOUCH_Tick
  4490  163B                     _MTOUCH_Tick:	
  4491                           
  4492                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4496  163B  3197  27EA         	fcall	_MTOUCH_Button_Tick
  4497  163D  0008               	return
  4498  163E                     __end_of_MTOUCH_Tick:	
  4499                           
  4500                           	psect	text19
  4501  17EA                     __ptext19:	
  4502 ;; *************** function _MTOUCH_Button_Tick *****************
  4503 ;; Defined at:
  4504 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  i               1    4[COMMON] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      void 
  4511 ;; Registers used:
  4512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4518 ;;      Params:         0       0       0       0       0       0       0       0
  4519 ;;      Locals:         1       0       0       0       0       0       0       0
  4520 ;;      Temps:          1       0       0       0       0       0       0       0
  4521 ;;      Totals:         2       0       0       0       0       0       0       0
  4522 ;;Total ram usage:        2 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    1
  4525 ;; This function calls:
  4526 ;;		_Button_Tick_helper
  4527 ;; This function is called by:
  4528 ;;		_MTOUCH_Tick
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           
  4533                           ;psect for function _MTOUCH_Button_Tick
  4534  17EA                     _MTOUCH_Button_Tick:	
  4535                           
  4536                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  4537                           
  4538                           ;incstack = 0
  4539                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4540  17EA  01F4               	clrf	MTOUCH_Button_Tick@i
  4541  17EB                     l3943:	
  4542                           
  4543                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  4544  17EB  0874               	movf	MTOUCH_Button_Tick@i,w
  4545  17EC  00F3               	movwf	??_MTOUCH_Button_Tick
  4546  17ED  3003               	movlw	3
  4547  17EE                     u3915:	
  4548  17EE  35F3               	lslf	??_MTOUCH_Button_Tick,f
  4549  17EF  3EFF               	addlw	-1
  4550  17F0  1D03               	skipz
  4551  17F1  2FEE               	goto	u3915
  4552  17F2  3573               	lslf	??_MTOUCH_Button_Tick,w
  4553  17F3  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  4554  17F4  3189  212C  3197   	fcall	_Button_Tick_helper
  4555                           
  4556                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  4557  17F7  3001               	movlw	1
  4558  17F8  00F3               	movwf	??_MTOUCH_Button_Tick
  4559  17F9  0873               	movf	??_MTOUCH_Button_Tick,w
  4560  17FA  07F4               	addwf	MTOUCH_Button_Tick@i,f
  4561  17FB  3003               	movlw	3
  4562  17FC  0274               	subwf	MTOUCH_Button_Tick@i,w
  4563  17FD  1803               	btfsc	3,0
  4564  17FE  0008               	return
  4565  17FF  2FEB               	goto	l3943
  4566  1800                     __end_of_MTOUCH_Button_Tick:	
  4567                           
  4568                           	psect	text20
  4569  092C                     __ptext20:	
  4570 ;; *************** function _Button_Tick_helper *****************
  4571 ;; Defined at:
  4572 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  button          1    wreg     PTR struct .
  4575 ;;		 -> mtouch_button(48), 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  button          1    2[COMMON] PTR struct .
  4578 ;;		 -> mtouch_button(48), 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      void 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4588 ;;      Params:         0       0       0       0       0       0       0       0
  4589 ;;      Locals:         1       0       0       0       0       0       0       0
  4590 ;;      Temps:          2       0       0       0       0       0       0       0
  4591 ;;      Totals:         3       0       0       0       0       0       0       0
  4592 ;;Total ram usage:        3 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_MTOUCH_Button_Tick
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           
  4602                           ;psect for function _Button_Tick_helper
  4603  092C                     _Button_Tick_helper:	
  4604                           
  4605                           ;incstack = 0
  4606                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  4607                           ;Button_Tick_helper@button stored from wreg
  4608  092C  00F2               	movwf	Button_Tick_helper@button
  4609                           
  4610                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  4611  092D  0872               	movf	Button_Tick_helper@button,w
  4612  092E  3E02               	addlw	2
  4613  092F  0086               	movwf	6
  4614  0930  3001               	movlw	1	; select bank2/3
  4615  0931  0087               	movwf	7
  4616  0932  3002               	movlw	2
  4617  0933  0601               	xorwf	1,w
  4618  0934  1D03               	btfss	3,2
  4619  0935  0008               	return
  4620                           
  4621                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  4622  0936  0872               	movf	Button_Tick_helper@button,w
  4623  0937  3E0A               	addlw	10
  4624  0938  0086               	movwf	6
  4625  0939  3001               	movlw	1	; select bank2/3
  4626  093A  0087               	movwf	7
  4627  093B  3001               	movlw	1
  4628  093C  0781               	addwf	1,f
  4629  093D  3141               	addfsr 1,1
  4630  093E  1803               	skipnc
  4631  093F  0A81               	incf	1,f
  4632                           
  4633                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  4634  0940  0872               	movf	Button_Tick_helper@button,w
  4635  0941  3E0A               	addlw	10
  4636  0942  0086               	movwf	6
  4637  0943  3001               	movlw	1	; select bank2/3
  4638  0944  0087               	movwf	7
  4639  0945  0016               	moviw fsr1++
  4640  0946  0401               	iorwf	1,w
  4641  0947  1D03               	btfss	3,2
  4642  0948  0008               	return
  4643                           
  4644                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  4645  0949  0872               	movf	Button_Tick_helper@button,w
  4646  094A  3E0A               	addlw	10
  4647  094B  0086               	movwf	6
  4648  094C  3001               	movlw	1	; select bank2/3
  4649  094D  0087               	movwf	7
  4650  094E  30FF               	movlw	255
  4651  094F  3FC0               	movwi [0]fsr1
  4652  0950  30FF               	movlw	255
  4653  0951  3FC1               	movwi [1]fsr1
  4654  0952  0008               	return
  4655  0953                     __end_of_Button_Tick_helper:	
  4656                           
  4657                           	psect	text21
  4658  1797                     __ptext21:	
  4659 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  4660 ;; Defined at:
  4661 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  sensor          1    2[COMMON] PTR struct .
  4666 ;;		 -> mtouch_sensor(27), 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4676 ;;      Params:         0       0       0       0       0       0       0       0
  4677 ;;      Locals:         1       0       0       0       0       0       0       0
  4678 ;;      Temps:          1       0       0       0       0       0       0       0
  4679 ;;      Totals:         2       0       0       0       0       0       0       0
  4680 ;;Total ram usage:        2 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    1
  4683 ;; This function calls:
  4684 ;;		_Sensor_Sampled_Reset
  4685 ;; This function is called by:
  4686 ;;		_MTOUCH_Initialize
  4687 ;;		_MTOUCH_Service_Mainloop
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           
  4692                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  4693  1797                     _MTOUCH_Sensor_Sampled_ResetAll:	
  4694                           
  4695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  4696                           
  4697                           ;incstack = 0
  4698                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  4699  1797  30AD               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  4700  1798  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4701  1799  0871               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4702  179A  00F2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  4703  179B                     L1:	
  4704  179B  30BF               	movlw	(low ((_mtouch_sensor| 0+18)))& (0+255)
  4705  179C  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4706  179D  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4707  179E  0271               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4708  179F  1C03               	btfss	3,0
  4709  17A0  0008               	return
  4710                           
  4711                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  4712  17A1  0872               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  4713  17A2  3196  2695  3197   	fcall	_Sensor_Sampled_Reset
  4714                           
  4715                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  4716  17A5  3009               	movlw	9
  4717  17A6  00F1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  4718  17A7  0871               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  4719  17A8  07F2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  4720  17A9  2F9B               	goto	L1
  4721  17AA                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  4722                           
  4723                           	psect	text22
  4724  1695                     __ptext22:	
  4725 ;; *************** function _Sensor_Sampled_Reset *****************
  4726 ;; Defined at:
  4727 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  sensor          1    wreg     PTR struct .
  4730 ;;		 -> mtouch_sensor(27), 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  sensor          1    0[COMMON] PTR struct .
  4733 ;;		 -> mtouch_sensor(27), 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4743 ;;      Params:         0       0       0       0       0       0       0       0
  4744 ;;      Locals:         1       0       0       0       0       0       0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0       0
  4746 ;;      Totals:         1       0       0       0       0       0       0       0
  4747 ;;Total ram usage:        1 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_MTOUCH_Sensor_Initialize
  4753 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _Sensor_Sampled_Reset
  4759  1695                     _Sensor_Sampled_Reset:	
  4760                           
  4761                           ;incstack = 0
  4762                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  4763                           ;Sensor_Sampled_Reset@sensor stored from wreg
  4764  1695  00F0               	movwf	Sensor_Sampled_Reset@sensor
  4765                           
  4766                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  4767  1696  0870               	movf	Sensor_Sampled_Reset@sensor,w
  4768  1697  3E08               	addlw	8
  4769  1698  0086               	movwf	6
  4770  1699  0187               	clrf	7
  4771  169A  1001               	bcf	1,0
  4772  169B  0008               	return
  4773  169C                     __end_of_Sensor_Sampled_Reset:	
  4774                           
  4775                           	psect	text23
  4776  17D4                     __ptext23:	
  4777 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  4778 ;; Defined at:
  4779 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  group           1   55[BANK0 ] unsigned char 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      _Bool 
  4786 ;; Registers used:
  4787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4793 ;;      Params:         0       0       0       0       0       0       0       0
  4794 ;;      Locals:         0       1       0       0       0       0       0       0
  4795 ;;      Temps:          0       1       0       0       0       0       0       0
  4796 ;;      Totals:         0       2       0       0       0       0       0       0
  4797 ;;Total ram usage:        2 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    6
  4800 ;; This function calls:
  4801 ;;		_Sensor_Service
  4802 ;; This function is called by:
  4803 ;;		_MTOUCH_Service_Mainloop
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           
  4808                           ;psect for function _MTOUCH_Sensor_SampleAll
  4809  17D4                     _MTOUCH_Sensor_SampleAll:	
  4810                           
  4811                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  4812                           
  4813                           ;incstack = 0
  4814                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4815  17D4  0020               	movlb	0	; select bank0
  4816  17D5  01D7               	clrf	MTOUCH_Sensor_SampleAll@group
  4817  17D6                     l4023:	
  4818                           
  4819                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  4820  17D6  0857               	movf	MTOUCH_Sensor_SampleAll@group,w
  4821  17D7  318F  276B  3197   	fcall	_Sensor_Service
  4822  17DA  3A00               	xorlw	0
  4823  17DB  1903               	skipnz
  4824  17DC  2FDF               	goto	l4029
  4825                           
  4826                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  4827  17DD  3000               	movlw	0
  4828  17DE  0008               	return
  4829  17DF                     l4029:	
  4830                           
  4831                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  4832  17DF  3001               	movlw	1
  4833  17E0  0020               	movlb	0	; select bank0
  4834  17E1  00D6               	movwf	??_MTOUCH_Sensor_SampleAll
  4835  17E2  0856               	movf	??_MTOUCH_Sensor_SampleAll,w
  4836  17E3  07D7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  4837  17E4  3002               	movlw	2
  4838  17E5  0257               	subwf	MTOUCH_Sensor_SampleAll@group,w
  4839  17E6  1C03               	skipc
  4840  17E7  2FD6               	goto	l4023
  4841                           
  4842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  4843  17E8  3001               	movlw	1
  4844  17E9  0008               	return
  4845  17EA                     __end_of_MTOUCH_Sensor_SampleAll:	
  4846                           
  4847                           	psect	text24
  4848  0F6B                     __ptext24:	
  4849 ;; *************** function _Sensor_Service *****************
  4850 ;; Defined at:
  4851 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  scanGroup       1    wreg     unsigned char 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  scanGroup       1   50[BANK0 ] unsigned char 
  4856 ;;  sensor_adc2     1   53[BANK0 ] PTR struct .
  4857 ;;		 -> mtouch_sensor(27), 
  4858 ;;  sensor_adc1     1   52[BANK0 ] PTR struct .
  4859 ;;		 -> NULL(0), mtouch_sensor(27), 
  4860 ;;  error           1   51[BANK0 ] enum E2858
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      enum E2858
  4863 ;; Registers used:
  4864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4870 ;;      Params:         0       0       0       0       0       0       0       0
  4871 ;;      Locals:         0       4       0       0       0       0       0       0
  4872 ;;      Temps:          0       3       0       0       0       0       0       0
  4873 ;;      Totals:         0       7       0       0       0       0       0       0
  4874 ;;Total ram usage:        7 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    5
  4877 ;; This function calls:
  4878 ;;		_Sensor_Acquisition
  4879 ;;		_Sensor_DefaultCallback
  4880 ;;		_Sensor_RawSample_Update
  4881 ;;		_Sensor_isEnabled
  4882 ;;		_Sensor_setSampled
  4883 ;; This function is called by:
  4884 ;;		_MTOUCH_Sensor_SampleAll
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           
  4889                           ;psect for function _Sensor_Service
  4890  0F6B                     _Sensor_Service:	
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4894                           ;Sensor_Service@scanGroup stored from wreg
  4895  0F6B  0020               	movlb	0	; select bank0
  4896  0F6C  00D2               	movwf	Sensor_Service@scanGroup
  4897                           
  4898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  4899  0F6D  0852               	movf	Sensor_Service@scanGroup,w
  4900  0F6E  00CF               	movwf	??_Sensor_Service
  4901  0F6F  01D0               	clrf	??_Sensor_Service+1
  4902  0F70  35CF               	lslf	??_Sensor_Service,f
  4903  0F71  0DD0               	rlf	??_Sensor_Service+1,f
  4904  0F72  3024               	movlw	low (_sensor_scan_group| (0+32768))
  4905  0F73  074F               	addwf	??_Sensor_Service,w
  4906  0F74  0084               	movwf	4
  4907  0F75  3098               	movlw	high (_sensor_scan_group| (0+32768))
  4908  0F76  3D50               	addwfc	??_Sensor_Service+1,w
  4909  0F77  0085               	movwf	5
  4910  0F78  0800               	movf	0,w	;code access
  4911  0F79  00D1               	movwf	??_Sensor_Service+2
  4912  0F7A  0851               	movf	??_Sensor_Service+2,w
  4913  0F7B  00D4               	movwf	Sensor_Service@sensor_adc1
  4914                           
  4915                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  4916  0F7C  0852               	movf	Sensor_Service@scanGroup,w
  4917  0F7D  00CF               	movwf	??_Sensor_Service
  4918  0F7E  01D0               	clrf	??_Sensor_Service+1
  4919  0F7F  35CF               	lslf	??_Sensor_Service,f
  4920  0F80  0DD0               	rlf	??_Sensor_Service+1,f
  4921  0F81  3025               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  4922  0F82  074F               	addwf	??_Sensor_Service,w
  4923  0F83  0084               	movwf	4
  4924  0F84  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  4925  0F85  3D50               	addwfc	??_Sensor_Service+1,w
  4926  0F86  0085               	movwf	5
  4927  0F87  0800               	movf	0,w	;code access
  4928  0F88  00D1               	movwf	??_Sensor_Service+2
  4929  0F89  0851               	movf	??_Sensor_Service+2,w
  4930  0F8A  00D5               	movwf	Sensor_Service@sensor_adc2
  4931                           
  4932                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  4933  0F8B  0855               	movf	Sensor_Service@sensor_adc2,w
  4934  0F8C  00CF               	movwf	??_Sensor_Service
  4935  0F8D  084F               	movf	??_Sensor_Service,w
  4936  0F8E  00CB               	movwf	Sensor_Acquisition@sensor_adc2
  4937  0F8F  0854               	movf	Sensor_Service@sensor_adc1,w
  4938  0F90  318B  23C5  318F   	fcall	_Sensor_Acquisition
  4939  0F93  0020               	movlb	0	; select bank0
  4940  0F94  00D0               	movwf	??_Sensor_Service+1
  4941  0F95  0850               	movf	??_Sensor_Service+1,w
  4942  0F96  00D3               	movwf	Sensor_Service@error
  4943                           
  4944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  4945  0F97  2FDA               	goto	l3975
  4946  0F98                     l3953:	
  4947                           
  4948                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  4949  0F98  0854               	movf	Sensor_Service@sensor_adc1,w
  4950  0F99  3197  2731  318F   	fcall	_Sensor_isEnabled
  4951  0F9C  3A00               	xorlw	0
  4952  0F9D  1903               	skipnz
  4953  0F9E  2FB8               	goto	l3963
  4954                           
  4955                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  4956  0F9F  0021               	movlb	1	; select bank1
  4957  0FA0  085D               	movf	_lowpowerActivated^(0+128),w
  4958  0FA1  1D03               	btfss	3,2
  4959  0FA2  2FA8               	goto	l3959
  4960                           
  4961                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  4962  0FA3  0020               	movlb	0	; select bank0
  4963  0FA4  0854               	movf	Sensor_Service@sensor_adc1,w
  4964  0FA5  3189  2106  318F   	fcall	_Sensor_RawSample_Update
  4965  0FA8                     l3959:	
  4966                           
  4967                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  4968  0FA8  0020               	movlb	0	; select bank0
  4969  0FA9  0854               	movf	Sensor_Service@sensor_adc1,w
  4970  0FAA  3196  268E  318F   	fcall	_Sensor_setSampled
  4971                           
  4972                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  4973  0FAD  0020               	movlb	0	; select bank0
  4974  0FAE  0854               	movf	Sensor_Service@sensor_adc1,w
  4975  0FAF  0086               	movwf	6
  4976  0FB0  0187               	clrf	7
  4977  0FB1  0801               	movf	1,w
  4978  0FB2  00CF               	movwf	??_Sensor_Service
  4979  0FB3  084F               	movf	??_Sensor_Service,w
  4980  0FB4  00F0               	movwf	Sensor_DefaultCallback@sensor
  4981  0FB5  3180  2004  318F   	fcall	_Sensor_DefaultCallback
  4982  0FB8                     l3963:	
  4983                           
  4984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  4985  0FB8  0020               	movlb	0	; select bank0
  4986  0FB9  0855               	movf	Sensor_Service@sensor_adc2,w
  4987  0FBA  3197  2731  318F   	fcall	_Sensor_isEnabled
  4988  0FBD  3A00               	xorlw	0
  4989  0FBE  1903               	skipnz
  4990  0FBF  2FFD               	goto	l3977
  4991                           
  4992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  4993  0FC0  0021               	movlb	1	; select bank1
  4994  0FC1  085D               	movf	_lowpowerActivated^(0+128),w
  4995  0FC2  1D03               	btfss	3,2
  4996  0FC3  2FC9               	goto	l3969
  4997                           
  4998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  4999  0FC4  0020               	movlb	0	; select bank0
  5000  0FC5  0855               	movf	Sensor_Service@sensor_adc2,w
  5001  0FC6  3189  2106  318F   	fcall	_Sensor_RawSample_Update
  5002  0FC9                     l3969:	
  5003                           
  5004                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  5005  0FC9  0020               	movlb	0	; select bank0
  5006  0FCA  0855               	movf	Sensor_Service@sensor_adc2,w
  5007  0FCB  3196  268E  318F   	fcall	_Sensor_setSampled
  5008                           
  5009                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  5010  0FCE  0020               	movlb	0	; select bank0
  5011  0FCF  0855               	movf	Sensor_Service@sensor_adc2,w
  5012  0FD0  0086               	movwf	6
  5013  0FD1  0187               	clrf	7
  5014  0FD2  0801               	movf	1,w
  5015  0FD3  00CF               	movwf	??_Sensor_Service
  5016  0FD4  084F               	movf	??_Sensor_Service,w
  5017  0FD5  00F0               	movwf	Sensor_DefaultCallback@sensor
  5018  0FD6  3180  2004  318F   	fcall	_Sensor_DefaultCallback
  5019  0FD9  2FFD               	goto	l3977
  5020  0FDA                     l3975:	
  5021  0FDA  0853               	movf	Sensor_Service@error,w
  5022  0FDB  00CF               	movwf	??_Sensor_Service
  5023  0FDC  01D0               	clrf	??_Sensor_Service+1
  5024  0FDD  1BCF               	btfsc	??_Sensor_Service,7
  5025  0FDE  03D0               	decf	??_Sensor_Service+1,f
  5026                           
  5027                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5028                           ; Switch size 1, requested type "simple"
  5029                           ; Number of cases is 2, Range of values is 0 to 255
  5030                           ; switch strategies available:
  5031                           ; Name         Instructions Cycles
  5032                           ; simple_byte            7     4 (average)
  5033                           ; jumptable            260     6 (fixed)
  5034                           ;	Chosen strategy is simple_byte
  5035  0FDF  0850               	movf	??_Sensor_Service+1,w
  5036  0FE0  3A00               	xorlw	0	; case 0
  5037  0FE1  1903               	skipnz
  5038  0FE2  2FE7               	goto	l4353
  5039  0FE3  3AFF               	xorlw	255	; case 255
  5040  0FE4  1903               	skipnz
  5041  0FE5  2FEC               	goto	l4355
  5042  0FE6  2FFD               	goto	l3977
  5043  0FE7                     l4353:	
  5044                           
  5045                           ; Switch size 1, requested type "simple"
  5046                           ; Number of cases is 1, Range of values is 0 to 0
  5047                           ; switch strategies available:
  5048                           ; Name         Instructions Cycles
  5049                           ; simple_byte            4     3 (average)
  5050                           ; direct_byte            8     6 (fixed)
  5051                           ; jumptable            260     6 (fixed)
  5052                           ;	Chosen strategy is simple_byte
  5053  0FE7  084F               	movf	??_Sensor_Service,w
  5054  0FE8  3A00               	xorlw	0	; case 0
  5055  0FE9  1903               	skipnz
  5056  0FEA  2F98               	goto	l3953
  5057  0FEB  2FFD               	goto	l3977
  5058  0FEC                     l4355:	
  5059                           
  5060                           ; Switch size 1, requested type "simple"
  5061                           ; Number of cases is 5, Range of values is 251 to 255
  5062                           ; switch strategies available:
  5063                           ; Name         Instructions Cycles
  5064                           ; direct_byte           15     5 (fixed)
  5065                           ; simple_byte           16     9 (average)
  5066                           ; jumptable            263     9 (fixed)
  5067                           ;	Chosen strategy is simple_byte
  5068  0FEC  084F               	movf	??_Sensor_Service,w
  5069  0FED  3AFB               	xorlw	251	; case 251
  5070  0FEE  1903               	skipnz
  5071  0FEF  2FFD               	goto	l3977
  5072  0FF0  3A07               	xorlw	7	; case 252
  5073  0FF1  1903               	skipnz
  5074  0FF2  2FFD               	goto	l3977
  5075  0FF3  3A01               	xorlw	1	; case 253
  5076  0FF4  1903               	skipnz
  5077  0FF5  2FFD               	goto	l3977
  5078  0FF6  3A03               	xorlw	3	; case 254
  5079  0FF7  1903               	skipnz
  5080  0FF8  2FFD               	goto	l3977
  5081  0FF9  3A01               	xorlw	1	; case 255
  5082  0FFA  1903               	skipnz
  5083  0FFB  2FFD               	goto	l3977
  5084  0FFC  2FFD               	goto	l3977
  5085  0FFD                     l3977:	
  5086                           
  5087                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  5088  0FFD  0020               	movlb	0	; select bank0
  5089  0FFE  0853               	movf	Sensor_Service@error,w
  5090  0FFF  0008               	return
  5091  1000                     __end_of_Sensor_Service:	
  5092                           
  5093                           	psect	text25
  5094  168E                     __ptext25:	
  5095 ;; *************** function _Sensor_setSampled *****************
  5096 ;; Defined at:
  5097 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  sensor          1    wreg     PTR struct .
  5100 ;;		 -> NULL(0), mtouch_sensor(27), 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;  sensor          1    0[COMMON] PTR struct .
  5103 ;;		 -> NULL(0), mtouch_sensor(27), 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      void 
  5106 ;; Registers used:
  5107 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5113 ;;      Params:         0       0       0       0       0       0       0       0
  5114 ;;      Locals:         1       0       0       0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0
  5116 ;;      Totals:         1       0       0       0       0       0       0       0
  5117 ;;Total ram usage:        1 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; This function calls:
  5120 ;;		Nothing
  5121 ;; This function is called by:
  5122 ;;		_Sensor_Service
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           
  5127                           ;psect for function _Sensor_setSampled
  5128  168E                     _Sensor_setSampled:	
  5129                           
  5130                           ;incstack = 0
  5131                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  5132                           ;Sensor_setSampled@sensor stored from wreg
  5133  168E  00F0               	movwf	Sensor_setSampled@sensor
  5134                           
  5135                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  5136  168F  0870               	movf	Sensor_setSampled@sensor,w
  5137  1690  3E08               	addlw	8
  5138  1691  0086               	movwf	6
  5139  1692  0187               	clrf	7
  5140  1693  1401               	bsf	1,0
  5141  1694  0008               	return
  5142  1695                     __end_of_Sensor_setSampled:	
  5143                           
  5144                           	psect	text26
  5145  0906                     __ptext26:	
  5146 ;; *************** function _Sensor_RawSample_Update *****************
  5147 ;; Defined at:
  5148 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  sensor          1    wreg     PTR struct .
  5151 ;;		 -> NULL(0), mtouch_sensor(27), 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  sensor          1    6[COMMON] PTR struct .
  5154 ;;		 -> NULL(0), mtouch_sensor(27), 
  5155 ;;  adcIndex        1    5[COMMON] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  1    wreg      void 
  5158 ;; Registers used:
  5159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5165 ;;      Params:         0       0       0       0       0       0       0       0
  5166 ;;      Locals:         2       0       0       0       0       0       0       0
  5167 ;;      Temps:          1       0       0       0       0       0       0       0
  5168 ;;      Totals:         3       0       0       0       0       0       0       0
  5169 ;;Total ram usage:        3 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    1
  5172 ;; This function calls:
  5173 ;;		_Sensor_getScanGroupIndex
  5174 ;; This function is called by:
  5175 ;;		_Sensor_Service
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           
  5180                           ;psect for function _Sensor_RawSample_Update
  5181  0906                     _Sensor_RawSample_Update:	
  5182                           
  5183                           ;incstack = 0
  5184                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5185                           ;Sensor_RawSample_Update@sensor stored from wreg
  5186  0906  00F6               	movwf	Sensor_RawSample_Update@sensor
  5187                           
  5188                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  5189  0907  0876               	movf	Sensor_RawSample_Update@sensor,w
  5190  0908  3189  21D3  3189   	fcall	_Sensor_getScanGroupIndex
  5191  090B  00F4               	movwf	??_Sensor_RawSample_Update
  5192  090C  0874               	movf	??_Sensor_RawSample_Update,w
  5193  090D  00F5               	movwf	Sensor_RawSample_Update@adcIndex
  5194                           
  5195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  5196  090E  1F8B               	btfss	11,7	;volatile
  5197  090F  291F               	goto	l3799
  5198                           
  5199                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  5200  0910  138B               	bcf	11,7	;volatile
  5201                           
  5202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  5203  0911  3575               	lslf	Sensor_RawSample_Update@adcIndex,w
  5204  0912  3EC8               	addlw	(low (_packet_sample| 0))& (0+255)
  5205  0913  0086               	movwf	6
  5206  0914  0187               	clrf	7
  5207  0915  0876               	movf	Sensor_RawSample_Update@sensor,w
  5208  0916  3E06               	addlw	6
  5209  0917  0084               	movwf	4
  5210  0918  0185               	clrf	5
  5211  0919  3F40               	moviw [0]fsr1
  5212  091A  3F80               	movwi [0]fsr0
  5213  091B  3F41               	moviw [1]fsr1
  5214  091C  3F81               	movwi [1]fsr0
  5215                           
  5216                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  5217  091D  178B               	bsf	11,7	;volatile
  5218                           
  5219                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  5220  091E  0008               	return
  5221  091F                     l3799:	
  5222                           
  5223                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  5224  091F  3575               	lslf	Sensor_RawSample_Update@adcIndex,w
  5225  0920  3EC8               	addlw	(low (_packet_sample| 0))& (0+255)
  5226  0921  0086               	movwf	6
  5227  0922  0187               	clrf	7
  5228  0923  0876               	movf	Sensor_RawSample_Update@sensor,w
  5229  0924  3E06               	addlw	6
  5230  0925  0084               	movwf	4
  5231  0926  0185               	clrf	5
  5232  0927  3F40               	moviw [0]fsr1
  5233  0928  3F80               	movwi [0]fsr0
  5234  0929  3F41               	moviw [1]fsr1
  5235  092A  3F81               	movwi [1]fsr0
  5236  092B  0008               	return
  5237  092C                     __end_of_Sensor_RawSample_Update:	
  5238                           
  5239                           	psect	text27
  5240  0004                     __ptext27:	
  5241 ;; *************** function _Sensor_DefaultCallback *****************
  5242 ;; Defined at:
  5243 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  sensor          1    0[COMMON] enum E2854
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		None
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5257 ;;      Params:         1       0       0       0       0       0       0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0
  5260 ;;      Totals:         1       0       0       0       0       0       0       0
  5261 ;;Total ram usage:        1 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_Sensor_Service
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _Sensor_DefaultCallback
  5272  0004                     _Sensor_DefaultCallback:	
  5273                           
  5274                           ;incstack = 0
  5275                           ; Regs used in _Sensor_DefaultCallback: []
  5276  0004  0008               	return
  5277  0005                     __end_of_Sensor_DefaultCallback:	
  5278                           
  5279                           	psect	text28
  5280  0BC5                     __ptext28:	
  5281 ;; *************** function _Sensor_Acquisition *****************
  5282 ;; Defined at:
  5283 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  sensor_adc1     1    wreg     PTR struct .
  5286 ;;		 -> NULL(0), mtouch_sensor(27), 
  5287 ;;  sensor_adc2     1   43[BANK0 ] PTR struct .
  5288 ;;		 -> mtouch_sensor(27), 
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;  sensor_adc1     1   46[BANK0 ] PTR struct .
  5291 ;;		 -> NULL(0), mtouch_sensor(27), 
  5292 ;;  retry           1   45[BANK0 ] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      enum E2858
  5295 ;; Registers used:
  5296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5302 ;;      Params:         0       1       0       0       0       0       0       0
  5303 ;;      Locals:         0       2       0       0       0       0       0       0
  5304 ;;      Temps:          0       1       0       0       0       0       0       0
  5305 ;;      Totals:         0       4       0       0       0       0       0       0
  5306 ;;Total ram usage:        4 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    4
  5309 ;; This function calls:
  5310 ;;		_Sensor_Acq_ExecutePacket
  5311 ;;		_Sensor_Scanfrequency_Evaluation
  5312 ;;		_Sensor_isActive
  5313 ;;		_Sensor_isCalibrated
  5314 ;;		_Sensor_postAcquisitionProcess
  5315 ;; This function is called by:
  5316 ;;		_Sensor_Service
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           
  5321                           ;psect for function _Sensor_Acquisition
  5322  0BC5                     _Sensor_Acquisition:	
  5323                           
  5324                           ;incstack = 0
  5325                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5326                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  5327  0BC5  0020               	movlb	0	; select bank0
  5328  0BC6  00CE               	movwf	Sensor_Acquisition@sensor_adc1
  5329                           
  5330                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  5331  0BC7  3005               	movlw	5
  5332  0BC8  00CC               	movwf	??_Sensor_Acquisition
  5333  0BC9  084C               	movf	??_Sensor_Acquisition,w
  5334  0BCA  00CD               	movwf	Sensor_Acquisition@retry
  5335                           
  5336                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  5337  0BCB  084E               	movf	Sensor_Acquisition@sensor_adc1,w
  5338  0BCC  1D03               	btfss	3,2
  5339  0BCD  2BDB               	goto	l3763
  5340  0BCE  084B               	movf	Sensor_Acquisition@sensor_adc2,w
  5341  0BCF  1D03               	btfss	3,2
  5342  0BD0  2BDB               	goto	l3763
  5343                           
  5344                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  5345  0BD1  30FF               	movlw	255
  5346  0BD2  0008               	return
  5347  0BD3                     l3757:	
  5348                           
  5349                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  5350  0BD3  3001               	movlw	1
  5351  0BD4  0020               	movlb	0	; select bank0
  5352  0BD5  02CD               	subwf	Sensor_Acquisition@retry,f
  5353                           
  5354                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  5355  0BD6  084D               	movf	Sensor_Acquisition@retry,w
  5356  0BD7  1D03               	btfss	3,2
  5357  0BD8  2BDB               	goto	l3763
  5358                           
  5359                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5360  0BD9  30FC               	movlw	252
  5361  0BDA  0008               	return
  5362  0BDB                     l3763:	
  5363                           
  5364                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  5365  0BDB  084B               	movf	Sensor_Acquisition@sensor_adc2,w
  5366  0BDC  00CC               	movwf	??_Sensor_Acquisition
  5367  0BDD  084C               	movf	??_Sensor_Acquisition,w
  5368  0BDE  00FD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5369  0BDF  084E               	movf	Sensor_Acquisition@sensor_adc1,w
  5370  0BE0  3186  2617  318B   	fcall	_Sensor_Acq_ExecutePacket
  5371  0BE3  3A00               	xorlw	0
  5372  0BE4  1D03               	skipz
  5373  0BE5  2BD3               	goto	l3757
  5374                           
  5375                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  5376  0BE6  0020               	movlb	0	; select bank0
  5377  0BE7  084E               	movf	Sensor_Acquisition@sensor_adc1,w
  5378  0BE8  1903               	btfsc	3,2
  5379  0BE9  2BEE               	goto	l3769
  5380                           
  5381                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  5382  0BEA  084E               	movf	Sensor_Acquisition@sensor_adc1,w
  5383  0BEB  318A  229A  318B   	fcall	_Sensor_postAcquisitionProcess
  5384  0BEE                     l3769:	
  5385                           
  5386                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  5387  0BEE  0020               	movlb	0	; select bank0
  5388  0BEF  084B               	movf	Sensor_Acquisition@sensor_adc2,w
  5389  0BF0  1903               	btfsc	3,2
  5390  0BF1  2BF6               	goto	l3773
  5391                           
  5392                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  5393  0BF2  084B               	movf	Sensor_Acquisition@sensor_adc2,w
  5394  0BF3  318A  229A  318B   	fcall	_Sensor_postAcquisitionProcess
  5395  0BF6                     l3773:	
  5396                           
  5397                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  5398  0BF6  0020               	movlb	0	; select bank0
  5399  0BF7  084E               	movf	Sensor_Acquisition@sensor_adc1,w
  5400  0BF8  3196  26E8  318B   	fcall	_Sensor_isActive
  5401  0BFB  3A00               	xorlw	0
  5402  0BFC  1903               	skipnz
  5403  0BFD  2C06               	goto	l3777
  5404  0BFE  0020               	movlb	0	; select bank0
  5405  0BFF  084E               	movf	Sensor_Acquisition@sensor_adc1,w
  5406  0C00  3188  2000  318B   	fcall	_Sensor_isCalibrated
  5407  0C03  3A00               	xorlw	0
  5408  0C04  1D03               	skipz
  5409  0C05  2C16               	goto	l3781
  5410  0C06                     l3777:	
  5411  0C06  0020               	movlb	0	; select bank0
  5412  0C07  084B               	movf	Sensor_Acquisition@sensor_adc2,w
  5413  0C08  3196  26E8  318B   	fcall	_Sensor_isActive
  5414  0C0B  3A00               	xorlw	0
  5415  0C0C  1903               	skipnz
  5416  0C0D  2C1F               	goto	l3785
  5417  0C0E  0020               	movlb	0	; select bank0
  5418  0C0F  084B               	movf	Sensor_Acquisition@sensor_adc2,w
  5419  0C10  3188  2000  318B   	fcall	_Sensor_isCalibrated
  5420  0C13  3A00               	xorlw	0
  5421  0C14  1903               	skipnz
  5422  0C15  2C1F               	goto	l3785
  5423  0C16                     l3781:	
  5424                           
  5425                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  5426  0C16  0020               	movlb	0	; select bank0
  5427  0C17  084B               	movf	Sensor_Acquisition@sensor_adc2,w
  5428  0C18  00CC               	movwf	??_Sensor_Acquisition
  5429  0C19  084C               	movf	??_Sensor_Acquisition,w
  5430  0C1A  00BE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  5431  0C1B  084E               	movf	Sensor_Acquisition@sensor_adc1,w
  5432  0C1C  3180  2021         	fcall	_Sensor_Scanfrequency_Evaluation
  5433  0C1E  0008               	return
  5434  0C1F                     l3785:	
  5435                           
  5436                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  5437  0C1F  3000               	movlw	0
  5438  0C20  0008               	return
  5439  0C21                     __end_of_Sensor_Acquisition:	
  5440                           
  5441                           	psect	text29
  5442  0A9A                     __ptext29:	
  5443 ;; *************** function _Sensor_postAcquisitionProcess *****************
  5444 ;; Defined at:
  5445 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  sensor          1    wreg     PTR struct .
  5448 ;;		 -> NULL(0), mtouch_sensor(27), 
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;  sensor          1   11[COMMON] PTR struct .
  5451 ;;		 -> NULL(0), mtouch_sensor(27), 
  5452 ;;  deviation       2    8[COMMON] unsigned short 
  5453 ;;  adcIndex        1   10[COMMON] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5463 ;;      Params:         0       0       0       0       0       0       0       0
  5464 ;;      Locals:         4       0       0       0       0       0       0       0
  5465 ;;      Temps:          1       0       0       0       0       0       0       0
  5466 ;;      Totals:         5       0       0       0       0       0       0       0
  5467 ;;Total ram usage:        5 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    1
  5470 ;; This function calls:
  5471 ;;		_Sensor_getScanGroupIndex
  5472 ;;		_Sensor_isEnabled
  5473 ;;		_Sensor_setActive
  5474 ;;		_Sensor_setInactive
  5475 ;;		_abs
  5476 ;; This function is called by:
  5477 ;;		_Sensor_Acquisition
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           
  5482                           ;psect for function _Sensor_postAcquisitionProcess
  5483  0A9A                     _Sensor_postAcquisitionProcess:	
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5487                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  5488  0A9A  00FB               	movwf	Sensor_postAcquisitionProcess@sensor
  5489                           
  5490                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  5491  0A9B  087B               	movf	Sensor_postAcquisitionProcess@sensor,w
  5492  0A9C  3189  21D3  318A   	fcall	_Sensor_getScanGroupIndex
  5493  0A9F  00F7               	movwf	??_Sensor_postAcquisitionProcess
  5494  0AA0  0877               	movf	??_Sensor_postAcquisitionProcess,w
  5495  0AA1  00FA               	movwf	Sensor_postAcquisitionProcess@adcIndex
  5496                           
  5497                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  5498  0AA2  087B               	movf	Sensor_postAcquisitionProcess@sensor,w
  5499  0AA3  3197  2731  318A   	fcall	_Sensor_isEnabled
  5500  0AA6  3A00               	xorlw	0
  5501  0AA7  1903               	skipnz
  5502  0AA8  2AC0               	goto	l3627
  5503                           
  5504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  5505  0AA9  087B               	movf	Sensor_postAcquisitionProcess@sensor,w
  5506  0AAA  3E06               	addlw	6
  5507  0AAB  0086               	movwf	6
  5508  0AAC  0187               	clrf	7
  5509  0AAD  357A               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  5510  0AAE  3EC8               	addlw	(low (_packet_sample| 0))& (0+255)
  5511  0AAF  0084               	movwf	4
  5512  0AB0  0185               	clrf	5
  5513  0AB1  3F40               	moviw [0]fsr1
  5514  0AB2  0200               	subwf	0,w
  5515  0AB3  00F3               	movwf	abs@a
  5516  0AB4  3101               	addfsr 0,1
  5517  0AB5  3F41               	moviw [1]fsr1
  5518  0AB6  3B00               	subwfb	0,w
  5519  0AB7  00F4               	movwf	abs@a+1
  5520  0AB8  3188  2020  318A   	fcall	_abs
  5521  0ABB  0874               	movf	?_abs+1,w
  5522  0ABC  00F9               	movwf	Sensor_postAcquisitionProcess@deviation+1
  5523  0ABD  0873               	movf	?_abs,w
  5524  0ABE  00F8               	movwf	Sensor_postAcquisitionProcess@deviation
  5525  0ABF  2AC2               	goto	l3629
  5526  0AC0                     l3627:	
  5527                           
  5528                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  5529  0AC0  01F8               	clrf	Sensor_postAcquisitionProcess@deviation
  5530  0AC1  01F9               	clrf	Sensor_postAcquisitionProcess@deviation+1
  5531  0AC2                     l3629:	
  5532                           
  5533                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  5534  0AC2  3000               	movlw	0
  5535  0AC3  0279               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  5536  0AC4  3065               	movlw	101
  5537  0AC5  1903               	skipnz
  5538  0AC6  0278               	subwf	Sensor_postAcquisitionProcess@deviation,w
  5539  0AC7  1C03               	skipc
  5540  0AC8  2ACD               	goto	l3633
  5541                           
  5542                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  5543  0AC9  087B               	movf	Sensor_postAcquisitionProcess@sensor,w
  5544  0ACA  3196  2680         	fcall	_Sensor_setActive
  5545  0ACC  0008               	return
  5546  0ACD                     l3633:	
  5547                           
  5548                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  5549  0ACD  087B               	movf	Sensor_postAcquisitionProcess@sensor,w
  5550  0ACE  3196  2687         	fcall	_Sensor_setInactive
  5551  0AD0  0008               	return
  5552  0AD1                     __end_of_Sensor_postAcquisitionProcess:	
  5553                           
  5554                           	psect	text30
  5555  1687                     __ptext30:	
  5556 ;; *************** function _Sensor_setInactive *****************
  5557 ;; Defined at:
  5558 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  sensor          1    wreg     PTR struct .
  5561 ;;		 -> NULL(0), mtouch_sensor(27), 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  sensor          1    0[COMMON] PTR struct .
  5564 ;;		 -> NULL(0), mtouch_sensor(27), 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5574 ;;      Params:         0       0       0       0       0       0       0       0
  5575 ;;      Locals:         1       0       0       0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0
  5577 ;;      Totals:         1       0       0       0       0       0       0       0
  5578 ;;Total ram usage:        1 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_Sensor_postAcquisitionProcess
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function _Sensor_setInactive
  5589  1687                     _Sensor_setInactive:	
  5590                           
  5591                           ;incstack = 0
  5592                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5593                           ;Sensor_setInactive@sensor stored from wreg
  5594  1687  00F0               	movwf	Sensor_setInactive@sensor
  5595                           
  5596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  5597  1688  0870               	movf	Sensor_setInactive@sensor,w
  5598  1689  3E08               	addlw	8
  5599  168A  0086               	movwf	6
  5600  168B  0187               	clrf	7
  5601  168C  1081               	bcf	1,1
  5602  168D  0008               	return
  5603  168E                     __end_of_Sensor_setInactive:	
  5604                           
  5605                           	psect	text31
  5606  1680                     __ptext31:	
  5607 ;; *************** function _Sensor_setActive *****************
  5608 ;; Defined at:
  5609 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  sensor          1    wreg     PTR struct .
  5612 ;;		 -> NULL(0), mtouch_sensor(27), 
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;  sensor          1    0[COMMON] PTR struct .
  5615 ;;		 -> NULL(0), mtouch_sensor(27), 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5625 ;;      Params:         0       0       0       0       0       0       0       0
  5626 ;;      Locals:         1       0       0       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0       0
  5628 ;;      Totals:         1       0       0       0       0       0       0       0
  5629 ;;Total ram usage:        1 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; This function calls:
  5632 ;;		Nothing
  5633 ;; This function is called by:
  5634 ;;		_Sensor_postAcquisitionProcess
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           
  5639                           ;psect for function _Sensor_setActive
  5640  1680                     _Sensor_setActive:	
  5641                           
  5642                           ;incstack = 0
  5643                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  5644                           ;Sensor_setActive@sensor stored from wreg
  5645  1680  00F0               	movwf	Sensor_setActive@sensor
  5646                           
  5647                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  5648  1681  0870               	movf	Sensor_setActive@sensor,w
  5649  1682  3E08               	addlw	8
  5650  1683  0086               	movwf	6
  5651  1684  0187               	clrf	7
  5652  1685  1481               	bsf	1,1
  5653  1686  0008               	return
  5654  1687                     __end_of_Sensor_setActive:	
  5655                           
  5656                           	psect	text32
  5657  0021                     __ptext32:	
  5658 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  5659 ;; Defined at:
  5660 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  sensor_adc1     1    wreg     PTR struct .
  5663 ;;		 -> NULL(0), mtouch_sensor(27), 
  5664 ;;  sensor_adc2     1   30[BANK0 ] PTR struct .
  5665 ;;		 -> mtouch_sensor(27), 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  sensor_adc1     1   35[BANK0 ] PTR struct .
  5668 ;;		 -> NULL(0), mtouch_sensor(27), 
  5669 ;;  best_packet_    4   38[BANK0 ] unsigned short [2]
  5670 ;;  packet_noise    2   33[BANK0 ] unsigned short 
  5671 ;;  i               1   42[BANK0 ] unsigned char 
  5672 ;;  retry           1   37[BANK0 ] unsigned char 
  5673 ;;  best_sample_    1   36[BANK0 ] unsigned char 
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      enum E2858
  5676 ;; Registers used:
  5677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5683 ;;      Params:         0       1       0       0       0       0       0       0
  5684 ;;      Locals:         0      10       0       0       0       0       0       0
  5685 ;;      Temps:          0       2       0       0       0       0       0       0
  5686 ;;      Totals:         0      13       0       0       0       0       0       0
  5687 ;;Total ram usage:       13 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    3
  5690 ;; This function calls:
  5691 ;;		_Sensor_Acq_ExecutePacket
  5692 ;; This function is called by:
  5693 ;;		_Sensor_Acquisition
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           
  5698                           ;psect for function _Sensor_Scanfrequency_Evaluation
  5699  0021                     _Sensor_Scanfrequency_Evaluation:	
  5700                           
  5701                           ;incstack = 0
  5702                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  5703                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  5704  0021  0020               	movlb	0	; select bank0
  5705  0022  00C3               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  5706                           
  5707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  5708  0023  0021               	movlb	1	; select bank1
  5709  0024  0859               	movf	(_packet_noise+1)^(0+128),w
  5710  0025  0020               	movlb	0	; select bank0
  5711  0026  00C0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  5712  0027  0021               	movlb	1	; select bank1
  5713  0028  0858               	movf	_packet_noise^(0+128),w
  5714  0029  0020               	movlb	0	; select bank0
  5715  002A  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5716  002B  36C0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5717  002C  0CBF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5718  002D  36C0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  5719  002E  0CBF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  5720  002F  0021               	movlb	1	; select bank1
  5721  0030  0858               	movf	_packet_noise^(0+128),w
  5722  0031  0020               	movlb	0	; select bank0
  5723  0032  073F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  5724  0033  00C1               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  5725  0034  0021               	movlb	1	; select bank1
  5726  0035  0859               	movf	(_packet_noise+1)^(0+128),w
  5727  0036  0020               	movlb	0	; select bank0
  5728  0037  3D40               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  5729  0038  00C2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  5730                           
  5731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  5732  0039  0021               	movlb	1	; select bank1
  5733  003A  082C               	movf	_sample_period^(0+128),w
  5734  003B  0020               	movlb	0	; select bank0
  5735  003C  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5736  003D  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5737  003E  00C4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  5738                           
  5739                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  5740  003F  0021               	movlb	1	; select bank1
  5741  0040  0849               	movf	(_packet_sample+1)^(0+128),w
  5742  0041  0020               	movlb	0	; select bank0
  5743  0042  00C7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  5744  0043  0021               	movlb	1	; select bank1
  5745  0044  0848               	movf	_packet_sample^(0+128),w
  5746  0045  0020               	movlb	0	; select bank0
  5747  0046  00C6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  5748                           
  5749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  5750  0047  0021               	movlb	1	; select bank1
  5751  0048  084B               	movf	((_packet_sample+1)^(0+128)+2),w
  5752  0049  0020               	movlb	0	; select bank0
  5753  004A  00C9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  5754  004B  0021               	movlb	1	; select bank1
  5755  004C  084A               	movf	(_packet_sample^(0+128)+2),w
  5756  004D  0020               	movlb	0	; select bank0
  5757  004E  00C8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  5758                           
  5759                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  5760  004F  01CA               	clrf	Sensor_Scanfrequency_Evaluation@i
  5761  0050                     l3649:	
  5762                           
  5763                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  5764  0050  084A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  5765  0051  3E1A               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5766  0052  0084               	movwf	4
  5767  0053  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  5768  0054  1803               	skipnc
  5769  0055  3E01               	addlw	1
  5770  0056  0085               	movwf	5
  5771  0057  0800               	movf	0,w	;code access
  5772  0058  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5773  0059  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5774  005A  0021               	movlb	1	; select bank1
  5775  005B  07AC               	addwf	_sample_period^(0+128),f
  5776                           
  5777                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  5778  005C  30AE               	movlw	174
  5779  005D  022C               	subwf	_sample_period^(0+128),w
  5780  005E  1803               	skipnc
  5781  005F  2866               	goto	l3657
  5782                           
  5783                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  5784  0060  30AE               	movlw	174
  5785  0061  0020               	movlb	0	; select bank0
  5786  0062  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5787  0063  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5788  0064  0021               	movlb	1	; select bank1
  5789  0065  07AC               	addwf	_sample_period^(0+128),f
  5790  0066                     l3657:	
  5791                           
  5792                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  5793  0066  3005               	movlw	5
  5794  0067  0020               	movlb	0	; select bank0
  5795  0068  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5796  0069  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5797  006A  00C5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  5798  006B                     l3665:	
  5799                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5800                           
  5801                           
  5802                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  5803  006B  083E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  5804  006C  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5805  006D  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5806  006E  00FD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  5807  006F  0843               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  5808  0070  3186  2617  3180   	fcall	_Sensor_Acq_ExecutePacket
  5809  0073  3A00               	xorlw	0
  5810  0074  1903               	btfsc	3,2
  5811  0075  287E               	goto	l3667
  5812                           
  5813                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  5814  0076  3001               	movlw	1
  5815  0077  0020               	movlb	0	; select bank0
  5816  0078  02C5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  5817                           
  5818                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  5819  0079  0845               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  5820  007A  1D03               	btfss	3,2
  5821  007B  286B               	goto	l3665
  5822                           
  5823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  5824  007C  30FC               	movlw	252
  5825  007D  0008               	return
  5826  007E                     l3667:	
  5827                           
  5828                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  5829  007E  0021               	movlb	1	; select bank1
  5830  007F  0859               	movf	(_packet_noise+1)^(0+128),w
  5831  0080  0020               	movlb	0	; select bank0
  5832  0081  0242               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  5833  0082  1D03               	skipz
  5834  0083  2888               	goto	u3435
  5835  0084  0021               	movlb	1	; select bank1
  5836  0085  0858               	movf	_packet_noise^(0+128),w
  5837  0086  0020               	movlb	0	; select bank0
  5838  0087  0241               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  5839  0088                     u3435:	
  5840  0088  1803               	skipnc
  5841  0089  28A8               	goto	l3671
  5842                           
  5843                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  5844  008A  0021               	movlb	1	; select bank1
  5845  008B  0859               	movf	(_packet_noise+1)^(0+128),w
  5846  008C  0020               	movlb	0	; select bank0
  5847  008D  00C2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  5848  008E  0021               	movlb	1	; select bank1
  5849  008F  0858               	movf	_packet_noise^(0+128),w
  5850  0090  0020               	movlb	0	; select bank0
  5851  0091  00C1               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  5852                           
  5853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  5854  0092  0021               	movlb	1	; select bank1
  5855  0093  082C               	movf	_sample_period^(0+128),w
  5856  0094  0020               	movlb	0	; select bank0
  5857  0095  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5858  0096  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5859  0097  00C4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  5860                           
  5861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  5862  0098  0021               	movlb	1	; select bank1
  5863  0099  0849               	movf	(_packet_sample+1)^(0+128),w
  5864  009A  0020               	movlb	0	; select bank0
  5865  009B  00C7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  5866  009C  0021               	movlb	1	; select bank1
  5867  009D  0848               	movf	_packet_sample^(0+128),w
  5868  009E  0020               	movlb	0	; select bank0
  5869  009F  00C6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  5870                           
  5871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  5872  00A0  0021               	movlb	1	; select bank1
  5873  00A1  084B               	movf	((_packet_sample+1)^(0+128)+2),w
  5874  00A2  0020               	movlb	0	; select bank0
  5875  00A3  00C9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  5876  00A4  0021               	movlb	1	; select bank1
  5877  00A5  084A               	movf	(_packet_sample^(0+128)+2),w
  5878  00A6  0020               	movlb	0	; select bank0
  5879  00A7  00C8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  5880  00A8                     l3671:	
  5881                           
  5882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  5883  00A8  3001               	movlw	1
  5884  00A9  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5885  00AA  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5886  00AB  07CA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  5887  00AC  3005               	movlw	5
  5888  00AD  024A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  5889  00AE  1C03               	skipc
  5890  00AF  2850               	goto	l3649
  5891                           
  5892                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  5893  00B0  0844               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  5894  00B1  00BF               	movwf	??_Sensor_Scanfrequency_Evaluation
  5895  00B2  083F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  5896  00B3  0021               	movlb	1	; select bank1
  5897  00B4  00AC               	movwf	_sample_period^(0+128)
  5898                           
  5899                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  5900  00B5  0020               	movlb	0	; select bank0
  5901  00B6  0847               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  5902  00B7  0021               	movlb	1	; select bank1
  5903  00B8  00C9               	movwf	(_packet_sample+1)^(0+128)
  5904  00B9  0020               	movlb	0	; select bank0
  5905  00BA  0846               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  5906  00BB  0021               	movlb	1	; select bank1
  5907  00BC  00C8               	movwf	_packet_sample^(0+128)
  5908                           
  5909                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  5910  00BD  0020               	movlb	0	; select bank0
  5911  00BE  0849               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  5912  00BF  0021               	movlb	1	; select bank1
  5913  00C0  00CB               	movwf	((_packet_sample+1)^(0+128)+2)
  5914  00C1  0020               	movlb	0	; select bank0
  5915  00C2  0848               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  5916  00C3  0021               	movlb	1	; select bank1
  5917  00C4  00CA               	movwf	(_packet_sample^(0+128)+2)
  5918                           
  5919                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  5920  00C5  3000               	movlw	0
  5921  00C6  0008               	return
  5922  00C7                     __end_of_Sensor_Scanfrequency_Evaluation:	
  5923                           
  5924                           	psect	text33
  5925  0617                     __ptext33:	
  5926 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  5927 ;; Defined at:
  5928 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  sensor_adc1     1    wreg     PTR struct .
  5931 ;;		 -> NULL(0), mtouch_sensor(27), 
  5932 ;;  sensor_adc2     1   13[COMMON] PTR struct .
  5933 ;;		 -> mtouch_sensor(27), 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  sensor_adc1     1   29[BANK0 ] PTR struct .
  5936 ;;		 -> NULL(0), mtouch_sensor(27), 
  5937 ;;  last_b          2   25[BANK0 ] unsigned short 
  5938 ;;  last_a          2   23[BANK0 ] unsigned short 
  5939 ;;  packet_count    1   28[BANK0 ] unsigned char 
  5940 ;;  activeSensor    1   27[BANK0 ] unsigned char 
  5941 ;;  ADxIF_flag      1   22[BANK0 ] unsigned char 
  5942 ;;  sensor2Force    1   21[BANK0 ] unsigned char 
  5943 ;;  sensor1Force    1   20[BANK0 ] unsigned char 
  5944 ;;  AD2CON2_temp    1   19[BANK0 ] unsigned char 
  5945 ;;  AD1CON2_temp    1   18[BANK0 ] unsigned char 
  5946 ;;  ADCOMCON_tem    1   17[BANK0 ] unsigned char 
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  1    wreg      enum E2858
  5949 ;; Registers used:
  5950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5956 ;;      Params:         1       0       0       0       0       0       0       0
  5957 ;;      Locals:         0      13       0       0       0       0       0       0
  5958 ;;      Temps:          0       1       0       0       0       0       0       0
  5959 ;;      Totals:         1      14       0       0       0       0       0       0
  5960 ;;Total ram usage:       15 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    2
  5963 ;; This function calls:
  5964 ;;		_MTOUCH_Sensor_Scan_Initialize
  5965 ;;		_Sensor_autoCalibration
  5966 ;;		_Sensor_isActive
  5967 ;;		_Sensor_isCalibrated
  5968 ;;		_Sensor_isEnabled
  5969 ;;		_Sensor_loadADCSettings
  5970 ;;		_TMR2_LoadPeriodRegister
  5971 ;;		_TMR2_StartTimer
  5972 ;;		_TMR2_StopTimer
  5973 ;;		_abs
  5974 ;; This function is called by:
  5975 ;;		_Sensor_Acquisition
  5976 ;;		_Sensor_Scanfrequency_Evaluation
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           
  5981                           ;psect for function _Sensor_Acq_ExecutePacket
  5982  0617                     _Sensor_Acq_ExecutePacket:	
  5983                           
  5984                           ;incstack = 0
  5985                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5986                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  5987  0617  0020               	movlb	0	; select bank0
  5988  0618  00BD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  5989                           
  5990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  5991  0619  01B7               	clrf	Sensor_Acq_ExecutePacket@last_a
  5992  061A  01B8               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  5993                           
  5994                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  5995  061B  01B9               	clrf	Sensor_Acq_ExecutePacket@last_b
  5996  061C  01BA               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  5997                           
  5998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  5999  061D  01BB               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6000                           
  6001                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  6002  061E  01B4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6003  061F  01B5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  6004                           
  6005                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  6006  0620  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6007  0621  1903               	btfsc	3,2
  6008  0622  2E56               	goto	l3407
  6009  0623  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6010  0624  1903               	btfsc	3,2
  6011  0625  2E56               	goto	l3407
  6012                           
  6013                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  6014  0626  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6015  0627  3E08               	addlw	8
  6016  0628  0086               	movwf	6
  6017  0629  0187               	clrf	7
  6018  062A  1981               	btfsc	1,3
  6019  062B  2E3A               	goto	l3389
  6020  062C  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6021  062D  3E08               	addlw	8
  6022  062E  0086               	movwf	6
  6023  062F  0187               	clrf	7
  6024  0630  1D81               	btfss	1,3
  6025  0631  2E3A               	goto	l3389
  6026                           
  6027                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  6028  0632  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6029  0633  3E08               	addlw	8
  6030  0634  0086               	movwf	6
  6031  0635  0187               	clrf	7
  6032  0636  1581               	bsf	1,3
  6033                           
  6034                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  6035  0637  01B4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6036  0638  0AB4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  6037                           
  6038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  6039  0639  2E6A               	goto	l3431
  6040  063A                     l3389:	
  6041  063A  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6042  063B  3E08               	addlw	8
  6043  063C  0086               	movwf	6
  6044  063D  0187               	clrf	7
  6045  063E  1981               	btfsc	1,3
  6046  063F  2E4E               	goto	l3397
  6047  0640  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6048  0641  3E08               	addlw	8
  6049  0642  0086               	movwf	6
  6050  0643  0187               	clrf	7
  6051  0644  1D81               	btfss	1,3
  6052  0645  2E4E               	goto	l3397
  6053                           
  6054                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  6055  0646  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6056  0647  3E08               	addlw	8
  6057  0648  0086               	movwf	6
  6058  0649  0187               	clrf	7
  6059  064A  1581               	bsf	1,3
  6060                           
  6061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  6062  064B  01B5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  6063  064C  0AB5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  6064                           
  6065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  6066  064D  2E6A               	goto	l3431
  6067  064E                     l3397:	
  6068  064E  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6069  064F  3E08               	addlw	8
  6070  0650  0086               	movwf	6
  6071  0651  0187               	clrf	7
  6072  0652  1981               	btfsc	1,3
  6073  0653  2E6A               	goto	l3431
  6074  0654                     l3399:	
  6075  0654  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6076  0655  2E63               	goto	L3
  6077  0656                     l3407:	
  6078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  6079                           
  6080  0656  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6081  0657  1D03               	btfss	3,2
  6082  0658  2E5C               	goto	l3419
  6083  0659  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6084  065A  1D03               	btfss	3,2
  6085  065B  2E54               	goto	l3399
  6086  065C                     l3419:	
  6087                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  6088                           
  6089  065C  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6090  065D  1903               	btfsc	3,2
  6091  065E  2E6A               	goto	l3431
  6092  065F  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6093  0660  1D03               	btfss	3,2
  6094  0661  2E6A               	goto	l3431
  6095                           
  6096                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  6097  0662  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6098  0663                     L3:	
  6099  0663  3E08               	addlw	8
  6100  0664  0086               	movwf	6
  6101  0665  0187               	clrf	7
  6102  0666  1981               	btfsc	1,3
  6103  0667  2E6A               	goto	l3431
  6104  0668                     l3401:	
  6105                           
  6106                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  6107  0668  3000               	movlw	0
  6108  0669  0008               	return
  6109  066A                     l3431:	
  6110                           
  6111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  6112  066A  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6113  066B  3196  26E8  3186   	fcall	_Sensor_isActive
  6114  066E  3A00               	xorlw	0
  6115  066F  1903               	skipnz
  6116  0670  2E74               	goto	l3435
  6117                           
  6118                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  6119  0671  0020               	movlb	0	; select bank0
  6120  0672  01BB               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6121  0673  0ABB               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  6122  0674                     l3435:	
  6123                           
  6124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  6125  0674  002E               	movlb	14	; select bank14
  6126  0675  0812               	movf	18,w	;volatile
  6127  0676  0020               	movlb	0	; select bank0
  6128  0677  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6129  0678  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6130  0679  00B1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  6131                           
  6132                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  6133  067A  002E               	movlb	14	; select bank14
  6134  067B  0813               	movf	19,w	;volatile
  6135  067C  0020               	movlb	0	; select bank0
  6136  067D  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6137  067E  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6138  067F  00B2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  6139                           
  6140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  6141  0680  002F               	movlb	15	; select bank15
  6142  0681  0813               	movf	19,w	;volatile
  6143  0682  0020               	movlb	0	; select bank0
  6144  0683  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6145  0684  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6146  0685  00B3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  6147                           
  6148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  6149  0686  3197  2721  3186   	fcall	_MTOUCH_Sensor_Scan_Initialize
  6150                           
  6151                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  6152  0689  0020               	movlb	0	; select bank0
  6153  068A  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6154  068B  1903               	btfsc	3,2
  6155  068C  2E9F               	goto	l3451
  6156                           
  6157                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6158  068D  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6159  068E  3E04               	addlw	4
  6160  068F  0086               	movwf	6
  6161  0690  0187               	clrf	7
  6162  0691  0801               	movf	1,w
  6163  0692  3EFF               	addlw	255
  6164  0693  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6165  0694  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6166  0695  00BC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6167                           
  6168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  6169  0696  01B6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6170                           
  6171                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  6172  0697  3040               	movlw	64
  6173  0698  002E               	movlb	14	; select bank14
  6174  0699  0098               	movwf	24	;volatile
  6175                           
  6176                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  6177  069A  002F               	movlb	15	; select bank15
  6178  069B  0198               	clrf	24	;volatile
  6179                           
  6180                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x1;
  6181  069C  0022               	movlb	2	; select bank2
  6182  069D  141D               	bsf	29,0	;volatile
  6183                           
  6184                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  6185  069E  2EB1               	goto	l3461
  6186  069F                     l3451:	
  6187                           
  6188                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  6189  069F  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6190  06A0  3E04               	addlw	4
  6191  06A1  0086               	movwf	6
  6192  06A2  0187               	clrf	7
  6193  06A3  0801               	movf	1,w
  6194  06A4  3EFF               	addlw	255
  6195  06A5  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6196  06A6  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6197  06A7  00BC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  6198                           
  6199                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  6200  06A8  01B6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  6201  06A9  0AB6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  6202                           
  6203                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  6204  06AA  002E               	movlb	14	; select bank14
  6205  06AB  0198               	clrf	24	;volatile
  6206                           
  6207                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  6208  06AC  3040               	movlw	64
  6209  06AD  002F               	movlb	15	; select bank15
  6210  06AE  0098               	movwf	24	;volatile
  6211                           
  6212                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  6213  06AF  0022               	movlb	2	; select bank2
  6214  06B0  101D               	bcf	29,0	;volatile
  6215  06B1                     l3461:	
  6216                           
  6217                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  6218  06B1  01F1               	clrf	Sensor_loadADCSettings@adc_index
  6219  06B2  0020               	movlb	0	; select bank0
  6220  06B3  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6221  06B4  3180  20C7  3186   	fcall	_Sensor_loadADCSettings
  6222                           
  6223                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  6224  06B7  01F1               	clrf	Sensor_loadADCSettings@adc_index
  6225  06B8  0AF1               	incf	Sensor_loadADCSettings@adc_index,f
  6226  06B9  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6227  06BA  3180  20C7  3186   	fcall	_Sensor_loadADCSettings
  6228                           
  6229                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  6230  06BD  0021               	movlb	1	; select bank1
  6231  06BE  105C               	bcf	_sensor_globalFlags^(0+128),0	;volatile
  6232                           
  6233                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  6234  06BF  115C               	bcf	_sensor_globalFlags^(0+128),2	;volatile
  6235                           
  6236                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  6237  06C0  11DC               	bcf	_sensor_globalFlags^(0+128),3	;volatile
  6238                           
  6239                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  6240  06C1  082C               	movf	_sample_period^(0+128),w
  6241  06C2  3196  264B  3186   	fcall	_TMR2_LoadPeriodRegister
  6242                           
  6243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  6244  06C5  3196  2635  3186   	fcall	_TMR2_StartTimer
  6245                           
  6246                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  6247  06C8  0021               	movlb	1	; select bank1
  6248  06C9  01D8               	clrf	_packet_noise^(0+128)
  6249  06CA  01D9               	clrf	(_packet_noise+1)^(0+128)
  6250  06CB                     l3477:	
  6251                           
  6252                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  6253  06CB  0020               	movlb	0	; select bank0
  6254  06CC  0836               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  6255  06CD  1D03               	btfss	3,2
  6256  06CE  2ED8               	goto	l278
  6257                           
  6258                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6259  06CF  1B11               	btfsc	17,6	;volatile
  6260  06D0  2ED3               	goto	l280
  6261  06D1  0021               	movlb	1	; select bank1
  6262  06D2  10DC               	bcf	_sensor_globalFlags^(0+128),1	;volatile
  6263  06D3                     l280:	
  6264  06D3  0020               	movlb	0	; select bank0
  6265  06D4  1F11               	btfss	17,6	;volatile
  6266  06D5  2ED3               	goto	l280
  6267                           
  6268                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  6269  06D6  1311               	bcf	17,6	;volatile
  6270                           
  6271                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  6272  06D7  2EE0               	goto	l3485
  6273  06D8                     l278:	
  6274                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  6275                           
  6276                           
  6277                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  6278  06D8  1B12               	btfsc	18,6	;volatile
  6279  06D9  2EDC               	goto	l285
  6280  06DA  0021               	movlb	1	; select bank1
  6281  06DB  10DC               	bcf	_sensor_globalFlags^(0+128),1	;volatile
  6282  06DC                     l285:	
  6283  06DC  0020               	movlb	0	; select bank0
  6284  06DD  1F12               	btfss	18,6	;volatile
  6285  06DE  2EDC               	goto	l285
  6286                           
  6287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  6288  06DF  1312               	bcf	18,6	;volatile
  6289  06E0                     l3485:	
  6290                           
  6291                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  6292  06E0  3021               	movlw	33
  6293  06E1  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6294  06E2  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6295  06E3  002E               	movlb	14	; select bank14
  6296  06E4  0698               	xorwf	24,f	;volatile
  6297                           
  6298                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  6299  06E5  3021               	movlw	33
  6300  06E6  0020               	movlb	0	; select bank0
  6301  06E7  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6302  06E8  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6303  06E9  002F               	movlb	15	; select bank15
  6304  06EA  0698               	xorwf	24,f	;volatile
  6305                           
  6306                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  6307  06EB  30C0               	movlw	192
  6308  06EC  0020               	movlb	0	; select bank0
  6309  06ED  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6310  06EE  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6311  06EF  002E               	movlb	14	; select bank14
  6312  06F0  0694               	xorwf	20,f	;volatile
  6313                           
  6314                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  6315  06F1  30C0               	movlw	192
  6316  06F2  0020               	movlb	0	; select bank0
  6317  06F3  00B0               	movwf	??_Sensor_Acq_ExecutePacket
  6318  06F4  0830               	movf	??_Sensor_Acq_ExecutePacket,w
  6319  06F5  002F               	movlb	15	; select bank15
  6320  06F6  0694               	xorwf	20,f	;volatile
  6321                           
  6322                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  6323  06F7  0020               	movlb	0	; select bank0
  6324  06F8  183C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  6325  06F9  2F41               	goto	l3501
  6326                           
  6327                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  6328  06FA  002E               	movlb	14	; select bank14
  6329  06FB  081A               	movf	26,w	;volatile
  6330  06FC  0021               	movlb	1	; select bank1
  6331  06FD  07C8               	addwf	_packet_sample^(0+128),f
  6332  06FE  002E               	movlb	14	; select bank14
  6333  06FF  081B               	movf	27,w	;volatile
  6334  0700  0021               	movlb	1	; select bank1
  6335  0701  3DC9               	addwfc	(_packet_sample+1)^(0+128),f
  6336                           
  6337                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  6338  0702  002F               	movlb	15	; select bank15
  6339  0703  081A               	movf	26,w	;volatile
  6340  0704  0021               	movlb	1	; select bank1
  6341  0705  07CA               	addwf	(_packet_sample^(0+128)+2),f
  6342  0706  002F               	movlb	15	; select bank15
  6343  0707  081B               	movf	27,w	;volatile
  6344  0708  0021               	movlb	1	; select bank1
  6345  0709  3DCB               	addwfc	((_packet_sample+1)^(0+128)+2),f
  6346                           
  6347                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  6348  070A  0020               	movlb	0	; select bank0
  6349  070B  083B               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6350  070C  1D03               	btfss	3,2
  6351  070D  2F26               	goto	l3497
  6352                           
  6353                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  6354  070E  002E               	movlb	14	; select bank14
  6355  070F  081A               	movf	26,w	;volatile
  6356  0710  0020               	movlb	0	; select bank0
  6357  0711  0239               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6358  0712  00F3               	movwf	abs@a
  6359  0713  002E               	movlb	14	; select bank14
  6360  0714  081B               	movf	27,w	;volatile
  6361  0715  0020               	movlb	0	; select bank0
  6362  0716  3B3A               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6363  0717  00F4               	movwf	abs@a+1
  6364  0718  3188  2020  3186   	fcall	_abs
  6365  071B  0873               	movf	?_abs,w
  6366  071C  0021               	movlb	1	; select bank1
  6367  071D  07D8               	addwf	_packet_noise^(0+128),f
  6368  071E  0874               	movf	?_abs+1,w
  6369  071F  3DD9               	addwfc	(_packet_noise+1)^(0+128),f
  6370                           
  6371                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  6372  0720  002E               	movlb	14	; select bank14
  6373  0721  081B               	movf	27,w	;volatile
  6374  0722  0020               	movlb	0	; select bank0
  6375  0723  00BA               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6376  0724  002E               	movlb	14	; select bank14
  6377  0725  2F3D               	goto	L2
  6378  0726                     l3497:	
  6379                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  6380                           
  6381                           
  6382                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  6383  0726  002F               	movlb	15	; select bank15
  6384  0727  081A               	movf	26,w	;volatile
  6385  0728  0020               	movlb	0	; select bank0
  6386  0729  0239               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  6387  072A  00F3               	movwf	abs@a
  6388  072B  002F               	movlb	15	; select bank15
  6389  072C  081B               	movf	27,w	;volatile
  6390  072D  0020               	movlb	0	; select bank0
  6391  072E  3B3A               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  6392  072F  00F4               	movwf	abs@a+1
  6393  0730  3188  2020  3186   	fcall	_abs
  6394  0733  0873               	movf	?_abs,w
  6395  0734  0021               	movlb	1	; select bank1
  6396  0735  07D8               	addwf	_packet_noise^(0+128),f
  6397  0736  0874               	movf	?_abs+1,w
  6398  0737  3DD9               	addwfc	(_packet_noise+1)^(0+128),f
  6399                           
  6400                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  6401  0738  002F               	movlb	15	; select bank15
  6402  0739  081B               	movf	27,w	;volatile
  6403  073A  0020               	movlb	0	; select bank0
  6404  073B  00BA               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  6405  073C  002F               	movlb	15	; select bank15
  6406  073D                     L2:	
  6407  073D  081A               	movf	26,w	;volatile
  6408  073E  0020               	movlb	0	; select bank0
  6409  073F  00B9               	movwf	Sensor_Acq_ExecutePacket@last_b
  6410  0740  2F76               	goto	l3513
  6411  0741                     l3501:	
  6412                           
  6413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  6414  0741  002E               	movlb	14	; select bank14
  6415  0742  081A               	movf	26,w	;volatile
  6416  0743  0021               	movlb	1	; select bank1
  6417  0744  02C8               	subwf	_packet_sample^(0+128),f
  6418  0745  002E               	movlb	14	; select bank14
  6419  0746  081B               	movf	27,w	;volatile
  6420  0747  0021               	movlb	1	; select bank1
  6421  0748  3BC9               	subwfb	(_packet_sample+1)^(0+128),f
  6422                           
  6423                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  6424  0749  002F               	movlb	15	; select bank15
  6425  074A  081A               	movf	26,w	;volatile
  6426  074B  0021               	movlb	1	; select bank1
  6427  074C  02CA               	subwf	(_packet_sample^(0+128)+2),f
  6428  074D  002F               	movlb	15	; select bank15
  6429  074E  081B               	movf	27,w	;volatile
  6430  074F  0021               	movlb	1	; select bank1
  6431  0750  3BCB               	subwfb	((_packet_sample+1)^(0+128)+2),f
  6432                           
  6433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  6434  0751  0020               	movlb	0	; select bank0
  6435  0752  083B               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  6436  0753  1D03               	btfss	3,2
  6437  0754  2F5C               	goto	l3509
  6438                           
  6439                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  6440  0755  002E               	movlb	14	; select bank14
  6441  0756  081A               	movf	26,w	;volatile
  6442  0757  0020               	movlb	0	; select bank0
  6443  0758  0237               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6444  0759  00F3               	movwf	abs@a
  6445  075A  002E               	movlb	14	; select bank14
  6446  075B  2F62               	goto	L5
  6447  075C                     l3509:	
  6448                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  6449                           
  6450                           
  6451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  6452  075C  002F               	movlb	15	; select bank15
  6453  075D  081A               	movf	26,w	;volatile
  6454  075E  0020               	movlb	0	; select bank0
  6455  075F  0237               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  6456  0760  00F3               	movwf	abs@a
  6457  0761  002F               	movlb	15	; select bank15
  6458  0762                     L5:	
  6459  0762  081B               	movf	27,w	;volatile
  6460  0763  0020               	movlb	0	; select bank0
  6461  0764  3B38               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  6462  0765  00F4               	movwf	abs@a+1
  6463  0766  3188  2020  3186   	fcall	_abs
  6464  0769  0873               	movf	?_abs,w
  6465  076A  0021               	movlb	1	; select bank1
  6466  076B  07D8               	addwf	_packet_noise^(0+128),f
  6467  076C  0874               	movf	?_abs+1,w
  6468  076D  3DD9               	addwfc	(_packet_noise+1)^(0+128),f
  6469                           
  6470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  6471  076E  002E               	movlb	14	; select bank14
  6472  076F  081B               	movf	27,w	;volatile
  6473  0770  0020               	movlb	0	; select bank0
  6474  0771  00B8               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  6475  0772  002E               	movlb	14	; select bank14
  6476  0773  081A               	movf	26,w	;volatile
  6477  0774  0020               	movlb	0	; select bank0
  6478  0775  00B7               	movwf	Sensor_Acq_ExecutePacket@last_a
  6479  0776                     l3513:	
  6480                           
  6481                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  6482  0776  083C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  6483  0777  1D03               	btfss	3,2
  6484  0778  2F7B               	goto	l3517
  6485                           
  6486                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  6487  0779  0021               	movlb	1	; select bank1
  6488  077A  145C               	bsf	_sensor_globalFlags^(0+128),0	;volatile
  6489  077B                     l3517:	
  6490                           
  6491                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  6492  077B  3001               	movlw	1
  6493  077C  0020               	movlb	0	; select bank0
  6494  077D  02BC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  6495                           
  6496                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  6497  077E  0021               	movlb	1	; select bank1
  6498  077F  1CDC               	btfss	_sensor_globalFlags^(0+128),1	;volatile
  6499  0780  2F83               	goto	l295
  6500                           
  6501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  6502  0781  155C               	bsf	_sensor_globalFlags^(0+128),2	;volatile
  6503                           
  6504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  6505  0782  145C               	bsf	_sensor_globalFlags^(0+128),0	;volatile
  6506  0783                     l295:	
  6507                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  6508                           
  6509                           
  6510                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  6511  0783  14DC               	bsf	_sensor_globalFlags^(0+128),1	;volatile
  6512                           
  6513                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  6514  0784  1C5C               	btfss	_sensor_globalFlags^(0+128),0	;volatile
  6515  0785  2ECB               	goto	l3477
  6516                           
  6517                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  6518  0786  3196  2638  3186   	fcall	_TMR2_StopTimer
  6519                           
  6520                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  6521  0789  0020               	movlb	0	; select bank0
  6522  078A  0831               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  6523  078B  002E               	movlb	14	; select bank14
  6524  078C  0092               	movwf	18	;volatile
  6525                           
  6526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  6527  078D  0020               	movlb	0	; select bank0
  6528  078E  0832               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  6529  078F  002E               	movlb	14	; select bank14
  6530  0790  0093               	movwf	19	;volatile
  6531                           
  6532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  6533  0791  0020               	movlb	0	; select bank0
  6534  0792  0833               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  6535  0793  002F               	movlb	15	; select bank15
  6536  0794  0093               	movwf	19	;volatile
  6537                           
  6538                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  6539  0795  0021               	movlb	1	; select bank1
  6540  0796  1D5C               	btfss	_sensor_globalFlags^(0+128),2	;volatile
  6541  0797  2F9A               	goto	l297
  6542                           
  6543                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  6544  0798  30FB               	movlw	251
  6545  0799  0008               	return
  6546  079A                     l297:	
  6547                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  6548                           
  6549                           
  6550                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  6551  079A  1DDC               	btfss	_sensor_globalFlags^(0+128),3	;volatile
  6552  079B  2F9E               	goto	l3541
  6553                           
  6554                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  6555  079C  30FA               	movlw	250
  6556  079D  0008               	return
  6557  079E                     l3541:	
  6558                           
  6559                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  6560  079E  0020               	movlb	0	; select bank0
  6561  079F  0834               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  6562  07A0  1903               	btfsc	3,2
  6563  07A1  2FA7               	goto	l3545
  6564                           
  6565                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  6566  07A2  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6567  07A3  3E08               	addlw	8
  6568  07A4  0086               	movwf	6
  6569  07A5  0187               	clrf	7
  6570  07A6  1181               	bcf	1,3
  6571  07A7                     l3545:	
  6572                           
  6573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  6574  07A7  0835               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  6575  07A8  1903               	btfsc	3,2
  6576  07A9  2FAF               	goto	l3549
  6577                           
  6578                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  6579  07AA  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6580  07AB  3E08               	addlw	8
  6581  07AC  0086               	movwf	6
  6582  07AD  0187               	clrf	7
  6583  07AE  1181               	bcf	1,3
  6584  07AF                     l3549:	
  6585                           
  6586                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  6587  07AF  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6588  07B0  3197  2731  3186   	fcall	_Sensor_isEnabled
  6589  07B3  3A00               	xorlw	0
  6590  07B4  1903               	skipnz
  6591  07B5  2FC3               	goto	l3555
  6592  07B6  0020               	movlb	0	; select bank0
  6593  07B7  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6594  07B8  3188  2000  3186   	fcall	_Sensor_isCalibrated
  6595  07BB  3A00               	xorlw	0
  6596  07BC  1D03               	skipz
  6597  07BD  2FC3               	goto	l3555
  6598                           
  6599                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  6600  07BE  0020               	movlb	0	; select bank0
  6601  07BF  083D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6602  07C0  318E  2652  3186   	fcall	_Sensor_autoCalibration
  6603  07C3                     l3555:	
  6604                           
  6605                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  6606  07C3  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6607  07C4  3197  2731  3186   	fcall	_Sensor_isEnabled
  6608  07C7  3A00               	xorlw	0
  6609  07C8  1903               	skipnz
  6610  07C9  2FD5               	goto	l3561
  6611  07CA  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6612  07CB  3188  2000  3186   	fcall	_Sensor_isCalibrated
  6613  07CE  3A00               	xorlw	0
  6614  07CF  1D03               	skipz
  6615  07D0  2FD5               	goto	l3561
  6616                           
  6617                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  6618  07D1  087D               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6619  07D2  318E  2652  3186   	fcall	_Sensor_autoCalibration
  6620  07D5                     l3561:	
  6621                           
  6622                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  6623  07D5  002E               	movlb	14	; select bank14
  6624  07D6  0196               	clrf	22	;volatile
  6625                           
  6626                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  6627  07D7  002F               	movlb	15	; select bank15
  6628  07D8  0196               	clrf	22	;volatile
  6629                           
  6630                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  6631  07D9  002E               	movlb	14	; select bank14
  6632  07DA  0197               	clrf	23	;volatile
  6633                           
  6634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  6635  07DB  002F               	movlb	15	; select bank15
  6636  07DC  0197               	clrf	23	;volatile
  6637                           
  6638                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  6639  07DD  002E               	movlb	14	; select bank14
  6640  07DE  1011               	bcf	17,0	;volatile
  6641                           
  6642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  6643  07DF  002F               	movlb	15	; select bank15
  6644  07E0  1011               	bcf	17,0	;volatile
  6645  07E1  2E68               	goto	l3401
  6646  07E2                     __end_of_Sensor_Acq_ExecutePacket:	
  6647                           
  6648                           	psect	text34
  6649  1638                     __ptext34:	
  6650 ;; *************** function _TMR2_StopTimer *****************
  6651 ;; Defined at:
  6652 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		None
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6666 ;;      Params:         0       0       0       0       0       0       0       0
  6667 ;;      Locals:         0       0       0       0       0       0       0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0       0
  6669 ;;      Totals:         0       0       0       0       0       0       0       0
  6670 ;;Total ram usage:        0 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_Sensor_Acq_ExecutePacket
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _TMR2_StopTimer
  6681  1638                     _TMR2_StopTimer:	
  6682                           
  6683                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  6684                           
  6685                           ;incstack = 0
  6686                           ; Regs used in _TMR2_StopTimer: []
  6687  1638  0020               	movlb	0	; select bank0
  6688  1639  111C               	bcf	28,2	;volatile
  6689  163A  0008               	return
  6690  163B                     __end_of_TMR2_StopTimer:	
  6691                           
  6692                           	psect	text35
  6693  1635                     __ptext35:	
  6694 ;; *************** function _TMR2_StartTimer *****************
  6695 ;; Defined at:
  6696 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		None
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6710 ;;      Params:         0       0       0       0       0       0       0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; This function calls:
  6717 ;;		Nothing
  6718 ;; This function is called by:
  6719 ;;		_Sensor_Acq_ExecutePacket
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           
  6724                           ;psect for function _TMR2_StartTimer
  6725  1635                     _TMR2_StartTimer:	
  6726                           
  6727                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  6728                           
  6729                           ;incstack = 0
  6730                           ; Regs used in _TMR2_StartTimer: []
  6731  1635  0020               	movlb	0	; select bank0
  6732  1636  151C               	bsf	28,2	;volatile
  6733  1637  0008               	return
  6734  1638                     __end_of_TMR2_StartTimer:	
  6735                           
  6736                           	psect	text36
  6737  164B                     __ptext36:	
  6738 ;; *************** function _TMR2_LoadPeriodRegister *****************
  6739 ;; Defined at:
  6740 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  periodVal       1    wreg     unsigned char 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  periodVal       1    0[COMMON] unsigned char 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  1    wreg      void 
  6747 ;; Registers used:
  6748 ;;		wreg
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6754 ;;      Params:         0       0       0       0       0       0       0       0
  6755 ;;      Locals:         1       0       0       0       0       0       0       0
  6756 ;;      Temps:          0       0       0       0       0       0       0       0
  6757 ;;      Totals:         1       0       0       0       0       0       0       0
  6758 ;;Total ram usage:        1 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; This function calls:
  6761 ;;		Nothing
  6762 ;; This function is called by:
  6763 ;;		_Sensor_Acq_ExecutePacket
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           
  6768                           ;psect for function _TMR2_LoadPeriodRegister
  6769  164B                     _TMR2_LoadPeriodRegister:	
  6770                           
  6771                           ;incstack = 0
  6772                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  6773                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  6774  164B  00F0               	movwf	TMR2_LoadPeriodRegister@periodVal
  6775                           
  6776                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  6777  164C  0870               	movf	TMR2_LoadPeriodRegister@periodVal,w
  6778  164D  0020               	movlb	0	; select bank0
  6779  164E  009B               	movwf	27	;volatile
  6780  164F  0008               	return
  6781  1650                     __end_of_TMR2_LoadPeriodRegister:	
  6782                           
  6783                           	psect	text37
  6784  00C7                     __ptext37:	
  6785 ;; *************** function _Sensor_loadADCSettings *****************
  6786 ;; Defined at:
  6787 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  sensor          1    wreg     PTR struct .
  6790 ;;		 -> NULL(0), mtouch_sensor(27), 
  6791 ;;  adc_index       1    1[COMMON] unsigned char 
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  sensor          1    8[COMMON] PTR struct .
  6794 ;;		 -> NULL(0), mtouch_sensor(27), 
  6795 ;;  addressOffse    1    7[COMMON] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      void 
  6798 ;; Registers used:
  6799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6805 ;;      Params:         1       0       0       0       0       0       0       0
  6806 ;;      Locals:         4       0       0       0       0       0       0       0
  6807 ;;      Temps:          3       0       0       0       0       0       0       0
  6808 ;;      Totals:         8       0       0       0       0       0       0       0
  6809 ;;Total ram usage:        8 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    1
  6812 ;; This function calls:
  6813 ;;		_Sensor_isCalibrated
  6814 ;;		_Sensor_isCalibratingAcqTime
  6815 ;; This function is called by:
  6816 ;;		_Sensor_Acq_ExecutePacket
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           
  6821                           ;psect for function _Sensor_loadADCSettings
  6822  00C7                     _Sensor_loadADCSettings:	
  6823                           
  6824                           ;incstack = 0
  6825                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  6826                           ;Sensor_loadADCSettings@sensor stored from wreg
  6827  00C7  00F8               	movwf	Sensor_loadADCSettings@sensor
  6828                           
  6829                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  6830  00C8  0878               	movf	Sensor_loadADCSettings@sensor,w
  6831  00C9  1903               	btfsc	3,2
  6832  00CA  0008               	return
  6833                           
  6834                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  6835  00CB  0871               	movf	Sensor_loadADCSettings@adc_index,w
  6836  00CC  1D03               	btfss	3,2
  6837  00CD  28D1               	goto	l3293
  6838  00CE  01F5               	clrf	_Sensor_loadADCSettings$554
  6839  00CF  01F6               	clrf	_Sensor_loadADCSettings$554+1
  6840  00D0  28D5               	goto	l249
  6841  00D1                     l3293:	
  6842  00D1  3080               	movlw	128
  6843  00D2  00F5               	movwf	_Sensor_loadADCSettings$554
  6844  00D3  3000               	movlw	0
  6845  00D4  00F6               	movwf	_Sensor_loadADCSettings$554+1
  6846  00D5                     l249:	
  6847  00D5  0875               	movf	_Sensor_loadADCSettings$554,w
  6848  00D6  00F2               	movwf	??_Sensor_loadADCSettings
  6849  00D7  0872               	movf	??_Sensor_loadADCSettings,w
  6850  00D8  00F7               	movwf	Sensor_loadADCSettings@addressOffset
  6851                           
  6852                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  6853  00D9  0A78               	incf	Sensor_loadADCSettings@sensor,w
  6854  00DA  0086               	movwf	6
  6855  00DB  0187               	clrf	7
  6856  00DC  0801               	movf	1,w
  6857  00DD  00F2               	movwf	??_Sensor_loadADCSettings
  6858  00DE  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6859  00DF  3E11               	addlw	17
  6860  00E0  00F3               	movwf	??_Sensor_loadADCSettings+1
  6861  00E1  01F4               	clrf	??_Sensor_loadADCSettings+2
  6862  00E2  3007               	movlw	7
  6863  00E3  3DF4               	addwfc	??_Sensor_loadADCSettings+2,f
  6864  00E4  0873               	movf	??_Sensor_loadADCSettings+1,w
  6865  00E5  0086               	movwf	6
  6866  00E6  0874               	movf	??_Sensor_loadADCSettings+2,w
  6867  00E7  0087               	movwf	7
  6868  00E8  0872               	movf	??_Sensor_loadADCSettings,w
  6869  00E9  0081               	movwf	1
  6870                           
  6871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  6872  00EA  0878               	movf	Sensor_loadADCSettings@sensor,w
  6873  00EB  3E05               	addlw	5
  6874  00EC  0086               	movwf	6
  6875  00ED  0187               	clrf	7
  6876  00EE  0801               	movf	1,w
  6877  00EF  00F2               	movwf	??_Sensor_loadADCSettings
  6878  00F0  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6879  00F1  3E19               	addlw	25
  6880  00F2  00F3               	movwf	??_Sensor_loadADCSettings+1
  6881  00F3  01F4               	clrf	??_Sensor_loadADCSettings+2
  6882  00F4  3007               	movlw	7
  6883  00F5  3DF4               	addwfc	??_Sensor_loadADCSettings+2,f
  6884  00F6  0873               	movf	??_Sensor_loadADCSettings+1,w
  6885  00F7  0086               	movwf	6
  6886  00F8  0874               	movf	??_Sensor_loadADCSettings+2,w
  6887  00F9  0087               	movwf	7
  6888  00FA  0872               	movf	??_Sensor_loadADCSettings,w
  6889  00FB  0081               	movwf	1
  6890                           
  6891                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  6892  00FC  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6893  00FD  3E13               	addlw	19
  6894  00FE  00F2               	movwf	??_Sensor_loadADCSettings
  6895  00FF  01F3               	clrf	??_Sensor_loadADCSettings+1
  6896  0100  3007               	movlw	7
  6897  0101  3DF3               	addwfc	??_Sensor_loadADCSettings+1,f
  6898  0102  0872               	movf	??_Sensor_loadADCSettings,w
  6899  0103  0086               	movwf	6
  6900  0104  0873               	movf	??_Sensor_loadADCSettings+1,w
  6901  0105  0087               	movwf	7
  6902  0106  3050               	movlw	80
  6903  0107  0081               	movwf	1
  6904                           
  6905                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  6906  0108  30FE               	movlw	254
  6907  0109  00F2               	movwf	??_Sensor_loadADCSettings
  6908  010A  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6909  010B  3E18               	addlw	24
  6910  010C  0086               	movwf	6
  6911  010D  0187               	clrf	7
  6912  010E  3007               	movlw	7
  6913  010F  3D87               	addwfc	7,f
  6914  0110  0872               	movf	??_Sensor_loadADCSettings,w
  6915  0111  0581               	andwf	1,f
  6916                           
  6917                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  6918  0112  0878               	movf	Sensor_loadADCSettings@sensor,w
  6919  0113  3188  2000  3180   	fcall	_Sensor_isCalibrated
  6920  0116  3A00               	xorlw	0
  6921  0117  1903               	skipnz
  6922  0118  292C               	goto	l3307
  6923                           
  6924                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  6925  0119  0878               	movf	Sensor_loadADCSettings@sensor,w
  6926  011A  3E02               	addlw	2
  6927  011B  0086               	movwf	6
  6928  011C  0187               	clrf	7
  6929  011D  0801               	movf	1,w
  6930  011E  00F2               	movwf	??_Sensor_loadADCSettings
  6931  011F  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6932  0120  3E16               	addlw	22
  6933  0121  00F3               	movwf	??_Sensor_loadADCSettings+1
  6934  0122  01F4               	clrf	??_Sensor_loadADCSettings+2
  6935  0123  3007               	movlw	7
  6936  0124  3DF4               	addwfc	??_Sensor_loadADCSettings+2,f
  6937  0125  0873               	movf	??_Sensor_loadADCSettings+1,w
  6938  0126  0086               	movwf	6
  6939  0127  0874               	movf	??_Sensor_loadADCSettings+2,w
  6940  0128  0087               	movwf	7
  6941  0129  0872               	movf	??_Sensor_loadADCSettings,w
  6942  012A  0081               	movwf	1
  6943  012B  293F               	goto	l3311
  6944  012C                     l3307:	
  6945                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  6946                           
  6947                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  6948                           
  6949                           
  6950                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  6951  012C  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6952  012D  3E16               	addlw	22
  6953  012E  00F2               	movwf	??_Sensor_loadADCSettings
  6954  012F  01F3               	clrf	??_Sensor_loadADCSettings+1
  6955  0130  3007               	movlw	7
  6956  0131  3DF3               	addwfc	??_Sensor_loadADCSettings+1,f
  6957  0132  0872               	movf	??_Sensor_loadADCSettings,w
  6958  0133  0086               	movwf	6
  6959  0134  0873               	movf	??_Sensor_loadADCSettings+1,w
  6960  0135  0087               	movwf	7
  6961  0136  3020               	movlw	32
  6962  0137  0081               	movwf	1
  6963                           
  6964                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  6965  0138  0878               	movf	Sensor_loadADCSettings@sensor,w
  6966  0139  3196  269C  3180   	fcall	_Sensor_isCalibratingAcqTime
  6967  013C  3A00               	xorlw	0
  6968  013D  1903               	skipnz
  6969  013E  2951               	goto	l3313
  6970  013F                     l3311:	
  6971                           
  6972                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  6973  013F  0878               	movf	Sensor_loadADCSettings@sensor,w
  6974  0140  3E03               	addlw	3
  6975  0141  0086               	movwf	6
  6976  0142  0187               	clrf	7
  6977  0143  0801               	movf	1,w
  6978  0144  00F2               	movwf	??_Sensor_loadADCSettings
  6979  0145  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6980  0146  3E17               	addlw	23
  6981  0147  00F3               	movwf	??_Sensor_loadADCSettings+1
  6982  0148  01F4               	clrf	??_Sensor_loadADCSettings+2
  6983  0149  3007               	movlw	7
  6984  014A  3DF4               	addwfc	??_Sensor_loadADCSettings+2,f
  6985  014B  0873               	movf	??_Sensor_loadADCSettings+1,w
  6986  014C  0086               	movwf	6
  6987  014D  0874               	movf	??_Sensor_loadADCSettings+2,w
  6988  014E  0087               	movwf	7
  6989  014F  0872               	movf	??_Sensor_loadADCSettings,w
  6990  0150  295C               	goto	L6
  6991  0151                     l3313:	
  6992                           
  6993                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  6994  0151  0877               	movf	Sensor_loadADCSettings@addressOffset,w
  6995  0152  3E17               	addlw	23
  6996  0153  00F2               	movwf	??_Sensor_loadADCSettings
  6997  0154  01F3               	clrf	??_Sensor_loadADCSettings+1
  6998  0155  3007               	movlw	7
  6999  0156  3DF3               	addwfc	??_Sensor_loadADCSettings+1,f
  7000  0157  0872               	movf	??_Sensor_loadADCSettings,w
  7001  0158  0086               	movwf	6
  7002  0159  0873               	movf	??_Sensor_loadADCSettings+1,w
  7003  015A  0087               	movwf	7
  7004  015B  3020               	movlw	32
  7005  015C                     L6:	
  7006  015C  0081               	movwf	1
  7007                           
  7008                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  7009                           
  7010                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  7011  015D  0878               	movf	Sensor_loadADCSettings@sensor,w
  7012  015E  3E04               	addlw	4
  7013  015F  0086               	movwf	6
  7014  0160  0187               	clrf	7
  7015  0161  0801               	movf	1,w
  7016  0162  00F2               	movwf	??_Sensor_loadADCSettings
  7017  0163  01F3               	clrf	??_Sensor_loadADCSettings+1
  7018  0164  3009               	movlw	9
  7019  0165                     u2875:	
  7020  0165  35F2               	lslf	??_Sensor_loadADCSettings,f
  7021  0166  0DF3               	rlf	??_Sensor_loadADCSettings+1,f
  7022  0167  0B89               	decfsz	9,f
  7023  0168  2965               	goto	u2875
  7024  0169  3571               	lslf	Sensor_loadADCSettings@adc_index,w
  7025  016A  3EC8               	addlw	(low (_packet_sample| 0))& (0+255)
  7026  016B  0086               	movwf	6
  7027  016C  0187               	clrf	7
  7028  016D  0872               	movf	??_Sensor_loadADCSettings,w
  7029  016E  3FC0               	movwi [0]fsr1
  7030  016F  0873               	movf	??_Sensor_loadADCSettings+1,w
  7031  0170  3FC1               	movwi [1]fsr1
  7032  0171  0008               	return
  7033  0172                     __end_of_Sensor_loadADCSettings:	
  7034                           
  7035                           	psect	text38
  7036  0800                     __ptext38:	
  7037 ;; *************** function _Sensor_isCalibrated *****************
  7038 ;; Defined at:
  7039 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  sensor          1    wreg     PTR struct .
  7042 ;;		 -> NULL(0), mtouch_sensor(27), 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  sensor          1    0[COMMON] PTR struct .
  7045 ;;		 -> NULL(0), mtouch_sensor(27), 
  7046 ;; Return value:  Size  Location     Type
  7047 ;;                  1    wreg      _Bool 
  7048 ;; Registers used:
  7049 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7055 ;;      Params:         0       0       0       0       0       0       0       0
  7056 ;;      Locals:         1       0       0       0       0       0       0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0
  7058 ;;      Totals:         1       0       0       0       0       0       0       0
  7059 ;;Total ram usage:        1 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; This function calls:
  7062 ;;		Nothing
  7063 ;; This function is called by:
  7064 ;;		_Sensor_Acquisition
  7065 ;;		_Sensor_loadADCSettings
  7066 ;;		_Sensor_Acq_ExecutePacket
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _Sensor_isCalibrated
  7072  0800                     _Sensor_isCalibrated:	
  7073                           
  7074                           ;incstack = 0
  7075                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  7076                           ;Sensor_isCalibrated@sensor stored from wreg
  7077  0800  00F0               	movwf	Sensor_isCalibrated@sensor
  7078                           
  7079                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
  7080  0801  0870               	movf	Sensor_isCalibrated@sensor,w
  7081  0802  3E08               	addlw	8
  7082  0803  0086               	movwf	6
  7083  0804  0187               	clrf	7
  7084  0805  0C01               	rrf	1,w
  7085  0806  0C89               	rrf	9,f
  7086  0807  3901               	andlw	1
  7087  0808  0008               	return
  7088  0809                     __end_of_Sensor_isCalibrated:	
  7089                           
  7090                           	psect	text39
  7091  1731                     __ptext39:	
  7092 ;; *************** function _Sensor_isEnabled *****************
  7093 ;; Defined at:
  7094 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;  sensor          1    wreg     PTR struct .
  7097 ;;		 -> NULL(0), mtouch_sensor(27), 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  sensor          1    1[COMMON] PTR struct .
  7100 ;;		 -> NULL(0), mtouch_sensor(27), 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      _Bool 
  7103 ;; Registers used:
  7104 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7110 ;;      Params:         0       0       0       0       0       0       0       0
  7111 ;;      Locals:         1       0       0       0       0       0       0       0
  7112 ;;      Temps:          1       0       0       0       0       0       0       0
  7113 ;;      Totals:         2       0       0       0       0       0       0       0
  7114 ;;Total ram usage:        2 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_Sensor_Service
  7120 ;;		_Sensor_postAcquisitionProcess
  7121 ;;		_Sensor_Acq_ExecutePacket
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _Sensor_isEnabled
  7127  1731                     _Sensor_isEnabled:	
  7128                           
  7129                           ;incstack = 0
  7130                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7131                           ;Sensor_isEnabled@sensor stored from wreg
  7132  1731  00F1               	movwf	Sensor_isEnabled@sensor
  7133                           
  7134                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
  7135  1732  0871               	movf	Sensor_isEnabled@sensor,w
  7136  1733  1903               	btfsc	3,2
  7137  1734  2F3F               	goto	l3271
  7138                           
  7139                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
  7140  1735  0871               	movf	Sensor_isEnabled@sensor,w
  7141  1736  3E08               	addlw	8
  7142  1737  0086               	movwf	6
  7143  1738  0187               	clrf	7
  7144  1739  0C01               	rrf	1,w
  7145  173A  00F0               	movwf	??_Sensor_isEnabled
  7146  173B  0CF0               	rrf	??_Sensor_isEnabled,f
  7147  173C  0C70               	rrf	??_Sensor_isEnabled,w
  7148  173D  3901               	andlw	1
  7149  173E  0008               	return
  7150  173F                     l3271:	
  7151                           
  7152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
  7153  173F  3000               	movlw	0
  7154  1740  0008               	return
  7155  1741                     __end_of_Sensor_isEnabled:	
  7156                           
  7157                           	psect	text40
  7158  16E8                     __ptext40:	
  7159 ;; *************** function _Sensor_isActive *****************
  7160 ;; Defined at:
  7161 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  sensor          1    wreg     PTR struct .
  7164 ;;		 -> NULL(0), mtouch_sensor(27), 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  sensor          1    0[COMMON] PTR struct .
  7167 ;;		 -> NULL(0), mtouch_sensor(27), 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      _Bool 
  7170 ;; Registers used:
  7171 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7177 ;;      Params:         0       0       0       0       0       0       0       0
  7178 ;;      Locals:         1       0       0       0       0       0       0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0       0
  7180 ;;      Totals:         1       0       0       0       0       0       0       0
  7181 ;;Total ram usage:        1 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; This function calls:
  7184 ;;		Nothing
  7185 ;; This function is called by:
  7186 ;;		_Sensor_Acquisition
  7187 ;;		_Sensor_Acq_ExecutePacket
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           
  7192                           ;psect for function _Sensor_isActive
  7193  16E8                     _Sensor_isActive:	
  7194                           
  7195                           ;incstack = 0
  7196                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7197                           ;Sensor_isActive@sensor stored from wreg
  7198  16E8  00F0               	movwf	Sensor_isActive@sensor
  7199                           
  7200                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
  7201  16E9  0870               	movf	Sensor_isActive@sensor,w
  7202  16EA  1D03               	btfss	3,2
  7203  16EB  2EEE               	goto	l3281
  7204                           
  7205                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
  7206  16EC  3000               	movlw	0
  7207  16ED  0008               	return
  7208  16EE                     l3281:	
  7209                           
  7210                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
  7211  16EE  0870               	movf	Sensor_isActive@sensor,w
  7212  16EF  3E08               	addlw	8
  7213  16F0  0086               	movwf	6
  7214  16F1  0187               	clrf	7
  7215  16F2  0C01               	rrf	1,w
  7216  16F3  3901               	andlw	1
  7217  16F4  0008               	return
  7218  16F5                     __end_of_Sensor_isActive:	
  7219                           
  7220                           	psect	text41
  7221  0E52                     __ptext41:	
  7222 ;; *************** function _Sensor_autoCalibration *****************
  7223 ;; Defined at:
  7224 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  sensor          1    wreg     PTR struct .
  7227 ;;		 -> NULL(0), mtouch_sensor(27), 
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;  sensor          1   12[COMMON] PTR struct .
  7230 ;;		 -> NULL(0), mtouch_sensor(27), 
  7231 ;;  adcIndex        1   11[COMMON] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7241 ;;      Params:         0       0       0       0       0       0       0       0
  7242 ;;      Locals:         2       0       0       0       0       0       0       0
  7243 ;;      Temps:          4       0       0       0       0       0       0       0
  7244 ;;      Totals:         6       0       0       0       0       0       0       0
  7245 ;;Total ram usage:        6 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    1
  7248 ;; This function calls:
  7249 ;;		_Sensor_getScanGroupIndex
  7250 ;;		_Sensor_isCalibratingAcqTime
  7251 ;;		_Sensor_setCalibratAcqTime
  7252 ;;		_Sensor_setCalibrated
  7253 ;;		_abs
  7254 ;; This function is called by:
  7255 ;;		_Sensor_Acq_ExecutePacket
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           
  7260                           ;psect for function _Sensor_autoCalibration
  7261  0E52                     _Sensor_autoCalibration:	
  7262                           
  7263                           ;incstack = 0
  7264                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7265                           ;Sensor_autoCalibration@sensor stored from wreg
  7266  0E52  00FC               	movwf	Sensor_autoCalibration@sensor
  7267                           
  7268                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  7269  0E53  087C               	movf	Sensor_autoCalibration@sensor,w
  7270  0E54  3189  21D3  318E   	fcall	_Sensor_getScanGroupIndex
  7271  0E57  00F7               	movwf	??_Sensor_autoCalibration
  7272  0E58  0877               	movf	??_Sensor_autoCalibration,w
  7273  0E59  00FB               	movwf	Sensor_autoCalibration@adcIndex
  7274                           
  7275                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  7276  0E5A  087C               	movf	Sensor_autoCalibration@sensor,w
  7277  0E5B  3196  269C  318E   	fcall	_Sensor_isCalibratingAcqTime
  7278  0E5E  3A00               	xorlw	0
  7279  0E5F  1D03               	skipz
  7280  0E60  2E91               	goto	l3333
  7281                           
  7282                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  7283  0E61  357B               	lslf	Sensor_autoCalibration@adcIndex,w
  7284  0E62  3EC8               	addlw	(low (_packet_sample| 0))& (0+255)
  7285  0E63  0086               	movwf	6
  7286  0E64  0187               	clrf	7
  7287  0E65  3F40               	moviw [0]fsr1
  7288  0E66  00F7               	movwf	??_Sensor_autoCalibration
  7289  0E67  3F41               	moviw [1]fsr1
  7290  0E68  00F8               	movwf	??_Sensor_autoCalibration+1
  7291  0E69  087C               	movf	Sensor_autoCalibration@sensor,w
  7292  0E6A  3E04               	addlw	4
  7293  0E6B  0086               	movwf	6
  7294  0E6C  0187               	clrf	7
  7295  0E6D  0801               	movf	1,w
  7296  0E6E  00F9               	movwf	??_Sensor_autoCalibration+2
  7297  0E6F  01FA               	clrf	??_Sensor_autoCalibration+3
  7298  0E70  3009               	movlw	9
  7299  0E71                     u2895:	
  7300  0E71  35F9               	lslf	??_Sensor_autoCalibration+2,f
  7301  0E72  0DFA               	rlf	??_Sensor_autoCalibration+3,f
  7302  0E73  0B89               	decfsz	9,f
  7303  0E74  2E71               	goto	u2895
  7304  0E75  0878               	movf	??_Sensor_autoCalibration+1,w
  7305  0E76  027A               	subwf	??_Sensor_autoCalibration+3,w
  7306  0E77  1D03               	skipz
  7307  0E78  2E7B               	goto	u2905
  7308  0E79  0877               	movf	??_Sensor_autoCalibration,w
  7309  0E7A  0279               	subwf	??_Sensor_autoCalibration+2,w
  7310  0E7B                     u2905:	
  7311  0E7B  1803               	skipnc
  7312  0E7C  2E8D               	goto	l3331
  7313                           
  7314                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  7315  0E7D  3001               	movlw	1
  7316  0E7E  00F7               	movwf	??_Sensor_autoCalibration
  7317  0E7F  087C               	movf	Sensor_autoCalibration@sensor,w
  7318  0E80  3E05               	addlw	5
  7319  0E81  0086               	movwf	6
  7320  0E82  0187               	clrf	7
  7321  0E83  0877               	movf	??_Sensor_autoCalibration,w
  7322  0E84  0781               	addwf	1,f
  7323  0E85  300F               	movlw	15
  7324  0E86  0201               	subwf	1,w
  7325  0E87  1C03               	skipc
  7326  0E88  0008               	return
  7327                           
  7328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  7329  0E89  087C               	movf	Sensor_autoCalibration@sensor,w
  7330  0E8A  3196  26DB         	fcall	_Sensor_setCalibratAcqTime
  7331  0E8C  0008               	return
  7332  0E8D                     l3331:	
  7333                           
  7334                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
  7335  0E8D  087C               	movf	Sensor_autoCalibration@sensor,w
  7336  0E8E  3196  26DB         	fcall	_Sensor_setCalibratAcqTime
  7337  0E90  0008               	return
  7338  0E91                     l3333:	
  7339                           
  7340                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  7341  0E91  087C               	movf	Sensor_autoCalibration@sensor,w
  7342  0E92  3E04               	addlw	4
  7343  0E93  0086               	movwf	6
  7344  0E94  0187               	clrf	7
  7345  0E95  0801               	movf	1,w
  7346  0E96  00F7               	movwf	??_Sensor_autoCalibration
  7347  0E97  01F8               	clrf	??_Sensor_autoCalibration+1
  7348  0E98  35F7               	lslf	??_Sensor_autoCalibration,f
  7349  0E99  0DF8               	rlf	??_Sensor_autoCalibration+1,f
  7350  0E9A  087C               	movf	Sensor_autoCalibration@sensor,w
  7351  0E9B  3E06               	addlw	6
  7352  0E9C  0086               	movwf	6
  7353  0E9D  0187               	clrf	7
  7354  0E9E  357B               	lslf	Sensor_autoCalibration@adcIndex,w
  7355  0E9F  3EC8               	addlw	(low (_packet_sample| 0))& (0+255)
  7356  0EA0  0084               	movwf	4
  7357  0EA1  0185               	clrf	5
  7358  0EA2  3F40               	moviw [0]fsr1
  7359  0EA3  0200               	subwf	0,w
  7360  0EA4  00F3               	movwf	abs@a
  7361  0EA5  3101               	addfsr 0,1
  7362  0EA6  3F41               	moviw [1]fsr1
  7363  0EA7  3B00               	subwfb	0,w
  7364  0EA8  00F4               	movwf	abs@a+1
  7365  0EA9  3188  2020  318E   	fcall	_abs
  7366  0EAC  0878               	movf	??_Sensor_autoCalibration+1,w
  7367  0EAD  0274               	subwf	?_abs+1,w
  7368  0EAE  1D03               	skipz
  7369  0EAF  2EB2               	goto	u2925
  7370  0EB0  0877               	movf	??_Sensor_autoCalibration,w
  7371  0EB1  0273               	subwf	?_abs,w
  7372  0EB2                     u2925:	
  7373  0EB2  1803               	skipnc
  7374  0EB3  2EC0               	goto	l3339
  7375                           
  7376                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  7377  0EB4  3020               	movlw	32
  7378  0EB5  00F7               	movwf	??_Sensor_autoCalibration
  7379  0EB6  087C               	movf	Sensor_autoCalibration@sensor,w
  7380  0EB7  3E02               	addlw	2
  7381  0EB8  0086               	movwf	6
  7382  0EB9  0187               	clrf	7
  7383  0EBA  0877               	movf	??_Sensor_autoCalibration,w
  7384  0EBB  0081               	movwf	1
  7385                           
  7386                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
  7387  0EBC  087C               	movf	Sensor_autoCalibration@sensor,w
  7388  0EBD  3196  26B6         	fcall	_Sensor_setCalibrated
  7389                           
  7390                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
  7391  0EBF  0008               	return
  7392  0EC0                     l3339:	
  7393                           
  7394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
  7395  0EC0  3002               	movlw	2
  7396  0EC1  00F7               	movwf	??_Sensor_autoCalibration
  7397  0EC2  087C               	movf	Sensor_autoCalibration@sensor,w
  7398  0EC3  3E03               	addlw	3
  7399  0EC4  0086               	movwf	6
  7400  0EC5  0187               	clrf	7
  7401  0EC6  0877               	movf	??_Sensor_autoCalibration,w
  7402  0EC7  0781               	addwf	1,f
  7403                           
  7404                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  7405  0EC8  087C               	movf	Sensor_autoCalibration@sensor,w
  7406  0EC9  3E03               	addlw	3
  7407  0ECA  0086               	movwf	6
  7408  0ECB  0187               	clrf	7
  7409  0ECC  3020               	movlw	32
  7410  0ECD  0201               	subwf	1,w
  7411  0ECE  1C03               	skipc
  7412  0ECF  0008               	return
  7413                           
  7414                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  7415  0ED0  3020               	movlw	32
  7416  0ED1  00F7               	movwf	??_Sensor_autoCalibration
  7417  0ED2  087C               	movf	Sensor_autoCalibration@sensor,w
  7418  0ED3  3E02               	addlw	2
  7419  0ED4  0086               	movwf	6
  7420  0ED5  0187               	clrf	7
  7421  0ED6  0877               	movf	??_Sensor_autoCalibration,w
  7422  0ED7  0081               	movwf	1
  7423                           
  7424                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
  7425  0ED8  087C               	movf	Sensor_autoCalibration@sensor,w
  7426  0ED9  3196  26B6         	fcall	_Sensor_setCalibrated
  7427  0EDB  0008               	return
  7428  0EDC                     __end_of_Sensor_autoCalibration:	
  7429                           
  7430                           	psect	text42
  7431  16B6                     __ptext42:	
  7432 ;; *************** function _Sensor_setCalibrated *****************
  7433 ;; Defined at:
  7434 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  sensor          1    wreg     PTR struct .
  7437 ;;		 -> NULL(0), mtouch_sensor(27), 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  sensor          1    0[COMMON] PTR struct .
  7440 ;;		 -> NULL(0), mtouch_sensor(27), 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7450 ;;      Params:         0       0       0       0       0       0       0       0
  7451 ;;      Locals:         1       0       0       0       0       0       0       0
  7452 ;;      Temps:          0       0       0       0       0       0       0       0
  7453 ;;      Totals:         1       0       0       0       0       0       0       0
  7454 ;;Total ram usage:        1 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_Sensor_autoCalibration
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _Sensor_setCalibrated
  7465  16B6                     _Sensor_setCalibrated:	
  7466                           
  7467                           ;incstack = 0
  7468                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  7469                           ;Sensor_setCalibrated@sensor stored from wreg
  7470  16B6  00F0               	movwf	Sensor_setCalibrated@sensor
  7471                           
  7472                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
  7473  16B7  0870               	movf	Sensor_setCalibrated@sensor,w
  7474  16B8  3E08               	addlw	8
  7475  16B9  0086               	movwf	6
  7476  16BA  0187               	clrf	7
  7477  16BB  1501               	bsf	1,2
  7478                           
  7479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
  7480  16BC  0870               	movf	Sensor_setCalibrated@sensor,w
  7481  16BD  3E08               	addlw	8
  7482  16BE  0086               	movwf	6
  7483  16BF  0187               	clrf	7
  7484  16C0  1201               	bcf	1,4
  7485  16C1  0008               	return
  7486  16C2                     __end_of_Sensor_setCalibrated:	
  7487                           
  7488                           	psect	text43
  7489  16DB                     __ptext43:	
  7490 ;; *************** function _Sensor_setCalibratAcqTime *****************
  7491 ;; Defined at:
  7492 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  sensor          1    wreg     PTR struct .
  7495 ;;		 -> NULL(0), mtouch_sensor(27), 
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;  sensor          1    0[COMMON] PTR struct .
  7498 ;;		 -> NULL(0), mtouch_sensor(27), 
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      void 
  7501 ;; Registers used:
  7502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7508 ;;      Params:         0       0       0       0       0       0       0       0
  7509 ;;      Locals:         1       0       0       0       0       0       0       0
  7510 ;;      Temps:          0       0       0       0       0       0       0       0
  7511 ;;      Totals:         1       0       0       0       0       0       0       0
  7512 ;;Total ram usage:        1 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; This function calls:
  7515 ;;		Nothing
  7516 ;; This function is called by:
  7517 ;;		_Sensor_autoCalibration
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           
  7522                           ;psect for function _Sensor_setCalibratAcqTime
  7523  16DB                     _Sensor_setCalibratAcqTime:	
  7524                           
  7525                           ;incstack = 0
  7526                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7527                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  7528  16DB  00F0               	movwf	Sensor_setCalibratAcqTime@sensor
  7529                           
  7530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
  7531  16DC  0870               	movf	Sensor_setCalibratAcqTime@sensor,w
  7532  16DD  3E08               	addlw	8
  7533  16DE  0086               	movwf	6
  7534  16DF  0187               	clrf	7
  7535  16E0  1601               	bsf	1,4
  7536                           
  7537                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  7538  16E1  0870               	movf	Sensor_setCalibratAcqTime@sensor,w
  7539  16E2  3E03               	addlw	3
  7540  16E3  0086               	movwf	6
  7541  16E4  0187               	clrf	7
  7542  16E5  0181               	clrf	1
  7543  16E6  0A81               	incf	1,f
  7544  16E7  0008               	return
  7545  16E8                     __end_of_Sensor_setCalibratAcqTime:	
  7546                           
  7547                           	psect	text44
  7548  169C                     __ptext44:	
  7549 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  7550 ;; Defined at:
  7551 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  sensor          1    wreg     PTR struct .
  7554 ;;		 -> NULL(0), mtouch_sensor(27), 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  sensor          1    0[COMMON] PTR struct .
  7557 ;;		 -> NULL(0), mtouch_sensor(27), 
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  1    wreg      _Bool 
  7560 ;; Registers used:
  7561 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7567 ;;      Params:         0       0       0       0       0       0       0       0
  7568 ;;      Locals:         1       0       0       0       0       0       0       0
  7569 ;;      Temps:          0       0       0       0       0       0       0       0
  7570 ;;      Totals:         1       0       0       0       0       0       0       0
  7571 ;;Total ram usage:        1 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; This function calls:
  7574 ;;		Nothing
  7575 ;; This function is called by:
  7576 ;;		_Sensor_loadADCSettings
  7577 ;;		_Sensor_autoCalibration
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           
  7582                           ;psect for function _Sensor_isCalibratingAcqTime
  7583  169C                     _Sensor_isCalibratingAcqTime:	
  7584                           
  7585                           ;incstack = 0
  7586                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  7587                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  7588  169C  00F0               	movwf	Sensor_isCalibratingAcqTime@sensor
  7589                           
  7590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
  7591  169D  0870               	movf	Sensor_isCalibratingAcqTime@sensor,w
  7592  169E  3E08               	addlw	8
  7593  169F  0086               	movwf	6
  7594  16A0  0187               	clrf	7
  7595  16A1  0E01               	swapf	1,w
  7596  16A2  3901               	andlw	1
  7597  16A3  0008               	return
  7598  16A4                     __end_of_Sensor_isCalibratingAcqTime:	
  7599                           
  7600                           	psect	text45
  7601  09D3                     __ptext45:	
  7602 ;; *************** function _Sensor_getScanGroupIndex *****************
  7603 ;; Defined at:
  7604 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  sensor          1    wreg     PTR struct .
  7607 ;;		 -> NULL(0), mtouch_sensor(27), 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  sensor          1    2[COMMON] PTR struct .
  7610 ;;		 -> NULL(0), mtouch_sensor(27), 
  7611 ;;  sensorGroup     1    3[COMMON] unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      unsigned char 
  7614 ;; Registers used:
  7615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7621 ;;      Params:         0       0       0       0       0       0       0       0
  7622 ;;      Locals:         2       0       0       0       0       0       0       0
  7623 ;;      Temps:          2       0       0       0       0       0       0       0
  7624 ;;      Totals:         4       0       0       0       0       0       0       0
  7625 ;;Total ram usage:        4 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; This function calls:
  7628 ;;		Nothing
  7629 ;; This function is called by:
  7630 ;;		_Sensor_postAcquisitionProcess
  7631 ;;		_Sensor_autoCalibration
  7632 ;;		_Sensor_RawSample_Update
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           
  7637                           ;psect for function _Sensor_getScanGroupIndex
  7638  09D3                     _Sensor_getScanGroupIndex:	
  7639                           
  7640                           ;incstack = 0
  7641                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  7642                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  7643  09D3  00F2               	movwf	Sensor_getScanGroupIndex@sensor
  7644                           
  7645                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  7646  09D4  01F3               	clrf	Sensor_getScanGroupIndex@sensorGroup
  7647  09D5                     l3163:	
  7648                           
  7649                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  7650  09D5  0873               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7651  09D6  00F0               	movwf	??_Sensor_getScanGroupIndex
  7652  09D7  01F1               	clrf	??_Sensor_getScanGroupIndex+1
  7653  09D8  35F0               	lslf	??_Sensor_getScanGroupIndex,f
  7654  09D9  0DF1               	rlf	??_Sensor_getScanGroupIndex+1,f
  7655  09DA  3024               	movlw	low (_sensor_scan_group| (0+32768))
  7656  09DB  0770               	addwf	??_Sensor_getScanGroupIndex,w
  7657  09DC  0084               	movwf	4
  7658  09DD  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7659  09DE  3D71               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7660  09DF  0085               	movwf	5
  7661  09E0  0800               	movf	0,w	;code access
  7662  09E1  0672               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7663  09E2  1D03               	skipz
  7664  09E3  29E6               	goto	l3169
  7665  09E4                     l3165:	
  7666                           
  7667                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
  7668  09E4  3000               	movlw	0
  7669  09E5  0008               	return
  7670  09E6                     l3169:	
  7671                           
  7672                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  7673  09E6  0873               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  7674  09E7  00F0               	movwf	??_Sensor_getScanGroupIndex
  7675  09E8  01F1               	clrf	??_Sensor_getScanGroupIndex+1
  7676  09E9  35F0               	lslf	??_Sensor_getScanGroupIndex,f
  7677  09EA  0DF1               	rlf	??_Sensor_getScanGroupIndex+1,f
  7678  09EB  3025               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7679  09EC  0770               	addwf	??_Sensor_getScanGroupIndex,w
  7680  09ED  0084               	movwf	4
  7681  09EE  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7682  09EF  3D71               	addwfc	??_Sensor_getScanGroupIndex+1,w
  7683  09F0  0085               	movwf	5
  7684  09F1  0800               	movf	0,w	;code access
  7685  09F2  0672               	xorwf	Sensor_getScanGroupIndex@sensor,w
  7686  09F3  1D03               	skipz
  7687  09F4  29F7               	goto	l3175
  7688                           
  7689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
  7690  09F5  3001               	movlw	1
  7691  09F6  0008               	return
  7692  09F7                     l3175:	
  7693                           
  7694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
  7695  09F7  3001               	movlw	1
  7696  09F8  00F0               	movwf	??_Sensor_getScanGroupIndex
  7697  09F9  0870               	movf	??_Sensor_getScanGroupIndex,w
  7698  09FA  07F3               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  7699  09FB  3002               	movlw	2
  7700  09FC  0273               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  7701  09FD  1803               	btfsc	3,0
  7702  09FE  29E4               	goto	l3165
  7703  09FF  29D5               	goto	l3163
  7704  0A00                     __end_of_Sensor_getScanGroupIndex:	
  7705                           
  7706                           	psect	text46
  7707  1721                     __ptext46:	
  7708 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  7709 ;; Defined at:
  7710 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;		None
  7713 ;; Auto vars:     Size  Location     Type
  7714 ;;		None
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  1    wreg      void 
  7717 ;; Registers used:
  7718 ;;		wreg, status,2, status,0
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7724 ;;      Params:         0       0       0       0       0       0       0       0
  7725 ;;      Locals:         0       0       0       0       0       0       0       0
  7726 ;;      Temps:          0       0       0       0       0       0       0       0
  7727 ;;      Totals:         0       0       0       0       0       0       0       0
  7728 ;;Total ram usage:        0 bytes
  7729 ;; Hardware stack levels used:    1
  7730 ;; This function calls:
  7731 ;;		Nothing
  7732 ;; This function is called by:
  7733 ;;		_MTOUCH_Initialize
  7734 ;;		_Sensor_Acq_ExecutePacket
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           
  7739                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  7740  1721                     _MTOUCH_Sensor_Scan_Initialize:	
  7741                           
  7742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
  7743                           
  7744                           ;incstack = 0
  7745                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  7746  1721  30FC               	movlw	-4
  7747  1722  0020               	movlb	0	; select bank0
  7748  1723  059C               	andwf	28,f	;volatile
  7749                           
  7750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
  7751  1724  002E               	movlb	14	; select bank14
  7752  1725  0191               	clrf	17	;volatile
  7753                           
  7754                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
  7755  1726  002F               	movlb	15	; select bank15
  7756  1727  0191               	clrf	17	;volatile
  7757                           
  7758                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  7759  1728  3090               	movlw	144
  7760  1729  002E               	movlb	14	; select bank14
  7761  172A  0092               	movwf	18	;volatile
  7762                           
  7763                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
  7764  172B  3040               	movlw	64
  7765  172C  0094               	movwf	20	;volatile
  7766                           
  7767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
  7768  172D  3040               	movlw	64
  7769  172E  002F               	movlb	15	; select bank15
  7770  172F  0094               	movwf	20	;volatile
  7771  1730  0008               	return
  7772  1731                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  7773                           
  7774                           	psect	text47
  7775  1711                     __ptext47:	
  7776 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  7777 ;; Defined at:
  7778 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;		None
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  button          1   11[BANK1 ] enum E3069
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  1    wreg      void 
  7785 ;; Registers used:
  7786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7792 ;;      Params:         0       0       0       0       0       0       0       0
  7793 ;;      Locals:         0       0       1       0       0       0       0       0
  7794 ;;      Temps:          0       0       1       0       0       0       0       0
  7795 ;;      Totals:         0       0       2       0       0       0       0       0
  7796 ;;Total ram usage:        2 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:   12
  7799 ;; This function calls:
  7800 ;;		_Button_Service
  7801 ;; This function is called by:
  7802 ;;		_MTOUCH_Service_Mainloop
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           
  7807                           ;psect for function _MTOUCH_Button_ServiceAll
  7808  1711                     _MTOUCH_Button_ServiceAll:	
  7809                           
  7810                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7814  1711  0021               	movlb	1	; select bank1
  7815  1712  01EA               	clrf	MTOUCH_Button_ServiceAll@button^(0+128)
  7816  1713                     l4043:	
  7817                           
  7818                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
  7819  1713  086A               	movf	MTOUCH_Button_ServiceAll@button^(0+128),w
  7820  1714  318B  236E  3197   	fcall	_Button_Service
  7821                           
  7822                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
  7823  1717  3001               	movlw	1
  7824  1718  0021               	movlb	1	; select bank1
  7825  1719  00E9               	movwf	??_MTOUCH_Button_ServiceAll^(0+128)
  7826  171A  0869               	movf	??_MTOUCH_Button_ServiceAll^(0+128),w
  7827  171B  07EA               	addwf	MTOUCH_Button_ServiceAll@button^(0+128),f
  7828  171C  3003               	movlw	3
  7829  171D  026A               	subwf	MTOUCH_Button_ServiceAll@button^(0+128),w
  7830  171E  1803               	btfsc	3,0
  7831  171F  0008               	return
  7832  1720  2F13               	goto	l4043
  7833  1721                     __end_of_MTOUCH_Button_ServiceAll:	
  7834                           
  7835                           	psect	text48
  7836  0B6E                     __ptext48:	
  7837 ;; *************** function _Button_Service *****************
  7838 ;; Defined at:
  7839 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  name            1    wreg     enum E3069
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  name            1    8[BANK1 ] enum E3069
  7844 ;;  button          1    9[BANK1 ] PTR struct .
  7845 ;;		 -> mtouch_button(48), 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      void 
  7848 ;; Registers used:
  7849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7855 ;;      Params:         0       0       0       0       0       0       0       0
  7856 ;;      Locals:         0       0       2       0       0       0       0       0
  7857 ;;      Temps:          0       0       2       0       0       0       0       0
  7858 ;;      Totals:         0       0       4       0       0       0       0       0
  7859 ;;Total ram usage:        4 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:   11
  7862 ;; This function calls:
  7863 ;;		_Button_Deviation_Update
  7864 ;;		_Button_Reading_Update
  7865 ;;		_Button_State_Initializing
  7866 ;;		_Button_State_NotPressed
  7867 ;;		_Button_State_Pressed
  7868 ;;		_MTOUCH_Button_Initialize
  7869 ;;		_MTOUCH_Sensor_isCalibrated
  7870 ;;		_MTOUCH_Sensor_wasSampled
  7871 ;; This function is called by:
  7872 ;;		_MTOUCH_Button_ServiceAll
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           
  7877                           ;psect for function _Button_Service
  7878  0B6E                     _Button_Service:	
  7879                           
  7880                           ;incstack = 0
  7881                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7882                           ;Button_Service@name stored from wreg
  7883  0B6E  0021               	movlb	1	; select bank1
  7884  0B6F  00E7               	movwf	Button_Service@name^(0+128)
  7885                           
  7886                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
  7887  0B70  0867               	movf	Button_Service@name^(0+128),w
  7888  0B71  00E5               	movwf	??_Button_Service^(0+128)
  7889  0B72  3003               	movlw	3
  7890  0B73                     u3975:	
  7891  0B73  35E5               	lslf	??_Button_Service^(0+128),f
  7892  0B74  3EFF               	addlw	-1
  7893  0B75  1D03               	skipz
  7894  0B76  2B73               	goto	u3975
  7895  0B77  3565               	lslf	??_Button_Service^(0+128),w
  7896  0B78  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7897  0B79  00E6               	movwf	(??_Button_Service+1)^(0+128)
  7898  0B7A  0866               	movf	(??_Button_Service+1)^(0+128),w
  7899  0B7B  00E8               	movwf	Button_Service@button^(0+128)
  7900                           
  7901                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  7902  0B7C  0A68               	incf	Button_Service@button^(0+128),w
  7903  0B7D  0086               	movwf	6
  7904  0B7E  3001               	movlw	1	; select bank2/3
  7905  0B7F  0087               	movwf	7
  7906  0B80  0801               	movf	1,w
  7907  0B81  3196  26F5  318B   	fcall	_MTOUCH_Sensor_wasSampled
  7908  0B84  3A00               	xorlw	0
  7909  0B85  1903               	skipnz
  7910  0B86  0008               	return
  7911  0B87  0021               	movlb	1	; select bank1
  7912  0B88  0A68               	incf	Button_Service@button^(0+128),w
  7913  0B89  0086               	movwf	6
  7914  0B8A  3001               	movlw	1	; select bank2/3
  7915  0B8B  0087               	movwf	7
  7916  0B8C  0801               	movf	1,w
  7917  0B8D  3197  27AA  318B   	fcall	_MTOUCH_Sensor_isCalibrated
  7918  0B90  3A00               	xorlw	0
  7919  0B91  1903               	skipnz
  7920  0B92  0008               	return
  7921                           
  7922                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
  7923  0B93  0021               	movlb	1	; select bank1
  7924  0B94  0868               	movf	Button_Service@button^(0+128),w
  7925  0B95  3196  26CE  318B   	fcall	_Button_Reading_Update
  7926                           
  7927                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
  7928  0B98  0021               	movlb	1	; select bank1
  7929  0B99  0868               	movf	Button_Service@button^(0+128),w
  7930  0B9A  318D  25CB  318B   	fcall	_Button_Deviation_Update
  7931                           
  7932                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  7933  0B9D  0021               	movlb	1	; select bank1
  7934  0B9E  0868               	movf	Button_Service@button^(0+128),w
  7935  0B9F  3E02               	addlw	2
  7936  0BA0  0086               	movwf	6
  7937  0BA1  3001               	movlw	1	; select bank2/3
  7938  0BA2  0087               	movwf	7
  7939  0BA3  3003               	movlw	3
  7940  0BA4  0201               	subwf	1,w
  7941  0BA5  1C03               	skipc
  7942  0BA6  2BAF               	goto	l4001
  7943                           
  7944                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
  7945  0BA7  0868               	movf	Button_Service@button^(0+128),w
  7946  0BA8  0086               	movwf	6
  7947  0BA9  3001               	movlw	1	; select bank2/3
  7948  0BAA  0087               	movwf	7
  7949  0BAB  0801               	movf	1,w
  7950  0BAC  318A  2264  318B   	fcall	_MTOUCH_Button_Initialize
  7951  0BAF                     l4001:	
  7952                           
  7953                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  7954  0BAF  0021               	movlb	1	; select bank1
  7955  0BB0  0868               	movf	Button_Service@button^(0+128),w
  7956  0BB1  00E5               	movwf	??_Button_Service^(0+128)
  7957  0BB2  0865               	movf	??_Button_Service^(0+128),w
  7958  0BB3  0020               	movlb	0	; select bank0
  7959  0BB4  00EF               	movwf	Button_State_Pressed@button
  7960  0BB5  0021               	movlb	1	; select bank1
  7961  0BB6  0868               	movf	Button_Service@button^(0+128),w
  7962  0BB7  3E02               	addlw	2
  7963  0BB8  0086               	movwf	6
  7964  0BB9  3001               	movlw	1	; select bank2/3
  7965  0BBA  0087               	movwf	7
  7966  0BBB  3501               	lslf	1,w
  7967  0BBC  3EA0               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  7968  0BBD  0086               	movwf	6
  7969  0BBE  0187               	clrf	7
  7970  0BBF  3F41               	moviw [1]fsr1
  7971  0BC0  008A               	movwf	10
  7972  0BC1  3F40               	moviw [0]fsr1
  7973  0BC2  000A               	callw
  7974  0BC3  318B               	pagesel	$
  7975  0BC4  0008               	return
  7976  0BC5                     __end_of_Button_Service:	
  7977                           
  7978                           	psect	text49
  7979  16F5                     __ptext49:	
  7980 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  7981 ;; Defined at:
  7982 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  sensor          1    wreg     enum E2854
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  sensor          1    5[COMMON] enum E2854
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      _Bool 
  7989 ;; Registers used:
  7990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7996 ;;      Params:         0       0       0       0       0       0       0       0
  7997 ;;      Locals:         1       0       0       0       0       0       0       0
  7998 ;;      Temps:          1       0       0       0       0       0       0       0
  7999 ;;      Totals:         2       0       0       0       0       0       0       0
  8000 ;;Total ram usage:        2 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    1
  8003 ;; This function calls:
  8004 ;;		___bmul
  8005 ;; This function is called by:
  8006 ;;		_Button_Service
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           
  8011                           ;psect for function _MTOUCH_Sensor_wasSampled
  8012  16F5                     _MTOUCH_Sensor_wasSampled:	
  8013                           
  8014                           ;incstack = 0
  8015                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8016                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  8017  16F5  00F5               	movwf	MTOUCH_Sensor_wasSampled@sensor
  8018                           
  8019                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
  8020  16F6  3009               	movlw	9
  8021  16F7  00F4               	movwf	??_MTOUCH_Sensor_wasSampled
  8022  16F8  0874               	movf	??_MTOUCH_Sensor_wasSampled,w
  8023  16F9  00F0               	movwf	___bmul@multiplicand
  8024  16FA  0875               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  8025  16FB  3197  2741         	fcall	___bmul
  8026  16FD  3EB5               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8027  16FE  0086               	movwf	6
  8028  16FF  0187               	clrf	7
  8029  1700  0801               	movf	1,w
  8030  1701  3901               	andlw	1
  8031  1702  0008               	return
  8032  1703                     __end_of_MTOUCH_Sensor_wasSampled:	
  8033                           
  8034                           	psect	text50
  8035  17AA                     __ptext50:	
  8036 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  8037 ;; Defined at:
  8038 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;  sensor          1    wreg     enum E2854
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;  sensor          1    5[COMMON] enum E2854
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      _Bool 
  8045 ;; Registers used:
  8046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8052 ;;      Params:         0       0       0       0       0       0       0       0
  8053 ;;      Locals:         1       0       0       0       0       0       0       0
  8054 ;;      Temps:          1       0       0       0       0       0       0       0
  8055 ;;      Totals:         2       0       0       0       0       0       0       0
  8056 ;;Total ram usage:        2 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    1
  8059 ;; This function calls:
  8060 ;;		___bmul
  8061 ;; This function is called by:
  8062 ;;		_Button_Service
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           
  8067                           ;psect for function _MTOUCH_Sensor_isCalibrated
  8068  17AA                     _MTOUCH_Sensor_isCalibrated:	
  8069                           
  8070                           ;incstack = 0
  8071                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8072                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  8073  17AA  00F5               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  8074                           
  8075                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
  8076  17AB  3003               	movlw	3
  8077  17AC  0275               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  8078  17AD  1803               	skipnc
  8079  17AE  2FBD               	goto	l3811
  8080                           
  8081                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  8082  17AF  3009               	movlw	9
  8083  17B0  00F4               	movwf	??_MTOUCH_Sensor_isCalibrated
  8084  17B1  0874               	movf	??_MTOUCH_Sensor_isCalibrated,w
  8085  17B2  00F0               	movwf	___bmul@multiplicand
  8086  17B3  0875               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  8087  17B4  3197  2741         	fcall	___bmul
  8088  17B6  3EB5               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  8089  17B7  0086               	movwf	6
  8090  17B8  0187               	clrf	7
  8091  17B9  0C01               	rrf	1,w
  8092  17BA  0C89               	rrf	9,f
  8093  17BB  3901               	andlw	1
  8094  17BC  0008               	return
  8095  17BD                     l3811:	
  8096                           
  8097                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
  8098  17BD  3000               	movlw	0
  8099  17BE  0008               	return
  8100  17BF                     __end_of_MTOUCH_Sensor_isCalibrated:	
  8101                           
  8102                           	psect	text51
  8103  0172                     __ptext51:	
  8104 ;; *************** function _Button_State_NotPressed *****************
  8105 ;; Defined at:
  8106 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  button          1   79[BANK0 ] PTR struct .
  8109 ;;		 -> mtouch_button(48), 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      void 
  8114 ;; Registers used:
  8115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8121 ;;      Params:         0       1       0       0       0       0       0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0       0
  8123 ;;      Temps:          0       0       2       0       0       0       0       0
  8124 ;;      Totals:         0       1       2       0       0       0       0       0
  8125 ;;Total ram usage:        3 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:   10
  8128 ;; This function calls:
  8129 ;;		_Button_Baseline_Update
  8130 ;;		_Button_DefaultCallback
  8131 ;;		_MTOUCH_Button_Initialize
  8132 ;;		_myButtonPressedCallback
  8133 ;; This function is called by:
  8134 ;;		_Button_Service
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           
  8139                           ;psect for function _Button_State_NotPressed
  8140  0172                     _Button_State_NotPressed:	
  8141                           
  8142                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  8143                           
  8144                           ;incstack = 0
  8145                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8146  0172  0020               	movlb	0	; select bank0
  8147  0173  086F               	movf	Button_State_NotPressed@button,w
  8148  0174  3E09               	addlw	9
  8149  0175  0086               	movwf	6
  8150  0176  3001               	movlw	1	; select bank2/3
  8151  0177  0087               	movwf	7
  8152  0178  0801               	movf	1,w
  8153  0179  3A80               	xorlw	128
  8154  017A  0021               	movlb	1	; select bank1
  8155  017B  00E1               	movwf	??_Button_State_NotPressed^(0+128)
  8156  017C  0020               	movlb	0	; select bank0
  8157  017D  086F               	movf	Button_State_NotPressed@button,w
  8158  017E  3E0E               	addlw	14
  8159  017F  0086               	movwf	6
  8160  0180  3001               	movlw	1	; select bank2/3
  8161  0181  0087               	movwf	7
  8162  0182  0301               	decf	1,w
  8163  0183  3AFF               	xorlw	255
  8164  0184  3A80               	xorlw	128
  8165  0185  0021               	movlb	1	; select bank1
  8166  0186  02E1               	subwf	??_Button_State_NotPressed^(0+128),f
  8167  0187  1803               	skipnc
  8168  0188  29B7               	goto	l3873
  8169                           
  8170                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
  8171  0189  0020               	movlb	0	; select bank0
  8172  018A  086F               	movf	Button_State_NotPressed@button,w
  8173  018B  3E0A               	addlw	10
  8174  018C  0086               	movwf	6
  8175  018D  3001               	movlw	1	; select bank2/3
  8176  018E  0087               	movwf	7
  8177  018F  3001               	movlw	1
  8178  0190  0781               	addwf	1,f
  8179  0191  3141               	addfsr 1,1
  8180  0192  1803               	skipnc
  8181  0193  0A81               	incf	1,f
  8182                           
  8183                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  8184  0194  086F               	movf	Button_State_NotPressed@button,w
  8185  0195  3E0A               	addlw	10
  8186  0196  0086               	movwf	6
  8187  0197  3001               	movlw	1	; select bank2/3
  8188  0198  0087               	movwf	7
  8189  0199  3F40               	moviw [0]fsr1
  8190  019A  0021               	movlb	1	; select bank1
  8191  019B  00E1               	movwf	??_Button_State_NotPressed^(0+128)
  8192  019C  3F41               	moviw [1]fsr1
  8193  019D  00E2               	movwf	(??_Button_State_NotPressed^(0+128)+1)
  8194  019E  3000               	movlw	0
  8195  019F  0262               	subwf	(??_Button_State_NotPressed+1)^(0+128),w
  8196  01A0  3041               	movlw	65
  8197  01A1  1903               	skipnz
  8198  01A2  0261               	subwf	??_Button_State_NotPressed^(0+128),w
  8199  01A3  1C03               	skipc
  8200  01A4  2A02               	goto	l514
  8201                           
  8202                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
  8203  01A5  0020               	movlb	0	; select bank0
  8204  01A6  086F               	movf	Button_State_NotPressed@button,w
  8205  01A7  3E0A               	addlw	10
  8206  01A8  0086               	movwf	6
  8207  01A9  3001               	movlw	1	; select bank2/3
  8208  01AA  0087               	movwf	7
  8209  01AB  3000               	movlw	0
  8210  01AC  3FC0               	movwi [0]fsr1
  8211  01AD  3FC1               	movwi [1]fsr1
  8212                           
  8213                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  8214  01AE  086F               	movf	Button_State_NotPressed@button,w
  8215  01AF  0086               	movwf	6
  8216  01B0  3001               	movlw	1	; select bank2/3
  8217  01B1  0087               	movwf	7
  8218  01B2  0801               	movf	1,w
  8219  01B3  318A  2264  3181   	fcall	_MTOUCH_Button_Initialize
  8220  01B6  2A02               	goto	l514
  8221  01B7                     l3873:	
  8222  01B7  0020               	movlb	0	; select bank0
  8223  01B8  086F               	movf	Button_State_NotPressed@button,w
  8224  01B9  3E09               	addlw	9
  8225  01BA  0086               	movwf	6
  8226  01BB  3001               	movlw	1	; select bank2/3
  8227  01BC  0087               	movwf	7
  8228  01BD  0801               	movf	1,w
  8229  01BE  0021               	movlb	1	; select bank1
  8230  01BF  00E1               	movwf	??_Button_State_NotPressed^(0+128)
  8231  01C0  01E2               	clrf	(??_Button_State_NotPressed^(0+128)+1)
  8232  01C1  1BE1               	btfsc	??_Button_State_NotPressed^(0+128),7
  8233  01C2  03E2               	decf	(??_Button_State_NotPressed^(0+128)+1),f
  8234  01C3  0020               	movlb	0	; select bank0
  8235  01C4  086F               	movf	Button_State_NotPressed@button,w
  8236  01C5  3E0E               	addlw	14
  8237  01C6  0086               	movwf	6
  8238  01C7  3001               	movlw	1	; select bank2/3
  8239  01C8  0087               	movwf	7
  8240  01C9  0021               	movlb	1	; select bank1
  8241  01CA  0862               	movf	(??_Button_State_NotPressed+1)^(0+128),w
  8242  01CB  3A80               	xorlw	128
  8243  01CC  3C80               	sublw	128
  8244  01CD  1D03               	skipz
  8245  01CE  29D1               	goto	u3815
  8246  01CF  0861               	movf	??_Button_State_NotPressed^(0+128),w
  8247  01D0  0201               	subwf	1,w
  8248  01D1                     u3815:	
  8249  01D1  1803               	skipnc
  8250  01D2  29F9               	goto	l3879
  8251                           
  8252                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
  8253  01D3  3002               	movlw	2
  8254  01D4  0021               	movlb	1	; select bank1
  8255  01D5  00E1               	movwf	??_Button_State_NotPressed^(0+128)
  8256  01D6  0020               	movlb	0	; select bank0
  8257  01D7  086F               	movf	Button_State_NotPressed@button,w
  8258  01D8  3E02               	addlw	2
  8259  01D9  0086               	movwf	6
  8260  01DA  3001               	movlw	1	; select bank2/3
  8261  01DB  0087               	movwf	7
  8262  01DC  0021               	movlb	1	; select bank1
  8263  01DD  0861               	movf	??_Button_State_NotPressed^(0+128),w
  8264  01DE  0081               	movwf	1
  8265                           
  8266                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8267  01DF  0020               	movlb	0	; select bank0
  8268  01E0  086F               	movf	Button_State_NotPressed@button,w
  8269  01E1  3E0A               	addlw	10
  8270  01E2  0086               	movwf	6
  8271  01E3  3001               	movlw	1	; select bank2/3
  8272  01E4  0087               	movwf	7
  8273  01E5  3000               	movlw	0
  8274  01E6  3FC0               	movwi [0]fsr1
  8275  01E7  3FC1               	movwi [1]fsr1
  8276                           
  8277                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
  8278  01E8  086F               	movf	Button_State_NotPressed@button,w
  8279  01E9  0086               	movwf	6
  8280  01EA  3001               	movlw	1	; select bank2/3
  8281  01EB  0087               	movwf	7
  8282  01EC  0801               	movf	1,w
  8283  01ED  0021               	movlb	1	; select bank1
  8284  01EE  00E1               	movwf	??_Button_State_NotPressed^(0+128)
  8285  01EF  0861               	movf	??_Button_State_NotPressed^(0+128),w
  8286  01F0  0020               	movlb	0	; select bank0
  8287  01F1  00EE               	movwf	myButtonPressedCallback@button
  8288  01F2  0021               	movlb	1	; select bank1
  8289  01F3  0829               	movf	(_callback_pressed+1)^(0+128),w
  8290  01F4  008A               	movwf	10
  8291  01F5  0828               	movf	_callback_pressed^(0+128),w
  8292  01F6  000A               	callw
  8293  01F7  3181               	pagesel	$
  8294                           
  8295                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
  8296  01F8  2A02               	goto	l514
  8297  01F9                     l3879:	
  8298                           
  8299                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
  8300  01F9  0020               	movlb	0	; select bank0
  8301  01FA  086F               	movf	Button_State_NotPressed@button,w
  8302  01FB  3E0A               	addlw	10
  8303  01FC  0086               	movwf	6
  8304  01FD  3001               	movlw	1	; select bank2/3
  8305  01FE  0087               	movwf	7
  8306  01FF  3000               	movlw	0
  8307  0200  3FC0               	movwi [0]fsr1
  8308  0201  3FC1               	movwi [1]fsr1
  8309  0202                     l514:	
  8310                           
  8311                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
  8312  0202  0020               	movlb	0	; select bank0
  8313  0203  086F               	movf	Button_State_NotPressed@button,w
  8314  0204  3E0C               	addlw	12
  8315  0205  0086               	movwf	6
  8316  0206  3001               	movlw	1	; select bank2/3
  8317  0207  0087               	movwf	7
  8318  0208  3001               	movlw	1
  8319  0209  0781               	addwf	1,f
  8320  020A  3141               	addfsr 1,1
  8321  020B  1803               	skipnc
  8322  020C  0A81               	incf	1,f
  8323                           
  8324                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  8325  020D  086F               	movf	Button_State_NotPressed@button,w
  8326  020E  3E0C               	addlw	12
  8327  020F  0086               	movwf	6
  8328  0210  3001               	movlw	1	; select bank2/3
  8329  0211  0087               	movwf	7
  8330  0212  0016               	moviw fsr1++
  8331  0213  3A40               	xorlw	64
  8332  0214  0021               	movlb	1	; select bank1
  8333  0215  00E1               	movwf	??_Button_State_NotPressed^(0+128)
  8334  0216  0016               	moviw fsr1++
  8335  0217  04E1               	iorwf	??_Button_State_NotPressed^(0+128),f
  8336  0218  1D03               	btfss	3,2
  8337  0219  0008               	return
  8338                           
  8339                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  8340  021A  0020               	movlb	0	; select bank0
  8341  021B  086F               	movf	Button_State_NotPressed@button,w
  8342  021C  3E0C               	addlw	12
  8343  021D  0086               	movwf	6
  8344  021E  3001               	movlw	1	; select bank2/3
  8345  021F  0087               	movwf	7
  8346  0220  3000               	movlw	0
  8347  0221  3FC0               	movwi [0]fsr1
  8348  0222  3FC1               	movwi [1]fsr1
  8349                           
  8350                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
  8351  0223  086F               	movf	Button_State_NotPressed@button,w
  8352  0224  318E  26DC         	fcall	_Button_Baseline_Update
  8353  0226  0008               	return
  8354  0227                     __end_of_Button_State_NotPressed:	
  8355                           
  8356                           	psect	text52
  8357  0C7F                     __ptext52:	
  8358 ;; *************** function _Button_State_Initializing *****************
  8359 ;; Defined at:
  8360 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;  button          1   79[BANK0 ] PTR struct .
  8363 ;;		 -> mtouch_button(48), 
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;		None
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  1    wreg      void 
  8368 ;; Registers used:
  8369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8375 ;;      Params:         0       1       0       0       0       0       0       0
  8376 ;;      Locals:         0       0       0       0       0       0       0       0
  8377 ;;      Temps:          0       0       4       0       0       0       0       0
  8378 ;;      Totals:         0       1       4       0       0       0       0       0
  8379 ;;Total ram usage:        5 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    3
  8382 ;; This function calls:
  8383 ;;		_Button_Baseline_Initialize
  8384 ;;		_Button_Baseline_Update
  8385 ;; This function is called by:
  8386 ;;		_Button_Service
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           
  8391                           ;psect for function _Button_State_Initializing
  8392  0C7F                     _Button_State_Initializing:	
  8393                           
  8394                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  8395                           
  8396                           ;incstack = 0
  8397                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8398  0C7F  0020               	movlb	0	; select bank0
  8399  0C80  086F               	movf	Button_State_Initializing@button,w
  8400  0C81  3E0A               	addlw	10
  8401  0C82  0086               	movwf	6
  8402  0C83  3001               	movlw	1	; select bank2/3
  8403  0C84  0087               	movwf	7
  8404  0C85  3F40               	moviw [0]fsr1
  8405  0C86  0021               	movlb	1	; select bank1
  8406  0C87  00E1               	movwf	??_Button_State_Initializing^(0+128)
  8407  0C88  3F41               	moviw [1]fsr1
  8408  0C89  00E2               	movwf	(??_Button_State_Initializing^(0+128)+1)
  8409  0C8A  3000               	movlw	0
  8410  0C8B  0262               	subwf	(??_Button_State_Initializing+1)^(0+128),w
  8411  0C8C  3009               	movlw	9
  8412  0C8D  1903               	skipnz
  8413  0C8E  0261               	subwf	??_Button_State_Initializing^(0+128),w
  8414  0C8F  1803               	skipnc
  8415  0C90  2C97               	goto	l3857
  8416                           
  8417                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
  8418  0C91  0020               	movlb	0	; select bank0
  8419  0C92  086F               	movf	Button_State_Initializing@button,w
  8420  0C93  3189  21A6  318C   	fcall	_Button_Baseline_Initialize
  8421                           
  8422                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
  8423  0C96  2C9C               	goto	l3859
  8424  0C97                     l3857:	
  8425                           
  8426                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
  8427  0C97  0020               	movlb	0	; select bank0
  8428  0C98  086F               	movf	Button_State_Initializing@button,w
  8429  0C99  318E  26DC  318C   	fcall	_Button_Baseline_Update
  8430  0C9C                     l3859:	
  8431                           
  8432                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
  8433  0C9C  0020               	movlb	0	; select bank0
  8434  0C9D  086F               	movf	Button_State_Initializing@button,w
  8435  0C9E  3E0A               	addlw	10
  8436  0C9F  0086               	movwf	6
  8437  0CA0  3001               	movlw	1	; select bank2/3
  8438  0CA1  0087               	movwf	7
  8439  0CA2  3001               	movlw	1
  8440  0CA3  0781               	addwf	1,f
  8441  0CA4  3141               	addfsr 1,1
  8442  0CA5  1803               	skipnc
  8443  0CA6  0A81               	incf	1,f
  8444                           
  8445                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  8446  0CA7  086F               	movf	Button_State_Initializing@button,w
  8447  0CA8  3E0A               	addlw	10
  8448  0CA9  0086               	movwf	6
  8449  0CAA  3001               	movlw	1	; select bank2/3
  8450  0CAB  0087               	movwf	7
  8451  0CAC  3F40               	moviw [0]fsr1
  8452  0CAD  0021               	movlb	1	; select bank1
  8453  0CAE  00E1               	movwf	??_Button_State_Initializing^(0+128)
  8454  0CAF  3F41               	moviw [1]fsr1
  8455  0CB0  00E2               	movwf	(??_Button_State_Initializing^(0+128)+1)
  8456  0CB1  3000               	movlw	0
  8457  0CB2  0262               	subwf	(??_Button_State_Initializing+1)^(0+128),w
  8458  0CB3  3010               	movlw	16
  8459  0CB4  1903               	skipnz
  8460  0CB5  0261               	subwf	??_Button_State_Initializing^(0+128),w
  8461  0CB6  1C03               	skipc
  8462  0CB7  0008               	return
  8463                           
  8464                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  8465  0CB8  0020               	movlb	0	; select bank0
  8466  0CB9  086F               	movf	Button_State_Initializing@button,w
  8467  0CBA  3E05               	addlw	5
  8468  0CBB  0086               	movwf	6
  8469  0CBC  3001               	movlw	1	; select bank2/3
  8470  0CBD  0087               	movwf	7
  8471  0CBE  3F40               	moviw [0]fsr1
  8472  0CBF  0021               	movlb	1	; select bank1
  8473  0CC0  00E1               	movwf	??_Button_State_Initializing^(0+128)
  8474  0CC1  3F41               	moviw [1]fsr1
  8475  0CC2  00E2               	movwf	(??_Button_State_Initializing^(0+128)+1)
  8476  0CC3  3F42               	moviw [2]fsr1
  8477  0CC4  00E3               	movwf	(??_Button_State_Initializing^(0+128)+2)
  8478  0CC5  3F43               	moviw [3]fsr1
  8479  0CC6  00E4               	movwf	(??_Button_State_Initializing^(0+128)+3)
  8480  0CC7  3004               	movlw	4
  8481  0CC8                     u3785:	
  8482  0CC8  36E4               	lsrf	(??_Button_State_Initializing^(0+128)+3),f
  8483  0CC9  0CE3               	rrf	(??_Button_State_Initializing^(0+128)+2),f
  8484  0CCA  0CE2               	rrf	(??_Button_State_Initializing^(0+128)+1),f
  8485  0CCB  0CE1               	rrf	??_Button_State_Initializing^(0+128),f
  8486  0CCC  0B89               	decfsz	9,f
  8487  0CCD  2CC8               	goto	u3785
  8488  0CCE  0020               	movlb	0	; select bank0
  8489  0CCF  086F               	movf	Button_State_Initializing@button,w
  8490  0CD0  3E03               	addlw	3
  8491  0CD1  0086               	movwf	6
  8492  0CD2  3001               	movlw	1	; select bank2/3
  8493  0CD3  0087               	movwf	7
  8494  0CD4  0021               	movlb	1	; select bank1
  8495  0CD5  0861               	movf	??_Button_State_Initializing^(0+128),w
  8496  0CD6  3FC0               	movwi [0]fsr1
  8497  0CD7  0862               	movf	(??_Button_State_Initializing+1)^(0+128),w
  8498  0CD8  3FC1               	movwi [1]fsr1
  8499                           
  8500                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  8501  0CD9  0020               	movlb	0	; select bank0
  8502  0CDA  086F               	movf	Button_State_Initializing@button,w
  8503  0CDB  3E02               	addlw	2
  8504  0CDC  0086               	movwf	6
  8505  0CDD  3001               	movlw	1	; select bank2/3
  8506  0CDE  0087               	movwf	7
  8507  0CDF  0181               	clrf	1
  8508  0CE0  0A81               	incf	1,f
  8509                           
  8510                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8511  0CE1  086F               	movf	Button_State_Initializing@button,w
  8512  0CE2  3E0A               	addlw	10
  8513  0CE3  0086               	movwf	6
  8514  0CE4  3001               	movlw	1	; select bank2/3
  8515  0CE5  0087               	movwf	7
  8516  0CE6  3000               	movlw	0
  8517  0CE7  3FC0               	movwi [0]fsr1
  8518  0CE8  3FC1               	movwi [1]fsr1
  8519  0CE9  0008               	return
  8520  0CEA                     __end_of_Button_State_Initializing:	
  8521                           
  8522                           	psect	text53
  8523  0D58                     __ptext53:	
  8524 ;; *************** function _Button_State_Pressed *****************
  8525 ;; Defined at:
  8526 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  button          1   79[BANK0 ] PTR struct .
  8529 ;;		 -> mtouch_button(48), 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;		None
  8532 ;; Return value:  Size  Location     Type
  8533 ;;                  1    wreg      void 
  8534 ;; Registers used:
  8535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8536 ;; Tracked objects:
  8537 ;;		On entry : 0/0
  8538 ;;		On exit  : 0/0
  8539 ;;		Unchanged: 0/0
  8540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8541 ;;      Params:         0       1       0       0       0       0       0       0
  8542 ;;      Locals:         0       0       0       0       0       0       0       0
  8543 ;;      Temps:          0       0       2       0       0       0       0       0
  8544 ;;      Totals:         0       1       2       0       0       0       0       0
  8545 ;;Total ram usage:        3 bytes
  8546 ;; Hardware stack levels used:    1
  8547 ;; Hardware stack levels required when called:    3
  8548 ;; This function calls:
  8549 ;;		_Button_DefaultCallback
  8550 ;;		_MTOUCH_Button_Initialize
  8551 ;;		_myButtonReleasedCallback
  8552 ;; This function is called by:
  8553 ;;		_Button_Service
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           
  8558                           ;psect for function _Button_State_Pressed
  8559  0D58                     _Button_State_Pressed:	
  8560                           
  8561                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)10000u))
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8565  0D58  0020               	movlb	0	; select bank0
  8566  0D59  086F               	movf	Button_State_Pressed@button,w
  8567  0D5A  3E0A               	addlw	10
  8568  0D5B  0086               	movwf	6
  8569  0D5C  3001               	movlw	1	; select bank2/3
  8570  0D5D  0087               	movwf	7
  8571  0D5E  3F40               	moviw [0]fsr1
  8572  0D5F  0021               	movlb	1	; select bank1
  8573  0D60  00E1               	movwf	??_Button_State_Pressed^(0+128)
  8574  0D61  3F41               	moviw [1]fsr1
  8575  0D62  00E2               	movwf	(??_Button_State_Pressed^(0+128)+1)
  8576  0D63  3027               	movlw	39
  8577  0D64  0262               	subwf	(??_Button_State_Pressed+1)^(0+128),w
  8578  0D65  3010               	movlw	16
  8579  0D66  1903               	skipnz
  8580  0D67  0261               	subwf	??_Button_State_Pressed^(0+128),w
  8581  0D68  1C03               	skipc
  8582  0D69  2D85               	goto	l3889
  8583                           
  8584                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
  8585  0D6A  0020               	movlb	0	; select bank0
  8586  0D6B  086F               	movf	Button_State_Pressed@button,w
  8587  0D6C  0086               	movwf	6
  8588  0D6D  3001               	movlw	1	; select bank2/3
  8589  0D6E  0087               	movwf	7
  8590  0D6F  0801               	movf	1,w
  8591  0D70  318A  2264  318D   	fcall	_MTOUCH_Button_Initialize
  8592                           
  8593                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
  8594  0D73  0020               	movlb	0	; select bank0
  8595  0D74  086F               	movf	Button_State_Pressed@button,w
  8596  0D75  0086               	movwf	6
  8597  0D76  3001               	movlw	1	; select bank2/3
  8598  0D77  0087               	movwf	7
  8599  0D78  0801               	movf	1,w
  8600  0D79  0021               	movlb	1	; select bank1
  8601  0D7A  00E1               	movwf	??_Button_State_Pressed^(0+128)
  8602  0D7B  0861               	movf	??_Button_State_Pressed^(0+128),w
  8603  0D7C  0020               	movlb	0	; select bank0
  8604  0D7D  00EE               	movwf	myButtonReleasedCallback@button
  8605  0D7E  0021               	movlb	1	; select bank1
  8606  0D7F  0827               	movf	(_callback_notPressed+1)^(0+128),w
  8607  0D80  008A               	movwf	10
  8608  0D81  0826               	movf	_callback_notPressed^(0+128),w
  8609  0D82  000A               	callw
  8610  0D83  318D               	pagesel	$
  8611                           
  8612                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
  8613  0D84  0008               	return
  8614  0D85                     l3889:	
  8615  0D85  0020               	movlb	0	; select bank0
  8616  0D86  086F               	movf	Button_State_Pressed@button,w
  8617  0D87  3E09               	addlw	9
  8618  0D88  0086               	movwf	6
  8619  0D89  3001               	movlw	1	; select bank2/3
  8620  0D8A  0087               	movwf	7
  8621  0D8B  0801               	movf	1,w
  8622  0D8C  3A80               	xorlw	128
  8623  0D8D  0021               	movlb	1	; select bank1
  8624  0D8E  00E1               	movwf	??_Button_State_Pressed^(0+128)
  8625  0D8F  0020               	movlb	0	; select bank0
  8626  0D90  086F               	movf	Button_State_Pressed@button,w
  8627  0D91  3E0E               	addlw	14
  8628  0D92  0086               	movwf	6
  8629  0D93  3001               	movlw	1	; select bank2/3
  8630  0D94  0087               	movwf	7
  8631  0D95  086F               	movf	Button_State_Pressed@button,w
  8632  0D96  3E0E               	addlw	14
  8633  0D97  0084               	movwf	4
  8634  0D98  3001               	movlw	1	; select bank2/3
  8635  0D99  0085               	movwf	5
  8636  0D9A  3600               	lsrf	0,w
  8637  0D9B  0201               	subwf	1,w
  8638  0D9C  3A80               	xorlw	128
  8639  0D9D  0021               	movlb	1	; select bank1
  8640  0D9E  02E1               	subwf	??_Button_State_Pressed^(0+128),f
  8641  0D9F  1803               	skipnc
  8642  0DA0  0008               	return
  8643                           
  8644                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  8645  0DA1  0020               	movlb	0	; select bank0
  8646  0DA2  086F               	movf	Button_State_Pressed@button,w
  8647  0DA3  3E02               	addlw	2
  8648  0DA4  0086               	movwf	6
  8649  0DA5  3001               	movlw	1	; select bank2/3
  8650  0DA6  0087               	movwf	7
  8651  0DA7  0181               	clrf	1
  8652  0DA8  0A81               	incf	1,f
  8653                           
  8654                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  8655  0DA9  086F               	movf	Button_State_Pressed@button,w
  8656  0DAA  3E0A               	addlw	10
  8657  0DAB  0086               	movwf	6
  8658  0DAC  3001               	movlw	1	; select bank2/3
  8659  0DAD  0087               	movwf	7
  8660  0DAE  3000               	movlw	0
  8661  0DAF  3FC0               	movwi [0]fsr1
  8662  0DB0  3FC1               	movwi [1]fsr1
  8663                           
  8664                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  8665  0DB1  086F               	movf	Button_State_Pressed@button,w
  8666  0DB2  3E0C               	addlw	12
  8667  0DB3  0086               	movwf	6
  8668  0DB4  3001               	movlw	1	; select bank2/3
  8669  0DB5  0087               	movwf	7
  8670  0DB6  30FF               	movlw	255
  8671  0DB7  3FC0               	movwi [0]fsr1
  8672  0DB8  30FB               	movlw	251
  8673  0DB9  3FC1               	movwi [1]fsr1
  8674                           
  8675                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
  8676  0DBA  086F               	movf	Button_State_Pressed@button,w
  8677  0DBB  0086               	movwf	6
  8678  0DBC  3001               	movlw	1	; select bank2/3
  8679  0DBD  0087               	movwf	7
  8680  0DBE  0801               	movf	1,w
  8681  0DBF  0021               	movlb	1	; select bank1
  8682  0DC0  00E1               	movwf	??_Button_State_Pressed^(0+128)
  8683  0DC1  0861               	movf	??_Button_State_Pressed^(0+128),w
  8684  0DC2  0020               	movlb	0	; select bank0
  8685  0DC3  00EE               	movwf	myButtonReleasedCallback@button
  8686  0DC4  0021               	movlb	1	; select bank1
  8687  0DC5  0827               	movf	(_callback_notPressed+1)^(0+128),w
  8688  0DC6  008A               	movwf	10
  8689  0DC7  0826               	movf	_callback_notPressed^(0+128),w
  8690  0DC8  000A               	callw
  8691  0DC9  318D               	pagesel	$
  8692  0DCA  0008               	return
  8693  0DCB                     __end_of_Button_State_Pressed:	
  8694                           
  8695                           	psect	text54
  8696  0C21                     __ptext54:	
  8697 ;; *************** function _myButtonPressedCallback *****************
  8698 ;; Defined at:
  8699 ;;		line 49 in file "main.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  button          1   78[BANK0 ] enum E2913
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8713 ;;      Params:         0       1       0       0       0       0       0       0
  8714 ;;      Locals:         0       0       0       0       0       0       0       0
  8715 ;;      Temps:          0       0       2       0       0       0       0       0
  8716 ;;      Totals:         0       1       2       0       0       0       0       0
  8717 ;;Total ram usage:        3 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    9
  8720 ;; This function calls:
  8721 ;;		_MTOUCH_Button_Buttonmask_Get
  8722 ;;		_printf
  8723 ;; This function is called by:
  8724 ;;		_main
  8725 ;;		_Button_State_NotPressed
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _myButtonPressedCallback
  8731  0C21                     _myButtonPressedCallback:	
  8732                           
  8733                           ;main.c: 49: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 50: {
      +                          ;main.c: 51:     if(button == POWER)
  8734                           
  8735                           ;incstack = 0
  8736                           ; Regs used in _myButtonPressedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8737  0C21  0020               	movlb	0	; select bank0
  8738  0C22  036E               	decf	myButtonPressedCallback@button,w
  8739  0C23  1D03               	btfss	3,2
  8740  0C24  2C3F               	goto	l3723
  8741                           
  8742                           ;main.c: 52:     {;main.c: 53:         user_touch.POWER = ~user_touch.POWER;
  8743  0C25  1003               	clrc
  8744  0C26  0021               	movlb	1	; select bank1
  8745  0C27  1CD6               	btfss	_user_touch^(0+128),1
  8746  0C28  1403               	setc
  8747  0C29  1C03               	btfss	3,0
  8748  0C2A  2C2E               	goto	u3520
  8749  0C2B  0021               	movlb	1	; select bank1
  8750  0C2C  14D6               	bsf	_user_touch^(0+128),1
  8751  0C2D  2C30               	goto	l3717
  8752  0C2E                     u3520:	
  8753  0C2E  0021               	movlb	1	; select bank1
  8754  0C2F  10D6               	bcf	_user_touch^(0+128),1
  8755  0C30                     l3717:	
  8756                           
  8757                           ;main.c: 54:         if(user_touch.POWER) printf("ON\r\n");
  8758  0C30  1CD6               	btfss	_user_touch^(0+128),1
  8759  0C31  2C37               	goto	l3721
  8760  0C32  301F               	movlw	low (STR_3| (0+32768))
  8761  0C33  0020               	movlb	0	; select bank0
  8762  0C34  00E6               	movwf	printf@fmt
  8763  0C35  3098               	movlw	high (STR_3| (0+32768))
  8764  0C36  2C3B               	goto	L7
  8765  0C37                     l3721:	
  8766  0C37  3014               	movlw	low (STR_4| (0+32768))
  8767  0C38  0020               	movlb	0	; select bank0
  8768  0C39  00E6               	movwf	printf@fmt
  8769  0C3A  3098               	movlw	high (STR_4| (0+32768))
  8770  0C3B                     L7:	
  8771  0C3B  00E7               	movwf	printf@fmt+1
  8772  0C3C  3197  2763  318C   	fcall	_printf
  8773  0C3F                     l3723:	
  8774                           
  8775                           ;main.c: 57:     if(user_touch.POWER)
  8776  0C3F  0021               	movlb	1	; select bank1
  8777  0C40  1CD6               	btfss	_user_touch^(0+128),1
  8778  0C41  0008               	return
  8779                           
  8780                           ;main.c: 58:     {;main.c: 60:         if(MTOUCH_Button_Buttonmask_Get() == 1)
  8781  0C42  3188  20A0  318C   	fcall	_MTOUCH_Button_Buttonmask_Get
  8782  0C45  3A01               	xorlw	1
  8783  0C46  1D03               	skipz
  8784  0C47  2C62               	goto	l3733
  8785                           
  8786                           ;main.c: 61:         {;main.c: 62:             printf("------%d---------\r\n",value++);
  8787  0C48  3000               	movlw	low (STR_1| (0+32768))
  8788  0C49  0020               	movlb	0	; select bank0
  8789  0C4A  00E6               	movwf	printf@fmt
  8790  0C4B  3098               	movlw	high (STR_1| (0+32768))
  8791  0C4C  00E7               	movwf	printf@fmt+1
  8792  0C4D  0021               	movlb	1	; select bank1
  8793  0C4E  085B               	movf	_value^(0+128),w
  8794  0C4F  00DF               	movwf	??_myButtonPressedCallback^(0+128)
  8795  0C50  01E0               	clrf	(??_myButtonPressedCallback^(0+128)+1)
  8796  0C51  085F               	movf	??_myButtonPressedCallback^(0+128),w
  8797  0C52  0020               	movlb	0	; select bank0
  8798  0C53  00E8               	movwf	?_printf+2
  8799  0C54  0021               	movlb	1	; select bank1
  8800  0C55  0860               	movf	(??_myButtonPressedCallback+1)^(0+128),w
  8801  0C56  0020               	movlb	0	; select bank0
  8802  0C57  00E9               	movwf	?_printf+3
  8803  0C58  3197  2763         	fcall	_printf
  8804  0C5A  3001               	movlw	1
  8805  0C5B  0021               	movlb	1	; select bank1
  8806  0C5C  00DF               	movwf	??_myButtonPressedCallback^(0+128)
  8807  0C5D  085F               	movf	??_myButtonPressedCallback^(0+128),w
  8808  0C5E  07DB               	addwf	_value^(0+128),f
  8809  0C5F                     l3731:	
  8810                           
  8811                           ;main.c: 63:             count = 0;
  8812  0C5F  01D4               	clrf	_count^(0+128)
  8813  0C60  01D5               	clrf	(_count+1)^(0+128)
  8814                           
  8815                           ;main.c: 64:         }
  8816  0C61  0008               	return
  8817  0C62                     l3733:	
  8818  0C62  3188  20A0  318C   	fcall	_MTOUCH_Button_Buttonmask_Get
  8819  0C65  3A04               	xorlw	4
  8820  0C66  1D03               	skipz
  8821  0C67  0008               	return
  8822                           
  8823                           ;main.c: 66:         {;main.c: 67:             printf("------%d---------\r\n",value--);
  8824  0C68  3000               	movlw	low (STR_1| (0+32768))
  8825  0C69  0020               	movlb	0	; select bank0
  8826  0C6A  00E6               	movwf	printf@fmt
  8827  0C6B  3098               	movlw	high (STR_1| (0+32768))
  8828  0C6C  00E7               	movwf	printf@fmt+1
  8829  0C6D  0021               	movlb	1	; select bank1
  8830  0C6E  085B               	movf	_value^(0+128),w
  8831  0C6F  00DF               	movwf	??_myButtonPressedCallback^(0+128)
  8832  0C70  01E0               	clrf	(??_myButtonPressedCallback^(0+128)+1)
  8833  0C71  085F               	movf	??_myButtonPressedCallback^(0+128),w
  8834  0C72  0020               	movlb	0	; select bank0
  8835  0C73  00E8               	movwf	?_printf+2
  8836  0C74  0021               	movlb	1	; select bank1
  8837  0C75  0860               	movf	(??_myButtonPressedCallback+1)^(0+128),w
  8838  0C76  0020               	movlb	0	; select bank0
  8839  0C77  00E9               	movwf	?_printf+3
  8840  0C78  3197  2763  318C   	fcall	_printf
  8841  0C7B  3001               	movlw	1
  8842  0C7C  0021               	movlb	1	; select bank1
  8843  0C7D  02DB               	subwf	_value^(0+128),f
  8844  0C7E  2C5F               	goto	l3731
  8845  0C7F                     __end_of_myButtonPressedCallback:	
  8846                           
  8847                           	psect	text55
  8848  1632                     __ptext55:	
  8849 ;; *************** function _Button_DefaultCallback *****************
  8850 ;; Defined at:
  8851 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  button          1   78[BANK0 ] enum E3069
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;		None
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		None
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8865 ;;      Params:         0       1       0       0       0       0       0       0
  8866 ;;      Locals:         0       0       0       0       0       0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0
  8868 ;;      Totals:         0       1       0       0       0       0       0       0
  8869 ;;Total ram usage:        1 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; This function calls:
  8872 ;;		Nothing
  8873 ;; This function is called by:
  8874 ;;		_Button_State_NotPressed
  8875 ;;		_Button_State_Pressed
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           
  8880                           ;psect for function _Button_DefaultCallback
  8881  1632                     _Button_DefaultCallback:	
  8882                           
  8883                           ;incstack = 0
  8884                           ; Regs used in _Button_DefaultCallback: []
  8885  1632  0008               	return
  8886  1633                     __end_of_Button_DefaultCallback:	
  8887                           
  8888                           	psect	text56
  8889  163E                     __ptext56:	
  8890 ;; *************** function _myButtonReleasedCallback *****************
  8891 ;; Defined at:
  8892 ;;		line 72 in file "main.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  button          1   78[BANK0 ] enum E2913
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  1    wreg      void 
  8899 ;; Registers used:
  8900 ;;		status,2
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8906 ;;      Params:         0       1       0       0       0       0       0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0       0
  8909 ;;      Totals:         0       1       0       0       0       0       0       0
  8910 ;;Total ram usage:        1 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; This function calls:
  8913 ;;		Nothing
  8914 ;; This function is called by:
  8915 ;;		_main
  8916 ;;		_Button_State_Pressed
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _myButtonReleasedCallback
  8922  163E                     _myButtonReleasedCallback:	
  8923                           
  8924                           ;main.c: 72: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 73: 
      +                          {;main.c: 74:     count = 0;
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _myButtonReleasedCallback: [status,2]
  8928  163E  0021               	movlb	1	; select bank1
  8929  163F  01D4               	clrf	_count^(0+128)
  8930  1640  01D5               	clrf	(_count+1)^(0+128)
  8931  1641  0008               	return
  8932  1642                     __end_of_myButtonReleasedCallback:	
  8933                           
  8934                           	psect	text57
  8935  1763                     __ptext57:	
  8936 ;; *************** function _printf *****************
  8937 ;; Defined at:
  8938 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;  fmt             2   70[BANK0 ] PTR const unsigned char 
  8941 ;;		 -> STR_6(20), STR_5(20), STR_4(6), STR_3(5), 
  8942 ;;		 -> STR_2(20), STR_1(20), 
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;  ret             2    0        int 
  8945 ;;  ap              1   77[BANK0 ] PTR void [1]
  8946 ;;		 -> ?_printf(2), 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  2   70[BANK0 ] int 
  8949 ;; Registers used:
  8950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8956 ;;      Params:         0       4       0       0       0       0       0       0
  8957 ;;      Locals:         0       3       0       0       0       0       0       0
  8958 ;;      Temps:          0       1       0       0       0       0       0       0
  8959 ;;      Totals:         0       8       0       0       0       0       0       0
  8960 ;;Total ram usage:        8 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    8
  8963 ;; This function calls:
  8964 ;;		_vfprintf
  8965 ;; This function is called by:
  8966 ;;		_main
  8967 ;;		_myButtonPressedCallback
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function _printf
  8973  1763                     _printf:	
  8974                           
  8975                           ;incstack = 0
  8976                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8977  1763  3068               	movlw	(low ((?_printf| 0+2)))& (0+255)
  8978  1764  0020               	movlb	0	; select bank0
  8979  1765  00EA               	movwf	??_printf
  8980  1766  086A               	movf	??_printf,w
  8981  1767  00ED               	movwf	printf@ap
  8982  1768  0867               	movf	printf@fmt+1,w
  8983  1769  00DF               	movwf	vfprintf@fmt+1
  8984  176A  0866               	movf	printf@fmt,w
  8985  176B  00DE               	movwf	vfprintf@fmt
  8986  176C  306D               	movlw	(low (printf@ap| 0))& (0+255)
  8987  176D  00EA               	movwf	??_printf
  8988  176E  086A               	movf	??_printf,w
  8989  176F  00E0               	movwf	vfprintf@ap
  8990  1770  3000               	movlw	0
  8991  1771  318A  2200         	fcall	_vfprintf
  8992  1773  0008               	return
  8993  1774                     __end_of_printf:	
  8994                           
  8995                           	psect	text58
  8996  0A00                     __ptext58:	
  8997 ;; *************** function _vfprintf *****************
  8998 ;; Defined at:
  8999 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9000 ;; Parameters:    Size  Location     Type
  9001 ;;  fp              1    wreg     PTR struct _IO_FILE
  9002 ;;		 -> NULL(0), 
  9003 ;;  fmt             2   62[BANK0 ] PTR const unsigned char 
  9004 ;;		 -> STR_6(20), STR_5(20), STR_4(6), STR_3(5), 
  9005 ;;		 -> STR_2(20), STR_1(20), 
  9006 ;;  ap              1   64[BANK0 ] PTR PTR void 
  9007 ;;		 -> printf@ap(1), 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  fp              1   67[BANK0 ] PTR struct _IO_FILE
  9010 ;;		 -> NULL(0), 
  9011 ;;  cfmt            2   68[BANK0 ] PTR unsigned char 
  9012 ;;		 -> STR_6(20), STR_5(20), STR_4(6), STR_3(5), 
  9013 ;;		 -> STR_2(20), STR_1(20), 
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  2   62[BANK0 ] int 
  9016 ;; Registers used:
  9017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9023 ;;      Params:         0       3       0       0       0       0       0       0
  9024 ;;      Locals:         0       3       0       0       0       0       0       0
  9025 ;;      Temps:          0       2       0       0       0       0       0       0
  9026 ;;      Totals:         0       8       0       0       0       0       0       0
  9027 ;;Total ram usage:        8 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    7
  9030 ;; This function calls:
  9031 ;;		_vfpfcnvrt
  9032 ;; This function is called by:
  9033 ;;		_printf
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           
  9038                           ;psect for function _vfprintf
  9039  0A00                     _vfprintf:	
  9040                           
  9041                           ;incstack = 0
  9042                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9043                           ;vfprintf@fp stored from wreg
  9044  0A00  0020               	movlb	0	; select bank0
  9045  0A01  00E3               	movwf	vfprintf@fp
  9046                           
  9047                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  9048  0A02  085F               	movf	vfprintf@fmt+1,w
  9049  0A03  00E5               	movwf	vfprintf@cfmt+1
  9050  0A04  085E               	movf	vfprintf@fmt,w
  9051  0A05  00E4               	movwf	vfprintf@cfmt
  9052                           
  9053                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  9054  0A06  0021               	movlb	1	; select bank1
  9055  0A07  01CC               	clrf	_nout^(0+128)
  9056  0A08  01CD               	clrf	(_nout+1)^(0+128)
  9057  0A09                     l3351:	
  9058                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9059                           
  9060                           
  9061                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9062  0A09  0020               	movlb	0	; select bank0
  9063  0A0A  0864               	movf	vfprintf@cfmt,w
  9064  0A0B  0084               	movwf	4
  9065  0A0C  0865               	movf	vfprintf@cfmt+1,w
  9066  0A0D  0085               	movwf	5
  9067  0A0E  0012               	moviw fsr0++
  9068  0A0F  1903               	btfsc	3,2
  9069  0A10  2A26               	goto	l3353
  9070                           
  9071                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  9072  0A11  3064               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  9073  0A12  00E1               	movwf	??_vfprintf
  9074  0A13  0861               	movf	??_vfprintf,w
  9075  0A14  00CE               	movwf	vfpfcnvrt@fmt
  9076  0A15  0860               	movf	vfprintf@ap,w
  9077  0A16  00E2               	movwf	??_vfprintf+1
  9078  0A17  0862               	movf	??_vfprintf+1,w
  9079  0A18  00CF               	movwf	vfpfcnvrt@ap
  9080  0A19  0863               	movf	vfprintf@fp,w
  9081  0A1A  3182  2227  318A   	fcall	_vfpfcnvrt
  9082  0A1D  0020               	movlb	0	; select bank0
  9083  0A1E  084E               	movf	?_vfpfcnvrt,w
  9084  0A1F  0021               	movlb	1	; select bank1
  9085  0A20  07CC               	addwf	_nout^(0+128),f
  9086  0A21  0020               	movlb	0	; select bank0
  9087  0A22  084F               	movf	?_vfpfcnvrt+1,w
  9088  0A23  0021               	movlb	1	; select bank1
  9089  0A24  3DCD               	addwfc	(_nout+1)^(0+128),f
  9090  0A25  2A09               	goto	l3351
  9091  0A26                     l3353:	
  9092                           
  9093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  9094  0A26  0021               	movlb	1	; select bank1
  9095  0A27  084D               	movf	(_nout+1)^(0+128),w
  9096  0A28  0020               	movlb	0	; select bank0
  9097  0A29  00DF               	movwf	?_vfprintf+1
  9098  0A2A  0021               	movlb	1	; select bank1
  9099  0A2B  084C               	movf	_nout^(0+128),w
  9100  0A2C  0020               	movlb	0	; select bank0
  9101  0A2D  00DE               	movwf	?_vfprintf
  9102  0A2E  0008               	return
  9103  0A2F                     __end_of_vfprintf:	
  9104                           
  9105                           	psect	text59
  9106  0227                     __ptext59:	
  9107 ;; *************** function _vfpfcnvrt *****************
  9108 ;; Defined at:
  9109 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;  fp              1    wreg     PTR struct _IO_FILE
  9112 ;;		 -> NULL(0), 
  9113 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
  9114 ;;		 -> vfprintf@cfmt(2), 
  9115 ;;  ap              1   47[BANK0 ] PTR PTR void 
  9116 ;;		 -> printf@ap(1), 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  fp              1   61[BANK0 ] PTR struct _IO_FILE
  9119 ;;		 -> NULL(0), 
  9120 ;;  ll              8   53[BANK0 ] long long 
  9121 ;;  llu             8    0        unsigned long long 
  9122 ;;  f               4    0        unsigned long long 
  9123 ;;  ct              3    0        unsigned char [3]
  9124 ;;  vp              2    0        PTR void 
  9125 ;;  i               2    0        int 
  9126 ;;  done            2    0        int 
  9127 ;;  cp              2    0        PTR unsigned char 
  9128 ;;  c               1    0        unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  2   46[BANK0 ] int 
  9131 ;; Registers used:
  9132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9138 ;;      Params:         0       2       0       0       0       0       0       0
  9139 ;;      Locals:         0       9       0       0       0       0       0       0
  9140 ;;      Temps:          0       5       0       0       0       0       0       0
  9141 ;;      Totals:         0      16       0       0       0       0       0       0
  9142 ;;Total ram usage:       16 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    6
  9145 ;; This function calls:
  9146 ;;		_dtoa
  9147 ;;		_fputc
  9148 ;; This function is called by:
  9149 ;;		_vfprintf
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           
  9154                           ;psect for function _vfpfcnvrt
  9155  0227                     _vfpfcnvrt:	
  9156                           
  9157                           ;incstack = 0
  9158                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9159                           ;vfpfcnvrt@fp stored from wreg
  9160  0227  0020               	movlb	0	; select bank0
  9161  0228  00DD               	movwf	vfpfcnvrt@fp
  9162                           
  9163                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  9164  0229  084E               	movf	vfpfcnvrt@fmt,w
  9165  022A  0086               	movwf	6
  9166  022B  0187               	clrf	7
  9167  022C  3F40               	moviw [0]fsr1
  9168  022D  00D0               	movwf	??_vfpfcnvrt
  9169  022E  3F41               	moviw [1]fsr1
  9170  022F  00D1               	movwf	??_vfpfcnvrt+1
  9171  0230  0850               	movf	??_vfpfcnvrt,w
  9172  0231  0084               	movwf	4
  9173  0232  0851               	movf	??_vfpfcnvrt+1,w
  9174  0233  0085               	movwf	5
  9175  0234  0012               	moviw fsr0++
  9176  0235  3A25               	xorlw	37
  9177  0236  1D03               	btfss	3,2
  9178  0237  2AD4               	goto	l3231
  9179                           
  9180                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  9181  0238  084E               	movf	vfpfcnvrt@fmt,w
  9182  0239  0086               	movwf	6
  9183  023A  0187               	clrf	7
  9184  023B  3001               	movlw	1
  9185  023C  0781               	addwf	1,f
  9186  023D  3141               	addfsr 1,1
  9187  023E  1803               	skipnc
  9188  023F  0A81               	incf	1,f
  9189                           
  9190                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  9191  0240  0021               	movlb	1	; select bank1
  9192  0241  01CE               	clrf	_width^(0+128)
  9193  0242  01CF               	clrf	(_width+1)^(0+128)
  9194  0243  01D2               	clrf	_flags^(0+128)
  9195  0244  01D3               	clrf	(_flags+1)^(0+128)
  9196                           
  9197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  9198  0245  30FF               	movlw	255
  9199  0246  00D0               	movwf	_prec^(0+128)
  9200  0247  30FF               	movlw	255
  9201  0248  00D1               	movwf	(_prec^(0+128)+1)
  9202                           
  9203                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  9204  0249  0020               	movlb	0	; select bank0
  9205  024A  084E               	movf	vfpfcnvrt@fmt,w
  9206  024B  0086               	movwf	6
  9207  024C  0187               	clrf	7
  9208  024D  3F40               	moviw [0]fsr1
  9209  024E  00D0               	movwf	??_vfpfcnvrt
  9210  024F  3F41               	moviw [1]fsr1
  9211  0250  00D1               	movwf	??_vfpfcnvrt+1
  9212  0251  0850               	movf	??_vfpfcnvrt,w
  9213  0252  0084               	movwf	4
  9214  0253  0851               	movf	??_vfpfcnvrt+1,w
  9215  0254  0085               	movwf	5
  9216  0255  0012               	moviw fsr0++
  9217  0256  3A64               	xorlw	100
  9218  0257  1903               	btfsc	3,2
  9219  0258  2A68               	goto	l3207
  9220  0259  084E               	movf	vfpfcnvrt@fmt,w
  9221  025A  0086               	movwf	6
  9222  025B  0187               	clrf	7
  9223  025C  3F40               	moviw [0]fsr1
  9224  025D  00D0               	movwf	??_vfpfcnvrt
  9225  025E  3F41               	moviw [1]fsr1
  9226  025F  00D1               	movwf	??_vfpfcnvrt+1
  9227  0260  0850               	movf	??_vfpfcnvrt,w
  9228  0261  0084               	movwf	4
  9229  0262  0851               	movf	??_vfpfcnvrt+1,w
  9230  0263  0085               	movwf	5
  9231  0264  0012               	moviw fsr0++
  9232  0265  3A69               	xorlw	105
  9233  0266  1D03               	btfss	3,2
  9234  0267  2AA2               	goto	l3215
  9235  0268                     l3207:	
  9236                           
  9237                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  9238  0268  084E               	movf	vfpfcnvrt@fmt,w
  9239  0269  0086               	movwf	6
  9240  026A  0187               	clrf	7
  9241  026B  3001               	movlw	1
  9242  026C  0781               	addwf	1,f
  9243  026D  3141               	addfsr 1,1
  9244  026E  1803               	skipnc
  9245  026F  0A81               	incf	1,f
  9246                           
  9247                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  9248  0270  084F               	movf	vfpfcnvrt@ap,w
  9249  0271  0086               	movwf	6
  9250  0272  0187               	clrf	7
  9251  0273  0801               	movf	1,w
  9252  0274  0084               	movwf	4
  9253  0275  0185               	clrf	5
  9254  0276  3002               	movlw	2
  9255  0277  0781               	addwf	1,f
  9256  0278  3F00               	moviw [0]fsr0
  9257  0279  00D0               	movwf	??_vfpfcnvrt
  9258  027A  3F01               	moviw [1]fsr0
  9259  027B  00D1               	movwf	??_vfpfcnvrt+1
  9260  027C  0850               	movf	??_vfpfcnvrt,w
  9261  027D  00D5               	movwf	vfpfcnvrt@ll
  9262  027E  0851               	movf	??_vfpfcnvrt+1,w
  9263  027F  00D6               	movwf	vfpfcnvrt@ll+1
  9264  0280  0D89               	rlf	9,f
  9265  0281  3B89               	subwfb	9,f
  9266  0282  0989               	comf	9,f
  9267  0283  00D7               	movwf	vfpfcnvrt@ll+2
  9268  0284  00D8               	movwf	vfpfcnvrt@ll+3
  9269  0285  00D9               	movwf	vfpfcnvrt@ll+4
  9270  0286  00DA               	movwf	vfpfcnvrt@ll+5
  9271  0287  00DB               	movwf	vfpfcnvrt@ll+6
  9272  0288  00DC               	movwf	vfpfcnvrt@ll+7
  9273                           
  9274                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  9275  0289  0855               	movf	vfpfcnvrt@ll,w
  9276  028A  00B0               	movwf	dtoa@d
  9277  028B  0856               	movf	vfpfcnvrt@ll+1,w
  9278  028C  00B1               	movwf	dtoa@d+1
  9279  028D  0857               	movf	vfpfcnvrt@ll+2,w
  9280  028E  00B2               	movwf	dtoa@d+2
  9281  028F  0858               	movf	vfpfcnvrt@ll+3,w
  9282  0290  00B3               	movwf	dtoa@d+3
  9283  0291  0859               	movf	vfpfcnvrt@ll+4,w
  9284  0292  00B4               	movwf	dtoa@d+4
  9285  0293  085A               	movf	vfpfcnvrt@ll+5,w
  9286  0294  00B5               	movwf	dtoa@d+5
  9287  0295  085B               	movf	vfpfcnvrt@ll+6,w
  9288  0296  00B6               	movwf	dtoa@d+6
  9289  0297  085C               	movf	vfpfcnvrt@ll+7,w
  9290  0298  00B7               	movwf	dtoa@d+7
  9291  0299  085D               	movf	vfpfcnvrt@fp,w
  9292  029A  3184  24C6         	fcall	_dtoa
  9293  029C  0020               	movlb	0	; select bank0
  9294  029D  0831               	movf	?_dtoa+1,w
  9295  029E  00CF               	movwf	?_vfpfcnvrt+1
  9296  029F  0830               	movf	?_dtoa,w
  9297  02A0  00CE               	movwf	?_vfpfcnvrt
  9298  02A1  0008               	return
  9299  02A2                     l3215:	
  9300                           
  9301                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  9302  02A2  084E               	movf	vfpfcnvrt@fmt,w
  9303  02A3  0086               	movwf	6
  9304  02A4  0187               	clrf	7
  9305  02A5  3F40               	moviw [0]fsr1
  9306  02A6  00D0               	movwf	??_vfpfcnvrt
  9307  02A7  3F41               	moviw [1]fsr1
  9308  02A8  00D1               	movwf	??_vfpfcnvrt+1
  9309  02A9  0850               	movf	??_vfpfcnvrt,w
  9310  02AA  0084               	movwf	4
  9311  02AB  0851               	movf	??_vfpfcnvrt+1,w
  9312  02AC  0085               	movwf	5
  9313  02AD  0012               	moviw fsr0++
  9314  02AE  3A25               	xorlw	37
  9315  02AF  1D03               	btfss	3,2
  9316  02B0  2AC9               	goto	l3225
  9317                           
  9318                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  9319  02B1  084E               	movf	vfpfcnvrt@fmt,w
  9320  02B2  0086               	movwf	6
  9321  02B3  0187               	clrf	7
  9322  02B4  3001               	movlw	1
  9323  02B5  0781               	addwf	1,f
  9324  02B6  3141               	addfsr 1,1
  9325  02B7  1803               	skipnc
  9326  02B8  0A81               	incf	1,f
  9327                           
  9328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  9329  02B9  3025               	movlw	37
  9330  02BA  00F2               	movwf	fputc@c
  9331  02BB  3000               	movlw	0
  9332  02BC  00F3               	movwf	fputc@c+1
  9333  02BD  085D               	movf	vfpfcnvrt@fp,w
  9334  02BE  00D0               	movwf	??_vfpfcnvrt
  9335  02BF  0850               	movf	??_vfpfcnvrt,w
  9336  02C0  00F4               	movwf	fputc@fp
  9337  02C1  318A  222F         	fcall	_fputc
  9338  02C3                     l3221:	
  9339                           
  9340                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  9341  02C3  3001               	movlw	1
  9342  02C4  0020               	movlb	0	; select bank0
  9343  02C5  00CE               	movwf	?_vfpfcnvrt
  9344  02C6  3000               	movlw	0
  9345  02C7  00CF               	movwf	?_vfpfcnvrt+1
  9346  02C8  0008               	return
  9347  02C9                     l3225:	
  9348                           
  9349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  9350  02C9  084E               	movf	vfpfcnvrt@fmt,w
  9351  02CA  0086               	movwf	6
  9352  02CB  0187               	clrf	7
  9353  02CC  3001               	movlw	1
  9354  02CD  0781               	addwf	1,f
  9355  02CE  3141               	addfsr 1,1
  9356  02CF  1803               	skipnc
  9357  02D0  0A81               	incf	1,f
  9358                           
  9359                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  9360  02D1  01CE               	clrf	?_vfpfcnvrt
  9361  02D2  01CF               	clrf	?_vfpfcnvrt+1
  9362  02D3  0008               	return
  9363  02D4                     l3231:	
  9364                           
  9365                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  9366  02D4  084E               	movf	vfpfcnvrt@fmt,w
  9367  02D5  0086               	movwf	6
  9368  02D6  0187               	clrf	7
  9369  02D7  3F40               	moviw [0]fsr1
  9370  02D8  00D0               	movwf	??_vfpfcnvrt
  9371  02D9  3F41               	moviw [1]fsr1
  9372  02DA  00D1               	movwf	??_vfpfcnvrt+1
  9373  02DB  0850               	movf	??_vfpfcnvrt,w
  9374  02DC  0084               	movwf	4
  9375  02DD  0851               	movf	??_vfpfcnvrt+1,w
  9376  02DE  0085               	movwf	5
  9377  02DF  0800               	movf	0,w	;code access
  9378  02E0  00D2               	movwf	??_vfpfcnvrt+2
  9379  02E1  01D3               	clrf	??_vfpfcnvrt+3
  9380  02E2  0852               	movf	??_vfpfcnvrt+2,w
  9381  02E3  00F2               	movwf	fputc@c
  9382  02E4  0853               	movf	??_vfpfcnvrt+3,w
  9383  02E5  00F3               	movwf	fputc@c+1
  9384  02E6  085D               	movf	vfpfcnvrt@fp,w
  9385  02E7  00D4               	movwf	??_vfpfcnvrt+4
  9386  02E8  0854               	movf	??_vfpfcnvrt+4,w
  9387  02E9  00F4               	movwf	fputc@fp
  9388  02EA  318A  222F  3182   	fcall	_fputc
  9389                           
  9390                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  9391  02ED  0020               	movlb	0	; select bank0
  9392  02EE  084E               	movf	vfpfcnvrt@fmt,w
  9393  02EF  0086               	movwf	6
  9394  02F0  0187               	clrf	7
  9395  02F1  3001               	movlw	1
  9396  02F2  0781               	addwf	1,f
  9397  02F3  3141               	addfsr 1,1
  9398  02F4  1803               	skipnc
  9399  02F5  0A81               	incf	1,f
  9400  02F6  2AC3               	goto	l3221
  9401  02F7                     __end_of_vfpfcnvrt:	
  9402                           
  9403                           	psect	text60
  9404  04C6                     __ptext60:	
  9405 ;; *************** function _dtoa *****************
  9406 ;; Defined at:
  9407 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;  fp              1    wreg     PTR struct _IO_FILE
  9410 ;;		 -> NULL(0), 
  9411 ;;  d               8   16[BANK0 ] long long 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  9414 ;;		 -> NULL(0), 
  9415 ;;  n               8   36[BANK0 ] long long 
  9416 ;;  i               2   44[BANK0 ] int 
  9417 ;;  s               2   34[BANK0 ] int 
  9418 ;;  w               2   32[BANK0 ] int 
  9419 ;;  p               2   29[BANK0 ] int 
  9420 ;; Return value:  Size  Location     Type
  9421 ;;                  2   16[BANK0 ] int 
  9422 ;; Registers used:
  9423 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9424 ;; Tracked objects:
  9425 ;;		On entry : 0/0
  9426 ;;		On exit  : 0/0
  9427 ;;		Unchanged: 0/0
  9428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9429 ;;      Params:         0       8       0       0       0       0       0       0
  9430 ;;      Locals:         0      19       0       0       0       0       0       0
  9431 ;;      Temps:          0       3       0       0       0       0       0       0
  9432 ;;      Totals:         0      30       0       0       0       0       0       0
  9433 ;;Total ram usage:       30 bytes
  9434 ;; Hardware stack levels used:    1
  9435 ;; Hardware stack levels required when called:    5
  9436 ;; This function calls:
  9437 ;;		___aodiv
  9438 ;;		___aomod
  9439 ;;		_abs
  9440 ;;		_pad
  9441 ;; This function is called by:
  9442 ;;		_vfpfcnvrt
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           
  9447                           ;psect for function _dtoa
  9448  04C6                     _dtoa:	
  9449                           
  9450                           ;incstack = 0
  9451                           ; Regs used in _dtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9452                           ;dtoa@fp stored from wreg
  9453  04C6  0020               	movlb	0	; select bank0
  9454  04C7  00BF               	movwf	dtoa@fp
  9455                           
  9456                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  9457  04C8  0830               	movf	dtoa@d,w
  9458  04C9  00C4               	movwf	dtoa@n
  9459  04CA  0831               	movf	dtoa@d+1,w
  9460  04CB  00C5               	movwf	dtoa@n+1
  9461  04CC  0832               	movf	dtoa@d+2,w
  9462  04CD  00C6               	movwf	dtoa@n+2
  9463  04CE  0833               	movf	dtoa@d+3,w
  9464  04CF  00C7               	movwf	dtoa@n+3
  9465  04D0  0834               	movf	dtoa@d+4,w
  9466  04D1  00C8               	movwf	dtoa@n+4
  9467  04D2  0835               	movf	dtoa@d+5,w
  9468  04D3  00C9               	movwf	dtoa@n+5
  9469  04D4  0836               	movf	dtoa@d+6,w
  9470  04D5  00CA               	movwf	dtoa@n+6
  9471  04D6  0837               	movf	dtoa@d+7,w
  9472  04D7  00CB               	movwf	dtoa@n+7
  9473                           
  9474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  9475  04D8  3044               	movlw	low dtoa@n
  9476  04D9  0086               	movwf	6
  9477  04DA  3000               	movlw	high dtoa@n
  9478  04DB  0087               	movwf	7
  9479  04DC  3F47               	moviw [7]fsr1
  9480  04DD  00B8               	movwf	??_dtoa
  9481  04DE  1FB8               	btfss	??_dtoa,7
  9482  04DF  2CE2               	goto	u2540
  9483  04E0  3001               	movlw	1
  9484  04E1  2CE3               	goto	u2550
  9485  04E2                     u2540:	
  9486  04E2  3000               	movlw	0
  9487  04E3                     u2550:	
  9488  04E3  0020               	movlb	0	; select bank0
  9489  04E4  00B9               	movwf	??_dtoa+1
  9490  04E5  01BA               	clrf	??_dtoa+2
  9491  04E6  0839               	movf	??_dtoa+1,w
  9492  04E7  00C2               	movwf	dtoa@s
  9493  04E8  083A               	movf	??_dtoa+2,w
  9494  04E9  00C3               	movwf	dtoa@s+1
  9495                           
  9496                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  9497  04EA  0842               	movf	dtoa@s,w
  9498  04EB  0443               	iorwf	dtoa@s+1,w
  9499  04EC  1903               	btfsc	3,2
  9500  04ED  2D0C               	goto	l970
  9501                           
  9502                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  9503  04EE  09C4               	comf	dtoa@n,f
  9504  04EF  09C5               	comf	dtoa@n+1,f
  9505  04F0  09C6               	comf	dtoa@n+2,f
  9506  04F1  09C7               	comf	dtoa@n+3,f
  9507  04F2  09C8               	comf	dtoa@n+4,f
  9508  04F3  09C9               	comf	dtoa@n+5,f
  9509  04F4  09CA               	comf	dtoa@n+6,f
  9510  04F5  09CB               	comf	dtoa@n+7,f
  9511  04F6  0AC4               	incf	dtoa@n,f
  9512  04F7  1D03               	skipz
  9513  04F8  2D0C               	goto	l970
  9514  04F9  0AC5               	incf	dtoa@n+1,f
  9515  04FA  1D03               	skipz
  9516  04FB  2D0C               	goto	l970
  9517  04FC  0AC6               	incf	dtoa@n+2,f
  9518  04FD  1D03               	skipz
  9519  04FE  2D0C               	goto	l970
  9520  04FF  0AC7               	incf	dtoa@n+3,f
  9521  0500  1D03               	skipz
  9522  0501  2D0C               	goto	l970
  9523  0502  0AC8               	incf	dtoa@n+4,f
  9524  0503  1D03               	skipz
  9525  0504  2D0C               	goto	l970
  9526  0505  0AC9               	incf	dtoa@n+5,f
  9527  0506  1D03               	skipz
  9528  0507  2D0C               	goto	l970
  9529  0508  0ACA               	incf	dtoa@n+6,f
  9530  0509  1D03               	skipz
  9531  050A  2D0C               	goto	l970
  9532  050B  0ACB               	incf	dtoa@n+7,f
  9533  050C                     l970:	
  9534                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
  9535                           
  9536                           
  9537                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  9538  050C  0021               	movlb	1	; select bank1
  9539  050D  1BD1               	btfsc	(_prec+1)^(0+128),7
  9540  050E  2D13               	goto	l971
  9541                           
  9542                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  9543  050F  30FD               	movlw	253
  9544  0510  05D2               	andwf	_flags^(0+128),f
  9545  0511  30FF               	movlw	255
  9546  0512  05D3               	andwf	(_flags+1)^(0+128),f
  9547  0513                     l971:	
  9548                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
  9549                           
  9550                           
  9551                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  9552  0513  0851               	movf	(_prec+1)^(0+128),w
  9553  0514  3A80               	xorlw	128
  9554  0515  0020               	movlb	0	; select bank0
  9555  0516  00B8               	movwf	??_dtoa
  9556  0517  3080               	movlw	128
  9557  0518  0238               	subwf	??_dtoa,w
  9558  0519  1D03               	skipz
  9559  051A  2D1E               	goto	u2595
  9560  051B  3001               	movlw	1
  9561  051C  0021               	movlb	1	; select bank1
  9562  051D  0250               	subwf	_prec^(0+128),w
  9563  051E                     u2595:	
  9564  051E  1803               	skipnc
  9565  051F  2D26               	goto	l3111
  9566  0520  3001               	movlw	1
  9567  0521  0020               	movlb	0	; select bank0
  9568  0522  00BD               	movwf	dtoa@p
  9569  0523  3000               	movlw	0
  9570  0524  00BE               	movwf	dtoa@p+1
  9571  0525  2D2E               	goto	l975
  9572  0526                     l3111:	
  9573  0526  0021               	movlb	1	; select bank1
  9574  0527  0851               	movf	(_prec+1)^(0+128),w
  9575  0528  0020               	movlb	0	; select bank0
  9576  0529  00BE               	movwf	dtoa@p+1
  9577  052A  0021               	movlb	1	; select bank1
  9578  052B  0850               	movf	_prec^(0+128),w
  9579  052C  0020               	movlb	0	; select bank0
  9580  052D  00BD               	movwf	dtoa@p
  9581  052E                     l975:	
  9582                           
  9583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  9584  052E  0021               	movlb	1	; select bank1
  9585  052F  084F               	movf	(_width+1)^(0+128),w
  9586  0530  0020               	movlb	0	; select bank0
  9587  0531  00C1               	movwf	dtoa@w+1
  9588  0532  0021               	movlb	1	; select bank1
  9589  0533  084E               	movf	_width^(0+128),w
  9590  0534  0020               	movlb	0	; select bank0
  9591  0535  00C0               	movwf	dtoa@w
  9592                           
  9593                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  9594  0536  0842               	movf	dtoa@s,w
  9595  0537  0443               	iorwf	dtoa@s+1,w
  9596  0538  1D03               	btfss	3,2
  9597  0539  2D3D               	goto	l3117
  9598  053A  0021               	movlb	1	; select bank1
  9599  053B  1D52               	btfss	_flags^(0+128),2
  9600  053C  2D42               	goto	l976
  9601  053D                     l3117:	
  9602                           
  9603                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  9604  053D  30FF               	movlw	255
  9605  053E  0020               	movlb	0	; select bank0
  9606  053F  07C0               	addwf	dtoa@w,f
  9607  0540  30FF               	movlw	255
  9608  0541  3DC1               	addwfc	dtoa@w+1,f
  9609  0542                     l976:	
  9610                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
  9611                           
  9612                           
  9613                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  9614  0542  301F               	movlw	31
  9615  0543  0020               	movlb	0	; select bank0
  9616  0544  00CC               	movwf	dtoa@i
  9617  0545  3000               	movlw	0
  9618  0546  00CD               	movwf	dtoa@i+1
  9619                           
  9620                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  9621  0547  0022               	movlb	2	; select bank2
  9622  0548  01EF               	clrf	(_dbuf^(0+256)+31)
  9623                           
  9624                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  9625  0549  2DD8               	goto	l979
  9626  054A                     l3131:	
  9627  054A  0020               	movlb	0	; select bank0
  9628  054B  0844               	movf	dtoa@n,w
  9629  054C  0445               	iorwf	dtoa@n+1,w
  9630  054D  0446               	iorwf	dtoa@n+2,w
  9631  054E  0447               	iorwf	dtoa@n+3,w
  9632  054F  0448               	iorwf	dtoa@n+4,w
  9633  0550  0449               	iorwf	dtoa@n+5,w
  9634  0551  044A               	iorwf	dtoa@n+6,w
  9635  0552  044B               	iorwf	dtoa@n+7,w
  9636  0553  1D03               	skipz
  9637  0554  2D6F               	goto	l3121
  9638  0555  083E               	movf	dtoa@p+1,w
  9639  0556  3A80               	xorlw	128
  9640  0557  00B8               	movwf	??_dtoa
  9641  0558  3080               	movlw	128
  9642  0559  0238               	subwf	??_dtoa,w
  9643  055A  1D03               	skipz
  9644  055B  2D5E               	goto	u2645
  9645  055C  3001               	movlw	1
  9646  055D  023D               	subwf	dtoa@p,w
  9647  055E                     u2645:	
  9648  055E  1803               	skipnc
  9649  055F  2D6F               	goto	l3121
  9650  0560  0020               	movlb	0	; select bank0
  9651  0561  0841               	movf	dtoa@w+1,w
  9652  0562  3A80               	xorlw	128
  9653  0563  00B8               	movwf	??_dtoa
  9654  0564  3080               	movlw	128
  9655  0565  0238               	subwf	??_dtoa,w
  9656  0566  1D03               	skipz
  9657  0567  2D6A               	goto	u2655
  9658  0568  3001               	movlw	1
  9659  0569  0240               	subwf	dtoa@w,w
  9660  056A                     u2655:	
  9661  056A  1C03               	skipc
  9662  056B  2DE4               	goto	l3139
  9663  056C  0021               	movlb	1	; select bank1
  9664  056D  1CD2               	btfss	_flags^(0+128),1
  9665  056E  2DE4               	goto	l3139
  9666  056F                     l3121:	
  9667                           
  9668                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  9669  056F  30FF               	movlw	255
  9670  0570  0020               	movlb	0	; select bank0
  9671  0571  07CC               	addwf	dtoa@i,f
  9672  0572  30FF               	movlw	255
  9673  0573  3DCD               	addwfc	dtoa@i+1,f
  9674                           
  9675                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  9676  0574  300A               	movlw	10
  9677  0575  00A0               	movwf	___aomod@divisor
  9678  0576  01A1               	clrf	___aomod@divisor+1
  9679  0577  01A2               	clrf	___aomod@divisor+2
  9680  0578  01A3               	clrf	___aomod@divisor+3
  9681  0579  01A4               	clrf	___aomod@divisor+4
  9682  057A  01A5               	clrf	___aomod@divisor+5
  9683  057B  01A6               	clrf	___aomod@divisor+6
  9684  057C  01A7               	clrf	___aomod@divisor+7
  9685  057D  0844               	movf	dtoa@n,w
  9686  057E  00A8               	movwf	___aomod@dividend
  9687  057F  0845               	movf	dtoa@n+1,w
  9688  0580  00A9               	movwf	___aomod@dividend+1
  9689  0581  0846               	movf	dtoa@n+2,w
  9690  0582  00AA               	movwf	___aomod@dividend+2
  9691  0583  0847               	movf	dtoa@n+3,w
  9692  0584  00AB               	movwf	___aomod@dividend+3
  9693  0585  0848               	movf	dtoa@n+4,w
  9694  0586  00AC               	movwf	___aomod@dividend+4
  9695  0587  0849               	movf	dtoa@n+5,w
  9696  0588  00AD               	movwf	___aomod@dividend+5
  9697  0589  084A               	movf	dtoa@n+6,w
  9698  058A  00AE               	movwf	___aomod@dividend+6
  9699  058B  084B               	movf	dtoa@n+7,w
  9700  058C  00AF               	movwf	___aomod@dividend+7
  9701  058D  3182  22F7  3184   	fcall	___aomod
  9702  0590  0020               	movlb	0	; select bank0
  9703  0591  0821               	movf	?___aomod+1,w
  9704  0592  00F4               	movwf	abs@a+1
  9705  0593  0820               	movf	?___aomod,w
  9706  0594  00F3               	movwf	abs@a
  9707  0595  3188  2020  3184   	fcall	_abs
  9708  0598  0873               	movf	?_abs,w
  9709  0599  3E30               	addlw	48
  9710  059A  0020               	movlb	0	; select bank0
  9711  059B  00B8               	movwf	??_dtoa
  9712  059C  084C               	movf	dtoa@i,w
  9713  059D  3E50               	addlw	(low (_dbuf| (0+256)))& (0+255)
  9714  059E  0086               	movwf	6
  9715  059F  3001               	movlw	1	; select bank2/3
  9716  05A0  0087               	movwf	7
  9717  05A1  0838               	movf	??_dtoa,w
  9718  05A2  0081               	movwf	1
  9719                           
  9720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  9721  05A3  30FF               	movlw	255
  9722  05A4  07BD               	addwf	dtoa@p,f
  9723  05A5  30FF               	movlw	255
  9724  05A6  3DBE               	addwfc	dtoa@p+1,f
  9725                           
  9726                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  9727  05A7  30FF               	movlw	255
  9728  05A8  07C0               	addwf	dtoa@w,f
  9729  05A9  30FF               	movlw	255
  9730  05AA  3DC1               	addwfc	dtoa@w+1,f
  9731                           
  9732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  9733  05AB  300A               	movlw	10
  9734  05AC  00A0               	movwf	___aodiv@divisor
  9735  05AD  01A1               	clrf	___aodiv@divisor+1
  9736  05AE  01A2               	clrf	___aodiv@divisor+2
  9737  05AF  01A3               	clrf	___aodiv@divisor+3
  9738  05B0  01A4               	clrf	___aodiv@divisor+4
  9739  05B1  01A5               	clrf	___aodiv@divisor+5
  9740  05B2  01A6               	clrf	___aodiv@divisor+6
  9741  05B3  01A7               	clrf	___aodiv@divisor+7
  9742  05B4  0844               	movf	dtoa@n,w
  9743  05B5  00A8               	movwf	___aodiv@dividend
  9744  05B6  0845               	movf	dtoa@n+1,w
  9745  05B7  00A9               	movwf	___aodiv@dividend+1
  9746  05B8  0846               	movf	dtoa@n+2,w
  9747  05B9  00AA               	movwf	___aodiv@dividend+2
  9748  05BA  0847               	movf	dtoa@n+3,w
  9749  05BB  00AB               	movwf	___aodiv@dividend+3
  9750  05BC  0848               	movf	dtoa@n+4,w
  9751  05BD  00AC               	movwf	___aodiv@dividend+4
  9752  05BE  0849               	movf	dtoa@n+5,w
  9753  05BF  00AD               	movwf	___aodiv@dividend+5
  9754  05C0  084A               	movf	dtoa@n+6,w
  9755  05C1  00AE               	movwf	___aodiv@dividend+6
  9756  05C2  084B               	movf	dtoa@n+7,w
  9757  05C3  00AF               	movwf	___aodiv@dividend+7
  9758  05C4  3183  23D3  3184   	fcall	___aodiv
  9759  05C7  0020               	movlb	0	; select bank0
  9760  05C8  0820               	movf	?___aodiv,w
  9761  05C9  00C4               	movwf	dtoa@n
  9762  05CA  0821               	movf	?___aodiv+1,w
  9763  05CB  00C5               	movwf	dtoa@n+1
  9764  05CC  0822               	movf	?___aodiv+2,w
  9765  05CD  00C6               	movwf	dtoa@n+2
  9766  05CE  0823               	movf	?___aodiv+3,w
  9767  05CF  00C7               	movwf	dtoa@n+3
  9768  05D0  0824               	movf	?___aodiv+4,w
  9769  05D1  00C8               	movwf	dtoa@n+4
  9770  05D2  0825               	movf	?___aodiv+5,w
  9771  05D3  00C9               	movwf	dtoa@n+5
  9772  05D4  0826               	movf	?___aodiv+6,w
  9773  05D5  00CA               	movwf	dtoa@n+6
  9774  05D6  0827               	movf	?___aodiv+7,w
  9775  05D7  00CB               	movwf	dtoa@n+7
  9776  05D8                     l979:	
  9777                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
  9778                           
  9779                           
  9780                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  9781  05D8  0020               	movlb	0	; select bank0
  9782  05D9  084D               	movf	dtoa@i+1,w
  9783  05DA  3A80               	xorlw	128
  9784  05DB  00B8               	movwf	??_dtoa
  9785  05DC  3080               	movlw	128
  9786  05DD  0238               	subwf	??_dtoa,w
  9787  05DE  1D03               	skipz
  9788  05DF  2DE2               	goto	u2625
  9789  05E0  3001               	movlw	1
  9790  05E1  024C               	subwf	dtoa@i,w
  9791  05E2                     u2625:	
  9792  05E2  1803               	btfsc	3,0
  9793  05E3  2D4A               	goto	l3131
  9794  05E4                     l3139:	
  9795                           
  9796                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  9797  05E4  0020               	movlb	0	; select bank0
  9798  05E5  0842               	movf	dtoa@s,w
  9799  05E6  0443               	iorwf	dtoa@s+1,w
  9800  05E7  1D03               	btfss	3,2
  9801  05E8  2DEC               	goto	l3143
  9802  05E9  0021               	movlb	1	; select bank1
  9803  05EA  1D52               	btfss	_flags^(0+128),2
  9804  05EB  2E04               	goto	l3153
  9805  05EC                     l3143:	
  9806                           
  9807                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  9808  05EC  30FF               	movlw	255
  9809  05ED  0020               	movlb	0	; select bank0
  9810  05EE  07CC               	addwf	dtoa@i,f
  9811  05EF  30FF               	movlw	255
  9812  05F0  3DCD               	addwfc	dtoa@i+1,f
  9813                           
  9814                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  9815  05F1  0842               	movf	dtoa@s,w
  9816  05F2  0443               	iorwf	dtoa@s+1,w
  9817  05F3  1D03               	btfss	3,2
  9818  05F4  2DF7               	goto	l3149
  9819  05F5  302B               	movlw	43
  9820  05F6  2DF8               	goto	L8
  9821  05F7                     l3149:	
  9822  05F7  302D               	movlw	45
  9823  05F8                     L8:	
  9824  05F8  00BB               	movwf	_dtoa$1628
  9825  05F9  3000               	movlw	0
  9826  05FA  00BC               	movwf	_dtoa$1628+1
  9827  05FB  083B               	movf	_dtoa$1628,w
  9828  05FC  00B8               	movwf	??_dtoa
  9829  05FD  084C               	movf	dtoa@i,w
  9830  05FE  3E50               	addlw	(low (_dbuf| (0+256)))& (0+255)
  9831  05FF  0086               	movwf	6
  9832  0600  3001               	movlw	1	; select bank2/3
  9833  0601  0087               	movwf	7
  9834  0602  0838               	movf	??_dtoa,w
  9835  0603  0081               	movwf	1
  9836  0604                     l3153:	
  9837                           
  9838                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  9839  0604  0020               	movlb	0	; select bank0
  9840  0605  084C               	movf	dtoa@i,w
  9841  0606  3E50               	addlw	(low (_dbuf| (0+256)))& (0+255)
  9842  0607  00B8               	movwf	??_dtoa
  9843  0608  0838               	movf	??_dtoa,w
  9844  0609  00A4               	movwf	pad@buf
  9845  060A  0841               	movf	dtoa@w+1,w
  9846  060B  00A6               	movwf	pad@p+1
  9847  060C  0840               	movf	dtoa@w,w
  9848  060D  00A5               	movwf	pad@p
  9849  060E  083F               	movf	dtoa@fp,w
  9850  060F  318B  231E         	fcall	_pad
  9851  0611  0020               	movlb	0	; select bank0
  9852  0612  0825               	movf	?_pad+1,w
  9853  0613  00B1               	movwf	?_dtoa+1
  9854  0614  0824               	movf	?_pad,w
  9855  0615  00B0               	movwf	?_dtoa
  9856  0616  0008               	return
  9857  0617                     __end_of_dtoa:	
  9858                           
  9859                           	psect	text61
  9860  0B1E                     __ptext61:	
  9861 ;; *************** function _pad *****************
  9862 ;; Defined at:
  9863 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  fp              1    wreg     PTR struct _IO_FILE
  9866 ;;		 -> NULL(0), 
  9867 ;;  buf             1    4[BANK0 ] PTR unsigned char 
  9868 ;;		 -> dbuf(32), 
  9869 ;;  p               2    5[BANK0 ] int 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
  9872 ;;		 -> NULL(0), 
  9873 ;;  w               2   10[BANK0 ] int 
  9874 ;;  i               2    8[BANK0 ] int 
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  2    4[BANK0 ] int 
  9877 ;; Registers used:
  9878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9884 ;;      Params:         0       3       0       0       0       0       0       0
  9885 ;;      Locals:         0       5       0       0       0       0       0       0
  9886 ;;      Temps:          0       1       0       0       0       0       0       0
  9887 ;;      Totals:         0       9       0       0       0       0       0       0
  9888 ;;Total ram usage:        9 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    4
  9891 ;; This function calls:
  9892 ;;		_fputc
  9893 ;;		_fputs
  9894 ;;		_strlen
  9895 ;; This function is called by:
  9896 ;;		_dtoa
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           
  9901                           ;psect for function _pad
  9902  0B1E                     _pad:	
  9903                           
  9904                           ;incstack = 0
  9905                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9906                           ;pad@fp stored from wreg
  9907  0B1E  0020               	movlb	0	; select bank0
  9908  0B1F  00AC               	movwf	pad@fp
  9909                           
  9910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  9911  0B20  0021               	movlb	1	; select bank1
  9912  0B21  1C52               	btfss	_flags^(0+128),0
  9913  0B22  2B2C               	goto	l3015
  9914                           
  9915                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  9916  0B23  0020               	movlb	0	; select bank0
  9917  0B24  082C               	movf	pad@fp,w
  9918  0B25  00A7               	movwf	??_pad
  9919  0B26  0827               	movf	??_pad,w
  9920  0B27  00FA               	movwf	fputs@fp
  9921  0B28  0824               	movf	pad@buf,w
  9922  0B29  3188  20E0  318B   	fcall	_fputs
  9923  0B2C                     l3015:	
  9924                           
  9925                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  9926  0B2C  0020               	movlb	0	; select bank0
  9927  0B2D  1BA6               	btfsc	pad@p+1,7
  9928  0B2E  2B34               	goto	l3019
  9929  0B2F  0826               	movf	pad@p+1,w
  9930  0B30  00AB               	movwf	pad@w+1
  9931  0B31  0825               	movf	pad@p,w
  9932  0B32  00AA               	movwf	pad@w
  9933  0B33  2B36               	goto	l962
  9934  0B34                     l3019:	
  9935  0B34  01AA               	clrf	pad@w
  9936  0B35  01AB               	clrf	pad@w+1
  9937  0B36                     l962:	
  9938                           
  9939                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  9940  0B36  01A8               	clrf	pad@i
  9941  0B37  01A9               	clrf	pad@i+1
  9942  0B38                     l3025:	
  9943                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  9944                           
  9945                           
  9946                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  9947  0B38  0829               	movf	pad@i+1,w
  9948  0B39  3A80               	xorlw	128
  9949  0B3A  00A7               	movwf	??_pad
  9950  0B3B  082B               	movf	pad@w+1,w
  9951  0B3C  3A80               	xorlw	128
  9952  0B3D  0227               	subwf	??_pad,w
  9953  0B3E  1D03               	skipz
  9954  0B3F  2B42               	goto	u2315
  9955  0B40  082A               	movf	pad@w,w
  9956  0B41  0228               	subwf	pad@i,w
  9957  0B42                     u2315:	
  9958  0B42  1803               	btfsc	3,0
  9959  0B43  2B56               	goto	l965
  9960                           
  9961                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  9962  0B44  3020               	movlw	32
  9963  0B45  00F2               	movwf	fputc@c
  9964  0B46  3000               	movlw	0
  9965  0B47  00F3               	movwf	fputc@c+1
  9966  0B48  0020               	movlb	0	; select bank0
  9967  0B49  082C               	movf	pad@fp,w
  9968  0B4A  00A7               	movwf	??_pad
  9969  0B4B  0827               	movf	??_pad,w
  9970  0B4C  00F4               	movwf	fputc@fp
  9971  0B4D  318A  222F  318B   	fcall	_fputc
  9972                           
  9973                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  9974  0B50  3001               	movlw	1
  9975  0B51  0020               	movlb	0	; select bank0
  9976  0B52  07A8               	addwf	pad@i,f
  9977  0B53  3000               	movlw	0
  9978  0B54  3DA9               	addwfc	pad@i+1,f
  9979  0B55  2B38               	goto	l3025
  9980  0B56                     l965:	
  9981                           
  9982                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  9983  0B56  0021               	movlb	1	; select bank1
  9984  0B57  1852               	btfsc	_flags^(0+128),0
  9985  0B58  2B62               	goto	l966
  9986                           
  9987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  9988  0B59  0020               	movlb	0	; select bank0
  9989  0B5A  082C               	movf	pad@fp,w
  9990  0B5B  00A7               	movwf	??_pad
  9991  0B5C  0827               	movf	??_pad,w
  9992  0B5D  00FA               	movwf	fputs@fp
  9993  0B5E  0824               	movf	pad@buf,w
  9994  0B5F  3188  20E0  318B   	fcall	_fputs
  9995  0B62                     l966:	
  9996                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  9997                           
  9998                           
  9999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 10000  0B62  0020               	movlb	0	; select bank0
 10001  0B63  0824               	movf	pad@buf,w
 10002  0B64  3188  2037         	fcall	_strlen
 10003  0B66  0020               	movlb	0	; select bank0
 10004  0B67  082A               	movf	pad@w,w
 10005  0B68  0770               	addwf	?_strlen,w
 10006  0B69  00A4               	movwf	?_pad
 10007  0B6A  082B               	movf	pad@w+1,w
 10008  0B6B  3D71               	addwfc	?_strlen+1,w
 10009  0B6C  00A5               	movwf	?_pad+1
 10010  0B6D  0008               	return
 10011  0B6E                     __end_of_pad:	
 10012                           
 10013                           	psect	text62
 10014  0837                     __ptext62:	
 10015 ;; *************** function _strlen *****************
 10016 ;; Defined at:
 10017 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;  s               1    wreg     PTR const unsigned char 
 10020 ;;		 -> dbuf(32), 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  s               1    4[COMMON] PTR const unsigned char 
 10023 ;;		 -> dbuf(32), 
 10024 ;;  a               1    3[COMMON] PTR const unsigned char 
 10025 ;;		 -> dbuf(32), 
 10026 ;; Return value:  Size  Location     Type
 10027 ;;                  2    0[COMMON] unsigned int 
 10028 ;; Registers used:
 10029 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10030 ;; Tracked objects:
 10031 ;;		On entry : 0/0
 10032 ;;		On exit  : 0/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10035 ;;      Params:         2       0       0       0       0       0       0       0
 10036 ;;      Locals:         2       0       0       0       0       0       0       0
 10037 ;;      Temps:          1       0       0       0       0       0       0       0
 10038 ;;      Totals:         5       0       0       0       0       0       0       0
 10039 ;;Total ram usage:        5 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_pad
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _strlen
 10050  0837                     _strlen:	
 10051                           
 10052                           ;incstack = 0
 10053                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 10054                           ;strlen@s stored from wreg
 10055  0837  00F4               	movwf	strlen@s
 10056  0838  0874               	movf	strlen@s,w
 10057  0839  00F2               	movwf	??_strlen
 10058  083A  0872               	movf	??_strlen,w
 10059  083B  00F3               	movwf	strlen@a
 10060  083C                     l3001:	
 10061  083C  0874               	movf	strlen@s,w
 10062  083D  0086               	movwf	6
 10063  083E  3001               	movlw	1	; select bank2/3
 10064  083F  0087               	movwf	7
 10065  0840  0801               	movf	1,w
 10066  0841  1903               	btfsc	3,2
 10067  0842  2848               	goto	l3003
 10068  0843  3001               	movlw	1
 10069  0844  00F2               	movwf	??_strlen
 10070  0845  0872               	movf	??_strlen,w
 10071  0846  07F4               	addwf	strlen@s,f
 10072  0847  283C               	goto	l3001
 10073  0848                     l3003:	
 10074  0848  0873               	movf	strlen@a,w
 10075  0849  0274               	subwf	strlen@s,w
 10076  084A  00F0               	movwf	?_strlen
 10077  084B  01F1               	clrf	?_strlen+1
 10078  084C  1BF0               	btfsc	?_strlen,7
 10079  084D  03F1               	decf	?_strlen+1,f
 10080  084E  0008               	return
 10081  084F                     __end_of_strlen:	
 10082                           
 10083                           	psect	text63
 10084  08E0                     __ptext63:	
 10085 ;; *************** function _fputs *****************
 10086 ;; Defined at:
 10087 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;  s               1    wreg     PTR const unsigned char 
 10090 ;;		 -> dbuf(32), 
 10091 ;;  fp              1   10[COMMON] PTR struct _IO_FILE
 10092 ;;		 -> NULL(0), 
 10093 ;; Auto vars:     Size  Location     Type
 10094 ;;  s               1    3[BANK0 ] PTR const unsigned char 
 10095 ;;		 -> dbuf(32), 
 10096 ;;  i               2    1[BANK0 ] int 
 10097 ;;  c               1    0[BANK0 ] unsigned char 
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  2   10[COMMON] int 
 10100 ;; Registers used:
 10101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10107 ;;      Params:         1       0       0       0       0       0       0       0
 10108 ;;      Locals:         0       4       0       0       0       0       0       0
 10109 ;;      Temps:          3       0       0       0       0       0       0       0
 10110 ;;      Totals:         4       4       0       0       0       0       0       0
 10111 ;;Total ram usage:        8 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:    3
 10114 ;; This function calls:
 10115 ;;		_fputc
 10116 ;; This function is called by:
 10117 ;;		_pad
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           
 10122                           ;psect for function _fputs
 10123  08E0                     _fputs:	
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10127                           ;fputs@s stored from wreg
 10128  08E0  0020               	movlb	0	; select bank0
 10129  08E1  00A3               	movwf	fputs@s
 10130  08E2  01A1               	clrf	fputs@i
 10131  08E3  01A2               	clrf	fputs@i+1
 10132  08E4                     l2995:	
 10133  08E4  0821               	movf	fputs@i,w
 10134  08E5  0723               	addwf	fputs@s,w
 10135  08E6  00FB               	movwf	??_fputs
 10136  08E7  087B               	movf	??_fputs,w
 10137  08E8  0086               	movwf	6
 10138  08E9  3001               	movlw	1	; select bank2/3
 10139  08EA  0087               	movwf	7
 10140  08EB  0801               	movf	1,w
 10141  08EC  00FC               	movwf	??_fputs+1
 10142  08ED  087C               	movf	??_fputs+1,w
 10143  08EE  00A0               	movwf	fputs@c
 10144  08EF  0820               	movf	fputs@c,w
 10145  08F0  1903               	btfsc	3,2
 10146  08F1  0008               	return
 10147  08F2  0820               	movf	fputs@c,w
 10148  08F3  00FB               	movwf	??_fputs
 10149  08F4  01FC               	clrf	??_fputs+1
 10150  08F5  087B               	movf	??_fputs,w
 10151  08F6  00F2               	movwf	fputc@c
 10152  08F7  087C               	movf	??_fputs+1,w
 10153  08F8  00F3               	movwf	fputc@c+1
 10154  08F9  087A               	movf	fputs@fp,w
 10155  08FA  00FD               	movwf	??_fputs+2
 10156  08FB  087D               	movf	??_fputs+2,w
 10157  08FC  00F4               	movwf	fputc@fp
 10158  08FD  318A  222F  3188   	fcall	_fputc
 10159  0900  3001               	movlw	1
 10160  0901  0020               	movlb	0	; select bank0
 10161  0902  07A1               	addwf	fputs@i,f
 10162  0903  3000               	movlw	0
 10163  0904  3DA2               	addwfc	fputs@i+1,f
 10164  0905  28E4               	goto	l2995
 10165  0906                     __end_of_fputs:	
 10166                           
 10167                           	psect	text64
 10168  0A2F                     __ptext64:	
 10169 ;; *************** function _fputc *****************
 10170 ;; Defined at:
 10171 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;  c               2    2[COMMON] int 
 10174 ;;  fp              1    4[COMMON] PTR struct _IO_FILE
 10175 ;;		 -> NULL(0), 
 10176 ;; Auto vars:     Size  Location     Type
 10177 ;;		None
 10178 ;; Return value:  Size  Location     Type
 10179 ;;                  2    2[COMMON] int 
 10180 ;; Registers used:
 10181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10182 ;; Tracked objects:
 10183 ;;		On entry : 0/0
 10184 ;;		On exit  : 0/0
 10185 ;;		Unchanged: 0/0
 10186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10187 ;;      Params:         3       0       0       0       0       0       0       0
 10188 ;;      Locals:         0       0       0       0       0       0       0       0
 10189 ;;      Temps:          5       0       0       0       0       0       0       0
 10190 ;;      Totals:         8       0       0       0       0       0       0       0
 10191 ;;Total ram usage:        8 bytes
 10192 ;; Hardware stack levels used:    1
 10193 ;; Hardware stack levels required when called:    2
 10194 ;; This function calls:
 10195 ;;		_putch
 10196 ;; This function is called by:
 10197 ;;		_pad
 10198 ;;		_vfpfcnvrt
 10199 ;;		_fputs
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           
 10204                           ;psect for function _fputc
 10205  0A2F                     _fputc:	
 10206                           
 10207                           ;incstack = 0
 10208                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10209  0A2F  0874               	movf	fputc@fp,w
 10210  0A30  1D03               	btfss	3,2
 10211  0A31  0874               	movf	fputc@fp,w
 10212  0A32  1D03               	btfss	3,2
 10213  0A33  2A38               	goto	l2981
 10214  0A34  0872               	movf	fputc@c,w
 10215  0A35  3196  2646         	fcall	_putch
 10216  0A37  0008               	return
 10217  0A38                     l2981:	
 10218  0A38  0874               	movf	fputc@fp,w
 10219  0A39  3E03               	addlw	3
 10220  0A3A  0086               	movwf	6
 10221  0A3B  0187               	clrf	7
 10222  0A3C  0016               	moviw fsr1++
 10223  0A3D  0401               	iorwf	1,w
 10224  0A3E  1903               	btfsc	3,2
 10225  0A3F  2A5B               	goto	l2985
 10226  0A40  0874               	movf	fputc@fp,w
 10227  0A41  3E03               	addlw	3
 10228  0A42  0086               	movwf	6
 10229  0A43  0187               	clrf	7
 10230  0A44  3F40               	moviw [0]fsr1
 10231  0A45  00F5               	movwf	??_fputc
 10232  0A46  3F41               	moviw [1]fsr1
 10233  0A47  00F6               	movwf	??_fputc+1
 10234  0A48  0A74               	incf	fputc@fp,w
 10235  0A49  0086               	movwf	6
 10236  0A4A  0187               	clrf	7
 10237  0A4B  3F40               	moviw [0]fsr1
 10238  0A4C  00F7               	movwf	??_fputc+2
 10239  0A4D  3F41               	moviw [1]fsr1
 10240  0A4E  00F8               	movwf	??_fputc+3
 10241  0A4F  0878               	movf	??_fputc+3,w
 10242  0A50  3A80               	xorlw	128
 10243  0A51  00F9               	movwf	??_fputc+4
 10244  0A52  0876               	movf	??_fputc+1,w
 10245  0A53  3A80               	xorlw	128
 10246  0A54  0279               	subwf	??_fputc+4,w
 10247  0A55  1D03               	skipz
 10248  0A56  2A59               	goto	u2255
 10249  0A57  0875               	movf	??_fputc,w
 10250  0A58  0277               	subwf	??_fputc+2,w
 10251  0A59                     u2255:	
 10252  0A59  1803               	skipnc
 10253  0A5A  0008               	return
 10254  0A5B                     l2985:	
 10255  0A5B  0A74               	incf	fputc@fp,w
 10256  0A5C  0086               	movwf	6
 10257  0A5D  0187               	clrf	7
 10258  0A5E  3001               	movlw	1
 10259  0A5F  0781               	addwf	1,f
 10260  0A60  3141               	addfsr 1,1
 10261  0A61  1803               	skipnc
 10262  0A62  0A81               	incf	1,f
 10263  0A63  0008               	return
 10264  0A64                     __end_of_fputc:	
 10265                           
 10266                           	psect	text65
 10267  1646                     __ptext65:	
 10268 ;; *************** function _putch *****************
 10269 ;; Defined at:
 10270 ;;		line 147 in file "mcc_generated_files/eusart.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;  txData          1    wreg     unsigned char 
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;  txData          1    1[COMMON] unsigned char 
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  1    wreg      void 
 10277 ;; Registers used:
 10278 ;;		wreg, status,2, status,0, pclath, cstack
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10284 ;;      Params:         0       0       0       0       0       0       0       0
 10285 ;;      Locals:         1       0       0       0       0       0       0       0
 10286 ;;      Temps:          0       0       0       0       0       0       0       0
 10287 ;;      Totals:         1       0       0       0       0       0       0       0
 10288 ;;Total ram usage:        1 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    1
 10291 ;; This function calls:
 10292 ;;		_EUSART_Write
 10293 ;; This function is called by:
 10294 ;;		_fputc
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           
 10299                           ;psect for function _putch
 10300  1646                     _putch:	
 10301                           
 10302                           ;incstack = 0
 10303                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
 10304                           ;putch@txData stored from wreg
 10305  1646  00F1               	movwf	putch@txData
 10306                           
 10307                           ;mcc_generated_files/eusart.c: 147: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 148: {;mcc_generated_files/eusart.c: 149:     EUSART_Write(txData);
 10308  1647  0871               	movf	putch@txData,w
 10309  1648  3196  26AC         	fcall	_EUSART_Write
 10310  164A  0008               	return
 10311  164B                     __end_of_putch:	
 10312                           
 10313                           	psect	text66
 10314  16AC                     __ptext66:	
 10315 ;; *************** function _EUSART_Write *****************
 10316 ;; Defined at:
 10317 ;;		line 132 in file "mcc_generated_files/eusart.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;  txData          1    wreg     unsigned char 
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;  txData          1    0[COMMON] unsigned char 
 10322 ;; Return value:  Size  Location     Type
 10323 ;;                  1    wreg      void 
 10324 ;; Registers used:
 10325 ;;		wreg
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10331 ;;      Params:         0       0       0       0       0       0       0       0
 10332 ;;      Locals:         1       0       0       0       0       0       0       0
 10333 ;;      Temps:          0       0       0       0       0       0       0       0
 10334 ;;      Totals:         1       0       0       0       0       0       0       0
 10335 ;;Total ram usage:        1 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; This function calls:
 10338 ;;		Nothing
 10339 ;; This function is called by:
 10340 ;;		_putch
 10341 ;; This function uses a non-reentrant model
 10342 ;;
 10343                           
 10344                           
 10345                           ;psect for function _EUSART_Write
 10346  16AC                     _EUSART_Write:	
 10347                           
 10348                           ;incstack = 0
 10349                           ; Regs used in _EUSART_Write: [wreg]
 10350                           ;EUSART_Write@txData stored from wreg
 10351  16AC  00F0               	movwf	EUSART_Write@txData
 10352  16AD                     l842:	
 10353                           ;mcc_generated_files/eusart.c: 137:     }
 10354                           
 10355                           ;mcc_generated_files/eusart.c: 132: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 133: {;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
 10356                           
 10357                           
 10358                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TXIF)
 10359  16AD  0020               	movlb	0	; select bank0
 10360  16AE  1A11               	btfsc	17,4	;volatile
 10361  16AF  2EB2               	goto	l2971
 10362  16B0  0064               	clrwdt	;# 
 10363  16B1  2EAD               	goto	l842
 10364  16B2                     l2971:	
 10365                           
 10366                           ;mcc_generated_files/eusart.c: 139:     TXREG = txData;
 10367  16B2  0870               	movf	EUSART_Write@txData,w
 10368  16B3  0023               	movlb	3	; select bank3
 10369  16B4  009A               	movwf	26	;volatile
 10370  16B5  0008               	return
 10371  16B6                     __end_of_EUSART_Write:	
 10372                           
 10373                           	psect	text67
 10374  0820                     __ptext67:	
 10375 ;; *************** function _abs *****************
 10376 ;; Defined at:
 10377 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;  a               2    3[COMMON] int 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  2    3[COMMON] int 
 10384 ;; Registers used:
 10385 ;;		wreg, status,2, status,0
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10391 ;;      Params:         2       0       0       0       0       0       0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0
 10393 ;;      Temps:          2       0       0       0       0       0       0       0
 10394 ;;      Totals:         4       0       0       0       0       0       0       0
 10395 ;;Total ram usage:        4 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; This function calls:
 10398 ;;		Nothing
 10399 ;; This function is called by:
 10400 ;;		_Sensor_postAcquisitionProcess
 10401 ;;		_Sensor_Acq_ExecutePacket
 10402 ;;		_Sensor_autoCalibration
 10403 ;;		_dtoa
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           
 10408                           ;psect for function _abs
 10409  0820                     _abs:	
 10410                           
 10411                           ;incstack = 0
 10412                           ; Regs used in _abs: [wreg+status,2+status,0]
 10413  0820  0874               	movf	abs@a+1,w
 10414  0821  3A80               	xorlw	128
 10415  0822  00F5               	movwf	??_abs
 10416  0823  3080               	movlw	128
 10417  0824  0275               	subwf	??_abs,w
 10418  0825  1D03               	skipz
 10419  0826  2829               	goto	u2285
 10420  0827  3001               	movlw	1
 10421  0828  0273               	subwf	abs@a,w
 10422  0829                     u2285:	
 10423  0829  1803               	skipnc
 10424  082A  0008               	return
 10425  082B  0973               	comf	abs@a,w
 10426  082C  00F5               	movwf	??_abs
 10427  082D  0974               	comf	abs@a+1,w
 10428  082E  00F6               	movwf	??_abs+1
 10429  082F  0AF5               	incf	??_abs,f
 10430  0830  1903               	skipnz
 10431  0831  0AF6               	incf	??_abs+1,f
 10432  0832  0875               	movf	??_abs,w
 10433  0833  00F3               	movwf	?_abs
 10434  0834  0876               	movf	??_abs+1,w
 10435  0835  00F4               	movwf	?_abs+1
 10436  0836  0008               	return
 10437  0837                     __end_of_abs:	
 10438                           
 10439                           	psect	text68
 10440  02F7                     __ptext68:	
 10441 ;; *************** function ___aomod *****************
 10442 ;; Defined at:
 10443 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;  divisor         8    0[BANK0 ] long long 
 10446 ;;  dividend        8    8[BANK0 ] long long 
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;  sign            1    2[COMMON] unsigned char 
 10449 ;;  counter         1    1[COMMON] unsigned char 
 10450 ;; Return value:  Size  Location     Type
 10451 ;;                  8    0[BANK0 ] long long 
 10452 ;; Registers used:
 10453 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10454 ;; Tracked objects:
 10455 ;;		On entry : 0/0
 10456 ;;		On exit  : 0/0
 10457 ;;		Unchanged: 0/0
 10458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10459 ;;      Params:         0      16       0       0       0       0       0       0
 10460 ;;      Locals:         2       0       0       0       0       0       0       0
 10461 ;;      Temps:          1       0       0       0       0       0       0       0
 10462 ;;      Totals:         3      16       0       0       0       0       0       0
 10463 ;;Total ram usage:       19 bytes
 10464 ;; Hardware stack levels used:    1
 10465 ;; This function calls:
 10466 ;;		Nothing
 10467 ;; This function is called by:
 10468 ;;		_dtoa
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           
 10473                           ;psect for function ___aomod
 10474  02F7                     ___aomod:	
 10475                           
 10476                           ;incstack = 0
 10477                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 10478  02F7  01F2               	clrf	___aomod@sign
 10479  02F8  3028               	movlw	low ___aomod@dividend
 10480  02F9  0086               	movwf	6
 10481  02FA  3000               	movlw	high ___aomod@dividend
 10482  02FB  0087               	movwf	7
 10483  02FC  3F47               	moviw [7]fsr1
 10484  02FD  00F0               	movwf	??___aomod
 10485  02FE  1FF0               	btfss	??___aomod,7
 10486  02FF  2B21               	goto	l3075
 10487  0300  0020               	movlb	0	; select bank0
 10488  0301  09A8               	comf	___aomod@dividend,f
 10489  0302  09A9               	comf	___aomod@dividend+1,f
 10490  0303  09AA               	comf	___aomod@dividend+2,f
 10491  0304  09AB               	comf	___aomod@dividend+3,f
 10492  0305  09AC               	comf	___aomod@dividend+4,f
 10493  0306  09AD               	comf	___aomod@dividend+5,f
 10494  0307  09AE               	comf	___aomod@dividend+6,f
 10495  0308  09AF               	comf	___aomod@dividend+7,f
 10496  0309  0AA8               	incf	___aomod@dividend,f
 10497  030A  1D03               	skipz
 10498  030B  2B1F               	goto	u245lld
 10499  030C  0AA9               	incf	___aomod@dividend+1,f
 10500  030D  1D03               	skipz
 10501  030E  2B1F               	goto	u245lld
 10502  030F  0AAA               	incf	___aomod@dividend+2,f
 10503  0310  1D03               	skipz
 10504  0311  2B1F               	goto	u245lld
 10505  0312  0AAB               	incf	___aomod@dividend+3,f
 10506  0313  1D03               	skipz
 10507  0314  2B1F               	goto	u245lld
 10508  0315  0AAC               	incf	___aomod@dividend+4,f
 10509  0316  1D03               	skipz
 10510  0317  2B1F               	goto	u245lld
 10511  0318  0AAD               	incf	___aomod@dividend+5,f
 10512  0319  1D03               	skipz
 10513  031A  2B1F               	goto	u245lld
 10514  031B  0AAE               	incf	___aomod@dividend+6,f
 10515  031C  1D03               	skipz
 10516  031D  2B1F               	goto	u245lld
 10517  031E  0AAF               	incf	___aomod@dividend+7,f
 10518  031F                     u245lld:	
 10519  031F  01F2               	clrf	___aomod@sign
 10520  0320  0AF2               	incf	___aomod@sign,f
 10521  0321                     l3075:	
 10522  0321  3020               	movlw	low ___aomod@divisor
 10523  0322  0086               	movwf	6
 10524  0323  3000               	movlw	high ___aomod@divisor
 10525  0324  0087               	movwf	7
 10526  0325  3F47               	moviw [7]fsr1
 10527  0326  00F0               	movwf	??___aomod
 10528  0327  1FF0               	btfss	??___aomod,7
 10529  0328  2B48               	goto	l3079
 10530  0329  0020               	movlb	0	; select bank0
 10531  032A  09A0               	comf	___aomod@divisor,f
 10532  032B  09A1               	comf	___aomod@divisor+1,f
 10533  032C  09A2               	comf	___aomod@divisor+2,f
 10534  032D  09A3               	comf	___aomod@divisor+3,f
 10535  032E  09A4               	comf	___aomod@divisor+4,f
 10536  032F  09A5               	comf	___aomod@divisor+5,f
 10537  0330  09A6               	comf	___aomod@divisor+6,f
 10538  0331  09A7               	comf	___aomod@divisor+7,f
 10539  0332  0AA0               	incf	___aomod@divisor,f
 10540  0333  1D03               	skipz
 10541  0334  2B48               	goto	l3079
 10542  0335  0AA1               	incf	___aomod@divisor+1,f
 10543  0336  1D03               	skipz
 10544  0337  2B48               	goto	l3079
 10545  0338  0AA2               	incf	___aomod@divisor+2,f
 10546  0339  1D03               	skipz
 10547  033A  2B48               	goto	l3079
 10548  033B  0AA3               	incf	___aomod@divisor+3,f
 10549  033C  1D03               	skipz
 10550  033D  2B48               	goto	l3079
 10551  033E  0AA4               	incf	___aomod@divisor+4,f
 10552  033F  1D03               	skipz
 10553  0340  2B48               	goto	l3079
 10554  0341  0AA5               	incf	___aomod@divisor+5,f
 10555  0342  1D03               	skipz
 10556  0343  2B48               	goto	l3079
 10557  0344  0AA6               	incf	___aomod@divisor+6,f
 10558  0345  1D03               	skipz
 10559  0346  2B48               	goto	l3079
 10560  0347  0AA7               	incf	___aomod@divisor+7,f
 10561  0348                     l3079:	
 10562  0348  0020               	movlb	0	; select bank0
 10563  0349  0820               	movf	___aomod@divisor,w
 10564  034A  0421               	iorwf	___aomod@divisor+1,w
 10565  034B  0422               	iorwf	___aomod@divisor+2,w
 10566  034C  0423               	iorwf	___aomod@divisor+3,w
 10567  034D  0424               	iorwf	___aomod@divisor+4,w
 10568  034E  0425               	iorwf	___aomod@divisor+5,w
 10569  034F  0426               	iorwf	___aomod@divisor+6,w
 10570  0350  0427               	iorwf	___aomod@divisor+7,w
 10571  0351  1903               	skipnz
 10572  0352  2BA0               	goto	l3095
 10573  0353  01F1               	clrf	___aomod@counter
 10574  0354  0AF1               	incf	___aomod@counter,f
 10575  0355                     l3087:	
 10576  0355  1BA7               	btfsc	___aomod@divisor+7,7
 10577  0356  2B64               	goto	l3089
 10578  0357  35A0               	lslf	___aomod@divisor,f
 10579  0358  0DA1               	rlf	___aomod@divisor+1,f
 10580  0359  0DA2               	rlf	___aomod@divisor+2,f
 10581  035A  0DA3               	rlf	___aomod@divisor+3,f
 10582  035B  0DA4               	rlf	___aomod@divisor+4,f
 10583  035C  0DA5               	rlf	___aomod@divisor+5,f
 10584  035D  0DA6               	rlf	___aomod@divisor+6,f
 10585  035E  0DA7               	rlf	___aomod@divisor+7,f
 10586  035F  3001               	movlw	1
 10587  0360  00F0               	movwf	??___aomod
 10588  0361  0870               	movf	??___aomod,w
 10589  0362  07F1               	addwf	___aomod@counter,f
 10590  0363  2B55               	goto	l3087
 10591  0364                     l3089:	
 10592  0364  0827               	movf	___aomod@divisor+7,w
 10593  0365  022F               	subwf	___aomod@dividend+7,w
 10594  0366  1D03               	skipz
 10595  0367  2B82               	goto	u2505
 10596  0368  0826               	movf	___aomod@divisor+6,w
 10597  0369  022E               	subwf	___aomod@dividend+6,w
 10598  036A  1D03               	skipz
 10599  036B  2B82               	goto	u2505
 10600  036C  0825               	movf	___aomod@divisor+5,w
 10601  036D  022D               	subwf	___aomod@dividend+5,w
 10602  036E  1D03               	skipz
 10603  036F  2B82               	goto	u2505
 10604  0370  0824               	movf	___aomod@divisor+4,w
 10605  0371  022C               	subwf	___aomod@dividend+4,w
 10606  0372  1D03               	skipz
 10607  0373  2B82               	goto	u2505
 10608  0374  0823               	movf	___aomod@divisor+3,w
 10609  0375  022B               	subwf	___aomod@dividend+3,w
 10610  0376  1D03               	skipz
 10611  0377  2B82               	goto	u2505
 10612  0378  0822               	movf	___aomod@divisor+2,w
 10613  0379  022A               	subwf	___aomod@dividend+2,w
 10614  037A  1D03               	skipz
 10615  037B  2B82               	goto	u2505
 10616  037C  0821               	movf	___aomod@divisor+1,w
 10617  037D  0229               	subwf	___aomod@dividend+1,w
 10618  037E  1D03               	skipz
 10619  037F  2B82               	goto	u2505
 10620  0380  0820               	movf	___aomod@divisor,w
 10621  0381  0228               	subwf	___aomod@dividend,w
 10622  0382                     u2505:	
 10623  0382  1C03               	skipc
 10624  0383  2B94               	goto	l3093
 10625  0384  0820               	movf	___aomod@divisor,w
 10626  0385  02A8               	subwf	___aomod@dividend,f
 10627  0386  0821               	movf	___aomod@divisor+1,w
 10628  0387  3BA9               	subwfb	___aomod@dividend+1,f
 10629  0388  0822               	movf	___aomod@divisor+2,w
 10630  0389  3BAA               	subwfb	___aomod@dividend+2,f
 10631  038A  0823               	movf	___aomod@divisor+3,w
 10632  038B  3BAB               	subwfb	___aomod@dividend+3,f
 10633  038C  0824               	movf	___aomod@divisor+4,w
 10634  038D  3BAC               	subwfb	___aomod@dividend+4,f
 10635  038E  0825               	movf	___aomod@divisor+5,w
 10636  038F  3BAD               	subwfb	___aomod@dividend+5,f
 10637  0390  0826               	movf	___aomod@divisor+6,w
 10638  0391  3BAE               	subwfb	___aomod@dividend+6,f
 10639  0392  0827               	movf	___aomod@divisor+7,w
 10640  0393  3BAF               	subwfb	___aomod@dividend+7,f
 10641  0394                     l3093:	
 10642  0394  36A7               	lsrf	___aomod@divisor+7,f
 10643  0395  0CA6               	rrf	___aomod@divisor+6,f
 10644  0396  0CA5               	rrf	___aomod@divisor+5,f
 10645  0397  0CA4               	rrf	___aomod@divisor+4,f
 10646  0398  0CA3               	rrf	___aomod@divisor+3,f
 10647  0399  0CA2               	rrf	___aomod@divisor+2,f
 10648  039A  0CA1               	rrf	___aomod@divisor+1,f
 10649  039B  0CA0               	rrf	___aomod@divisor,f
 10650  039C  3001               	movlw	1
 10651  039D  02F1               	subwf	___aomod@counter,f
 10652  039E  1D03               	btfss	3,2
 10653  039F  2B64               	goto	l3089
 10654  03A0                     l3095:	
 10655  03A0  0872               	movf	___aomod@sign,w
 10656  03A1  1903               	btfsc	3,2
 10657  03A2  2BC1               	goto	l1124
 10658  03A3  09A8               	comf	___aomod@dividend,f
 10659  03A4  09A9               	comf	___aomod@dividend+1,f
 10660  03A5  09AA               	comf	___aomod@dividend+2,f
 10661  03A6  09AB               	comf	___aomod@dividend+3,f
 10662  03A7  09AC               	comf	___aomod@dividend+4,f
 10663  03A8  09AD               	comf	___aomod@dividend+5,f
 10664  03A9  09AE               	comf	___aomod@dividend+6,f
 10665  03AA  09AF               	comf	___aomod@dividend+7,f
 10666  03AB  0AA8               	incf	___aomod@dividend,f
 10667  03AC  1D03               	skipz
 10668  03AD  2BC1               	goto	l1124
 10669  03AE  0AA9               	incf	___aomod@dividend+1,f
 10670  03AF  1D03               	skipz
 10671  03B0  2BC1               	goto	l1124
 10672  03B1  0AAA               	incf	___aomod@dividend+2,f
 10673  03B2  1D03               	skipz
 10674  03B3  2BC1               	goto	l1124
 10675  03B4  0AAB               	incf	___aomod@dividend+3,f
 10676  03B5  1D03               	skipz
 10677  03B6  2BC1               	goto	l1124
 10678  03B7  0AAC               	incf	___aomod@dividend+4,f
 10679  03B8  1D03               	skipz
 10680  03B9  2BC1               	goto	l1124
 10681  03BA  0AAD               	incf	___aomod@dividend+5,f
 10682  03BB  1D03               	skipz
 10683  03BC  2BC1               	goto	l1124
 10684  03BD  0AAE               	incf	___aomod@dividend+6,f
 10685  03BE  1D03               	skipz
 10686  03BF  2BC1               	goto	l1124
 10687  03C0  0AAF               	incf	___aomod@dividend+7,f
 10688  03C1                     l1124:	
 10689  03C1  0020               	movlb	0	; select bank0
 10690  03C2  0828               	movf	___aomod@dividend,w
 10691  03C3  00A0               	movwf	?___aomod
 10692  03C4  0829               	movf	___aomod@dividend+1,w
 10693  03C5  00A1               	movwf	?___aomod+1
 10694  03C6  082A               	movf	___aomod@dividend+2,w
 10695  03C7  00A2               	movwf	?___aomod+2
 10696  03C8  082B               	movf	___aomod@dividend+3,w
 10697  03C9  00A3               	movwf	?___aomod+3
 10698  03CA  082C               	movf	___aomod@dividend+4,w
 10699  03CB  00A4               	movwf	?___aomod+4
 10700  03CC  082D               	movf	___aomod@dividend+5,w
 10701  03CD  00A5               	movwf	?___aomod+5
 10702  03CE  082E               	movf	___aomod@dividend+6,w
 10703  03CF  00A6               	movwf	?___aomod+6
 10704  03D0  082F               	movf	___aomod@dividend+7,w
 10705  03D1  00A7               	movwf	?___aomod+7
 10706  03D2  0008               	return
 10707  03D3                     __end_of___aomod:	
 10708                           
 10709                           	psect	text69
 10710  03D3                     __ptext69:	
 10711 ;; *************** function ___aodiv *****************
 10712 ;; Defined at:
 10713 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;  divisor         8    0[BANK0 ] long long 
 10716 ;;  dividend        8    8[BANK0 ] long long 
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;  quotient        8    3[COMMON] long long 
 10719 ;;  sign            1    2[COMMON] unsigned char 
 10720 ;;  counter         1    1[COMMON] unsigned char 
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  8    0[BANK0 ] long long 
 10723 ;; Registers used:
 10724 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10730 ;;      Params:         0      16       0       0       0       0       0       0
 10731 ;;      Locals:        10       0       0       0       0       0       0       0
 10732 ;;      Temps:          1       0       0       0       0       0       0       0
 10733 ;;      Totals:        11      16       0       0       0       0       0       0
 10734 ;;Total ram usage:       27 bytes
 10735 ;; Hardware stack levels used:    1
 10736 ;; This function calls:
 10737 ;;		Nothing
 10738 ;; This function is called by:
 10739 ;;		_dtoa
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           
 10744                           ;psect for function ___aodiv
 10745  03D3                     ___aodiv:	
 10746                           
 10747                           ;incstack = 0
 10748                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 10749  03D3  01F2               	clrf	___aodiv@sign
 10750  03D4  3020               	movlw	low ___aodiv@divisor
 10751  03D5  0086               	movwf	6
 10752  03D6  3000               	movlw	high ___aodiv@divisor
 10753  03D7  0087               	movwf	7
 10754  03D8  3F47               	moviw [7]fsr1
 10755  03D9  00F0               	movwf	??___aodiv
 10756  03DA  1FF0               	btfss	??___aodiv,7
 10757  03DB  2BFD               	goto	l3037
 10758  03DC  0020               	movlb	0	; select bank0
 10759  03DD  09A0               	comf	___aodiv@divisor,f
 10760  03DE  09A1               	comf	___aodiv@divisor+1,f
 10761  03DF  09A2               	comf	___aodiv@divisor+2,f
 10762  03E0  09A3               	comf	___aodiv@divisor+3,f
 10763  03E1  09A4               	comf	___aodiv@divisor+4,f
 10764  03E2  09A5               	comf	___aodiv@divisor+5,f
 10765  03E3  09A6               	comf	___aodiv@divisor+6,f
 10766  03E4  09A7               	comf	___aodiv@divisor+7,f
 10767  03E5  0AA0               	incf	___aodiv@divisor,f
 10768  03E6  1D03               	skipz
 10769  03E7  2BFB               	goto	u234lld
 10770  03E8  0AA1               	incf	___aodiv@divisor+1,f
 10771  03E9  1D03               	skipz
 10772  03EA  2BFB               	goto	u234lld
 10773  03EB  0AA2               	incf	___aodiv@divisor+2,f
 10774  03EC  1D03               	skipz
 10775  03ED  2BFB               	goto	u234lld
 10776  03EE  0AA3               	incf	___aodiv@divisor+3,f
 10777  03EF  1D03               	skipz
 10778  03F0  2BFB               	goto	u234lld
 10779  03F1  0AA4               	incf	___aodiv@divisor+4,f
 10780  03F2  1D03               	skipz
 10781  03F3  2BFB               	goto	u234lld
 10782  03F4  0AA5               	incf	___aodiv@divisor+5,f
 10783  03F5  1D03               	skipz
 10784  03F6  2BFB               	goto	u234lld
 10785  03F7  0AA6               	incf	___aodiv@divisor+6,f
 10786  03F8  1D03               	skipz
 10787  03F9  2BFB               	goto	u234lld
 10788  03FA  0AA7               	incf	___aodiv@divisor+7,f
 10789  03FB                     u234lld:	
 10790  03FB  01F2               	clrf	___aodiv@sign
 10791  03FC  0AF2               	incf	___aodiv@sign,f
 10792  03FD                     l3037:	
 10793  03FD  3028               	movlw	low ___aodiv@dividend
 10794  03FE  0086               	movwf	6
 10795  03FF  3000               	movlw	high ___aodiv@dividend
 10796  0400  0087               	movwf	7
 10797  0401  3F47               	moviw [7]fsr1
 10798  0402  00F0               	movwf	??___aodiv
 10799  0403  1FF0               	btfss	??___aodiv,7
 10800  0404  2C28               	goto	l3043
 10801  0405  0020               	movlb	0	; select bank0
 10802  0406  09A8               	comf	___aodiv@dividend,f
 10803  0407  09A9               	comf	___aodiv@dividend+1,f
 10804  0408  09AA               	comf	___aodiv@dividend+2,f
 10805  0409  09AB               	comf	___aodiv@dividend+3,f
 10806  040A  09AC               	comf	___aodiv@dividend+4,f
 10807  040B  09AD               	comf	___aodiv@dividend+5,f
 10808  040C  09AE               	comf	___aodiv@dividend+6,f
 10809  040D  09AF               	comf	___aodiv@dividend+7,f
 10810  040E  0AA8               	incf	___aodiv@dividend,f
 10811  040F  1D03               	skipz
 10812  0410  2C24               	goto	l3041
 10813  0411  0AA9               	incf	___aodiv@dividend+1,f
 10814  0412  1D03               	skipz
 10815  0413  2C24               	goto	l3041
 10816  0414  0AAA               	incf	___aodiv@dividend+2,f
 10817  0415  1D03               	skipz
 10818  0416  2C24               	goto	l3041
 10819  0417  0AAB               	incf	___aodiv@dividend+3,f
 10820  0418  1D03               	skipz
 10821  0419  2C24               	goto	l3041
 10822  041A  0AAC               	incf	___aodiv@dividend+4,f
 10823  041B  1D03               	skipz
 10824  041C  2C24               	goto	l3041
 10825  041D  0AAD               	incf	___aodiv@dividend+5,f
 10826  041E  1D03               	skipz
 10827  041F  2C24               	goto	l3041
 10828  0420  0AAE               	incf	___aodiv@dividend+6,f
 10829  0421  1D03               	skipz
 10830  0422  2C24               	goto	l3041
 10831  0423  0AAF               	incf	___aodiv@dividend+7,f
 10832  0424                     l3041:	
 10833  0424  3001               	movlw	1
 10834  0425  00F0               	movwf	??___aodiv
 10835  0426  0870               	movf	??___aodiv,w
 10836  0427  06F2               	xorwf	___aodiv@sign,f
 10837  0428                     l3043:	
 10838  0428  3073               	movlw	low ___aodiv@quotient
 10839  0429  0086               	movwf	6
 10840  042A  3000               	movlw	high ___aodiv@quotient
 10841  042B  0087               	movwf	7
 10842  042C  3008               	movlw	8
 10843  042D  00F0               	movwf	??___aodiv
 10844  042E  3000               	movlw	0
 10845  042F                     u2370:	
 10846  042F  001E               	movwi fsr1++
 10847  0430  0BF0               	decfsz	??___aodiv,f
 10848  0431  2C2F               	goto	u2370
 10849  0432  0020               	movlb	0	; select bank0
 10850  0433  0820               	movf	___aodiv@divisor,w
 10851  0434  0421               	iorwf	___aodiv@divisor+1,w
 10852  0435  0422               	iorwf	___aodiv@divisor+2,w
 10853  0436  0423               	iorwf	___aodiv@divisor+3,w
 10854  0437  0424               	iorwf	___aodiv@divisor+4,w
 10855  0438  0425               	iorwf	___aodiv@divisor+5,w
 10856  0439  0426               	iorwf	___aodiv@divisor+6,w
 10857  043A  0427               	iorwf	___aodiv@divisor+7,w
 10858  043B  1903               	skipnz
 10859  043C  2C93               	goto	l3065
 10860  043D  01F1               	clrf	___aodiv@counter
 10861  043E  0AF1               	incf	___aodiv@counter,f
 10862  043F                     l3053:	
 10863  043F  1BA7               	btfsc	___aodiv@divisor+7,7
 10864  0440  2C4E               	goto	l3055
 10865  0441  35A0               	lslf	___aodiv@divisor,f
 10866  0442  0DA1               	rlf	___aodiv@divisor+1,f
 10867  0443  0DA2               	rlf	___aodiv@divisor+2,f
 10868  0444  0DA3               	rlf	___aodiv@divisor+3,f
 10869  0445  0DA4               	rlf	___aodiv@divisor+4,f
 10870  0446  0DA5               	rlf	___aodiv@divisor+5,f
 10871  0447  0DA6               	rlf	___aodiv@divisor+6,f
 10872  0448  0DA7               	rlf	___aodiv@divisor+7,f
 10873  0449  3001               	movlw	1
 10874  044A  00F0               	movwf	??___aodiv
 10875  044B  0870               	movf	??___aodiv,w
 10876  044C  07F1               	addwf	___aodiv@counter,f
 10877  044D  2C3F               	goto	l3053
 10878  044E                     l3055:	
 10879  044E  35F3               	lslf	___aodiv@quotient,f
 10880  044F  0DF4               	rlf	___aodiv@quotient+1,f
 10881  0450  0DF5               	rlf	___aodiv@quotient+2,f
 10882  0451  0DF6               	rlf	___aodiv@quotient+3,f
 10883  0452  0DF7               	rlf	___aodiv@quotient+4,f
 10884  0453  0DF8               	rlf	___aodiv@quotient+5,f
 10885  0454  0DF9               	rlf	___aodiv@quotient+6,f
 10886  0455  0DFA               	rlf	___aodiv@quotient+7,f
 10887  0456  0827               	movf	___aodiv@divisor+7,w
 10888  0457  022F               	subwf	___aodiv@dividend+7,w
 10889  0458  1D03               	skipz
 10890  0459  2C74               	goto	u2405
 10891  045A  0826               	movf	___aodiv@divisor+6,w
 10892  045B  022E               	subwf	___aodiv@dividend+6,w
 10893  045C  1D03               	skipz
 10894  045D  2C74               	goto	u2405
 10895  045E  0825               	movf	___aodiv@divisor+5,w
 10896  045F  022D               	subwf	___aodiv@dividend+5,w
 10897  0460  1D03               	skipz
 10898  0461  2C74               	goto	u2405
 10899  0462  0824               	movf	___aodiv@divisor+4,w
 10900  0463  022C               	subwf	___aodiv@dividend+4,w
 10901  0464  1D03               	skipz
 10902  0465  2C74               	goto	u2405
 10903  0466  0823               	movf	___aodiv@divisor+3,w
 10904  0467  022B               	subwf	___aodiv@dividend+3,w
 10905  0468  1D03               	skipz
 10906  0469  2C74               	goto	u2405
 10907  046A  0822               	movf	___aodiv@divisor+2,w
 10908  046B  022A               	subwf	___aodiv@dividend+2,w
 10909  046C  1D03               	skipz
 10910  046D  2C74               	goto	u2405
 10911  046E  0821               	movf	___aodiv@divisor+1,w
 10912  046F  0229               	subwf	___aodiv@dividend+1,w
 10913  0470  1D03               	skipz
 10914  0471  2C74               	goto	u2405
 10915  0472  0820               	movf	___aodiv@divisor,w
 10916  0473  0228               	subwf	___aodiv@dividend,w
 10917  0474                     u2405:	
 10918  0474  1C03               	skipc
 10919  0475  2C87               	goto	l3063
 10920  0476  0820               	movf	___aodiv@divisor,w
 10921  0477  02A8               	subwf	___aodiv@dividend,f
 10922  0478  0821               	movf	___aodiv@divisor+1,w
 10923  0479  3BA9               	subwfb	___aodiv@dividend+1,f
 10924  047A  0822               	movf	___aodiv@divisor+2,w
 10925  047B  3BAA               	subwfb	___aodiv@dividend+2,f
 10926  047C  0823               	movf	___aodiv@divisor+3,w
 10927  047D  3BAB               	subwfb	___aodiv@dividend+3,f
 10928  047E  0824               	movf	___aodiv@divisor+4,w
 10929  047F  3BAC               	subwfb	___aodiv@dividend+4,f
 10930  0480  0825               	movf	___aodiv@divisor+5,w
 10931  0481  3BAD               	subwfb	___aodiv@dividend+5,f
 10932  0482  0826               	movf	___aodiv@divisor+6,w
 10933  0483  3BAE               	subwfb	___aodiv@dividend+6,f
 10934  0484  0827               	movf	___aodiv@divisor+7,w
 10935  0485  3BAF               	subwfb	___aodiv@dividend+7,f
 10936  0486  1473               	bsf	___aodiv@quotient,0
 10937  0487                     l3063:	
 10938  0487  36A7               	lsrf	___aodiv@divisor+7,f
 10939  0488  0CA6               	rrf	___aodiv@divisor+6,f
 10940  0489  0CA5               	rrf	___aodiv@divisor+5,f
 10941  048A  0CA4               	rrf	___aodiv@divisor+4,f
 10942  048B  0CA3               	rrf	___aodiv@divisor+3,f
 10943  048C  0CA2               	rrf	___aodiv@divisor+2,f
 10944  048D  0CA1               	rrf	___aodiv@divisor+1,f
 10945  048E  0CA0               	rrf	___aodiv@divisor,f
 10946  048F  3001               	movlw	1
 10947  0490  02F1               	subwf	___aodiv@counter,f
 10948  0491  1D03               	btfss	3,2
 10949  0492  2C4E               	goto	l3055
 10950  0493                     l3065:	
 10951  0493  0872               	movf	___aodiv@sign,w
 10952  0494  1903               	btfsc	3,2
 10953  0495  2CB4               	goto	l1111
 10954  0496  09F3               	comf	___aodiv@quotient,f
 10955  0497  09F4               	comf	___aodiv@quotient+1,f
 10956  0498  09F5               	comf	___aodiv@quotient+2,f
 10957  0499  09F6               	comf	___aodiv@quotient+3,f
 10958  049A  09F7               	comf	___aodiv@quotient+4,f
 10959  049B  09F8               	comf	___aodiv@quotient+5,f
 10960  049C  09F9               	comf	___aodiv@quotient+6,f
 10961  049D  09FA               	comf	___aodiv@quotient+7,f
 10962  049E  0AF3               	incf	___aodiv@quotient,f
 10963  049F  1D03               	skipz
 10964  04A0  2CB4               	goto	l1111
 10965  04A1  0AF4               	incf	___aodiv@quotient+1,f
 10966  04A2  1D03               	skipz
 10967  04A3  2CB4               	goto	l1111
 10968  04A4  0AF5               	incf	___aodiv@quotient+2,f
 10969  04A5  1D03               	skipz
 10970  04A6  2CB4               	goto	l1111
 10971  04A7  0AF6               	incf	___aodiv@quotient+3,f
 10972  04A8  1D03               	skipz
 10973  04A9  2CB4               	goto	l1111
 10974  04AA  0AF7               	incf	___aodiv@quotient+4,f
 10975  04AB  1D03               	skipz
 10976  04AC  2CB4               	goto	l1111
 10977  04AD  0AF8               	incf	___aodiv@quotient+5,f
 10978  04AE  1D03               	skipz
 10979  04AF  2CB4               	goto	l1111
 10980  04B0  0AF9               	incf	___aodiv@quotient+6,f
 10981  04B1  1D03               	skipz
 10982  04B2  2CB4               	goto	l1111
 10983  04B3  0AFA               	incf	___aodiv@quotient+7,f
 10984  04B4                     l1111:	
 10985  04B4  0873               	movf	___aodiv@quotient,w
 10986  04B5  0020               	movlb	0	; select bank0
 10987  04B6  00A0               	movwf	?___aodiv
 10988  04B7  0874               	movf	___aodiv@quotient+1,w
 10989  04B8  00A1               	movwf	?___aodiv+1
 10990  04B9  0875               	movf	___aodiv@quotient+2,w
 10991  04BA  00A2               	movwf	?___aodiv+2
 10992  04BB  0876               	movf	___aodiv@quotient+3,w
 10993  04BC  00A3               	movwf	?___aodiv+3
 10994  04BD  0877               	movf	___aodiv@quotient+4,w
 10995  04BE  00A4               	movwf	?___aodiv+4
 10996  04BF  0878               	movf	___aodiv@quotient+5,w
 10997  04C0  00A5               	movwf	?___aodiv+5
 10998  04C1  0879               	movf	___aodiv@quotient+6,w
 10999  04C2  00A6               	movwf	?___aodiv+6
 11000  04C3  087A               	movf	___aodiv@quotient+7,w
 11001  04C4  00A7               	movwf	?___aodiv+7
 11002  04C5  0008               	return
 11003  04C6                     __end_of___aodiv:	
 11004                           
 11005                           	psect	text70
 11006  08A0                     __ptext70:	
 11007 ;; *************** function _MTOUCH_Button_Buttonmask_Get *****************
 11008 ;; Defined at:
 11009 ;;		line 421 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;		None
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;  i               1    5[COMMON] unsigned char 
 11014 ;;  output          1    4[COMMON] unsigned char 
 11015 ;; Return value:  Size  Location     Type
 11016 ;;                  1    wreg      unsigned char 
 11017 ;; Registers used:
 11018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11019 ;; Tracked objects:
 11020 ;;		On entry : 0/0
 11021 ;;		On exit  : 0/0
 11022 ;;		Unchanged: 0/0
 11023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11024 ;;      Params:         0       0       0       0       0       0       0       0
 11025 ;;      Locals:         2       0       0       0       0       0       0       0
 11026 ;;      Temps:          2       0       0       0       0       0       0       0
 11027 ;;      Totals:         4       0       0       0       0       0       0       0
 11028 ;;Total ram usage:        4 bytes
 11029 ;; Hardware stack levels used:    1
 11030 ;; Hardware stack levels required when called:    1
 11031 ;; This function calls:
 11032 ;;		_MTOUCH_Button_isPressed
 11033 ;; This function is called by:
 11034 ;;		_main
 11035 ;;		_myButtonPressedCallback
 11036 ;; This function uses a non-reentrant model
 11037 ;;
 11038                           
 11039                           
 11040                           ;psect for function _MTOUCH_Button_Buttonmask_Get
 11041  08A0                     _MTOUCH_Button_Buttonmask_Get:	
 11042                           
 11043                           ;mcc_generated_files/mtouch/mtouch_button.c: 423:     mtouch_buttonmask_t output = 0;
 11044                           
 11045                           ;incstack = 0
 11046                           ; Regs used in _MTOUCH_Button_Buttonmask_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11047  08A0  01F4               	clrf	MTOUCH_Button_Buttonmask_Get@output
 11048                           
 11049                           ;mcc_generated_files/mtouch/mtouch_button.c: 425:     for (uint8_t i = 0; i < 3u; i++)
 11050  08A1  01F5               	clrf	MTOUCH_Button_Buttonmask_Get@i
 11051  08A2                     l3599:	
 11052                           
 11053                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 427:         if (MTOUCH_Button_isPressed(i) == 1)
 11054  08A2  0875               	movf	MTOUCH_Button_Buttonmask_Get@i,w
 11055  08A3  3188  2069  3188   	fcall	_MTOUCH_Button_isPressed
 11056  08A6  3A01               	xorlw	1
 11057  08A7  1D03               	skipz
 11058  08A8  28B4               	goto	l588
 11059                           
 11060                           ;mcc_generated_files/mtouch/mtouch_button.c: 428:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 429:             output |= (mtouch_buttonmask_t)0x01 << i;
 11061  08A9  3001               	movlw	1
 11062  08AA  00F2               	movwf	??_MTOUCH_Button_Buttonmask_Get
 11063  08AB  0A75               	incf	MTOUCH_Button_Buttonmask_Get@i,w
 11064  08AC  28AE               	goto	u3354
 11065  08AD                     u3355:	
 11066  08AD  35F2               	lslf	??_MTOUCH_Button_Buttonmask_Get,f
 11067  08AE                     u3354:	
 11068  08AE  0B89               	decfsz	9,f
 11069  08AF  28AD               	goto	u3355
 11070  08B0  0872               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 11071  08B1  00F3               	movwf	??_MTOUCH_Button_Buttonmask_Get+1
 11072  08B2  0873               	movf	??_MTOUCH_Button_Buttonmask_Get+1,w
 11073  08B3  04F4               	iorwf	MTOUCH_Button_Buttonmask_Get@output,f
 11074  08B4                     l588:	
 11075                           ;mcc_generated_files/mtouch/mtouch_button.c: 430:         }
 11076                           
 11077                           
 11078                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     }
 11079  08B4  3001               	movlw	1
 11080  08B5  00F2               	movwf	??_MTOUCH_Button_Buttonmask_Get
 11081  08B6  0872               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 11082  08B7  07F5               	addwf	MTOUCH_Button_Buttonmask_Get@i,f
 11083  08B8  3003               	movlw	3
 11084  08B9  0275               	subwf	MTOUCH_Button_Buttonmask_Get@i,w
 11085  08BA  1C03               	skipc
 11086  08BB  28A2               	goto	l3599
 11087                           
 11088                           ;mcc_generated_files/mtouch/mtouch_button.c: 432:     return output;
 11089  08BC  0874               	movf	MTOUCH_Button_Buttonmask_Get@output,w
 11090  08BD  0008               	return
 11091  08BE                     __end_of_MTOUCH_Button_Buttonmask_Get:	
 11092                           
 11093                           	psect	text71
 11094  0869                     __ptext71:	
 11095 ;; *************** function _MTOUCH_Button_isPressed *****************
 11096 ;; Defined at:
 11097 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11098 ;; Parameters:    Size  Location     Type
 11099 ;;  name            1    wreg     enum E3069
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;  name            1    1[COMMON] enum E3069
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  1    wreg      _Bool 
 11104 ;; Registers used:
 11105 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11111 ;;      Params:         0       0       0       0       0       0       0       0
 11112 ;;      Locals:         1       0       0       0       0       0       0       0
 11113 ;;      Temps:          1       0       0       0       0       0       0       0
 11114 ;;      Totals:         2       0       0       0       0       0       0       0
 11115 ;;Total ram usage:        2 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_MTOUCH_Button_Buttonmask_Get
 11121 ;;		_touch_example
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           
 11126                           ;psect for function _MTOUCH_Button_isPressed
 11127  0869                     _MTOUCH_Button_isPressed:	
 11128                           
 11129                           ;incstack = 0
 11130                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11131                           ;MTOUCH_Button_isPressed@name stored from wreg
 11132  0869  00F1               	movwf	MTOUCH_Button_isPressed@name
 11133                           
 11134                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 11135  086A  3003               	movlw	3
 11136  086B  0271               	subwf	MTOUCH_Button_isPressed@name,w
 11137  086C  1803               	skipnc
 11138  086D  2882               	goto	l3247
 11139                           
 11140                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 11141  086E  0871               	movf	MTOUCH_Button_isPressed@name,w
 11142  086F  00F0               	movwf	??_MTOUCH_Button_isPressed
 11143  0870  3003               	movlw	3
 11144  0871                     u2785:	
 11145  0871  35F0               	lslf	??_MTOUCH_Button_isPressed,f
 11146  0872  3EFF               	addlw	-1
 11147  0873  1D03               	skipz
 11148  0874  2871               	goto	u2785
 11149  0875  3570               	lslf	??_MTOUCH_Button_isPressed,w
 11150  0876  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 11151  0877  0086               	movwf	6
 11152  0878  3001               	movlw	1	; select bank2/3
 11153  0879  0087               	movwf	7
 11154  087A  3002               	movlw	2
 11155  087B  0601               	xorwf	1,w
 11156  087C  1D03               	btfss	3,2
 11157  087D  2880               	goto	u2790
 11158  087E  3001               	movlw	1
 11159  087F  0008               	return
 11160  0880                     u2790:	
 11161  0880  3000               	movlw	0
 11162  0881  0008               	return
 11163  0882                     l3247:	
 11164                           
 11165                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 11166  0882  3000               	movlw	0
 11167  0883  0008               	return
 11168  0884                     __end_of_MTOUCH_Button_isPressed:	
 11169                           
 11170                           	psect	text72
 11171  0A64                     __ptext72:	
 11172 ;; *************** function _MTOUCH_Button_Initialize *****************
 11173 ;; Defined at:
 11174 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;  name            1    wreg     enum E3069
 11177 ;; Auto vars:     Size  Location     Type
 11178 ;;  name            1    8[COMMON] enum E3069
 11179 ;;  button          1    9[COMMON] PTR struct .
 11180 ;;		 -> mtouch_button(48), 
 11181 ;; Return value:  Size  Location     Type
 11182 ;;                  1    wreg      void 
 11183 ;; Registers used:
 11184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11185 ;; Tracked objects:
 11186 ;;		On entry : 0/0
 11187 ;;		On exit  : 0/0
 11188 ;;		Unchanged: 0/0
 11189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11190 ;;      Params:         0       0       0       0       0       0       0       0
 11191 ;;      Locals:         2       0       0       0       0       0       0       0
 11192 ;;      Temps:          2       0       0       0       0       0       0       0
 11193 ;;      Totals:         4       0       0       0       0       0       0       0
 11194 ;;Total ram usage:        4 bytes
 11195 ;; Hardware stack levels used:    1
 11196 ;; Hardware stack levels required when called:    2
 11197 ;; This function calls:
 11198 ;;		_MTOUCH_Sensor_Calibrate
 11199 ;; This function is called by:
 11200 ;;		_MTOUCH_Button_InitializeAll
 11201 ;;		_Button_Service
 11202 ;;		_Button_State_NotPressed
 11203 ;;		_Button_State_Pressed
 11204 ;; This function uses a non-reentrant model
 11205 ;;
 11206                           
 11207                           
 11208                           ;psect for function _MTOUCH_Button_Initialize
 11209  0A64                     _MTOUCH_Button_Initialize:	
 11210                           
 11211                           ;incstack = 0
 11212                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11213                           ;MTOUCH_Button_Initialize@name stored from wreg
 11214  0A64  00F8               	movwf	MTOUCH_Button_Initialize@name
 11215                           
 11216                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 11217  0A65  0878               	movf	MTOUCH_Button_Initialize@name,w
 11218  0A66  00F6               	movwf	??_MTOUCH_Button_Initialize
 11219  0A67  3003               	movlw	3
 11220  0A68                     u3455:	
 11221  0A68  35F6               	lslf	??_MTOUCH_Button_Initialize,f
 11222  0A69  3EFF               	addlw	-1
 11223  0A6A  1D03               	skipz
 11224  0A6B  2A68               	goto	u3455
 11225  0A6C  3576               	lslf	??_MTOUCH_Button_Initialize,w
 11226  0A6D  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 11227  0A6E  00F7               	movwf	??_MTOUCH_Button_Initialize+1
 11228  0A6F  0877               	movf	??_MTOUCH_Button_Initialize+1,w
 11229  0A70  00F9               	movwf	MTOUCH_Button_Initialize@button
 11230                           
 11231                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 11232  0A71  0879               	movf	MTOUCH_Button_Initialize@button,w
 11233  0A72  3E02               	addlw	2
 11234  0A73  0086               	movwf	6
 11235  0A74  3001               	movlw	1	; select bank2/3
 11236  0A75  0087               	movwf	7
 11237  0A76  0181               	clrf	1
 11238                           
 11239                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 11240  0A77  0879               	movf	MTOUCH_Button_Initialize@button,w
 11241  0A78  3E05               	addlw	5
 11242  0A79  0086               	movwf	6
 11243  0A7A  3001               	movlw	1	; select bank2/3
 11244  0A7B  0087               	movwf	7
 11245  0A7C  3000               	movlw	0
 11246  0A7D  3FC0               	movwi [0]fsr1
 11247  0A7E  3000               	movlw	0
 11248  0A7F  3FC1               	movwi [1]fsr1
 11249  0A80  3FC2               	movwi [2]fsr1
 11250  0A81  3FC3               	movwi [3]fsr1
 11251                           
 11252                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 11253  0A82  0879               	movf	MTOUCH_Button_Initialize@button,w
 11254  0A83  3E0A               	addlw	10
 11255  0A84  0086               	movwf	6
 11256  0A85  3001               	movlw	1	; select bank2/3
 11257  0A86  0087               	movwf	7
 11258  0A87  3000               	movlw	0
 11259  0A88  3FC0               	movwi [0]fsr1
 11260  0A89  3FC1               	movwi [1]fsr1
 11261                           
 11262                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 11263  0A8A  0879               	movf	MTOUCH_Button_Initialize@button,w
 11264  0A8B  3E0C               	addlw	12
 11265  0A8C  0086               	movwf	6
 11266  0A8D  3001               	movlw	1	; select bank2/3
 11267  0A8E  0087               	movwf	7
 11268  0A8F  3000               	movlw	0
 11269  0A90  3FC0               	movwi [0]fsr1
 11270  0A91  3FC1               	movwi [1]fsr1
 11271                           
 11272                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 11273  0A92  0A79               	incf	MTOUCH_Button_Initialize@button,w
 11274  0A93  0086               	movwf	6
 11275  0A94  3001               	movlw	1	; select bank2/3
 11276  0A95  0087               	movwf	7
 11277  0A96  0801               	movf	1,w
 11278  0A97  3197  2752         	fcall	_MTOUCH_Sensor_Calibrate
 11279  0A99  0008               	return
 11280  0A9A                     __end_of_MTOUCH_Button_Initialize:	
 11281                           
 11282                           	psect	text73
 11283  1752                     __ptext73:	
 11284 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 11285 ;; Defined at:
 11286 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  sensor          1    wreg     enum E2854
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;  sensor          1    5[COMMON] enum E2854
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  1    wreg      void 
 11293 ;; Registers used:
 11294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11300 ;;      Params:         0       0       0       0       0       0       0       0
 11301 ;;      Locals:         1       0       0       0       0       0       0       0
 11302 ;;      Temps:          1       0       0       0       0       0       0       0
 11303 ;;      Totals:         2       0       0       0       0       0       0       0
 11304 ;;Total ram usage:        2 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    1
 11307 ;; This function calls:
 11308 ;;		___bmul
 11309 ;; This function is called by:
 11310 ;;		_MTOUCH_Sensor_Initialize
 11311 ;;		_MTOUCH_Button_Initialize
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function _MTOUCH_Sensor_Calibrate
 11317  1752                     _MTOUCH_Sensor_Calibrate:	
 11318                           
 11319                           ;incstack = 0
 11320                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11321                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 11322  1752  00F5               	movwf	MTOUCH_Sensor_Calibrate@sensor
 11323                           
 11324                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 11325  1753  3003               	movlw	3
 11326  1754  0275               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 11327  1755  1803               	skipnc
 11328  1756  0008               	return
 11329                           
 11330                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 11331  1757  3009               	movlw	9
 11332  1758  00F4               	movwf	??_MTOUCH_Sensor_Calibrate
 11333  1759  0874               	movf	??_MTOUCH_Sensor_Calibrate,w
 11334  175A  00F0               	movwf	___bmul@multiplicand
 11335  175B  0875               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 11336  175C  3197  2741         	fcall	___bmul
 11337  175E  3EB5               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 11338  175F  0086               	movwf	6
 11339  1760  0187               	clrf	7
 11340  1761  1101               	bcf	1,2
 11341  1762  0008               	return
 11342  1763                     __end_of_MTOUCH_Sensor_Calibrate:	
 11343                           
 11344                           	psect	text74
 11345  0EDC                     __ptext74:	
 11346 ;; *************** function _Button_Baseline_Update *****************
 11347 ;; Defined at:
 11348 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;  button          1    wreg     PTR struct .
 11351 ;;		 -> mtouch_button(48), 
 11352 ;; Auto vars:     Size  Location     Type
 11353 ;;  button          1    6[COMMON] PTR struct .
 11354 ;;		 -> mtouch_button(48), 
 11355 ;; Return value:  Size  Location     Type
 11356 ;;                  1    wreg      void 
 11357 ;; Registers used:
 11358 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11359 ;; Tracked objects:
 11360 ;;		On entry : 0/0
 11361 ;;		On exit  : 0/0
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11364 ;;      Params:         0       0       0       0       0       0       0       0
 11365 ;;      Locals:         1       0       0       0       0       0       0       0
 11366 ;;      Temps:          6       0       0       0       0       0       0       0
 11367 ;;      Totals:         7       0       0       0       0       0       0       0
 11368 ;;Total ram usage:        7 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; This function calls:
 11371 ;;		Nothing
 11372 ;; This function is called by:
 11373 ;;		_Button_State_Initializing
 11374 ;;		_Button_State_NotPressed
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           
 11379                           ;psect for function _Button_Baseline_Update
 11380  0EDC                     _Button_Baseline_Update:	
 11381                           
 11382                           ;incstack = 0
 11383                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11384                           ;Button_Baseline_Update@button stored from wreg
 11385  0EDC  00F6               	movwf	Button_Baseline_Update@button
 11386                           
 11387                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 11388  0EDD  1F8B               	btfss	11,7	;volatile
 11389  0EDE  2F26               	goto	l3703
 11390                           
 11391                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 11392  0EDF  138B               	bcf	11,7	;volatile
 11393                           
 11394                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 11395  0EE0  0876               	movf	Button_Baseline_Update@button,w
 11396  0EE1  3E05               	addlw	5
 11397  0EE2  0086               	movwf	6
 11398  0EE3  3001               	movlw	1	; select bank2/3
 11399  0EE4  0087               	movwf	7
 11400  0EE5  3F40               	moviw [0]fsr1
 11401  0EE6  00F0               	movwf	??_Button_Baseline_Update
 11402  0EE7  3F41               	moviw [1]fsr1
 11403  0EE8  00F1               	movwf	??_Button_Baseline_Update+1
 11404  0EE9  3F42               	moviw [2]fsr1
 11405  0EEA  00F2               	movwf	??_Button_Baseline_Update+2
 11406  0EEB  3F43               	moviw [3]fsr1
 11407  0EEC  00F3               	movwf	??_Button_Baseline_Update+3
 11408  0EED  3004               	movlw	4
 11409  0EEE                     u3485:	
 11410  0EEE  36F3               	lsrf	??_Button_Baseline_Update+3,f
 11411  0EEF  0CF2               	rrf	??_Button_Baseline_Update+2,f
 11412  0EF0  0CF1               	rrf	??_Button_Baseline_Update+1,f
 11413  0EF1  0CF0               	rrf	??_Button_Baseline_Update,f
 11414  0EF2  0B89               	decfsz	9,f
 11415  0EF3  2EEE               	goto	u3485
 11416  0EF4  0876               	movf	Button_Baseline_Update@button,w
 11417  0EF5  3E05               	addlw	5
 11418  0EF6  0086               	movwf	6
 11419  0EF7  3001               	movlw	1	; select bank2/3
 11420  0EF8  0087               	movwf	7
 11421  0EF9  0870               	movf	??_Button_Baseline_Update,w
 11422  0EFA  0281               	subwf	1,f
 11423  0EFB  3141               	addfsr 1,1
 11424  0EFC  0871               	movf	??_Button_Baseline_Update+1,w
 11425  0EFD  3B81               	subwfb	1,f
 11426  0EFE  3141               	addfsr 1,1
 11427  0EFF  0872               	movf	??_Button_Baseline_Update+2,w
 11428  0F00  3B81               	subwfb	1,f
 11429  0F01  3141               	addfsr 1,1
 11430  0F02  0873               	movf	??_Button_Baseline_Update+3,w
 11431  0F03  3B81               	subwfb	1,f
 11432  0F04  317D               	addfsr 1,-3
 11433                           
 11434                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 11435  0F05  0876               	movf	Button_Baseline_Update@button,w
 11436  0F06  3E03               	addlw	3
 11437  0F07  0086               	movwf	6
 11438  0F08  3001               	movlw	1	; select bank2/3
 11439  0F09  0087               	movwf	7
 11440  0F0A  3F40               	moviw [0]fsr1
 11441  0F0B  00F0               	movwf	??_Button_Baseline_Update
 11442  0F0C  3F41               	moviw [1]fsr1
 11443  0F0D  00F1               	movwf	??_Button_Baseline_Update+1
 11444  0F0E  0870               	movf	??_Button_Baseline_Update,w
 11445  0F0F  00F2               	movwf	??_Button_Baseline_Update+2
 11446  0F10  0871               	movf	??_Button_Baseline_Update+1,w
 11447  0F11  00F3               	movwf	??_Button_Baseline_Update+3
 11448  0F12  01F4               	clrf	??_Button_Baseline_Update+4
 11449  0F13  01F5               	clrf	??_Button_Baseline_Update+5
 11450  0F14  0876               	movf	Button_Baseline_Update@button,w
 11451  0F15  3E05               	addlw	5
 11452  0F16  0086               	movwf	6
 11453  0F17  3001               	movlw	1	; select bank2/3
 11454  0F18  0087               	movwf	7
 11455  0F19  0872               	movf	??_Button_Baseline_Update+2,w
 11456  0F1A  0781               	addwf	1,f
 11457  0F1B  3141               	addfsr 1,1
 11458  0F1C  0873               	movf	??_Button_Baseline_Update+3,w
 11459  0F1D  3D81               	addwfc	1,f
 11460  0F1E  3141               	addfsr 1,1
 11461  0F1F  0874               	movf	??_Button_Baseline_Update+4,w
 11462  0F20  3D81               	addwfc	1,f
 11463  0F21  3141               	addfsr 1,1
 11464  0F22  0875               	movf	??_Button_Baseline_Update+5,w
 11465  0F23  3D81               	addwfc	1,f
 11466                           
 11467                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 11468  0F24  178B               	bsf	11,7	;volatile
 11469                           
 11470                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 11471  0F25  0008               	return
 11472  0F26                     l3703:	
 11473                           
 11474                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 11475  0F26  0876               	movf	Button_Baseline_Update@button,w
 11476  0F27  3E05               	addlw	5
 11477  0F28  0086               	movwf	6
 11478  0F29  3001               	movlw	1	; select bank2/3
 11479  0F2A  0087               	movwf	7
 11480  0F2B  3F40               	moviw [0]fsr1
 11481  0F2C  00F0               	movwf	??_Button_Baseline_Update
 11482  0F2D  3F41               	moviw [1]fsr1
 11483  0F2E  00F1               	movwf	??_Button_Baseline_Update+1
 11484  0F2F  3F42               	moviw [2]fsr1
 11485  0F30  00F2               	movwf	??_Button_Baseline_Update+2
 11486  0F31  3F43               	moviw [3]fsr1
 11487  0F32  00F3               	movwf	??_Button_Baseline_Update+3
 11488  0F33  3004               	movlw	4
 11489  0F34                     u3495:	
 11490  0F34  36F3               	lsrf	??_Button_Baseline_Update+3,f
 11491  0F35  0CF2               	rrf	??_Button_Baseline_Update+2,f
 11492  0F36  0CF1               	rrf	??_Button_Baseline_Update+1,f
 11493  0F37  0CF0               	rrf	??_Button_Baseline_Update,f
 11494  0F38  0B89               	decfsz	9,f
 11495  0F39  2F34               	goto	u3495
 11496  0F3A  0876               	movf	Button_Baseline_Update@button,w
 11497  0F3B  3E05               	addlw	5
 11498  0F3C  0086               	movwf	6
 11499  0F3D  3001               	movlw	1	; select bank2/3
 11500  0F3E  0087               	movwf	7
 11501  0F3F  0870               	movf	??_Button_Baseline_Update,w
 11502  0F40  0281               	subwf	1,f
 11503  0F41  3141               	addfsr 1,1
 11504  0F42  0871               	movf	??_Button_Baseline_Update+1,w
 11505  0F43  3B81               	subwfb	1,f
 11506  0F44  3141               	addfsr 1,1
 11507  0F45  0872               	movf	??_Button_Baseline_Update+2,w
 11508  0F46  3B81               	subwfb	1,f
 11509  0F47  3141               	addfsr 1,1
 11510  0F48  0873               	movf	??_Button_Baseline_Update+3,w
 11511  0F49  3B81               	subwfb	1,f
 11512  0F4A  317D               	addfsr 1,-3
 11513                           
 11514                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 11515  0F4B  0876               	movf	Button_Baseline_Update@button,w
 11516  0F4C  3E03               	addlw	3
 11517  0F4D  0086               	movwf	6
 11518  0F4E  3001               	movlw	1	; select bank2/3
 11519  0F4F  0087               	movwf	7
 11520  0F50  3F40               	moviw [0]fsr1
 11521  0F51  00F0               	movwf	??_Button_Baseline_Update
 11522  0F52  3F41               	moviw [1]fsr1
 11523  0F53  00F1               	movwf	??_Button_Baseline_Update+1
 11524  0F54  0870               	movf	??_Button_Baseline_Update,w
 11525  0F55  00F2               	movwf	??_Button_Baseline_Update+2
 11526  0F56  0871               	movf	??_Button_Baseline_Update+1,w
 11527  0F57  00F3               	movwf	??_Button_Baseline_Update+3
 11528  0F58  01F4               	clrf	??_Button_Baseline_Update+4
 11529  0F59  01F5               	clrf	??_Button_Baseline_Update+5
 11530  0F5A  0876               	movf	Button_Baseline_Update@button,w
 11531  0F5B  3E05               	addlw	5
 11532  0F5C  0086               	movwf	6
 11533  0F5D  3001               	movlw	1	; select bank2/3
 11534  0F5E  0087               	movwf	7
 11535  0F5F  0872               	movf	??_Button_Baseline_Update+2,w
 11536  0F60  0781               	addwf	1,f
 11537  0F61  3141               	addfsr 1,1
 11538  0F62  0873               	movf	??_Button_Baseline_Update+3,w
 11539  0F63  3D81               	addwfc	1,f
 11540  0F64  3141               	addfsr 1,1
 11541  0F65  0874               	movf	??_Button_Baseline_Update+4,w
 11542  0F66  3D81               	addwfc	1,f
 11543  0F67  3141               	addfsr 1,1
 11544  0F68  0875               	movf	??_Button_Baseline_Update+5,w
 11545  0F69  3D81               	addwfc	1,f
 11546  0F6A  0008               	return
 11547  0F6B                     __end_of_Button_Baseline_Update:	
 11548                           
 11549                           	psect	text75
 11550  09A6                     __ptext75:	
 11551 ;; *************** function _Button_Baseline_Initialize *****************
 11552 ;; Defined at:
 11553 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;  button          1    wreg     PTR struct .
 11556 ;;		 -> mtouch_button(48), 
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;  button          1   12[COMMON] PTR struct .
 11559 ;;		 -> mtouch_button(48), 
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  1    wreg      void 
 11562 ;; Registers used:
 11563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11569 ;;      Params:         0       0       0       0       0       0       0       0
 11570 ;;      Locals:         1       0       0       0       0       0       0       0
 11571 ;;      Temps:          4       0       0       0       0       0       0       0
 11572 ;;      Totals:         5       0       0       0       0       0       0       0
 11573 ;;Total ram usage:        5 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    2
 11576 ;; This function calls:
 11577 ;;		_MTOUCH_Sensor_RawSample_Get
 11578 ;; This function is called by:
 11579 ;;		_Button_State_Initializing
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           
 11584                           ;psect for function _Button_Baseline_Initialize
 11585  09A6                     _Button_Baseline_Initialize:	
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11589                           ;Button_Baseline_Initialize@button stored from wreg
 11590  09A6  00FC               	movwf	Button_Baseline_Initialize@button
 11591                           
 11592                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 11593  09A7  0A7C               	incf	Button_Baseline_Initialize@button,w
 11594  09A8  0086               	movwf	6
 11595  09A9  3001               	movlw	1	; select bank2/3
 11596  09AA  0087               	movwf	7
 11597  09AB  0801               	movf	1,w
 11598  09AC  3188  2009  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 11599  09AF  0874               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11600  09B0  00F8               	movwf	??_Button_Baseline_Initialize
 11601  09B1  0875               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11602  09B2  00F9               	movwf	??_Button_Baseline_Initialize+1
 11603  09B3  01FA               	clrf	??_Button_Baseline_Initialize+2
 11604  09B4  01FB               	clrf	??_Button_Baseline_Initialize+3
 11605  09B5  087C               	movf	Button_Baseline_Initialize@button,w
 11606  09B6  3E05               	addlw	5
 11607  09B7  0086               	movwf	6
 11608  09B8  3001               	movlw	1	; select bank2/3
 11609  09B9  0087               	movwf	7
 11610  09BA  0878               	movf	??_Button_Baseline_Initialize,w
 11611  09BB  3FC0               	movwi [0]fsr1
 11612  09BC  0879               	movf	??_Button_Baseline_Initialize+1,w
 11613  09BD  3FC1               	movwi [1]fsr1
 11614  09BE  087A               	movf	??_Button_Baseline_Initialize+2,w
 11615  09BF  3FC2               	movwi [2]fsr1
 11616  09C0  087B               	movf	??_Button_Baseline_Initialize+3,w
 11617  09C1  3FC3               	movwi [3]fsr1
 11618                           
 11619                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 11620  09C2  087C               	movf	Button_Baseline_Initialize@button,w
 11621  09C3  3E05               	addlw	5
 11622  09C4  0086               	movwf	6
 11623  09C5  3001               	movlw	1	; select bank2/3
 11624  09C6  0087               	movwf	7
 11625  09C7  3004               	movlw	4
 11626  09C8                     u3465:	
 11627  09C8  3581               	lslf	1,f
 11628  09C9  3141               	addfsr 1,1
 11629  09CA  0D81               	rlf	1,f
 11630  09CB  3141               	addfsr 1,1
 11631  09CC  0D81               	rlf	1,f
 11632  09CD  3141               	addfsr 1,1
 11633  09CE  0D81               	rlf	1,f
 11634  09CF  317D               	addfsr 1,-3
 11635  09D0  0B89               	decfsz	9,f
 11636  09D1  29C8               	goto	u3465
 11637  09D2  0008               	return
 11638  09D3                     __end_of_Button_Baseline_Initialize:	
 11639                           
 11640                           	psect	text76
 11641  16CE                     __ptext76:	
 11642 ;; *************** function _Button_Reading_Update *****************
 11643 ;; Defined at:
 11644 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11645 ;; Parameters:    Size  Location     Type
 11646 ;;  button          1    wreg     PTR struct .
 11647 ;;		 -> mtouch_button(48), 
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;  button          1   11[COMMON] PTR struct .
 11650 ;;		 -> mtouch_button(48), 
 11651 ;; Return value:  Size  Location     Type
 11652 ;;                  1    wreg      void 
 11653 ;; Registers used:
 11654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11660 ;;      Params:         0       0       0       0       0       0       0       0
 11661 ;;      Locals:         1       0       0       0       0       0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0
 11663 ;;      Totals:         1       0       0       0       0       0       0       0
 11664 ;;Total ram usage:        1 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:    3
 11667 ;; This function calls:
 11668 ;;		_Button_Reading_Update_Helper
 11669 ;; This function is called by:
 11670 ;;		_Button_Service
 11671 ;; This function uses a non-reentrant model
 11672 ;;
 11673                           
 11674                           
 11675                           ;psect for function _Button_Reading_Update
 11676  16CE                     _Button_Reading_Update:	
 11677                           
 11678                           ;incstack = 0
 11679                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11680                           ;Button_Reading_Update@button stored from wreg
 11681  16CE  00FB               	movwf	Button_Reading_Update@button
 11682                           
 11683                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 11684  16CF  1F8B               	btfss	11,7	;volatile
 11685  16D0  2ED7               	goto	l3839
 11686                           
 11687                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 11688  16D1  138B               	bcf	11,7	;volatile
 11689                           
 11690                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 11691  16D2  087B               	movf	Button_Reading_Update@button,w
 11692  16D3  318A  22D1         	fcall	_Button_Reading_Update_Helper
 11693                           
 11694                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 11695  16D5  178B               	bsf	11,7	;volatile
 11696                           
 11697                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 11698  16D6  0008               	return
 11699  16D7                     l3839:	
 11700                           
 11701                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 11702  16D7  087B               	movf	Button_Reading_Update@button,w
 11703  16D8  318A  22D1         	fcall	_Button_Reading_Update_Helper
 11704  16DA  0008               	return
 11705  16DB                     __end_of_Button_Reading_Update:	
 11706                           
 11707                           	psect	text77
 11708  0AD1                     __ptext77:	
 11709 ;; *************** function _Button_Reading_Update_Helper *****************
 11710 ;; Defined at:
 11711 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  button          1    wreg     PTR struct .
 11714 ;;		 -> mtouch_button(48), 
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;  button          1   10[COMMON] PTR struct .
 11717 ;;		 -> mtouch_button(48), 
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  1    wreg      void 
 11720 ;; Registers used:
 11721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11722 ;; Tracked objects:
 11723 ;;		On entry : 0/0
 11724 ;;		On exit  : 0/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11727 ;;      Params:         0       0       0       0       0       0       0       0
 11728 ;;      Locals:         1       0       0       0       0       0       0       0
 11729 ;;      Temps:          2       0       0       0       0       0       0       0
 11730 ;;      Totals:         3       0       0       0       0       0       0       0
 11731 ;;Total ram usage:        3 bytes
 11732 ;; Hardware stack levels used:    1
 11733 ;; Hardware stack levels required when called:    2
 11734 ;; This function calls:
 11735 ;;		_MTOUCH_Sensor_RawSample_Get
 11736 ;; This function is called by:
 11737 ;;		_Button_Reading_Update
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           
 11742                           ;psect for function _Button_Reading_Update_Helper
 11743  0AD1                     _Button_Reading_Update_Helper:	
 11744                           
 11745                           ;incstack = 0
 11746                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11747                           ;Button_Reading_Update_Helper@button stored from wreg
 11748  0AD1  00FA               	movwf	Button_Reading_Update_Helper@button
 11749                           
 11750                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 11751  0AD2  087A               	movf	Button_Reading_Update_Helper@button,w
 11752  0AD3  3E02               	addlw	2
 11753  0AD4  0086               	movwf	6
 11754  0AD5  3001               	movlw	1	; select bank2/3
 11755  0AD6  0087               	movwf	7
 11756  0AD7  0801               	movf	1,w
 11757  0AD8  1903               	btfsc	3,2
 11758  0AD9  2B0D               	goto	l3711
 11759                           
 11760                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 11761  0ADA  087A               	movf	Button_Reading_Update_Helper@button,w
 11762  0ADB  3E03               	addlw	3
 11763  0ADC  0086               	movwf	6
 11764  0ADD  3001               	movlw	1	; select bank2/3
 11765  0ADE  0087               	movwf	7
 11766  0ADF  3F40               	moviw [0]fsr1
 11767  0AE0  00F8               	movwf	??_Button_Reading_Update_Helper
 11768  0AE1  3F41               	moviw [1]fsr1
 11769  0AE2  00F9               	movwf	??_Button_Reading_Update_Helper+1
 11770  0AE3  36F9               	lsrf	??_Button_Reading_Update_Helper+1,f
 11771  0AE4  0CF8               	rrf	??_Button_Reading_Update_Helper,f
 11772  0AE5  36F9               	lsrf	??_Button_Reading_Update_Helper+1,f
 11773  0AE6  0CF8               	rrf	??_Button_Reading_Update_Helper,f
 11774  0AE7  087A               	movf	Button_Reading_Update_Helper@button,w
 11775  0AE8  3E03               	addlw	3
 11776  0AE9  0086               	movwf	6
 11777  0AEA  3001               	movlw	1	; select bank2/3
 11778  0AEB  0087               	movwf	7
 11779  0AEC  0878               	movf	??_Button_Reading_Update_Helper,w
 11780  0AED  0281               	subwf	1,f
 11781  0AEE  3141               	addfsr 1,1
 11782  0AEF  0879               	movf	??_Button_Reading_Update_Helper+1,w
 11783  0AF0  3B81               	subwfb	1,f
 11784  0AF1  317F               	addfsr 1,-1
 11785                           
 11786                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 11787  0AF2  0A7A               	incf	Button_Reading_Update_Helper@button,w
 11788  0AF3  0086               	movwf	6
 11789  0AF4  3001               	movlw	1	; select bank2/3
 11790  0AF5  0087               	movwf	7
 11791  0AF6  0801               	movf	1,w
 11792  0AF7  3188  2009         	fcall	_MTOUCH_Sensor_RawSample_Get
 11793  0AF9  0874               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11794  0AFA  00F8               	movwf	??_Button_Reading_Update_Helper
 11795  0AFB  0875               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11796  0AFC  00F9               	movwf	??_Button_Reading_Update_Helper+1
 11797  0AFD  36F9               	lsrf	??_Button_Reading_Update_Helper+1,f
 11798  0AFE  0CF8               	rrf	??_Button_Reading_Update_Helper,f
 11799  0AFF  36F9               	lsrf	??_Button_Reading_Update_Helper+1,f
 11800  0B00  0CF8               	rrf	??_Button_Reading_Update_Helper,f
 11801  0B01  087A               	movf	Button_Reading_Update_Helper@button,w
 11802  0B02  3E03               	addlw	3
 11803  0B03  0086               	movwf	6
 11804  0B04  3001               	movlw	1	; select bank2/3
 11805  0B05  0087               	movwf	7
 11806  0B06  0878               	movf	??_Button_Reading_Update_Helper,w
 11807  0B07  0781               	addwf	1,f
 11808  0B08  3141               	addfsr 1,1
 11809  0B09  0879               	movf	??_Button_Reading_Update_Helper+1,w
 11810  0B0A  3D81               	addwfc	1,f
 11811  0B0B  317F               	addfsr 1,-1
 11812                           
 11813                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 11814  0B0C  0008               	return
 11815  0B0D                     l3711:	
 11816                           
 11817                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11818  0B0D  0A7A               	incf	Button_Reading_Update_Helper@button,w
 11819  0B0E  0086               	movwf	6
 11820  0B0F  3001               	movlw	1	; select bank2/3
 11821  0B10  0087               	movwf	7
 11822  0B11  0801               	movf	1,w
 11823  0B12  3188  2009         	fcall	_MTOUCH_Sensor_RawSample_Get
 11824  0B14  087A               	movf	Button_Reading_Update_Helper@button,w
 11825  0B15  3E03               	addlw	3
 11826  0B16  0086               	movwf	6
 11827  0B17  3001               	movlw	1	; select bank2/3
 11828  0B18  0087               	movwf	7
 11829  0B19  0874               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11830  0B1A  3FC0               	movwi [0]fsr1
 11831  0B1B  0875               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11832  0B1C  3FC1               	movwi [1]fsr1
 11833  0B1D  0008               	return
 11834  0B1E                     __end_of_Button_Reading_Update_Helper:	
 11835                           
 11836                           	psect	text78
 11837  0809                     __ptext78:	
 11838 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11839 ;; Defined at:
 11840 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;  name            1    wreg     enum E2854
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;  name            1    7[COMMON] enum E2854
 11845 ;; Return value:  Size  Location     Type
 11846 ;;                  2    4[COMMON] unsigned short 
 11847 ;; Registers used:
 11848 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11849 ;; Tracked objects:
 11850 ;;		On entry : 0/0
 11851 ;;		On exit  : 0/0
 11852 ;;		Unchanged: 0/0
 11853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11854 ;;      Params:         2       0       0       0       0       0       0       0
 11855 ;;      Locals:         1       0       0       0       0       0       0       0
 11856 ;;      Temps:          1       0       0       0       0       0       0       0
 11857 ;;      Totals:         4       0       0       0       0       0       0       0
 11858 ;;Total ram usage:        4 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:    1
 11861 ;; This function calls:
 11862 ;;		___bmul
 11863 ;; This function is called by:
 11864 ;;		_Button_Reading_Update_Helper
 11865 ;;		_Button_Baseline_Initialize
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           
 11870                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 11871  0809                     _MTOUCH_Sensor_RawSample_Get:	
 11872                           
 11873                           ;incstack = 0
 11874                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11875                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11876  0809  00F7               	movwf	MTOUCH_Sensor_RawSample_Get@name
 11877                           
 11878                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 11879  080A  3003               	movlw	3
 11880  080B  0277               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 11881  080C  1803               	skipnc
 11882  080D  281D               	goto	l3589
 11883                           
 11884                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 11885  080E  3009               	movlw	9
 11886  080F  00F6               	movwf	??_MTOUCH_Sensor_RawSample_Get
 11887  0810  0876               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 11888  0811  00F0               	movwf	___bmul@multiplicand
 11889  0812  0877               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 11890  0813  3197  2741         	fcall	___bmul
 11891  0815  3EB3               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
 11892  0816  0086               	movwf	6
 11893  0817  0187               	clrf	7
 11894  0818  3F40               	moviw [0]fsr1
 11895  0819  00F4               	movwf	?_MTOUCH_Sensor_RawSample_Get
 11896  081A  3F41               	moviw [1]fsr1
 11897  081B  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 11898  081C  0008               	return
 11899  081D                     l3589:	
 11900                           
 11901                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 11902  081D  01F4               	clrf	?_MTOUCH_Sensor_RawSample_Get
 11903  081E  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 11904  081F  0008               	return
 11905  0820                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 11906                           
 11907                           	psect	text79
 11908  1741                     __ptext79:	
 11909 ;; *************** function ___bmul *****************
 11910 ;; Defined at:
 11911 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;  multiplier      1    wreg     unsigned char 
 11914 ;;  multiplicand    1    0[COMMON] unsigned char 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  multiplier      1    3[COMMON] unsigned char 
 11917 ;;  product         1    2[COMMON] unsigned char 
 11918 ;; Return value:  Size  Location     Type
 11919 ;;                  1    wreg      unsigned char 
 11920 ;; Registers used:
 11921 ;;		wreg, status,2, status,0
 11922 ;; Tracked objects:
 11923 ;;		On entry : 0/0
 11924 ;;		On exit  : 0/0
 11925 ;;		Unchanged: 0/0
 11926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11927 ;;      Params:         1       0       0       0       0       0       0       0
 11928 ;;      Locals:         2       0       0       0       0       0       0       0
 11929 ;;      Temps:          1       0       0       0       0       0       0       0
 11930 ;;      Totals:         4       0       0       0       0       0       0       0
 11931 ;;Total ram usage:        4 bytes
 11932 ;; Hardware stack levels used:    1
 11933 ;; This function calls:
 11934 ;;		Nothing
 11935 ;; This function is called by:
 11936 ;;		_MTOUCH_Sensor_Initialize
 11937 ;;		_MTOUCH_Sensor_RawSample_Get
 11938 ;;		_MTOUCH_Sensor_Enable
 11939 ;;		_MTOUCH_Sensor_Calibrate
 11940 ;;		_MTOUCH_Sensor_isCalibrated
 11941 ;;		_MTOUCH_Sensor_wasSampled
 11942 ;;		_MTOUCH_Sensor_isAnySensorActive
 11943 ;;		_MTOUCH_Sensor_Disable
 11944 ;;		_MTOUCH_Sensor_isEnabled
 11945 ;;		_MTOUCH_Sensor_isActive
 11946 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 11947 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 11948 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 11949 ;;		_MTOUCH_Sensor_Oversampling_Get
 11950 ;;		_MTOUCH_Sensor_Oversampling_Set
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           
 11955                           ;psect for function ___bmul
 11956  1741                     ___bmul:	
 11957                           
 11958                           ;incstack = 0
 11959                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11960                           ;___bmul@multiplier stored from wreg
 11961  1741  00F3               	movwf	___bmul@multiplier
 11962  1742  01F2               	clrf	___bmul@product
 11963  1743                     l3359:	
 11964  1743  1C73               	btfss	___bmul@multiplier,0
 11965  1744  2F49               	goto	l3363
 11966  1745  0870               	movf	___bmul@multiplicand,w
 11967  1746  00F1               	movwf	??___bmul
 11968  1747  0871               	movf	??___bmul,w
 11969  1748  07F2               	addwf	___bmul@product,f
 11970  1749                     l3363:	
 11971  1749  1003               	clrc
 11972  174A  0DF0               	rlf	___bmul@multiplicand,f
 11973  174B  1003               	clrc
 11974  174C  0CF3               	rrf	___bmul@multiplier,f
 11975  174D  0873               	movf	___bmul@multiplier,w
 11976  174E  1D03               	btfss	3,2
 11977  174F  2F43               	goto	l3359
 11978  1750  0872               	movf	___bmul@product,w
 11979  1751  0008               	return
 11980  1752                     __end_of___bmul:	
 11981                           
 11982                           	psect	text80
 11983  0DCB                     __ptext80:	
 11984 ;; *************** function _Button_Deviation_Update *****************
 11985 ;; Defined at:
 11986 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11987 ;; Parameters:    Size  Location     Type
 11988 ;;  button          1    wreg     PTR struct .
 11989 ;;		 -> mtouch_button(48), 
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;  button          1    0[BANK0 ] PTR struct .
 11992 ;;		 -> mtouch_button(48), 
 11993 ;;  deviation       4    1[BANK0 ] long 
 11994 ;; Return value:  Size  Location     Type
 11995 ;;                  1    wreg      void 
 11996 ;; Registers used:
 11997 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11998 ;; Tracked objects:
 11999 ;;		On entry : 0/0
 12000 ;;		On exit  : 0/0
 12001 ;;		Unchanged: 0/0
 12002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12003 ;;      Params:         0       0       0       0       0       0       0       0
 12004 ;;      Locals:         0       5       0       0       0       0       0       0
 12005 ;;      Temps:         10       0       0       0       0       0       0       0
 12006 ;;      Totals:        10       5       0       0       0       0       0       0
 12007 ;;Total ram usage:       15 bytes
 12008 ;; Hardware stack levels used:    1
 12009 ;; This function calls:
 12010 ;;		Nothing
 12011 ;; This function is called by:
 12012 ;;		_Button_Service
 12013 ;; This function uses a non-reentrant model
 12014 ;;
 12015                           
 12016                           
 12017                           ;psect for function _Button_Deviation_Update
 12018  0DCB                     _Button_Deviation_Update:	
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12022                           ;Button_Deviation_Update@button stored from wreg
 12023  0DCB  0020               	movlb	0	; select bank0
 12024  0DCC  00A0               	movwf	Button_Deviation_Update@button
 12025                           
 12026                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12027  0DCD  0820               	movf	Button_Deviation_Update@button,w
 12028  0DCE  3E05               	addlw	5
 12029  0DCF  0086               	movwf	6
 12030  0DD0  3001               	movlw	1	; select bank2/3
 12031  0DD1  0087               	movwf	7
 12032  0DD2  3F40               	moviw [0]fsr1
 12033  0DD3  00F0               	movwf	??_Button_Deviation_Update
 12034  0DD4  3F41               	moviw [1]fsr1
 12035  0DD5  00F1               	movwf	??_Button_Deviation_Update+1
 12036  0DD6  3F42               	moviw [2]fsr1
 12037  0DD7  00F2               	movwf	??_Button_Deviation_Update+2
 12038  0DD8  3F43               	moviw [3]fsr1
 12039  0DD9  00F3               	movwf	??_Button_Deviation_Update+3
 12040  0DDA  3004               	movlw	4
 12041  0DDB                     u3725:	
 12042  0DDB  36F3               	lsrf	??_Button_Deviation_Update+3,f
 12043  0DDC  0CF2               	rrf	??_Button_Deviation_Update+2,f
 12044  0DDD  0CF1               	rrf	??_Button_Deviation_Update+1,f
 12045  0DDE  0CF0               	rrf	??_Button_Deviation_Update,f
 12046  0DDF  0B89               	decfsz	9,f
 12047  0DE0  2DDB               	goto	u3725
 12048  0DE1  0820               	movf	Button_Deviation_Update@button,w
 12049  0DE2  3E03               	addlw	3
 12050  0DE3  0086               	movwf	6
 12051  0DE4  3001               	movlw	1	; select bank2/3
 12052  0DE5  0087               	movwf	7
 12053  0DE6  3F40               	moviw [0]fsr1
 12054  0DE7  00F4               	movwf	??_Button_Deviation_Update+4
 12055  0DE8  3F41               	moviw [1]fsr1
 12056  0DE9  00F5               	movwf	??_Button_Deviation_Update+5
 12057  0DEA  0874               	movf	??_Button_Deviation_Update+4,w
 12058  0DEB  00F6               	movwf	??_Button_Deviation_Update+6
 12059  0DEC  0875               	movf	??_Button_Deviation_Update+5,w
 12060  0DED  00F7               	movwf	??_Button_Deviation_Update+7
 12061  0DEE  01F8               	clrf	??_Button_Deviation_Update+8
 12062  0DEF  01F9               	clrf	??_Button_Deviation_Update+9
 12063  0DF0  0870               	movf	??_Button_Deviation_Update,w
 12064  0DF1  02F6               	subwf	??_Button_Deviation_Update+6,f
 12065  0DF2  0871               	movf	??_Button_Deviation_Update+1,w
 12066  0DF3  3BF7               	subwfb	??_Button_Deviation_Update+7,f
 12067  0DF4  0872               	movf	??_Button_Deviation_Update+2,w
 12068  0DF5  3BF8               	subwfb	??_Button_Deviation_Update+8,f
 12069  0DF6  0873               	movf	??_Button_Deviation_Update+3,w
 12070  0DF7  3BF9               	subwfb	??_Button_Deviation_Update+9,f
 12071  0DF8  0879               	movf	??_Button_Deviation_Update+9,w
 12072  0DF9  00A4               	movwf	Button_Deviation_Update@deviation+3
 12073  0DFA  0878               	movf	??_Button_Deviation_Update+8,w
 12074  0DFB  00A3               	movwf	Button_Deviation_Update@deviation+2
 12075  0DFC  0877               	movf	??_Button_Deviation_Update+7,w
 12076  0DFD  00A2               	movwf	Button_Deviation_Update@deviation+1
 12077  0DFE  0876               	movf	??_Button_Deviation_Update+6,w
 12078  0DFF  00A1               	movwf	Button_Deviation_Update@deviation
 12079                           
 12080                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 12081  0E00  0821               	movf	Button_Deviation_Update@deviation,w
 12082  0E01  00F0               	movwf	??_Button_Deviation_Update
 12083  0E02  0822               	movf	Button_Deviation_Update@deviation+1,w
 12084  0E03  00F1               	movwf	??_Button_Deviation_Update+1
 12085  0E04  0823               	movf	Button_Deviation_Update@deviation+2,w
 12086  0E05  00F2               	movwf	??_Button_Deviation_Update+2
 12087  0E06  0824               	movf	Button_Deviation_Update@deviation+3,w
 12088  0E07  00F3               	movwf	??_Button_Deviation_Update+3
 12089  0E08  0820               	movf	Button_Deviation_Update@button,w
 12090  0E09  3E0F               	addlw	15
 12091  0E0A  0086               	movwf	6
 12092  0E0B  3001               	movlw	1	; select bank2/3
 12093  0E0C  0087               	movwf	7
 12094  0E0D  0A01               	incf	1,w
 12095  0E0E  2E13               	goto	u3730
 12096  0E0F                     u3735:	
 12097  0E0F  37F3               	asrf	??_Button_Deviation_Update+3,f
 12098  0E10  0CF2               	rrf	??_Button_Deviation_Update+2,f
 12099  0E11  0CF1               	rrf	??_Button_Deviation_Update+1,f
 12100  0E12  0CF0               	rrf	??_Button_Deviation_Update,f
 12101  0E13                     u3730:	
 12102  0E13  0B89               	decfsz	9,f
 12103  0E14  2E0F               	goto	u3735
 12104  0E15  0873               	movf	??_Button_Deviation_Update+3,w
 12105  0E16  00A4               	movwf	Button_Deviation_Update@deviation+3
 12106  0E17  0872               	movf	??_Button_Deviation_Update+2,w
 12107  0E18  00A3               	movwf	Button_Deviation_Update@deviation+2
 12108  0E19  0871               	movf	??_Button_Deviation_Update+1,w
 12109  0E1A  00A2               	movwf	Button_Deviation_Update@deviation+1
 12110  0E1B  0870               	movf	??_Button_Deviation_Update,w
 12111  0E1C  00A1               	movwf	Button_Deviation_Update@deviation
 12112                           
 12113                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 12114  0E1D  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 12115  0E1E  2E34               	goto	l3847
 12116  0E1F  0824               	movf	Button_Deviation_Update@deviation+3,w
 12117  0E20  1D03               	btfss	3,2
 12118  0E21  2E2C               	goto	l3845
 12119  0E22  0823               	movf	Button_Deviation_Update@deviation+2,w
 12120  0E23  1D03               	btfss	3,2
 12121  0E24  2E2C               	goto	l3845
 12122  0E25  0822               	movf	Button_Deviation_Update@deviation+1,w
 12123  0E26  1D03               	btfss	3,2
 12124  0E27  2E2C               	goto	l3845
 12125  0E28  3080               	movlw	128
 12126  0E29  0221               	subwf	Button_Deviation_Update@deviation,w
 12127  0E2A  1C03               	btfss	3,0
 12128  0E2B  2E34               	goto	l3847
 12129  0E2C                     l3845:	
 12130                           
 12131                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 12132  0E2C  3000               	movlw	0
 12133  0E2D  00A4               	movwf	Button_Deviation_Update@deviation+3
 12134  0E2E  3000               	movlw	0
 12135  0E2F  00A3               	movwf	Button_Deviation_Update@deviation+2
 12136  0E30  3000               	movlw	0
 12137  0E31  00A2               	movwf	Button_Deviation_Update@deviation+1
 12138  0E32  307F               	movlw	127
 12139  0E33  00A1               	movwf	Button_Deviation_Update@deviation
 12140  0E34                     l3847:	
 12141                           
 12142                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 12143  0E34  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 12144  0E35  2E48               	goto	l3851
 12145  0E36  3080               	movlw	128
 12146  0E37  0221               	subwf	Button_Deviation_Update@deviation,w
 12147  0E38  30FF               	movlw	255
 12148  0E39  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 12149  0E3A  30FF               	movlw	255
 12150  0E3B  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 12151  0E3C  30FF               	movlw	255
 12152  0E3D  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 12153  0E3E  1803               	btfsc	3,0
 12154  0E3F  2E48               	goto	l3851
 12155                           
 12156                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 12157  0E40  30FF               	movlw	255
 12158  0E41  00A4               	movwf	Button_Deviation_Update@deviation+3
 12159  0E42  30FF               	movlw	255
 12160  0E43  00A3               	movwf	Button_Deviation_Update@deviation+2
 12161  0E44  30FF               	movlw	255
 12162  0E45  00A2               	movwf	Button_Deviation_Update@deviation+1
 12163  0E46  3080               	movlw	128
 12164  0E47  00A1               	movwf	Button_Deviation_Update@deviation
 12165  0E48                     l3851:	
 12166                           
 12167                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12168  0E48  0821               	movf	Button_Deviation_Update@deviation,w
 12169  0E49  00F0               	movwf	??_Button_Deviation_Update
 12170  0E4A  0820               	movf	Button_Deviation_Update@button,w
 12171  0E4B  3E09               	addlw	9
 12172  0E4C  0086               	movwf	6
 12173  0E4D  3001               	movlw	1	; select bank2/3
 12174  0E4E  0087               	movwf	7
 12175  0E4F  0870               	movf	??_Button_Deviation_Update,w
 12176  0E50  0081               	movwf	1
 12177  0E51  0008               	return
 12178  0E52                     __end_of_Button_Deviation_Update:	
 12179                           
 12180                           	psect	text81
 12181  1656                     __ptext81:	
 12182 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12183 ;; Defined at:
 12184 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;  callback        2    0[COMMON] PTR FTN(enum E3069,)void
 12187 ;;		 -> myButtonPressedCallback(1), 
 12188 ;; Auto vars:     Size  Location     Type
 12189 ;;		None
 12190 ;; Return value:  Size  Location     Type
 12191 ;;                  1    wreg      void 
 12192 ;; Registers used:
 12193 ;;		wreg
 12194 ;; Tracked objects:
 12195 ;;		On entry : 0/0
 12196 ;;		On exit  : 0/0
 12197 ;;		Unchanged: 0/0
 12198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12199 ;;      Params:         2       0       0       0       0       0       0       0
 12200 ;;      Locals:         0       0       0       0       0       0       0       0
 12201 ;;      Temps:          0       0       0       0       0       0       0       0
 12202 ;;      Totals:         2       0       0       0       0       0       0       0
 12203 ;;Total ram usage:        2 bytes
 12204 ;; Hardware stack levels used:    1
 12205 ;; This function calls:
 12206 ;;		Nothing
 12207 ;; This function is called by:
 12208 ;;		_main
 12209 ;; This function uses a non-reentrant model
 12210 ;;
 12211                           
 12212                           
 12213                           ;psect for function _MTOUCH_Button_SetPressedCallback
 12214  1656                     _MTOUCH_Button_SetPressedCallback:	
 12215                           
 12216                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 12217                           
 12218                           ;incstack = 0
 12219                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 12220  1656  0871               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 12221  1657  0021               	movlb	1	; select bank1
 12222  1658  00A9               	movwf	(_callback_pressed+1)^(0+128)
 12223  1659  0870               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 12224  165A  00A8               	movwf	_callback_pressed^(0+128)
 12225  165B  0008               	return
 12226  165C                     __end_of_MTOUCH_Button_SetPressedCallback:	
 12227                           
 12228                           	psect	text82
 12229  1650                     __ptext82:	
 12230 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 12231 ;; Defined at:
 12232 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12233 ;; Parameters:    Size  Location     Type
 12234 ;;  callback        2    0[COMMON] PTR FTN(enum E3069,)void
 12235 ;;		 -> myButtonReleasedCallback(1), 
 12236 ;; Auto vars:     Size  Location     Type
 12237 ;;		None
 12238 ;; Return value:  Size  Location     Type
 12239 ;;                  1    wreg      void 
 12240 ;; Registers used:
 12241 ;;		wreg
 12242 ;; Tracked objects:
 12243 ;;		On entry : 0/0
 12244 ;;		On exit  : 0/0
 12245 ;;		Unchanged: 0/0
 12246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12247 ;;      Params:         2       0       0       0       0       0       0       0
 12248 ;;      Locals:         0       0       0       0       0       0       0       0
 12249 ;;      Temps:          0       0       0       0       0       0       0       0
 12250 ;;      Totals:         2       0       0       0       0       0       0       0
 12251 ;;Total ram usage:        2 bytes
 12252 ;; Hardware stack levels used:    1
 12253 ;; This function calls:
 12254 ;;		Nothing
 12255 ;; This function is called by:
 12256 ;;		_main
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260                           
 12261                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 12262  1650                     _MTOUCH_Button_SetNotPressedCallback:	
 12263                           
 12264                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 12265                           
 12266                           ;incstack = 0
 12267                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 12268  1650  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 12269  1651  0021               	movlb	1	; select bank1
 12270  1652  00A7               	movwf	(_callback_notPressed+1)^(0+128)
 12271  1653  0870               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 12272  1654  00A6               	movwf	_callback_notPressed^(0+128)
 12273  1655  0008               	return
 12274  1656                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 12275  007E                     btemp	set	126	;btemp
 12276  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    57
    Data        40
    BSS         103
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     15      80
    BANK2            80      0      80
    BANK3            80      0       4
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2239$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2239	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[20]), STR_5(CODE[20]), STR_4(CODE[6]), STR_3(CODE[5]), 
		 -> STR_2(CODE[20]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S1934_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[20]), STR_5(CODE[20]), STR_4(CODE[6]), STR_3(CODE[5]), 
		 -> STR_2(CODE[20]), STR_1(CODE[20]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[20]), STR_5(CODE[20]), STR_4(CODE[6]), STR_3(CODE[5]), 
		 -> STR_2(CODE[20]), STR_1(CODE[20]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK2[32]), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    S107$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK1[27]), 

    S107$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK1[27]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _abs->___aomod
    _MTOUCH_Button_Buttonmask_Get->_MTOUCH_Button_isPressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _main in BANK0

    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Button_Service->_Button_State_Initializing
    _Button_Service->_Button_State_NotPressed
    _Button_Service->_Button_State_Pressed
    _Button_State_Pressed->_Button_DefaultCallback
    _Button_State_Pressed->_myButtonReleasedCallback
    _Button_State_NotPressed->_Button_DefaultCallback
    _Button_State_NotPressed->_myButtonPressedCallback
    _myButtonPressedCallback->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->___aomod
    _pad->_fputs
    _abs->___aomod

Critical Paths under _main in BANK1

    _main->_MTOUCH_Service_Mainloop
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_NotPressed->_myButtonPressedCallback

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   37641
                                             13 BANK1      2     2      0
       _MTOUCH_Button_Buttonmask_Get
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                             _printf
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3261
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    2967
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    1756
                                              8 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    1688
                                              6 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     526
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1055
                                             10 COMMON     2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     328
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     294
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   27254
                                             12 BANK1      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              3 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   13488
                                             54 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   13420
                                             47 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              4 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   12296
                                             43 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1373
                                              7 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5270
                                             30 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    4882
                                             13 COMMON     1     0      1
                                             16 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              1 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1558
                                              7 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   13398
                                             10 BANK1      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   13330
                                              6 BANK1      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     504
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     526
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1038
                                             79 BANK0      1     0      1
                                              2 BANK1      2     2      0
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     106
                                             78 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    8276
                                             79 BANK0      1     0      1
                                              2 BANK1      2     2      0
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              3     2      1    7005
                                             78 BANK0      1     0      1
                                              0 BANK1      2     2      0
       _MTOUCH_Button_Buttonmask_Get
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6772
                                             70 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    6262
                                             62 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    5934
                                             46 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                30    22      8    4589
                                             16 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2510
                                              4 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     123
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1127
                                             10 COMMON     4     3      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     812
                                              2 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      44
                                              1 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     598
                                              3 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             19     3     16     448
                                              0 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             27    11     16     452
                                              0 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_Buttonmask_Get                         4     4      0     158
                                              2 COMMON     4     4      0
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Button_isPressed                              2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     659
                                              6 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     526
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                             78 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1092
                                             79 BANK0      1     0      1
                                              2 BANK1      4     4      0
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     634
                                              8 COMMON     5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0     823
                                             11 COMMON     1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0     746
                                              8 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     526
                                              4 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     482
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              0 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_Buttonmask_Get
     _MTOUCH_Button_isPressed
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _MTOUCH_Button_Buttonmask_Get
               _MTOUCH_Button_isPressed
             _printf
               _vfprintf
                 _vfpfcnvrt
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _putch
                           _EUSART_Write
                       _fputs
                         _fputc
                           _putch
                             _EUSART_Write
                       _strlen
                   _fputc
                     _putch
                       _EUSART_Write
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
                 ___aomod (ARG)
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
               ___aomod (ARG)
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
                   ___aomod (ARG)
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
                 ___aomod (ARG)
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
               ___aomod (ARG)
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     102       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      F      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       4      12        5.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     102      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jul 04 16:08:24 2019

                     Sensor_loadADCSettings@adc_index 0071                          ?_MTOUCH_Sensor_RawSample_Get 0074  
                                      ___bmul@product 0072                                           __CFG_CP$OFF 0000  
                             ?_Sensor_autoCalibration 0070                            __end_of_Sensor_setInactive 168E  
                           _Sensor_setCalibratAcqTime 16DB                                           __CFG_LVP$ON 0000  
                                                 l280 06D3                                                   l249 00D5  
                                                 l514 0202                                                   l285 06DC  
                                                 l278 06D8                                                   l295 0783  
                                                 l297 079A                                                   l752 0CFF  
                                                 l842 16AD                                                   l588 08B4  
                                                 l962 0B36                                                   l970 050C  
                                                 l971 0513                                                   l965 0B56  
                                                 l966 0B62                                                   l975 052E  
                                                 l976 0542                                                   l979 05D8  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _abs 0820                                                   _pad 0B1E  
                      ?_EUSART_SetFramingErrorHandler 0070                               ?_Sensor_loadADCSettings 0071  
                                     _TMR2_Initialize 16A4                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0071  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                      Sensor_getScanGroupIndex@sensor 0072                     __size_of_MTOUCH_Sensor_Initialize 0015  
                           ?_MTOUCH_Sensor_Initialize 0070                                                  l1111 04B4  
                                                ?_abs 0073                                                  l1124 03C1  
                                                l3001 083C                                                  l3003 0848  
                                                l3015 0B2C                                                  l3111 0526  
                                                l3041 0424                                                  l3025 0B38  
                                                l3121 056F                                                  l4001 0BAF  
                                                l3043 0428                                                  l3019 0B34  
                                                l3131 054A                                                  l3053 043F  
                                                l3037 03FD                                                  l3117 053D  
                                                l3221 02C3                                                  l3063 0487  
                                                l3055 044E                                                  l3143 05EC  
                                                l3215 02A2                                                  l3207 0268  
                                                l3231 02D4                                                  l3311 013F  
                                                l4023 17D6                                                  l4111 088F  
                                                l3065 0493                                                  l3153 0604  
                                                l3225 02C9                                                  l3313 0151  
                                                l3401 0668                                                  l3075 0321  
                                                l3139 05E4                                                  l4043 1713  
                                                l3163 09D5                                                  l3331 0E8D  
                                                l3307 012C                                                  l3093 0394  
                                                l3149 05F7                                                  l3165 09E4  
                                                l3333 0E91                                                  l3501 0741  
                                                l4029 17DF                                                  l3247 0882  
                                                l3087 0355                                                  l3095 03A0  
                                                l3079 0348                                                  l3351 0A09  
                                                l3175 09F7                                                  l3271 173F  
                                                l3431 066A                                                  l3407 0656  
                                                l3089 0364                                                  l3353 0A26  
                                                l3169 09E6                                                  l3281 16EE  
                                                l3513 0776                                                  l3363 1749  
                                                l3339 0EC0                                                  l3451 069F  
                                                l3435 0674                                                  l3419 065C  
                                                l3293 00D1                                                  l3541 079E  
                                                l3517 077B                                                  l3509 075C  
                                                l3461 06B1                                                  l3359 1743  
                                                l3711 0B0D                                                  l3703 0F26  
                                                l3721 0C37                                                  l3561 07D5  
                                                l3545 07A7                                                  l3633 0ACD  
                                                l4353 0FE7                                                  l4281 0CFD  
                                                l3731 0C5F                                                  l3723 0C3F  
                                                l3811 17BD                                                  l3555 07C3  
                                                l3627 0AC0                                                  l4355 0FEC  
                                                l3733 0C62                                                  l3717 0C30  
                                                l3549 07AF                                                  l3485 06E0  
                                                l3477 06CB                                                  l3397 064E  
                                                l3389 063A                                                  l3629 0AC2  
                                                ?_pad 0024                                                  l3399 0654  
                                                l3671 00A8                                                  l3497 0726  
                                                l3665 006B                                                  l3657 0066  
                                                l3649 0050                                                  l3921 085C  
                                                l4297 0D31                                                  l3851 0E48  
                                                l2971 16B2                                                  l3667 007E  
                                                l3763 0BDB                                                  l3907 1704  
                                                l3845 0E2C                                                  l3589 081D  
                                                l2981 0A38                                                  l3781 0C16  
                                                l3773 0BF6                                                  l3757 0BD3  
                                                l3829 0984                                                  l3847 0E34  
                                                l3839 16D7                                                  l3599 08A2  
                                                l3943 17EB                                                  l2985 0A5B  
                                                l3857 0C97                                                  l3873 01B7  
                                                l3785 0C1F                                                  l3777 0C06  
                                                l3769 0BEE                                                  l3953 0F98  
                                                l2995 08E4                                                  l3859 0C9C  
                                                l3963 0FB8                                                  l3879 01F9  
                                                l3799 091F                                                  l3959 0FA8  
                                                l3975 0FDA                                                  l3889 0D85  
                                                l3969 0FC9                                                  l3977 0FFD  
                                                STR_1 1800                                                  STR_2 1800  
                                                STR_3 181F                                                  STR_4 1814  
                                                STR_5 1800                                                  STR_6 1800  
                       ?_Button_Reading_Update_Helper 0070                                                  _LATA 010C  
                                                _LATB 010D                                                  _LATC 010E  
                                                u2315 0B42                                                  u2405 0474  
                                                u2255 0A59                                                  u2505 0382  
                                                u2370 042F                                                  u2540 04E2  
                                                u2285 0829                                                  u2550 04E3  
                                                u3520 0C2E                                                  u2625 05E2  
                                                u3354 08AE                                                  u3355 08AD  
                                                u3435 0088                                                  u2645 055E  
                                                u3455 0A68                                                  u2655 056A  
                                                u3465 09C8                                                  u2905 0E7B  
                                                u3730 0E13                                                  u2595 051E  
                                                u3725 0DDB                                                  u3485 0EEE  
                                                u2925 0EB2                                                  u2790 0880  
                                                u3735 0E0F                                                  u3495 0F34  
                                                u3815 01D1                                                  u2785 0871  
                                                u2875 0165                                                  u3915 17EE  
                                                u2895 0E71                                                  u3785 0CC8  
                                                u3975 0B73                            Button_State_Pressed@button 006F  
                                                _TMR2 001A                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01CB  
                            _Sensor_getScanGroupIndex 09D3                             ?_Sensor_Acq_ExecutePacket 007D  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 1633  
                                                abs@a 0073                                                  _dbuf 0150  
                                                _main 0CEA                                                  _dtoa 04C6  
                __size_of_MTOUCH_Button_InitializeAll 001A                                                  _prec 00D0  
                                                _nout 00CC                                                  pad@i 0028  
                                                pad@p 0025                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 002A  
                __size_of_MTOUCH_Sensor_InitializeAll 000E                                                  btemp 007E  
                                                start 0002                                     ___bmul@multiplier 0073  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                  MTOUCH_Button_Buttonmask_Get@output 0074                        __end_of_Sensor_autoCalibration 0EDC  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 181F          Sensor_Scanfrequency_Evaluation@frequency_hop 181A  
                            _myButtonReleasedCallback 163E                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 001B                         __size_of_Button_State_Pressed 0073  
                                               ??_abs 0075                                                 ??_pad 0027  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 007A  
                       ??_MTOUCH_Sensor_RawSample_Get 0076                         Sensor_RawSample_Update@sensor 0076  
                       myButtonPressedCallback@button 006E                             __size_of_Sensor_isEnabled 0010  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 1674     Sensor_Scanfrequency_Evaluation@best_packet_sample 0046  
                 __end_of_Sensor_isCalibratingAcqTime 16A4                           _Sensor_isCalibratingAcqTime 169C  
                                     __end_of___aodiv 04C6                                                 ?_main 0070  
                                               ?_dtoa 0030                                       __end_of___aomod 03D3  
                      __end_of_Sensor_loadADCSettings 0172                                                 _T2CON 001C  
                             __size_of_Button_Service 0057                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 004E  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0070                       __size_of_Sensor_DefaultCallback 0001  
                                               _flags 00D2                               __size_of_Sensor_Service 0095  
               __end_of_MTOUCH_Sensor_Scan_Initialize 1731                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 1721                                        _WDT_Initialize 1642  
                             Sensor_setSampled@sensor 0070                                                 _count 00D4  
                                               _fputc 0A2F                                                 _fputs 08E0  
                                               _value 00DB                                                 pad@fp 002C  
                                               _width 00CE                                                 _putch 1646  
                    __size_of_Button_State_NotPressed 00B5                                                 dtoa@d 0030  
                                               dtoa@i 004C                                                 dtoa@n 0044  
                                               dtoa@p 003D                                                 dtoa@s 0042  
                                               dtoa@w 0040                                                 pclath 000A  
                                _Sensor_Sampled_Reset 1695                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 1635  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0007  
                              Sensor_isEnabled@sensor 0071                                       __initialization 07E2  
                                        __end_of_main 0D58                                          __end_of_dtoa 0617  
                                _Sensor_setCalibrated 16B6                                        ??_EUSART_Write 0070  
                             __end_of_TMR2_Initialize 16AC                                        __CFG_LPBOR$OFF 0000  
                    __end_of_MTOUCH_Button_Initialize 0A9A                                                ??_main 00EC  
                                              ??_dtoa 0038                               _MTOUCH_Sensor_Calibrate 1752  
                           Sensor_Service@sensor_adc1 0054                             Sensor_Service@sensor_adc2 0055  
                             ??_Button_Reading_Update 007B                  MTOUCH_Sensor_Sampled_ResetAll@sensor 0072  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 1646  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0076  
                   _EUSART_DefaultFramingErrorHandler 0000                            _EUSART_OverrunErrorHandler 01A2  
                __size_of_MTOUCH_Sensor_RawSample_Get 0017                                                ?_fputc 0072  
                                              ?_fputs 007A                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0070  
                                              _ANSELB 018D                                                _ANSELC 018E  
                                              _BORCON 0116                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                u234lld 03FB  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              u245lld 031F                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 007B                        ??_Button_Reading_Update_Helper 0078  
                              _Button_DefaultCallback 1632                       __end_of_MTOUCH_Service_Mainloop 08A0  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 0800  
                              _Sensor_DefaultCallback 0004                                          vfprintf@cfmt 0064  
                                       _packet_sample 00C8                                                ___bmul 1741  
                               ?_Sensor_setCalibrated 0070                                             ??___aodiv 0070  
                                           ??___aomod 0070                          Sensor_DefaultCallback@sensor 0070  
                                      __CFG_STVREN$ON 0000                      __size_of_myButtonPressedCallback 005E  
                                              _memcpy 097B                      __end_of_MTOUCH_Button_ServiceAll 1721  
                                              _printf 1763                                                pad@buf 0024  
                        Sensor_autoCalibration@sensor 007C                                                dtoa@fp 003F  
                                              _strlen 0837                                                fputc@c 0072  
                                              fputs@c 0020                                                fputs@i 0021  
                                              fputs@s 0023                               _MTOUCH_Sensor_SampleAll 17D4  
                        Button_DefaultCallback@button 006E                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 0C21                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 0A2F                   Sensor_postAcquisitionProcess@sensor 007B  
                             __end_of_TMR2_StartTimer 1638                    __size_of_Sensor_setCalibratAcqTime 000D  
            __end_of_MTOUCH_Button_SetPressedCallback 165C             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0072                     ?_MTOUCH_Button_SetPressedCallback 0070  
                    _MTOUCH_Button_SetPressedCallback 1656                              __size_of_Sensor_isActive 000D  
                     MTOUCH_Sensor_RawSample_Get@name 0077                   Sensor_getScanGroupIndex@sensorGroup 0073  
                                   _SYSTEM_Initialize 1785                               __end_of__initialization 07FD  
                 __size_of_Button_Baseline_Initialize 002D                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0077                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00A0                            __end_of_Button_Tick_helper 0953  
                       MTOUCH_Sensor_Calibrate@sensor 0075           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0034  
                                 ___bmul@multiplicand 0070                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 0869                                          __pidataBANK1 0953  
         __end_of_MTOUCH_Button_SetNotPressedCallback 1656          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0072                  ?_MTOUCH_Button_SetNotPressedCallback 0070  
                 _MTOUCH_Button_SetNotPressedCallback 1650                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 1800                                         __end_of_fputc 0A64  
                                       __end_of_fputs 0906                      __end_of_MTOUCH_Sensor_Initialize 17D4  
                                       __end_of_putch 164B                             ??_MTOUCH_Sensor_Calibrate 0074  
                                    _Sensor_isEnabled 1731                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0E52                              Sensor_setInactive@sensor 0070  
                                      _Button_Service 0B6E                      __end_of_Sensor_Acq_ExecutePacket 07E2  
                          ?_Button_State_Initializing 006F                                  Button_Service@button 00E8  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0070  
                          ??_Sensor_getScanGroupIndex 0070                        __end_of_Button_Baseline_Update 0F6B  
                 Sensor_Acq_ExecutePacket@sensor_adc1 003D                   Sensor_Acq_ExecutePacket@sensor_adc2 007D  
                            _MTOUCH_Button_Initialize 0A64                       ??_EUSART_SetOverrunErrorHandler 0072  
                                      _Sensor_Service 0F6B                               _Button_State_NotPressed 0172  
                       __size_of_MTOUCH_Sensor_Enable 0011                                    _Sensor_setInactive 1687  
                                   _sensor_scan_group 1824                                               ??_fputc 0075  
                           __end_of_SYSTEM_Initialize 1797                                     _lowpowerActivated 00DD  
                                             ??_fputs 007B                      MTOUCH_Sensor_isCalibrated@sensor 0075  
                              ??_Sensor_Sampled_Reset 0070                                               ??_putch 0071  
                                          __pbssBANK1 00C8                                            __pbssBANK2 0120  
                                __end_of_EUSART_Write 16B6                               _TMR2_LoadPeriodRegister 164B  
                          ??_myButtonReleasedCallback 007E                          Sensor_loadADCSettings@sensor 0078  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 1680  
                          __end_of_mtouch_button_init 1030           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0035  
                              ??_Sensor_setCalibrated 0070                                            __pmaintext 0CEA  
                                             ?___bmul 0070                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0075                                __end_of_Button_Service 0BC5  
                                             ?_memcpy 0070                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 0869  
                         _MTOUCH_Button_InitializeAll 084F                                             _AD2ACQCON 0797  
                 __end_of_MTOUCH_Sensor_InitializeAll 1711                           _MTOUCH_Sensor_InitializeAll 1703  
                           ??_MTOUCH_Sensor_SampleAll 0056                                               ?_printf 0066  
                     __end_of_Sensor_RawSample_Update 092C                                  ??_Sensor_setInactive 0070  
                                             ?_strlen 0070                     __size_of_MTOUCH_Sensor_wasSampled 000E  
                           ?_MTOUCH_Sensor_wasSampled 0070                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0070                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 0CEA                                __end_of_Sensor_Service 1000  
                             Sensor_Service@scanGroup 0052                              _MTOUCH_Button_ServiceAll 1711  
                           __end_of_sensor_scan_group 1828                                    __size_of_vfpfcnvrt 00D0  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 0DCB  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0072  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 007C  
                     Sensor_setCalibratAcqTime@sensor 0070                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0077                  __size_of_Sensor_isCalibratingAcqTime 0008  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0031                             ??_MTOUCH_Button_isPressed 0070  
                                   ??_Sensor_isActive 0070                         MTOUCH_Button_Buttonmask_Get@i 0075  
               __end_of_Sensor_postAcquisitionProcess 0AD1                __size_of_Sensor_postAcquisitionProcess 0037  
                       _Sensor_postAcquisitionProcess 0A9A                               _myButtonPressedCallback 0C21  
                             Sensor_Acquisition@retry 004D                                       __size_of___bmul 0011  
                                             ___aodiv 03D3                                           _AD1CON0bits 0711  
                                             ___aomod 02F7                        MTOUCH_Button_Initialize@button 0079  
                                         _AD2CON0bits 0791                                             ?_vfprintf 005E  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0043  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 003E                                       __size_of_memcpy 002B  
                                             __ptext1 1785                                               __ptext2 1642  
                                             __ptext3 16A4                                               __ptext4 0005  
                                             __ptext5 166E                                               __ptext6 16C2  
                                             __ptext7 1703                                               __ptext8 17BF  
                                             __ptext9 1774                                       __size_of_printf 0011  
                         Button_Reading_Update@button 007B                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 17BF                                 _OSCILLATOR_Initialize 166E  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 00E1  
                                     ?_Sensor_Service 0070                              ??_PIN_MANAGER_Initialize 0070  
                      __size_of_Button_Reading_Update 000D                           __size_of_MTOUCH_needReburst 0002  
                       __end_of_Button_Reading_Update 16DB                     MTOUCH_Sensor_InitializeAll@sensor 0079  
                            _Sensor_Acq_ExecutePacket 0617                                      _callback_sampled 00AA  
                           ??_TMR2_LoadPeriodRegister 0070                       Sensor_RawSample_Update@adcIndex 0075  
                          __size_of_SYSTEM_Initialize 0012                                               clrloop0 1675  
                                    _callback_pressed 00A8                        MTOUCH_Sensor_Initialize@sensor 0077  
                                end_of_initialization 07FD                               ?_Button_DefaultCallback 006E  
               __end_of_EUSART_SetOverrunErrorHandler 166E                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 1668                                               memcpy@d 0079  
                                             memcpy@n 0072                                               memcpy@s 0075  
                                             fputc@fp 0074                                               init_ram 167A  
                                             fputs@fp 007A                                               initloop 167B  
                             ?_Sensor_DefaultCallback 0070                         Sensor_Acquisition@sensor_adc1 004E  
                       Sensor_Acquisition@sensor_adc2 004B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 08BE                          ??_MTOUCH_Sensor_isCalibrated 0074  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 02F7  
                 __end_of_MTOUCH_Sensor_RawSample_Get 0820                           _MTOUCH_Sensor_RawSample_Get 0809  
                                           _RCSTAbits 019D                                            ??_vfprintf 0061  
                                             strlen@a 0073                                               strlen@s 0074  
                                 ??_EUSART_Initialize 0072                                      ??_WDT_Initialize 0070  
                              Sensor_setActive@sensor 0070                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0044                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0032                                 __size_of_EUSART_Write 000A  
            MTOUCH_Button_SetPressedCallback@callback 0070                            MTOUCH_Sensor_Enable@sensor 0075  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0033                                   _callback_notPressed 00A6  
                 __size_of_MTOUCH_Sensor_isCalibrated 0015                        __end_of_Button_DefaultCallback 1633  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0041  
                                  _sensor_globalFlags 00DC                              __end_of_Sensor_isEnabled 1741  
                          Sensor_setCalibrated@sensor 0070                        __end_of_Sensor_DefaultCallback 0005  
                    __end_of_myButtonReleasedCallback 1642                             __end_of_EUSART_Initialize 08E0  
                            ??_Sensor_autoCalibration 0077                            _Sensor_loadADCSettings$554 0075  
                                           _TXSTAbits 019E                             ??_myButtonPressedCallback 00DF  
                    __size_of_Sensor_RawSample_Update 0026                                    _Sensor_Acquisition 0BC5  
                                          _user_touch 00D6                              ??_Sensor_loadADCSettings 0072  
                                _Button_State_Pressed 0D58                                        __end_of___bmul 1752  
                          _EUSART_DefaultErrorHandler 0000                                   ?_Sensor_Acquisition 004B  
                                         vfpfcnvrt@ap 004F                                           vfpfcnvrt@fp 005D  
                                         vfpfcnvrt@ll 0055                            ??_MTOUCH_Button_Initialize 0076  
         MTOUCH_Button_SetNotPressedCallback@callback 0070                       ??_MTOUCH_Sensor_Scan_Initialize 0070  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 16AC  
                                  _Button_Tick_helper 092C                                        __end_of_memcpy 09A6  
                              ?_OSCILLATOR_Initialize 0070                                   MTOUCH_Button_Tick@i 0074  
                            __end_of_Sensor_setActive 1687                      TMR2_LoadPeriodRegister@periodVal 0070  
                                      __end_of_printf 1774                           ??_Button_State_Initializing 00E1  
                                      __end_of_strlen 084F                                   start_initialization 07E2  
                             _MTOUCH_Service_Mainloop 0884                       __size_of_PIN_MANAGER_Initialize 001C  
                                  _MTOUCH_Button_Tick 17EA                                   ?_Button_Tick_helper 0070  
                                         __end_of_abs 0837                                           __end_of_pad 0B6E  
                                      _TMR2_StopTimer 1638                                           putch@txData 0071  
                                ??_Sensor_Acquisition 004C                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 006F                        Sensor_autoCalibration@adcIndex 007B  
                      ?_EUSART_SetOverrunErrorHandler 0070                      __end_of_MTOUCH_Sensor_wasSampled 1703  
                                ??_Button_Tick_helper 0070                          __end_of_MTOUCH_Sensor_Enable 1785  
                                         vfprintf@fmt 005E                                          _packet_noise 00D8  
                          _EUSART_FramingErrorHandler 00EE                                              ??___bmul 0071  
                               ?_Button_State_Pressed 006F                                _EUSART_SetErrorHandler 165C  
                          ??_MTOUCH_Button_ServiceAll 00E9                                           __pdataBANK1 00A0  
                                            ??_memcpy 0074                           __end_of_Sensor_isCalibrated 0809  
                        ??_Button_Baseline_Initialize 0078                                         _sample_period 00AC  
                                ??_MTOUCH_Button_Tick 0073                                    _mtouch_button_init 1000  
                          Sensor_Sampled_Reset@sensor 0070                                              ??_printf 006A  
                                            ??_strlen 0072                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 0C7F                                __end_of_TMR2_StopTimer 163B  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00DF                                      ___aodiv@dividend 0028  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 16E8  
                      MTOUCH_Button_ServiceAll@button 00EA                                   Sensor_Service@error 0053  
                       __size_of_Sensor_Sampled_Reset 0007                            __size_of_EUSART_Initialize 0022  
                             _Button_Deviation_Update 0DCB                            ?_Sensor_setCalibratAcqTime 0070  
                           _Button_State_Initializing 0C7F                    __end_of_MTOUCH_Sensor_isCalibrated 17BF  
                          _MTOUCH_Sensor_isCalibrated 17AA                                             __pnvBANK1 00EE  
                                           __pnvBANK3 01A0                       __size_of_Sensor_autoCalibration 008A  
                   __size_of_Sensor_getScanGroupIndex 002D                                     _Sensor_setSampled 168E  
                           ?_Sensor_getScanGroupIndex 0070                                _PIN_MANAGER_Initialize 0005  
                                    ??_Button_Service 00E5                                             _dtoa$1628 003B  
                            ?_MTOUCH_Sensor_Calibrate 0070                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007A                            ??_MTOUCH_Sensor_Initialize 0076  
                                            ?___aodiv 0020                         __size_of_Sensor_setCalibrated 000C  
                                            ?___aomod 0020                                      ___aodiv@quotient 0073  
                     __size_of_Sensor_loadADCSettings 00AB                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                              _AAD2RES0 079A  
                                    ??_Sensor_Service 004F                            ??_Sensor_Acq_ExecutePacket 0030  
                                 ??_Sensor_setSampled 0070                     __size_of_myButtonReleasedCallback 0004  
                           ?_myButtonReleasedCallback 006E                             ??_MTOUCH_Service_Mainloop 00EB  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                         __size_of_Sensor_setInactive 0007                        Sensor_Acq_ExecutePacket@last_a 0037  
                      Sensor_Acq_ExecutePacket@last_b 0039                  __end_of_MTOUCH_Button_Buttonmask_Get 08BE  
               __size_of_MTOUCH_Button_Buttonmask_Get 001E                          _MTOUCH_Button_Buttonmask_Get 08A0  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0070  
                                       ??_MTOUCH_Tick 0075                                      __CFG_WDTE$SWDTEN 0000  
                                      __size_of_fputc 0035                                        __size_of_fputs 0026  
                                      __size_of_putch 0005                             __end_of_Sensor_setSampled 1695  
              EUSART_SetErrorHandler@interruptHandler 0070                               _Sensor_RawSample_Update 0906  
                   __end_of_Sensor_setCalibratAcqTime 16E8                                             clear_ram0 1674  
                                   _eusartRxLastError 00DA                              __size_of_TMR2_StartTimer 0003  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0072  
              Sensor_Acq_ExecutePacket@packet_counter 003C                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 00E1                __end_of_MTOUCH_Sensor_Sampled_ResetAll 17AA  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                        _MTOUCH_Sensor_Sampled_ResetAll 1797  
                            ?_MTOUCH_Sensor_SampleAll 0070                     _EUSART_DefaultOverrunErrorHandler 0000  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0036                              _MTOUCH_Sensor_wasSampled 16F5  
                                  _mtouch_time_toScan 00DE                                             _vfpfcnvrt 0227  
                            ??_Button_Baseline_Update 0070                               __end_of_Sensor_isActive 16F5  
                              _Sensor_autoCalibration 0E52                            __end_of_MTOUCH_needReburst 1635  
                      myButtonReleasedCallback@button 006E                         ?_MTOUCH_Button_Buttonmask_Get 0070  
                              _Sensor_loadADCSettings 00C7                                  _MTOUCH_Sensor_Enable 1774  
                            Button_Tick_helper@button 0072                             ??_Button_Deviation_Update 0070  
                               _Button_Reading_Update 16CE                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                     ??_TMR2_Initialize 0070  
                                 __end_of_MTOUCH_Tick 163E                                     _MTOUCH_Initialize 16C2  
                     __end_of_MTOUCH_Sensor_Calibrate 1763                                    ??_Sensor_isEnabled 0070  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0078  
                                           memcpy@tmp 0077                                            vfprintf@ap 0060  
                                          vfprintf@fp 0063                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0070                    __end_of_Button_Baseline_Initialize 09D3  
                          _Button_Baseline_Initialize 09A6                                   _EUSART_ErrorHandler 01A0  
                                    __size_of___aodiv 00F3                                      __size_of___aomod 00DC  
                                 ??_MTOUCH_Initialize 007C                                            ?_vfpfcnvrt 004E  
                            ?_Button_State_NotPressed 006F                                       ___aodiv@divisor 0020  
                                     ___aodiv@counter 0071                                    Button_Service@name 00E7  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0070                  Sensor_Scanfrequency_Evaluation@retry 0045  
                                  ??_Sensor_setActive 0070                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 084F                                              __ptext11 097B  
                                            __ptext20 092C                                              __ptext12 08BE  
                                            __ptext21 1797                                              __ptext13 1668  
                                            __ptext30 1687                                              __ptext22 1695  
                                            __ptext14 1662                                              __ptext31 1680  
                                            __ptext23 17D4                                              __ptext15 165C  
                                            __ptext40 16E8                                              __ptext32 0021  
                                            __ptext24 0F6B                                              __ptext16 0884  
                                            __ptext41 0E52                                              __ptext33 0617  
                                            __ptext25 168E                                              __ptext17 1633  
                                            __ptext50 17AA                                              __ptext42 16B6  
                                            __ptext34 1638                                              __ptext26 0906  
                                            __ptext18 163B                                              __ptext51 0172  
                                            __ptext43 16DB                                              __ptext35 1635  
                                            __ptext27 0004                                              __ptext19 17EA  
                                            __ptext60 04C6                                              __ptext52 0C7F  
                                            __ptext44 169C                                              __ptext36 164B  
                                            __ptext28 0BC5                                              __ptext61 0B1E  
                                            __ptext53 0D58                                              __ptext45 09D3  
                                            __ptext37 00C7                                              __ptext29 0A9A  
                                            __ptext70 08A0                                              __ptext62 0837  
                                            __ptext54 0C21                                              __ptext46 1721  
                                            __ptext38 0800                                              __ptext71 0869  
                                            __ptext63 08E0                                              __ptext55 1632  
                                            __ptext47 1711                                              __ptext39 1731  
                                            __ptext80 0DCB                                              __ptext72 0A64  
                                            __ptext64 0A2F                                              __ptext56 163E  
                                            __ptext48 0B6E                                              __ptext81 1656  
                                            __ptext73 1752                                              __ptext65 1646  
                                            __ptext57 1763                                              __ptext49 16F5  
                                            __ptext82 1650                                              __ptext74 0EDC  
                                            __ptext66 16AC                                              __ptext58 0A00  
                                            __ptext75 09A6                                              __ptext67 0820  
                                            __ptext59 0227                                              __ptext76 16CE  
                                            __ptext68 02F7                                              __ptext77 0AD1  
                                            __ptext69 03D3                                              __ptext78 0809  
                                            __ptext79 1741                             __end_of_MTOUCH_Initialize 16CE  
                           ??_Sensor_RawSample_Update 0074                            __size_of_Sensor_setSampled 0007  
                                       __size_of_main 006E                                         __size_of_dtoa 0151  
                     __end_of_MTOUCH_Sensor_SampleAll 17EA                      Sensor_Scanfrequency_Evaluation@i 004A  
                             ?_EUSART_SetErrorHandler 0070         EUSART_SetOverrunErrorHandler@interruptHandler 0070  
                                            _vfprintf 0A00                    __size_of_Button_State_Initializing 006B  
                                   ??_TMR2_StartTimer 0070                                             printf@fmt 0066  
               __end_of_EUSART_SetFramingErrorHandler 1668                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 1662                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 0057  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ___aomod@dividend 0028  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 0120  
                                          _INTCONbits 000B                                         _mtouch_sensor 00AD  
                                            memcpy@d1 0078                                              memcpy@s1 0070  
                     __end_of_MTOUCH_Button_isPressed 0884                      __end_of_Sensor_getScanGroupIndex 0A00  
                                   __CFG_BOREN$NSLEEP 0000                                           _MTOUCH_Tick 163B  
                              ?_Button_Reading_Update 0070                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0078  
                   __size_of_MTOUCH_Button_Initialize 0036                             ?_MTOUCH_Button_Initialize 0070  
                         __size_of_Sensor_Acquisition 005C                        ??_MTOUCH_Button_Buttonmask_Get 0072  
                            ?_myButtonPressedCallback 006E               __end_of_Sensor_Scanfrequency_Evaluation 00C7  
            __size_of_Sensor_Scanfrequency_Evaluation 00A6                     ??_Sensor_Scanfrequency_Evaluation 003F  
                    ?_Sensor_Scanfrequency_Evaluation 003E                       _Sensor_Scanfrequency_Evaluation 0021  
                             ?_PIN_MANAGER_Initialize 0070                           ??_Sensor_setCalibratAcqTime 0070  
                      __end_of_EUSART_SetErrorHandler 1662                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                           __size_of_Button_Tick_helper 0027  
                     __end_of_Button_State_NotPressed 0227                                              printf@ap 006D  
       EUSART_SetFramingErrorHandler@interruptHandler 0070                                       ___aomod@divisor 0020  
                        __end_of_Sensor_Sampled_Reset 169C                                           ??_vfpfcnvrt 0050  
                                    ??_TMR2_StopTimer 0070                                       ___aomod@counter 0071  
                     __end_of_TMR2_LoadPeriodRegister 1650                           __size_of_MTOUCH_Button_Tick 0016  
                                       __pstringtext1 181A                                         __pstringtext2 1824  
                                       __pstringtext3 1000                                         __pstringtext4 1800  
                                       __pstringtext5 1814                                         __pstringtext6 181F  
                                       __pstringtext7 0000                         ??_MTOUCH_Button_InitializeAll 007A  
                            ??_Button_DefaultCallback 007E                         ??_MTOUCH_Sensor_InitializeAll 0078  
                Sensor_Acq_ExecutePacket@activeSensor 003B                      __size_of_MTOUCH_Sensor_Calibrate 0011  
                              ??_MTOUCH_Sensor_Enable 0074                     Sensor_isCalibratingAcqTime@sensor 0070  
                        __size_of_Sensor_isCalibrated 0009                              ??_Sensor_DefaultCallback 0071  
                        __end_of_Sensor_setCalibrated 16C2                  __end_of_Button_Reading_Update_Helper 0B1E  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 0AD1  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 006F                                    EUSART_Write@txData 0070  
                                        ___aodiv@sign 0072                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 0021                                _Button_Baseline_Update 0EDC  
                         MTOUCH_Button_isPressed@name 0071                            ??_MTOUCH_Sensor_wasSampled 0074  
                                        ___aomod@sign 0072  
