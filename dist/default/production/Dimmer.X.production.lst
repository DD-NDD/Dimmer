

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jul 04 14:48:04 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	stringtext12,global,class=STRCODE,delta=2
    21                           	psect	stringtext13,global,class=STRCODE,delta=2
    22                           	psect	stringtext14,global,class=STRCODE,delta=2
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    30                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    31                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	clrtext,global,class=CODE,delta=2
    34                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text46,local,class=CODE,merge=1,delta=2
    85                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text48,local,class=CODE,merge=1,delta=2
    87                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text52,local,class=CODE,merge=1,delta=2
    91                           	psect	text53,local,class=CODE,merge=1,delta=2
    92                           	psect	text54,local,class=CODE,merge=1,delta=2
    93                           	psect	text55,local,class=CODE,merge=1,delta=2
    94                           	psect	text56,local,class=CODE,merge=1,delta=2
    95                           	psect	text57,local,class=CODE,merge=1,delta=2
    96                           	psect	text58,local,class=CODE,merge=1,delta=2
    97                           	psect	text59,local,class=CODE,merge=1,delta=2
    98                           	psect	text60,local,class=CODE,merge=1,delta=2
    99                           	psect	text61,local,class=CODE,merge=1,delta=2
   100                           	psect	text62,local,class=CODE,merge=1,delta=2
   101                           	psect	text63,local,class=CODE,merge=1,delta=2
   102                           	psect	text64,local,class=CODE,merge=1,delta=2
   103                           	psect	text65,local,class=CODE,merge=1,delta=2
   104                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
   105                           	psect	text67,local,class=CODE,merge=1,delta=2
   106                           	psect	text68,local,class=CODE,merge=1,delta=2
   107                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
   108                           	psect	text70,local,class=CODE,merge=1,delta=2
   109                           	psect	text71,local,class=CODE,merge=1,delta=2
   110                           	psect	text72,local,class=CODE,merge=1,delta=2,group=2
   111                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   112                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   113                           	psect	text75,local,class=CODE,merge=1,delta=2
   114                           	psect	text76,local,class=CODE,merge=1,delta=2
   115                           	psect	text77,local,class=CODE,merge=1,delta=2,group=2
   116                           	psect	text78,local,class=CODE,merge=1,delta=2,group=1
   117                           	psect	text79,local,class=CODE,merge=1,delta=2,group=1
   118                           	psect	text80,local,class=CODE,merge=1,delta=2
   119                           	psect	text81,local,class=CODE,merge=1,delta=2
   120                           	psect	text82,local,class=CODE,merge=1,delta=2
   121                           	psect	text83,local,class=CODE,merge=1,delta=2
   122                           	psect	text84,local,class=CODE,merge=1,delta=2
   123                           	psect	text85,local,class=CODE,merge=1,delta=2
   124                           	psect	text86,local,class=CODE,merge=1,delta=2
   125                           	psect	text87,local,class=CODE,merge=1,delta=2
   126                           	psect	text88,local,class=CODE,merge=1,delta=2
   127                           	psect	text89,local,class=CODE,merge=1,delta=2,group=1
   128                           	psect	text90,local,class=CODE,merge=1,delta=2
   129                           	psect	text91,local,class=CODE,merge=1,delta=2
   130                           	psect	text92,local,class=CODE,merge=1,delta=2
   131                           	psect	intentry,global,class=CODE,delta=2
   132                           	psect	text94,local,class=CODE,merge=1,delta=2
   133                           	psect	text95,local,class=CODE,merge=1,delta=2
   134                           	psect	text96,local,class=CODE,merge=1,delta=2
   135                           	psect	text97,local,class=CODE,merge=1,delta=2
   136                           	psect	text98,local,class=CODE,merge=1,delta=2
   137                           	psect	text99,local,class=CODE,merge=1,delta=2
   138                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text101,local,class=CODE,merge=1,delta=2
   140                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text103,local,class=CODE,merge=1,delta=2
   142                           	psect	text104,local,class=CODE,merge=1,delta=2
   143                           	psect	text105,local,class=CODE,merge=1,delta=2
   144                           	psect	text106,local,class=CODE,merge=1,delta=2
   145                           	psect	text107,local,class=CODE,merge=1,delta=2
   146                           	psect	text108,local,class=CODE,merge=1,delta=2
   147                           	psect	text109,local,class=CODE,merge=1,delta=2
   148                           	psect	text110,local,class=CODE,merge=1,delta=2
   149                           	psect	text111,local,class=CODE,merge=1,delta=2
   150                           	dabs	1,0x7E,2
   151  0000                     
   152                           ; Version 2.05
   153                           ; Generated 20/12/2018 GMT
   154                           ; 
   155                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   156                           ; All rights reserved.
   157                           ; 
   158                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   159                           ; 
   160                           ; Redistribution and use in source and binary forms, with or without modification, are
   161                           ; permitted provided that the following conditions are met:
   162                           ; 
   163                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   164                           ;        conditions and the following disclaimer.
   165                           ; 
   166                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   167                           ;        of conditions and the following disclaimer in the documentation and/or other
   168                           ;        materials provided with the distribution.
   169                           ; 
   170                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   171                           ;        software without specific prior written permission.
   172                           ; 
   173                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   174                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   175                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   176                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   177                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   178                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   179                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   180                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   181                           ; 
   182                           ; 
   183                           ; Code-generator required, PIC16LF1559 Definitions
   184                           ; 
   185                           ; SFR Addresses
   186  0000                     	;# 
   187  0001                     	;# 
   188  0002                     	;# 
   189  0003                     	;# 
   190  0004                     	;# 
   191  0005                     	;# 
   192  0006                     	;# 
   193  0007                     	;# 
   194  0008                     	;# 
   195  0009                     	;# 
   196  000A                     	;# 
   197  000B                     	;# 
   198  000C                     	;# 
   199  000D                     	;# 
   200  000E                     	;# 
   201  0011                     	;# 
   202  0012                     	;# 
   203  0015                     	;# 
   204  0016                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001C                     	;# 
   212  008C                     	;# 
   213  008D                     	;# 
   214  008E                     	;# 
   215  0091                     	;# 
   216  0092                     	;# 
   217  0095                     	;# 
   218  0096                     	;# 
   219  0097                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009B                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  0116                     	;# 
   232  0117                     	;# 
   233  011D                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  018E                     	;# 
   237  0191                     	;# 
   238  0191                     	;# 
   239  0192                     	;# 
   240  0193                     	;# 
   241  0193                     	;# 
   242  0194                     	;# 
   243  0195                     	;# 
   244  0196                     	;# 
   245  0199                     	;# 
   246  019A                     	;# 
   247  019B                     	;# 
   248  019B                     	;# 
   249  019C                     	;# 
   250  019D                     	;# 
   251  019E                     	;# 
   252  019F                     	;# 
   253  020C                     	;# 
   254  020D                     	;# 
   255  0211                     	;# 
   256  0211                     	;# 
   257  0212                     	;# 
   258  0212                     	;# 
   259  0213                     	;# 
   260  0213                     	;# 
   261  0214                     	;# 
   262  0214                     	;# 
   263  0215                     	;# 
   264  0215                     	;# 
   265  0215                     	;# 
   266  0216                     	;# 
   267  0216                     	;# 
   268  0217                     	;# 
   269  0217                     	;# 
   270  0391                     	;# 
   271  0392                     	;# 
   272  0393                     	;# 
   273  0394                     	;# 
   274  0395                     	;# 
   275  0396                     	;# 
   276  0611                     	;# 
   277  0612                     	;# 
   278  0613                     	;# 
   279  0613                     	;# 
   280  0614                     	;# 
   281  0615                     	;# 
   282  0616                     	;# 
   283  0616                     	;# 
   284  0711                     	;# 
   285  0711                     	;# 
   286  0711                     	;# 
   287  0712                     	;# 
   288  0712                     	;# 
   289  0713                     	;# 
   290  0713                     	;# 
   291  0713                     	;# 
   292  0714                     	;# 
   293  0714                     	;# 
   294  0714                     	;# 
   295  0715                     	;# 
   296  0715                     	;# 
   297  0716                     	;# 
   298  0716                     	;# 
   299  0716                     	;# 
   300  0716                     	;# 
   301  0717                     	;# 
   302  0717                     	;# 
   303  0717                     	;# 
   304  0717                     	;# 
   305  0718                     	;# 
   306  0718                     	;# 
   307  0718                     	;# 
   308  0719                     	;# 
   309  0719                     	;# 
   310  0719                     	;# 
   311  0719                     	;# 
   312  071A                     	;# 
   313  071A                     	;# 
   314  071A                     	;# 
   315  071A                     	;# 
   316  071A                     	;# 
   317  071B                     	;# 
   318  071B                     	;# 
   319  071C                     	;# 
   320  071C                     	;# 
   321  071C                     	;# 
   322  071C                     	;# 
   323  071C                     	;# 
   324  071D                     	;# 
   325  071D                     	;# 
   326  071E                     	;# 
   327  071E                     	;# 
   328  0791                     	;# 
   329  0791                     	;# 
   330  0793                     	;# 
   331  0793                     	;# 
   332  0794                     	;# 
   333  0794                     	;# 
   334  0796                     	;# 
   335  0796                     	;# 
   336  0796                     	;# 
   337  0797                     	;# 
   338  0797                     	;# 
   339  0797                     	;# 
   340  0798                     	;# 
   341  0798                     	;# 
   342  0799                     	;# 
   343  0799                     	;# 
   344  0799                     	;# 
   345  079A                     	;# 
   346  079A                     	;# 
   347  079A                     	;# 
   348  079B                     	;# 
   349  079C                     	;# 
   350  079C                     	;# 
   351  079C                     	;# 
   352  079D                     	;# 
   353  079E                     	;# 
   354  079E                     	;# 
   355  0F8C                     	;# 
   356  0F8D                     	;# 
   357  0F91                     	;# 
   358  0F96                     	;# 
   359  0F97                     	;# 
   360  0F9C                     	;# 
   361  0F9D                     	;# 
   362  0F9E                     	;# 
   363  0FE3                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  000E                     	;# 
   390  0011                     	;# 
   391  0012                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001C                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  008E                     	;# 
   404  0091                     	;# 
   405  0092                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0097                     	;# 
   409  0099                     	;# 
   410  009A                     	;# 
   411  009B                     	;# 
   412  009B                     	;# 
   413  009C                     	;# 
   414  009D                     	;# 
   415  009E                     	;# 
   416  009F                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019C                     	;# 
   439  019D                     	;# 
   440  019E                     	;# 
   441  019F                     	;# 
   442  020C                     	;# 
   443  020D                     	;# 
   444  0211                     	;# 
   445  0211                     	;# 
   446  0212                     	;# 
   447  0212                     	;# 
   448  0213                     	;# 
   449  0213                     	;# 
   450  0214                     	;# 
   451  0214                     	;# 
   452  0215                     	;# 
   453  0215                     	;# 
   454  0215                     	;# 
   455  0216                     	;# 
   456  0216                     	;# 
   457  0217                     	;# 
   458  0217                     	;# 
   459  0391                     	;# 
   460  0392                     	;# 
   461  0393                     	;# 
   462  0394                     	;# 
   463  0395                     	;# 
   464  0396                     	;# 
   465  0611                     	;# 
   466  0612                     	;# 
   467  0613                     	;# 
   468  0613                     	;# 
   469  0614                     	;# 
   470  0615                     	;# 
   471  0616                     	;# 
   472  0616                     	;# 
   473  0711                     	;# 
   474  0711                     	;# 
   475  0711                     	;# 
   476  0712                     	;# 
   477  0712                     	;# 
   478  0713                     	;# 
   479  0713                     	;# 
   480  0713                     	;# 
   481  0714                     	;# 
   482  0714                     	;# 
   483  0714                     	;# 
   484  0715                     	;# 
   485  0715                     	;# 
   486  0716                     	;# 
   487  0716                     	;# 
   488  0716                     	;# 
   489  0716                     	;# 
   490  0717                     	;# 
   491  0717                     	;# 
   492  0717                     	;# 
   493  0717                     	;# 
   494  0718                     	;# 
   495  0718                     	;# 
   496  0718                     	;# 
   497  0719                     	;# 
   498  0719                     	;# 
   499  0719                     	;# 
   500  0719                     	;# 
   501  071A                     	;# 
   502  071A                     	;# 
   503  071A                     	;# 
   504  071A                     	;# 
   505  071A                     	;# 
   506  071B                     	;# 
   507  071B                     	;# 
   508  071C                     	;# 
   509  071C                     	;# 
   510  071C                     	;# 
   511  071C                     	;# 
   512  071C                     	;# 
   513  071D                     	;# 
   514  071D                     	;# 
   515  071E                     	;# 
   516  071E                     	;# 
   517  0791                     	;# 
   518  0791                     	;# 
   519  0793                     	;# 
   520  0793                     	;# 
   521  0794                     	;# 
   522  0794                     	;# 
   523  0796                     	;# 
   524  0796                     	;# 
   525  0796                     	;# 
   526  0797                     	;# 
   527  0797                     	;# 
   528  0797                     	;# 
   529  0798                     	;# 
   530  0798                     	;# 
   531  0799                     	;# 
   532  0799                     	;# 
   533  0799                     	;# 
   534  079A                     	;# 
   535  079A                     	;# 
   536  079A                     	;# 
   537  079B                     	;# 
   538  079C                     	;# 
   539  079C                     	;# 
   540  079C                     	;# 
   541  079D                     	;# 
   542  079E                     	;# 
   543  079E                     	;# 
   544  0F8C                     	;# 
   545  0F8D                     	;# 
   546  0F91                     	;# 
   547  0F96                     	;# 
   548  0F97                     	;# 
   549  0F9C                     	;# 
   550  0F9D                     	;# 
   551  0F9E                     	;# 
   552  0FE3                     	;# 
   553  0FE4                     	;# 
   554  0FE5                     	;# 
   555  0FE6                     	;# 
   556  0FE7                     	;# 
   557  0FE8                     	;# 
   558  0FE9                     	;# 
   559  0FEA                     	;# 
   560  0FEB                     	;# 
   561  0FED                     	;# 
   562  0FEE                     	;# 
   563  0FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0015                     	;# 
   582  0016                     	;# 
   583  0016                     	;# 
   584  0017                     	;# 
   585  0018                     	;# 
   586  0019                     	;# 
   587  001A                     	;# 
   588  001B                     	;# 
   589  001C                     	;# 
   590  008C                     	;# 
   591  008D                     	;# 
   592  008E                     	;# 
   593  0091                     	;# 
   594  0092                     	;# 
   595  0095                     	;# 
   596  0096                     	;# 
   597  0097                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  009F                     	;# 
   606  010C                     	;# 
   607  010D                     	;# 
   608  010E                     	;# 
   609  0116                     	;# 
   610  0117                     	;# 
   611  011D                     	;# 
   612  018C                     	;# 
   613  018D                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0194                     	;# 
   621  0195                     	;# 
   622  0196                     	;# 
   623  0199                     	;# 
   624  019A                     	;# 
   625  019B                     	;# 
   626  019B                     	;# 
   627  019C                     	;# 
   628  019D                     	;# 
   629  019E                     	;# 
   630  019F                     	;# 
   631  020C                     	;# 
   632  020D                     	;# 
   633  0211                     	;# 
   634  0211                     	;# 
   635  0212                     	;# 
   636  0212                     	;# 
   637  0213                     	;# 
   638  0213                     	;# 
   639  0214                     	;# 
   640  0214                     	;# 
   641  0215                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0216                     	;# 
   645  0216                     	;# 
   646  0217                     	;# 
   647  0217                     	;# 
   648  0391                     	;# 
   649  0392                     	;# 
   650  0393                     	;# 
   651  0394                     	;# 
   652  0395                     	;# 
   653  0396                     	;# 
   654  0611                     	;# 
   655  0612                     	;# 
   656  0613                     	;# 
   657  0613                     	;# 
   658  0614                     	;# 
   659  0615                     	;# 
   660  0616                     	;# 
   661  0616                     	;# 
   662  0711                     	;# 
   663  0711                     	;# 
   664  0711                     	;# 
   665  0712                     	;# 
   666  0712                     	;# 
   667  0713                     	;# 
   668  0713                     	;# 
   669  0713                     	;# 
   670  0714                     	;# 
   671  0714                     	;# 
   672  0714                     	;# 
   673  0715                     	;# 
   674  0715                     	;# 
   675  0716                     	;# 
   676  0716                     	;# 
   677  0716                     	;# 
   678  0716                     	;# 
   679  0717                     	;# 
   680  0717                     	;# 
   681  0717                     	;# 
   682  0717                     	;# 
   683  0718                     	;# 
   684  0718                     	;# 
   685  0718                     	;# 
   686  0719                     	;# 
   687  0719                     	;# 
   688  0719                     	;# 
   689  0719                     	;# 
   690  071A                     	;# 
   691  071A                     	;# 
   692  071A                     	;# 
   693  071A                     	;# 
   694  071A                     	;# 
   695  071B                     	;# 
   696  071B                     	;# 
   697  071C                     	;# 
   698  071C                     	;# 
   699  071C                     	;# 
   700  071C                     	;# 
   701  071C                     	;# 
   702  071D                     	;# 
   703  071D                     	;# 
   704  071E                     	;# 
   705  071E                     	;# 
   706  0791                     	;# 
   707  0791                     	;# 
   708  0793                     	;# 
   709  0793                     	;# 
   710  0794                     	;# 
   711  0794                     	;# 
   712  0796                     	;# 
   713  0796                     	;# 
   714  0796                     	;# 
   715  0797                     	;# 
   716  0797                     	;# 
   717  0797                     	;# 
   718  0798                     	;# 
   719  0798                     	;# 
   720  0799                     	;# 
   721  0799                     	;# 
   722  0799                     	;# 
   723  079A                     	;# 
   724  079A                     	;# 
   725  079A                     	;# 
   726  079B                     	;# 
   727  079C                     	;# 
   728  079C                     	;# 
   729  079C                     	;# 
   730  079D                     	;# 
   731  079E                     	;# 
   732  079E                     	;# 
   733  0F8C                     	;# 
   734  0F8D                     	;# 
   735  0F91                     	;# 
   736  0F96                     	;# 
   737  0F97                     	;# 
   738  0F9C                     	;# 
   739  0F9D                     	;# 
   740  0F9E                     	;# 
   741  0FE3                     	;# 
   742  0FE4                     	;# 
   743  0FE5                     	;# 
   744  0FE6                     	;# 
   745  0FE7                     	;# 
   746  0FE8                     	;# 
   747  0FE9                     	;# 
   748  0FEA                     	;# 
   749  0FEB                     	;# 
   750  0FED                     	;# 
   751  0FEE                     	;# 
   752  0FEF                     	;# 
   753  0000                     	;# 
   754  0001                     	;# 
   755  0002                     	;# 
   756  0003                     	;# 
   757  0004                     	;# 
   758  0005                     	;# 
   759  0006                     	;# 
   760  0007                     	;# 
   761  0008                     	;# 
   762  0009                     	;# 
   763  000A                     	;# 
   764  000B                     	;# 
   765  000C                     	;# 
   766  000D                     	;# 
   767  000E                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0015                     	;# 
   771  0016                     	;# 
   772  0016                     	;# 
   773  0017                     	;# 
   774  0018                     	;# 
   775  0019                     	;# 
   776  001A                     	;# 
   777  001B                     	;# 
   778  001C                     	;# 
   779  008C                     	;# 
   780  008D                     	;# 
   781  008E                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  009F                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0116                     	;# 
   799  0117                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018D                     	;# 
   803  018E                     	;# 
   804  0191                     	;# 
   805  0191                     	;# 
   806  0192                     	;# 
   807  0193                     	;# 
   808  0193                     	;# 
   809  0194                     	;# 
   810  0195                     	;# 
   811  0196                     	;# 
   812  0199                     	;# 
   813  019A                     	;# 
   814  019B                     	;# 
   815  019B                     	;# 
   816  019C                     	;# 
   817  019D                     	;# 
   818  019E                     	;# 
   819  019F                     	;# 
   820  020C                     	;# 
   821  020D                     	;# 
   822  0211                     	;# 
   823  0211                     	;# 
   824  0212                     	;# 
   825  0212                     	;# 
   826  0213                     	;# 
   827  0213                     	;# 
   828  0214                     	;# 
   829  0214                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0215                     	;# 
   833  0216                     	;# 
   834  0216                     	;# 
   835  0217                     	;# 
   836  0217                     	;# 
   837  0391                     	;# 
   838  0392                     	;# 
   839  0393                     	;# 
   840  0394                     	;# 
   841  0395                     	;# 
   842  0396                     	;# 
   843  0611                     	;# 
   844  0612                     	;# 
   845  0613                     	;# 
   846  0613                     	;# 
   847  0614                     	;# 
   848  0615                     	;# 
   849  0616                     	;# 
   850  0616                     	;# 
   851  0711                     	;# 
   852  0711                     	;# 
   853  0711                     	;# 
   854  0712                     	;# 
   855  0712                     	;# 
   856  0713                     	;# 
   857  0713                     	;# 
   858  0713                     	;# 
   859  0714                     	;# 
   860  0714                     	;# 
   861  0714                     	;# 
   862  0715                     	;# 
   863  0715                     	;# 
   864  0716                     	;# 
   865  0716                     	;# 
   866  0716                     	;# 
   867  0716                     	;# 
   868  0717                     	;# 
   869  0717                     	;# 
   870  0717                     	;# 
   871  0717                     	;# 
   872  0718                     	;# 
   873  0718                     	;# 
   874  0718                     	;# 
   875  0719                     	;# 
   876  0719                     	;# 
   877  0719                     	;# 
   878  0719                     	;# 
   879  071A                     	;# 
   880  071A                     	;# 
   881  071A                     	;# 
   882  071A                     	;# 
   883  071A                     	;# 
   884  071B                     	;# 
   885  071B                     	;# 
   886  071C                     	;# 
   887  071C                     	;# 
   888  071C                     	;# 
   889  071C                     	;# 
   890  071C                     	;# 
   891  071D                     	;# 
   892  071D                     	;# 
   893  071E                     	;# 
   894  071E                     	;# 
   895  0791                     	;# 
   896  0791                     	;# 
   897  0793                     	;# 
   898  0793                     	;# 
   899  0794                     	;# 
   900  0794                     	;# 
   901  0796                     	;# 
   902  0796                     	;# 
   903  0796                     	;# 
   904  0797                     	;# 
   905  0797                     	;# 
   906  0797                     	;# 
   907  0798                     	;# 
   908  0798                     	;# 
   909  0799                     	;# 
   910  0799                     	;# 
   911  0799                     	;# 
   912  079A                     	;# 
   913  079A                     	;# 
   914  079A                     	;# 
   915  079B                     	;# 
   916  079C                     	;# 
   917  079C                     	;# 
   918  079C                     	;# 
   919  079D                     	;# 
   920  079E                     	;# 
   921  079E                     	;# 
   922  0F8C                     	;# 
   923  0F8D                     	;# 
   924  0F91                     	;# 
   925  0F96                     	;# 
   926  0F97                     	;# 
   927  0F9C                     	;# 
   928  0F9D                     	;# 
   929  0F9E                     	;# 
   930  0FE3                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  009F                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020C                     	;# 
  1010  020D                     	;# 
  1011  0211                     	;# 
  1012  0211                     	;# 
  1013  0212                     	;# 
  1014  0212                     	;# 
  1015  0213                     	;# 
  1016  0213                     	;# 
  1017  0214                     	;# 
  1018  0214                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0216                     	;# 
  1023  0216                     	;# 
  1024  0217                     	;# 
  1025  0217                     	;# 
  1026  0391                     	;# 
  1027  0392                     	;# 
  1028  0393                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0611                     	;# 
  1033  0612                     	;# 
  1034  0613                     	;# 
  1035  0613                     	;# 
  1036  0614                     	;# 
  1037  0615                     	;# 
  1038  0616                     	;# 
  1039  0616                     	;# 
  1040  0711                     	;# 
  1041  0711                     	;# 
  1042  0711                     	;# 
  1043  0712                     	;# 
  1044  0712                     	;# 
  1045  0713                     	;# 
  1046  0713                     	;# 
  1047  0713                     	;# 
  1048  0714                     	;# 
  1049  0714                     	;# 
  1050  0714                     	;# 
  1051  0715                     	;# 
  1052  0715                     	;# 
  1053  0716                     	;# 
  1054  0716                     	;# 
  1055  0716                     	;# 
  1056  0716                     	;# 
  1057  0717                     	;# 
  1058  0717                     	;# 
  1059  0717                     	;# 
  1060  0717                     	;# 
  1061  0718                     	;# 
  1062  0718                     	;# 
  1063  0718                     	;# 
  1064  0719                     	;# 
  1065  0719                     	;# 
  1066  0719                     	;# 
  1067  0719                     	;# 
  1068  071A                     	;# 
  1069  071A                     	;# 
  1070  071A                     	;# 
  1071  071A                     	;# 
  1072  071A                     	;# 
  1073  071B                     	;# 
  1074  071B                     	;# 
  1075  071C                     	;# 
  1076  071C                     	;# 
  1077  071C                     	;# 
  1078  071C                     	;# 
  1079  071C                     	;# 
  1080  071D                     	;# 
  1081  071D                     	;# 
  1082  071E                     	;# 
  1083  071E                     	;# 
  1084  0791                     	;# 
  1085  0791                     	;# 
  1086  0793                     	;# 
  1087  0793                     	;# 
  1088  0794                     	;# 
  1089  0794                     	;# 
  1090  0796                     	;# 
  1091  0796                     	;# 
  1092  0796                     	;# 
  1093  0797                     	;# 
  1094  0797                     	;# 
  1095  0797                     	;# 
  1096  0798                     	;# 
  1097  0798                     	;# 
  1098  0799                     	;# 
  1099  0799                     	;# 
  1100  0799                     	;# 
  1101  079A                     	;# 
  1102  079A                     	;# 
  1103  079A                     	;# 
  1104  079B                     	;# 
  1105  079C                     	;# 
  1106  079C                     	;# 
  1107  079C                     	;# 
  1108  079D                     	;# 
  1109  079E                     	;# 
  1110  079E                     	;# 
  1111  0F8C                     	;# 
  1112  0F8D                     	;# 
  1113  0F91                     	;# 
  1114  0F96                     	;# 
  1115  0F97                     	;# 
  1116  0F9C                     	;# 
  1117  0F9D                     	;# 
  1118  0F9E                     	;# 
  1119  0FE3                     	;# 
  1120  0FE4                     	;# 
  1121  0FE5                     	;# 
  1122  0FE6                     	;# 
  1123  0FE7                     	;# 
  1124  0FE8                     	;# 
  1125  0FE9                     	;# 
  1126  0FEA                     	;# 
  1127  0FEB                     	;# 
  1128  0FED                     	;# 
  1129  0FEE                     	;# 
  1130  0FEF                     	;# 
  1131  0000                     	;# 
  1132  0001                     	;# 
  1133  0002                     	;# 
  1134  0003                     	;# 
  1135  0004                     	;# 
  1136  0005                     	;# 
  1137  0006                     	;# 
  1138  0007                     	;# 
  1139  0008                     	;# 
  1140  0009                     	;# 
  1141  000A                     	;# 
  1142  000B                     	;# 
  1143  000C                     	;# 
  1144  000D                     	;# 
  1145  000E                     	;# 
  1146  0011                     	;# 
  1147  0012                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0016                     	;# 
  1151  0017                     	;# 
  1152  0018                     	;# 
  1153  0019                     	;# 
  1154  001A                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  008C                     	;# 
  1158  008D                     	;# 
  1159  008E                     	;# 
  1160  0091                     	;# 
  1161  0092                     	;# 
  1162  0095                     	;# 
  1163  0096                     	;# 
  1164  0097                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  0116                     	;# 
  1177  0117                     	;# 
  1178  011D                     	;# 
  1179  018C                     	;# 
  1180  018D                     	;# 
  1181  018E                     	;# 
  1182  0191                     	;# 
  1183  0191                     	;# 
  1184  0192                     	;# 
  1185  0193                     	;# 
  1186  0193                     	;# 
  1187  0194                     	;# 
  1188  0195                     	;# 
  1189  0196                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019B                     	;# 
  1193  019B                     	;# 
  1194  019C                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019F                     	;# 
  1198  020C                     	;# 
  1199  020D                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0212                     	;# 
  1204  0213                     	;# 
  1205  0213                     	;# 
  1206  0214                     	;# 
  1207  0214                     	;# 
  1208  0215                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0216                     	;# 
  1212  0216                     	;# 
  1213  0217                     	;# 
  1214  0217                     	;# 
  1215  0391                     	;# 
  1216  0392                     	;# 
  1217  0393                     	;# 
  1218  0394                     	;# 
  1219  0395                     	;# 
  1220  0396                     	;# 
  1221  0611                     	;# 
  1222  0612                     	;# 
  1223  0613                     	;# 
  1224  0613                     	;# 
  1225  0614                     	;# 
  1226  0615                     	;# 
  1227  0616                     	;# 
  1228  0616                     	;# 
  1229  0711                     	;# 
  1230  0711                     	;# 
  1231  0711                     	;# 
  1232  0712                     	;# 
  1233  0712                     	;# 
  1234  0713                     	;# 
  1235  0713                     	;# 
  1236  0713                     	;# 
  1237  0714                     	;# 
  1238  0714                     	;# 
  1239  0714                     	;# 
  1240  0715                     	;# 
  1241  0715                     	;# 
  1242  0716                     	;# 
  1243  0716                     	;# 
  1244  0716                     	;# 
  1245  0716                     	;# 
  1246  0717                     	;# 
  1247  0717                     	;# 
  1248  0717                     	;# 
  1249  0717                     	;# 
  1250  0718                     	;# 
  1251  0718                     	;# 
  1252  0718                     	;# 
  1253  0719                     	;# 
  1254  0719                     	;# 
  1255  0719                     	;# 
  1256  0719                     	;# 
  1257  071A                     	;# 
  1258  071A                     	;# 
  1259  071A                     	;# 
  1260  071A                     	;# 
  1261  071A                     	;# 
  1262  071B                     	;# 
  1263  071B                     	;# 
  1264  071C                     	;# 
  1265  071C                     	;# 
  1266  071C                     	;# 
  1267  071C                     	;# 
  1268  071C                     	;# 
  1269  071D                     	;# 
  1270  071D                     	;# 
  1271  071E                     	;# 
  1272  071E                     	;# 
  1273  0791                     	;# 
  1274  0791                     	;# 
  1275  0793                     	;# 
  1276  0793                     	;# 
  1277  0794                     	;# 
  1278  0794                     	;# 
  1279  0796                     	;# 
  1280  0796                     	;# 
  1281  0796                     	;# 
  1282  0797                     	;# 
  1283  0797                     	;# 
  1284  0797                     	;# 
  1285  0798                     	;# 
  1286  0798                     	;# 
  1287  0799                     	;# 
  1288  0799                     	;# 
  1289  0799                     	;# 
  1290  079A                     	;# 
  1291  079A                     	;# 
  1292  079A                     	;# 
  1293  079B                     	;# 
  1294  079C                     	;# 
  1295  079C                     	;# 
  1296  079C                     	;# 
  1297  079D                     	;# 
  1298  079E                     	;# 
  1299  079E                     	;# 
  1300  0F8C                     	;# 
  1301  0F8D                     	;# 
  1302  0F91                     	;# 
  1303  0F96                     	;# 
  1304  0F97                     	;# 
  1305  0F9C                     	;# 
  1306  0F9D                     	;# 
  1307  0F9E                     	;# 
  1308  0FE3                     	;# 
  1309  0FE4                     	;# 
  1310  0FE5                     	;# 
  1311  0FE6                     	;# 
  1312  0FE7                     	;# 
  1313  0FE8                     	;# 
  1314  0FE9                     	;# 
  1315  0FEA                     	;# 
  1316  0FEB                     	;# 
  1317  0FED                     	;# 
  1318  0FEE                     	;# 
  1319  0FEF                     	;# 
  1320  0000                     	;# 
  1321  0001                     	;# 
  1322  0002                     	;# 
  1323  0003                     	;# 
  1324  0004                     	;# 
  1325  0005                     	;# 
  1326  0006                     	;# 
  1327  0007                     	;# 
  1328  0008                     	;# 
  1329  0009                     	;# 
  1330  000A                     	;# 
  1331  000B                     	;# 
  1332  000C                     	;# 
  1333  000D                     	;# 
  1334  000E                     	;# 
  1335  0011                     	;# 
  1336  0012                     	;# 
  1337  0015                     	;# 
  1338  0016                     	;# 
  1339  0016                     	;# 
  1340  0017                     	;# 
  1341  0018                     	;# 
  1342  0019                     	;# 
  1343  001A                     	;# 
  1344  001B                     	;# 
  1345  001C                     	;# 
  1346  008C                     	;# 
  1347  008D                     	;# 
  1348  008E                     	;# 
  1349  0091                     	;# 
  1350  0092                     	;# 
  1351  0095                     	;# 
  1352  0096                     	;# 
  1353  0097                     	;# 
  1354  0099                     	;# 
  1355  009A                     	;# 
  1356  009B                     	;# 
  1357  009B                     	;# 
  1358  009C                     	;# 
  1359  009D                     	;# 
  1360  009E                     	;# 
  1361  009F                     	;# 
  1362  010C                     	;# 
  1363  010D                     	;# 
  1364  010E                     	;# 
  1365  0116                     	;# 
  1366  0117                     	;# 
  1367  011D                     	;# 
  1368  018C                     	;# 
  1369  018D                     	;# 
  1370  018E                     	;# 
  1371  0191                     	;# 
  1372  0191                     	;# 
  1373  0192                     	;# 
  1374  0193                     	;# 
  1375  0193                     	;# 
  1376  0194                     	;# 
  1377  0195                     	;# 
  1378  0196                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019C                     	;# 
  1384  019D                     	;# 
  1385  019E                     	;# 
  1386  019F                     	;# 
  1387  020C                     	;# 
  1388  020D                     	;# 
  1389  0211                     	;# 
  1390  0211                     	;# 
  1391  0212                     	;# 
  1392  0212                     	;# 
  1393  0213                     	;# 
  1394  0213                     	;# 
  1395  0214                     	;# 
  1396  0214                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0216                     	;# 
  1401  0216                     	;# 
  1402  0217                     	;# 
  1403  0217                     	;# 
  1404  0391                     	;# 
  1405  0392                     	;# 
  1406  0393                     	;# 
  1407  0394                     	;# 
  1408  0395                     	;# 
  1409  0396                     	;# 
  1410  0611                     	;# 
  1411  0612                     	;# 
  1412  0613                     	;# 
  1413  0613                     	;# 
  1414  0614                     	;# 
  1415  0615                     	;# 
  1416  0616                     	;# 
  1417  0616                     	;# 
  1418  0711                     	;# 
  1419  0711                     	;# 
  1420  0711                     	;# 
  1421  0712                     	;# 
  1422  0712                     	;# 
  1423  0713                     	;# 
  1424  0713                     	;# 
  1425  0713                     	;# 
  1426  0714                     	;# 
  1427  0714                     	;# 
  1428  0714                     	;# 
  1429  0715                     	;# 
  1430  0715                     	;# 
  1431  0716                     	;# 
  1432  0716                     	;# 
  1433  0716                     	;# 
  1434  0716                     	;# 
  1435  0717                     	;# 
  1436  0717                     	;# 
  1437  0717                     	;# 
  1438  0717                     	;# 
  1439  0718                     	;# 
  1440  0718                     	;# 
  1441  0718                     	;# 
  1442  0719                     	;# 
  1443  0719                     	;# 
  1444  0719                     	;# 
  1445  0719                     	;# 
  1446  071A                     	;# 
  1447  071A                     	;# 
  1448  071A                     	;# 
  1449  071A                     	;# 
  1450  071A                     	;# 
  1451  071B                     	;# 
  1452  071B                     	;# 
  1453  071C                     	;# 
  1454  071C                     	;# 
  1455  071C                     	;# 
  1456  071C                     	;# 
  1457  071C                     	;# 
  1458  071D                     	;# 
  1459  071D                     	;# 
  1460  071E                     	;# 
  1461  071E                     	;# 
  1462  0791                     	;# 
  1463  0791                     	;# 
  1464  0793                     	;# 
  1465  0793                     	;# 
  1466  0794                     	;# 
  1467  0794                     	;# 
  1468  0796                     	;# 
  1469  0796                     	;# 
  1470  0796                     	;# 
  1471  0797                     	;# 
  1472  0797                     	;# 
  1473  0797                     	;# 
  1474  0798                     	;# 
  1475  0798                     	;# 
  1476  0799                     	;# 
  1477  0799                     	;# 
  1478  0799                     	;# 
  1479  079A                     	;# 
  1480  079A                     	;# 
  1481  079A                     	;# 
  1482  079B                     	;# 
  1483  079C                     	;# 
  1484  079C                     	;# 
  1485  079C                     	;# 
  1486  079D                     	;# 
  1487  079E                     	;# 
  1488  079E                     	;# 
  1489  0F8C                     	;# 
  1490  0F8D                     	;# 
  1491  0F91                     	;# 
  1492  0F96                     	;# 
  1493  0F97                     	;# 
  1494  0F9C                     	;# 
  1495  0F9D                     	;# 
  1496  0F9E                     	;# 
  1497  0FE3                     	;# 
  1498  0FE4                     	;# 
  1499  0FE5                     	;# 
  1500  0FE6                     	;# 
  1501  0FE7                     	;# 
  1502  0FE8                     	;# 
  1503  0FE9                     	;# 
  1504  0FEA                     	;# 
  1505  0FEB                     	;# 
  1506  0FED                     	;# 
  1507  0FEE                     	;# 
  1508  0FEF                     	;# 
  1509  0000                     	;# 
  1510  0001                     	;# 
  1511  0002                     	;# 
  1512  0003                     	;# 
  1513  0004                     	;# 
  1514  0005                     	;# 
  1515  0006                     	;# 
  1516  0007                     	;# 
  1517  0008                     	;# 
  1518  0009                     	;# 
  1519  000A                     	;# 
  1520  000B                     	;# 
  1521  000C                     	;# 
  1522  000D                     	;# 
  1523  000E                     	;# 
  1524  0011                     	;# 
  1525  0012                     	;# 
  1526  0015                     	;# 
  1527  0016                     	;# 
  1528  0016                     	;# 
  1529  0017                     	;# 
  1530  0018                     	;# 
  1531  0019                     	;# 
  1532  001A                     	;# 
  1533  001B                     	;# 
  1534  001C                     	;# 
  1535  008C                     	;# 
  1536  008D                     	;# 
  1537  008E                     	;# 
  1538  0091                     	;# 
  1539  0092                     	;# 
  1540  0095                     	;# 
  1541  0096                     	;# 
  1542  0097                     	;# 
  1543  0099                     	;# 
  1544  009A                     	;# 
  1545  009B                     	;# 
  1546  009B                     	;# 
  1547  009C                     	;# 
  1548  009D                     	;# 
  1549  009E                     	;# 
  1550  009F                     	;# 
  1551  010C                     	;# 
  1552  010D                     	;# 
  1553  010E                     	;# 
  1554  0116                     	;# 
  1555  0117                     	;# 
  1556  011D                     	;# 
  1557  018C                     	;# 
  1558  018D                     	;# 
  1559  018E                     	;# 
  1560  0191                     	;# 
  1561  0191                     	;# 
  1562  0192                     	;# 
  1563  0193                     	;# 
  1564  0193                     	;# 
  1565  0194                     	;# 
  1566  0195                     	;# 
  1567  0196                     	;# 
  1568  0199                     	;# 
  1569  019A                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019D                     	;# 
  1574  019E                     	;# 
  1575  019F                     	;# 
  1576  020C                     	;# 
  1577  020D                     	;# 
  1578  0211                     	;# 
  1579  0211                     	;# 
  1580  0212                     	;# 
  1581  0212                     	;# 
  1582  0213                     	;# 
  1583  0213                     	;# 
  1584  0214                     	;# 
  1585  0214                     	;# 
  1586  0215                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0216                     	;# 
  1590  0216                     	;# 
  1591  0217                     	;# 
  1592  0217                     	;# 
  1593  0391                     	;# 
  1594  0392                     	;# 
  1595  0393                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0611                     	;# 
  1600  0612                     	;# 
  1601  0613                     	;# 
  1602  0613                     	;# 
  1603  0614                     	;# 
  1604  0615                     	;# 
  1605  0616                     	;# 
  1606  0616                     	;# 
  1607  0711                     	;# 
  1608  0711                     	;# 
  1609  0711                     	;# 
  1610  0712                     	;# 
  1611  0712                     	;# 
  1612  0713                     	;# 
  1613  0713                     	;# 
  1614  0713                     	;# 
  1615  0714                     	;# 
  1616  0714                     	;# 
  1617  0714                     	;# 
  1618  0715                     	;# 
  1619  0715                     	;# 
  1620  0716                     	;# 
  1621  0716                     	;# 
  1622  0716                     	;# 
  1623  0716                     	;# 
  1624  0717                     	;# 
  1625  0717                     	;# 
  1626  0717                     	;# 
  1627  0717                     	;# 
  1628  0718                     	;# 
  1629  0718                     	;# 
  1630  0718                     	;# 
  1631  0719                     	;# 
  1632  0719                     	;# 
  1633  0719                     	;# 
  1634  0719                     	;# 
  1635  071A                     	;# 
  1636  071A                     	;# 
  1637  071A                     	;# 
  1638  071A                     	;# 
  1639  071A                     	;# 
  1640  071B                     	;# 
  1641  071B                     	;# 
  1642  071C                     	;# 
  1643  071C                     	;# 
  1644  071C                     	;# 
  1645  071C                     	;# 
  1646  071C                     	;# 
  1647  071D                     	;# 
  1648  071D                     	;# 
  1649  071E                     	;# 
  1650  071E                     	;# 
  1651  0791                     	;# 
  1652  0791                     	;# 
  1653  0793                     	;# 
  1654  0793                     	;# 
  1655  0794                     	;# 
  1656  0794                     	;# 
  1657  0796                     	;# 
  1658  0796                     	;# 
  1659  0796                     	;# 
  1660  0797                     	;# 
  1661  0797                     	;# 
  1662  0797                     	;# 
  1663  0798                     	;# 
  1664  0798                     	;# 
  1665  0799                     	;# 
  1666  0799                     	;# 
  1667  0799                     	;# 
  1668  079A                     	;# 
  1669  079A                     	;# 
  1670  079A                     	;# 
  1671  079B                     	;# 
  1672  079C                     	;# 
  1673  079C                     	;# 
  1674  079C                     	;# 
  1675  079D                     	;# 
  1676  079E                     	;# 
  1677  079E                     	;# 
  1678  0F8C                     	;# 
  1679  0F8D                     	;# 
  1680  0F91                     	;# 
  1681  0F96                     	;# 
  1682  0F97                     	;# 
  1683  0F9C                     	;# 
  1684  0F9D                     	;# 
  1685  0F9E                     	;# 
  1686  0FE3                     	;# 
  1687  0FE4                     	;# 
  1688  0FE5                     	;# 
  1689  0FE6                     	;# 
  1690  0FE7                     	;# 
  1691  0FE8                     	;# 
  1692  0FE9                     	;# 
  1693  0FEA                     	;# 
  1694  0FEB                     	;# 
  1695  0FED                     	;# 
  1696  0FEE                     	;# 
  1697  0FEF                     	;# 
  1698  0000                     	;# 
  1699  0001                     	;# 
  1700  0002                     	;# 
  1701  0003                     	;# 
  1702  0004                     	;# 
  1703  0005                     	;# 
  1704  0006                     	;# 
  1705  0007                     	;# 
  1706  0008                     	;# 
  1707  0009                     	;# 
  1708  000A                     	;# 
  1709  000B                     	;# 
  1710  000C                     	;# 
  1711  000D                     	;# 
  1712  000E                     	;# 
  1713  0011                     	;# 
  1714  0012                     	;# 
  1715  0015                     	;# 
  1716  0016                     	;# 
  1717  0016                     	;# 
  1718  0017                     	;# 
  1719  0018                     	;# 
  1720  0019                     	;# 
  1721  001A                     	;# 
  1722  001B                     	;# 
  1723  001C                     	;# 
  1724  008C                     	;# 
  1725  008D                     	;# 
  1726  008E                     	;# 
  1727  0091                     	;# 
  1728  0092                     	;# 
  1729  0095                     	;# 
  1730  0096                     	;# 
  1731  0097                     	;# 
  1732  0099                     	;# 
  1733  009A                     	;# 
  1734  009B                     	;# 
  1735  009B                     	;# 
  1736  009C                     	;# 
  1737  009D                     	;# 
  1738  009E                     	;# 
  1739  009F                     	;# 
  1740  010C                     	;# 
  1741  010D                     	;# 
  1742  010E                     	;# 
  1743  0116                     	;# 
  1744  0117                     	;# 
  1745  011D                     	;# 
  1746  018C                     	;# 
  1747  018D                     	;# 
  1748  018E                     	;# 
  1749  0191                     	;# 
  1750  0191                     	;# 
  1751  0192                     	;# 
  1752  0193                     	;# 
  1753  0193                     	;# 
  1754  0194                     	;# 
  1755  0195                     	;# 
  1756  0196                     	;# 
  1757  0199                     	;# 
  1758  019A                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019C                     	;# 
  1762  019D                     	;# 
  1763  019E                     	;# 
  1764  019F                     	;# 
  1765  020C                     	;# 
  1766  020D                     	;# 
  1767  0211                     	;# 
  1768  0211                     	;# 
  1769  0212                     	;# 
  1770  0212                     	;# 
  1771  0213                     	;# 
  1772  0213                     	;# 
  1773  0214                     	;# 
  1774  0214                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0215                     	;# 
  1778  0216                     	;# 
  1779  0216                     	;# 
  1780  0217                     	;# 
  1781  0217                     	;# 
  1782  0391                     	;# 
  1783  0392                     	;# 
  1784  0393                     	;# 
  1785  0394                     	;# 
  1786  0395                     	;# 
  1787  0396                     	;# 
  1788  0611                     	;# 
  1789  0612                     	;# 
  1790  0613                     	;# 
  1791  0613                     	;# 
  1792  0614                     	;# 
  1793  0615                     	;# 
  1794  0616                     	;# 
  1795  0616                     	;# 
  1796  0711                     	;# 
  1797  0711                     	;# 
  1798  0711                     	;# 
  1799  0712                     	;# 
  1800  0712                     	;# 
  1801  0713                     	;# 
  1802  0713                     	;# 
  1803  0713                     	;# 
  1804  0714                     	;# 
  1805  0714                     	;# 
  1806  0714                     	;# 
  1807  0715                     	;# 
  1808  0715                     	;# 
  1809  0716                     	;# 
  1810  0716                     	;# 
  1811  0716                     	;# 
  1812  0716                     	;# 
  1813  0717                     	;# 
  1814  0717                     	;# 
  1815  0717                     	;# 
  1816  0717                     	;# 
  1817  0718                     	;# 
  1818  0718                     	;# 
  1819  0718                     	;# 
  1820  0719                     	;# 
  1821  0719                     	;# 
  1822  0719                     	;# 
  1823  0719                     	;# 
  1824  071A                     	;# 
  1825  071A                     	;# 
  1826  071A                     	;# 
  1827  071A                     	;# 
  1828  071A                     	;# 
  1829  071B                     	;# 
  1830  071B                     	;# 
  1831  071C                     	;# 
  1832  071C                     	;# 
  1833  071C                     	;# 
  1834  071C                     	;# 
  1835  071C                     	;# 
  1836  071D                     	;# 
  1837  071D                     	;# 
  1838  071E                     	;# 
  1839  071E                     	;# 
  1840  0791                     	;# 
  1841  0791                     	;# 
  1842  0793                     	;# 
  1843  0793                     	;# 
  1844  0794                     	;# 
  1845  0794                     	;# 
  1846  0796                     	;# 
  1847  0796                     	;# 
  1848  0796                     	;# 
  1849  0797                     	;# 
  1850  0797                     	;# 
  1851  0797                     	;# 
  1852  0798                     	;# 
  1853  0798                     	;# 
  1854  0799                     	;# 
  1855  0799                     	;# 
  1856  0799                     	;# 
  1857  079A                     	;# 
  1858  079A                     	;# 
  1859  079A                     	;# 
  1860  079B                     	;# 
  1861  079C                     	;# 
  1862  079C                     	;# 
  1863  079C                     	;# 
  1864  079D                     	;# 
  1865  079E                     	;# 
  1866  079E                     	;# 
  1867  0F8C                     	;# 
  1868  0F8D                     	;# 
  1869  0F91                     	;# 
  1870  0F96                     	;# 
  1871  0F97                     	;# 
  1872  0F9C                     	;# 
  1873  0F9D                     	;# 
  1874  0F9E                     	;# 
  1875  0FE3                     	;# 
  1876  0FE4                     	;# 
  1877  0FE5                     	;# 
  1878  0FE6                     	;# 
  1879  0FE7                     	;# 
  1880  0FE8                     	;# 
  1881  0FE9                     	;# 
  1882  0FEA                     	;# 
  1883  0FEB                     	;# 
  1884  0FED                     	;# 
  1885  0FEE                     	;# 
  1886  0FEF                     	;# 
  1887  0000                     	;# 
  1888  0001                     	;# 
  1889  0002                     	;# 
  1890  0003                     	;# 
  1891  0004                     	;# 
  1892  0005                     	;# 
  1893  0006                     	;# 
  1894  0007                     	;# 
  1895  0008                     	;# 
  1896  0009                     	;# 
  1897  000A                     	;# 
  1898  000B                     	;# 
  1899  000C                     	;# 
  1900  000D                     	;# 
  1901  000E                     	;# 
  1902  0011                     	;# 
  1903  0012                     	;# 
  1904  0015                     	;# 
  1905  0016                     	;# 
  1906  0016                     	;# 
  1907  0017                     	;# 
  1908  0018                     	;# 
  1909  0019                     	;# 
  1910  001A                     	;# 
  1911  001B                     	;# 
  1912  001C                     	;# 
  1913  008C                     	;# 
  1914  008D                     	;# 
  1915  008E                     	;# 
  1916  0091                     	;# 
  1917  0092                     	;# 
  1918  0095                     	;# 
  1919  0096                     	;# 
  1920  0097                     	;# 
  1921  0099                     	;# 
  1922  009A                     	;# 
  1923  009B                     	;# 
  1924  009B                     	;# 
  1925  009C                     	;# 
  1926  009D                     	;# 
  1927  009E                     	;# 
  1928  009F                     	;# 
  1929  010C                     	;# 
  1930  010D                     	;# 
  1931  010E                     	;# 
  1932  0116                     	;# 
  1933  0117                     	;# 
  1934  011D                     	;# 
  1935  018C                     	;# 
  1936  018D                     	;# 
  1937  018E                     	;# 
  1938  0191                     	;# 
  1939  0191                     	;# 
  1940  0192                     	;# 
  1941  0193                     	;# 
  1942  0193                     	;# 
  1943  0194                     	;# 
  1944  0195                     	;# 
  1945  0196                     	;# 
  1946  0199                     	;# 
  1947  019A                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019E                     	;# 
  1953  019F                     	;# 
  1954  020C                     	;# 
  1955  020D                     	;# 
  1956  0211                     	;# 
  1957  0211                     	;# 
  1958  0212                     	;# 
  1959  0212                     	;# 
  1960  0213                     	;# 
  1961  0213                     	;# 
  1962  0214                     	;# 
  1963  0214                     	;# 
  1964  0215                     	;# 
  1965  0215                     	;# 
  1966  0215                     	;# 
  1967  0216                     	;# 
  1968  0216                     	;# 
  1969  0217                     	;# 
  1970  0217                     	;# 
  1971  0391                     	;# 
  1972  0392                     	;# 
  1973  0393                     	;# 
  1974  0394                     	;# 
  1975  0395                     	;# 
  1976  0396                     	;# 
  1977  0611                     	;# 
  1978  0612                     	;# 
  1979  0613                     	;# 
  1980  0613                     	;# 
  1981  0614                     	;# 
  1982  0615                     	;# 
  1983  0616                     	;# 
  1984  0616                     	;# 
  1985  0711                     	;# 
  1986  0711                     	;# 
  1987  0711                     	;# 
  1988  0712                     	;# 
  1989  0712                     	;# 
  1990  0713                     	;# 
  1991  0713                     	;# 
  1992  0713                     	;# 
  1993  0714                     	;# 
  1994  0714                     	;# 
  1995  0714                     	;# 
  1996  0715                     	;# 
  1997  0715                     	;# 
  1998  0716                     	;# 
  1999  0716                     	;# 
  2000  0716                     	;# 
  2001  0716                     	;# 
  2002  0717                     	;# 
  2003  0717                     	;# 
  2004  0717                     	;# 
  2005  0717                     	;# 
  2006  0718                     	;# 
  2007  0718                     	;# 
  2008  0718                     	;# 
  2009  0719                     	;# 
  2010  0719                     	;# 
  2011  0719                     	;# 
  2012  0719                     	;# 
  2013  071A                     	;# 
  2014  071A                     	;# 
  2015  071A                     	;# 
  2016  071A                     	;# 
  2017  071A                     	;# 
  2018  071B                     	;# 
  2019  071B                     	;# 
  2020  071C                     	;# 
  2021  071C                     	;# 
  2022  071C                     	;# 
  2023  071C                     	;# 
  2024  071C                     	;# 
  2025  071D                     	;# 
  2026  071D                     	;# 
  2027  071E                     	;# 
  2028  071E                     	;# 
  2029  0791                     	;# 
  2030  0791                     	;# 
  2031  0793                     	;# 
  2032  0793                     	;# 
  2033  0794                     	;# 
  2034  0794                     	;# 
  2035  0796                     	;# 
  2036  0796                     	;# 
  2037  0796                     	;# 
  2038  0797                     	;# 
  2039  0797                     	;# 
  2040  0797                     	;# 
  2041  0798                     	;# 
  2042  0798                     	;# 
  2043  0799                     	;# 
  2044  0799                     	;# 
  2045  0799                     	;# 
  2046  079A                     	;# 
  2047  079A                     	;# 
  2048  079A                     	;# 
  2049  079B                     	;# 
  2050  079C                     	;# 
  2051  079C                     	;# 
  2052  079C                     	;# 
  2053  079D                     	;# 
  2054  079E                     	;# 
  2055  079E                     	;# 
  2056  0F8C                     	;# 
  2057  0F8D                     	;# 
  2058  0F91                     	;# 
  2059  0F96                     	;# 
  2060  0F97                     	;# 
  2061  0F9C                     	;# 
  2062  0F9D                     	;# 
  2063  0F9E                     	;# 
  2064  0FE3                     	;# 
  2065  0FE4                     	;# 
  2066  0FE5                     	;# 
  2067  0FE6                     	;# 
  2068  0FE7                     	;# 
  2069  0FE8                     	;# 
  2070  0FE9                     	;# 
  2071  0FEA                     	;# 
  2072  0FEB                     	;# 
  2073  0FED                     	;# 
  2074  0FEE                     	;# 
  2075  0FEF                     	;# 
  2076  0000                     	;# 
  2077  0001                     	;# 
  2078  0002                     	;# 
  2079  0003                     	;# 
  2080  0004                     	;# 
  2081  0005                     	;# 
  2082  0006                     	;# 
  2083  0007                     	;# 
  2084  0008                     	;# 
  2085  0009                     	;# 
  2086  000A                     	;# 
  2087  000B                     	;# 
  2088  000C                     	;# 
  2089  000D                     	;# 
  2090  000E                     	;# 
  2091  0011                     	;# 
  2092  0012                     	;# 
  2093  0015                     	;# 
  2094  0016                     	;# 
  2095  0016                     	;# 
  2096  0017                     	;# 
  2097  0018                     	;# 
  2098  0019                     	;# 
  2099  001A                     	;# 
  2100  001B                     	;# 
  2101  001C                     	;# 
  2102  008C                     	;# 
  2103  008D                     	;# 
  2104  008E                     	;# 
  2105  0091                     	;# 
  2106  0092                     	;# 
  2107  0095                     	;# 
  2108  0096                     	;# 
  2109  0097                     	;# 
  2110  0099                     	;# 
  2111  009A                     	;# 
  2112  009B                     	;# 
  2113  009B                     	;# 
  2114  009C                     	;# 
  2115  009D                     	;# 
  2116  009E                     	;# 
  2117  009F                     	;# 
  2118  010C                     	;# 
  2119  010D                     	;# 
  2120  010E                     	;# 
  2121  0116                     	;# 
  2122  0117                     	;# 
  2123  011D                     	;# 
  2124  018C                     	;# 
  2125  018D                     	;# 
  2126  018E                     	;# 
  2127  0191                     	;# 
  2128  0191                     	;# 
  2129  0192                     	;# 
  2130  0193                     	;# 
  2131  0193                     	;# 
  2132  0194                     	;# 
  2133  0195                     	;# 
  2134  0196                     	;# 
  2135  0199                     	;# 
  2136  019A                     	;# 
  2137  019B                     	;# 
  2138  019B                     	;# 
  2139  019C                     	;# 
  2140  019D                     	;# 
  2141  019E                     	;# 
  2142  019F                     	;# 
  2143  020C                     	;# 
  2144  020D                     	;# 
  2145  0211                     	;# 
  2146  0211                     	;# 
  2147  0212                     	;# 
  2148  0212                     	;# 
  2149  0213                     	;# 
  2150  0213                     	;# 
  2151  0214                     	;# 
  2152  0214                     	;# 
  2153  0215                     	;# 
  2154  0215                     	;# 
  2155  0215                     	;# 
  2156  0216                     	;# 
  2157  0216                     	;# 
  2158  0217                     	;# 
  2159  0217                     	;# 
  2160  0391                     	;# 
  2161  0392                     	;# 
  2162  0393                     	;# 
  2163  0394                     	;# 
  2164  0395                     	;# 
  2165  0396                     	;# 
  2166  0611                     	;# 
  2167  0612                     	;# 
  2168  0613                     	;# 
  2169  0613                     	;# 
  2170  0614                     	;# 
  2171  0615                     	;# 
  2172  0616                     	;# 
  2173  0616                     	;# 
  2174  0711                     	;# 
  2175  0711                     	;# 
  2176  0711                     	;# 
  2177  0712                     	;# 
  2178  0712                     	;# 
  2179  0713                     	;# 
  2180  0713                     	;# 
  2181  0713                     	;# 
  2182  0714                     	;# 
  2183  0714                     	;# 
  2184  0714                     	;# 
  2185  0715                     	;# 
  2186  0715                     	;# 
  2187  0716                     	;# 
  2188  0716                     	;# 
  2189  0716                     	;# 
  2190  0716                     	;# 
  2191  0717                     	;# 
  2192  0717                     	;# 
  2193  0717                     	;# 
  2194  0717                     	;# 
  2195  0718                     	;# 
  2196  0718                     	;# 
  2197  0718                     	;# 
  2198  0719                     	;# 
  2199  0719                     	;# 
  2200  0719                     	;# 
  2201  0719                     	;# 
  2202  071A                     	;# 
  2203  071A                     	;# 
  2204  071A                     	;# 
  2205  071A                     	;# 
  2206  071A                     	;# 
  2207  071B                     	;# 
  2208  071B                     	;# 
  2209  071C                     	;# 
  2210  071C                     	;# 
  2211  071C                     	;# 
  2212  071C                     	;# 
  2213  071C                     	;# 
  2214  071D                     	;# 
  2215  071D                     	;# 
  2216  071E                     	;# 
  2217  071E                     	;# 
  2218  0791                     	;# 
  2219  0791                     	;# 
  2220  0793                     	;# 
  2221  0793                     	;# 
  2222  0794                     	;# 
  2223  0794                     	;# 
  2224  0796                     	;# 
  2225  0796                     	;# 
  2226  0796                     	;# 
  2227  0797                     	;# 
  2228  0797                     	;# 
  2229  0797                     	;# 
  2230  0798                     	;# 
  2231  0798                     	;# 
  2232  0799                     	;# 
  2233  0799                     	;# 
  2234  0799                     	;# 
  2235  079A                     	;# 
  2236  079A                     	;# 
  2237  079A                     	;# 
  2238  079B                     	;# 
  2239  079C                     	;# 
  2240  079C                     	;# 
  2241  079C                     	;# 
  2242  079D                     	;# 
  2243  079E                     	;# 
  2244  079E                     	;# 
  2245  0F8C                     	;# 
  2246  0F8D                     	;# 
  2247  0F91                     	;# 
  2248  0F96                     	;# 
  2249  0F97                     	;# 
  2250  0F9C                     	;# 
  2251  0F9D                     	;# 
  2252  0F9E                     	;# 
  2253  0FE3                     	;# 
  2254  0FE4                     	;# 
  2255  0FE5                     	;# 
  2256  0FE6                     	;# 
  2257  0FE7                     	;# 
  2258  0FE8                     	;# 
  2259  0FE9                     	;# 
  2260  0FEA                     	;# 
  2261  0FEB                     	;# 
  2262  0FED                     	;# 
  2263  0FEE                     	;# 
  2264  0FEF                     	;# 
  2265  0000                     	;# 
  2266  0001                     	;# 
  2267  0002                     	;# 
  2268  0003                     	;# 
  2269  0004                     	;# 
  2270  0005                     	;# 
  2271  0006                     	;# 
  2272  0007                     	;# 
  2273  0008                     	;# 
  2274  0009                     	;# 
  2275  000A                     	;# 
  2276  000B                     	;# 
  2277  000C                     	;# 
  2278  000D                     	;# 
  2279  000E                     	;# 
  2280  0011                     	;# 
  2281  0012                     	;# 
  2282  0015                     	;# 
  2283  0016                     	;# 
  2284  0016                     	;# 
  2285  0017                     	;# 
  2286  0018                     	;# 
  2287  0019                     	;# 
  2288  001A                     	;# 
  2289  001B                     	;# 
  2290  001C                     	;# 
  2291  008C                     	;# 
  2292  008D                     	;# 
  2293  008E                     	;# 
  2294  0091                     	;# 
  2295  0092                     	;# 
  2296  0095                     	;# 
  2297  0096                     	;# 
  2298  0097                     	;# 
  2299  0099                     	;# 
  2300  009A                     	;# 
  2301  009B                     	;# 
  2302  009B                     	;# 
  2303  009C                     	;# 
  2304  009D                     	;# 
  2305  009E                     	;# 
  2306  009F                     	;# 
  2307  010C                     	;# 
  2308  010D                     	;# 
  2309  010E                     	;# 
  2310  0116                     	;# 
  2311  0117                     	;# 
  2312  011D                     	;# 
  2313  018C                     	;# 
  2314  018D                     	;# 
  2315  018E                     	;# 
  2316  0191                     	;# 
  2317  0191                     	;# 
  2318  0192                     	;# 
  2319  0193                     	;# 
  2320  0193                     	;# 
  2321  0194                     	;# 
  2322  0195                     	;# 
  2323  0196                     	;# 
  2324  0199                     	;# 
  2325  019A                     	;# 
  2326  019B                     	;# 
  2327  019B                     	;# 
  2328  019C                     	;# 
  2329  019D                     	;# 
  2330  019E                     	;# 
  2331  019F                     	;# 
  2332  020C                     	;# 
  2333  020D                     	;# 
  2334  0211                     	;# 
  2335  0211                     	;# 
  2336  0212                     	;# 
  2337  0212                     	;# 
  2338  0213                     	;# 
  2339  0213                     	;# 
  2340  0214                     	;# 
  2341  0214                     	;# 
  2342  0215                     	;# 
  2343  0215                     	;# 
  2344  0215                     	;# 
  2345  0216                     	;# 
  2346  0216                     	;# 
  2347  0217                     	;# 
  2348  0217                     	;# 
  2349  0391                     	;# 
  2350  0392                     	;# 
  2351  0393                     	;# 
  2352  0394                     	;# 
  2353  0395                     	;# 
  2354  0396                     	;# 
  2355  0611                     	;# 
  2356  0612                     	;# 
  2357  0613                     	;# 
  2358  0613                     	;# 
  2359  0614                     	;# 
  2360  0615                     	;# 
  2361  0616                     	;# 
  2362  0616                     	;# 
  2363  0711                     	;# 
  2364  0711                     	;# 
  2365  0711                     	;# 
  2366  0712                     	;# 
  2367  0712                     	;# 
  2368  0713                     	;# 
  2369  0713                     	;# 
  2370  0713                     	;# 
  2371  0714                     	;# 
  2372  0714                     	;# 
  2373  0714                     	;# 
  2374  0715                     	;# 
  2375  0715                     	;# 
  2376  0716                     	;# 
  2377  0716                     	;# 
  2378  0716                     	;# 
  2379  0716                     	;# 
  2380  0717                     	;# 
  2381  0717                     	;# 
  2382  0717                     	;# 
  2383  0717                     	;# 
  2384  0718                     	;# 
  2385  0718                     	;# 
  2386  0718                     	;# 
  2387  0719                     	;# 
  2388  0719                     	;# 
  2389  0719                     	;# 
  2390  0719                     	;# 
  2391  071A                     	;# 
  2392  071A                     	;# 
  2393  071A                     	;# 
  2394  071A                     	;# 
  2395  071A                     	;# 
  2396  071B                     	;# 
  2397  071B                     	;# 
  2398  071C                     	;# 
  2399  071C                     	;# 
  2400  071C                     	;# 
  2401  071C                     	;# 
  2402  071C                     	;# 
  2403  071D                     	;# 
  2404  071D                     	;# 
  2405  071E                     	;# 
  2406  071E                     	;# 
  2407  0791                     	;# 
  2408  0791                     	;# 
  2409  0793                     	;# 
  2410  0793                     	;# 
  2411  0794                     	;# 
  2412  0794                     	;# 
  2413  0796                     	;# 
  2414  0796                     	;# 
  2415  0796                     	;# 
  2416  0797                     	;# 
  2417  0797                     	;# 
  2418  0797                     	;# 
  2419  0798                     	;# 
  2420  0798                     	;# 
  2421  0799                     	;# 
  2422  0799                     	;# 
  2423  0799                     	;# 
  2424  079A                     	;# 
  2425  079A                     	;# 
  2426  079A                     	;# 
  2427  079B                     	;# 
  2428  079C                     	;# 
  2429  079C                     	;# 
  2430  079C                     	;# 
  2431  079D                     	;# 
  2432  079E                     	;# 
  2433  079E                     	;# 
  2434  0F8C                     	;# 
  2435  0F8D                     	;# 
  2436  0F91                     	;# 
  2437  0F96                     	;# 
  2438  0F97                     	;# 
  2439  0F9C                     	;# 
  2440  0F9D                     	;# 
  2441  0F9E                     	;# 
  2442  0FE3                     	;# 
  2443  0FE4                     	;# 
  2444  0FE5                     	;# 
  2445  0FE6                     	;# 
  2446  0FE7                     	;# 
  2447  0FE8                     	;# 
  2448  0FE9                     	;# 
  2449  0FEA                     	;# 
  2450  0FEB                     	;# 
  2451  0FED                     	;# 
  2452  0FEE                     	;# 
  2453  0FEF                     	;# 
  2454  0000                     	;# 
  2455  0001                     	;# 
  2456  0002                     	;# 
  2457  0003                     	;# 
  2458  0004                     	;# 
  2459  0005                     	;# 
  2460  0006                     	;# 
  2461  0007                     	;# 
  2462  0008                     	;# 
  2463  0009                     	;# 
  2464  000A                     	;# 
  2465  000B                     	;# 
  2466  000C                     	;# 
  2467  000D                     	;# 
  2468  000E                     	;# 
  2469  0011                     	;# 
  2470  0012                     	;# 
  2471  0015                     	;# 
  2472  0016                     	;# 
  2473  0016                     	;# 
  2474  0017                     	;# 
  2475  0018                     	;# 
  2476  0019                     	;# 
  2477  001A                     	;# 
  2478  001B                     	;# 
  2479  001C                     	;# 
  2480  008C                     	;# 
  2481  008D                     	;# 
  2482  008E                     	;# 
  2483  0091                     	;# 
  2484  0092                     	;# 
  2485  0095                     	;# 
  2486  0096                     	;# 
  2487  0097                     	;# 
  2488  0099                     	;# 
  2489  009A                     	;# 
  2490  009B                     	;# 
  2491  009B                     	;# 
  2492  009C                     	;# 
  2493  009D                     	;# 
  2494  009E                     	;# 
  2495  009F                     	;# 
  2496  010C                     	;# 
  2497  010D                     	;# 
  2498  010E                     	;# 
  2499  0116                     	;# 
  2500  0117                     	;# 
  2501  011D                     	;# 
  2502  018C                     	;# 
  2503  018D                     	;# 
  2504  018E                     	;# 
  2505  0191                     	;# 
  2506  0191                     	;# 
  2507  0192                     	;# 
  2508  0193                     	;# 
  2509  0193                     	;# 
  2510  0194                     	;# 
  2511  0195                     	;# 
  2512  0196                     	;# 
  2513  0199                     	;# 
  2514  019A                     	;# 
  2515  019B                     	;# 
  2516  019B                     	;# 
  2517  019C                     	;# 
  2518  019D                     	;# 
  2519  019E                     	;# 
  2520  019F                     	;# 
  2521  020C                     	;# 
  2522  020D                     	;# 
  2523  0211                     	;# 
  2524  0211                     	;# 
  2525  0212                     	;# 
  2526  0212                     	;# 
  2527  0213                     	;# 
  2528  0213                     	;# 
  2529  0214                     	;# 
  2530  0214                     	;# 
  2531  0215                     	;# 
  2532  0215                     	;# 
  2533  0215                     	;# 
  2534  0216                     	;# 
  2535  0216                     	;# 
  2536  0217                     	;# 
  2537  0217                     	;# 
  2538  0391                     	;# 
  2539  0392                     	;# 
  2540  0393                     	;# 
  2541  0394                     	;# 
  2542  0395                     	;# 
  2543  0396                     	;# 
  2544  0611                     	;# 
  2545  0612                     	;# 
  2546  0613                     	;# 
  2547  0613                     	;# 
  2548  0614                     	;# 
  2549  0615                     	;# 
  2550  0616                     	;# 
  2551  0616                     	;# 
  2552  0711                     	;# 
  2553  0711                     	;# 
  2554  0711                     	;# 
  2555  0712                     	;# 
  2556  0712                     	;# 
  2557  0713                     	;# 
  2558  0713                     	;# 
  2559  0713                     	;# 
  2560  0714                     	;# 
  2561  0714                     	;# 
  2562  0714                     	;# 
  2563  0715                     	;# 
  2564  0715                     	;# 
  2565  0716                     	;# 
  2566  0716                     	;# 
  2567  0716                     	;# 
  2568  0716                     	;# 
  2569  0717                     	;# 
  2570  0717                     	;# 
  2571  0717                     	;# 
  2572  0717                     	;# 
  2573  0718                     	;# 
  2574  0718                     	;# 
  2575  0718                     	;# 
  2576  0719                     	;# 
  2577  0719                     	;# 
  2578  0719                     	;# 
  2579  0719                     	;# 
  2580  071A                     	;# 
  2581  071A                     	;# 
  2582  071A                     	;# 
  2583  071A                     	;# 
  2584  071A                     	;# 
  2585  071B                     	;# 
  2586  071B                     	;# 
  2587  071C                     	;# 
  2588  071C                     	;# 
  2589  071C                     	;# 
  2590  071C                     	;# 
  2591  071C                     	;# 
  2592  071D                     	;# 
  2593  071D                     	;# 
  2594  071E                     	;# 
  2595  071E                     	;# 
  2596  0791                     	;# 
  2597  0791                     	;# 
  2598  0793                     	;# 
  2599  0793                     	;# 
  2600  0794                     	;# 
  2601  0794                     	;# 
  2602  0796                     	;# 
  2603  0796                     	;# 
  2604  0796                     	;# 
  2605  0797                     	;# 
  2606  0797                     	;# 
  2607  0797                     	;# 
  2608  0798                     	;# 
  2609  0798                     	;# 
  2610  0799                     	;# 
  2611  0799                     	;# 
  2612  0799                     	;# 
  2613  079A                     	;# 
  2614  079A                     	;# 
  2615  079A                     	;# 
  2616  079B                     	;# 
  2617  079C                     	;# 
  2618  079C                     	;# 
  2619  079C                     	;# 
  2620  079D                     	;# 
  2621  079E                     	;# 
  2622  079E                     	;# 
  2623  0F8C                     	;# 
  2624  0F8D                     	;# 
  2625  0F91                     	;# 
  2626  0F96                     	;# 
  2627  0F97                     	;# 
  2628  0F9C                     	;# 
  2629  0F9D                     	;# 
  2630  0F9E                     	;# 
  2631  0FE3                     	;# 
  2632  0FE4                     	;# 
  2633  0FE5                     	;# 
  2634  0FE6                     	;# 
  2635  0FE7                     	;# 
  2636  0FE8                     	;# 
  2637  0FE9                     	;# 
  2638  0FEA                     	;# 
  2639  0FEB                     	;# 
  2640  0FED                     	;# 
  2641  0FEE                     	;# 
  2642  0FEF                     	;# 
  2643                           
  2644 ;; Function _dummyHandler is unused but had its address taken
  2645  0000                     
  2646                           	psect	idataBANK1
  2647  1206                     __pidataBANK1:	
  2648                           
  2649                           ;initializer for _callback_notPressed
  2650  1206  34CB               	retlw	low _Button_DefaultCallback
  2651  1207  3411               	retlw	high _Button_DefaultCallback
  2652                           
  2653                           ;initializer for _callback_pressed
  2654  1208  34CB               	retlw	low _Button_DefaultCallback
  2655  1209  3411               	retlw	high _Button_DefaultCallback
  2656                           
  2657                           ;initializer for _callback_sampled
  2658  120A  34FF               	retlw	low _Sensor_DefaultCallback
  2659  120B  3407               	retlw	high _Sensor_DefaultCallback
  2660                           
  2661                           ;initializer for _sample_period
  2662  120C  34AE               	retlw	174
  2663                           
  2664                           	psect	idataBANK2
  2665  1386                     __pidataBANK2:	
  2666                           
  2667                           ;initializer for _Button_StateMachine
  2668  1386  34DC               	retlw	low _Button_State_Initializing
  2669  1387  340A               	retlw	high _Button_State_Initializing
  2670  1388  348D               	retlw	low _Button_State_NotPressed
  2671  1389  340D               	retlw	high _Button_State_NotPressed
  2672  138A  343E               	retlw	low _Button_State_PressDebounce
  2673  138B  340B               	retlw	high _Button_State_PressDebounce
  2674  138C  34DD               	retlw	low _Button_State_Pressed
  2675  138D  3409               	retlw	high _Button_State_Pressed
  2676  138E  340B               	retlw	low _Button_State_ReleaseDebounce
  2677  138F  340C               	retlw	high _Button_State_ReleaseDebounce
  2678                           
  2679                           ;initializer for _dummy
  2680  1390  3400               	retlw	0
  2681  1391  3400               	retlw	0
  2682  1392  3400               	retlw	0
  2683  1393  3400               	retlw	0
  2684  1394  3400               	retlw	0
  2685  1395  3400               	retlw	0
  2686  1396  3400               	retlw	0
  2687  1397  3400               	retlw	0
  2688                           
  2689                           	psect	idataBANK3
  2690  14DC                     __pidataBANK3:	
  2691                           
  2692                           ;initializer for _mtouch_sensor
  2693  14DC  3400               	retlw	0
  2694  14DD  3469               	retlw	105
  2695  14DE  3430               	retlw	48
  2696  14DF  3410               	retlw	16
  2697  14E0  3420               	retlw	32
  2698  14E1  3400               	retlw	0
  2699  14E2  3400               	retlw	0
  2700  14E3  3400               	retlw	0
  2701  14E4  3400               	retlw	0
  2702  14E5  3401               	retlw	1
  2703  14E6  3461               	retlw	97
  2704  14E7  3430               	retlw	48
  2705  14E8  3410               	retlw	16
  2706  14E9  3420               	retlw	32
  2707  14EA  3400               	retlw	0
  2708  14EB  3400               	retlw	0
  2709  14EC  3400               	retlw	0
  2710  14ED  3400               	retlw	0
  2711  14EE  3402               	retlw	2
  2712  14EF  3431               	retlw	49
  2713  14F0  3430               	retlw	48
  2714  14F1  3410               	retlw	16
  2715  14F2  3420               	retlw	32
  2716  14F3  3400               	retlw	0
  2717  14F4  3400               	retlw	0
  2718  14F5  3400               	retlw	0
  2719  14F6  3400               	retlw	0
  2720                           
  2721                           	psect	stringtext1
  2722  1856                     __pstringtext1:	
  2723  1856                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2724  1856  3400               	retlw	0
  2725  1857  340D               	retlw	13
  2726  1858  341C               	retlw	28
  2727  1859  341E               	retlw	30
  2728  185A  3417               	retlw	23
  2729  185B                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2730                           
  2731                           	psect	stringtext2
  2732  186A                     __pstringtext2:	
  2733  186A                     _sensor_scan_group:	
  2734  186A  34E2               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2735  186B  34D0               	retlw	low (_mtouch_sensor| (0+256))
  2736  186C  3400               	retlw	0
  2737  186D  34D9               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2738  186E                     __end_of_sensor_scan_group:	
  2739                           
  2740                           	psect	stringtext3
  2741  1800                     __pstringtext3:	
  2742  1800                     _mtouch_button_init:	
  2743  1800  3400               	retlw	0
  2744  1801  3401               	retlw	1
  2745  1802  3400               	retlw	0
  2746  1803  3400               	retlw	0
  2747  1804  3400               	retlw	0
  2748  1805  3400               	retlw	0
  2749  1806  3400               	retlw	0
  2750  1807  3400               	retlw	0
  2751  1808  3400               	retlw	0
  2752  1809  3400               	retlw	0
  2753  180A  3400               	retlw	0
  2754  180B  3400               	retlw	0
  2755  180C  3400               	retlw	0
  2756  180D  3400               	retlw	0
  2757  180E  3464               	retlw	100
  2758  180F  3401               	retlw	1
  2759  1810  3401               	retlw	1
  2760  1811  3400               	retlw	0
  2761  1812  3400               	retlw	0
  2762  1813  3400               	retlw	0
  2763  1814  3400               	retlw	0
  2764  1815  3400               	retlw	0
  2765  1816  3400               	retlw	0
  2766  1817  3400               	retlw	0
  2767  1818  3400               	retlw	0
  2768  1819  3400               	retlw	0
  2769  181A  3400               	retlw	0
  2770  181B  3400               	retlw	0
  2771  181C  3400               	retlw	0
  2772  181D  3400               	retlw	0
  2773  181E  3464               	retlw	100
  2774  181F  3401               	retlw	1
  2775  1820  3402               	retlw	2
  2776  1821  3402               	retlw	2
  2777  1822  3400               	retlw	0
  2778  1823  3400               	retlw	0
  2779  1824  3400               	retlw	0
  2780  1825  3400               	retlw	0
  2781  1826  3400               	retlw	0
  2782  1827  3400               	retlw	0
  2783  1828  3400               	retlw	0
  2784  1829  3400               	retlw	0
  2785  182A  3400               	retlw	0
  2786  182B  3400               	retlw	0
  2787  182C  3400               	retlw	0
  2788  182D  3400               	retlw	0
  2789  182E  3464               	retlw	100
  2790  182F  3401               	retlw	1
  2791  1830                     __end_of_mtouch_button_init:	
  2792                           
  2793                           	psect	nvBANK1
  2794  00EC                     __pnvBANK1:	
  2795  00EC                     _TMR0_InterruptHandler:	
  2796  00EC                     	ds	2
  2797  00EE                     _timer0ReloadVal:	
  2798  00EE                     	ds	1
  2799  00EF                     _eusartTxBufferRemaining:	
  2800  00EF                     	ds	1
  2801                           
  2802                           	psect	nvBANK2
  2803  014A                     __pnvBANK2:	
  2804  014A                     _INT_InterruptHandler:	
  2805  014A                     	ds	2
  2806  014C                     _EUSART_ErrorHandler:	
  2807  014C                     	ds	2
  2808  014E                     _EUSART_OverrunErrorHandler:	
  2809  014E                     	ds	2
  2810  0150                     _EUSART_FramingErrorHandler:	
  2811  0150                     	ds	2
  2812  0152                     _EUSART_RxDefaultInterruptHandler:	
  2813  0152                     	ds	2
  2814  0154                     _EUSART_TxDefaultInterruptHandler:	
  2815  0154                     	ds	2
  2816  0015                     _TMR0	set	21
  2817  001C                     _T2CON	set	28
  2818  001A                     _TMR2	set	26
  2819  001B                     _PR2	set	27
  2820  000B                     _INTCONbits	set	11
  2821  0012                     _PIR2bits	set	18
  2822  0011                     _PIR1bits	set	17
  2823  001C                     _T2CONbits	set	28
  2824  005F                     _GIE	set	95
  2825  0095                     _OPTION_REG	set	149
  2826  0091                     _PIE1bits	set	145
  2827  0095                     _OPTION_REGbits	set	149
  2828  008E                     _TRISC	set	142
  2829  008D                     _TRISB	set	141
  2830  008C                     _TRISA	set	140
  2831  0097                     _WDTCON	set	151
  2832  0099                     _OSCCON	set	153
  2833  010E                     _LATCbits	set	270
  2834  010C                     _LATAbits	set	268
  2835  011D                     _APFCON	set	285
  2836  010E                     _LATC	set	270
  2837  010D                     _LATB	set	269
  2838  010C                     _LATA	set	268
  2839  0116                     _BORCON	set	278
  2840  011D                     _APFCONbits	set	285
  2841  0199                     _RCREG	set	409
  2842  019D                     _RCSTAbits	set	413
  2843  019A                     _TXREG	set	410
  2844  019E                     _TXSTAbits	set	414
  2845  019C                     _SPBRGH	set	412
  2846  019B                     _SPBRGL	set	411
  2847  019E                     _TXSTA	set	414
  2848  019D                     _RCSTA	set	413
  2849  019F                     _BAUDCON	set	415
  2850  018C                     _ANSELA	set	396
  2851  018D                     _ANSELB	set	397
  2852  018E                     _ANSELC	set	398
  2853  020C                     _WPUA	set	524
  2854  020D                     _WPUB	set	525
  2855  071A                     _AAD1RES0	set	1818
  2856  0711                     _AD1CON0bits	set	1809
  2857  0714                     _AAD1CON3	set	1812
  2858  0713                     _AD1CON2	set	1811
  2859  0717                     _AD1ACQCON	set	1815
  2860  0716                     _AD1PRECON	set	1814
  2861  0718                     _AAD1GRD	set	1816
  2862  0713                     _AAD1CON2	set	1811
  2863  0719                     _AAD1CAP	set	1817
  2864  0714                     _AD1CON3	set	1812
  2865  0712                     _ADCOMCON	set	1810
  2866  0711                     _AD1CON0	set	1809
  2867  079A                     _AAD2RES0	set	1946
  2868  0791                     _AD2CON0bits	set	1937
  2869  0797                     _AD2ACQCON	set	1943
  2870  0796                     _AD2PRECON	set	1942
  2871  0794                     _AAD2CON3	set	1940
  2872  0798                     _AAD2GRD	set	1944
  2873  0793                     _AD2CON2	set	1939
  2874  0794                     _AD2CON3	set	1940
  2875  0791                     _AD2CON0	set	1937
  2876                           
  2877                           	psect	stringtext4
  2878  1830                     __pstringtext4:	
  2879  1830                     STR_5:	
  2880  1830  3452               	retlw	82	;'R'
  2881  1831  3465               	retlw	101	;'e'
  2882  1832  346C               	retlw	108	;'l'
  2883  1833  3465               	retlw	101	;'e'
  2884  1834  3461               	retlw	97	;'a'
  2885  1835  3473               	retlw	115	;'s'
  2886  1836  3465               	retlw	101	;'e'
  2887  1837  3464               	retlw	100	;'d'
  2888  1838  340D               	retlw	13
  2889  1839  340A               	retlw	10
  2890  183A  3400               	retlw	0
  2891                           
  2892                           	psect	stringtext5
  2893  183B                     __pstringtext5:	
  2894  183B                     STR_7:	
  2895  183B  3425               	retlw	37	;'%'
  2896  183C  346C               	retlw	108	;'l'
  2897  183D  3464               	retlw	100	;'d'
  2898  183E  3420               	retlw	32	;' '
  2899  183F  342D               	retlw	45	;'-'
  2900  1840  343E               	retlw	62	;'>'
  2901  1841  3420               	retlw	32	;' '
  2902  1842  3400               	retlw	0
  2903                           
  2904                           	psect	stringtext6
  2905  1843                     __pstringtext6:	
  2906  1843                     STR_3:	
  2907  1843  3444               	retlw	68	;'D'
  2908  1844  344F               	retlw	79	;'O'
  2909  1845  3457               	retlw	87	;'W'
  2910  1846  344E               	retlw	78	;'N'
  2911  1847  340D               	retlw	13
  2912  1848  340A               	retlw	10
  2913  1849  3400               	retlw	0
  2914                           
  2915                           	psect	stringtext7
  2916  184A                     __pstringtext7:	
  2917  184A                     STR_8:	
  2918  184A  344E               	retlw	78	;'N'
  2919  184B  3455               	retlw	85	;'U'
  2920  184C  344C               	retlw	76	;'L'
  2921  184D  344C               	retlw	76	;'L'
  2922  184E  340A               	retlw	10
  2923  184F  3400               	retlw	0
  2924                           
  2925                           	psect	stringtext8
  2926  1850                     __pstringtext8:	
  2927  1850                     STR_4:	
  2928  1850  344F               	retlw	79	;'O'
  2929  1851  3446               	retlw	70	;'F'
  2930  1852  3446               	retlw	70	;'F'
  2931  1853  340D               	retlw	13
  2932  1854  340A               	retlw	10
  2933  1855  3400               	retlw	0
  2934                           
  2935                           	psect	stringtext9
  2936  185B                     __pstringtext9:	
  2937  185B                     STR_1:	
  2938  185B  344F               	retlw	79	;'O'
  2939  185C  344E               	retlw	78	;'N'
  2940  185D  340D               	retlw	13
  2941  185E  340A               	retlw	10
  2942  185F  3400               	retlw	0
  2943                           
  2944                           	psect	stringtext10
  2945  1860                     __pstringtext10:	
  2946  1860                     STR_2:	
  2947  1860  3455               	retlw	85	;'U'
  2948  1861  3450               	retlw	80	;'P'
  2949  1862  340D               	retlw	13
  2950  1863  340A               	retlw	10
  2951  1864  3400               	retlw	0
  2952                           
  2953                           	psect	stringtext11
  2954  1865                     __pstringtext11:	
  2955  1865                     STR_6:	
  2956  1865  3425               	retlw	37	;'%'
  2957  1866  3464               	retlw	100	;'d'
  2958  1867  340D               	retlw	13
  2959  1868  340A               	retlw	10
  2960  1869  3400               	retlw	0
  2961                           
  2962                           	psect	stringtext12
  2963  186E                     __pstringtext12:	
  2964  186E                     STR_9:	
  2965  186E  346C               	retlw	108	;'l'
  2966  186F  3464               	retlw	100	;'d'
  2967  1870  3400               	retlw	0
  2968                           
  2969                           	psect	stringtext13
  2970  1871                     __pstringtext13:	
  2971  1871                     STR_13:	
  2972  1871  346C               	retlw	108	;'l'
  2973  1872  3469               	retlw	105	;'i'
  2974  1873  3400               	retlw	0
  2975                           
  2976                           	psect	stringtext14
  2977  0000                     __pstringtext14:	
  2978  186E                     
  2979                           ; #config settings
  2980  0000                     
  2981                           	psect	cinit
  2982  0033                     start_initialization:	
  2983  0033                     __initialization:	
  2984                           
  2985                           ; Initialize objects allocated to BANK1
  2986  0033  3006               	movlw	low __pidataBANK1
  2987  0034  0084               	movwf	4
  2988  0035  3092               	movlw	(high __pidataBANK1)| (0+128)
  2989  0036  0085               	movwf	5
  2990  0037  30E5               	movlw	low __pdataBANK1
  2991  0038  0086               	movwf	6
  2992  0039  3000               	movlw	high __pdataBANK1
  2993  003A  0087               	movwf	7
  2994  003B  3007               	movlw	7
  2995  003C  3192  2200  3180   	fcall	init_ram
  2996                           
  2997                           ; Initialize objects allocated to BANK2
  2998  003F  3086               	movlw	low __pidataBANK2
  2999  0040  0084               	movwf	4
  3000  0041  3093               	movlw	(high __pidataBANK2)| (0+128)
  3001  0042  0085               	movwf	5
  3002  0043  3038               	movlw	low __pdataBANK2
  3003  0044  0086               	movwf	6
  3004  0045  3001               	movlw	high __pdataBANK2
  3005  0046  0087               	movwf	7
  3006  0047  3012               	movlw	18
  3007  0048  3192  2200  3180   	fcall	init_ram
  3008                           
  3009                           ; Initialize objects allocated to BANK3
  3010  004B  30DC               	movlw	low __pidataBANK3
  3011  004C  0084               	movwf	4
  3012  004D  3094               	movlw	(high __pidataBANK3)| (0+128)
  3013  004E  0085               	movwf	5
  3014  004F  30D0               	movlw	low __pdataBANK3
  3015  0050  0086               	movwf	6
  3016  0051  3001               	movlw	high __pdataBANK3
  3017  0052  0087               	movwf	7
  3018  0053  301B               	movlw	27
  3019  0054  3192  2200  3180   	fcall	init_ram
  3020                           
  3021                           ; Clear objects allocated to BANK0
  3022  0057  01E6               	clrf	__pbssBANK0& (0+127)
  3023  0058  01E7               	clrf	(__pbssBANK0+1)& (0+127)
  3024  0059  01E8               	clrf	(__pbssBANK0+2)& (0+127)
  3025  005A  01E9               	clrf	(__pbssBANK0+3)& (0+127)
  3026  005B  01EA               	clrf	(__pbssBANK0+4)& (0+127)
  3027                           
  3028                           ; Clear objects allocated to BANK1
  3029  005C  30C5               	movlw	low __pbssBANK1
  3030  005D  0084               	movwf	4
  3031  005E  3000               	movlw	high __pbssBANK1
  3032  005F  0085               	movwf	5
  3033  0060  3020               	movlw	32
  3034  0061  3191  21FA  3180   	fcall	clear_ram0
  3035                           
  3036                           ; Clear objects allocated to BANK2
  3037  0064  3020               	movlw	low __pbssBANK2
  3038  0065  0084               	movwf	4
  3039  0066  3001               	movlw	high __pbssBANK2
  3040  0067  0085               	movwf	5
  3041  0068  3018               	movlw	24
  3042  0069  3191  21FA  3180   	fcall	clear_ram0
  3043                           
  3044                           ; Clear objects allocated to BANK3
  3045  006C  30A0               	movlw	low __pbssBANK3
  3046  006D  0084               	movwf	4
  3047  006E  3001               	movlw	high __pbssBANK3
  3048  006F  0085               	movwf	5
  3049  0070  3030               	movlw	48
  3050  0071  3191  21FA  3180   	fcall	clear_ram0
  3051                           
  3052                           ; Clear objects allocated to BANK4
  3053  0074  3020               	movlw	low __pbssBANK4
  3054  0075  0084               	movwf	4
  3055  0076  3002               	movlw	high __pbssBANK4
  3056  0077  0085               	movwf	5
  3057  0078  3020               	movlw	32
  3058  0079  3191  21FA         	fcall	clear_ram0
  3059  007B                     end_of_initialization:	
  3060                           ;End of C runtime variable initialization code
  3061                           
  3062  007B                     __end_of__initialization:	
  3063  007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3064  007C  0020               	movlb	0
  3065  007D  3195  2D86         	ljmp	_main	;jump to C main() function
  3066                           
  3067                           	psect	bssBANK0
  3068  0066                     __pbssBANK0:	
  3069  0066                     _eusartRxTail:	
  3070  0066                     	ds	1
  3071  0067                     _eusartRxHead:	
  3072  0067                     	ds	1
  3073  0068                     _sensor_globalFlags:	
  3074  0068                     	ds	1
  3075  0069                     _executeQueueHead:	
  3076  0069                     	ds	1
  3077  006A                     _listHead:	
  3078  006A                     	ds	1
  3079                           
  3080                           	psect	bssBANK1
  3081  00C5                     __pbssBANK1:	
  3082  00C5                     _lastTimerLoad:	
  3083  00C5                     	ds	4
  3084  00C9                     _absoluteTimeofLastTimeout:	
  3085  00C9                     	ds	4
  3086  00CD                     _packet_sample:	
  3087  00CD                     	ds	4
  3088  00D1                     _nout:	
  3089  00D1                     	ds	2
  3090  00D3                     _width:	
  3091  00D3                     	ds	2
  3092  00D5                     _prec:	
  3093  00D5                     	ds	2
  3094  00D7                     _flags:	
  3095  00D7                     	ds	2
  3096  00D9                     _user_touch:	
  3097  00D9                     	ds	2
  3098  00DB                     _packet_noise:	
  3099  00DB                     	ds	2
  3100  00DD                     _isRunning:	
  3101  00DD                     	ds	1
  3102  00DE                     _eusartRxLastError:	
  3103  00DE                     	ds	1
  3104  00DF                     _eusartRxCount:	
  3105  00DF                     	ds	1
  3106  00E0                     _eusartTxTail:	
  3107  00E0                     	ds	1
  3108  00E1                     _eusartTxHead:	
  3109  00E1                     	ds	1
  3110  00E2                     _value:	
  3111  00E2                     	ds	1
  3112  00E3                     _lowpowerActivated:	
  3113  00E3                     	ds	1
  3114  00E4                     _mtouch_time_toScan:	
  3115  00E4                     	ds	1
  3116                           
  3117                           	psect	dataBANK1
  3118  00E5                     __pdataBANK1:	
  3119  00E5                     _callback_notPressed:	
  3120  00E5                     	ds	2
  3121  00E7                     _callback_pressed:	
  3122  00E7                     	ds	2
  3123  00E9                     _callback_sampled:	
  3124  00E9                     	ds	2
  3125  00EB                     _sample_period:	
  3126  00EB                     	ds	1
  3127                           
  3128                           	psect	bssBANK2
  3129  0120                     __pbssBANK2:	
  3130  0120                     _eusartRxStatusBuffer:	
  3131  0120                     	ds	8
  3132  0128                     _eusartRxBuffer:	
  3133  0128                     	ds	8
  3134  0130                     _eusartTxBuffer:	
  3135  0130                     	ds	8
  3136                           
  3137                           	psect	dataBANK2
  3138  0138                     __pdataBANK2:	
  3139  0138                     _Button_StateMachine:	
  3140  0138                     	ds	10
  3141  0142                     _dummy:	
  3142  0142                     	ds	8
  3143                           
  3144                           	psect	bssBANK3
  3145  01A0                     __pbssBANK3:	
  3146  01A0                     _mtouch_button:	
  3147  01A0                     	ds	48
  3148                           
  3149                           	psect	dataBANK3
  3150  01D0                     __pdataBANK3:	
  3151  01D0                     _mtouch_sensor:	
  3152  01D0                     	ds	27
  3153                           
  3154                           	psect	bssBANK4
  3155  0220                     __pbssBANK4:	
  3156  0220                     _dbuf:	
  3157  0220                     	ds	32
  3158                           
  3159                           	psect	inittext
  3160  1200                     init_ram:	
  3161  1200  00FE               	movwf	126
  3162  1201                     initloop:	
  3163  1201  0012               	moviw fsr0++
  3164  1202  001E               	movwi fsr1++
  3165  1203  0BFE               	decfsz	126,f
  3166  1204  2A01               	goto	initloop
  3167  1205  3400               	retlw	0
  3168                           
  3169                           	psect	clrtext
  3170  11FA                     clear_ram0:	
  3171                           ;	Called with FSR0 containing the base address, and
  3172                           ;	WREG with the size to clear
  3173                           
  3174  11FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  3175  11FB                     clrloop0:	
  3176  11FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  3177  11FC  3101               	addfsr 0,1
  3178  11FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3179  11FE  29FB               	goto	clrloop0	;have we reached the end yet?
  3180  11FF  3400               	retlw	0	;all done for this memory range, return
  3181                           
  3182                           	psect	cstackBANK2
  3183  0156                     __pcstackBANK2:	
  3184  0156                     Button_Service@name:	
  3185                           
  3186                           ; 1 bytes @ 0x0
  3187  0156                     	ds	1
  3188  0157                     Button_Service@button:	
  3189                           
  3190                           ; 1 bytes @ 0x1
  3191  0157                     	ds	1
  3192  0158                     ??_MTOUCH_Button_ServiceAll:	
  3193                           
  3194                           ; 1 bytes @ 0x2
  3195  0158                     	ds	1
  3196  0159                     MTOUCH_Button_ServiceAll@button:	
  3197                           
  3198                           ; 1 bytes @ 0x3
  3199  0159                     	ds	1
  3200  015A                     ??_MTOUCH_Service_Mainloop:	
  3201                           
  3202                           ; 1 bytes @ 0x4
  3203  015A                     	ds	1
  3204                           
  3205                           	psect	cstackBANK1
  3206  00A0                     __pcstackBANK1:	
  3207  00A0                     Sensor_Service@scanGroup:	
  3208  00A0                     vfpfcnvrt@ll:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211                           
  3212                           ; 8 bytes @ 0x0
  3213  00A0                     	ds	1
  3214  00A1                     Sensor_Service@error:	
  3215                           
  3216                           ; 1 bytes @ 0x1
  3217  00A1                     	ds	1
  3218  00A2                     Sensor_Service@sensor_adc1:	
  3219                           
  3220                           ; 1 bytes @ 0x2
  3221  00A2                     	ds	1
  3222  00A3                     Sensor_Service@sensor_adc2:	
  3223                           
  3224                           ; 1 bytes @ 0x3
  3225  00A3                     	ds	1
  3226  00A4                     MTOUCH_Sensor_SampleAll@group:	
  3227                           
  3228                           ; 1 bytes @ 0x4
  3229  00A4                     	ds	4
  3230  00A8                     vfpfcnvrt@fp:	
  3231                           
  3232                           ; 1 bytes @ 0x8
  3233  00A8                     	ds	1
  3234  00A9                     ?_vfprintf:	
  3235  00A9                     vfprintf@fmt:	
  3236                           ; 2 bytes @ 0x9
  3237                           
  3238                           
  3239                           ; 2 bytes @ 0x9
  3240  00A9                     	ds	2
  3241  00AB                     vfprintf@ap:	
  3242                           
  3243                           ; 1 bytes @ 0xB
  3244  00AB                     	ds	1
  3245  00AC                     ??_vfprintf:	
  3246                           
  3247                           ; 1 bytes @ 0xC
  3248  00AC                     	ds	2
  3249  00AE                     vfprintf@fp:	
  3250                           
  3251                           ; 1 bytes @ 0xE
  3252  00AE                     	ds	1
  3253  00AF                     vfprintf@cfmt:	
  3254                           
  3255                           ; 2 bytes @ 0xF
  3256  00AF                     	ds	2
  3257  00B1                     ?_printf:	
  3258  00B1                     printf@fmt:	
  3259                           ; 2 bytes @ 0x11
  3260                           
  3261                           
  3262                           ; 2 bytes @ 0x11
  3263  00B1                     	ds	6
  3264  00B7                     ??_printf:	
  3265                           
  3266                           ; 1 bytes @ 0x17
  3267  00B7                     	ds	3
  3268  00BA                     printf@ap:	
  3269                           
  3270                           ; 1 bytes @ 0x1A
  3271  00BA                     	ds	1
  3272  00BB                     ?_Button_DefaultCallback:	
  3273  00BB                     ?_myButtonPressedCallback:	
  3274                           ; 1 bytes @ 0x1B
  3275                           
  3276  00BB                     ?_myButtonReleasedCallback:	
  3277                           ; 1 bytes @ 0x1B
  3278                           
  3279  00BB                     Button_DefaultCallback@button:	
  3280                           ; 1 bytes @ 0x1B
  3281                           
  3282  00BB                     myButtonPressedCallback@button:	
  3283                           ; 1 bytes @ 0x1B
  3284                           
  3285  00BB                     myButtonReleasedCallback@button:	
  3286                           ; 1 bytes @ 0x1B
  3287                           
  3288                           
  3289                           ; 1 bytes @ 0x1B
  3290  00BB                     	ds	1
  3291  00BC                     ??_myButtonReleasedCallback:	
  3292                           
  3293                           ; 1 bytes @ 0x1C
  3294  00BC                     	ds	2
  3295  00BE                     ?_Button_State_Initializing:	
  3296  00BE                     ?_Button_State_NotPressed:	
  3297                           ; 1 bytes @ 0x1E
  3298                           
  3299  00BE                     ?_Button_State_PressDebounce:	
  3300                           ; 1 bytes @ 0x1E
  3301                           
  3302  00BE                     ?_Button_State_Pressed:	
  3303                           ; 1 bytes @ 0x1E
  3304                           
  3305  00BE                     ?_Button_State_ReleaseDebounce:	
  3306                           ; 1 bytes @ 0x1E
  3307                           
  3308  00BE                     Button_State_Initializing@button:	
  3309                           ; 1 bytes @ 0x1E
  3310                           
  3311  00BE                     Button_State_NotPressed@button:	
  3312                           ; 1 bytes @ 0x1E
  3313                           
  3314  00BE                     Button_State_Pressed@button:	
  3315                           ; 1 bytes @ 0x1E
  3316                           
  3317  00BE                     Button_State_PressDebounce@button:	
  3318                           ; 1 bytes @ 0x1E
  3319                           
  3320  00BE                     Button_State_ReleaseDebounce@button:	
  3321                           ; 1 bytes @ 0x1E
  3322                           
  3323                           
  3324                           ; 1 bytes @ 0x1E
  3325  00BE                     	ds	1
  3326  00BF                     ??_Button_State_Initializing:	
  3327  00BF                     ??_Button_State_NotPressed:	
  3328                           ; 1 bytes @ 0x1F
  3329                           
  3330  00BF                     ??_Button_State_PressDebounce:	
  3331                           ; 1 bytes @ 0x1F
  3332                           
  3333  00BF                     ??_Button_State_Pressed:	
  3334                           ; 1 bytes @ 0x1F
  3335                           
  3336  00BF                     ??_Button_State_ReleaseDebounce:	
  3337                           ; 1 bytes @ 0x1F
  3338                           
  3339                           
  3340                           ; 1 bytes @ 0x1F
  3341  00BF                     	ds	4
  3342  00C3                     ??_Button_Service:	
  3343                           
  3344                           ; 1 bytes @ 0x23
  3345  00C3                     	ds	2
  3346                           
  3347                           	psect	cstackCOMMON
  3348  0070                     __pcstackCOMMON:	
  3349  0070                     ?_MTOUCH_Service_Mainloop:	
  3350  0070                     ?_MTOUCH_Button_isPressed:	
  3351                           ; 1 bytes @ 0x0
  3352                           
  3353  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  3354                           ; 1 bytes @ 0x0
  3355                           
  3356  0070                     ?_MTOUCH_Button_InitializeAll:	
  3357                           ; 1 bytes @ 0x0
  3358                           
  3359  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3360                           ; 1 bytes @ 0x0
  3361                           
  3362  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3363                           ; 1 bytes @ 0x0
  3364                           
  3365  0070                     ?_MTOUCH_Sensor_SampleAll:	
  3366                           ; 1 bytes @ 0x0
  3367                           
  3368  0070                     ?_MTOUCH_Button_ServiceAll:	
  3369                           ; 1 bytes @ 0x0
  3370                           
  3371  0070                     ?_MTOUCH_needReburst:	
  3372                           ; 1 bytes @ 0x0
  3373                           
  3374  0070                     ?_MTOUCH_Tick:	
  3375                           ; 1 bytes @ 0x0
  3376                           
  3377  0070                     ?_MTOUCH_Button_Tick:	
  3378                           ; 1 bytes @ 0x0
  3379                           
  3380  0070                     ?_MTOUCH_Sensor_Enable:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383  0070                     ?_MTOUCH_Sensor_Calibrate:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386  0070                     ?_Sensor_Sampled_Reset:	
  3387                           ; 1 bytes @ 0x0
  3388                           
  3389  0070                     ?_Sensor_Service:	
  3390                           ; 1 bytes @ 0x0
  3391                           
  3392  0070                     ?_Sensor_isEnabled:	
  3393                           ; 1 bytes @ 0x0
  3394                           
  3395  0070                     ?_Sensor_RawSample_Update:	
  3396                           ; 1 bytes @ 0x0
  3397                           
  3398  0070                     ?_Sensor_setSampled:	
  3399                           ; 1 bytes @ 0x0
  3400                           
  3401  0070                     ?_Sensor_postAcquisitionProcess:	
  3402                           ; 1 bytes @ 0x0
  3403                           
  3404  0070                     ?_Sensor_isActive:	
  3405                           ; 1 bytes @ 0x0
  3406                           
  3407  0070                     ?_Sensor_isCalibrated:	
  3408                           ; 1 bytes @ 0x0
  3409                           
  3410  0070                     ?_Sensor_setActive:	
  3411                           ; 1 bytes @ 0x0
  3412                           
  3413  0070                     ?_Sensor_setInactive:	
  3414                           ; 1 bytes @ 0x0
  3415                           
  3416  0070                     ?_Sensor_isCalibratingAcqTime:	
  3417                           ; 1 bytes @ 0x0
  3418                           
  3419  0070                     ?_TMR2_LoadPeriodRegister:	
  3420                           ; 1 bytes @ 0x0
  3421                           
  3422  0070                     ?_TMR2_StartTimer:	
  3423                           ; 1 bytes @ 0x0
  3424                           
  3425  0070                     ?_TMR2_StopTimer:	
  3426                           ; 1 bytes @ 0x0
  3427                           
  3428  0070                     ?_Sensor_autoCalibration:	
  3429                           ; 1 bytes @ 0x0
  3430                           
  3431  0070                     ?_Sensor_setCalibratAcqTime:	
  3432                           ; 1 bytes @ 0x0
  3433                           
  3434  0070                     ?_Sensor_setCalibrated:	
  3435                           ; 1 bytes @ 0x0
  3436                           
  3437  0070                     ?_Button_Service:	
  3438                           ; 1 bytes @ 0x0
  3439                           
  3440  0070                     ?_Button_Reading_Update:	
  3441                           ; 1 bytes @ 0x0
  3442                           
  3443  0070                     ?_Button_Deviation_Update:	
  3444                           ; 1 bytes @ 0x0
  3445                           
  3446  0070                     ?_Button_Baseline_Initialize:	
  3447                           ; 1 bytes @ 0x0
  3448                           
  3449  0070                     ?_Button_Baseline_Update:	
  3450                           ; 1 bytes @ 0x0
  3451                           
  3452  0070                     ?_Button_Tick_helper:	
  3453                           ; 1 bytes @ 0x0
  3454                           
  3455  0070                     ?_Button_Reading_Update_Helper:	
  3456                           ; 1 bytes @ 0x0
  3457                           
  3458  0070                     ?_PIN_MANAGER_Initialize:	
  3459                           ; 1 bytes @ 0x0
  3460                           
  3461  0070                     ?_OSCILLATOR_Initialize:	
  3462                           ; 1 bytes @ 0x0
  3463                           
  3464  0070                     ?_WDT_Initialize:	
  3465                           ; 1 bytes @ 0x0
  3466                           
  3467  0070                     ?_EXT_INT_Initialize:	
  3468                           ; 1 bytes @ 0x0
  3469                           
  3470  0070                     ?_TMR0_Initialize:	
  3471                           ; 1 bytes @ 0x0
  3472                           
  3473  0070                     ?_EUSART_Initialize:	
  3474                           ; 1 bytes @ 0x0
  3475                           
  3476  0070                     ?_timeout_initialize:	
  3477                           ; 1 bytes @ 0x0
  3478                           
  3479  0070                     ?_EUSART_Receive_ISR:	
  3480                           ; 1 bytes @ 0x0
  3481                           
  3482  0070                     ?_EUSART_Transmit_ISR:	
  3483                           ; 1 bytes @ 0x0
  3484                           
  3485  0070                     ??_EUSART_Transmit_ISR:	
  3486                           ; 1 bytes @ 0x0
  3487                           
  3488  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3489                           ; 1 bytes @ 0x0
  3490                           
  3491  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3492                           ; 1 bytes @ 0x0
  3493                           
  3494  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3495                           ; 1 bytes @ 0x0
  3496                           
  3497  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3498                           ; 1 bytes @ 0x0
  3499                           
  3500  0070                     ?_EUSART_DefaultErrorHandler:	
  3501                           ; 1 bytes @ 0x0
  3502                           
  3503  0070                     ?_EUSART_RxDataHandler:	
  3504                           ; 1 bytes @ 0x0
  3505                           
  3506  0070                     ??_EUSART_RxDataHandler:	
  3507                           ; 1 bytes @ 0x0
  3508                           
  3509  0070                     ?_TMR0_ISR:	
  3510                           ; 1 bytes @ 0x0
  3511                           
  3512  0070                     ?_INT_ISR:	
  3513                           ; 1 bytes @ 0x0
  3514                           
  3515  0070                     ??_INT_ISR:	
  3516                           ; 1 bytes @ 0x0
  3517                           
  3518  0070                     ?_TMR0_DefaultInterruptHandler:	
  3519                           ; 1 bytes @ 0x0
  3520                           
  3521  0070                     ??_TMR0_DefaultInterruptHandler:	
  3522                           ; 1 bytes @ 0x0
  3523                           
  3524  0070                     ?_TMR0_CallBack:	
  3525                           ; 1 bytes @ 0x0
  3526                           
  3527  0070                     ?_timeout_isr:	
  3528                           ; 1 bytes @ 0x0
  3529                           
  3530  0070                     ?_INT_CallBack:	
  3531                           ; 1 bytes @ 0x0
  3532                           
  3533  0070                     ??_INT_CallBack:	
  3534                           ; 1 bytes @ 0x0
  3535                           
  3536  0070                     ?_MTOUCH_Initialize:	
  3537                           ; 1 bytes @ 0x0
  3538                           
  3539  0070                     ?_MTOUCH_Sensor_Initialize:	
  3540                           ; 1 bytes @ 0x0
  3541                           
  3542  0070                     ?_Sensor_getScanGroupIndex:	
  3543                           ; 1 bytes @ 0x0
  3544                           
  3545  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  3546                           ; 1 bytes @ 0x0
  3547                           
  3548  0070                     ?_MTOUCH_Sensor_wasSampled:	
  3549                           ; 1 bytes @ 0x0
  3550                           
  3551  0070                     ?_MTOUCH_Button_Initialize:	
  3552                           ; 1 bytes @ 0x0
  3553                           
  3554  0070                     ?_MTOUCH_Button_Buttonmask_Get:	
  3555                           ; 1 bytes @ 0x0
  3556                           
  3557  0070                     ?_TMR2_Initialize:	
  3558                           ; 1 bytes @ 0x0
  3559                           
  3560  0070                     ?_SYSTEM_Initialize:	
  3561                           ; 1 bytes @ 0x0
  3562                           
  3563  0070                     ?_main:	
  3564                           ; 1 bytes @ 0x0
  3565                           
  3566  0070                     ?_EUSART_Write:	
  3567                           ; 1 bytes @ 0x0
  3568                           
  3569  0070                     ?_putch:	
  3570                           ; 1 bytes @ 0x0
  3571                           
  3572  0070                     ?_INTERRUPT_InterruptManager:	
  3573                           ; 1 bytes @ 0x0
  3574                           
  3575  0070                     ?_TMR0_WriteTimer:	
  3576                           ; 1 bytes @ 0x0
  3577                           
  3578  0070                     ??_TMR0_WriteTimer:	
  3579                           ; 1 bytes @ 0x0
  3580                           
  3581  0070                     ?_stopTimeouts:	
  3582                           ; 1 bytes @ 0x0
  3583                           
  3584  0070                     ??_stopTimeouts:	
  3585                           ; 1 bytes @ 0x0
  3586                           
  3587  0070                     ?_startTimerAtHead:	
  3588                           ; 1 bytes @ 0x0
  3589                           
  3590  0070                     ?_enqueueCallback:	
  3591                           ; 1 bytes @ 0x0
  3592                           
  3593  0070                     ??_enqueueCallback:	
  3594                           ; 1 bytes @ 0x0
  3595                           
  3596  0070                     ?_INT_DefaultInterruptHandler:	
  3597                           ; 1 bytes @ 0x0
  3598                           
  3599  0070                     ??_INT_DefaultInterruptHandler:	
  3600                           ; 1 bytes @ 0x0
  3601                           
  3602  0070                     TMR0_WriteTimer@timerVal:	
  3603                           ; 1 bytes @ 0x0
  3604                           
  3605                           
  3606                           ; 1 bytes @ 0x0
  3607  0070                     	ds	1
  3608  0071                     ??_EUSART_Receive_ISR:	
  3609  0071                     ??_EUSART_DefaultErrorHandler:	
  3610                           ; 1 bytes @ 0x1
  3611                           
  3612  0071                     ?_setTimerDuration:	
  3613                           ; 1 bytes @ 0x1
  3614                           
  3615  0071                     enqueueCallback@timer:	
  3616                           ; 1 bytes @ 0x1
  3617                           
  3618  0071                     setTimerDuration@duration:	
  3619                           ; 1 bytes @ 0x1
  3620                           
  3621                           
  3622                           ; 4 bytes @ 0x1
  3623  0071                     	ds	1
  3624  0072                     enqueueCallback@tmp:	
  3625                           
  3626                           ; 1 bytes @ 0x2
  3627  0072                     	ds	3
  3628  0075                     ??_setTimerDuration:	
  3629                           
  3630                           ; 1 bytes @ 0x5
  3631  0075                     	ds	4
  3632  0079                     ??_startTimerAtHead:	
  3633                           
  3634                           ; 1 bytes @ 0x9
  3635  0079                     	ds	4
  3636  007D                     ??_timeout_isr:	
  3637                           
  3638                           ; 1 bytes @ 0xD
  3639  007D                     	ds	1
  3640  007E                     ??_TMR0_ISR:	
  3641  007E                     ??_TMR0_CallBack:	
  3642                           ; 1 bytes @ 0xE
  3643                           
  3644  007E                     ??_INTERRUPT_InterruptManager:	
  3645                           ; 1 bytes @ 0xE
  3646                           
  3647                           
  3648                           	psect	cstackBANK0
  3649  0020                     __pcstackBANK0:	
  3650                           ; 1 bytes @ 0xE
  3651                           
  3652  0020                     startTimerAtHead@period:	
  3653                           
  3654                           ; 4 bytes @ 0x0
  3655  0020                     	ds	4
  3656  0024                     timeout_isr@next:	
  3657                           
  3658                           ; 1 bytes @ 0x4
  3659  0024                     	ds	1
  3660  0025                     ??_MTOUCH_Button_isPressed:	
  3661  0025                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3662                           ; 1 bytes @ 0x5
  3663                           
  3664  0025                     ??_MTOUCH_needReburst:	
  3665                           ; 1 bytes @ 0x5
  3666                           
  3667  0025                     ?_Sensor_DefaultCallback:	
  3668                           ; 1 bytes @ 0x5
  3669                           
  3670  0025                     ??_Sensor_Sampled_Reset:	
  3671                           ; 1 bytes @ 0x5
  3672                           
  3673  0025                     ??_Sensor_isEnabled:	
  3674                           ; 1 bytes @ 0x5
  3675                           
  3676  0025                     ??_Sensor_setSampled:	
  3677                           ; 1 bytes @ 0x5
  3678                           
  3679  0025                     ??_Sensor_isActive:	
  3680                           ; 1 bytes @ 0x5
  3681                           
  3682  0025                     ??_Sensor_isCalibrated:	
  3683                           ; 1 bytes @ 0x5
  3684                           
  3685  0025                     ??_Sensor_setActive:	
  3686                           ; 1 bytes @ 0x5
  3687                           
  3688  0025                     ??_Sensor_setInactive:	
  3689                           ; 1 bytes @ 0x5
  3690                           
  3691  0025                     ??_Sensor_isCalibratingAcqTime:	
  3692                           ; 1 bytes @ 0x5
  3693                           
  3694  0025                     ??_TMR2_LoadPeriodRegister:	
  3695                           ; 1 bytes @ 0x5
  3696                           
  3697  0025                     ??_TMR2_StartTimer:	
  3698                           ; 1 bytes @ 0x5
  3699                           
  3700  0025                     ??_TMR2_StopTimer:	
  3701                           ; 1 bytes @ 0x5
  3702                           
  3703  0025                     ??_Sensor_setCalibratAcqTime:	
  3704                           ; 1 bytes @ 0x5
  3705                           
  3706  0025                     ??_Sensor_setCalibrated:	
  3707                           ; 1 bytes @ 0x5
  3708                           
  3709  0025                     ?_memcpy:	
  3710                           ; 1 bytes @ 0x5
  3711                           
  3712  0025                     ??_Button_Deviation_Update:	
  3713                           ; 1 bytes @ 0x5
  3714                           
  3715  0025                     ??_Button_Baseline_Update:	
  3716                           ; 1 bytes @ 0x5
  3717                           
  3718  0025                     ??_Button_Tick_helper:	
  3719                           ; 1 bytes @ 0x5
  3720                           
  3721  0025                     ??_PIN_MANAGER_Initialize:	
  3722                           ; 1 bytes @ 0x5
  3723                           
  3724  0025                     ??_OSCILLATOR_Initialize:	
  3725                           ; 1 bytes @ 0x5
  3726                           
  3727  0025                     ??_WDT_Initialize:	
  3728                           ; 1 bytes @ 0x5
  3729                           
  3730  0025                     ?_EUSART_SetRxInterruptHandler:	
  3731                           ; 1 bytes @ 0x5
  3732                           
  3733  0025                     ?_EUSART_SetTxInterruptHandler:	
  3734                           ; 1 bytes @ 0x5
  3735                           
  3736  0025                     ?_EUSART_SetFramingErrorHandler:	
  3737                           ; 1 bytes @ 0x5
  3738                           
  3739  0025                     ?_EUSART_SetOverrunErrorHandler:	
  3740                           ; 1 bytes @ 0x5
  3741                           
  3742  0025                     ?_EUSART_SetErrorHandler:	
  3743                           ; 1 bytes @ 0x5
  3744                           
  3745  0025                     ?_TMR0_SetInterruptHandler:	
  3746                           ; 1 bytes @ 0x5
  3747                           
  3748  0025                     ??_Sensor_getScanGroupIndex:	
  3749                           ; 1 bytes @ 0x5
  3750                           
  3751  0025                     ?_MTOUCH_Button_SetPressedCallback:	
  3752                           ; 1 bytes @ 0x5
  3753                           
  3754  0025                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3755                           ; 1 bytes @ 0x5
  3756                           
  3757  0025                     ??_TMR2_Initialize:	
  3758                           ; 1 bytes @ 0x5
  3759                           
  3760  0025                     ??_EUSART_Write:	
  3761                           ; 1 bytes @ 0x5
  3762                           
  3763  0025                     ?_INT_SetInterruptHandler:	
  3764                           ; 1 bytes @ 0x5
  3765                           
  3766  0025                     ?___bmul:	
  3767                           ; 1 bytes @ 0x5
  3768                           
  3769  0025                     ?_strlen:	
  3770                           ; 1 bytes @ 0x5
  3771                           
  3772  0025                     ?_strncmp:	
  3773                           ; 2 bytes @ 0x5
  3774                           
  3775  0025                     ?___aodiv:	
  3776                           ; 2 bytes @ 0x5
  3777                           
  3778  0025                     ?___aomod:	
  3779                           ; 8 bytes @ 0x5
  3780                           
  3781  0025                     Sensor_DefaultCallback@sensor:	
  3782                           ; 8 bytes @ 0x5
  3783                           
  3784  0025                     Sensor_setActive@sensor:	
  3785                           ; 1 bytes @ 0x5
  3786                           
  3787  0025                     Sensor_setInactive@sensor:	
  3788                           ; 1 bytes @ 0x5
  3789                           
  3790  0025                     Sensor_isActive@sensor:	
  3791                           ; 1 bytes @ 0x5
  3792                           
  3793  0025                     Sensor_isCalibrated@sensor:	
  3794                           ; 1 bytes @ 0x5
  3795                           
  3796  0025                     Sensor_setCalibrated@sensor:	
  3797                           ; 1 bytes @ 0x5
  3798                           
  3799  0025                     Sensor_setCalibratAcqTime@sensor:	
  3800                           ; 1 bytes @ 0x5
  3801                           
  3802  0025                     Sensor_isCalibratingAcqTime@sensor:	
  3803                           ; 1 bytes @ 0x5
  3804                           
  3805  0025                     Sensor_Sampled_Reset@sensor:	
  3806                           ; 1 bytes @ 0x5
  3807                           
  3808  0025                     Sensor_setSampled@sensor:	
  3809                           ; 1 bytes @ 0x5
  3810                           
  3811  0025                     TMR2_LoadPeriodRegister@periodVal:	
  3812                           ; 1 bytes @ 0x5
  3813                           
  3814  0025                     ___bmul@multiplicand:	
  3815                           ; 1 bytes @ 0x5
  3816                           
  3817  0025                     MTOUCH_Button_SetPressedCallback@callback:	
  3818                           ; 1 bytes @ 0x5
  3819                           
  3820  0025                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3821                           ; 2 bytes @ 0x5
  3822                           
  3823  0025                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3824                           ; 2 bytes @ 0x5
  3825                           
  3826  0025                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3827                           ; 2 bytes @ 0x5
  3828                           
  3829  0025                     EUSART_SetErrorHandler@interruptHandler:	
  3830                           ; 2 bytes @ 0x5
  3831                           
  3832  0025                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3833                           ; 2 bytes @ 0x5
  3834                           
  3835  0025                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3836                           ; 2 bytes @ 0x5
  3837                           
  3838  0025                     TMR0_SetInterruptHandler@InterruptHandler:	
  3839                           ; 2 bytes @ 0x5
  3840                           
  3841  0025                     INT_SetInterruptHandler@InterruptHandler:	
  3842                           ; 2 bytes @ 0x5
  3843                           
  3844  0025                     memcpy@s1:	
  3845                           ; 2 bytes @ 0x5
  3846                           
  3847  0025                     strncmp@_l:	
  3848                           ; 2 bytes @ 0x5
  3849                           
  3850  0025                     ___aodiv@divisor:	
  3851                           ; 2 bytes @ 0x5
  3852                           
  3853  0025                     ___aomod@divisor:	
  3854                           ; 8 bytes @ 0x5
  3855                           
  3856                           
  3857                           ; 8 bytes @ 0x5
  3858  0025                     	ds	1
  3859  0026                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3860  0026                     ??_Sensor_DefaultCallback:	
  3861                           ; 1 bytes @ 0x6
  3862                           
  3863  0026                     ?_Sensor_loadADCSettings:	
  3864                           ; 1 bytes @ 0x6
  3865                           
  3866  0026                     ??___bmul:	
  3867                           ; 1 bytes @ 0x6
  3868                           
  3869  0026                     Sensor_loadADCSettings@adc_index:	
  3870                           ; 1 bytes @ 0x6
  3871                           
  3872  0026                     Sensor_isEnabled@sensor:	
  3873                           ; 1 bytes @ 0x6
  3874                           
  3875  0026                     _MTOUCH_Button_isPressed$1152:	
  3876                           ; 1 bytes @ 0x6
  3877                           
  3878  0026                     EUSART_Write@txData:	
  3879                           ; 1 bytes @ 0x6
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x6
  3883  0026                     	ds	1
  3884  0027                     ??_EXT_INT_Initialize:	
  3885  0027                     ??_TMR0_Initialize:	
  3886                           ; 1 bytes @ 0x7
  3887                           
  3888  0027                     ??_EUSART_Initialize:	
  3889                           ; 1 bytes @ 0x7
  3890                           
  3891  0027                     ??_timeout_initialize:	
  3892                           ; 1 bytes @ 0x7
  3893                           
  3894  0027                     ??_EUSART_SetRxInterruptHandler:	
  3895                           ; 1 bytes @ 0x7
  3896                           
  3897  0027                     ??_EUSART_SetTxInterruptHandler:	
  3898                           ; 1 bytes @ 0x7
  3899                           
  3900  0027                     ??_EUSART_SetFramingErrorHandler:	
  3901                           ; 1 bytes @ 0x7
  3902                           
  3903  0027                     ??_EUSART_SetOverrunErrorHandler:	
  3904                           ; 1 bytes @ 0x7
  3905                           
  3906  0027                     ??_EUSART_SetErrorHandler:	
  3907                           ; 1 bytes @ 0x7
  3908                           
  3909  0027                     ??_TMR0_SetInterruptHandler:	
  3910                           ; 1 bytes @ 0x7
  3911                           
  3912  0027                     ??_strlen:	
  3913                           ; 1 bytes @ 0x7
  3914                           
  3915  0027                     ??_Sensor_loadADCSettings:	
  3916                           ; 1 bytes @ 0x7
  3917                           
  3918  0027                     ??_MTOUCH_Button_SetPressedCallback:	
  3919                           ; 1 bytes @ 0x7
  3920                           
  3921  0027                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3922                           ; 1 bytes @ 0x7
  3923                           
  3924  0027                     ??_putch:	
  3925                           ; 1 bytes @ 0x7
  3926                           
  3927  0027                     ??_INT_SetInterruptHandler:	
  3928                           ; 1 bytes @ 0x7
  3929                           
  3930  0027                     Sensor_getScanGroupIndex@sensor:	
  3931                           ; 1 bytes @ 0x7
  3932                           
  3933  0027                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3934                           ; 1 bytes @ 0x7
  3935                           
  3936  0027                     Button_Tick_helper@button:	
  3937                           ; 1 bytes @ 0x7
  3938                           
  3939  0027                     MTOUCH_Button_isPressed@name:	
  3940                           ; 1 bytes @ 0x7
  3941                           
  3942  0027                     putch@txData:	
  3943                           ; 1 bytes @ 0x7
  3944                           
  3945  0027                     ___bmul@product:	
  3946                           ; 1 bytes @ 0x7
  3947                           
  3948  0027                     memcpy@n:	
  3949                           ; 1 bytes @ 0x7
  3950                           
  3951  0027                     strncmp@_r:	
  3952                           ; 2 bytes @ 0x7
  3953                           
  3954                           
  3955                           ; 2 bytes @ 0x7
  3956  0027                     	ds	1
  3957  0028                     ??_MTOUCH_Button_Tick:	
  3958  0028                     ??_MTOUCH_Button_Buttonmask_Get:	
  3959                           ; 1 bytes @ 0x8
  3960                           
  3961  0028                     ?_fputc:	
  3962                           ; 1 bytes @ 0x8
  3963                           
  3964  0028                     Sensor_getScanGroupIndex@sensorGroup:	
  3965                           ; 2 bytes @ 0x8
  3966                           
  3967  0028                     ___bmul@multiplier:	
  3968                           ; 1 bytes @ 0x8
  3969                           
  3970  0028                     strlen@a:	
  3971                           ; 1 bytes @ 0x8
  3972                           
  3973  0028                     fputc@c:	
  3974                           ; 1 bytes @ 0x8
  3975                           
  3976                           
  3977                           ; 2 bytes @ 0x8
  3978  0028                     	ds	1
  3979  0029                     ??_MTOUCH_Sensor_Enable:	
  3980  0029                     ??_MTOUCH_Sensor_Calibrate:	
  3981                           ; 1 bytes @ 0x9
  3982                           
  3983  0029                     ??_Sensor_RawSample_Update:	
  3984                           ; 1 bytes @ 0x9
  3985                           
  3986  0029                     ??_memcpy:	
  3987                           ; 1 bytes @ 0x9
  3988                           
  3989  0029                     ??_MTOUCH_Sensor_isCalibrated:	
  3990                           ; 1 bytes @ 0x9
  3991                           
  3992  0029                     ??_MTOUCH_Sensor_wasSampled:	
  3993                           ; 1 bytes @ 0x9
  3994                           
  3995  0029                     ?_MTOUCH_Sensor_RawSample_Get:	
  3996                           ; 1 bytes @ 0x9
  3997                           
  3998  0029                     MTOUCH_Button_Tick@i:	
  3999                           ; 2 bytes @ 0x9
  4000                           
  4001  0029                     strlen@s:	
  4002                           ; 1 bytes @ 0x9
  4003                           
  4004  0029                     strncmp@n:	
  4005                           ; 1 bytes @ 0x9
  4006                           
  4007                           
  4008                           ; 2 bytes @ 0x9
  4009  0029                     	ds	1
  4010  002A                     ??_MTOUCH_Tick:	
  4011  002A                     Sensor_RawSample_Update@adcIndex:	
  4012                           ; 1 bytes @ 0xA
  4013                           
  4014  002A                     MTOUCH_Sensor_Enable@sensor:	
  4015                           ; 1 bytes @ 0xA
  4016                           
  4017  002A                     MTOUCH_Sensor_Calibrate@sensor:	
  4018                           ; 1 bytes @ 0xA
  4019                           
  4020  002A                     MTOUCH_Sensor_isCalibrated@sensor:	
  4021                           ; 1 bytes @ 0xA
  4022                           
  4023  002A                     MTOUCH_Sensor_wasSampled@sensor:	
  4024                           ; 1 bytes @ 0xA
  4025                           
  4026  002A                     MTOUCH_Button_Buttonmask_Get@output:	
  4027                           ; 1 bytes @ 0xA
  4028                           
  4029  002A                     fputc@fp:	
  4030                           ; 1 bytes @ 0xA
  4031                           
  4032  002A                     _Sensor_loadADCSettings$562:	
  4033                           ; 1 bytes @ 0xA
  4034                           
  4035  002A                     memcpy@s:	
  4036                           ; 2 bytes @ 0xA
  4037                           
  4038                           
  4039                           ; 2 bytes @ 0xA
  4040  002A                     	ds	1
  4041  002B                     ??_fputc:	
  4042  002B                     ??_strncmp:	
  4043                           ; 1 bytes @ 0xB
  4044                           
  4045  002B                     ??_MTOUCH_Sensor_Initialize:	
  4046                           ; 1 bytes @ 0xB
  4047                           
  4048  002B                     ??_MTOUCH_Sensor_RawSample_Get:	
  4049                           ; 1 bytes @ 0xB
  4050                           
  4051  002B                     ??_MTOUCH_Button_Initialize:	
  4052                           ; 1 bytes @ 0xB
  4053                           
  4054  002B                     Sensor_RawSample_Update@sensor:	
  4055                           ; 1 bytes @ 0xB
  4056                           
  4057  002B                     MTOUCH_Button_Buttonmask_Get@i:	
  4058                           ; 1 bytes @ 0xB
  4059                           
  4060  002B                     Button_Baseline_Update@button:	
  4061                           ; 1 bytes @ 0xB
  4062                           
  4063                           
  4064                           ; 1 bytes @ 0xB
  4065  002B                     	ds	1
  4066  002C                     MTOUCH_Sensor_Initialize@sensor:	
  4067  002C                     Sensor_loadADCSettings@addressOffset:	
  4068                           ; 1 bytes @ 0xC
  4069                           
  4070  002C                     MTOUCH_Sensor_RawSample_Get@name:	
  4071                           ; 1 bytes @ 0xC
  4072                           
  4073  002C                     memcpy@tmp:	
  4074                           ; 1 bytes @ 0xC
  4075                           
  4076  002C                     strncmp@l:	
  4077                           ; 1 bytes @ 0xC
  4078                           
  4079                           
  4080                           ; 2 bytes @ 0xC
  4081  002C                     	ds	1
  4082  002D                     ??_MTOUCH_Sensor_InitializeAll:	
  4083  002D                     ??_Button_Baseline_Initialize:	
  4084                           ; 1 bytes @ 0xD
  4085                           
  4086  002D                     ??_Button_Reading_Update_Helper:	
  4087                           ; 1 bytes @ 0xD
  4088                           
  4089  002D                     Sensor_loadADCSettings@sensor:	
  4090                           ; 1 bytes @ 0xD
  4091                           
  4092  002D                     MTOUCH_Button_Initialize@name:	
  4093                           ; 1 bytes @ 0xD
  4094                           
  4095  002D                     memcpy@d1:	
  4096                           ; 1 bytes @ 0xD
  4097                           
  4098  002D                     ___aodiv@dividend:	
  4099                           ; 1 bytes @ 0xD
  4100                           
  4101  002D                     ___aomod@dividend:	
  4102                           ; 8 bytes @ 0xD
  4103                           
  4104                           
  4105                           ; 8 bytes @ 0xD
  4106  002D                     	ds	1
  4107  002E                     MTOUCH_Sensor_InitializeAll@sensor:	
  4108  002E                     MTOUCH_Button_Initialize@button:	
  4109                           ; 1 bytes @ 0xE
  4110                           
  4111  002E                     memcpy@d:	
  4112                           ; 1 bytes @ 0xE
  4113                           
  4114  002E                     strncmp@r:	
  4115                           ; 1 bytes @ 0xE
  4116                           
  4117                           
  4118                           ; 2 bytes @ 0xE
  4119  002E                     	ds	1
  4120  002F                     ??_MTOUCH_Button_InitializeAll:	
  4121  002F                     Button_Deviation_Update@button:	
  4122                           ; 1 bytes @ 0xF
  4123                           
  4124  002F                     Button_Reading_Update_Helper@button:	
  4125                           ; 1 bytes @ 0xF
  4126                           
  4127                           
  4128                           ; 1 bytes @ 0xF
  4129  002F                     	ds	1
  4130  0030                     ??_Button_Reading_Update:	
  4131  0030                     ?_fputs:	
  4132                           ; 1 bytes @ 0x10
  4133                           
  4134  0030                     MTOUCH_Button_InitializeAll@button:	
  4135                           ; 2 bytes @ 0x10
  4136                           
  4137  0030                     Button_Reading_Update@button:	
  4138                           ; 1 bytes @ 0x10
  4139                           
  4140  0030                     fputs@fp:	
  4141                           ; 1 bytes @ 0x10
  4142                           
  4143  0030                     Button_Deviation_Update@deviation:	
  4144                           ; 1 bytes @ 0x10
  4145                           
  4146                           
  4147                           ; 4 bytes @ 0x10
  4148  0030                     	ds	1
  4149  0031                     ??_fputs:	
  4150  0031                     ??_MTOUCH_Initialize:	
  4151                           ; 1 bytes @ 0x11
  4152                           
  4153  0031                     ??_SYSTEM_Initialize:	
  4154                           ; 1 bytes @ 0x11
  4155                           
  4156  0031                     Button_Baseline_Initialize@button:	
  4157                           ; 1 bytes @ 0x11
  4158                           
  4159                           
  4160                           ; 1 bytes @ 0x11
  4161  0031                     	ds	3
  4162  0034                     fputs@c:	
  4163                           
  4164                           ; 1 bytes @ 0x14
  4165  0034                     	ds	1
  4166  0035                     ??___aodiv:	
  4167  0035                     ??___aomod:	
  4168                           ; 1 bytes @ 0x15
  4169                           
  4170  0035                     fputs@i:	
  4171                           ; 1 bytes @ 0x15
  4172                           
  4173                           
  4174                           ; 2 bytes @ 0x15
  4175  0035                     	ds	1
  4176  0036                     ___aodiv@counter:	
  4177  0036                     ___aomod@counter:	
  4178                           ; 1 bytes @ 0x16
  4179                           
  4180                           
  4181                           ; 1 bytes @ 0x16
  4182  0036                     	ds	1
  4183  0037                     ___aodiv@sign:	
  4184  0037                     ___aomod@sign:	
  4185                           ; 1 bytes @ 0x17
  4186                           
  4187  0037                     fputs@s:	
  4188                           ; 1 bytes @ 0x17
  4189                           
  4190                           
  4191                           ; 1 bytes @ 0x17
  4192  0037                     	ds	1
  4193  0038                     ?_abs:	
  4194  0038                     ?_pad:	
  4195                           ; 2 bytes @ 0x18
  4196                           
  4197  0038                     pad@buf:	
  4198                           ; 2 bytes @ 0x18
  4199                           
  4200  0038                     abs@a:	
  4201                           ; 1 bytes @ 0x18
  4202                           
  4203  0038                     ___aodiv@quotient:	
  4204                           ; 2 bytes @ 0x18
  4205                           
  4206                           
  4207                           ; 8 bytes @ 0x18
  4208  0038                     	ds	1
  4209  0039                     pad@p:	
  4210                           
  4211                           ; 2 bytes @ 0x19
  4212  0039                     	ds	1
  4213  003A                     ??_abs:	
  4214                           
  4215                           ; 1 bytes @ 0x1A
  4216  003A                     	ds	1
  4217  003B                     ??_pad:	
  4218                           
  4219                           ; 1 bytes @ 0x1B
  4220  003B                     	ds	1
  4221  003C                     ??_Sensor_postAcquisitionProcess:	
  4222  003C                     ??_Sensor_autoCalibration:	
  4223                           ; 1 bytes @ 0x1C
  4224                           
  4225  003C                     pad@i:	
  4226                           ; 1 bytes @ 0x1C
  4227                           
  4228                           
  4229                           ; 2 bytes @ 0x1C
  4230  003C                     	ds	1
  4231  003D                     Sensor_postAcquisitionProcess@adcIndex:	
  4232                           
  4233                           ; 1 bytes @ 0x1D
  4234  003D                     	ds	1
  4235  003E                     Sensor_postAcquisitionProcess@deviation:	
  4236  003E                     pad@w:	
  4237                           ; 2 bytes @ 0x1E
  4238                           
  4239                           
  4240                           ; 2 bytes @ 0x1E
  4241  003E                     	ds	2
  4242  0040                     Sensor_postAcquisitionProcess@sensor:	
  4243  0040                     Sensor_autoCalibration@adcIndex:	
  4244                           ; 1 bytes @ 0x20
  4245                           
  4246  0040                     pad@fp:	
  4247                           ; 1 bytes @ 0x20
  4248                           
  4249                           
  4250                           ; 1 bytes @ 0x20
  4251  0040                     	ds	1
  4252  0041                     ?_dtoa:	
  4253  0041                     Sensor_autoCalibration@sensor:	
  4254                           ; 2 bytes @ 0x21
  4255                           
  4256  0041                     dtoa@d:	
  4257                           ; 1 bytes @ 0x21
  4258                           
  4259                           
  4260                           ; 8 bytes @ 0x21
  4261  0041                     	ds	1
  4262  0042                     ?_Sensor_Acq_ExecutePacket:	
  4263  0042                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  4264                           ; 1 bytes @ 0x22
  4265                           
  4266                           
  4267                           ; 1 bytes @ 0x22
  4268  0042                     	ds	1
  4269  0043                     ??_Sensor_Acq_ExecutePacket:	
  4270                           
  4271                           ; 1 bytes @ 0x23
  4272  0043                     	ds	1
  4273  0044                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  4274                           
  4275                           ; 1 bytes @ 0x24
  4276  0044                     	ds	1
  4277  0045                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  4278                           
  4279                           ; 1 bytes @ 0x25
  4280  0045                     	ds	1
  4281  0046                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  4282                           
  4283                           ; 1 bytes @ 0x26
  4284  0046                     	ds	1
  4285  0047                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  4286                           
  4287                           ; 1 bytes @ 0x27
  4288  0047                     	ds	1
  4289  0048                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  4290                           
  4291                           ; 1 bytes @ 0x28
  4292  0048                     	ds	1
  4293  0049                     ??_dtoa:	
  4294  0049                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  4295                           ; 1 bytes @ 0x29
  4296                           
  4297                           
  4298                           ; 1 bytes @ 0x29
  4299  0049                     	ds	1
  4300  004A                     Sensor_Acq_ExecutePacket@activeSensor:	
  4301                           
  4302                           ; 1 bytes @ 0x2A
  4303  004A                     	ds	1
  4304  004B                     Sensor_Acq_ExecutePacket@last_a:	
  4305                           
  4306                           ; 2 bytes @ 0x2B
  4307  004B                     	ds	1
  4308  004C                     _dtoa$2256:	
  4309                           
  4310                           ; 2 bytes @ 0x2C
  4311  004C                     	ds	1
  4312  004D                     Sensor_Acq_ExecutePacket@last_b:	
  4313                           
  4314                           ; 2 bytes @ 0x2D
  4315  004D                     	ds	1
  4316  004E                     dtoa@p:	
  4317                           
  4318                           ; 2 bytes @ 0x2E
  4319  004E                     	ds	1
  4320  004F                     Sensor_Acq_ExecutePacket@packet_counter:	
  4321                           
  4322                           ; 1 bytes @ 0x2F
  4323  004F                     	ds	1
  4324  0050                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  4325  0050                     dtoa@fp:	
  4326                           ; 1 bytes @ 0x30
  4327                           
  4328                           
  4329                           ; 1 bytes @ 0x30
  4330  0050                     	ds	1
  4331  0051                     ?_Sensor_Scanfrequency_Evaluation:	
  4332  0051                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  4333                           ; 1 bytes @ 0x31
  4334                           
  4335  0051                     dtoa@w:	
  4336                           ; 1 bytes @ 0x31
  4337                           
  4338                           
  4339                           ; 2 bytes @ 0x31
  4340  0051                     	ds	1
  4341  0052                     ??_Sensor_Scanfrequency_Evaluation:	
  4342                           
  4343                           ; 1 bytes @ 0x32
  4344  0052                     	ds	1
  4345  0053                     dtoa@s:	
  4346                           
  4347                           ; 2 bytes @ 0x33
  4348  0053                     	ds	1
  4349  0054                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  4350                           
  4351                           ; 1 bytes @ 0x34
  4352  0054                     	ds	1
  4353  0055                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  4354  0055                     dtoa@n:	
  4355                           ; 2 bytes @ 0x35
  4356                           
  4357                           
  4358                           ; 8 bytes @ 0x35
  4359  0055                     	ds	2
  4360  0057                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  4361                           
  4362                           ; 1 bytes @ 0x37
  4363  0057                     	ds	1
  4364  0058                     Sensor_Scanfrequency_Evaluation@retry:	
  4365                           
  4366                           ; 1 bytes @ 0x38
  4367  0058                     	ds	1
  4368  0059                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  4369                           
  4370                           ; 4 bytes @ 0x39
  4371  0059                     	ds	4
  4372  005D                     Sensor_Scanfrequency_Evaluation@i:	
  4373  005D                     dtoa@i:	
  4374                           ; 1 bytes @ 0x3D
  4375                           
  4376                           
  4377                           ; 2 bytes @ 0x3D
  4378  005D                     	ds	1
  4379  005E                     ?_Sensor_Acquisition:	
  4380  005E                     Sensor_Acquisition@sensor_adc2:	
  4381                           ; 1 bytes @ 0x3E
  4382                           
  4383                           
  4384                           ; 1 bytes @ 0x3E
  4385  005E                     	ds	1
  4386  005F                     ??_Sensor_Acquisition:	
  4387  005F                     ?_vfpfcnvrt:	
  4388                           ; 1 bytes @ 0x3F
  4389                           
  4390  005F                     vfpfcnvrt@fmt:	
  4391                           ; 2 bytes @ 0x3F
  4392                           
  4393                           
  4394                           ; 1 bytes @ 0x3F
  4395  005F                     	ds	1
  4396  0060                     Sensor_Acquisition@retry:	
  4397  0060                     vfpfcnvrt@ap:	
  4398                           ; 1 bytes @ 0x40
  4399                           
  4400                           
  4401                           ; 1 bytes @ 0x40
  4402  0060                     	ds	1
  4403  0061                     ??_vfpfcnvrt:	
  4404  0061                     Sensor_Acquisition@sensor_adc1:	
  4405                           ; 1 bytes @ 0x41
  4406                           
  4407                           
  4408                           ; 1 bytes @ 0x41
  4409  0061                     	ds	1
  4410  0062                     ??_Sensor_Service:	
  4411                           
  4412                           ; 1 bytes @ 0x42
  4413  0062                     	ds	3
  4414  0065                     ??_MTOUCH_Sensor_SampleAll:	
  4415                           
  4416                           ; 1 bytes @ 0x45
  4417  0065                     	ds	1
  4418  0066                     ??_Button_DefaultCallback:	
  4419  0066                     ??_myButtonPressedCallback:	
  4420                           ; 1 bytes @ 0x46
  4421                           
  4422  0066                     ??_main:	
  4423                           ; 1 bytes @ 0x46
  4424                           
  4425                           
  4426                           	psect	maintext
  4427  1586                     __pmaintext:	
  4428                           ; 1 bytes @ 0x46
  4429 ;;
  4430 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4431 ;;
  4432 ;; *************** function _main *****************
  4433 ;; Defined at:
  4434 ;;		line 12 in file "main.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : B1F/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4448 ;;      Params:         0       0       0       0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0
  4451 ;;      Totals:         0       0       0       0       0       0       0       0
  4452 ;;Total ram usage:        0 bytes
  4453 ;; Hardware stack levels required when called:   21
  4454 ;; This function calls:
  4455 ;;		_MTOUCH_Button_SetNotPressedCallback
  4456 ;;		_MTOUCH_Button_SetPressedCallback
  4457 ;;		_MTOUCH_Service_Mainloop
  4458 ;;		_SYSTEM_Initialize
  4459 ;; This function is called by:
  4460 ;;		Startup code after reset
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           
  4465                           ;psect for function _main
  4466  1586                     _main:	
  4467                           
  4468                           ;main.c: 14:     SYSTEM_Initialize();
  4469                           
  4470                           ;incstack = 0
  4471 ;; hardware stack exceeded
  4472                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4473  1586  3194  24C1  3195   	fcall	_SYSTEM_Initialize
  4474  1589  0022               	movlb	2	; select bank2
  4475  158A  128C               	bcf	12,5	;volatile
  4476  158B  108C               	bcf	12,1	;volatile
  4477  158C  100E               	bcf	14,0	;volatile
  4478                           
  4479                           ;main.c: 18:     (INTCONbits.GIE = 1);
  4480  158D  178B               	bsf	11,7	;volatile
  4481                           
  4482                           ;main.c: 19:     (INTCONbits.PEIE = 1);
  4483  158E  170B               	bsf	11,6	;volatile
  4484                           
  4485                           ;main.c: 20:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  4486  158F  30B6               	movlw	low _myButtonPressedCallback
  4487  1590  0020               	movlb	0	; select bank0
  4488  1591  00A5               	movwf	MTOUCH_Button_SetPressedCallback@callback
  4489  1592  3008               	movlw	high _myButtonPressedCallback
  4490  1593  00A6               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  4491  1594  3192  2226  3195   	fcall	_MTOUCH_Button_SetPressedCallback
  4492                           
  4493                           ;main.c: 21:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  4494  1597  30F7               	movlw	low _myButtonReleasedCallback
  4495  1598  0020               	movlb	0	; select bank0
  4496  1599  00A5               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  4497  159A  3014               	movlw	high _myButtonReleasedCallback
  4498  159B  00A6               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  4499  159C  3192  221D  3195   	fcall	_MTOUCH_Button_SetNotPressedCallback
  4500                           
  4501                           ;main.c: 22:     value = 0;
  4502  159F  0021               	movlb	1	; select bank1
  4503  15A0  01E2               	clrf	_value^(0+128)
  4504  15A1                     l6898:	
  4505                           
  4506                           ;main.c: 24:     {;main.c: 25:         if(MTOUCH_Service_Mainloop())
  4507  15A1  3195  254C  3195   	fcall	_MTOUCH_Service_Mainloop
  4508  15A4  2DA1               	goto	l6898
  4509  15A5                     __end_of_main:	
  4510                           
  4511                           	psect	text1
  4512  14C1                     __ptext1:	
  4513 ;; *************** function _SYSTEM_Initialize *****************
  4514 ;; Defined at:
  4515 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;		None
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;		None
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  1    wreg      void 
  4522 ;; Registers used:
  4523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4529 ;;      Params:         0       0       0       0       0       0       0       0
  4530 ;;      Locals:         0       0       0       0       0       0       0       0
  4531 ;;      Temps:          0       0       0       0       0       0       0       0
  4532 ;;      Totals:         0       0       0       0       0       0       0       0
  4533 ;;Total ram usage:        0 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:   12
  4536 ;; This function calls:
  4537 ;;		_EUSART_Initialize
  4538 ;;		_EXT_INT_Initialize
  4539 ;;		_MTOUCH_Initialize
  4540 ;;		_OSCILLATOR_Initialize
  4541 ;;		_PIN_MANAGER_Initialize
  4542 ;;		_TMR0_Initialize
  4543 ;;		_TMR2_Initialize
  4544 ;;		_WDT_Initialize
  4545 ;;		_timeout_initialize
  4546 ;; This function is called by:
  4547 ;;		_main
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function _SYSTEM_Initialize
  4553  14C1                     _SYSTEM_Initialize:	
  4554                           
  4555                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4556                           
  4557                           ;incstack = 0
  4558                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4559  14C1  3195  2513  3194   	fcall	_PIN_MANAGER_Initialize
  4560                           
  4561                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4562  14C4  3191  21F4  3194   	fcall	_OSCILLATOR_Initialize
  4563                           
  4564                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4565  14C7  3191  21E0  3194   	fcall	_WDT_Initialize
  4566                           
  4567                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  4568  14CA  3192  2215  3194   	fcall	_TMR2_Initialize
  4569                           
  4570                           ;mcc_generated_files/mcc.c: 57:     EXT_INT_Initialize();
  4571  14CD  3192  22BD  3194   	fcall	_EXT_INT_Initialize
  4572                           
  4573                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  4574  14D0  3194  2415  3194   	fcall	_TMR0_Initialize
  4575                           
  4576                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
  4577  14D3  3188  20F6  3194   	fcall	_EUSART_Initialize
  4578                           
  4579                           ;mcc_generated_files/mcc.c: 60:     timeout_initialize();
  4580  14D6  3188  2000  3194   	fcall	_timeout_initialize
  4581                           
  4582                           ;mcc_generated_files/mcc.c: 61:     MTOUCH_Initialize();
  4583  14D9  3192  22C9         	fcall	_MTOUCH_Initialize
  4584  14DB  0008               	return
  4585  14DC                     __end_of_SYSTEM_Initialize:	
  4586                           
  4587                           	psect	text2
  4588  0800                     __ptext2:	
  4589 ;; *************** function _timeout_initialize *****************
  4590 ;; Defined at:
  4591 ;;		line 318 in file "mcc_generated_files/drivers/timeout.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;		None
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      void 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0, pclath, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4605 ;;      Params:         0       0       0       0       0       0       0       0
  4606 ;;      Locals:         0       0       0       0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0
  4608 ;;      Totals:         0       0       0       0       0       0       0       0
  4609 ;;Total ram usage:        0 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    8
  4612 ;; This function calls:
  4613 ;;		_TMR0_SetInterruptHandler
  4614 ;; This function is called by:
  4615 ;;		_SYSTEM_Initialize
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           
  4620                           ;psect for function _timeout_initialize
  4621  0800                     _timeout_initialize:	
  4622                           
  4623                           ;mcc_generated_files/drivers/timeout.c: 320:     TMR0_SetInterruptHandler(timeout_isr);
  4624                           
  4625                           ;incstack = 0
  4626                           ; Regs used in _timeout_initialize: [wreg+status,2+status,0+pclath+cstack]
  4627  0800  306B               	movlw	low _timeout_isr
  4628  0801  0020               	movlb	0	; select bank0
  4629  0802  00A5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4630  0803  3017               	movlw	high _timeout_isr
  4631  0804  00A6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4632  0805  3192  2289         	fcall	_TMR0_SetInterruptHandler
  4633  0807  0008               	return
  4634  0808                     __end_of_timeout_initialize:	
  4635                           
  4636                           	psect	text3
  4637  11E0                     __ptext3:	
  4638 ;; *************** function _WDT_Initialize *****************
  4639 ;; Defined at:
  4640 ;;		line 72 in file "mcc_generated_files/mcc.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;		None
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4654 ;;      Params:         0       0       0       0       0       0       0       0
  4655 ;;      Locals:         0       0       0       0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0
  4657 ;;      Totals:         0       0       0       0       0       0       0       0
  4658 ;;Total ram usage:        0 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    7
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_SYSTEM_Initialize
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _WDT_Initialize
  4670  11E0                     _WDT_Initialize:	
  4671                           
  4672                           ;mcc_generated_files/mcc.c: 75:     WDTCON = 0x16;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _WDT_Initialize: [wreg]
  4676  11E0  3016               	movlw	22
  4677  11E1  0021               	movlb	1	; select bank1
  4678  11E2  0097               	movwf	23	;volatile
  4679  11E3  0008               	return
  4680  11E4                     __end_of_WDT_Initialize:	
  4681                           
  4682                           	psect	text4
  4683  1215                     __ptext4:	
  4684 ;; *************** function _TMR2_Initialize *****************
  4685 ;; Defined at:
  4686 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;		None
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4700 ;;      Params:         0       0       0       0       0       0       0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0       0
  4702 ;;      Temps:          0       0       0       0       0       0       0       0
  4703 ;;      Totals:         0       0       0       0       0       0       0       0
  4704 ;;Total ram usage:        0 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    7
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_SYSTEM_Initialize
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           
  4715                           ;psect for function _TMR2_Initialize
  4716  1215                     _TMR2_Initialize:	
  4717                           
  4718                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4719                           
  4720                           ;incstack = 0
  4721                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4722  1215  30FF               	movlw	255
  4723  1216  0020               	movlb	0	; select bank0
  4724  1217  009B               	movwf	27	;volatile
  4725                           
  4726                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4727  1218  019A               	clrf	26	;volatile
  4728                           
  4729                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4730  1219  1091               	bcf	17,1	;volatile
  4731                           
  4732                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4733  121A  3004               	movlw	4
  4734  121B  009C               	movwf	28	;volatile
  4735  121C  0008               	return
  4736  121D                     __end_of_TMR2_Initialize:	
  4737                           
  4738                           	psect	text5
  4739  1415                     __ptext5:	
  4740 ;; *************** function _TMR0_Initialize *****************
  4741 ;; Defined at:
  4742 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;		None
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0, pclath, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4756 ;;      Params:         0       0       0       0       0       0       0       0
  4757 ;;      Locals:         0       0       0       0       0       0       0       0
  4758 ;;      Temps:          0       1       0       0       0       0       0       0
  4759 ;;      Totals:         0       1       0       0       0       0       0       0
  4760 ;;Total ram usage:        1 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    8
  4763 ;; This function calls:
  4764 ;;		_TMR0_SetInterruptHandler
  4765 ;; This function is called by:
  4766 ;;		_SYSTEM_Initialize
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           
  4771                           ;psect for function _TMR0_Initialize
  4772  1415                     _TMR0_Initialize:	
  4773                           
  4774                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
  4775                           
  4776                           ;incstack = 0
  4777                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4778  1415  0021               	movlb	1	; select bank1
  4779  1416  0815               	movf	21,w	;volatile
  4780  1417  39C0               	andlw	192
  4781  1418  3817               	iorlw	23
  4782  1419  0095               	movwf	21	;volatile
  4783                           
  4784                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0xF0;
  4785  141A  30F0               	movlw	240
  4786  141B  0020               	movlb	0	; select bank0
  4787  141C  0095               	movwf	21	;volatile
  4788                           
  4789                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 240;
  4790  141D  30F0               	movlw	240
  4791  141E  00A7               	movwf	??_TMR0_Initialize
  4792  141F  0827               	movf	??_TMR0_Initialize,w
  4793  1420  0021               	movlb	1	; select bank1
  4794  1421  00EE               	movwf	_timer0ReloadVal^(0+128)	;volatile
  4795                           
  4796                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  4797  1422  110B               	bcf	11,2	;volatile
  4798                           
  4799                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  4800  1423  168B               	bsf	11,5	;volatile
  4801                           
  4802                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  4803  1424  30CA               	movlw	low _TMR0_DefaultInterruptHandler
  4804  1425  0020               	movlb	0	; select bank0
  4805  1426  00A5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  4806  1427  3011               	movlw	high _TMR0_DefaultInterruptHandler
  4807  1428  00A6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  4808  1429  3192  2289         	fcall	_TMR0_SetInterruptHandler
  4809  142B  0008               	return
  4810  142C                     __end_of_TMR0_Initialize:	
  4811                           
  4812                           	psect	text6
  4813  1289                     __ptext6:	
  4814 ;; *************** function _TMR0_SetInterruptHandler *****************
  4815 ;; Defined at:
  4816 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  InterruptHan    2    5[BANK0 ] PTR FTN()void 
  4819 ;;		 -> timeout_isr(1), TMR0_DefaultInterruptHandler(1), 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;		None
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  1    wreg      void 
  4824 ;; Registers used:
  4825 ;;		wreg
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4831 ;;      Params:         0       2       0       0       0       0       0       0
  4832 ;;      Locals:         0       0       0       0       0       0       0       0
  4833 ;;      Temps:          0       0       0       0       0       0       0       0
  4834 ;;      Totals:         0       2       0       0       0       0       0       0
  4835 ;;Total ram usage:        2 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    7
  4838 ;; This function calls:
  4839 ;;		Nothing
  4840 ;; This function is called by:
  4841 ;;		_TMR0_Initialize
  4842 ;;		_timeout_initialize
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function _TMR0_SetInterruptHandler
  4848  1289                     _TMR0_SetInterruptHandler:	
  4849                           
  4850                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  4854  1289  0020               	movlb	0	; select bank0
  4855  128A  0826               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  4856  128B  0021               	movlb	1	; select bank1
  4857  128C  00ED               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  4858  128D  0020               	movlb	0	; select bank0
  4859  128E  0825               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  4860  128F  0021               	movlb	1	; select bank1
  4861  1290  00EC               	movwf	_TMR0_InterruptHandler^(0+128)
  4862  1291  0008               	return
  4863  1292                     __end_of_TMR0_SetInterruptHandler:	
  4864                           
  4865                           	psect	text7
  4866  1513                     __ptext7:	
  4867 ;; *************** function _PIN_MANAGER_Initialize *****************
  4868 ;; Defined at:
  4869 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      void 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4883 ;;      Params:         0       0       0       0       0       0       0       0
  4884 ;;      Locals:         0       0       0       0       0       0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0
  4886 ;;      Totals:         0       0       0       0       0       0       0       0
  4887 ;;Total ram usage:        0 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    7
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_SYSTEM_Initialize
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _PIN_MANAGER_Initialize
  4899  1513                     _PIN_MANAGER_Initialize:	
  4900                           
  4901                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  4902                           
  4903                           ;incstack = 0
  4904                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4905  1513  3037               	movlw	55
  4906  1514  0022               	movlb	2	; select bank2
  4907  1515  008C               	movwf	12	;volatile
  4908                           
  4909                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4910  1516  018D               	clrf	13	;volatile
  4911                           
  4912                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x01;
  4913  1517  3001               	movlw	1
  4914  1518  008E               	movwf	14	;volatile
  4915                           
  4916                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x0C;
  4917  1519  300C               	movlw	12
  4918  151A  0021               	movlb	1	; select bank1
  4919  151B  008C               	movwf	12	;volatile
  4920                           
  4921                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  4922  151C  3060               	movlw	96
  4923  151D  008D               	movwf	13	;volatile
  4924                           
  4925                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x52;
  4926  151E  3052               	movlw	82
  4927  151F  008E               	movwf	14	;volatile
  4928                           
  4929                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x1B;
  4930  1520  301B               	movlw	27
  4931  1521  0023               	movlb	3	; select bank3
  4932  1522  008E               	movwf	14	;volatile
  4933                           
  4934                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  4935  1523  3040               	movlw	64
  4936  1524  008D               	movwf	13	;volatile
  4937                           
  4938                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x33;
  4939  1525  3033               	movlw	51
  4940  1526  008C               	movwf	12	;volatile
  4941                           
  4942                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4943  1527  0024               	movlb	4	; select bank4
  4944  1528  018D               	clrf	13	;volatile
  4945                           
  4946                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4947  1529  018C               	clrf	12	;volatile
  4948                           
  4949                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4950  152A  0021               	movlb	1	; select bank1
  4951  152B  1795               	bsf	21,7	;volatile
  4952                           
  4953                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  4954  152C  0022               	movlb	2	; select bank2
  4955  152D  019D               	clrf	29	;volatile
  4956  152E  0008               	return
  4957  152F                     __end_of_PIN_MANAGER_Initialize:	
  4958                           
  4959                           	psect	text8
  4960  11F4                     __ptext8:	
  4961 ;; *************** function _OSCILLATOR_Initialize *****************
  4962 ;; Defined at:
  4963 ;;		line 64 in file "mcc_generated_files/mcc.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      void 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4977 ;;      Params:         0       0       0       0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0       0
  4980 ;;      Totals:         0       0       0       0       0       0       0       0
  4981 ;;Total ram usage:        0 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    7
  4984 ;; This function calls:
  4985 ;;		Nothing
  4986 ;; This function is called by:
  4987 ;;		_SYSTEM_Initialize
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _OSCILLATOR_Initialize
  4993  11F4                     _OSCILLATOR_Initialize:	
  4994                           
  4995                           ;mcc_generated_files/mcc.c: 67:     OSCCON = 0xF0;
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4999  11F4  30F0               	movlw	240
  5000  11F5  0021               	movlb	1	; select bank1
  5001  11F6  0099               	movwf	25	;volatile
  5002                           
  5003                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  5004  11F7  0022               	movlb	2	; select bank2
  5005  11F8  0196               	clrf	22	;volatile
  5006  11F9  0008               	return
  5007  11FA                     __end_of_OSCILLATOR_Initialize:	
  5008                           
  5009                           	psect	text9
  5010  12C9                     __ptext9:	
  5011 ;; *************** function _MTOUCH_Initialize *****************
  5012 ;; Defined at:
  5013 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5027 ;;      Params:         0       0       0       0       0       0       0       0
  5028 ;;      Locals:         0       0       0       0       0       0       0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0
  5030 ;;      Totals:         0       0       0       0       0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:   11
  5034 ;; This function calls:
  5035 ;;		_MTOUCH_Button_InitializeAll
  5036 ;;		_MTOUCH_Sensor_InitializeAll
  5037 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5038 ;;		_MTOUCH_Sensor_Scan_Initialize
  5039 ;; This function is called by:
  5040 ;;		_SYSTEM_Initialize
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _MTOUCH_Initialize
  5046  12C9                     _MTOUCH_Initialize:	
  5047                           
  5048                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  5049                           
  5050                           ;incstack = 0
  5051                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5052  12C9  3193  2341  3192   	fcall	_MTOUCH_Sensor_InitializeAll
  5053                           
  5054                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  5055  12CC  3195  2569  3192   	fcall	_MTOUCH_Button_InitializeAll
  5056                           
  5057                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  5058  12CF  3193  23D2  3192   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5059                           
  5060                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  5061  12D2  3193  2321         	fcall	_MTOUCH_Sensor_Scan_Initialize
  5062  12D4  0008               	return
  5063  12D5                     __end_of_MTOUCH_Initialize:	
  5064                           
  5065                           	psect	text10
  5066  1341                     __ptext10:	
  5067 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  5068 ;; Defined at:
  5069 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;		None
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  sensor          1   14[BANK0 ] enum E2878
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  1    wreg      void 
  5076 ;; Registers used:
  5077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5083 ;;      Params:         0       0       0       0       0       0       0       0
  5084 ;;      Locals:         0       1       0       0       0       0       0       0
  5085 ;;      Temps:          0       1       0       0       0       0       0       0
  5086 ;;      Totals:         0       2       0       0       0       0       0       0
  5087 ;;Total ram usage:        2 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:   10
  5090 ;; This function calls:
  5091 ;;		_MTOUCH_Sensor_Initialize
  5092 ;; This function is called by:
  5093 ;;		_MTOUCH_Initialize
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _MTOUCH_Sensor_InitializeAll
  5099  1341                     _MTOUCH_Sensor_InitializeAll:	
  5100                           
  5101                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  5102                           
  5103                           ;incstack = 0
  5104                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  5105  1341  0020               	movlb	0	; select bank0
  5106  1342  01AE               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  5107  1343                     l6640:	
  5108                           
  5109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  5110  1343  082E               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  5111  1344  3194  2444  3193   	fcall	_MTOUCH_Sensor_Initialize
  5112                           
  5113                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  5114  1347  3001               	movlw	1
  5115  1348  0020               	movlb	0	; select bank0
  5116  1349  00AD               	movwf	??_MTOUCH_Sensor_InitializeAll
  5117  134A  082D               	movf	??_MTOUCH_Sensor_InitializeAll,w
  5118  134B  07AE               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  5119  134C  3003               	movlw	3
  5120  134D  022E               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  5121  134E  1803               	btfsc	3,0
  5122  134F  0008               	return
  5123  1350  2B43               	goto	l6640
  5124  1351                     __end_of_MTOUCH_Sensor_InitializeAll:	
  5125                           
  5126                           	psect	text11
  5127  1444                     __ptext11:	
  5128 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  5129 ;; Defined at:
  5130 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  sensor          1    wreg     enum E2878
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  sensor          1   12[BANK0 ] enum E2878
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  1    wreg      enum E2882
  5137 ;; Registers used:
  5138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5144 ;;      Params:         0       0       0       0       0       0       0       0
  5145 ;;      Locals:         0       1       0       0       0       0       0       0
  5146 ;;      Temps:          0       1       0       0       0       0       0       0
  5147 ;;      Totals:         0       2       0       0       0       0       0       0
  5148 ;;Total ram usage:        2 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    9
  5151 ;; This function calls:
  5152 ;;		_MTOUCH_Sensor_Calibrate
  5153 ;;		_MTOUCH_Sensor_Enable
  5154 ;;		_Sensor_Sampled_Reset
  5155 ;;		___bmul
  5156 ;; This function is called by:
  5157 ;;		_MTOUCH_Sensor_InitializeAll
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function _MTOUCH_Sensor_Initialize
  5163  1444                     _MTOUCH_Sensor_Initialize:	
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5167                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  5168  1444  0020               	movlb	0	; select bank0
  5169  1445  00AC               	movwf	MTOUCH_Sensor_Initialize@sensor
  5170                           
  5171                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  5172  1446  082C               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5173  1447  3193  23AB  3194   	fcall	_MTOUCH_Sensor_Enable
  5174                           
  5175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  5176  144A  0020               	movlb	0	; select bank0
  5177  144B  082C               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5178  144C  3193  2398  3194   	fcall	_MTOUCH_Sensor_Calibrate
  5179                           
  5180                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  5181  144F  3009               	movlw	9
  5182  1450  0020               	movlb	0	; select bank0
  5183  1451  00AB               	movwf	??_MTOUCH_Sensor_Initialize
  5184  1452  082B               	movf	??_MTOUCH_Sensor_Initialize,w
  5185  1453  00A5               	movwf	___bmul@multiplicand
  5186  1454  082C               	movf	MTOUCH_Sensor_Initialize@sensor,w
  5187  1455  3193  2362  3194   	fcall	___bmul
  5188  1458  3ED0               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  5189  1459  3192  224A         	fcall	_Sensor_Sampled_Reset
  5190  145B  0008               	return
  5191  145C                     __end_of_MTOUCH_Sensor_Initialize:	
  5192                           
  5193                           	psect	text12
  5194  13AB                     __ptext12:	
  5195 ;; *************** function _MTOUCH_Sensor_Enable *****************
  5196 ;; Defined at:
  5197 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  sensor          1    wreg     enum E2878
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  sensor          1   10[BANK0 ] enum E2878
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5211 ;;      Params:         0       0       0       0       0       0       0       0
  5212 ;;      Locals:         0       1       0       0       0       0       0       0
  5213 ;;      Temps:          0       1       0       0       0       0       0       0
  5214 ;;      Totals:         0       2       0       0       0       0       0       0
  5215 ;;Total ram usage:        2 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    8
  5218 ;; This function calls:
  5219 ;;		___bmul
  5220 ;; This function is called by:
  5221 ;;		_MTOUCH_Sensor_Initialize
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _MTOUCH_Sensor_Enable
  5227  13AB                     _MTOUCH_Sensor_Enable:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5231                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  5232  13AB  0020               	movlb	0	; select bank0
  5233  13AC  00AA               	movwf	MTOUCH_Sensor_Enable@sensor
  5234                           
  5235                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  5236  13AD  3003               	movlw	3
  5237  13AE  022A               	subwf	MTOUCH_Sensor_Enable@sensor,w
  5238  13AF  1803               	skipnc
  5239  13B0  0008               	return
  5240                           
  5241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  5242  13B1  3009               	movlw	9
  5243  13B2  00A9               	movwf	??_MTOUCH_Sensor_Enable
  5244  13B3  0829               	movf	??_MTOUCH_Sensor_Enable,w
  5245  13B4  00A5               	movwf	___bmul@multiplicand
  5246  13B5  082A               	movf	MTOUCH_Sensor_Enable@sensor,w
  5247  13B6  3193  2362         	fcall	___bmul
  5248  13B8  3ED8               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  5249  13B9  0086               	movwf	6
  5250  13BA  3001               	movlw	1	; select bank3/4
  5251  13BB  0087               	movwf	7
  5252  13BC  1581               	bsf	1,3
  5253  13BD  0008               	return
  5254  13BE                     __end_of_MTOUCH_Sensor_Enable:	
  5255                           
  5256                           	psect	text13
  5257  1569                     __ptext13:	
  5258 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  5259 ;; Defined at:
  5260 ;;		line 177 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;		None
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  button          1   16[BANK0 ] enum E3069
  5265 ;; Return value:  Size  Location     Type
  5266 ;;                  1    wreg      void 
  5267 ;; Registers used:
  5268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5274 ;;      Params:         0       0       0       0       0       0       0       0
  5275 ;;      Locals:         0       1       0       0       0       0       0       0
  5276 ;;      Temps:          0       1       0       0       0       0       0       0
  5277 ;;      Totals:         0       2       0       0       0       0       0       0
  5278 ;;Total ram usage:        2 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:   10
  5281 ;; This function calls:
  5282 ;;		_MTOUCH_Button_Initialize
  5283 ;;		_memcpy
  5284 ;; This function is called by:
  5285 ;;		_MTOUCH_Initialize
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           
  5290                           ;psect for function _MTOUCH_Button_InitializeAll
  5291  1569                     _MTOUCH_Button_InitializeAll:	
  5292                           
  5293                           ;mcc_generated_files/mtouch/mtouch_button.c: 179:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 181:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  5294                           
  5295                           ;incstack = 0
  5296                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5297  1569  3000               	movlw	low (_mtouch_button_init| (0+32768))
  5298  156A  0020               	movlb	0	; select bank0
  5299  156B  00A5               	movwf	memcpy@s1
  5300  156C  3098               	movlw	high (_mtouch_button_init| (0+32768))
  5301  156D  00A6               	movwf	memcpy@s1+1
  5302  156E  3030               	movlw	48
  5303  156F  00A7               	movwf	memcpy@n
  5304  1570  3000               	movlw	0
  5305  1571  00A8               	movwf	memcpy@n+1
  5306  1572  30A0               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  5307  1573  3196  26B7  3195   	fcall	_memcpy
  5308                           
  5309                           ;mcc_generated_files/mtouch/mtouch_button.c: 183:     for (button = 0; button < 3u; butt
      +                          on++)
  5310  1576  0020               	movlb	0	; select bank0
  5311  1577  01B0               	clrf	MTOUCH_Button_InitializeAll@button
  5312  1578                     l6654:	
  5313                           
  5314                           ;mcc_generated_files/mtouch/mtouch_button.c: 184:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 185:         MTOUCH_Button_Initialize(button);
  5315  1578  0830               	movf	MTOUCH_Button_InitializeAll@button,w
  5316  1579  3197  27C9  3195   	fcall	_MTOUCH_Button_Initialize
  5317                           
  5318                           ;mcc_generated_files/mtouch/mtouch_button.c: 186:     }
  5319  157C  3001               	movlw	1
  5320  157D  0020               	movlb	0	; select bank0
  5321  157E  00AF               	movwf	??_MTOUCH_Button_InitializeAll
  5322  157F  082F               	movf	??_MTOUCH_Button_InitializeAll,w
  5323  1580  07B0               	addwf	MTOUCH_Button_InitializeAll@button,f
  5324  1581  3003               	movlw	3
  5325  1582  0230               	subwf	MTOUCH_Button_InitializeAll@button,w
  5326  1583  1803               	btfsc	3,0
  5327  1584  0008               	return
  5328  1585  2D78               	goto	l6654
  5329  1586                     __end_of_MTOUCH_Button_InitializeAll:	
  5330                           
  5331                           	psect	text14
  5332  16B7                     __ptext14:	
  5333 ;; *************** function _memcpy *****************
  5334 ;; Defined at:
  5335 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  d1              1    wreg     PTR void 
  5338 ;;		 -> mtouch_button(48), 
  5339 ;;  s1              2    5[BANK0 ] PTR const void 
  5340 ;;		 -> mtouch_button_init(48), 
  5341 ;;  n               2    7[BANK0 ] unsigned int 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;  d1              1   13[BANK0 ] PTR void 
  5344 ;;		 -> mtouch_button(48), 
  5345 ;;  s               2   10[BANK0 ] PTR const unsigned char 
  5346 ;;		 -> mtouch_button_init(48), 
  5347 ;;  d               1   14[BANK0 ] PTR unsigned char 
  5348 ;;		 -> mtouch_button(48), 
  5349 ;;  tmp             1   12[BANK0 ] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      PTR void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5359 ;;      Params:         0       4       0       0       0       0       0       0
  5360 ;;      Locals:         0       5       0       0       0       0       0       0
  5361 ;;      Temps:          0       1       0       0       0       0       0       0
  5362 ;;      Totals:         0      10       0       0       0       0       0       0
  5363 ;;Total ram usage:       10 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    7
  5366 ;; This function calls:
  5367 ;;		Nothing
  5368 ;; This function is called by:
  5369 ;;		_MTOUCH_Button_InitializeAll
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _memcpy
  5375  16B7                     _memcpy:	
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  5379                           ;memcpy@d1 stored from wreg
  5380  16B7  0020               	movlb	0	; select bank0
  5381  16B8  00AD               	movwf	memcpy@d1
  5382  16B9  0826               	movf	memcpy@s1+1,w
  5383  16BA  00AB               	movwf	memcpy@s+1
  5384  16BB  0825               	movf	memcpy@s1,w
  5385  16BC  00AA               	movwf	memcpy@s
  5386  16BD  082D               	movf	memcpy@d1,w
  5387  16BE  00A9               	movwf	??_memcpy
  5388  16BF  0829               	movf	??_memcpy,w
  5389  16C0  00AE               	movwf	memcpy@d
  5390  16C1                     l4718:	
  5391  16C1  3001               	movlw	1
  5392  16C2  02A7               	subwf	memcpy@n,f
  5393  16C3  3000               	movlw	0
  5394  16C4  3BA8               	subwfb	memcpy@n+1,f
  5395  16C5  0A27               	incf	memcpy@n,w
  5396  16C6  1903               	btfsc	3,2
  5397  16C7  0A28               	incf	memcpy@n+1,w
  5398  16C8  1903               	btfsc	3,2
  5399  16C9  0008               	return
  5400  16CA  082A               	movf	memcpy@s,w
  5401  16CB  0084               	movwf	4
  5402  16CC  082B               	movf	memcpy@s+1,w
  5403  16CD  0085               	movwf	5
  5404  16CE  0800               	movf	0,w	;code access
  5405  16CF  00A9               	movwf	??_memcpy
  5406  16D0  0829               	movf	??_memcpy,w
  5407  16D1  00AC               	movwf	memcpy@tmp
  5408  16D2  3001               	movlw	1
  5409  16D3  07AA               	addwf	memcpy@s,f
  5410  16D4  3000               	movlw	0
  5411  16D5  3DAB               	addwfc	memcpy@s+1,f
  5412  16D6  082C               	movf	memcpy@tmp,w
  5413  16D7  00A9               	movwf	??_memcpy
  5414  16D8  082E               	movf	memcpy@d,w
  5415  16D9  0086               	movwf	6
  5416  16DA  3001               	movlw	1	; select bank2/3
  5417  16DB  0087               	movwf	7
  5418  16DC  0829               	movf	??_memcpy,w
  5419  16DD  0081               	movwf	1
  5420  16DE  3001               	movlw	1
  5421  16DF  00A9               	movwf	??_memcpy
  5422  16E0  0829               	movf	??_memcpy,w
  5423  16E1  07AE               	addwf	memcpy@d,f
  5424  16E2  2EC1               	goto	l4718
  5425  16E3                     __end_of_memcpy:	
  5426                           
  5427                           	psect	text15
  5428  12BD                     __ptext15:	
  5429 ;; *************** function _EXT_INT_Initialize *****************
  5430 ;; Defined at:
  5431 ;;		line 59 in file "mcc_generated_files/ext_int.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;		None
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  1    wreg      void 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0, pclath, cstack
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5445 ;;      Params:         0       0       0       0       0       0       0       0
  5446 ;;      Locals:         0       0       0       0       0       0       0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0
  5448 ;;      Totals:         0       0       0       0       0       0       0       0
  5449 ;;Total ram usage:        0 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    8
  5452 ;; This function calls:
  5453 ;;		_INT_SetInterruptHandler
  5454 ;; This function is called by:
  5455 ;;		_SYSTEM_Initialize
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function _EXT_INT_Initialize
  5461  12BD                     _EXT_INT_Initialize:	
  5462                           
  5463                           ;mcc_generated_files/ext_int.c: 64:     (INTCONbits.INTF = 0);
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5467  12BD  108B               	bcf	11,1	;volatile
  5468                           
  5469                           ;mcc_generated_files/ext_int.c: 65:     (OPTION_REGbits.INTEDG = 0);
  5470  12BE  0021               	movlb	1	; select bank1
  5471  12BF  1315               	bcf	21,6	;volatile
  5472                           
  5473                           ;mcc_generated_files/ext_int.c: 67:     INT_SetInterruptHandler(INT_DefaultInterruptHand
      +                          ler);
  5474  12C0  30C9               	movlw	low _INT_DefaultInterruptHandler
  5475  12C1  0020               	movlb	0	; select bank0
  5476  12C2  00A5               	movwf	INT_SetInterruptHandler@InterruptHandler
  5477  12C3  3011               	movlw	high _INT_DefaultInterruptHandler
  5478  12C4  00A6               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  5479  12C5  3192  2280         	fcall	_INT_SetInterruptHandler
  5480                           
  5481                           ;mcc_generated_files/ext_int.c: 68:     (INTCONbits.INTE = 1);
  5482  12C7  160B               	bsf	11,4	;volatile
  5483  12C8  0008               	return
  5484  12C9                     __end_of_EXT_INT_Initialize:	
  5485                           
  5486                           	psect	text16
  5487  1280                     __ptext16:	
  5488 ;; *************** function _INT_SetInterruptHandler *****************
  5489 ;; Defined at:
  5490 ;;		line 50 in file "mcc_generated_files/ext_int.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  InterruptHan    2    5[BANK0 ] PTR FTN()void 
  5493 ;;		 -> INT_DefaultInterruptHandler(1), 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		wreg
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5505 ;;      Params:         0       2       0       0       0       0       0       0
  5506 ;;      Locals:         0       0       0       0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0
  5508 ;;      Totals:         0       2       0       0       0       0       0       0
  5509 ;;Total ram usage:        2 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    7
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_EXT_INT_Initialize
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function _INT_SetInterruptHandler
  5521  1280                     _INT_SetInterruptHandler:	
  5522                           
  5523                           ;mcc_generated_files/ext_int.c: 51:     INT_InterruptHandler = InterruptHandler;
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  5527  1280  0020               	movlb	0	; select bank0
  5528  1281  0826               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  5529  1282  0022               	movlb	2	; select bank2
  5530  1283  00CB               	movwf	(_INT_InterruptHandler+1)^(0+256)
  5531  1284  0020               	movlb	0	; select bank0
  5532  1285  0825               	movf	INT_SetInterruptHandler@InterruptHandler,w
  5533  1286  0022               	movlb	2	; select bank2
  5534  1287  00CA               	movwf	_INT_InterruptHandler^(0+256)
  5535  1288  0008               	return
  5536  1289                     __end_of_INT_SetInterruptHandler:	
  5537                           
  5538                           	psect	text17
  5539  08F6                     __ptext17:	
  5540 ;; *************** function _EUSART_Initialize *****************
  5541 ;; Defined at:
  5542 ;;		line 85 in file "mcc_generated_files/eusart.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;		None
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;		None
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  1    wreg      void 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0, pclath, cstack
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5556 ;;      Params:         0       0       0       0       0       0       0       0
  5557 ;;      Locals:         0       0       0       0       0       0       0       0
  5558 ;;      Temps:          0       1       0       0       0       0       0       0
  5559 ;;      Totals:         0       1       0       0       0       0       0       0
  5560 ;;Total ram usage:        1 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    8
  5563 ;; This function calls:
  5564 ;;		_EUSART_SetErrorHandler
  5565 ;;		_EUSART_SetFramingErrorHandler
  5566 ;;		_EUSART_SetOverrunErrorHandler
  5567 ;;		_EUSART_SetRxInterruptHandler
  5568 ;;		_EUSART_SetTxInterruptHandler
  5569 ;; This function is called by:
  5570 ;;		_SYSTEM_Initialize
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           
  5575                           ;psect for function _EUSART_Initialize
  5576  08F6                     _EUSART_Initialize:	
  5577                           
  5578                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  5579                           
  5580                           ;incstack = 0
  5581                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5582  08F6  0021               	movlb	1	; select bank1
  5583  08F7  1291               	bcf	17,5	;volatile
  5584                           
  5585                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5586  08F8  303F               	movlw	low _EUSART_Receive_ISR
  5587  08F9  0020               	movlb	0	; select bank0
  5588  08FA  00A5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  5589  08FB  3008               	movlw	high _EUSART_Receive_ISR
  5590  08FC  00A6               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  5591  08FD  3192  226E  3188   	fcall	_EUSART_SetRxInterruptHandler
  5592                           
  5593                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  5594  0900  0021               	movlb	1	; select bank1
  5595  0901  1211               	bcf	17,4	;volatile
  5596                           
  5597                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5598  0902  302F               	movlw	low _EUSART_Transmit_ISR
  5599  0903  0020               	movlb	0	; select bank0
  5600  0904  00A5               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  5601  0905  3015               	movlw	high _EUSART_Transmit_ISR
  5602  0906  00A6               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  5603  0907  3192  2277  3188   	fcall	_EUSART_SetTxInterruptHandler
  5604                           
  5605                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x0A;
  5606  090A  300A               	movlw	10
  5607  090B  0023               	movlb	3	; select bank3
  5608  090C  009F               	movwf	31	;volatile
  5609                           
  5610                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  5611  090D  3090               	movlw	144
  5612  090E  009D               	movwf	29	;volatile
  5613                           
  5614                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  5615  090F  3024               	movlw	36
  5616  0910  009E               	movwf	30	;volatile
  5617                           
  5618                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  5619  0911  3040               	movlw	64
  5620  0912  009B               	movwf	27	;volatile
  5621                           
  5622                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  5623  0913  3003               	movlw	3
  5624  0914  009C               	movwf	28	;volatile
  5625                           
  5626                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5627  0915  30C8               	movlw	low _EUSART_DefaultFramingErrorHandler
  5628  0916  0020               	movlb	0	; select bank0
  5629  0917  00A5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5630  0918  3011               	movlw	high _EUSART_DefaultFramingErrorHandler
  5631  0919  00A6               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  5632  091A  3192  225C  3188   	fcall	_EUSART_SetFramingErrorHandler
  5633                           
  5634                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5635  091D  30D8               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5636  091E  0020               	movlb	0	; select bank0
  5637  091F  00A5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5638  0920  3011               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5639  0921  00A6               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  5640  0922  3192  2265  3188   	fcall	_EUSART_SetOverrunErrorHandler
  5641                           
  5642                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5643  0925  30CC               	movlw	low _EUSART_DefaultErrorHandler
  5644  0926  0020               	movlb	0	; select bank0
  5645  0927  00A5               	movwf	EUSART_SetErrorHandler@interruptHandler
  5646  0928  3011               	movlw	high _EUSART_DefaultErrorHandler
  5647  0929  00A6               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  5648  092A  3192  2253         	fcall	_EUSART_SetErrorHandler
  5649                           
  5650                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  5651  092C  0021               	movlb	1	; select bank1
  5652  092D  01DE               	clrf	_eusartRxLastError^(0+128)	;volatile
  5653                           
  5654                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  5655  092E  01E1               	clrf	_eusartTxHead^(0+128)	;volatile
  5656                           
  5657                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  5658  092F  01E0               	clrf	_eusartTxTail^(0+128)	;volatile
  5659                           
  5660                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5661  0930  3008               	movlw	8
  5662  0931  0020               	movlb	0	; select bank0
  5663  0932  00A7               	movwf	??_EUSART_Initialize
  5664  0933  0827               	movf	??_EUSART_Initialize,w
  5665  0934  0021               	movlb	1	; select bank1
  5666  0935  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5667                           
  5668                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  5669  0936  0020               	movlb	0	; select bank0
  5670  0937  01E7               	clrf	_eusartRxHead	;volatile
  5671                           
  5672                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  5673  0938  01E6               	clrf	_eusartRxTail	;volatile
  5674                           
  5675                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  5676  0939  0021               	movlb	1	; select bank1
  5677  093A  01DF               	clrf	_eusartRxCount^(0+128)	;volatile
  5678                           
  5679                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  5680  093B  1691               	bsf	17,5	;volatile
  5681  093C  0008               	return
  5682  093D                     __end_of_EUSART_Initialize:	
  5683                           
  5684                           	psect	text18
  5685  1277                     __ptext18:	
  5686 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5687 ;; Defined at:
  5688 ;;		line 284 in file "mcc_generated_files/eusart.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  interruptHan    2    5[BANK0 ] PTR FTN()void 
  5691 ;;		 -> EUSART_Transmit_ISR(1), 
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		wreg
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5703 ;;      Params:         0       2       0       0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0
  5706 ;;      Totals:         0       2       0       0       0       0       0       0
  5707 ;;Total ram usage:        2 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    7
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_EUSART_Initialize
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _EUSART_SetTxInterruptHandler
  5719  1277                     _EUSART_SetTxInterruptHandler:	
  5720                           
  5721                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5722                           
  5723                           ;incstack = 0
  5724                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5725  1277  0020               	movlb	0	; select bank0
  5726  1278  0826               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  5727  1279  0022               	movlb	2	; select bank2
  5728  127A  00D5               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  5729  127B  0020               	movlb	0	; select bank0
  5730  127C  0825               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  5731  127D  0022               	movlb	2	; select bank2
  5732  127E  00D4               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  5733  127F  0008               	return
  5734  1280                     __end_of_EUSART_SetTxInterruptHandler:	
  5735                           
  5736                           	psect	text19
  5737  126E                     __ptext19:	
  5738 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5739 ;; Defined at:
  5740 ;;		line 288 in file "mcc_generated_files/eusart.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  interruptHan    2    5[BANK0 ] PTR FTN()void 
  5743 ;;		 -> EUSART_Receive_ISR(1), 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5755 ;;      Params:         0       2       0       0       0       0       0       0
  5756 ;;      Locals:         0       0       0       0       0       0       0       0
  5757 ;;      Temps:          0       0       0       0       0       0       0       0
  5758 ;;      Totals:         0       2       0       0       0       0       0       0
  5759 ;;Total ram usage:        2 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    7
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_EUSART_Initialize
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _EUSART_SetRxInterruptHandler
  5771  126E                     _EUSART_SetRxInterruptHandler:	
  5772                           
  5773                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5777  126E  0020               	movlb	0	; select bank0
  5778  126F  0826               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5779  1270  0022               	movlb	2	; select bank2
  5780  1271  00D3               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  5781  1272  0020               	movlb	0	; select bank0
  5782  1273  0825               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5783  1274  0022               	movlb	2	; select bank2
  5784  1275  00D2               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  5785  1276  0008               	return
  5786  1277                     __end_of_EUSART_SetRxInterruptHandler:	
  5787                           
  5788                           	psect	text20
  5789  1265                     __ptext20:	
  5790 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5791 ;; Defined at:
  5792 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  interruptHan    2    5[BANK0 ] PTR FTN()void 
  5795 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  1    wreg      void 
  5800 ;; Registers used:
  5801 ;;		wreg
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5807 ;;      Params:         0       2       0       0       0       0       0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0       0
  5810 ;;      Totals:         0       2       0       0       0       0       0       0
  5811 ;;Total ram usage:        2 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    7
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_EUSART_Initialize
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           
  5822                           ;psect for function _EUSART_SetOverrunErrorHandler
  5823  1265                     _EUSART_SetOverrunErrorHandler:	
  5824                           
  5825                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
  5826                           
  5827                           ;incstack = 0
  5828                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5829  1265  0020               	movlb	0	; select bank0
  5830  1266  0826               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  5831  1267  0022               	movlb	2	; select bank2
  5832  1268  00CF               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5833  1269  0020               	movlb	0	; select bank0
  5834  126A  0825               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5835  126B  0022               	movlb	2	; select bank2
  5836  126C  00CE               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5837  126D  0008               	return
  5838  126E                     __end_of_EUSART_SetOverrunErrorHandler:	
  5839                           
  5840                           	psect	text21
  5841  125C                     __ptext21:	
  5842 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5843 ;; Defined at:
  5844 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  interruptHan    2    5[BANK0 ] PTR FTN()void 
  5847 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5848 ;; Auto vars:     Size  Location     Type
  5849 ;;		None
  5850 ;; Return value:  Size  Location     Type
  5851 ;;                  1    wreg      void 
  5852 ;; Registers used:
  5853 ;;		wreg
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5859 ;;      Params:         0       2       0       0       0       0       0       0
  5860 ;;      Locals:         0       0       0       0       0       0       0       0
  5861 ;;      Temps:          0       0       0       0       0       0       0       0
  5862 ;;      Totals:         0       2       0       0       0       0       0       0
  5863 ;;Total ram usage:        2 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:    7
  5866 ;; This function calls:
  5867 ;;		Nothing
  5868 ;; This function is called by:
  5869 ;;		_EUSART_Initialize
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           
  5874                           ;psect for function _EUSART_SetFramingErrorHandler
  5875  125C                     _EUSART_SetFramingErrorHandler:	
  5876                           
  5877                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
  5878                           
  5879                           ;incstack = 0
  5880                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5881  125C  0020               	movlb	0	; select bank0
  5882  125D  0826               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5883  125E  0022               	movlb	2	; select bank2
  5884  125F  00D1               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5885  1260  0020               	movlb	0	; select bank0
  5886  1261  0825               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5887  1262  0022               	movlb	2	; select bank2
  5888  1263  00D0               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5889  1264  0008               	return
  5890  1265                     __end_of_EUSART_SetFramingErrorHandler:	
  5891                           
  5892                           	psect	text22
  5893  1253                     __ptext22:	
  5894 ;; *************** function _EUSART_SetErrorHandler *****************
  5895 ;; Defined at:
  5896 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  interruptHan    2    5[BANK0 ] PTR FTN()void 
  5899 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;		None
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		wreg
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5911 ;;      Params:         0       2       0       0       0       0       0       0
  5912 ;;      Locals:         0       0       0       0       0       0       0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0       0
  5914 ;;      Totals:         0       2       0       0       0       0       0       0
  5915 ;;Total ram usage:        2 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    7
  5918 ;; This function calls:
  5919 ;;		Nothing
  5920 ;; This function is called by:
  5921 ;;		_EUSART_Initialize
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           
  5926                           ;psect for function _EUSART_SetErrorHandler
  5927  1253                     _EUSART_SetErrorHandler:	
  5928                           
  5929                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
  5930                           
  5931                           ;incstack = 0
  5932                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5933  1253  0020               	movlb	0	; select bank0
  5934  1254  0826               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5935  1255  0022               	movlb	2	; select bank2
  5936  1256  00CD               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5937  1257  0020               	movlb	0	; select bank0
  5938  1258  0825               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5939  1259  0022               	movlb	2	; select bank2
  5940  125A  00CC               	movwf	_EUSART_ErrorHandler^(0+256)
  5941  125B  0008               	return
  5942  125C                     __end_of_EUSART_SetErrorHandler:	
  5943                           
  5944                           	psect	text23
  5945  154C                     __ptext23:	
  5946 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5947 ;; Defined at:
  5948 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      _Bool 
  5955 ;; Registers used:
  5956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5962 ;;      Params:         0       0       0       0       0       0       0       0
  5963 ;;      Locals:         0       0       0       0       0       0       0       0
  5964 ;;      Temps:          0       0       0       1       0       0       0       0
  5965 ;;      Totals:         0       0       0       1       0       0       0       0
  5966 ;;Total ram usage:        1 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:   20
  5969 ;; This function calls:
  5970 ;;		_MTOUCH_Button_ServiceAll
  5971 ;;		_MTOUCH_Sensor_SampleAll
  5972 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5973 ;;		_MTOUCH_Tick
  5974 ;;		_MTOUCH_needReburst
  5975 ;; This function is called by:
  5976 ;;		_main
  5977 ;;		_touch_example
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _MTOUCH_Service_Mainloop
  5983  154C                     _MTOUCH_Service_Mainloop:	
  5984                           
  5985                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  5986                           
  5987                           ;incstack = 0
  5988 ;; hardware stack exceeded
  5989                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5990  154C  0021               	movlb	1	; select bank1
  5991  154D  01E4               	clrf	_mtouch_time_toScan^(0+128)
  5992  154E  0AE4               	incf	_mtouch_time_toScan^(0+128),f
  5993                           
  5994                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  5995                           
  5996                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  5997  154F  3193  23FE  3195   	fcall	_MTOUCH_Sensor_SampleAll
  5998  1552  3A00               	xorlw	0
  5999  1553  1D03               	skipz
  6000  1554  2D57               	goto	l6768
  6001                           
  6002                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  6003  1555  3000               	movlw	0
  6004  1556  0008               	return
  6005  1557                     l6768:	
  6006                           
  6007                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  6008  1557  3193  2311  3195   	fcall	_MTOUCH_Button_ServiceAll
  6009                           
  6010                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  6011  155A  3180  2002  3195   	fcall	_MTOUCH_needReburst
  6012  155D  0022               	movlb	2	; select bank2
  6013  155E  00DA               	movwf	??_MTOUCH_Service_Mainloop^(0+256)
  6014  155F  085A               	movf	??_MTOUCH_Service_Mainloop^(0+256),w
  6015  1560  0021               	movlb	1	; select bank1
  6016  1561  00E4               	movwf	_mtouch_time_toScan^(0+128)
  6017                           
  6018                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  6019  1562  3193  23D2  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6020                           
  6021                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  6022  1565  3191  21D5         	fcall	_MTOUCH_Tick
  6023                           
  6024                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  6025  1567  3001               	movlw	1
  6026  1568  0008               	return
  6027  1569                     __end_of_MTOUCH_Service_Mainloop:	
  6028                           
  6029                           	psect	text24
  6030  0002                     __ptext24:	
  6031 ;; *************** function _MTOUCH_needReburst *****************
  6032 ;; Defined at:
  6033 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;		None
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  needReburst     1    0        _Bool 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      _Bool 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6047 ;;      Params:         0       0       0       0       0       0       0       0
  6048 ;;      Locals:         0       1       0       0       0       0       0       0
  6049 ;;      Temps:          0       0       0       0       0       0       0       0
  6050 ;;      Totals:         0       1       0       0       0       0       0       0
  6051 ;;Total ram usage:        1 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    7
  6054 ;; This function calls:
  6055 ;;		Nothing
  6056 ;; This function is called by:
  6057 ;;		_MTOUCH_Service_Mainloop
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           
  6062                           ;psect for function _MTOUCH_needReburst
  6063  0002                     _MTOUCH_needReburst:	
  6064                           
  6065                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  6069  0002  3000               	movlw	0
  6070  0003  0008               	return
  6071  0004                     __end_of_MTOUCH_needReburst:	
  6072                           
  6073                           	psect	text25
  6074  11D5                     __ptext25:	
  6075 ;; *************** function _MTOUCH_Tick *****************
  6076 ;; Defined at:
  6077 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6091 ;;      Params:         0       0       0       0       0       0       0       0
  6092 ;;      Locals:         0       0       0       0       0       0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0       0
  6094 ;;      Totals:         0       0       0       0       0       0       0       0
  6095 ;;Total ram usage:        0 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    9
  6098 ;; This function calls:
  6099 ;;		_MTOUCH_Button_Tick
  6100 ;; This function is called by:
  6101 ;;		_MTOUCH_Service_Mainloop
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           
  6106                           ;psect for function _MTOUCH_Tick
  6107  11D5                     _MTOUCH_Tick:	
  6108                           
  6109                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  6110                           
  6111                           ;incstack = 0
  6112                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6113  11D5  3194  242C         	fcall	_MTOUCH_Button_Tick
  6114  11D7  0008               	return
  6115  11D8                     __end_of_MTOUCH_Tick:	
  6116                           
  6117                           	psect	text26
  6118  142C                     __ptext26:	
  6119 ;; *************** function _MTOUCH_Button_Tick *****************
  6120 ;; Defined at:
  6121 ;;		line 339 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;  i               1    9[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      void 
  6128 ;; Registers used:
  6129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6135 ;;      Params:         0       0       0       0       0       0       0       0
  6136 ;;      Locals:         0       1       0       0       0       0       0       0
  6137 ;;      Temps:          0       1       0       0       0       0       0       0
  6138 ;;      Totals:         0       2       0       0       0       0       0       0
  6139 ;;Total ram usage:        2 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    8
  6142 ;; This function calls:
  6143 ;;		_Button_Tick_helper
  6144 ;; This function is called by:
  6145 ;;		_MTOUCH_Tick
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _MTOUCH_Button_Tick
  6151  142C                     _MTOUCH_Button_Tick:	
  6152                           
  6153                           ;mcc_generated_files/mtouch/mtouch_button.c: 341:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 342:     for (i = 0; i < 3u; i++)
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6157  142C  0020               	movlb	0	; select bank0
  6158  142D  01A9               	clrf	MTOUCH_Button_Tick@i
  6159  142E                     l4892:	
  6160                           
  6161                           ;mcc_generated_files/mtouch/mtouch_button.c: 343:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 344:         Button_Tick_helper(&mtouch_button[i]);
  6162  142E  0829               	movf	MTOUCH_Button_Tick@i,w
  6163  142F  00A8               	movwf	??_MTOUCH_Button_Tick
  6164  1430  3003               	movlw	3
  6165  1431                     u4595:	
  6166  1431  35A8               	lslf	??_MTOUCH_Button_Tick,f
  6167  1432  3EFF               	addlw	-1
  6168  1433  1D03               	skipz
  6169  1434  2C31               	goto	u4595
  6170  1435  3528               	lslf	??_MTOUCH_Button_Tick,w
  6171  1436  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  6172  1437  3196  260F  3194   	fcall	_Button_Tick_helper
  6173                           
  6174                           ;mcc_generated_files/mtouch/mtouch_button.c: 345:     }
  6175  143A  3001               	movlw	1
  6176  143B  0020               	movlb	0	; select bank0
  6177  143C  00A8               	movwf	??_MTOUCH_Button_Tick
  6178  143D  0828               	movf	??_MTOUCH_Button_Tick,w
  6179  143E  07A9               	addwf	MTOUCH_Button_Tick@i,f
  6180  143F  3003               	movlw	3
  6181  1440  0229               	subwf	MTOUCH_Button_Tick@i,w
  6182  1441  1803               	btfsc	3,0
  6183  1442  0008               	return
  6184  1443  2C2E               	goto	l4892
  6185  1444                     __end_of_MTOUCH_Button_Tick:	
  6186                           
  6187                           	psect	text27
  6188  160F                     __ptext27:	
  6189 ;; *************** function _Button_Tick_helper *****************
  6190 ;; Defined at:
  6191 ;;		line 347 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;  button          1    wreg     PTR struct .
  6194 ;;		 -> mtouch_button(48), 
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;  button          1    7[BANK0 ] PTR struct .
  6197 ;;		 -> mtouch_button(48), 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  1    wreg      void 
  6200 ;; Registers used:
  6201 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6207 ;;      Params:         0       0       0       0       0       0       0       0
  6208 ;;      Locals:         0       1       0       0       0       0       0       0
  6209 ;;      Temps:          0       2       0       0       0       0       0       0
  6210 ;;      Totals:         0       3       0       0       0       0       0       0
  6211 ;;Total ram usage:        3 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    7
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_MTOUCH_Button_Tick
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function _Button_Tick_helper
  6223  160F                     _Button_Tick_helper:	
  6224                           
  6225                           ;incstack = 0
  6226                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  6227                           ;Button_Tick_helper@button stored from wreg
  6228  160F  0020               	movlb	0	; select bank0
  6229  1610  00A7               	movwf	Button_Tick_helper@button
  6230                           
  6231                           ;mcc_generated_files/mtouch/mtouch_button.c: 347: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 348: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 350:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  6232  1611  0827               	movf	Button_Tick_helper@button,w
  6233  1612  3E02               	addlw	2
  6234  1613  0086               	movwf	6
  6235  1614  3001               	movlw	1	; select bank2/3
  6236  1615  0087               	movwf	7
  6237  1616  3003               	movlw	3
  6238  1617  0601               	xorwf	1,w
  6239  1618  1D03               	btfss	3,2
  6240  1619  0008               	return
  6241                           
  6242                           ;mcc_generated_files/mtouch/mtouch_button.c: 351:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 352:         (button->counter)++;
  6243  161A  0827               	movf	Button_Tick_helper@button,w
  6244  161B  3E0A               	addlw	10
  6245  161C  0086               	movwf	6
  6246  161D  3001               	movlw	1	; select bank2/3
  6247  161E  0087               	movwf	7
  6248  161F  3001               	movlw	1
  6249  1620  0781               	addwf	1,f
  6250  1621  3141               	addfsr 1,1
  6251  1622  1803               	skipnc
  6252  1623  0A81               	incf	1,f
  6253                           
  6254                           ;mcc_generated_files/mtouch/mtouch_button.c: 353:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  6255  1624  0827               	movf	Button_Tick_helper@button,w
  6256  1625  3E0A               	addlw	10
  6257  1626  0086               	movwf	6
  6258  1627  3001               	movlw	1	; select bank2/3
  6259  1628  0087               	movwf	7
  6260  1629  0016               	moviw fsr1++
  6261  162A  0401               	iorwf	1,w
  6262  162B  1D03               	btfss	3,2
  6263  162C  0008               	return
  6264                           
  6265                           ;mcc_generated_files/mtouch/mtouch_button.c: 354:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 355:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  6266  162D  0827               	movf	Button_Tick_helper@button,w
  6267  162E  3E0A               	addlw	10
  6268  162F  0086               	movwf	6
  6269  1630  3001               	movlw	1	; select bank2/3
  6270  1631  0087               	movwf	7
  6271  1632  30FF               	movlw	255
  6272  1633  3FC0               	movwi [0]fsr1
  6273  1634  30FF               	movlw	255
  6274  1635  3FC1               	movwi [1]fsr1
  6275  1636  0008               	return
  6276  1637                     __end_of_Button_Tick_helper:	
  6277                           
  6278                           	psect	text28
  6279  13D2                     __ptext28:	
  6280 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6281 ;; Defined at:
  6282 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;		None
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  sensor          1    7[BANK0 ] PTR struct .
  6287 ;;		 -> mtouch_sensor(27), 
  6288 ;; Return value:  Size  Location     Type
  6289 ;;                  1    wreg      void 
  6290 ;; Registers used:
  6291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6297 ;;      Params:         0       0       0       0       0       0       0       0
  6298 ;;      Locals:         0       1       0       0       0       0       0       0
  6299 ;;      Temps:          0       1       0       0       0       0       0       0
  6300 ;;      Totals:         0       2       0       0       0       0       0       0
  6301 ;;Total ram usage:        2 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    8
  6304 ;; This function calls:
  6305 ;;		_Sensor_Sampled_Reset
  6306 ;; This function is called by:
  6307 ;;		_MTOUCH_Initialize
  6308 ;;		_MTOUCH_Service_Mainloop
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  6314  13D2                     _MTOUCH_Sensor_Sampled_ResetAll:	
  6315                           
  6316                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  6320  13D2  30D0               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6321  13D3  0020               	movlb	0	; select bank0
  6322  13D4  00A6               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6323  13D5  0826               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6324  13D6  00A7               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  6325  13D7                     L1:	
  6326  13D7  30E2               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  6327  13D8  00A6               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6328  13D9  0827               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6329  13DA  0226               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6330  13DB  1C03               	btfss	3,0
  6331  13DC  0008               	return
  6332                           
  6333                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  6334  13DD  0827               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6335  13DE  3192  224A  3193   	fcall	_Sensor_Sampled_Reset
  6336                           
  6337                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  6338  13E1  3009               	movlw	9
  6339  13E2  0020               	movlb	0	; select bank0
  6340  13E3  00A6               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6341  13E4  0826               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6342  13E5  07A7               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  6343  13E6  2BD7               	goto	L1
  6344  13E7                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  6345                           
  6346                           	psect	text29
  6347  124A                     __ptext29:	
  6348 ;; *************** function _Sensor_Sampled_Reset *****************
  6349 ;; Defined at:
  6350 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  sensor          1    wreg     PTR struct .
  6353 ;;		 -> mtouch_sensor(27), 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  sensor          1    5[BANK0 ] PTR struct .
  6356 ;;		 -> mtouch_sensor(27), 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      void 
  6359 ;; Registers used:
  6360 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6366 ;;      Params:         0       0       0       0       0       0       0       0
  6367 ;;      Locals:         0       1       0       0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0       0
  6369 ;;      Totals:         0       1       0       0       0       0       0       0
  6370 ;;Total ram usage:        1 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    7
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_MTOUCH_Sensor_Initialize
  6377 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function _Sensor_Sampled_Reset
  6383  124A                     _Sensor_Sampled_Reset:	
  6384                           
  6385                           ;incstack = 0
  6386                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6387                           ;Sensor_Sampled_Reset@sensor stored from wreg
  6388  124A  0020               	movlb	0	; select bank0
  6389  124B  00A5               	movwf	Sensor_Sampled_Reset@sensor
  6390                           
  6391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  6392  124C  0825               	movf	Sensor_Sampled_Reset@sensor,w
  6393  124D  3E08               	addlw	8
  6394  124E  0086               	movwf	6
  6395  124F  3001               	movlw	1	; select bank2/3
  6396  1250  0087               	movwf	7
  6397  1251  1001               	bcf	1,0
  6398  1252  0008               	return
  6399  1253                     __end_of_Sensor_Sampled_Reset:	
  6400                           
  6401                           	psect	text30
  6402  13FE                     __ptext30:	
  6403 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  6404 ;; Defined at:
  6405 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;		None
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  group           1    4[BANK1 ] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      _Bool 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6419 ;;      Params:         0       0       0       0       0       0       0       0
  6420 ;;      Locals:         0       0       1       0       0       0       0       0
  6421 ;;      Temps:          0       1       0       0       0       0       0       0
  6422 ;;      Totals:         0       1       1       0       0       0       0       0
  6423 ;;Total ram usage:        2 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:   13
  6426 ;; This function calls:
  6427 ;;		_Sensor_Service
  6428 ;; This function is called by:
  6429 ;;		_MTOUCH_Service_Mainloop
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           
  6434                           ;psect for function _MTOUCH_Sensor_SampleAll
  6435  13FE                     _MTOUCH_Sensor_SampleAll:	
  6436                           
  6437                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  6438                           
  6439                           ;incstack = 0
  6440                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6441  13FE  0021               	movlb	1	; select bank1
  6442  13FF  01A4               	clrf	MTOUCH_Sensor_SampleAll@group^(0+128)
  6443  1400                     l6732:	
  6444                           
  6445                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  6446  1400  0824               	movf	MTOUCH_Sensor_SampleAll@group^(0+128),w
  6447  1401  318E  26BA  3193   	fcall	_Sensor_Service
  6448  1404  3A00               	xorlw	0
  6449  1405  1903               	skipnz
  6450  1406  2C09               	goto	l6738
  6451                           
  6452                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  6453  1407  3000               	movlw	0
  6454  1408  0008               	return
  6455  1409                     l6738:	
  6456                           
  6457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  6458  1409  3001               	movlw	1
  6459  140A  0020               	movlb	0	; select bank0
  6460  140B  00E5               	movwf	??_MTOUCH_Sensor_SampleAll
  6461  140C  0865               	movf	??_MTOUCH_Sensor_SampleAll,w
  6462  140D  0021               	movlb	1	; select bank1
  6463  140E  07A4               	addwf	MTOUCH_Sensor_SampleAll@group^(0+128),f
  6464  140F  3002               	movlw	2
  6465  1410  0224               	subwf	MTOUCH_Sensor_SampleAll@group^(0+128),w
  6466  1411  1C03               	skipc
  6467  1412  2C00               	goto	l6732
  6468                           
  6469                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  6470  1413  3001               	movlw	1
  6471  1414  0008               	return
  6472  1415                     __end_of_MTOUCH_Sensor_SampleAll:	
  6473                           
  6474                           	psect	text31
  6475  0EBA                     __ptext31:	
  6476 ;; *************** function _Sensor_Service *****************
  6477 ;; Defined at:
  6478 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;  scanGroup       1    wreg     unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  scanGroup       1    0[BANK1 ] unsigned char 
  6483 ;;  sensor_adc2     1    3[BANK1 ] PTR struct .
  6484 ;;		 -> mtouch_sensor(27), 
  6485 ;;  sensor_adc1     1    2[BANK1 ] PTR struct .
  6486 ;;		 -> NULL(0), mtouch_sensor(27), 
  6487 ;;  error           1    1[BANK1 ] enum E2882
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  1    wreg      enum E2882
  6490 ;; Registers used:
  6491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6497 ;;      Params:         0       0       0       0       0       0       0       0
  6498 ;;      Locals:         0       0       4       0       0       0       0       0
  6499 ;;      Temps:          0       3       0       0       0       0       0       0
  6500 ;;      Totals:         0       3       4       0       0       0       0       0
  6501 ;;Total ram usage:        7 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:   12
  6504 ;; This function calls:
  6505 ;;		_Sensor_Acquisition
  6506 ;;		_Sensor_DefaultCallback
  6507 ;;		_Sensor_RawSample_Update
  6508 ;;		_Sensor_isEnabled
  6509 ;;		_Sensor_setSampled
  6510 ;; This function is called by:
  6511 ;;		_MTOUCH_Sensor_SampleAll
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           
  6516                           ;psect for function _Sensor_Service
  6517  0EBA                     _Sensor_Service:	
  6518                           
  6519                           ;incstack = 0
  6520                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6521                           ;Sensor_Service@scanGroup stored from wreg
  6522  0EBA  0021               	movlb	1	; select bank1
  6523  0EBB  00A0               	movwf	Sensor_Service@scanGroup^(0+128)
  6524                           
  6525                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  6526  0EBC  0820               	movf	Sensor_Service@scanGroup^(0+128),w
  6527  0EBD  0020               	movlb	0	; select bank0
  6528  0EBE  00E2               	movwf	??_Sensor_Service
  6529  0EBF  01E3               	clrf	??_Sensor_Service+1
  6530  0EC0  35E2               	lslf	??_Sensor_Service,f
  6531  0EC1  0DE3               	rlf	??_Sensor_Service+1,f
  6532  0EC2  306A               	movlw	low (_sensor_scan_group| (0+32768))
  6533  0EC3  0762               	addwf	??_Sensor_Service,w
  6534  0EC4  0084               	movwf	4
  6535  0EC5  3098               	movlw	high (_sensor_scan_group| (0+32768))
  6536  0EC6  3D63               	addwfc	??_Sensor_Service+1,w
  6537  0EC7  0085               	movwf	5
  6538  0EC8  0800               	movf	0,w	;code access
  6539  0EC9  00E4               	movwf	??_Sensor_Service+2
  6540  0ECA  0864               	movf	??_Sensor_Service+2,w
  6541  0ECB  0021               	movlb	1	; select bank1
  6542  0ECC  00A2               	movwf	Sensor_Service@sensor_adc1^(0+128)
  6543                           
  6544                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  6545  0ECD  0820               	movf	Sensor_Service@scanGroup^(0+128),w
  6546  0ECE  0020               	movlb	0	; select bank0
  6547  0ECF  00E2               	movwf	??_Sensor_Service
  6548  0ED0  01E3               	clrf	??_Sensor_Service+1
  6549  0ED1  35E2               	lslf	??_Sensor_Service,f
  6550  0ED2  0DE3               	rlf	??_Sensor_Service+1,f
  6551  0ED3  306B               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  6552  0ED4  0762               	addwf	??_Sensor_Service,w
  6553  0ED5  0084               	movwf	4
  6554  0ED6  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  6555  0ED7  3D63               	addwfc	??_Sensor_Service+1,w
  6556  0ED8  0085               	movwf	5
  6557  0ED9  0800               	movf	0,w	;code access
  6558  0EDA  00E4               	movwf	??_Sensor_Service+2
  6559  0EDB  0864               	movf	??_Sensor_Service+2,w
  6560  0EDC  0021               	movlb	1	; select bank1
  6561  0EDD  00A3               	movwf	Sensor_Service@sensor_adc2^(0+128)
  6562                           
  6563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  6564  0EDE  0823               	movf	Sensor_Service@sensor_adc2^(0+128),w
  6565  0EDF  0020               	movlb	0	; select bank0
  6566  0EE0  00E2               	movwf	??_Sensor_Service
  6567  0EE1  0862               	movf	??_Sensor_Service,w
  6568  0EE2  00DE               	movwf	Sensor_Acquisition@sensor_adc2
  6569  0EE3  0021               	movlb	1	; select bank1
  6570  0EE4  0822               	movf	Sensor_Service@sensor_adc1^(0+128),w
  6571  0EE5  3187  27A3  318E   	fcall	_Sensor_Acquisition
  6572  0EE8  0020               	movlb	0	; select bank0
  6573  0EE9  00E3               	movwf	??_Sensor_Service+1
  6574  0EEA  0863               	movf	??_Sensor_Service+1,w
  6575  0EEB  0021               	movlb	1	; select bank1
  6576  0EEC  00A1               	movwf	Sensor_Service@error^(0+128)
  6577                           
  6578                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  6579  0EED  2F33               	goto	l6686
  6580  0EEE                     l6664:	
  6581                           
  6582                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  6583  0EEE  0021               	movlb	1	; select bank1
  6584  0EEF  0822               	movf	Sensor_Service@sensor_adc1^(0+128),w
  6585  0EF0  3193  2374  318E   	fcall	_Sensor_isEnabled
  6586  0EF3  3A00               	xorlw	0
  6587  0EF4  1903               	skipnz
  6588  0EF5  2F10               	goto	l6674
  6589                           
  6590                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  6591  0EF6  0021               	movlb	1	; select bank1
  6592  0EF7  0863               	movf	_lowpowerActivated^(0+128),w
  6593  0EF8  1D03               	btfss	3,2
  6594  0EF9  2EFE               	goto	l6670
  6595                           
  6596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  6597  0EFA  0822               	movf	Sensor_Service@sensor_adc1^(0+128),w
  6598  0EFB  3196  2661  318E   	fcall	_Sensor_RawSample_Update
  6599  0EFE                     l6670:	
  6600                           
  6601                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  6602  0EFE  0021               	movlb	1	; select bank1
  6603  0EFF  0822               	movf	Sensor_Service@sensor_adc1^(0+128),w
  6604  0F00  3192  2241  318E   	fcall	_Sensor_setSampled
  6605                           
  6606                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  6607  0F03  0021               	movlb	1	; select bank1
  6608  0F04  0822               	movf	Sensor_Service@sensor_adc1^(0+128),w
  6609  0F05  0086               	movwf	6
  6610  0F06  3001               	movlw	1	; select bank2/3
  6611  0F07  0087               	movwf	7
  6612  0F08  0801               	movf	1,w
  6613  0F09  0020               	movlb	0	; select bank0
  6614  0F0A  00E2               	movwf	??_Sensor_Service
  6615  0F0B  0862               	movf	??_Sensor_Service,w
  6616  0F0C  00A5               	movwf	Sensor_DefaultCallback@sensor
  6617  0F0D  3187  27FF  318E   	fcall	_Sensor_DefaultCallback
  6618  0F10                     l6674:	
  6619                           
  6620                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  6621  0F10  0021               	movlb	1	; select bank1
  6622  0F11  0823               	movf	Sensor_Service@sensor_adc2^(0+128),w
  6623  0F12  3193  2374  318E   	fcall	_Sensor_isEnabled
  6624  0F15  3A00               	xorlw	0
  6625  0F16  1903               	skipnz
  6626  0F17  2F57               	goto	l6688
  6627                           
  6628                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  6629  0F18  0021               	movlb	1	; select bank1
  6630  0F19  0863               	movf	_lowpowerActivated^(0+128),w
  6631  0F1A  1D03               	btfss	3,2
  6632  0F1B  2F20               	goto	l6680
  6633                           
  6634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  6635  0F1C  0823               	movf	Sensor_Service@sensor_adc2^(0+128),w
  6636  0F1D  3196  2661  318E   	fcall	_Sensor_RawSample_Update
  6637  0F20                     l6680:	
  6638                           
  6639                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  6640  0F20  0021               	movlb	1	; select bank1
  6641  0F21  0823               	movf	Sensor_Service@sensor_adc2^(0+128),w
  6642  0F22  3192  2241  318E   	fcall	_Sensor_setSampled
  6643                           
  6644                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  6645  0F25  0021               	movlb	1	; select bank1
  6646  0F26  0823               	movf	Sensor_Service@sensor_adc2^(0+128),w
  6647  0F27  0086               	movwf	6
  6648  0F28  3001               	movlw	1	; select bank2/3
  6649  0F29  0087               	movwf	7
  6650  0F2A  0801               	movf	1,w
  6651  0F2B  0020               	movlb	0	; select bank0
  6652  0F2C  00E2               	movwf	??_Sensor_Service
  6653  0F2D  0862               	movf	??_Sensor_Service,w
  6654  0F2E  00A5               	movwf	Sensor_DefaultCallback@sensor
  6655  0F2F  3187  27FF  318E   	fcall	_Sensor_DefaultCallback
  6656  0F32  2F57               	goto	l6688
  6657  0F33                     l6686:	
  6658  0F33  0821               	movf	Sensor_Service@error^(0+128),w
  6659  0F34  0020               	movlb	0	; select bank0
  6660  0F35  00E2               	movwf	??_Sensor_Service
  6661  0F36  01E3               	clrf	??_Sensor_Service+1
  6662  0F37  1BE2               	btfsc	??_Sensor_Service,7
  6663  0F38  03E3               	decf	??_Sensor_Service+1,f
  6664                           
  6665                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6666                           ; Switch size 1, requested type "simple"
  6667                           ; Number of cases is 2, Range of values is 0 to 255
  6668                           ; switch strategies available:
  6669                           ; Name         Instructions Cycles
  6670                           ; simple_byte            7     4 (average)
  6671                           ; jumptable            260     6 (fixed)
  6672                           ;	Chosen strategy is simple_byte
  6673  0F39  0863               	movf	??_Sensor_Service+1,w
  6674  0F3A  3A00               	xorlw	0	; case 0
  6675  0F3B  1903               	skipnz
  6676  0F3C  2F41               	goto	l6970
  6677  0F3D  3AFF               	xorlw	255	; case 255
  6678  0F3E  1903               	skipnz
  6679  0F3F  2F46               	goto	l6972
  6680  0F40  2F57               	goto	l6688
  6681  0F41                     l6970:	
  6682                           
  6683                           ; Switch size 1, requested type "simple"
  6684                           ; Number of cases is 1, Range of values is 0 to 0
  6685                           ; switch strategies available:
  6686                           ; Name         Instructions Cycles
  6687                           ; simple_byte            4     3 (average)
  6688                           ; direct_byte            8     6 (fixed)
  6689                           ; jumptable            260     6 (fixed)
  6690                           ;	Chosen strategy is simple_byte
  6691  0F41  0862               	movf	??_Sensor_Service,w
  6692  0F42  3A00               	xorlw	0	; case 0
  6693  0F43  1903               	skipnz
  6694  0F44  2EEE               	goto	l6664
  6695  0F45  2F57               	goto	l6688
  6696  0F46                     l6972:	
  6697                           
  6698                           ; Switch size 1, requested type "simple"
  6699                           ; Number of cases is 5, Range of values is 251 to 255
  6700                           ; switch strategies available:
  6701                           ; Name         Instructions Cycles
  6702                           ; direct_byte           15     5 (fixed)
  6703                           ; simple_byte           16     9 (average)
  6704                           ; jumptable            263     9 (fixed)
  6705                           ;	Chosen strategy is simple_byte
  6706  0F46  0862               	movf	??_Sensor_Service,w
  6707  0F47  3AFB               	xorlw	251	; case 251
  6708  0F48  1903               	skipnz
  6709  0F49  2F57               	goto	l6688
  6710  0F4A  3A07               	xorlw	7	; case 252
  6711  0F4B  1903               	skipnz
  6712  0F4C  2F57               	goto	l6688
  6713  0F4D  3A01               	xorlw	1	; case 253
  6714  0F4E  1903               	skipnz
  6715  0F4F  2F57               	goto	l6688
  6716  0F50  3A03               	xorlw	3	; case 254
  6717  0F51  1903               	skipnz
  6718  0F52  2F57               	goto	l6688
  6719  0F53  3A01               	xorlw	1	; case 255
  6720  0F54  1903               	skipnz
  6721  0F55  2F57               	goto	l6688
  6722  0F56  2F57               	goto	l6688
  6723  0F57                     l6688:	
  6724                           
  6725                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  6726  0F57  0021               	movlb	1	; select bank1
  6727  0F58  0821               	movf	Sensor_Service@error^(0+128),w
  6728  0F59  0008               	return
  6729  0F5A                     __end_of_Sensor_Service:	
  6730                           
  6731                           	psect	text32
  6732  1241                     __ptext32:	
  6733 ;; *************** function _Sensor_setSampled *****************
  6734 ;; Defined at:
  6735 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  sensor          1    wreg     PTR struct .
  6738 ;;		 -> NULL(0), mtouch_sensor(27), 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  sensor          1    5[BANK0 ] PTR struct .
  6741 ;;		 -> NULL(0), mtouch_sensor(27), 
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      void 
  6744 ;; Registers used:
  6745 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6751 ;;      Params:         0       0       0       0       0       0       0       0
  6752 ;;      Locals:         0       1       0       0       0       0       0       0
  6753 ;;      Temps:          0       0       0       0       0       0       0       0
  6754 ;;      Totals:         0       1       0       0       0       0       0       0
  6755 ;;Total ram usage:        1 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    7
  6758 ;; This function calls:
  6759 ;;		Nothing
  6760 ;; This function is called by:
  6761 ;;		_Sensor_Service
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           
  6766                           ;psect for function _Sensor_setSampled
  6767  1241                     _Sensor_setSampled:	
  6768                           
  6769                           ;incstack = 0
  6770                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  6771                           ;Sensor_setSampled@sensor stored from wreg
  6772  1241  0020               	movlb	0	; select bank0
  6773  1242  00A5               	movwf	Sensor_setSampled@sensor
  6774                           
  6775                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  6776  1243  0825               	movf	Sensor_setSampled@sensor,w
  6777  1244  3E08               	addlw	8
  6778  1245  0086               	movwf	6
  6779  1246  3001               	movlw	1	; select bank2/3
  6780  1247  0087               	movwf	7
  6781  1248  1401               	bsf	1,0
  6782  1249  0008               	return
  6783  124A                     __end_of_Sensor_setSampled:	
  6784                           
  6785                           	psect	text33
  6786  1661                     __ptext33:	
  6787 ;; *************** function _Sensor_RawSample_Update *****************
  6788 ;; Defined at:
  6789 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  sensor          1    wreg     PTR struct .
  6792 ;;		 -> NULL(0), mtouch_sensor(27), 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  sensor          1   11[BANK0 ] PTR struct .
  6795 ;;		 -> NULL(0), mtouch_sensor(27), 
  6796 ;;  adcIndex        1   10[BANK0 ] unsigned char 
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6806 ;;      Params:         0       0       0       0       0       0       0       0
  6807 ;;      Locals:         0       2       0       0       0       0       0       0
  6808 ;;      Temps:          0       1       0       0       0       0       0       0
  6809 ;;      Totals:         0       3       0       0       0       0       0       0
  6810 ;;Total ram usage:        3 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    8
  6813 ;; This function calls:
  6814 ;;		_Sensor_getScanGroupIndex
  6815 ;; This function is called by:
  6816 ;;		_Sensor_Service
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           
  6821                           ;psect for function _Sensor_RawSample_Update
  6822  1661                     _Sensor_RawSample_Update:	
  6823                           
  6824                           ;incstack = 0
  6825                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6826                           ;Sensor_RawSample_Update@sensor stored from wreg
  6827  1661  0020               	movlb	0	; select bank0
  6828  1662  00AB               	movwf	Sensor_RawSample_Update@sensor
  6829                           
  6830                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  6831  1663  082B               	movf	Sensor_RawSample_Update@sensor,w
  6832  1664  3197  273D  3196   	fcall	_Sensor_getScanGroupIndex
  6833  1667  0020               	movlb	0	; select bank0
  6834  1668  00A9               	movwf	??_Sensor_RawSample_Update
  6835  1669  0829               	movf	??_Sensor_RawSample_Update,w
  6836  166A  00AA               	movwf	Sensor_RawSample_Update@adcIndex
  6837                           
  6838                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  6839  166B  1F8B               	btfss	11,7	;volatile
  6840  166C  2E7D               	goto	l6532
  6841                           
  6842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  6843  166D  138B               	bcf	11,7	;volatile
  6844                           
  6845                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  6846  166E  352A               	lslf	Sensor_RawSample_Update@adcIndex,w
  6847  166F  3ECD               	addlw	(low (_packet_sample| 0))& (0+255)
  6848  1670  0086               	movwf	6
  6849  1671  0187               	clrf	7
  6850  1672  082B               	movf	Sensor_RawSample_Update@sensor,w
  6851  1673  3E06               	addlw	6
  6852  1674  0084               	movwf	4
  6853  1675  3001               	movlw	1	; select bank2/3
  6854  1676  0085               	movwf	5
  6855  1677  3F40               	moviw [0]fsr1
  6856  1678  3F80               	movwi [0]fsr0
  6857  1679  3F41               	moviw [1]fsr1
  6858  167A  3F81               	movwi [1]fsr0
  6859                           
  6860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  6861  167B  178B               	bsf	11,7	;volatile
  6862                           
  6863                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  6864  167C  0008               	return
  6865  167D                     l6532:	
  6866                           
  6867                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  6868  167D  352A               	lslf	Sensor_RawSample_Update@adcIndex,w
  6869  167E  3ECD               	addlw	(low (_packet_sample| 0))& (0+255)
  6870  167F  0086               	movwf	6
  6871  1680  0187               	clrf	7
  6872  1681  082B               	movf	Sensor_RawSample_Update@sensor,w
  6873  1682  3E06               	addlw	6
  6874  1683  0084               	movwf	4
  6875  1684  3001               	movlw	1	; select bank2/3
  6876  1685  0085               	movwf	5
  6877  1686  3F40               	moviw [0]fsr1
  6878  1687  3F80               	movwi [0]fsr0
  6879  1688  3F41               	moviw [1]fsr1
  6880  1689  3F81               	movwi [1]fsr0
  6881  168A  0008               	return
  6882  168B                     __end_of_Sensor_RawSample_Update:	
  6883                           
  6884                           	psect	text34
  6885  07FF                     __ptext34:	
  6886 ;; *************** function _Sensor_DefaultCallback *****************
  6887 ;; Defined at:
  6888 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;  sensor          1    5[BANK0 ] enum E2878
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;		None
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  1    wreg      void 
  6895 ;; Registers used:
  6896 ;;		None
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6902 ;;      Params:         0       1       0       0       0       0       0       0
  6903 ;;      Locals:         0       0       0       0       0       0       0       0
  6904 ;;      Temps:          0       0       0       0       0       0       0       0
  6905 ;;      Totals:         0       1       0       0       0       0       0       0
  6906 ;;Total ram usage:        1 bytes
  6907 ;; Hardware stack levels used:    1
  6908 ;; Hardware stack levels required when called:    7
  6909 ;; This function calls:
  6910 ;;		Nothing
  6911 ;; This function is called by:
  6912 ;;		_Sensor_Service
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           
  6917                           ;psect for function _Sensor_DefaultCallback
  6918  07FF                     _Sensor_DefaultCallback:	
  6919                           
  6920                           ;incstack = 0
  6921                           ; Regs used in _Sensor_DefaultCallback: []
  6922  07FF  0008               	return
  6923  0800                     __end_of_Sensor_DefaultCallback:	
  6924                           
  6925                           	psect	text35
  6926  07A3                     __ptext35:	
  6927 ;; *************** function _Sensor_Acquisition *****************
  6928 ;; Defined at:
  6929 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  sensor_adc1     1    wreg     PTR struct .
  6932 ;;		 -> NULL(0), mtouch_sensor(27), 
  6933 ;;  sensor_adc2     1   62[BANK0 ] PTR struct .
  6934 ;;		 -> mtouch_sensor(27), 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  sensor_adc1     1   65[BANK0 ] PTR struct .
  6937 ;;		 -> NULL(0), mtouch_sensor(27), 
  6938 ;;  retry           1   64[BANK0 ] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      enum E2882
  6941 ;; Registers used:
  6942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6948 ;;      Params:         0       1       0       0       0       0       0       0
  6949 ;;      Locals:         0       2       0       0       0       0       0       0
  6950 ;;      Temps:          0       1       0       0       0       0       0       0
  6951 ;;      Totals:         0       4       0       0       0       0       0       0
  6952 ;;Total ram usage:        4 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:   11
  6955 ;; This function calls:
  6956 ;;		_Sensor_Acq_ExecutePacket
  6957 ;;		_Sensor_Scanfrequency_Evaluation
  6958 ;;		_Sensor_isActive
  6959 ;;		_Sensor_isCalibrated
  6960 ;;		_Sensor_postAcquisitionProcess
  6961 ;; This function is called by:
  6962 ;;		_Sensor_Service
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           
  6967                           ;psect for function _Sensor_Acquisition
  6968  07A3                     _Sensor_Acquisition:	
  6969                           
  6970                           ;incstack = 0
  6971                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6972                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  6973  07A3  0020               	movlb	0	; select bank0
  6974  07A4  00E1               	movwf	Sensor_Acquisition@sensor_adc1
  6975                           
  6976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  6977  07A5  3005               	movlw	5
  6978  07A6  00DF               	movwf	??_Sensor_Acquisition
  6979  07A7  085F               	movf	??_Sensor_Acquisition,w
  6980  07A8  00E0               	movwf	Sensor_Acquisition@retry
  6981                           
  6982                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  6983  07A9  0861               	movf	Sensor_Acquisition@sensor_adc1,w
  6984  07AA  1D03               	btfss	3,2
  6985  07AB  2FB9               	goto	l6496
  6986  07AC  085E               	movf	Sensor_Acquisition@sensor_adc2,w
  6987  07AD  1D03               	btfss	3,2
  6988  07AE  2FB9               	goto	l6496
  6989                           
  6990                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  6991  07AF  30FF               	movlw	255
  6992  07B0  0008               	return
  6993  07B1                     l6490:	
  6994                           
  6995                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  6996  07B1  3001               	movlw	1
  6997  07B2  0020               	movlb	0	; select bank0
  6998  07B3  02E0               	subwf	Sensor_Acquisition@retry,f
  6999                           
  7000                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  7001  07B4  0860               	movf	Sensor_Acquisition@retry,w
  7002  07B5  1D03               	btfss	3,2
  7003  07B6  2FB9               	goto	l6496
  7004                           
  7005                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  7006  07B7  30FC               	movlw	252
  7007  07B8  0008               	return
  7008  07B9                     l6496:	
  7009                           
  7010                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  7011  07B9  085E               	movf	Sensor_Acquisition@sensor_adc2,w
  7012  07BA  00DF               	movwf	??_Sensor_Acquisition
  7013  07BB  085F               	movf	??_Sensor_Acquisition,w
  7014  07BC  00C2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  7015  07BD  0861               	movf	Sensor_Acquisition@sensor_adc1,w
  7016  07BE  3180  207F  3187   	fcall	_Sensor_Acq_ExecutePacket
  7017  07C1  3A00               	xorlw	0
  7018  07C2  1D03               	skipz
  7019  07C3  2FB1               	goto	l6490
  7020                           
  7021                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  7022  07C4  0020               	movlb	0	; select bank0
  7023  07C5  0861               	movf	Sensor_Acquisition@sensor_adc1,w
  7024  07C6  1903               	btfsc	3,2
  7025  07C7  2FCC               	goto	l6502
  7026                           
  7027                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  7028  07C8  0861               	movf	Sensor_Acquisition@sensor_adc1,w
  7029  07C9  3188  2079  3187   	fcall	_Sensor_postAcquisitionProcess
  7030  07CC                     l6502:	
  7031                           
  7032                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  7033  07CC  0020               	movlb	0	; select bank0
  7034  07CD  085E               	movf	Sensor_Acquisition@sensor_adc2,w
  7035  07CE  1903               	btfsc	3,2
  7036  07CF  2FD4               	goto	l6506
  7037                           
  7038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  7039  07D0  085E               	movf	Sensor_Acquisition@sensor_adc2,w
  7040  07D1  3188  2079  3187   	fcall	_Sensor_postAcquisitionProcess
  7041  07D4                     l6506:	
  7042                           
  7043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  7044  07D4  0020               	movlb	0	; select bank0
  7045  07D5  0861               	movf	Sensor_Acquisition@sensor_adc1,w
  7046  07D6  3192  22F2  3187   	fcall	_Sensor_isActive
  7047  07D9  3A00               	xorlw	0
  7048  07DA  1903               	skipnz
  7049  07DB  2FE4               	goto	l6510
  7050  07DC  0020               	movlb	0	; select bank0
  7051  07DD  0861               	movf	Sensor_Acquisition@sensor_adc1,w
  7052  07DE  3192  22B2  3187   	fcall	_Sensor_isCalibrated
  7053  07E1  3A00               	xorlw	0
  7054  07E2  1D03               	skipz
  7055  07E3  2FF4               	goto	l6514
  7056  07E4                     l6510:	
  7057  07E4  0020               	movlb	0	; select bank0
  7058  07E5  085E               	movf	Sensor_Acquisition@sensor_adc2,w
  7059  07E6  3192  22F2  3187   	fcall	_Sensor_isActive
  7060  07E9  3A00               	xorlw	0
  7061  07EA  1903               	skipnz
  7062  07EB  2FFD               	goto	l6518
  7063  07EC  0020               	movlb	0	; select bank0
  7064  07ED  085E               	movf	Sensor_Acquisition@sensor_adc2,w
  7065  07EE  3192  22B2  3187   	fcall	_Sensor_isCalibrated
  7066  07F1  3A00               	xorlw	0
  7067  07F2  1903               	skipnz
  7068  07F3  2FFD               	goto	l6518
  7069  07F4                     l6514:	
  7070                           
  7071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  7072  07F4  0020               	movlb	0	; select bank0
  7073  07F5  085E               	movf	Sensor_Acquisition@sensor_adc2,w
  7074  07F6  00DF               	movwf	??_Sensor_Acquisition
  7075  07F7  085F               	movf	??_Sensor_Acquisition,w
  7076  07F8  00D1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  7077  07F9  0861               	movf	Sensor_Acquisition@sensor_adc1,w
  7078  07FA  318F  275A         	fcall	_Sensor_Scanfrequency_Evaluation
  7079  07FC  0008               	return
  7080  07FD                     l6518:	
  7081                           
  7082                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  7083  07FD  3000               	movlw	0
  7084  07FE  0008               	return
  7085  07FF                     __end_of_Sensor_Acquisition:	
  7086                           
  7087                           	psect	text36
  7088  0879                     __ptext36:	
  7089 ;; *************** function _Sensor_postAcquisitionProcess *****************
  7090 ;; Defined at:
  7091 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  sensor          1    wreg     PTR struct .
  7094 ;;		 -> NULL(0), mtouch_sensor(27), 
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;  sensor          1   32[BANK0 ] PTR struct .
  7097 ;;		 -> NULL(0), mtouch_sensor(27), 
  7098 ;;  deviation       2   30[BANK0 ] unsigned short 
  7099 ;;  adcIndex        1   29[BANK0 ] unsigned char 
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      void 
  7102 ;; Registers used:
  7103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7104 ;; Tracked objects:
  7105 ;;		On entry : 0/0
  7106 ;;		On exit  : 0/0
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7109 ;;      Params:         0       0       0       0       0       0       0       0
  7110 ;;      Locals:         0       4       0       0       0       0       0       0
  7111 ;;      Temps:          0       1       0       0       0       0       0       0
  7112 ;;      Totals:         0       5       0       0       0       0       0       0
  7113 ;;Total ram usage:        5 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    8
  7116 ;; This function calls:
  7117 ;;		_Sensor_getScanGroupIndex
  7118 ;;		_Sensor_isEnabled
  7119 ;;		_Sensor_setActive
  7120 ;;		_Sensor_setInactive
  7121 ;;		_abs
  7122 ;; This function is called by:
  7123 ;;		_Sensor_Acquisition
  7124 ;; This function uses a non-reentrant model
  7125 ;;
  7126                           
  7127                           
  7128                           ;psect for function _Sensor_postAcquisitionProcess
  7129  0879                     _Sensor_postAcquisitionProcess:	
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7133                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  7134  0879  0020               	movlb	0	; select bank0
  7135  087A  00C0               	movwf	Sensor_postAcquisitionProcess@sensor
  7136                           
  7137                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  7138  087B  0840               	movf	Sensor_postAcquisitionProcess@sensor,w
  7139  087C  3197  273D  3188   	fcall	_Sensor_getScanGroupIndex
  7140  087F  0020               	movlb	0	; select bank0
  7141  0880  00BC               	movwf	??_Sensor_postAcquisitionProcess
  7142  0881  083C               	movf	??_Sensor_postAcquisitionProcess,w
  7143  0882  00BD               	movwf	Sensor_postAcquisitionProcess@adcIndex
  7144                           
  7145                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  7146  0883  0840               	movf	Sensor_postAcquisitionProcess@sensor,w
  7147  0884  3193  2374  3188   	fcall	_Sensor_isEnabled
  7148  0887  3A00               	xorlw	0
  7149  0888  1903               	skipnz
  7150  0889  28A4               	goto	l6366
  7151                           
  7152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  7153  088A  0020               	movlb	0	; select bank0
  7154  088B  0840               	movf	Sensor_postAcquisitionProcess@sensor,w
  7155  088C  3E06               	addlw	6
  7156  088D  0086               	movwf	6
  7157  088E  3001               	movlw	1	; select bank2/3
  7158  088F  0087               	movwf	7
  7159  0890  353D               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  7160  0891  3ECD               	addlw	(low (_packet_sample| 0))& (0+255)
  7161  0892  0084               	movwf	4
  7162  0893  0185               	clrf	5
  7163  0894  3F40               	moviw [0]fsr1
  7164  0895  0200               	subwf	0,w
  7165  0896  00B8               	movwf	abs@a
  7166  0897  3101               	addfsr 0,1
  7167  0898  3F41               	moviw [1]fsr1
  7168  0899  3B00               	subwfb	0,w
  7169  089A  00B9               	movwf	abs@a+1
  7170  089B  3194  2475  3188   	fcall	_abs
  7171  089E  0020               	movlb	0	; select bank0
  7172  089F  0839               	movf	?_abs+1,w
  7173  08A0  00BF               	movwf	Sensor_postAcquisitionProcess@deviation+1
  7174  08A1  0838               	movf	?_abs,w
  7175  08A2  00BE               	movwf	Sensor_postAcquisitionProcess@deviation
  7176  08A3  28A7               	goto	l6368
  7177  08A4                     l6366:	
  7178                           
  7179                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  7180  08A4  0020               	movlb	0	; select bank0
  7181  08A5  01BE               	clrf	Sensor_postAcquisitionProcess@deviation
  7182  08A6  01BF               	clrf	Sensor_postAcquisitionProcess@deviation+1
  7183  08A7                     l6368:	
  7184                           
  7185                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  7186  08A7  3000               	movlw	0
  7187  08A8  023F               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  7188  08A9  3065               	movlw	101
  7189  08AA  1903               	skipnz
  7190  08AB  023E               	subwf	Sensor_postAcquisitionProcess@deviation,w
  7191  08AC  1C03               	skipc
  7192  08AD  28B2               	goto	l6372
  7193                           
  7194                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  7195  08AE  0840               	movf	Sensor_postAcquisitionProcess@sensor,w
  7196  08AF  3192  222F         	fcall	_Sensor_setActive
  7197  08B1  0008               	return
  7198  08B2                     l6372:	
  7199                           
  7200                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  7201  08B2  0840               	movf	Sensor_postAcquisitionProcess@sensor,w
  7202  08B3  3192  2238         	fcall	_Sensor_setInactive
  7203  08B5  0008               	return
  7204  08B6                     __end_of_Sensor_postAcquisitionProcess:	
  7205                           
  7206                           	psect	text37
  7207  1238                     __ptext37:	
  7208 ;; *************** function _Sensor_setInactive *****************
  7209 ;; Defined at:
  7210 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  sensor          1    wreg     PTR struct .
  7213 ;;		 -> NULL(0), mtouch_sensor(27), 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  sensor          1    5[BANK0 ] PTR struct .
  7216 ;;		 -> NULL(0), mtouch_sensor(27), 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7226 ;;      Params:         0       0       0       0       0       0       0       0
  7227 ;;      Locals:         0       1       0       0       0       0       0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0
  7229 ;;      Totals:         0       1       0       0       0       0       0       0
  7230 ;;Total ram usage:        1 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    7
  7233 ;; This function calls:
  7234 ;;		Nothing
  7235 ;; This function is called by:
  7236 ;;		_Sensor_postAcquisitionProcess
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _Sensor_setInactive
  7242  1238                     _Sensor_setInactive:	
  7243                           
  7244                           ;incstack = 0
  7245                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7246                           ;Sensor_setInactive@sensor stored from wreg
  7247  1238  0020               	movlb	0	; select bank0
  7248  1239  00A5               	movwf	Sensor_setInactive@sensor
  7249                           
  7250                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  7251  123A  0825               	movf	Sensor_setInactive@sensor,w
  7252  123B  3E08               	addlw	8
  7253  123C  0086               	movwf	6
  7254  123D  3001               	movlw	1	; select bank2/3
  7255  123E  0087               	movwf	7
  7256  123F  1081               	bcf	1,1
  7257  1240  0008               	return
  7258  1241                     __end_of_Sensor_setInactive:	
  7259                           
  7260                           	psect	text38
  7261  122F                     __ptext38:	
  7262 ;; *************** function _Sensor_setActive *****************
  7263 ;; Defined at:
  7264 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  sensor          1    wreg     PTR struct .
  7267 ;;		 -> NULL(0), mtouch_sensor(27), 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  sensor          1    5[BANK0 ] PTR struct .
  7270 ;;		 -> NULL(0), mtouch_sensor(27), 
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7280 ;;      Params:         0       0       0       0       0       0       0       0
  7281 ;;      Locals:         0       1       0       0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0
  7283 ;;      Totals:         0       1       0       0       0       0       0       0
  7284 ;;Total ram usage:        1 bytes
  7285 ;; Hardware stack levels used:    1
  7286 ;; Hardware stack levels required when called:    7
  7287 ;; This function calls:
  7288 ;;		Nothing
  7289 ;; This function is called by:
  7290 ;;		_Sensor_postAcquisitionProcess
  7291 ;; This function uses a non-reentrant model
  7292 ;;
  7293                           
  7294                           
  7295                           ;psect for function _Sensor_setActive
  7296  122F                     _Sensor_setActive:	
  7297                           
  7298                           ;incstack = 0
  7299                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  7300                           ;Sensor_setActive@sensor stored from wreg
  7301  122F  0020               	movlb	0	; select bank0
  7302  1230  00A5               	movwf	Sensor_setActive@sensor
  7303                           
  7304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  7305  1231  0825               	movf	Sensor_setActive@sensor,w
  7306  1232  3E08               	addlw	8
  7307  1233  0086               	movwf	6
  7308  1234  3001               	movlw	1	; select bank2/3
  7309  1235  0087               	movwf	7
  7310  1236  1481               	bsf	1,1
  7311  1237  0008               	return
  7312  1238                     __end_of_Sensor_setActive:	
  7313                           
  7314                           	psect	text39
  7315  0F5A                     __ptext39:	
  7316 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  7317 ;; Defined at:
  7318 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  sensor_adc1     1    wreg     PTR struct .
  7321 ;;		 -> NULL(0), mtouch_sensor(27), 
  7322 ;;  sensor_adc2     1   49[BANK0 ] PTR struct .
  7323 ;;		 -> mtouch_sensor(27), 
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;  sensor_adc1     1   52[BANK0 ] PTR struct .
  7326 ;;		 -> NULL(0), mtouch_sensor(27), 
  7327 ;;  best_packet_    4   57[BANK0 ] unsigned short [2]
  7328 ;;  packet_noise    2   53[BANK0 ] unsigned short 
  7329 ;;  i               1   61[BANK0 ] unsigned char 
  7330 ;;  retry           1   56[BANK0 ] unsigned char 
  7331 ;;  best_sample_    1   55[BANK0 ] unsigned char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      enum E2882
  7334 ;; Registers used:
  7335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7341 ;;      Params:         0       1       0       0       0       0       0       0
  7342 ;;      Locals:         0      10       0       0       0       0       0       0
  7343 ;;      Temps:          0       2       0       0       0       0       0       0
  7344 ;;      Totals:         0      13       0       0       0       0       0       0
  7345 ;;Total ram usage:       13 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:   10
  7348 ;; This function calls:
  7349 ;;		_Sensor_Acq_ExecutePacket
  7350 ;; This function is called by:
  7351 ;;		_Sensor_Acquisition
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           
  7356                           ;psect for function _Sensor_Scanfrequency_Evaluation
  7357  0F5A                     _Sensor_Scanfrequency_Evaluation:	
  7358                           
  7359                           ;incstack = 0
  7360                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7361                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  7362  0F5A  0020               	movlb	0	; select bank0
  7363  0F5B  00D4               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  7364                           
  7365                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  7366  0F5C  0021               	movlb	1	; select bank1
  7367  0F5D  085C               	movf	(_packet_noise+1)^(0+128),w
  7368  0F5E  0020               	movlb	0	; select bank0
  7369  0F5F  00D3               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  7370  0F60  0021               	movlb	1	; select bank1
  7371  0F61  085B               	movf	_packet_noise^(0+128),w
  7372  0F62  0020               	movlb	0	; select bank0
  7373  0F63  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7374  0F64  36D3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7375  0F65  0CD2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7376  0F66  36D3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  7377  0F67  0CD2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  7378  0F68  0021               	movlb	1	; select bank1
  7379  0F69  085B               	movf	_packet_noise^(0+128),w
  7380  0F6A  0020               	movlb	0	; select bank0
  7381  0F6B  0752               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  7382  0F6C  00D5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7383  0F6D  0021               	movlb	1	; select bank1
  7384  0F6E  085C               	movf	(_packet_noise+1)^(0+128),w
  7385  0F6F  0020               	movlb	0	; select bank0
  7386  0F70  3D53               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  7387  0F71  00D6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7388                           
  7389                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  7390  0F72  0021               	movlb	1	; select bank1
  7391  0F73  086B               	movf	_sample_period^(0+128),w
  7392  0F74  0020               	movlb	0	; select bank0
  7393  0F75  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7394  0F76  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7395  0F77  00D7               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7396                           
  7397                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  7398  0F78  0021               	movlb	1	; select bank1
  7399  0F79  084E               	movf	(_packet_sample+1)^(0+128),w
  7400  0F7A  0020               	movlb	0	; select bank0
  7401  0F7B  00DA               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7402  0F7C  0021               	movlb	1	; select bank1
  7403  0F7D  084D               	movf	_packet_sample^(0+128),w
  7404  0F7E  0020               	movlb	0	; select bank0
  7405  0F7F  00D9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7406                           
  7407                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  7408  0F80  0021               	movlb	1	; select bank1
  7409  0F81  0850               	movf	((_packet_sample+1)^(0+128)+2),w
  7410  0F82  0020               	movlb	0	; select bank0
  7411  0F83  00DC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7412  0F84  0021               	movlb	1	; select bank1
  7413  0F85  084F               	movf	(_packet_sample^(0+128)+2),w
  7414  0F86  0020               	movlb	0	; select bank0
  7415  0F87  00DB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7416                           
  7417                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  7418  0F88  01DD               	clrf	Sensor_Scanfrequency_Evaluation@i
  7419  0F89                     l6388:	
  7420                           
  7421                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  7422  0F89  085D               	movf	Sensor_Scanfrequency_Evaluation@i,w
  7423  0F8A  3E56               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7424  0F8B  0084               	movwf	4
  7425  0F8C  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  7426  0F8D  1803               	skipnc
  7427  0F8E  3E01               	addlw	1
  7428  0F8F  0085               	movwf	5
  7429  0F90  0800               	movf	0,w	;code access
  7430  0F91  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7431  0F92  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7432  0F93  0021               	movlb	1	; select bank1
  7433  0F94  07EB               	addwf	_sample_period^(0+128),f
  7434                           
  7435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  7436  0F95  30AE               	movlw	174
  7437  0F96  026B               	subwf	_sample_period^(0+128),w
  7438  0F97  1803               	skipnc
  7439  0F98  2F9F               	goto	l6396
  7440                           
  7441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  7442  0F99  30AE               	movlw	174
  7443  0F9A  0020               	movlb	0	; select bank0
  7444  0F9B  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7445  0F9C  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7446  0F9D  0021               	movlb	1	; select bank1
  7447  0F9E  07EB               	addwf	_sample_period^(0+128),f
  7448  0F9F                     l6396:	
  7449                           
  7450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  7451  0F9F  3005               	movlw	5
  7452  0FA0  0020               	movlb	0	; select bank0
  7453  0FA1  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7454  0FA2  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7455  0FA3  00D8               	movwf	Sensor_Scanfrequency_Evaluation@retry
  7456  0FA4                     l6404:	
  7457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7458                           
  7459                           
  7460                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  7461  0FA4  0851               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  7462  0FA5  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7463  0FA6  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7464  0FA7  00C2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  7465  0FA8  0854               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  7466  0FA9  3180  207F  318F   	fcall	_Sensor_Acq_ExecutePacket
  7467  0FAC  3A00               	xorlw	0
  7468  0FAD  1903               	btfsc	3,2
  7469  0FAE  2FB7               	goto	l6406
  7470                           
  7471                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  7472  0FAF  3001               	movlw	1
  7473  0FB0  0020               	movlb	0	; select bank0
  7474  0FB1  02D8               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  7475                           
  7476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  7477  0FB2  0858               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  7478  0FB3  1D03               	btfss	3,2
  7479  0FB4  2FA4               	goto	l6404
  7480                           
  7481                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  7482  0FB5  30FC               	movlw	252
  7483  0FB6  0008               	return
  7484  0FB7                     l6406:	
  7485                           
  7486                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  7487  0FB7  0021               	movlb	1	; select bank1
  7488  0FB8  085C               	movf	(_packet_noise+1)^(0+128),w
  7489  0FB9  0020               	movlb	0	; select bank0
  7490  0FBA  0256               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  7491  0FBB  1D03               	skipz
  7492  0FBC  2FC1               	goto	u6725
  7493  0FBD  0021               	movlb	1	; select bank1
  7494  0FBE  085B               	movf	_packet_noise^(0+128),w
  7495  0FBF  0020               	movlb	0	; select bank0
  7496  0FC0  0255               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  7497  0FC1                     u6725:	
  7498  0FC1  1803               	skipnc
  7499  0FC2  2FE1               	goto	l6410
  7500                           
  7501                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  7502  0FC3  0021               	movlb	1	; select bank1
  7503  0FC4  085C               	movf	(_packet_noise+1)^(0+128),w
  7504  0FC5  0020               	movlb	0	; select bank0
  7505  0FC6  00D6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  7506  0FC7  0021               	movlb	1	; select bank1
  7507  0FC8  085B               	movf	_packet_noise^(0+128),w
  7508  0FC9  0020               	movlb	0	; select bank0
  7509  0FCA  00D5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  7510                           
  7511                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  7512  0FCB  0021               	movlb	1	; select bank1
  7513  0FCC  086B               	movf	_sample_period^(0+128),w
  7514  0FCD  0020               	movlb	0	; select bank0
  7515  0FCE  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7516  0FCF  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7517  0FD0  00D7               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  7518                           
  7519                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  7520  0FD1  0021               	movlb	1	; select bank1
  7521  0FD2  084E               	movf	(_packet_sample+1)^(0+128),w
  7522  0FD3  0020               	movlb	0	; select bank0
  7523  0FD4  00DA               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  7524  0FD5  0021               	movlb	1	; select bank1
  7525  0FD6  084D               	movf	_packet_sample^(0+128),w
  7526  0FD7  0020               	movlb	0	; select bank0
  7527  0FD8  00D9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  7528                           
  7529                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  7530  0FD9  0021               	movlb	1	; select bank1
  7531  0FDA  0850               	movf	((_packet_sample+1)^(0+128)+2),w
  7532  0FDB  0020               	movlb	0	; select bank0
  7533  0FDC  00DC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  7534  0FDD  0021               	movlb	1	; select bank1
  7535  0FDE  084F               	movf	(_packet_sample^(0+128)+2),w
  7536  0FDF  0020               	movlb	0	; select bank0
  7537  0FE0  00DB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  7538  0FE1                     l6410:	
  7539                           
  7540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  7541  0FE1  3001               	movlw	1
  7542  0FE2  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7543  0FE3  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7544  0FE4  07DD               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  7545  0FE5  3005               	movlw	5
  7546  0FE6  025D               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  7547  0FE7  1C03               	skipc
  7548  0FE8  2F89               	goto	l6388
  7549                           
  7550                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  7551  0FE9  0857               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  7552  0FEA  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation
  7553  0FEB  0852               	movf	??_Sensor_Scanfrequency_Evaluation,w
  7554  0FEC  0021               	movlb	1	; select bank1
  7555  0FED  00EB               	movwf	_sample_period^(0+128)
  7556                           
  7557                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  7558  0FEE  0020               	movlb	0	; select bank0
  7559  0FEF  085A               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  7560  0FF0  0021               	movlb	1	; select bank1
  7561  0FF1  00CE               	movwf	(_packet_sample+1)^(0+128)
  7562  0FF2  0020               	movlb	0	; select bank0
  7563  0FF3  0859               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  7564  0FF4  0021               	movlb	1	; select bank1
  7565  0FF5  00CD               	movwf	_packet_sample^(0+128)
  7566                           
  7567                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  7568  0FF6  0020               	movlb	0	; select bank0
  7569  0FF7  085C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  7570  0FF8  0021               	movlb	1	; select bank1
  7571  0FF9  00D0               	movwf	((_packet_sample+1)^(0+128)+2)
  7572  0FFA  0020               	movlb	0	; select bank0
  7573  0FFB  085B               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  7574  0FFC  0021               	movlb	1	; select bank1
  7575  0FFD  00CF               	movwf	(_packet_sample^(0+128)+2)
  7576                           
  7577                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  7578  0FFE  3000               	movlw	0
  7579  0FFF  0008               	return
  7580  1000                     __end_of_Sensor_Scanfrequency_Evaluation:	
  7581                           
  7582                           	psect	text40
  7583  007F                     __ptext40:	
  7584 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  7585 ;; Defined at:
  7586 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;  sensor_adc1     1    wreg     PTR struct .
  7589 ;;		 -> NULL(0), mtouch_sensor(27), 
  7590 ;;  sensor_adc2     1   34[BANK0 ] PTR struct .
  7591 ;;		 -> mtouch_sensor(27), 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  sensor_adc1     1   48[BANK0 ] PTR struct .
  7594 ;;		 -> NULL(0), mtouch_sensor(27), 
  7595 ;;  last_b          2   45[BANK0 ] unsigned short 
  7596 ;;  last_a          2   43[BANK0 ] unsigned short 
  7597 ;;  packet_count    1   47[BANK0 ] unsigned char 
  7598 ;;  activeSensor    1   42[BANK0 ] unsigned char 
  7599 ;;  ADxIF_flag      1   41[BANK0 ] unsigned char 
  7600 ;;  sensor2Force    1   40[BANK0 ] unsigned char 
  7601 ;;  sensor1Force    1   39[BANK0 ] unsigned char 
  7602 ;;  AD2CON2_temp    1   38[BANK0 ] unsigned char 
  7603 ;;  AD1CON2_temp    1   37[BANK0 ] unsigned char 
  7604 ;;  ADCOMCON_tem    1   36[BANK0 ] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      enum E2882
  7607 ;; Registers used:
  7608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7614 ;;      Params:         0       1       0       0       0       0       0       0
  7615 ;;      Locals:         0      13       0       0       0       0       0       0
  7616 ;;      Temps:          0       1       0       0       0       0       0       0
  7617 ;;      Totals:         0      15       0       0       0       0       0       0
  7618 ;;Total ram usage:       15 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    9
  7621 ;; This function calls:
  7622 ;;		_MTOUCH_Sensor_Scan_Initialize
  7623 ;;		_Sensor_autoCalibration
  7624 ;;		_Sensor_isActive
  7625 ;;		_Sensor_isCalibrated
  7626 ;;		_Sensor_isEnabled
  7627 ;;		_Sensor_loadADCSettings
  7628 ;;		_TMR2_LoadPeriodRegister
  7629 ;;		_TMR2_StartTimer
  7630 ;;		_TMR2_StopTimer
  7631 ;;		_abs
  7632 ;; This function is called by:
  7633 ;;		_Sensor_Acquisition
  7634 ;;		_Sensor_Scanfrequency_Evaluation
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function _Sensor_Acq_ExecutePacket
  7640  007F                     _Sensor_Acq_ExecutePacket:	
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7644                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  7645  007F  0020               	movlb	0	; select bank0
  7646  0080  00D0               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  7647                           
  7648                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  7649  0081  01CB               	clrf	Sensor_Acq_ExecutePacket@last_a
  7650  0082  01CC               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  7651                           
  7652                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  7653  0083  01CD               	clrf	Sensor_Acq_ExecutePacket@last_b
  7654  0084  01CE               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  7655                           
  7656                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  7657  0085  01CA               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7658                           
  7659                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  7660  0086  01C7               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7661  0087  01C8               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7662                           
  7663                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  7664  0088  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7665  0089  1903               	btfsc	3,2
  7666  008A  28C5               	goto	l6148
  7667  008B  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7668  008C  1903               	btfsc	3,2
  7669  008D  28C5               	goto	l6148
  7670                           
  7671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  7672  008E  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7673  008F  3E08               	addlw	8
  7674  0090  0086               	movwf	6
  7675  0091  3001               	movlw	1	; select bank2/3
  7676  0092  0087               	movwf	7
  7677  0093  1981               	btfsc	1,3
  7678  0094  28A5               	goto	l6130
  7679  0095  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7680  0096  3E08               	addlw	8
  7681  0097  0086               	movwf	6
  7682  0098  3001               	movlw	1	; select bank2/3
  7683  0099  0087               	movwf	7
  7684  009A  1D81               	btfss	1,3
  7685  009B  28A5               	goto	l6130
  7686                           
  7687                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  7688  009C  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7689  009D  3E08               	addlw	8
  7690  009E  0086               	movwf	6
  7691  009F  3001               	movlw	1	; select bank2/3
  7692  00A0  0087               	movwf	7
  7693  00A1  1581               	bsf	1,3
  7694                           
  7695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  7696  00A2  01C7               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  7697  00A3  0AC7               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  7698                           
  7699                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  7700  00A4  28DA               	goto	l6172
  7701  00A5                     l6130:	
  7702  00A5  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7703  00A6  3E08               	addlw	8
  7704  00A7  0086               	movwf	6
  7705  00A8  3001               	movlw	1	; select bank2/3
  7706  00A9  0087               	movwf	7
  7707  00AA  1981               	btfsc	1,3
  7708  00AB  28BC               	goto	l6138
  7709  00AC  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7710  00AD  3E08               	addlw	8
  7711  00AE  0086               	movwf	6
  7712  00AF  3001               	movlw	1	; select bank2/3
  7713  00B0  0087               	movwf	7
  7714  00B1  1D81               	btfss	1,3
  7715  00B2  28BC               	goto	l6138
  7716                           
  7717                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  7718  00B3  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7719  00B4  3E08               	addlw	8
  7720  00B5  0086               	movwf	6
  7721  00B6  3001               	movlw	1	; select bank2/3
  7722  00B7  0087               	movwf	7
  7723  00B8  1581               	bsf	1,3
  7724                           
  7725                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  7726  00B9  01C8               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7727  00BA  0AC8               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  7728                           
  7729                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  7730  00BB  28DA               	goto	l6172
  7731  00BC                     l6138:	
  7732  00BC  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7733  00BD  3E08               	addlw	8
  7734  00BE  0086               	movwf	6
  7735  00BF  3001               	movlw	1	; select bank2/3
  7736  00C0  0087               	movwf	7
  7737  00C1  1981               	btfsc	1,3
  7738  00C2  28DA               	goto	l6172
  7739  00C3                     l6140:	
  7740  00C3  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7741  00C4  28D2               	goto	L3
  7742  00C5                     l6148:	
  7743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  7744                           
  7745  00C5  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7746  00C6  1D03               	btfss	3,2
  7747  00C7  28CB               	goto	l6160
  7748  00C8  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7749  00C9  1D03               	btfss	3,2
  7750  00CA  28C3               	goto	l6140
  7751  00CB                     l6160:	
  7752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  7753                           
  7754  00CB  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7755  00CC  1903               	btfsc	3,2
  7756  00CD  28DA               	goto	l6172
  7757  00CE  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7758  00CF  1D03               	btfss	3,2
  7759  00D0  28DA               	goto	l6172
  7760                           
  7761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  7762  00D1  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7763  00D2                     L3:	
  7764  00D2  3E08               	addlw	8
  7765  00D3  0086               	movwf	6
  7766  00D4  3001               	movlw	1	; select bank2/3
  7767  00D5  0087               	movwf	7
  7768  00D6  1981               	btfsc	1,3
  7769  00D7  28DA               	goto	l6172
  7770  00D8                     l6142:	
  7771                           
  7772                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  7773  00D8  3000               	movlw	0
  7774  00D9  0008               	return
  7775  00DA                     l6172:	
  7776                           
  7777                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  7778  00DA  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7779  00DB  3192  22F2  3180   	fcall	_Sensor_isActive
  7780  00DE  3A00               	xorlw	0
  7781  00DF  1903               	skipnz
  7782  00E0  28E4               	goto	l6176
  7783                           
  7784                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  7785  00E1  0020               	movlb	0	; select bank0
  7786  00E2  01CA               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7787  00E3  0ACA               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  7788  00E4                     l6176:	
  7789                           
  7790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  7791  00E4  002E               	movlb	14	; select bank14
  7792  00E5  0812               	movf	18,w	;volatile
  7793  00E6  0020               	movlb	0	; select bank0
  7794  00E7  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7795  00E8  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7796  00E9  00C4               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  7797                           
  7798                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  7799  00EA  002E               	movlb	14	; select bank14
  7800  00EB  0813               	movf	19,w	;volatile
  7801  00EC  0020               	movlb	0	; select bank0
  7802  00ED  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7803  00EE  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7804  00EF  00C5               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  7805                           
  7806                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  7807  00F0  002F               	movlb	15	; select bank15
  7808  00F1  0813               	movf	19,w	;volatile
  7809  00F2  0020               	movlb	0	; select bank0
  7810  00F3  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7811  00F4  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7812  00F5  00C6               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  7813                           
  7814                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  7815  00F6  3193  2321  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  7816                           
  7817                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  7818  00F9  0020               	movlb	0	; select bank0
  7819  00FA  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7820  00FB  1903               	btfsc	3,2
  7821  00FC  2910               	goto	l6192
  7822                           
  7823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7824  00FD  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7825  00FE  3E04               	addlw	4
  7826  00FF  0086               	movwf	6
  7827  0100  3001               	movlw	1	; select bank2/3
  7828  0101  0087               	movwf	7
  7829  0102  0801               	movf	1,w
  7830  0103  3EFF               	addlw	255
  7831  0104  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7832  0105  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7833  0106  00CF               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7834                           
  7835                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  7836  0107  01C9               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7837                           
  7838                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  7839  0108  3040               	movlw	64
  7840  0109  002E               	movlb	14	; select bank14
  7841  010A  0098               	movwf	24	;volatile
  7842                           
  7843                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  7844  010B  002F               	movlb	15	; select bank15
  7845  010C  0198               	clrf	24	;volatile
  7846                           
  7847                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x1;
  7848  010D  0022               	movlb	2	; select bank2
  7849  010E  141D               	bsf	29,0	;volatile
  7850                           
  7851                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  7852  010F  2923               	goto	l6202
  7853  0110                     l6192:	
  7854                           
  7855                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7856  0110  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7857  0111  3E04               	addlw	4
  7858  0112  0086               	movwf	6
  7859  0113  3001               	movlw	1	; select bank2/3
  7860  0114  0087               	movwf	7
  7861  0115  0801               	movf	1,w
  7862  0116  3EFF               	addlw	255
  7863  0117  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7864  0118  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7865  0119  00CF               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7866                           
  7867                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  7868  011A  01C9               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7869  011B  0AC9               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  7870                           
  7871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  7872  011C  002E               	movlb	14	; select bank14
  7873  011D  0198               	clrf	24	;volatile
  7874                           
  7875                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  7876  011E  3040               	movlw	64
  7877  011F  002F               	movlb	15	; select bank15
  7878  0120  0098               	movwf	24	;volatile
  7879                           
  7880                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  7881  0121  0022               	movlb	2	; select bank2
  7882  0122  101D               	bcf	29,0	;volatile
  7883  0123                     l6202:	
  7884                           
  7885                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  7886  0123  0020               	movlb	0	; select bank0
  7887  0124  01A6               	clrf	Sensor_loadADCSettings@adc_index
  7888  0125  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7889  0126  3186  26EE  3180   	fcall	_Sensor_loadADCSettings
  7890                           
  7891                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  7892  0129  0020               	movlb	0	; select bank0
  7893  012A  01A6               	clrf	Sensor_loadADCSettings@adc_index
  7894  012B  0AA6               	incf	Sensor_loadADCSettings@adc_index,f
  7895  012C  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7896  012D  3186  26EE  3180   	fcall	_Sensor_loadADCSettings
  7897                           
  7898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  7899  0130  0020               	movlb	0	; select bank0
  7900  0131  1068               	bcf	_sensor_globalFlags,0	;volatile
  7901                           
  7902                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  7903  0132  1168               	bcf	_sensor_globalFlags,2	;volatile
  7904                           
  7905                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  7906  0133  11E8               	bcf	_sensor_globalFlags,3	;volatile
  7907                           
  7908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  7909  0134  0021               	movlb	1	; select bank1
  7910  0135  086B               	movf	_sample_period^(0+128),w
  7911  0136  3191  21E9  3180   	fcall	_TMR2_LoadPeriodRegister
  7912                           
  7913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  7914  0139  3191  21CF  3180   	fcall	_TMR2_StartTimer
  7915                           
  7916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  7917  013C  0021               	movlb	1	; select bank1
  7918  013D  01DB               	clrf	_packet_noise^(0+128)
  7919  013E  01DC               	clrf	(_packet_noise+1)^(0+128)
  7920  013F                     l6218:	
  7921                           
  7922                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  7923  013F  0020               	movlb	0	; select bank0
  7924  0140  0849               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  7925  0141  1D03               	btfss	3,2
  7926  0142  2949               	goto	l286
  7927                           
  7928                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7929  0143  1F11               	btfss	17,6	;volatile
  7930  0144  10E8               	bcf	_sensor_globalFlags,1	;volatile
  7931  0145                     l288:	
  7932  0145  1F11               	btfss	17,6	;volatile
  7933  0146  2945               	goto	l288
  7934                           
  7935                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  7936  0147  1311               	bcf	17,6	;volatile
  7937                           
  7938                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  7939  0148  294F               	goto	l6226
  7940  0149                     l286:	
  7941                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  7942                           
  7943                           
  7944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7945  0149  1B12               	btfsc	18,6	;volatile
  7946  014A  294C               	goto	l293
  7947  014B  10E8               	bcf	_sensor_globalFlags,1	;volatile
  7948  014C                     l293:	
  7949  014C  1F12               	btfss	18,6	;volatile
  7950  014D  294C               	goto	l293
  7951                           
  7952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  7953  014E  1312               	bcf	18,6	;volatile
  7954  014F                     l6226:	
  7955                           
  7956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  7957  014F  3021               	movlw	33
  7958  0150  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7959  0151  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7960  0152  002E               	movlb	14	; select bank14
  7961  0153  0698               	xorwf	24,f	;volatile
  7962                           
  7963                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  7964  0154  3021               	movlw	33
  7965  0155  0020               	movlb	0	; select bank0
  7966  0156  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7967  0157  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7968  0158  002F               	movlb	15	; select bank15
  7969  0159  0698               	xorwf	24,f	;volatile
  7970                           
  7971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  7972  015A  30C0               	movlw	192
  7973  015B  0020               	movlb	0	; select bank0
  7974  015C  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7975  015D  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7976  015E  002E               	movlb	14	; select bank14
  7977  015F  0694               	xorwf	20,f	;volatile
  7978                           
  7979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  7980  0160  30C0               	movlw	192
  7981  0161  0020               	movlb	0	; select bank0
  7982  0162  00C3               	movwf	??_Sensor_Acq_ExecutePacket
  7983  0163  0843               	movf	??_Sensor_Acq_ExecutePacket,w
  7984  0164  002F               	movlb	15	; select bank15
  7985  0165  0694               	xorwf	20,f	;volatile
  7986                           
  7987                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  7988  0166  0020               	movlb	0	; select bank0
  7989  0167  184F               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  7990  0168  29B6               	goto	l6242
  7991                           
  7992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  7993  0169  002E               	movlb	14	; select bank14
  7994  016A  081A               	movf	26,w	;volatile
  7995  016B  0021               	movlb	1	; select bank1
  7996  016C  07CD               	addwf	_packet_sample^(0+128),f
  7997  016D  002E               	movlb	14	; select bank14
  7998  016E  081B               	movf	27,w	;volatile
  7999  016F  0021               	movlb	1	; select bank1
  8000  0170  3DCE               	addwfc	(_packet_sample+1)^(0+128),f
  8001                           
  8002                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  8003  0171  002F               	movlb	15	; select bank15
  8004  0172  081A               	movf	26,w	;volatile
  8005  0173  0021               	movlb	1	; select bank1
  8006  0174  07CF               	addwf	(_packet_sample^(0+128)+2),f
  8007  0175  002F               	movlb	15	; select bank15
  8008  0176  081B               	movf	27,w	;volatile
  8009  0177  0021               	movlb	1	; select bank1
  8010  0178  3DD0               	addwfc	((_packet_sample+1)^(0+128)+2),f
  8011                           
  8012                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  8013  0179  0020               	movlb	0	; select bank0
  8014  017A  084A               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  8015  017B  1D03               	btfss	3,2
  8016  017C  2998               	goto	l6238
  8017                           
  8018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  8019  017D  002E               	movlb	14	; select bank14
  8020  017E  081A               	movf	26,w	;volatile
  8021  017F  0020               	movlb	0	; select bank0
  8022  0180  024D               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  8023  0181  00B8               	movwf	abs@a
  8024  0182  002E               	movlb	14	; select bank14
  8025  0183  081B               	movf	27,w	;volatile
  8026  0184  0020               	movlb	0	; select bank0
  8027  0185  3B4E               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  8028  0186  00B9               	movwf	abs@a+1
  8029  0187  3194  2475  3180   	fcall	_abs
  8030  018A  0020               	movlb	0	; select bank0
  8031  018B  0838               	movf	?_abs,w
  8032  018C  0021               	movlb	1	; select bank1
  8033  018D  07DB               	addwf	_packet_noise^(0+128),f
  8034  018E  0020               	movlb	0	; select bank0
  8035  018F  0839               	movf	?_abs+1,w
  8036  0190  0021               	movlb	1	; select bank1
  8037  0191  3DDC               	addwfc	(_packet_noise+1)^(0+128),f
  8038                           
  8039                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  8040  0192  002E               	movlb	14	; select bank14
  8041  0193  081B               	movf	27,w	;volatile
  8042  0194  0020               	movlb	0	; select bank0
  8043  0195  00CE               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  8044  0196  002E               	movlb	14	; select bank14
  8045  0197  29B2               	goto	L2
  8046  0198                     l6238:	
  8047                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  8048                           
  8049                           
  8050                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  8051  0198  002F               	movlb	15	; select bank15
  8052  0199  081A               	movf	26,w	;volatile
  8053  019A  0020               	movlb	0	; select bank0
  8054  019B  024D               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  8055  019C  00B8               	movwf	abs@a
  8056  019D  002F               	movlb	15	; select bank15
  8057  019E  081B               	movf	27,w	;volatile
  8058  019F  0020               	movlb	0	; select bank0
  8059  01A0  3B4E               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  8060  01A1  00B9               	movwf	abs@a+1
  8061  01A2  3194  2475  3180   	fcall	_abs
  8062  01A5  0020               	movlb	0	; select bank0
  8063  01A6  0838               	movf	?_abs,w
  8064  01A7  0021               	movlb	1	; select bank1
  8065  01A8  07DB               	addwf	_packet_noise^(0+128),f
  8066  01A9  0020               	movlb	0	; select bank0
  8067  01AA  0839               	movf	?_abs+1,w
  8068  01AB  0021               	movlb	1	; select bank1
  8069  01AC  3DDC               	addwfc	(_packet_noise+1)^(0+128),f
  8070                           
  8071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  8072  01AD  002F               	movlb	15	; select bank15
  8073  01AE  081B               	movf	27,w	;volatile
  8074  01AF  0020               	movlb	0	; select bank0
  8075  01B0  00CE               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  8076  01B1  002F               	movlb	15	; select bank15
  8077  01B2                     L2:	
  8078  01B2  081A               	movf	26,w	;volatile
  8079  01B3  0020               	movlb	0	; select bank0
  8080  01B4  00CD               	movwf	Sensor_Acq_ExecutePacket@last_b
  8081  01B5  29EE               	goto	l6254
  8082  01B6                     l6242:	
  8083                           
  8084                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  8085  01B6  002E               	movlb	14	; select bank14
  8086  01B7  081A               	movf	26,w	;volatile
  8087  01B8  0021               	movlb	1	; select bank1
  8088  01B9  02CD               	subwf	_packet_sample^(0+128),f
  8089  01BA  002E               	movlb	14	; select bank14
  8090  01BB  081B               	movf	27,w	;volatile
  8091  01BC  0021               	movlb	1	; select bank1
  8092  01BD  3BCE               	subwfb	(_packet_sample+1)^(0+128),f
  8093                           
  8094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  8095  01BE  002F               	movlb	15	; select bank15
  8096  01BF  081A               	movf	26,w	;volatile
  8097  01C0  0021               	movlb	1	; select bank1
  8098  01C1  02CF               	subwf	(_packet_sample^(0+128)+2),f
  8099  01C2  002F               	movlb	15	; select bank15
  8100  01C3  081B               	movf	27,w	;volatile
  8101  01C4  0021               	movlb	1	; select bank1
  8102  01C5  3BD0               	subwfb	((_packet_sample+1)^(0+128)+2),f
  8103                           
  8104                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  8105  01C6  0020               	movlb	0	; select bank0
  8106  01C7  084A               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  8107  01C8  1D03               	btfss	3,2
  8108  01C9  29D1               	goto	l6250
  8109                           
  8110                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  8111  01CA  002E               	movlb	14	; select bank14
  8112  01CB  081A               	movf	26,w	;volatile
  8113  01CC  0020               	movlb	0	; select bank0
  8114  01CD  024B               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  8115  01CE  00B8               	movwf	abs@a
  8116  01CF  002E               	movlb	14	; select bank14
  8117  01D0  29D7               	goto	L5
  8118  01D1                     l6250:	
  8119                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  8120                           
  8121                           
  8122                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  8123  01D1  002F               	movlb	15	; select bank15
  8124  01D2  081A               	movf	26,w	;volatile
  8125  01D3  0020               	movlb	0	; select bank0
  8126  01D4  024B               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  8127  01D5  00B8               	movwf	abs@a
  8128  01D6  002F               	movlb	15	; select bank15
  8129  01D7                     L5:	
  8130  01D7  081B               	movf	27,w	;volatile
  8131  01D8  0020               	movlb	0	; select bank0
  8132  01D9  3B4C               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  8133  01DA  00B9               	movwf	abs@a+1
  8134  01DB  3194  2475  3180   	fcall	_abs
  8135  01DE  0020               	movlb	0	; select bank0
  8136  01DF  0838               	movf	?_abs,w
  8137  01E0  0021               	movlb	1	; select bank1
  8138  01E1  07DB               	addwf	_packet_noise^(0+128),f
  8139  01E2  0020               	movlb	0	; select bank0
  8140  01E3  0839               	movf	?_abs+1,w
  8141  01E4  0021               	movlb	1	; select bank1
  8142  01E5  3DDC               	addwfc	(_packet_noise+1)^(0+128),f
  8143                           
  8144                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  8145  01E6  002E               	movlb	14	; select bank14
  8146  01E7  081B               	movf	27,w	;volatile
  8147  01E8  0020               	movlb	0	; select bank0
  8148  01E9  00CC               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  8149  01EA  002E               	movlb	14	; select bank14
  8150  01EB  081A               	movf	26,w	;volatile
  8151  01EC  0020               	movlb	0	; select bank0
  8152  01ED  00CB               	movwf	Sensor_Acq_ExecutePacket@last_a
  8153  01EE                     l6254:	
  8154                           
  8155                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  8156  01EE  084F               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  8157  01EF  1903               	btfsc	3,2
  8158                           
  8159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  8160  01F0  1468               	bsf	_sensor_globalFlags,0	;volatile
  8161                           
  8162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  8163  01F1  3001               	movlw	1
  8164  01F2  02CF               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  8165                           
  8166                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  8167  01F3  1CE8               	btfss	_sensor_globalFlags,1	;volatile
  8168  01F4  29F7               	goto	l303
  8169                           
  8170                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  8171  01F5  1568               	bsf	_sensor_globalFlags,2	;volatile
  8172                           
  8173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  8174  01F6  1468               	bsf	_sensor_globalFlags,0	;volatile
  8175  01F7                     l303:	
  8176                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  8177                           
  8178                           
  8179                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  8180  01F7  14E8               	bsf	_sensor_globalFlags,1	;volatile
  8181                           
  8182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  8183  01F8  1C68               	btfss	_sensor_globalFlags,0	;volatile
  8184  01F9  293F               	goto	l6218
  8185                           
  8186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  8187  01FA  3191  21D2  3180   	fcall	_TMR2_StopTimer
  8188                           
  8189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  8190  01FD  0020               	movlb	0	; select bank0
  8191  01FE  0844               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  8192  01FF  002E               	movlb	14	; select bank14
  8193  0200  0092               	movwf	18	;volatile
  8194                           
  8195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  8196  0201  0020               	movlb	0	; select bank0
  8197  0202  0845               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  8198  0203  002E               	movlb	14	; select bank14
  8199  0204  0093               	movwf	19	;volatile
  8200                           
  8201                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  8202  0205  0020               	movlb	0	; select bank0
  8203  0206  0846               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  8204  0207  002F               	movlb	15	; select bank15
  8205  0208  0093               	movwf	19	;volatile
  8206                           
  8207                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  8208  0209  0020               	movlb	0	; select bank0
  8209  020A  1D68               	btfss	_sensor_globalFlags,2	;volatile
  8210  020B  2A0E               	goto	l305
  8211                           
  8212                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  8213  020C  30FB               	movlw	251
  8214  020D  0008               	return
  8215  020E                     l305:	
  8216                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  8217                           
  8218                           
  8219                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  8220  020E  1DE8               	btfss	_sensor_globalFlags,3	;volatile
  8221  020F  2A12               	goto	l6282
  8222                           
  8223                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  8224  0210  30FA               	movlw	250
  8225  0211  0008               	return
  8226  0212                     l6282:	
  8227                           
  8228                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  8229  0212  0847               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  8230  0213  1903               	btfsc	3,2
  8231  0214  2A1B               	goto	l6286
  8232                           
  8233                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  8234  0215  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8235  0216  3E08               	addlw	8
  8236  0217  0086               	movwf	6
  8237  0218  3001               	movlw	1	; select bank2/3
  8238  0219  0087               	movwf	7
  8239  021A  1181               	bcf	1,3
  8240  021B                     l6286:	
  8241                           
  8242                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  8243  021B  0848               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  8244  021C  1903               	btfsc	3,2
  8245  021D  2A24               	goto	l6290
  8246                           
  8247                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  8248  021E  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8249  021F  3E08               	addlw	8
  8250  0220  0086               	movwf	6
  8251  0221  3001               	movlw	1	; select bank2/3
  8252  0222  0087               	movwf	7
  8253  0223  1181               	bcf	1,3
  8254  0224                     l6290:	
  8255                           
  8256                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  8257  0224  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8258  0225  3193  2374  3180   	fcall	_Sensor_isEnabled
  8259  0228  3A00               	xorlw	0
  8260  0229  1903               	skipnz
  8261  022A  2A38               	goto	l6296
  8262  022B  0020               	movlb	0	; select bank0
  8263  022C  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8264  022D  3192  22B2  3180   	fcall	_Sensor_isCalibrated
  8265  0230  3A00               	xorlw	0
  8266  0231  1D03               	skipz
  8267  0232  2A38               	goto	l6296
  8268                           
  8269                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  8270  0233  0020               	movlb	0	; select bank0
  8271  0234  0850               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8272  0235  318E  2623  3180   	fcall	_Sensor_autoCalibration
  8273  0238                     l6296:	
  8274                           
  8275                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  8276  0238  0020               	movlb	0	; select bank0
  8277  0239  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8278  023A  3193  2374  3180   	fcall	_Sensor_isEnabled
  8279  023D  3A00               	xorlw	0
  8280  023E  1903               	skipnz
  8281  023F  2A4D               	goto	l6302
  8282  0240  0020               	movlb	0	; select bank0
  8283  0241  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8284  0242  3192  22B2  3180   	fcall	_Sensor_isCalibrated
  8285  0245  3A00               	xorlw	0
  8286  0246  1D03               	skipz
  8287  0247  2A4D               	goto	l6302
  8288                           
  8289                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  8290  0248  0020               	movlb	0	; select bank0
  8291  0249  0842               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8292  024A  318E  2623  3180   	fcall	_Sensor_autoCalibration
  8293  024D                     l6302:	
  8294                           
  8295                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  8296  024D  002E               	movlb	14	; select bank14
  8297  024E  0196               	clrf	22	;volatile
  8298                           
  8299                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  8300  024F  002F               	movlb	15	; select bank15
  8301  0250  0196               	clrf	22	;volatile
  8302                           
  8303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  8304  0251  002E               	movlb	14	; select bank14
  8305  0252  0197               	clrf	23	;volatile
  8306                           
  8307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  8308  0253  002F               	movlb	15	; select bank15
  8309  0254  0197               	clrf	23	;volatile
  8310                           
  8311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  8312  0255  002E               	movlb	14	; select bank14
  8313  0256  1011               	bcf	17,0	;volatile
  8314                           
  8315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  8316  0257  002F               	movlb	15	; select bank15
  8317  0258  1011               	bcf	17,0	;volatile
  8318  0259  28D8               	goto	l6142
  8319  025A                     __end_of_Sensor_Acq_ExecutePacket:	
  8320                           
  8321                           	psect	text41
  8322  11D2                     __ptext41:	
  8323 ;; *************** function _TMR2_StopTimer *****************
  8324 ;; Defined at:
  8325 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;		None
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;		None
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  1    wreg      void 
  8332 ;; Registers used:
  8333 ;;		None
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8339 ;;      Params:         0       0       0       0       0       0       0       0
  8340 ;;      Locals:         0       0       0       0       0       0       0       0
  8341 ;;      Temps:          0       0       0       0       0       0       0       0
  8342 ;;      Totals:         0       0       0       0       0       0       0       0
  8343 ;;Total ram usage:        0 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    7
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_Sensor_Acq_ExecutePacket
  8350 ;; This function uses a non-reentrant model
  8351 ;;
  8352                           
  8353                           
  8354                           ;psect for function _TMR2_StopTimer
  8355  11D2                     _TMR2_StopTimer:	
  8356                           
  8357                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  8358                           
  8359                           ;incstack = 0
  8360                           ; Regs used in _TMR2_StopTimer: []
  8361  11D2  0020               	movlb	0	; select bank0
  8362  11D3  111C               	bcf	28,2	;volatile
  8363  11D4  0008               	return
  8364  11D5                     __end_of_TMR2_StopTimer:	
  8365                           
  8366                           	psect	text42
  8367  11CF                     __ptext42:	
  8368 ;; *************** function _TMR2_StartTimer *****************
  8369 ;; Defined at:
  8370 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;		None
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;		None
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  1    wreg      void 
  8377 ;; Registers used:
  8378 ;;		None
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8384 ;;      Params:         0       0       0       0       0       0       0       0
  8385 ;;      Locals:         0       0       0       0       0       0       0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0
  8387 ;;      Totals:         0       0       0       0       0       0       0       0
  8388 ;;Total ram usage:        0 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    7
  8391 ;; This function calls:
  8392 ;;		Nothing
  8393 ;; This function is called by:
  8394 ;;		_Sensor_Acq_ExecutePacket
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           
  8399                           ;psect for function _TMR2_StartTimer
  8400  11CF                     _TMR2_StartTimer:	
  8401                           
  8402                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  8403                           
  8404                           ;incstack = 0
  8405                           ; Regs used in _TMR2_StartTimer: []
  8406  11CF  0020               	movlb	0	; select bank0
  8407  11D0  151C               	bsf	28,2	;volatile
  8408  11D1  0008               	return
  8409  11D2                     __end_of_TMR2_StartTimer:	
  8410                           
  8411                           	psect	text43
  8412  11E9                     __ptext43:	
  8413 ;; *************** function _TMR2_LoadPeriodRegister *****************
  8414 ;; Defined at:
  8415 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;  periodVal       1    wreg     unsigned char 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  periodVal       1    5[BANK0 ] unsigned char 
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  1    wreg      void 
  8422 ;; Registers used:
  8423 ;;		wreg
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8429 ;;      Params:         0       0       0       0       0       0       0       0
  8430 ;;      Locals:         0       1       0       0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0       0
  8432 ;;      Totals:         0       1       0       0       0       0       0       0
  8433 ;;Total ram usage:        1 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    7
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_Sensor_Acq_ExecutePacket
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           
  8444                           ;psect for function _TMR2_LoadPeriodRegister
  8445  11E9                     _TMR2_LoadPeriodRegister:	
  8446                           
  8447                           ;incstack = 0
  8448                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  8449                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  8450  11E9  0020               	movlb	0	; select bank0
  8451  11EA  00A5               	movwf	TMR2_LoadPeriodRegister@periodVal
  8452                           
  8453                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  8454  11EB  0825               	movf	TMR2_LoadPeriodRegister@periodVal,w
  8455  11EC  009B               	movwf	27	;volatile
  8456  11ED  0008               	return
  8457  11EE                     __end_of_TMR2_LoadPeriodRegister:	
  8458                           
  8459                           	psect	text44
  8460  06EE                     __ptext44:	
  8461 ;; *************** function _Sensor_loadADCSettings *****************
  8462 ;; Defined at:
  8463 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  sensor          1    wreg     PTR struct .
  8466 ;;		 -> NULL(0), mtouch_sensor(27), 
  8467 ;;  adc_index       1    6[BANK0 ] unsigned char 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  sensor          1   13[BANK0 ] PTR struct .
  8470 ;;		 -> NULL(0), mtouch_sensor(27), 
  8471 ;;  addressOffse    1   12[BANK0 ] unsigned char 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8481 ;;      Params:         0       1       0       0       0       0       0       0
  8482 ;;      Locals:         0       4       0       0       0       0       0       0
  8483 ;;      Temps:          0       3       0       0       0       0       0       0
  8484 ;;      Totals:         0       8       0       0       0       0       0       0
  8485 ;;Total ram usage:        8 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    8
  8488 ;; This function calls:
  8489 ;;		_Sensor_isCalibrated
  8490 ;;		_Sensor_isCalibratingAcqTime
  8491 ;; This function is called by:
  8492 ;;		_Sensor_Acq_ExecutePacket
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _Sensor_loadADCSettings
  8498  06EE                     _Sensor_loadADCSettings:	
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8502                           ;Sensor_loadADCSettings@sensor stored from wreg
  8503  06EE  0020               	movlb	0	; select bank0
  8504  06EF  00AD               	movwf	Sensor_loadADCSettings@sensor
  8505                           
  8506                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  8507  06F0  082D               	movf	Sensor_loadADCSettings@sensor,w
  8508  06F1  1903               	btfsc	3,2
  8509  06F2  0008               	return
  8510                           
  8511                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  8512  06F3  0826               	movf	Sensor_loadADCSettings@adc_index,w
  8513  06F4  1D03               	btfss	3,2
  8514  06F5  2EF9               	goto	l6034
  8515  06F6  01AA               	clrf	_Sensor_loadADCSettings$562
  8516  06F7  01AB               	clrf	_Sensor_loadADCSettings$562+1
  8517  06F8  2EFD               	goto	l257
  8518  06F9                     l6034:	
  8519  06F9  3080               	movlw	128
  8520  06FA  00AA               	movwf	_Sensor_loadADCSettings$562
  8521  06FB  3000               	movlw	0
  8522  06FC  00AB               	movwf	_Sensor_loadADCSettings$562+1
  8523  06FD                     l257:	
  8524  06FD  082A               	movf	_Sensor_loadADCSettings$562,w
  8525  06FE  00A7               	movwf	??_Sensor_loadADCSettings
  8526  06FF  0827               	movf	??_Sensor_loadADCSettings,w
  8527  0700  00AC               	movwf	Sensor_loadADCSettings@addressOffset
  8528                           
  8529                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  8530  0701  0A2D               	incf	Sensor_loadADCSettings@sensor,w
  8531  0702  0086               	movwf	6
  8532  0703  3001               	movlw	1	; select bank2/3
  8533  0704  0087               	movwf	7
  8534  0705  0801               	movf	1,w
  8535  0706  00A7               	movwf	??_Sensor_loadADCSettings
  8536  0707  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8537  0708  3E11               	addlw	17
  8538  0709  00A8               	movwf	??_Sensor_loadADCSettings+1
  8539  070A  01A9               	clrf	??_Sensor_loadADCSettings+2
  8540  070B  3007               	movlw	7
  8541  070C  3DA9               	addwfc	??_Sensor_loadADCSettings+2,f
  8542  070D  0828               	movf	??_Sensor_loadADCSettings+1,w
  8543  070E  0086               	movwf	6
  8544  070F  0829               	movf	??_Sensor_loadADCSettings+2,w
  8545  0710  0087               	movwf	7
  8546  0711  0827               	movf	??_Sensor_loadADCSettings,w
  8547  0712  0081               	movwf	1
  8548                           
  8549                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  8550  0713  082D               	movf	Sensor_loadADCSettings@sensor,w
  8551  0714  3E05               	addlw	5
  8552  0715  0086               	movwf	6
  8553  0716  3001               	movlw	1	; select bank2/3
  8554  0717  0087               	movwf	7
  8555  0718  0801               	movf	1,w
  8556  0719  00A7               	movwf	??_Sensor_loadADCSettings
  8557  071A  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8558  071B  3E19               	addlw	25
  8559  071C  00A8               	movwf	??_Sensor_loadADCSettings+1
  8560  071D  01A9               	clrf	??_Sensor_loadADCSettings+2
  8561  071E  3007               	movlw	7
  8562  071F  3DA9               	addwfc	??_Sensor_loadADCSettings+2,f
  8563  0720  0828               	movf	??_Sensor_loadADCSettings+1,w
  8564  0721  0086               	movwf	6
  8565  0722  0829               	movf	??_Sensor_loadADCSettings+2,w
  8566  0723  0087               	movwf	7
  8567  0724  0827               	movf	??_Sensor_loadADCSettings,w
  8568  0725  0081               	movwf	1
  8569                           
  8570                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  8571  0726  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8572  0727  3E13               	addlw	19
  8573  0728  00A7               	movwf	??_Sensor_loadADCSettings
  8574  0729  01A8               	clrf	??_Sensor_loadADCSettings+1
  8575  072A  3007               	movlw	7
  8576  072B  3DA8               	addwfc	??_Sensor_loadADCSettings+1,f
  8577  072C  0827               	movf	??_Sensor_loadADCSettings,w
  8578  072D  0086               	movwf	6
  8579  072E  0828               	movf	??_Sensor_loadADCSettings+1,w
  8580  072F  0087               	movwf	7
  8581  0730  3050               	movlw	80
  8582  0731  0081               	movwf	1
  8583                           
  8584                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  8585  0732  30FE               	movlw	254
  8586  0733  00A7               	movwf	??_Sensor_loadADCSettings
  8587  0734  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8588  0735  3E18               	addlw	24
  8589  0736  0086               	movwf	6
  8590  0737  0187               	clrf	7
  8591  0738  3007               	movlw	7
  8592  0739  3D87               	addwfc	7,f
  8593  073A  0827               	movf	??_Sensor_loadADCSettings,w
  8594  073B  0581               	andwf	1,f
  8595                           
  8596                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  8597  073C  082D               	movf	Sensor_loadADCSettings@sensor,w
  8598  073D  3192  22B2  3186   	fcall	_Sensor_isCalibrated
  8599  0740  3A00               	xorlw	0
  8600  0741  1903               	skipnz
  8601  0742  2F58               	goto	l6048
  8602                           
  8603                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  8604  0743  0020               	movlb	0	; select bank0
  8605  0744  082D               	movf	Sensor_loadADCSettings@sensor,w
  8606  0745  3E02               	addlw	2
  8607  0746  0086               	movwf	6
  8608  0747  3001               	movlw	1	; select bank2/3
  8609  0748  0087               	movwf	7
  8610  0749  0801               	movf	1,w
  8611  074A  00A7               	movwf	??_Sensor_loadADCSettings
  8612  074B  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8613  074C  3E16               	addlw	22
  8614  074D  00A8               	movwf	??_Sensor_loadADCSettings+1
  8615  074E  01A9               	clrf	??_Sensor_loadADCSettings+2
  8616  074F  3007               	movlw	7
  8617  0750  3DA9               	addwfc	??_Sensor_loadADCSettings+2,f
  8618  0751  0828               	movf	??_Sensor_loadADCSettings+1,w
  8619  0752  0086               	movwf	6
  8620  0753  0829               	movf	??_Sensor_loadADCSettings+2,w
  8621  0754  0087               	movwf	7
  8622  0755  0827               	movf	??_Sensor_loadADCSettings,w
  8623  0756  0081               	movwf	1
  8624  0757  2F6D               	goto	L7
  8625  0758                     l6048:	
  8626                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  8627                           
  8628                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  8629                           
  8630                           
  8631                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  8632  0758  0020               	movlb	0	; select bank0
  8633  0759  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8634  075A  3E16               	addlw	22
  8635  075B  00A7               	movwf	??_Sensor_loadADCSettings
  8636  075C  01A8               	clrf	??_Sensor_loadADCSettings+1
  8637  075D  3007               	movlw	7
  8638  075E  3DA8               	addwfc	??_Sensor_loadADCSettings+1,f
  8639  075F  0827               	movf	??_Sensor_loadADCSettings,w
  8640  0760  0086               	movwf	6
  8641  0761  0828               	movf	??_Sensor_loadADCSettings+1,w
  8642  0762  0087               	movwf	7
  8643  0763  3020               	movlw	32
  8644  0764  0081               	movwf	1
  8645                           
  8646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  8647  0765  082D               	movf	Sensor_loadADCSettings@sensor,w
  8648  0766  3192  2292  3186   	fcall	_Sensor_isCalibratingAcqTime
  8649  0769  3A00               	xorlw	0
  8650  076A  1903               	skipnz
  8651  076B  2F80               	goto	l6054
  8652                           
  8653                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  8654  076C  0020               	movlb	0	; select bank0
  8655  076D                     L7:	
  8656  076D  082D               	movf	Sensor_loadADCSettings@sensor,w
  8657  076E  3E03               	addlw	3
  8658  076F  0086               	movwf	6
  8659  0770  3001               	movlw	1	; select bank2/3
  8660  0771  0087               	movwf	7
  8661  0772  0801               	movf	1,w
  8662  0773  00A7               	movwf	??_Sensor_loadADCSettings
  8663  0774  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8664  0775  3E17               	addlw	23
  8665  0776  00A8               	movwf	??_Sensor_loadADCSettings+1
  8666  0777  01A9               	clrf	??_Sensor_loadADCSettings+2
  8667  0778  3007               	movlw	7
  8668  0779  3DA9               	addwfc	??_Sensor_loadADCSettings+2,f
  8669  077A  0828               	movf	??_Sensor_loadADCSettings+1,w
  8670  077B  0086               	movwf	6
  8671  077C  0829               	movf	??_Sensor_loadADCSettings+2,w
  8672  077D  0087               	movwf	7
  8673  077E  0827               	movf	??_Sensor_loadADCSettings,w
  8674  077F  2F8C               	goto	L6
  8675  0780                     l6054:	
  8676                           
  8677                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  8678  0780  0020               	movlb	0	; select bank0
  8679  0781  082C               	movf	Sensor_loadADCSettings@addressOffset,w
  8680  0782  3E17               	addlw	23
  8681  0783  00A7               	movwf	??_Sensor_loadADCSettings
  8682  0784  01A8               	clrf	??_Sensor_loadADCSettings+1
  8683  0785  3007               	movlw	7
  8684  0786  3DA8               	addwfc	??_Sensor_loadADCSettings+1,f
  8685  0787  0827               	movf	??_Sensor_loadADCSettings,w
  8686  0788  0086               	movwf	6
  8687  0789  0828               	movf	??_Sensor_loadADCSettings+1,w
  8688  078A  0087               	movwf	7
  8689  078B  3020               	movlw	32
  8690  078C                     L6:	
  8691  078C  0081               	movwf	1
  8692                           
  8693                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  8694                           
  8695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  8696  078D  082D               	movf	Sensor_loadADCSettings@sensor,w
  8697  078E  3E04               	addlw	4
  8698  078F  0086               	movwf	6
  8699  0790  3001               	movlw	1	; select bank2/3
  8700  0791  0087               	movwf	7
  8701  0792  0801               	movf	1,w
  8702  0793  00A7               	movwf	??_Sensor_loadADCSettings
  8703  0794  01A8               	clrf	??_Sensor_loadADCSettings+1
  8704  0795  3009               	movlw	9
  8705  0796                     u6165:	
  8706  0796  35A7               	lslf	??_Sensor_loadADCSettings,f
  8707  0797  0DA8               	rlf	??_Sensor_loadADCSettings+1,f
  8708  0798  0B89               	decfsz	9,f
  8709  0799  2F96               	goto	u6165
  8710  079A  3526               	lslf	Sensor_loadADCSettings@adc_index,w
  8711  079B  3ECD               	addlw	(low (_packet_sample| 0))& (0+255)
  8712  079C  0086               	movwf	6
  8713  079D  0187               	clrf	7
  8714  079E  0827               	movf	??_Sensor_loadADCSettings,w
  8715  079F  3FC0               	movwi [0]fsr1
  8716  07A0  0828               	movf	??_Sensor_loadADCSettings+1,w
  8717  07A1  3FC1               	movwi [1]fsr1
  8718  07A2  0008               	return
  8719  07A3                     __end_of_Sensor_loadADCSettings:	
  8720                           
  8721                           	psect	text45
  8722  12B2                     __ptext45:	
  8723 ;; *************** function _Sensor_isCalibrated *****************
  8724 ;; Defined at:
  8725 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;  sensor          1    wreg     PTR struct .
  8728 ;;		 -> NULL(0), mtouch_sensor(27), 
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  sensor          1    5[BANK0 ] PTR struct .
  8731 ;;		 -> NULL(0), mtouch_sensor(27), 
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  1    wreg      _Bool 
  8734 ;; Registers used:
  8735 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8741 ;;      Params:         0       0       0       0       0       0       0       0
  8742 ;;      Locals:         0       1       0       0       0       0       0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0
  8744 ;;      Totals:         0       1       0       0       0       0       0       0
  8745 ;;Total ram usage:        1 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    7
  8748 ;; This function calls:
  8749 ;;		Nothing
  8750 ;; This function is called by:
  8751 ;;		_Sensor_Acquisition
  8752 ;;		_Sensor_loadADCSettings
  8753 ;;		_Sensor_Acq_ExecutePacket
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           
  8758                           ;psect for function _Sensor_isCalibrated
  8759  12B2                     _Sensor_isCalibrated:	
  8760                           
  8761                           ;incstack = 0
  8762                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8763                           ;Sensor_isCalibrated@sensor stored from wreg
  8764  12B2  0020               	movlb	0	; select bank0
  8765  12B3  00A5               	movwf	Sensor_isCalibrated@sensor
  8766                           
  8767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
  8768  12B4  0825               	movf	Sensor_isCalibrated@sensor,w
  8769  12B5  3E08               	addlw	8
  8770  12B6  0086               	movwf	6
  8771  12B7  3001               	movlw	1	; select bank2/3
  8772  12B8  0087               	movwf	7
  8773  12B9  0C01               	rrf	1,w
  8774  12BA  0C89               	rrf	9,f
  8775  12BB  3901               	andlw	1
  8776  12BC  0008               	return
  8777  12BD                     __end_of_Sensor_isCalibrated:	
  8778                           
  8779                           	psect	text46
  8780  1374                     __ptext46:	
  8781 ;; *************** function _Sensor_isEnabled *****************
  8782 ;; Defined at:
  8783 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  sensor          1    wreg     PTR struct .
  8786 ;;		 -> NULL(0), mtouch_sensor(27), 
  8787 ;; Auto vars:     Size  Location     Type
  8788 ;;  sensor          1    6[BANK0 ] PTR struct .
  8789 ;;		 -> NULL(0), mtouch_sensor(27), 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  1    wreg      _Bool 
  8792 ;; Registers used:
  8793 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8799 ;;      Params:         0       0       0       0       0       0       0       0
  8800 ;;      Locals:         0       1       0       0       0       0       0       0
  8801 ;;      Temps:          0       1       0       0       0       0       0       0
  8802 ;;      Totals:         0       2       0       0       0       0       0       0
  8803 ;;Total ram usage:        2 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    7
  8806 ;; This function calls:
  8807 ;;		Nothing
  8808 ;; This function is called by:
  8809 ;;		_Sensor_Service
  8810 ;;		_Sensor_postAcquisitionProcess
  8811 ;;		_Sensor_Acq_ExecutePacket
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           
  8816                           ;psect for function _Sensor_isEnabled
  8817  1374                     _Sensor_isEnabled:	
  8818                           
  8819                           ;incstack = 0
  8820                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8821                           ;Sensor_isEnabled@sensor stored from wreg
  8822  1374  0020               	movlb	0	; select bank0
  8823  1375  00A6               	movwf	Sensor_isEnabled@sensor
  8824                           
  8825                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
  8826  1376  0826               	movf	Sensor_isEnabled@sensor,w
  8827  1377  1903               	btfsc	3,2
  8828  1378  2B84               	goto	l6012
  8829                           
  8830                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
  8831  1379  0826               	movf	Sensor_isEnabled@sensor,w
  8832  137A  3E08               	addlw	8
  8833  137B  0086               	movwf	6
  8834  137C  3001               	movlw	1	; select bank2/3
  8835  137D  0087               	movwf	7
  8836  137E  0C01               	rrf	1,w
  8837  137F  00A5               	movwf	??_Sensor_isEnabled
  8838  1380  0CA5               	rrf	??_Sensor_isEnabled,f
  8839  1381  0C25               	rrf	??_Sensor_isEnabled,w
  8840  1382  3901               	andlw	1
  8841  1383  0008               	return
  8842  1384                     l6012:	
  8843                           
  8844                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
  8845  1384  3000               	movlw	0
  8846  1385  0008               	return
  8847  1386                     __end_of_Sensor_isEnabled:	
  8848                           
  8849                           	psect	text47
  8850  12F2                     __ptext47:	
  8851 ;; *************** function _Sensor_isActive *****************
  8852 ;; Defined at:
  8853 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;  sensor          1    wreg     PTR struct .
  8856 ;;		 -> NULL(0), mtouch_sensor(27), 
  8857 ;; Auto vars:     Size  Location     Type
  8858 ;;  sensor          1    5[BANK0 ] PTR struct .
  8859 ;;		 -> NULL(0), mtouch_sensor(27), 
  8860 ;; Return value:  Size  Location     Type
  8861 ;;                  1    wreg      _Bool 
  8862 ;; Registers used:
  8863 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8869 ;;      Params:         0       0       0       0       0       0       0       0
  8870 ;;      Locals:         0       1       0       0       0       0       0       0
  8871 ;;      Temps:          0       0       0       0       0       0       0       0
  8872 ;;      Totals:         0       1       0       0       0       0       0       0
  8873 ;;Total ram usage:        1 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    7
  8876 ;; This function calls:
  8877 ;;		Nothing
  8878 ;; This function is called by:
  8879 ;;		_Sensor_Acquisition
  8880 ;;		_Sensor_Acq_ExecutePacket
  8881 ;; This function uses a non-reentrant model
  8882 ;;
  8883                           
  8884                           
  8885                           ;psect for function _Sensor_isActive
  8886  12F2                     _Sensor_isActive:	
  8887                           
  8888                           ;incstack = 0
  8889                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8890                           ;Sensor_isActive@sensor stored from wreg
  8891  12F2  0020               	movlb	0	; select bank0
  8892  12F3  00A5               	movwf	Sensor_isActive@sensor
  8893                           
  8894                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
  8895  12F4  0825               	movf	Sensor_isActive@sensor,w
  8896  12F5  1D03               	btfss	3,2
  8897  12F6  2AF9               	goto	l6022
  8898                           
  8899                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
  8900  12F7  3000               	movlw	0
  8901  12F8  0008               	return
  8902  12F9                     l6022:	
  8903                           
  8904                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
  8905  12F9  0825               	movf	Sensor_isActive@sensor,w
  8906  12FA  3E08               	addlw	8
  8907  12FB  0086               	movwf	6
  8908  12FC  3001               	movlw	1	; select bank2/3
  8909  12FD  0087               	movwf	7
  8910  12FE  0C01               	rrf	1,w
  8911  12FF  3901               	andlw	1
  8912  1300  0008               	return
  8913  1301                     __end_of_Sensor_isActive:	
  8914                           
  8915                           	psect	text48
  8916  0E23                     __ptext48:	
  8917 ;; *************** function _Sensor_autoCalibration *****************
  8918 ;; Defined at:
  8919 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  sensor          1    wreg     PTR struct .
  8922 ;;		 -> NULL(0), mtouch_sensor(27), 
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;  sensor          1   33[BANK0 ] PTR struct .
  8925 ;;		 -> NULL(0), mtouch_sensor(27), 
  8926 ;;  adcIndex        1   32[BANK0 ] unsigned char 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8936 ;;      Params:         0       0       0       0       0       0       0       0
  8937 ;;      Locals:         0       2       0       0       0       0       0       0
  8938 ;;      Temps:          0       4       0       0       0       0       0       0
  8939 ;;      Totals:         0       6       0       0       0       0       0       0
  8940 ;;Total ram usage:        6 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    8
  8943 ;; This function calls:
  8944 ;;		_Sensor_getScanGroupIndex
  8945 ;;		_Sensor_isCalibratingAcqTime
  8946 ;;		_Sensor_setCalibratAcqTime
  8947 ;;		_Sensor_setCalibrated
  8948 ;;		_abs
  8949 ;; This function is called by:
  8950 ;;		_Sensor_Acq_ExecutePacket
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           
  8955                           ;psect for function _Sensor_autoCalibration
  8956  0E23                     _Sensor_autoCalibration:	
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8960                           ;Sensor_autoCalibration@sensor stored from wreg
  8961  0E23  0020               	movlb	0	; select bank0
  8962  0E24  00C1               	movwf	Sensor_autoCalibration@sensor
  8963                           
  8964                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  8965  0E25  0841               	movf	Sensor_autoCalibration@sensor,w
  8966  0E26  3197  273D  318E   	fcall	_Sensor_getScanGroupIndex
  8967  0E29  0020               	movlb	0	; select bank0
  8968  0E2A  00BC               	movwf	??_Sensor_autoCalibration
  8969  0E2B  083C               	movf	??_Sensor_autoCalibration,w
  8970  0E2C  00C0               	movwf	Sensor_autoCalibration@adcIndex
  8971                           
  8972                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  8973  0E2D  0841               	movf	Sensor_autoCalibration@sensor,w
  8974  0E2E  3192  2292  318E   	fcall	_Sensor_isCalibratingAcqTime
  8975  0E31  3A00               	xorlw	0
  8976  0E32  1D03               	skipz
  8977  0E33  2E67               	goto	l6074
  8978                           
  8979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  8980  0E34  0020               	movlb	0	; select bank0
  8981  0E35  3540               	lslf	Sensor_autoCalibration@adcIndex,w
  8982  0E36  3ECD               	addlw	(low (_packet_sample| 0))& (0+255)
  8983  0E37  0086               	movwf	6
  8984  0E38  0187               	clrf	7
  8985  0E39  3F40               	moviw [0]fsr1
  8986  0E3A  00BC               	movwf	??_Sensor_autoCalibration
  8987  0E3B  3F41               	moviw [1]fsr1
  8988  0E3C  00BD               	movwf	??_Sensor_autoCalibration+1
  8989  0E3D  0841               	movf	Sensor_autoCalibration@sensor,w
  8990  0E3E  3E04               	addlw	4
  8991  0E3F  0086               	movwf	6
  8992  0E40  3001               	movlw	1	; select bank2/3
  8993  0E41  0087               	movwf	7
  8994  0E42  0801               	movf	1,w
  8995  0E43  00BE               	movwf	??_Sensor_autoCalibration+2
  8996  0E44  01BF               	clrf	??_Sensor_autoCalibration+3
  8997  0E45  3009               	movlw	9
  8998  0E46                     u6185:	
  8999  0E46  35BE               	lslf	??_Sensor_autoCalibration+2,f
  9000  0E47  0DBF               	rlf	??_Sensor_autoCalibration+3,f
  9001  0E48  0B89               	decfsz	9,f
  9002  0E49  2E46               	goto	u6185
  9003  0E4A  083D               	movf	??_Sensor_autoCalibration+1,w
  9004  0E4B  023F               	subwf	??_Sensor_autoCalibration+3,w
  9005  0E4C  1D03               	skipz
  9006  0E4D  2E50               	goto	u6195
  9007  0E4E  083C               	movf	??_Sensor_autoCalibration,w
  9008  0E4F  023E               	subwf	??_Sensor_autoCalibration+2,w
  9009  0E50                     u6195:	
  9010  0E50  1803               	skipnc
  9011  0E51  2E63               	goto	l6072
  9012                           
  9013                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  9014  0E52  3001               	movlw	1
  9015  0E53  00BC               	movwf	??_Sensor_autoCalibration
  9016  0E54  0841               	movf	Sensor_autoCalibration@sensor,w
  9017  0E55  3E05               	addlw	5
  9018  0E56  0086               	movwf	6
  9019  0E57  3001               	movlw	1	; select bank2/3
  9020  0E58  0087               	movwf	7
  9021  0E59  083C               	movf	??_Sensor_autoCalibration,w
  9022  0E5A  0781               	addwf	1,f
  9023  0E5B  300F               	movlw	15
  9024  0E5C  0201               	subwf	1,w
  9025  0E5D  1C03               	skipc
  9026  0E5E  0008               	return
  9027                           
  9028                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  9029  0E5F  0841               	movf	Sensor_autoCalibration@sensor,w
  9030  0E60  3193  2331         	fcall	_Sensor_setCalibratAcqTime
  9031  0E62  0008               	return
  9032  0E63                     l6072:	
  9033                           
  9034                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
  9035  0E63  0841               	movf	Sensor_autoCalibration@sensor,w
  9036  0E64  3193  2331         	fcall	_Sensor_setCalibratAcqTime
  9037  0E66  0008               	return
  9038  0E67                     l6074:	
  9039                           
  9040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  9041  0E67  0020               	movlb	0	; select bank0
  9042  0E68  0841               	movf	Sensor_autoCalibration@sensor,w
  9043  0E69  3E04               	addlw	4
  9044  0E6A  0086               	movwf	6
  9045  0E6B  3001               	movlw	1	; select bank2/3
  9046  0E6C  0087               	movwf	7
  9047  0E6D  0801               	movf	1,w
  9048  0E6E  00BC               	movwf	??_Sensor_autoCalibration
  9049  0E6F  01BD               	clrf	??_Sensor_autoCalibration+1
  9050  0E70  35BC               	lslf	??_Sensor_autoCalibration,f
  9051  0E71  0DBD               	rlf	??_Sensor_autoCalibration+1,f
  9052  0E72  0841               	movf	Sensor_autoCalibration@sensor,w
  9053  0E73  3E06               	addlw	6
  9054  0E74  0086               	movwf	6
  9055  0E75  3001               	movlw	1	; select bank2/3
  9056  0E76  0087               	movwf	7
  9057  0E77  3540               	lslf	Sensor_autoCalibration@adcIndex,w
  9058  0E78  3ECD               	addlw	(low (_packet_sample| 0))& (0+255)
  9059  0E79  0084               	movwf	4
  9060  0E7A  0185               	clrf	5
  9061  0E7B  3F40               	moviw [0]fsr1
  9062  0E7C  0200               	subwf	0,w
  9063  0E7D  00B8               	movwf	abs@a
  9064  0E7E  3101               	addfsr 0,1
  9065  0E7F  3F41               	moviw [1]fsr1
  9066  0E80  3B00               	subwfb	0,w
  9067  0E81  00B9               	movwf	abs@a+1
  9068  0E82  3194  2475  318E   	fcall	_abs
  9069  0E85  0020               	movlb	0	; select bank0
  9070  0E86  083D               	movf	??_Sensor_autoCalibration+1,w
  9071  0E87  0239               	subwf	?_abs+1,w
  9072  0E88  1D03               	skipz
  9073  0E89  2E8C               	goto	u6215
  9074  0E8A  083C               	movf	??_Sensor_autoCalibration,w
  9075  0E8B  0238               	subwf	?_abs,w
  9076  0E8C                     u6215:	
  9077  0E8C  1803               	skipnc
  9078  0E8D  2E9B               	goto	l6080
  9079                           
  9080                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  9081  0E8E  3020               	movlw	32
  9082  0E8F  00BC               	movwf	??_Sensor_autoCalibration
  9083  0E90  0841               	movf	Sensor_autoCalibration@sensor,w
  9084  0E91  3E02               	addlw	2
  9085  0E92  0086               	movwf	6
  9086  0E93  3001               	movlw	1	; select bank2/3
  9087  0E94  0087               	movwf	7
  9088  0E95  083C               	movf	??_Sensor_autoCalibration,w
  9089  0E96  0081               	movwf	1
  9090                           
  9091                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
  9092  0E97  0841               	movf	Sensor_autoCalibration@sensor,w
  9093  0E98  3192  22E3         	fcall	_Sensor_setCalibrated
  9094                           
  9095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
  9096  0E9A  0008               	return
  9097  0E9B                     l6080:	
  9098                           
  9099                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
  9100  0E9B  3002               	movlw	2
  9101  0E9C  00BC               	movwf	??_Sensor_autoCalibration
  9102  0E9D  0841               	movf	Sensor_autoCalibration@sensor,w
  9103  0E9E  3E03               	addlw	3
  9104  0E9F  0086               	movwf	6
  9105  0EA0  3001               	movlw	1	; select bank2/3
  9106  0EA1  0087               	movwf	7
  9107  0EA2  083C               	movf	??_Sensor_autoCalibration,w
  9108  0EA3  0781               	addwf	1,f
  9109                           
  9110                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  9111  0EA4  0841               	movf	Sensor_autoCalibration@sensor,w
  9112  0EA5  3E03               	addlw	3
  9113  0EA6  0086               	movwf	6
  9114  0EA7  3001               	movlw	1	; select bank2/3
  9115  0EA8  0087               	movwf	7
  9116  0EA9  3020               	movlw	32
  9117  0EAA  0201               	subwf	1,w
  9118  0EAB  1C03               	skipc
  9119  0EAC  0008               	return
  9120                           
  9121                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  9122  0EAD  3020               	movlw	32
  9123  0EAE  00BC               	movwf	??_Sensor_autoCalibration
  9124  0EAF  0841               	movf	Sensor_autoCalibration@sensor,w
  9125  0EB0  3E02               	addlw	2
  9126  0EB1  0086               	movwf	6
  9127  0EB2  3001               	movlw	1	; select bank2/3
  9128  0EB3  0087               	movwf	7
  9129  0EB4  083C               	movf	??_Sensor_autoCalibration,w
  9130  0EB5  0081               	movwf	1
  9131                           
  9132                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
  9133  0EB6  0841               	movf	Sensor_autoCalibration@sensor,w
  9134  0EB7  3192  22E3         	fcall	_Sensor_setCalibrated
  9135  0EB9  0008               	return
  9136  0EBA                     __end_of_Sensor_autoCalibration:	
  9137                           
  9138                           	psect	text49
  9139  12E3                     __ptext49:	
  9140 ;; *************** function _Sensor_setCalibrated *****************
  9141 ;; Defined at:
  9142 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  sensor          1    wreg     PTR struct .
  9145 ;;		 -> NULL(0), mtouch_sensor(27), 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  sensor          1    5[BANK0 ] PTR struct .
  9148 ;;		 -> NULL(0), mtouch_sensor(27), 
  9149 ;; Return value:  Size  Location     Type
  9150 ;;                  1    wreg      void 
  9151 ;; Registers used:
  9152 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9158 ;;      Params:         0       0       0       0       0       0       0       0
  9159 ;;      Locals:         0       1       0       0       0       0       0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0       0
  9161 ;;      Totals:         0       1       0       0       0       0       0       0
  9162 ;;Total ram usage:        1 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    7
  9165 ;; This function calls:
  9166 ;;		Nothing
  9167 ;; This function is called by:
  9168 ;;		_Sensor_autoCalibration
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           
  9173                           ;psect for function _Sensor_setCalibrated
  9174  12E3                     _Sensor_setCalibrated:	
  9175                           
  9176                           ;incstack = 0
  9177                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9178                           ;Sensor_setCalibrated@sensor stored from wreg
  9179  12E3  0020               	movlb	0	; select bank0
  9180  12E4  00A5               	movwf	Sensor_setCalibrated@sensor
  9181                           
  9182                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
  9183  12E5  0825               	movf	Sensor_setCalibrated@sensor,w
  9184  12E6  3E08               	addlw	8
  9185  12E7  0086               	movwf	6
  9186  12E8  3001               	movlw	1	; select bank2/3
  9187  12E9  0087               	movwf	7
  9188  12EA  1501               	bsf	1,2
  9189                           
  9190                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
  9191  12EB  0825               	movf	Sensor_setCalibrated@sensor,w
  9192  12EC  3E08               	addlw	8
  9193  12ED  0086               	movwf	6
  9194  12EE  3001               	movlw	1	; select bank2/3
  9195  12EF  0087               	movwf	7
  9196  12F0  1201               	bcf	1,4
  9197  12F1  0008               	return
  9198  12F2                     __end_of_Sensor_setCalibrated:	
  9199                           
  9200                           	psect	text50
  9201  1331                     __ptext50:	
  9202 ;; *************** function _Sensor_setCalibratAcqTime *****************
  9203 ;; Defined at:
  9204 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  sensor          1    wreg     PTR struct .
  9207 ;;		 -> NULL(0), mtouch_sensor(27), 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  sensor          1    5[BANK0 ] PTR struct .
  9210 ;;		 -> NULL(0), mtouch_sensor(27), 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      void 
  9213 ;; Registers used:
  9214 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9220 ;;      Params:         0       0       0       0       0       0       0       0
  9221 ;;      Locals:         0       1       0       0       0       0       0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0
  9223 ;;      Totals:         0       1       0       0       0       0       0       0
  9224 ;;Total ram usage:        1 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    7
  9227 ;; This function calls:
  9228 ;;		Nothing
  9229 ;; This function is called by:
  9230 ;;		_Sensor_autoCalibration
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           
  9235                           ;psect for function _Sensor_setCalibratAcqTime
  9236  1331                     _Sensor_setCalibratAcqTime:	
  9237                           
  9238                           ;incstack = 0
  9239                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9240                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  9241  1331  0020               	movlb	0	; select bank0
  9242  1332  00A5               	movwf	Sensor_setCalibratAcqTime@sensor
  9243                           
  9244                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
  9245  1333  0825               	movf	Sensor_setCalibratAcqTime@sensor,w
  9246  1334  3E08               	addlw	8
  9247  1335  0086               	movwf	6
  9248  1336  3001               	movlw	1	; select bank2/3
  9249  1337  0087               	movwf	7
  9250  1338  1601               	bsf	1,4
  9251                           
  9252                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  9253  1339  0825               	movf	Sensor_setCalibratAcqTime@sensor,w
  9254  133A  3E03               	addlw	3
  9255  133B  0086               	movwf	6
  9256  133C  3001               	movlw	1	; select bank2/3
  9257  133D  0087               	movwf	7
  9258  133E  0181               	clrf	1
  9259  133F  0A81               	incf	1,f
  9260  1340  0008               	return
  9261  1341                     __end_of_Sensor_setCalibratAcqTime:	
  9262                           
  9263                           	psect	text51
  9264  1292                     __ptext51:	
  9265 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  9266 ;; Defined at:
  9267 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;  sensor          1    wreg     PTR struct .
  9270 ;;		 -> NULL(0), mtouch_sensor(27), 
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;  sensor          1    5[BANK0 ] PTR struct .
  9273 ;;		 -> NULL(0), mtouch_sensor(27), 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  1    wreg      _Bool 
  9276 ;; Registers used:
  9277 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9283 ;;      Params:         0       0       0       0       0       0       0       0
  9284 ;;      Locals:         0       1       0       0       0       0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0
  9286 ;;      Totals:         0       1       0       0       0       0       0       0
  9287 ;;Total ram usage:        1 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    7
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		_Sensor_loadADCSettings
  9294 ;;		_Sensor_autoCalibration
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           
  9299                           ;psect for function _Sensor_isCalibratingAcqTime
  9300  1292                     _Sensor_isCalibratingAcqTime:	
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  9304                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  9305  1292  0020               	movlb	0	; select bank0
  9306  1293  00A5               	movwf	Sensor_isCalibratingAcqTime@sensor
  9307                           
  9308                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
  9309  1294  0825               	movf	Sensor_isCalibratingAcqTime@sensor,w
  9310  1295  3E08               	addlw	8
  9311  1296  0086               	movwf	6
  9312  1297  3001               	movlw	1	; select bank2/3
  9313  1298  0087               	movwf	7
  9314  1299  0E01               	swapf	1,w
  9315  129A  3901               	andlw	1
  9316  129B  0008               	return
  9317  129C                     __end_of_Sensor_isCalibratingAcqTime:	
  9318                           
  9319                           	psect	text52
  9320  173D                     __ptext52:	
  9321 ;; *************** function _Sensor_getScanGroupIndex *****************
  9322 ;; Defined at:
  9323 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;  sensor          1    wreg     PTR struct .
  9326 ;;		 -> NULL(0), mtouch_sensor(27), 
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;  sensor          1    7[BANK0 ] PTR struct .
  9329 ;;		 -> NULL(0), mtouch_sensor(27), 
  9330 ;;  sensorGroup     1    8[BANK0 ] unsigned char 
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      unsigned char 
  9333 ;; Registers used:
  9334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9340 ;;      Params:         0       0       0       0       0       0       0       0
  9341 ;;      Locals:         0       2       0       0       0       0       0       0
  9342 ;;      Temps:          0       2       0       0       0       0       0       0
  9343 ;;      Totals:         0       4       0       0       0       0       0       0
  9344 ;;Total ram usage:        4 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    7
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_Sensor_postAcquisitionProcess
  9351 ;;		_Sensor_autoCalibration
  9352 ;;		_Sensor_RawSample_Update
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _Sensor_getScanGroupIndex
  9358  173D                     _Sensor_getScanGroupIndex:	
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  9362                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  9363  173D  0020               	movlb	0	; select bank0
  9364  173E  00A7               	movwf	Sensor_getScanGroupIndex@sensor
  9365                           
  9366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  9367  173F  01A8               	clrf	Sensor_getScanGroupIndex@sensorGroup
  9368  1740                     l5884:	
  9369                           
  9370                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  9371  1740  0828               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9372  1741  00A5               	movwf	??_Sensor_getScanGroupIndex
  9373  1742  01A6               	clrf	??_Sensor_getScanGroupIndex+1
  9374  1743  35A5               	lslf	??_Sensor_getScanGroupIndex,f
  9375  1744  0DA6               	rlf	??_Sensor_getScanGroupIndex+1,f
  9376  1745  306A               	movlw	low (_sensor_scan_group| (0+32768))
  9377  1746  0725               	addwf	??_Sensor_getScanGroupIndex,w
  9378  1747  0084               	movwf	4
  9379  1748  3098               	movlw	high (_sensor_scan_group| (0+32768))
  9380  1749  3D26               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9381  174A  0085               	movwf	5
  9382  174B  0800               	movf	0,w	;code access
  9383  174C  0627               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9384  174D  1D03               	skipz
  9385  174E  2F51               	goto	l5890
  9386  174F                     l5886:	
  9387                           
  9388                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
  9389  174F  3000               	movlw	0
  9390  1750  0008               	return
  9391  1751                     l5890:	
  9392                           
  9393                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  9394  1751  0828               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  9395  1752  00A5               	movwf	??_Sensor_getScanGroupIndex
  9396  1753  01A6               	clrf	??_Sensor_getScanGroupIndex+1
  9397  1754  35A5               	lslf	??_Sensor_getScanGroupIndex,f
  9398  1755  0DA6               	rlf	??_Sensor_getScanGroupIndex+1,f
  9399  1756  306B               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  9400  1757  0725               	addwf	??_Sensor_getScanGroupIndex,w
  9401  1758  0084               	movwf	4
  9402  1759  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  9403  175A  3D26               	addwfc	??_Sensor_getScanGroupIndex+1,w
  9404  175B  0085               	movwf	5
  9405  175C  0800               	movf	0,w	;code access
  9406  175D  0627               	xorwf	Sensor_getScanGroupIndex@sensor,w
  9407  175E  1D03               	skipz
  9408  175F  2F62               	goto	l5896
  9409                           
  9410                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
  9411  1760  3001               	movlw	1
  9412  1761  0008               	return
  9413  1762                     l5896:	
  9414                           
  9415                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
  9416  1762  3001               	movlw	1
  9417  1763  00A5               	movwf	??_Sensor_getScanGroupIndex
  9418  1764  0825               	movf	??_Sensor_getScanGroupIndex,w
  9419  1765  07A8               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  9420  1766  3002               	movlw	2
  9421  1767  0228               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  9422  1768  1803               	btfsc	3,0
  9423  1769  2F4F               	goto	l5886
  9424  176A  2F40               	goto	l5884
  9425  176B                     __end_of_Sensor_getScanGroupIndex:	
  9426                           
  9427                           	psect	text53
  9428  1321                     __ptext53:	
  9429 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  9430 ;; Defined at:
  9431 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;		None
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;		None
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  1    wreg      void 
  9438 ;; Registers used:
  9439 ;;		wreg, status,2, status,0
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9445 ;;      Params:         0       0       0       0       0       0       0       0
  9446 ;;      Locals:         0       0       0       0       0       0       0       0
  9447 ;;      Temps:          0       0       0       0       0       0       0       0
  9448 ;;      Totals:         0       0       0       0       0       0       0       0
  9449 ;;Total ram usage:        0 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    7
  9452 ;; This function calls:
  9453 ;;		Nothing
  9454 ;; This function is called by:
  9455 ;;		_MTOUCH_Initialize
  9456 ;;		_Sensor_Acq_ExecutePacket
  9457 ;; This function uses a non-reentrant model
  9458 ;;
  9459                           
  9460                           
  9461                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  9462  1321                     _MTOUCH_Sensor_Scan_Initialize:	
  9463                           
  9464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
  9465                           
  9466                           ;incstack = 0
  9467                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  9468  1321  30FC               	movlw	-4
  9469  1322  0020               	movlb	0	; select bank0
  9470  1323  059C               	andwf	28,f	;volatile
  9471                           
  9472                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
  9473  1324  002E               	movlb	14	; select bank14
  9474  1325  0191               	clrf	17	;volatile
  9475                           
  9476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
  9477  1326  002F               	movlb	15	; select bank15
  9478  1327  0191               	clrf	17	;volatile
  9479                           
  9480                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  9481  1328  3090               	movlw	144
  9482  1329  002E               	movlb	14	; select bank14
  9483  132A  0092               	movwf	18	;volatile
  9484                           
  9485                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
  9486  132B  3040               	movlw	64
  9487  132C  0094               	movwf	20	;volatile
  9488                           
  9489                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
  9490  132D  3040               	movlw	64
  9491  132E  002F               	movlb	15	; select bank15
  9492  132F  0094               	movwf	20	;volatile
  9493  1330  0008               	return
  9494  1331                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  9495                           
  9496                           	psect	text54
  9497  1311                     __ptext54:	
  9498 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  9499 ;; Defined at:
  9500 ;;		line 195 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  button          1    3[BANK2 ] enum E3069
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      void 
  9507 ;; Registers used:
  9508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9514 ;;      Params:         0       0       0       0       0       0       0       0
  9515 ;;      Locals:         0       0       0       1       0       0       0       0
  9516 ;;      Temps:          0       0       0       1       0       0       0       0
  9517 ;;      Totals:         0       0       0       2       0       0       0       0
  9518 ;;Total ram usage:        2 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:   19
  9521 ;; This function calls:
  9522 ;;		_Button_Service
  9523 ;; This function is called by:
  9524 ;;		_MTOUCH_Service_Mainloop
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           
  9529                           ;psect for function _MTOUCH_Button_ServiceAll
  9530  1311                     _MTOUCH_Button_ServiceAll:	
  9531                           
  9532                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 200:     for (button = 0; button < 3u; button
      +                          ++)
  9533                           
  9534                           ;incstack = 0
  9535 ;; hardware stack exceeded
  9536                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9537  1311  0022               	movlb	2	; select bank2
  9538  1312  01D9               	clrf	MTOUCH_Button_ServiceAll@button^(0+256)
  9539  1313                     l6752:	
  9540                           
  9541                           ;mcc_generated_files/mtouch/mtouch_button.c: 201:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 202:         Button_Service(button);
  9542  1313  0859               	movf	MTOUCH_Button_ServiceAll@button^(0+256),w
  9543  1314  318A  2282  3193   	fcall	_Button_Service
  9544                           
  9545                           ;mcc_generated_files/mtouch/mtouch_button.c: 203:     }
  9546  1317  3001               	movlw	1
  9547  1318  0022               	movlb	2	; select bank2
  9548  1319  00D8               	movwf	??_MTOUCH_Button_ServiceAll^(0+256)
  9549  131A  0858               	movf	??_MTOUCH_Button_ServiceAll^(0+256),w
  9550  131B  07D9               	addwf	MTOUCH_Button_ServiceAll@button^(0+256),f
  9551  131C  3003               	movlw	3
  9552  131D  0259               	subwf	MTOUCH_Button_ServiceAll@button^(0+256),w
  9553  131E  1803               	btfsc	3,0
  9554  131F  0008               	return
  9555  1320  2B13               	goto	l6752
  9556  1321                     __end_of_MTOUCH_Button_ServiceAll:	
  9557                           
  9558                           	psect	text55
  9559  0A82                     __ptext55:	
  9560 ;; *************** function _Button_Service *****************
  9561 ;; Defined at:
  9562 ;;		line 206 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  name            1    wreg     enum E3069
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;  name            1    0[BANK2 ] enum E3069
  9567 ;;  button          1    1[BANK2 ] PTR struct .
  9568 ;;		 -> mtouch_button(48), 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      void 
  9571 ;; Registers used:
  9572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9578 ;;      Params:         0       0       0       0       0       0       0       0
  9579 ;;      Locals:         0       0       0       2       0       0       0       0
  9580 ;;      Temps:          0       0       2       0       0       0       0       0
  9581 ;;      Totals:         0       0       2       2       0       0       0       0
  9582 ;;Total ram usage:        4 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:   18
  9585 ;; This function calls:
  9586 ;;		_Button_Deviation_Update
  9587 ;;		_Button_Reading_Update
  9588 ;;		_Button_State_Initializing
  9589 ;;		_Button_State_NotPressed
  9590 ;;		_Button_State_PressDebounce
  9591 ;;		_Button_State_Pressed
  9592 ;;		_Button_State_ReleaseDebounce
  9593 ;;		_MTOUCH_Button_Initialize
  9594 ;;		_MTOUCH_Sensor_isCalibrated
  9595 ;;		_MTOUCH_Sensor_wasSampled
  9596 ;; This function is called by:
  9597 ;;		_MTOUCH_Button_ServiceAll
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           
  9602                           ;psect for function _Button_Service
  9603  0A82                     _Button_Service:	
  9604                           
  9605                           ;incstack = 0
  9606 ;; hardware stack exceeded
  9607                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9608                           ;Button_Service@name stored from wreg
  9609  0A82  0022               	movlb	2	; select bank2
  9610  0A83  00D6               	movwf	Button_Service@name^(0+256)
  9611                           
  9612                           ;mcc_generated_files/mtouch/mtouch_button.c: 206: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 207: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 208:     mtouch_button_t* button = &mtouch_button[name];
  9613  0A84  0856               	movf	Button_Service@name^(0+256),w
  9614  0A85  0021               	movlb	1	; select bank1
  9615  0A86  00C3               	movwf	??_Button_Service^(0+128)
  9616  0A87  3003               	movlw	3
  9617  0A88                     u7235:	
  9618  0A88  35C3               	lslf	??_Button_Service^(0+128),f
  9619  0A89  3EFF               	addlw	-1
  9620  0A8A  1D03               	skipz
  9621  0A8B  2A88               	goto	u7235
  9622  0A8C  3543               	lslf	??_Button_Service^(0+128),w
  9623  0A8D  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  9624  0A8E  00C4               	movwf	(??_Button_Service+1)^(0+128)
  9625  0A8F  0844               	movf	(??_Button_Service+1)^(0+128),w
  9626  0A90  0022               	movlb	2	; select bank2
  9627  0A91  00D7               	movwf	Button_Service@button^(0+256)
  9628                           
  9629                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  9630  0A92  0A57               	incf	Button_Service@button^(0+256),w
  9631  0A93  0086               	movwf	6
  9632  0A94  3001               	movlw	1	; select bank2/3
  9633  0A95  0087               	movwf	7
  9634  0A96  0801               	movf	1,w
  9635  0A97  3193  2301  318A   	fcall	_MTOUCH_Sensor_wasSampled
  9636  0A9A  3A00               	xorlw	0
  9637  0A9B  1903               	skipnz
  9638  0A9C  0008               	return
  9639  0A9D  0022               	movlb	2	; select bank2
  9640  0A9E  0A57               	incf	Button_Service@button^(0+256),w
  9641  0A9F  0086               	movwf	6
  9642  0AA0  3001               	movlw	1	; select bank2/3
  9643  0AA1  0087               	movwf	7
  9644  0AA2  0801               	movf	1,w
  9645  0AA3  3193  23E7  318A   	fcall	_MTOUCH_Sensor_isCalibrated
  9646  0AA6  3A00               	xorlw	0
  9647  0AA7  1903               	skipnz
  9648  0AA8  0008               	return
  9649                           
  9650                           ;mcc_generated_files/mtouch/mtouch_button.c: 211:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 212:         Button_Reading_Update(button);
  9651  0AA9  0022               	movlb	2	; select bank2
  9652  0AAA  0857               	movf	Button_Service@button^(0+256),w
  9653  0AAB  3192  22D5  318A   	fcall	_Button_Reading_Update
  9654                           
  9655                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_Deviation_Update(button
      +                          );
  9656  0AAE  0022               	movlb	2	; select bank2
  9657  0AAF  0857               	movf	Button_Service@button^(0+256),w
  9658  0AB0  318C  2476  318A   	fcall	_Button_Deviation_Update
  9659                           
  9660                           ;mcc_generated_files/mtouch/mtouch_button.c: 215:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  9661  0AB3  0022               	movlb	2	; select bank2
  9662  0AB4  0857               	movf	Button_Service@button^(0+256),w
  9663  0AB5  3E02               	addlw	2
  9664  0AB6  0086               	movwf	6
  9665  0AB7  3001               	movlw	1	; select bank2/3
  9666  0AB8  0087               	movwf	7
  9667  0AB9  3005               	movlw	5
  9668  0ABA  0201               	subwf	1,w
  9669  0ABB  1C03               	skipc
  9670  0ABC  2AC5               	goto	l6716
  9671                           
  9672                           ;mcc_generated_files/mtouch/mtouch_button.c: 216:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 217:             MTOUCH_Button_Initialize(button->name);
  9673  0ABD  0857               	movf	Button_Service@button^(0+256),w
  9674  0ABE  0086               	movwf	6
  9675  0ABF  3001               	movlw	1	; select bank2/3
  9676  0AC0  0087               	movwf	7
  9677  0AC1  0801               	movf	1,w
  9678  0AC2  3197  27C9  318A   	fcall	_MTOUCH_Button_Initialize
  9679  0AC5                     l6716:	
  9680                           
  9681                           ;mcc_generated_files/mtouch/mtouch_button.c: 219:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  9682  0AC5  0022               	movlb	2	; select bank2
  9683  0AC6  0857               	movf	Button_Service@button^(0+256),w
  9684  0AC7  0021               	movlb	1	; select bank1
  9685  0AC8  00C3               	movwf	??_Button_Service^(0+128)
  9686  0AC9  0843               	movf	??_Button_Service^(0+128),w
  9687  0ACA  00BE               	movwf	Button_State_ReleaseDebounce@button^(0+128)
  9688  0ACB  0022               	movlb	2	; select bank2
  9689  0ACC  0857               	movf	Button_Service@button^(0+256),w
  9690  0ACD  3E02               	addlw	2
  9691  0ACE  0086               	movwf	6
  9692  0ACF  3001               	movlw	1	; select bank2/3
  9693  0AD0  0087               	movwf	7
  9694  0AD1  3501               	lslf	1,w
  9695  0AD2  3E38               	addlw	(low (_Button_StateMachine| (0+256)))& (0+255)
  9696  0AD3  0086               	movwf	6
  9697  0AD4  3001               	movlw	1	; select bank2/3
  9698  0AD5  0087               	movwf	7
  9699  0AD6  3F41               	moviw [1]fsr1
  9700  0AD7  008A               	movwf	10
  9701  0AD8  3F40               	moviw [0]fsr1
  9702  0AD9  000A               	callw
  9703  0ADA  318A               	pagesel	$
  9704  0ADB  0008               	return
  9705  0ADC                     __end_of_Button_Service:	
  9706                           
  9707                           	psect	text56
  9708  1301                     __ptext56:	
  9709 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  9710 ;; Defined at:
  9711 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;  sensor          1    wreg     enum E2878
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  sensor          1   10[BANK0 ] enum E2878
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      _Bool 
  9718 ;; Registers used:
  9719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9725 ;;      Params:         0       0       0       0       0       0       0       0
  9726 ;;      Locals:         0       1       0       0       0       0       0       0
  9727 ;;      Temps:          0       1       0       0       0       0       0       0
  9728 ;;      Totals:         0       2       0       0       0       0       0       0
  9729 ;;Total ram usage:        2 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    8
  9732 ;; This function calls:
  9733 ;;		___bmul
  9734 ;; This function is called by:
  9735 ;;		_Button_Service
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           
  9740                           ;psect for function _MTOUCH_Sensor_wasSampled
  9741  1301                     _MTOUCH_Sensor_wasSampled:	
  9742                           
  9743                           ;incstack = 0
  9744                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9745                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9746  1301  0020               	movlb	0	; select bank0
  9747  1302  00AA               	movwf	MTOUCH_Sensor_wasSampled@sensor
  9748                           
  9749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
  9750  1303  3009               	movlw	9
  9751  1304  00A9               	movwf	??_MTOUCH_Sensor_wasSampled
  9752  1305  0829               	movf	??_MTOUCH_Sensor_wasSampled,w
  9753  1306  00A5               	movwf	___bmul@multiplicand
  9754  1307  082A               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  9755  1308  3193  2362         	fcall	___bmul
  9756  130A  3ED8               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9757  130B  0086               	movwf	6
  9758  130C  3001               	movlw	1	; select bank3/4
  9759  130D  0087               	movwf	7
  9760  130E  0801               	movf	1,w
  9761  130F  3901               	andlw	1
  9762  1310  0008               	return
  9763  1311                     __end_of_MTOUCH_Sensor_wasSampled:	
  9764                           
  9765                           	psect	text57
  9766  13E7                     __ptext57:	
  9767 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9768 ;; Defined at:
  9769 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  sensor          1    wreg     enum E2878
  9772 ;; Auto vars:     Size  Location     Type
  9773 ;;  sensor          1   10[BANK0 ] enum E2878
  9774 ;; Return value:  Size  Location     Type
  9775 ;;                  1    wreg      _Bool 
  9776 ;; Registers used:
  9777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9778 ;; Tracked objects:
  9779 ;;		On entry : 0/0
  9780 ;;		On exit  : 0/0
  9781 ;;		Unchanged: 0/0
  9782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9783 ;;      Params:         0       0       0       0       0       0       0       0
  9784 ;;      Locals:         0       1       0       0       0       0       0       0
  9785 ;;      Temps:          0       1       0       0       0       0       0       0
  9786 ;;      Totals:         0       2       0       0       0       0       0       0
  9787 ;;Total ram usage:        2 bytes
  9788 ;; Hardware stack levels used:    1
  9789 ;; Hardware stack levels required when called:    8
  9790 ;; This function calls:
  9791 ;;		___bmul
  9792 ;; This function is called by:
  9793 ;;		_Button_Service
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           
  9798                           ;psect for function _MTOUCH_Sensor_isCalibrated
  9799  13E7                     _MTOUCH_Sensor_isCalibrated:	
  9800                           
  9801                           ;incstack = 0
  9802                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9803                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9804  13E7  0020               	movlb	0	; select bank0
  9805  13E8  00AA               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  9806                           
  9807                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
  9808  13E9  3003               	movlw	3
  9809  13EA  022A               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  9810  13EB  1803               	skipnc
  9811  13EC  2BFC               	goto	l6544
  9812                           
  9813                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  9814  13ED  3009               	movlw	9
  9815  13EE  00A9               	movwf	??_MTOUCH_Sensor_isCalibrated
  9816  13EF  0829               	movf	??_MTOUCH_Sensor_isCalibrated,w
  9817  13F0  00A5               	movwf	___bmul@multiplicand
  9818  13F1  082A               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9819  13F2  3193  2362         	fcall	___bmul
  9820  13F4  3ED8               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9821  13F5  0086               	movwf	6
  9822  13F6  3001               	movlw	1	; select bank3/4
  9823  13F7  0087               	movwf	7
  9824  13F8  0C01               	rrf	1,w
  9825  13F9  0C89               	rrf	9,f
  9826  13FA  3901               	andlw	1
  9827  13FB  0008               	return
  9828  13FC                     l6544:	
  9829                           
  9830                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
  9831  13FC  3000               	movlw	0
  9832  13FD  0008               	return
  9833  13FE                     __end_of_MTOUCH_Sensor_isCalibrated:	
  9834                           
  9835                           	psect	text58
  9836  09DD                     __ptext58:	
  9837 ;; *************** function _Button_State_Pressed *****************
  9838 ;; Defined at:
  9839 ;;		line 278 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;  button          1   30[BANK1 ] PTR struct .
  9842 ;;		 -> mtouch_button(48), 
  9843 ;; Auto vars:     Size  Location     Type
  9844 ;;		None
  9845 ;; Return value:  Size  Location     Type
  9846 ;;                  1    wreg      void 
  9847 ;; Registers used:
  9848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9849 ;; Tracked objects:
  9850 ;;		On entry : 0/0
  9851 ;;		On exit  : 0/0
  9852 ;;		Unchanged: 0/0
  9853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9854 ;;      Params:         0       0       1       0       0       0       0       0
  9855 ;;      Locals:         0       0       0       0       0       0       0       0
  9856 ;;      Temps:          0       0       2       0       0       0       0       0
  9857 ;;      Totals:         0       0       3       0       0       0       0       0
  9858 ;;Total ram usage:        3 bytes
  9859 ;; Hardware stack levels used:    1
  9860 ;; Hardware stack levels required when called:   17
  9861 ;; This function calls:
  9862 ;;		_Button_DefaultCallback
  9863 ;;		_MTOUCH_Button_Initialize
  9864 ;;		_myButtonReleasedCallback
  9865 ;; This function is called by:
  9866 ;;		_Button_Service
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _Button_State_Pressed
  9872  09DD                     _Button_State_Pressed:	
  9873                           
  9874                           ;mcc_generated_files/mtouch/mtouch_button.c: 278: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 279: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 281:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)1000u))
  9875                           
  9876                           ;incstack = 0
  9877 ;; hardware stack exceeded
  9878                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9879  09DD  0021               	movlb	1	; select bank1
  9880  09DE  083E               	movf	Button_State_Pressed@button^(0+128),w
  9881  09DF  3E0A               	addlw	10
  9882  09E0  0086               	movwf	6
  9883  09E1  3001               	movlw	1	; select bank2/3
  9884  09E2  0087               	movwf	7
  9885  09E3  3F40               	moviw [0]fsr1
  9886  09E4  00BF               	movwf	??_Button_State_Pressed^(0+128)
  9887  09E5  3F41               	moviw [1]fsr1
  9888  09E6  00C0               	movwf	(??_Button_State_Pressed^(0+128)+1)
  9889  09E7  3003               	movlw	3
  9890  09E8  0240               	subwf	(??_Button_State_Pressed+1)^(0+128),w
  9891  09E9  30E8               	movlw	232
  9892  09EA  1903               	skipnz
  9893  09EB  023F               	subwf	??_Button_State_Pressed^(0+128),w
  9894  09EC  1C03               	skipc
  9895  09ED  2A05               	goto	l6610
  9896                           
  9897                           ;mcc_generated_files/mtouch/mtouch_button.c: 282:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 283:         MTOUCH_Button_Initialize(button->name);
  9898  09EE  083E               	movf	Button_State_Pressed@button^(0+128),w
  9899  09EF  0086               	movwf	6
  9900  09F0  3001               	movlw	1	; select bank2/3
  9901  09F1  0087               	movwf	7
  9902  09F2  0801               	movf	1,w
  9903  09F3  3197  27C9  3189   	fcall	_MTOUCH_Button_Initialize
  9904                           
  9905                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:         callback_notPressed(button->na
      +                          me);
  9906  09F6  0021               	movlb	1	; select bank1
  9907  09F7  083E               	movf	Button_State_Pressed@button^(0+128),w
  9908  09F8  0086               	movwf	6
  9909  09F9  3001               	movlw	1	; select bank2/3
  9910  09FA  0087               	movwf	7
  9911  09FB  0801               	movf	1,w
  9912  09FC  00BF               	movwf	??_Button_State_Pressed^(0+128)
  9913  09FD  083F               	movf	??_Button_State_Pressed^(0+128),w
  9914  09FE  00BB               	movwf	myButtonReleasedCallback@button^(0+128)
  9915  09FF  0866               	movf	(_callback_notPressed+1)^(0+128),w
  9916  0A00  008A               	movwf	10
  9917  0A01  0865               	movf	_callback_notPressed^(0+128),w
  9918  0A02  000A               	callw
  9919  0A03  3189               	pagesel	$
  9920                           
  9921                           ;mcc_generated_files/mtouch/mtouch_button.c: 285:     }
  9922  0A04  0008               	return
  9923  0A05                     l6610:	
  9924  0A05  083E               	movf	Button_State_Pressed@button^(0+128),w
  9925  0A06  3E09               	addlw	9
  9926  0A07  0086               	movwf	6
  9927  0A08  3001               	movlw	1	; select bank2/3
  9928  0A09  0087               	movwf	7
  9929  0A0A  0801               	movf	1,w
  9930  0A0B  3A80               	xorlw	128
  9931  0A0C  00BF               	movwf	??_Button_State_Pressed^(0+128)
  9932  0A0D  083E               	movf	Button_State_Pressed@button^(0+128),w
  9933  0A0E  3E0E               	addlw	14
  9934  0A0F  0086               	movwf	6
  9935  0A10  3001               	movlw	1	; select bank2/3
  9936  0A11  0087               	movwf	7
  9937  0A12  083E               	movf	Button_State_Pressed@button^(0+128),w
  9938  0A13  3E0E               	addlw	14
  9939  0A14  0084               	movwf	4
  9940  0A15  3001               	movlw	1	; select bank2/3
  9941  0A16  0085               	movwf	5
  9942  0A17  3600               	lsrf	0,w
  9943  0A18  0201               	subwf	1,w
  9944  0A19  3A80               	xorlw	128
  9945  0A1A  02BF               	subwf	??_Button_State_Pressed^(0+128),f
  9946  0A1B  1803               	skipnc
  9947  0A1C  0008               	return
  9948                           
  9949                           ;mcc_generated_files/mtouch/mtouch_button.c: 289:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 290:         button->state = MTOUCH_BUTTON_STATE_releaseDebounce;
  9950  0A1D  3004               	movlw	4
  9951  0A1E  00BF               	movwf	??_Button_State_Pressed^(0+128)
  9952  0A1F  083E               	movf	Button_State_Pressed@button^(0+128),w
  9953  0A20  3E02               	addlw	2
  9954  0A21  0086               	movwf	6
  9955  0A22  3001               	movlw	1	; select bank2/3
  9956  0A23  0087               	movwf	7
  9957  0A24  083F               	movf	??_Button_State_Pressed^(0+128),w
  9958  0A25  0081               	movwf	1
  9959                           
  9960                           ;mcc_generated_files/mtouch/mtouch_button.c: 291:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9961  0A26  083E               	movf	Button_State_Pressed@button^(0+128),w
  9962  0A27  3E0A               	addlw	10
  9963  0A28  0086               	movwf	6
  9964  0A29  3001               	movlw	1	; select bank2/3
  9965  0A2A  0087               	movwf	7
  9966  0A2B  3000               	movlw	0
  9967  0A2C  3FC0               	movwi [0]fsr1
  9968  0A2D  3FC1               	movwi [1]fsr1
  9969  0A2E  0008               	return
  9970  0A2F                     __end_of_Button_State_Pressed:	
  9971                           
  9972                           	psect	text59
  9973  0B3E                     __ptext59:	
  9974 ;; *************** function _Button_State_PressDebounce *****************
  9975 ;; Defined at:
  9976 ;;		line 295 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;  button          1   30[BANK1 ] PTR struct .
  9979 ;;		 -> mtouch_button(48), 
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  1    wreg      void 
  9984 ;; Registers used:
  9985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9991 ;;      Params:         0       0       1       0       0       0       0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0       0
  9993 ;;      Temps:          0       0       2       0       0       0       0       0
  9994 ;;      Totals:         0       0       3       0       0       0       0       0
  9995 ;;Total ram usage:        3 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:   17
  9998 ;; This function calls:
  9999 ;;		_Button_DefaultCallback
 10000 ;;		_myButtonPressedCallback
 10001 ;; This function is called by:
 10002 ;;		_Button_Service
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006                           
 10007                           ;psect for function _Button_State_PressDebounce
 10008  0B3E                     _Button_State_PressDebounce:	
 10009                           
 10010                           ;mcc_generated_files/mtouch/mtouch_button.c: 295: static void Button_State_PressDebounce
      +                           (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 296: {;mcc_genera
      +                          ted_files/mtouch/mtouch_button.c: 298:     if((button->deviation) > (button->threshold))
 10011                           
 10012                           ;incstack = 0
 10013 ;; hardware stack exceeded
 10014                           ; Regs used in _Button_State_PressDebounce: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10015  0B3E  0021               	movlb	1	; select bank1
 10016  0B3F  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10017  0B40  3E09               	addlw	9
 10018  0B41  0086               	movwf	6
 10019  0B42  3001               	movlw	1	; select bank2/3
 10020  0B43  0087               	movwf	7
 10021  0B44  0801               	movf	1,w
 10022  0B45  00BF               	movwf	??_Button_State_PressDebounce^(0+128)
 10023  0B46  01C0               	clrf	(??_Button_State_PressDebounce^(0+128)+1)
 10024  0B47  1BBF               	btfsc	??_Button_State_PressDebounce^(0+128),7
 10025  0B48  03C0               	decf	(??_Button_State_PressDebounce^(0+128)+1),f
 10026  0B49  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10027  0B4A  3E0E               	addlw	14
 10028  0B4B  0086               	movwf	6
 10029  0B4C  3001               	movlw	1	; select bank2/3
 10030  0B4D  0087               	movwf	7
 10031  0B4E  0840               	movf	(??_Button_State_PressDebounce+1)^(0+128),w
 10032  0B4F  3A80               	xorlw	128
 10033  0B50  3C80               	sublw	128
 10034  0B51  1D03               	skipz
 10035  0B52  2B55               	goto	u7135
 10036  0B53  083F               	movf	??_Button_State_PressDebounce^(0+128),w
 10037  0B54  0201               	subwf	1,w
 10038  0B55                     u7135:	
 10039  0B55  1803               	skipnc
 10040  0B56  2B91               	goto	l6622
 10041                           
 10042                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 300:         (button->counter)++;
 10043  0B57  0021               	movlb	1	; select bank1
 10044  0B58  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10045  0B59  3E0A               	addlw	10
 10046  0B5A  0086               	movwf	6
 10047  0B5B  3001               	movlw	1	; select bank2/3
 10048  0B5C  0087               	movwf	7
 10049  0B5D  3001               	movlw	1
 10050  0B5E  0781               	addwf	1,f
 10051  0B5F  3141               	addfsr 1,1
 10052  0B60  1803               	skipnc
 10053  0B61  0A81               	incf	1,f
 10054                           
 10055                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:         if ((button->counter) >= (10u)
      +                          )
 10056  0B62  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10057  0B63  3E0A               	addlw	10
 10058  0B64  0086               	movwf	6
 10059  0B65  3001               	movlw	1	; select bank2/3
 10060  0B66  0087               	movwf	7
 10061  0B67  3F40               	moviw [0]fsr1
 10062  0B68  00BF               	movwf	??_Button_State_PressDebounce^(0+128)
 10063  0B69  3F41               	moviw [1]fsr1
 10064  0B6A  00C0               	movwf	(??_Button_State_PressDebounce^(0+128)+1)
 10065  0B6B  3000               	movlw	0
 10066  0B6C  0240               	subwf	(??_Button_State_PressDebounce+1)^(0+128),w
 10067  0B6D  300A               	movlw	10
 10068  0B6E  1903               	skipnz
 10069  0B6F  023F               	subwf	??_Button_State_PressDebounce^(0+128),w
 10070  0B70  1C03               	skipc
 10071  0B71  0008               	return
 10072                           
 10073                           ;mcc_generated_files/mtouch/mtouch_button.c: 302:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 303:             button->state = MTOUCH_BUTTON_STATE_pressed;
 10074  0B72  3003               	movlw	3
 10075  0B73  00BF               	movwf	??_Button_State_PressDebounce^(0+128)
 10076  0B74  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10077  0B75  3E02               	addlw	2
 10078  0B76  0086               	movwf	6
 10079  0B77  3001               	movlw	1	; select bank2/3
 10080  0B78  0087               	movwf	7
 10081  0B79  083F               	movf	??_Button_State_PressDebounce^(0+128),w
 10082  0B7A  0081               	movwf	1
 10083                           
 10084                           ;mcc_generated_files/mtouch/mtouch_button.c: 304:             button->counter = (mtouch_
      +                          button_statecounter_t)0;
 10085  0B7B  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10086  0B7C  3E0A               	addlw	10
 10087  0B7D  0086               	movwf	6
 10088  0B7E  3001               	movlw	1	; select bank2/3
 10089  0B7F  0087               	movwf	7
 10090  0B80  3000               	movlw	0
 10091  0B81  3FC0               	movwi [0]fsr1
 10092  0B82  3FC1               	movwi [1]fsr1
 10093                           
 10094                           ;mcc_generated_files/mtouch/mtouch_button.c: 305:             callback_pressed(button->n
      +                          ame);
 10095  0B83  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10096  0B84  0086               	movwf	6
 10097  0B85  3001               	movlw	1	; select bank2/3
 10098  0B86  0087               	movwf	7
 10099  0B87  0801               	movf	1,w
 10100  0B88  00BF               	movwf	??_Button_State_PressDebounce^(0+128)
 10101  0B89  083F               	movf	??_Button_State_PressDebounce^(0+128),w
 10102  0B8A  00BB               	movwf	myButtonPressedCallback@button^(0+128)
 10103  0B8B  0868               	movf	(_callback_pressed+1)^(0+128),w
 10104  0B8C  008A               	movwf	10
 10105  0B8D  0867               	movf	_callback_pressed^(0+128),w
 10106  0B8E  000A               	callw
 10107  0B8F  318B               	pagesel	$
 10108  0B90  0008               	return
 10109  0B91                     l6622:	
 10110                           
 10111                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 10112  0B91  0021               	movlb	1	; select bank1
 10113  0B92  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10114  0B93  3E02               	addlw	2
 10115  0B94  0086               	movwf	6
 10116  0B95  3001               	movlw	1	; select bank2/3
 10117  0B96  0087               	movwf	7
 10118  0B97  0181               	clrf	1
 10119  0B98  0A81               	incf	1,f
 10120                           
 10121                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10122  0B99  083E               	movf	Button_State_PressDebounce@button^(0+128),w
 10123  0B9A  3E0A               	addlw	10
 10124  0B9B  0086               	movwf	6
 10125  0B9C  3001               	movlw	1	; select bank2/3
 10126  0B9D  0087               	movwf	7
 10127  0B9E  3000               	movlw	0
 10128  0B9F  3FC0               	movwi [0]fsr1
 10129  0BA0  3FC1               	movwi [1]fsr1
 10130  0BA1  0008               	return
 10131  0BA2                     __end_of_Button_State_PressDebounce:	
 10132                           
 10133                           	psect	text60
 10134  0D8D                     __ptext60:	
 10135 ;; *************** function _Button_State_NotPressed *****************
 10136 ;; Defined at:
 10137 ;;		line 243 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;  button          1   30[BANK1 ] PTR struct .
 10140 ;;		 -> mtouch_button(48), 
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;		None
 10143 ;; Return value:  Size  Location     Type
 10144 ;;                  1    wreg      void 
 10145 ;; Registers used:
 10146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10152 ;;      Params:         0       0       1       0       0       0       0       0
 10153 ;;      Locals:         0       0       0       0       0       0       0       0
 10154 ;;      Temps:          0       0       2       0       0       0       0       0
 10155 ;;      Totals:         0       0       3       0       0       0       0       0
 10156 ;;Total ram usage:        3 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; Hardware stack levels required when called:   10
 10159 ;; This function calls:
 10160 ;;		_Button_Baseline_Update
 10161 ;;		_MTOUCH_Button_Initialize
 10162 ;; This function is called by:
 10163 ;;		_Button_Service
 10164 ;; This function uses a non-reentrant model
 10165 ;;
 10166                           
 10167                           
 10168                           ;psect for function _Button_State_NotPressed
 10169  0D8D                     _Button_State_NotPressed:	
 10170                           
 10171                           ;mcc_generated_files/mtouch/mtouch_button.c: 243: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 244: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 246:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 10172                           
 10173                           ;incstack = 0
 10174                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10175  0D8D  0021               	movlb	1	; select bank1
 10176  0D8E  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10177  0D8F  3E09               	addlw	9
 10178  0D90  0086               	movwf	6
 10179  0D91  3001               	movlw	1	; select bank2/3
 10180  0D92  0087               	movwf	7
 10181  0D93  0801               	movf	1,w
 10182  0D94  3A80               	xorlw	128
 10183  0D95  00BF               	movwf	??_Button_State_NotPressed^(0+128)
 10184  0D96  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10185  0D97  3E0E               	addlw	14
 10186  0D98  0086               	movwf	6
 10187  0D99  3001               	movlw	1	; select bank2/3
 10188  0D9A  0087               	movwf	7
 10189  0D9B  0301               	decf	1,w
 10190  0D9C  3AFF               	xorlw	255
 10191  0D9D  3A80               	xorlw	128
 10192  0D9E  02BF               	subwf	??_Button_State_NotPressed^(0+128),f
 10193  0D9F  1803               	skipnc
 10194  0DA0  2DCC               	goto	l6594
 10195                           
 10196                           ;mcc_generated_files/mtouch/mtouch_button.c: 247:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 248:         (button->counter)++;
 10197  0DA1  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10198  0DA2  3E0A               	addlw	10
 10199  0DA3  0086               	movwf	6
 10200  0DA4  3001               	movlw	1	; select bank2/3
 10201  0DA5  0087               	movwf	7
 10202  0DA6  3001               	movlw	1
 10203  0DA7  0781               	addwf	1,f
 10204  0DA8  3141               	addfsr 1,1
 10205  0DA9  1803               	skipnc
 10206  0DAA  0A81               	incf	1,f
 10207                           
 10208                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 10209  0DAB  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10210  0DAC  3E0A               	addlw	10
 10211  0DAD  0086               	movwf	6
 10212  0DAE  3001               	movlw	1	; select bank2/3
 10213  0DAF  0087               	movwf	7
 10214  0DB0  3F40               	moviw [0]fsr1
 10215  0DB1  00BF               	movwf	??_Button_State_NotPressed^(0+128)
 10216  0DB2  3F41               	moviw [1]fsr1
 10217  0DB3  00C0               	movwf	(??_Button_State_NotPressed^(0+128)+1)
 10218  0DB4  3000               	movlw	0
 10219  0DB5  0240               	subwf	(??_Button_State_NotPressed+1)^(0+128),w
 10220  0DB6  3041               	movlw	65
 10221  0DB7  1903               	skipnz
 10222  0DB8  023F               	subwf	??_Button_State_NotPressed^(0+128),w
 10223  0DB9  1C03               	skipc
 10224  0DBA  2E00               	goto	l526
 10225                           
 10226                           ;mcc_generated_files/mtouch/mtouch_button.c: 250:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 251:             button->counter = (mtouch_button_statecounter_t)0;
 10227  0DBB  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10228  0DBC  3E0A               	addlw	10
 10229  0DBD  0086               	movwf	6
 10230  0DBE  3001               	movlw	1	; select bank2/3
 10231  0DBF  0087               	movwf	7
 10232  0DC0  3000               	movlw	0
 10233  0DC1  3FC0               	movwi [0]fsr1
 10234  0DC2  3FC1               	movwi [1]fsr1
 10235                           
 10236                           ;mcc_generated_files/mtouch/mtouch_button.c: 252:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 10237  0DC3  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10238  0DC4  0086               	movwf	6
 10239  0DC5  3001               	movlw	1	; select bank2/3
 10240  0DC6  0087               	movwf	7
 10241  0DC7  0801               	movf	1,w
 10242  0DC8  3197  27C9  318D   	fcall	_MTOUCH_Button_Initialize
 10243  0DCB  2E00               	goto	l526
 10244  0DCC                     l6594:	
 10245  0DCC  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10246  0DCD  3E09               	addlw	9
 10247  0DCE  0086               	movwf	6
 10248  0DCF  3001               	movlw	1	; select bank2/3
 10249  0DD0  0087               	movwf	7
 10250  0DD1  0801               	movf	1,w
 10251  0DD2  00BF               	movwf	??_Button_State_NotPressed^(0+128)
 10252  0DD3  01C0               	clrf	(??_Button_State_NotPressed^(0+128)+1)
 10253  0DD4  1BBF               	btfsc	??_Button_State_NotPressed^(0+128),7
 10254  0DD5  03C0               	decf	(??_Button_State_NotPressed^(0+128)+1),f
 10255  0DD6  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10256  0DD7  3E0E               	addlw	14
 10257  0DD8  0086               	movwf	6
 10258  0DD9  3001               	movlw	1	; select bank2/3
 10259  0DDA  0087               	movwf	7
 10260  0DDB  0840               	movf	(??_Button_State_NotPressed+1)^(0+128),w
 10261  0DDC  3A80               	xorlw	128
 10262  0DDD  3C80               	sublw	128
 10263  0DDE  1D03               	skipz
 10264  0DDF  2DE2               	goto	u7095
 10265  0DE0  083F               	movf	??_Button_State_NotPressed^(0+128),w
 10266  0DE1  0201               	subwf	1,w
 10267  0DE2                     u7095:	
 10268  0DE2  1803               	skipnc
 10269  0DE3  2DF7               	goto	l6598
 10270                           
 10271                           ;mcc_generated_files/mtouch/mtouch_button.c: 257:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 259:         button->state = MTOUCH_BUTTON_STATE_pressDebounce;
 10272  0DE4  3002               	movlw	2
 10273  0DE5  0021               	movlb	1	; select bank1
 10274  0DE6  00BF               	movwf	??_Button_State_NotPressed^(0+128)
 10275  0DE7  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10276  0DE8  3E02               	addlw	2
 10277  0DE9  0086               	movwf	6
 10278  0DEA  3001               	movlw	1	; select bank2/3
 10279  0DEB  0087               	movwf	7
 10280  0DEC  083F               	movf	??_Button_State_NotPressed^(0+128),w
 10281  0DED  0081               	movwf	1
 10282                           
 10283                           ;mcc_generated_files/mtouch/mtouch_button.c: 260:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10284  0DEE  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10285  0DEF  3E0A               	addlw	10
 10286  0DF0  0086               	movwf	6
 10287  0DF1  3001               	movlw	1	; select bank2/3
 10288  0DF2  0087               	movwf	7
 10289  0DF3  3000               	movlw	0
 10290  0DF4  3FC0               	movwi [0]fsr1
 10291  0DF5  3FC1               	movwi [1]fsr1
 10292                           
 10293                           ;mcc_generated_files/mtouch/mtouch_button.c: 261:     }
 10294  0DF6  2E00               	goto	l526
 10295  0DF7                     l6598:	
 10296                           
 10297                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 265:         button->counter = (mtouch_button_statecounter_t)0;
 10298  0DF7  0021               	movlb	1	; select bank1
 10299  0DF8  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10300  0DF9  3E0A               	addlw	10
 10301  0DFA  0086               	movwf	6
 10302  0DFB  3001               	movlw	1	; select bank2/3
 10303  0DFC  0087               	movwf	7
 10304  0DFD  3000               	movlw	0
 10305  0DFE  3FC0               	movwi [0]fsr1
 10306  0DFF  3FC1               	movwi [1]fsr1
 10307  0E00                     l526:	
 10308                           
 10309                           ;mcc_generated_files/mtouch/mtouch_button.c: 270:     (button->baseline_count)++;
 10310  0E00  0021               	movlb	1	; select bank1
 10311  0E01  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10312  0E02  3E0C               	addlw	12
 10313  0E03  0086               	movwf	6
 10314  0E04  3001               	movlw	1	; select bank2/3
 10315  0E05  0087               	movwf	7
 10316  0E06  3001               	movlw	1
 10317  0E07  0781               	addwf	1,f
 10318  0E08  3141               	addfsr 1,1
 10319  0E09  1803               	skipnc
 10320  0E0A  0A81               	incf	1,f
 10321                           
 10322                           ;mcc_generated_files/mtouch/mtouch_button.c: 271:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 10323  0E0B  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10324  0E0C  3E0C               	addlw	12
 10325  0E0D  0086               	movwf	6
 10326  0E0E  3001               	movlw	1	; select bank2/3
 10327  0E0F  0087               	movwf	7
 10328  0E10  0016               	moviw fsr1++
 10329  0E11  3A40               	xorlw	64
 10330  0E12  00BF               	movwf	??_Button_State_NotPressed^(0+128)
 10331  0E13  0016               	moviw fsr1++
 10332  0E14  04BF               	iorwf	??_Button_State_NotPressed^(0+128),f
 10333  0E15  1D03               	btfss	3,2
 10334  0E16  0008               	return
 10335                           
 10336                           ;mcc_generated_files/mtouch/mtouch_button.c: 272:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 273:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10337  0E17  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10338  0E18  3E0C               	addlw	12
 10339  0E19  0086               	movwf	6
 10340  0E1A  3001               	movlw	1	; select bank2/3
 10341  0E1B  0087               	movwf	7
 10342  0E1C  3000               	movlw	0
 10343  0E1D  3FC0               	movwi [0]fsr1
 10344  0E1E  3FC1               	movwi [1]fsr1
 10345                           
 10346                           ;mcc_generated_files/mtouch/mtouch_button.c: 274:         Button_Baseline_Update(button)
      +                          ;
 10347  0E1F  083E               	movf	Button_State_NotPressed@button^(0+128),w
 10348  0E20  318C  24FD         	fcall	_Button_Baseline_Update
 10349  0E22  0008               	return
 10350  0E23                     __end_of_Button_State_NotPressed:	
 10351                           
 10352                           	psect	text61
 10353  0ADC                     __ptext61:	
 10354 ;; *************** function _Button_State_Initializing *****************
 10355 ;; Defined at:
 10356 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;  button          1   30[BANK1 ] PTR struct .
 10359 ;;		 -> mtouch_button(48), 
 10360 ;; Auto vars:     Size  Location     Type
 10361 ;;		None
 10362 ;; Return value:  Size  Location     Type
 10363 ;;                  1    wreg      void 
 10364 ;; Registers used:
 10365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10366 ;; Tracked objects:
 10367 ;;		On entry : 0/0
 10368 ;;		On exit  : 0/0
 10369 ;;		Unchanged: 0/0
 10370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10371 ;;      Params:         0       0       1       0       0       0       0       0
 10372 ;;      Locals:         0       0       0       0       0       0       0       0
 10373 ;;      Temps:          0       0       4       0       0       0       0       0
 10374 ;;      Totals:         0       0       5       0       0       0       0       0
 10375 ;;Total ram usage:        5 bytes
 10376 ;; Hardware stack levels used:    1
 10377 ;; Hardware stack levels required when called:   10
 10378 ;; This function calls:
 10379 ;;		_Button_Baseline_Initialize
 10380 ;;		_Button_Baseline_Update
 10381 ;; This function is called by:
 10382 ;;		_Button_Service
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           
 10387                           ;psect for function _Button_State_Initializing
 10388  0ADC                     _Button_State_Initializing:	
 10389                           
 10390                           ;mcc_generated_files/mtouch/mtouch_button.c: 223: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 224: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 226:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 10391                           
 10392                           ;incstack = 0
 10393                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10394  0ADC  0021               	movlb	1	; select bank1
 10395  0ADD  083E               	movf	Button_State_Initializing@button^(0+128),w
 10396  0ADE  3E0A               	addlw	10
 10397  0ADF  0086               	movwf	6
 10398  0AE0  3001               	movlw	1	; select bank2/3
 10399  0AE1  0087               	movwf	7
 10400  0AE2  3F40               	moviw [0]fsr1
 10401  0AE3  00BF               	movwf	??_Button_State_Initializing^(0+128)
 10402  0AE4  3F41               	moviw [1]fsr1
 10403  0AE5  00C0               	movwf	(??_Button_State_Initializing^(0+128)+1)
 10404  0AE6  3000               	movlw	0
 10405  0AE7  0240               	subwf	(??_Button_State_Initializing+1)^(0+128),w
 10406  0AE8  3009               	movlw	9
 10407  0AE9  1903               	skipnz
 10408  0AEA  023F               	subwf	??_Button_State_Initializing^(0+128),w
 10409  0AEB  1803               	skipnc
 10410  0AEC  2AF2               	goto	l6578
 10411                           
 10412                           ;mcc_generated_files/mtouch/mtouch_button.c: 227:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 228:         Button_Baseline_Initialize(button);
 10413  0AED  083E               	movf	Button_State_Initializing@button^(0+128),w
 10414  0AEE  3197  279A  318A   	fcall	_Button_Baseline_Initialize
 10415                           
 10416                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     } else {
 10417  0AF1  2AF6               	goto	l6580
 10418  0AF2                     l6578:	
 10419                           
 10420                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:         Button_Baseline_Update(button)
      +                          ;
 10421  0AF2  083E               	movf	Button_State_Initializing@button^(0+128),w
 10422  0AF3  318C  24FD  318A   	fcall	_Button_Baseline_Update
 10423  0AF6                     l6580:	
 10424                           
 10425                           ;mcc_generated_files/mtouch/mtouch_button.c: 234:     (button->counter)++;
 10426  0AF6  0021               	movlb	1	; select bank1
 10427  0AF7  083E               	movf	Button_State_Initializing@button^(0+128),w
 10428  0AF8  3E0A               	addlw	10
 10429  0AF9  0086               	movwf	6
 10430  0AFA  3001               	movlw	1	; select bank2/3
 10431  0AFB  0087               	movwf	7
 10432  0AFC  3001               	movlw	1
 10433  0AFD  0781               	addwf	1,f
 10434  0AFE  3141               	addfsr 1,1
 10435  0AFF  1803               	skipnc
 10436  0B00  0A81               	incf	1,f
 10437                           
 10438                           ;mcc_generated_files/mtouch/mtouch_button.c: 235:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 10439  0B01  083E               	movf	Button_State_Initializing@button^(0+128),w
 10440  0B02  3E0A               	addlw	10
 10441  0B03  0086               	movwf	6
 10442  0B04  3001               	movlw	1	; select bank2/3
 10443  0B05  0087               	movwf	7
 10444  0B06  3F40               	moviw [0]fsr1
 10445  0B07  00BF               	movwf	??_Button_State_Initializing^(0+128)
 10446  0B08  3F41               	moviw [1]fsr1
 10447  0B09  00C0               	movwf	(??_Button_State_Initializing^(0+128)+1)
 10448  0B0A  3000               	movlw	0
 10449  0B0B  0240               	subwf	(??_Button_State_Initializing+1)^(0+128),w
 10450  0B0C  3010               	movlw	16
 10451  0B0D  1903               	skipnz
 10452  0B0E  023F               	subwf	??_Button_State_Initializing^(0+128),w
 10453  0B0F  1C03               	skipc
 10454  0B10  0008               	return
 10455                           
 10456                           ;mcc_generated_files/mtouch/mtouch_button.c: 236:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 237:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 10457  0B11  083E               	movf	Button_State_Initializing@button^(0+128),w
 10458  0B12  3E05               	addlw	5
 10459  0B13  0086               	movwf	6
 10460  0B14  3001               	movlw	1	; select bank2/3
 10461  0B15  0087               	movwf	7
 10462  0B16  3F40               	moviw [0]fsr1
 10463  0B17  00BF               	movwf	??_Button_State_Initializing^(0+128)
 10464  0B18  3F41               	moviw [1]fsr1
 10465  0B19  00C0               	movwf	(??_Button_State_Initializing^(0+128)+1)
 10466  0B1A  3F42               	moviw [2]fsr1
 10467  0B1B  00C1               	movwf	(??_Button_State_Initializing^(0+128)+2)
 10468  0B1C  3F43               	moviw [3]fsr1
 10469  0B1D  00C2               	movwf	(??_Button_State_Initializing^(0+128)+3)
 10470  0B1E  3004               	movlw	4
 10471  0B1F                     u7065:	
 10472  0B1F  36C2               	lsrf	(??_Button_State_Initializing^(0+128)+3),f
 10473  0B20  0CC1               	rrf	(??_Button_State_Initializing^(0+128)+2),f
 10474  0B21  0CC0               	rrf	(??_Button_State_Initializing^(0+128)+1),f
 10475  0B22  0CBF               	rrf	??_Button_State_Initializing^(0+128),f
 10476  0B23  0B89               	decfsz	9,f
 10477  0B24  2B1F               	goto	u7065
 10478  0B25  083E               	movf	Button_State_Initializing@button^(0+128),w
 10479  0B26  3E03               	addlw	3
 10480  0B27  0086               	movwf	6
 10481  0B28  3001               	movlw	1	; select bank2/3
 10482  0B29  0087               	movwf	7
 10483  0B2A  083F               	movf	??_Button_State_Initializing^(0+128),w
 10484  0B2B  3FC0               	movwi [0]fsr1
 10485  0B2C  0840               	movf	(??_Button_State_Initializing+1)^(0+128),w
 10486  0B2D  3FC1               	movwi [1]fsr1
 10487                           
 10488                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 10489  0B2E  083E               	movf	Button_State_Initializing@button^(0+128),w
 10490  0B2F  3E02               	addlw	2
 10491  0B30  0086               	movwf	6
 10492  0B31  3001               	movlw	1	; select bank2/3
 10493  0B32  0087               	movwf	7
 10494  0B33  0181               	clrf	1
 10495  0B34  0A81               	incf	1,f
 10496                           
 10497                           ;mcc_generated_files/mtouch/mtouch_button.c: 239:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10498  0B35  083E               	movf	Button_State_Initializing@button^(0+128),w
 10499  0B36  3E0A               	addlw	10
 10500  0B37  0086               	movwf	6
 10501  0B38  3001               	movlw	1	; select bank2/3
 10502  0B39  0087               	movwf	7
 10503  0B3A  3000               	movlw	0
 10504  0B3B  3FC0               	movwi [0]fsr1
 10505  0B3C  3FC1               	movwi [1]fsr1
 10506  0B3D  0008               	return
 10507  0B3E                     __end_of_Button_State_Initializing:	
 10508                           
 10509                           	psect	text62
 10510  0C0B                     __ptext62:	
 10511 ;; *************** function _Button_State_ReleaseDebounce *****************
 10512 ;; Defined at:
 10513 ;;		line 315 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;  button          1   30[BANK1 ] PTR struct .
 10516 ;;		 -> mtouch_button(48), 
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;		None
 10519 ;; Return value:  Size  Location     Type
 10520 ;;                  1    wreg      void 
 10521 ;; Registers used:
 10522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10523 ;; Tracked objects:
 10524 ;;		On entry : 0/0
 10525 ;;		On exit  : 0/0
 10526 ;;		Unchanged: 0/0
 10527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10528 ;;      Params:         0       0       1       0       0       0       0       0
 10529 ;;      Locals:         0       0       0       0       0       0       0       0
 10530 ;;      Temps:          0       0       2       0       0       0       0       0
 10531 ;;      Totals:         0       0       3       0       0       0       0       0
 10532 ;;Total ram usage:        3 bytes
 10533 ;; Hardware stack levels used:    1
 10534 ;; Hardware stack levels required when called:   17
 10535 ;; This function calls:
 10536 ;;		_Button_DefaultCallback
 10537 ;;		_myButtonReleasedCallback
 10538 ;; This function is called by:
 10539 ;;		_Button_Service
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           
 10544                           ;psect for function _Button_State_ReleaseDebounce
 10545  0C0B                     _Button_State_ReleaseDebounce:	
 10546                           
 10547                           ;mcc_generated_files/mtouch/mtouch_button.c: 315: static void Button_State_ReleaseDeboun
      +                          ce(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 316: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 317:     if ((button->deviation) < (mtouch_button_dev
      +                          iation_t)((button->threshold)-((button->threshold) >> HYST_50_PERCENT)))
 10548                           
 10549                           ;incstack = 0
 10550 ;; hardware stack exceeded
 10551                           ; Regs used in _Button_State_ReleaseDebounce: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10552  0C0B  0021               	movlb	1	; select bank1
 10553  0C0C  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10554  0C0D  3E09               	addlw	9
 10555  0C0E  0086               	movwf	6
 10556  0C0F  3001               	movlw	1	; select bank2/3
 10557  0C10  0087               	movwf	7
 10558  0C11  0801               	movf	1,w
 10559  0C12  3A80               	xorlw	128
 10560  0C13  00BF               	movwf	??_Button_State_ReleaseDebounce^(0+128)
 10561  0C14  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10562  0C15  3E0E               	addlw	14
 10563  0C16  0086               	movwf	6
 10564  0C17  3001               	movlw	1	; select bank2/3
 10565  0C18  0087               	movwf	7
 10566  0C19  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10567  0C1A  3E0E               	addlw	14
 10568  0C1B  0084               	movwf	4
 10569  0C1C  3001               	movlw	1	; select bank2/3
 10570  0C1D  0085               	movwf	5
 10571  0C1E  3600               	lsrf	0,w
 10572  0C1F  0201               	subwf	1,w
 10573  0C20  3A80               	xorlw	128
 10574  0C21  02BF               	subwf	??_Button_State_ReleaseDebounce^(0+128),f
 10575  0C22  1803               	skipnc
 10576  0C23  2C64               	goto	l6632
 10577                           
 10578                           ;mcc_generated_files/mtouch/mtouch_button.c: 318:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 319:         (button->counter)++;
 10579  0C24  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10580  0C25  3E0A               	addlw	10
 10581  0C26  0086               	movwf	6
 10582  0C27  3001               	movlw	1	; select bank2/3
 10583  0C28  0087               	movwf	7
 10584  0C29  3001               	movlw	1
 10585  0C2A  0781               	addwf	1,f
 10586  0C2B  3141               	addfsr 1,1
 10587  0C2C  1803               	skipnc
 10588  0C2D  0A81               	incf	1,f
 10589                           
 10590                           ;mcc_generated_files/mtouch/mtouch_button.c: 320:         if ((button->counter) >= (10u)
      +                          )
 10591  0C2E  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10592  0C2F  3E0A               	addlw	10
 10593  0C30  0086               	movwf	6
 10594  0C31  3001               	movlw	1	; select bank2/3
 10595  0C32  0087               	movwf	7
 10596  0C33  3F40               	moviw [0]fsr1
 10597  0C34  00BF               	movwf	??_Button_State_ReleaseDebounce^(0+128)
 10598  0C35  3F41               	moviw [1]fsr1
 10599  0C36  00C0               	movwf	(??_Button_State_ReleaseDebounce^(0+128)+1)
 10600  0C37  3000               	movlw	0
 10601  0C38  0240               	subwf	(??_Button_State_ReleaseDebounce+1)^(0+128),w
 10602  0C39  300A               	movlw	10
 10603  0C3A  1903               	skipnz
 10604  0C3B  023F               	subwf	??_Button_State_ReleaseDebounce^(0+128),w
 10605  0C3C  1C03               	skipc
 10606  0C3D  0008               	return
 10607                           
 10608                           ;mcc_generated_files/mtouch/mtouch_button.c: 321:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 322:             button->state = MTOUCH_BUTTON_STATE_notPressed;
 10609  0C3E  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10610  0C3F  3E02               	addlw	2
 10611  0C40  0086               	movwf	6
 10612  0C41  3001               	movlw	1	; select bank2/3
 10613  0C42  0087               	movwf	7
 10614  0C43  0181               	clrf	1
 10615  0C44  0A81               	incf	1,f
 10616                           
 10617                           ;mcc_generated_files/mtouch/mtouch_button.c: 323:             button->counter = 0;
 10618  0C45  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10619  0C46  3E0A               	addlw	10
 10620  0C47  0086               	movwf	6
 10621  0C48  3001               	movlw	1	; select bank2/3
 10622  0C49  0087               	movwf	7
 10623  0C4A  3000               	movlw	0
 10624  0C4B  3FC0               	movwi [0]fsr1
 10625  0C4C  3FC1               	movwi [1]fsr1
 10626                           
 10627                           ;mcc_generated_files/mtouch/mtouch_button.c: 324:             button->baseline_count = (
      +                          mtouch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 10628  0C4D  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10629  0C4E  3E0C               	addlw	12
 10630  0C4F  0086               	movwf	6
 10631  0C50  3001               	movlw	1	; select bank2/3
 10632  0C51  0087               	movwf	7
 10633  0C52  30FF               	movlw	255
 10634  0C53  3FC0               	movwi [0]fsr1
 10635  0C54  30FB               	movlw	251
 10636  0C55  3FC1               	movwi [1]fsr1
 10637                           
 10638                           ;mcc_generated_files/mtouch/mtouch_button.c: 325:             callback_notPressed(button
      +                          ->name);
 10639  0C56  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10640  0C57  0086               	movwf	6
 10641  0C58  3001               	movlw	1	; select bank2/3
 10642  0C59  0087               	movwf	7
 10643  0C5A  0801               	movf	1,w
 10644  0C5B  00BF               	movwf	??_Button_State_ReleaseDebounce^(0+128)
 10645  0C5C  083F               	movf	??_Button_State_ReleaseDebounce^(0+128),w
 10646  0C5D  00BB               	movwf	myButtonReleasedCallback@button^(0+128)
 10647  0C5E  0866               	movf	(_callback_notPressed+1)^(0+128),w
 10648  0C5F  008A               	movwf	10
 10649  0C60  0865               	movf	_callback_notPressed^(0+128),w
 10650  0C61  000A               	callw
 10651  0C62  318C               	pagesel	$
 10652  0C63  0008               	return
 10653  0C64                     l6632:	
 10654                           
 10655                           ;mcc_generated_files/mtouch/mtouch_button.c: 329:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 330:         button->state = MTOUCH_BUTTON_STATE_pressed;
 10656  0C64  3003               	movlw	3
 10657  0C65  00BF               	movwf	??_Button_State_ReleaseDebounce^(0+128)
 10658  0C66  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10659  0C67  3E02               	addlw	2
 10660  0C68  0086               	movwf	6
 10661  0C69  3001               	movlw	1	; select bank2/3
 10662  0C6A  0087               	movwf	7
 10663  0C6B  083F               	movf	??_Button_State_ReleaseDebounce^(0+128),w
 10664  0C6C  0081               	movwf	1
 10665                           
 10666                           ;mcc_generated_files/mtouch/mtouch_button.c: 331:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10667  0C6D  083E               	movf	Button_State_ReleaseDebounce@button^(0+128),w
 10668  0C6E  3E0A               	addlw	10
 10669  0C6F  0086               	movwf	6
 10670  0C70  3001               	movlw	1	; select bank2/3
 10671  0C71  0087               	movwf	7
 10672  0C72  3000               	movlw	0
 10673  0C73  3FC0               	movwi [0]fsr1
 10674  0C74  3FC1               	movwi [1]fsr1
 10675  0C75  0008               	return
 10676  0C76                     __end_of_Button_State_ReleaseDebounce:	
 10677                           
 10678                           	psect	text63
 10679  08B6                     __ptext63:	
 10680 ;; *************** function _myButtonPressedCallback *****************
 10681 ;; Defined at:
 10682 ;;		line 30 in file "main.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;  button          1   27[BANK1 ] enum E2937
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;		None
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10696 ;;      Params:         0       0       1       0       0       0       0       0
 10697 ;;      Locals:         0       0       0       0       0       0       0       0
 10698 ;;      Temps:          0       0       0       0       0       0       0       0
 10699 ;;      Totals:         0       0       1       0       0       0       0       0
 10700 ;;Total ram usage:        1 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:   16
 10703 ;; This function calls:
 10704 ;;		_MTOUCH_Button_Buttonmask_Get
 10705 ;;		_printf
 10706 ;; This function is called by:
 10707 ;;		_main
 10708 ;;		_Button_State_PressDebounce
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           
 10713                           ;psect for function _myButtonPressedCallback
 10714  08B6                     _myButtonPressedCallback:	
 10715                           
 10716                           ;main.c: 30: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 31: {
      +                          ;main.c: 32:     if(button == POWER)
 10717                           
 10718                           ;incstack = 0
 10719 ;; hardware stack exceeded
 10720                           ; Regs used in _myButtonPressedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10721  08B6  0021               	movlb	1	; select bank1
 10722  08B7  033B               	decf	myButtonPressedCallback@button^(0+128),w
 10723  08B8  1D03               	btfss	3,2
 10724  08B9  28C4               	goto	l6456
 10725                           
 10726                           ;main.c: 33:     {;main.c: 34:         user_touch.POWER = ~user_touch.POWER;
 10727  08BA  1003               	clrc
 10728  08BB  1CD9               	btfss	_user_touch^(0+128),1
 10729  08BC  1403               	setc
 10730  08BD  1C03               	btfss	3,0
 10731  08BE  28C2               	goto	u6810
 10732  08BF  0021               	movlb	1	; select bank1
 10733  08C0  14D9               	bsf	_user_touch^(0+128),1
 10734  08C1  28C4               	goto	l6456
 10735  08C2                     u6810:	
 10736  08C2  0021               	movlb	1	; select bank1
 10737  08C3  10D9               	bcf	_user_touch^(0+128),1
 10738  08C4                     l6456:	
 10739                           
 10740                           ;main.c: 36:     if(user_touch.POWER)
 10741  08C4  1CD9               	btfss	_user_touch^(0+128),1
 10742  08C5  28EC               	goto	l817
 10743                           
 10744                           ;main.c: 37:     {;main.c: 38:         do { LATAbits.LATA1 = 0; } while(0);
 10745  08C6  0022               	movlb	2	; select bank2
 10746  08C7  108C               	bcf	12,1	;volatile
 10747                           
 10748                           ;main.c: 39:         printf("ON\r\n");
 10749  08C8  305B               	movlw	low (STR_1| (0+32768))
 10750  08C9  0021               	movlb	1	; select bank1
 10751  08CA  00B1               	movwf	printf@fmt^(0+128)
 10752  08CB  3098               	movlw	high (STR_1| (0+32768))
 10753  08CC  00B2               	movwf	(printf@fmt^(0+128)+1)
 10754  08CD  3193  2351  3188   	fcall	_printf
 10755                           
 10756                           ;main.c: 40:         if(MTOUCH_Button_Buttonmask_Get() == 1)
 10757  08D0  3195  25A5  3188   	fcall	_MTOUCH_Button_Buttonmask_Get
 10758  08D3  3A01               	xorlw	1
 10759  08D4  1D03               	skipz
 10760  08D5  28DE               	goto	l6464
 10761                           
 10762                           ;main.c: 41:         {;main.c: 42:             printf("UP\r\n");
 10763  08D6  3060               	movlw	low (STR_2| (0+32768))
 10764  08D7  0021               	movlb	1	; select bank1
 10765  08D8  00B1               	movwf	printf@fmt^(0+128)
 10766  08D9  3098               	movlw	high (STR_2| (0+32768))
 10767  08DA  00B2               	movwf	(printf@fmt^(0+128)+1)
 10768  08DB  3193  2351         	fcall	_printf
 10769                           
 10770                           ;main.c: 43:         }
 10771  08DD  0008               	return
 10772  08DE                     l6464:	
 10773  08DE  3195  25A5  3188   	fcall	_MTOUCH_Button_Buttonmask_Get
 10774  08E1  3A04               	xorlw	4
 10775  08E2  1D03               	skipz
 10776  08E3  0008               	return
 10777                           
 10778                           ;main.c: 45:         {;main.c: 46:             printf("DOWN\r\n");
 10779  08E4  3043               	movlw	low (STR_3| (0+32768))
 10780  08E5  0021               	movlb	1	; select bank1
 10781  08E6  00B1               	movwf	printf@fmt^(0+128)
 10782  08E7  3098               	movlw	high (STR_3| (0+32768))
 10783  08E8  00B2               	movwf	(printf@fmt^(0+128)+1)
 10784  08E9  3193  2351         	fcall	_printf
 10785  08EB  0008               	return
 10786  08EC                     l817:	
 10787                           ;main.c: 50:     {;main.c: 51:         do { LATAbits.LATA1 = 1; } while(0);
 10788                           
 10789  08EC  0022               	movlb	2	; select bank2
 10790  08ED  148C               	bsf	12,1	;volatile
 10791                           
 10792                           ;main.c: 52:         printf("OFF\r\n");
 10793  08EE  3050               	movlw	low (STR_4| (0+32768))
 10794  08EF  0021               	movlb	1	; select bank1
 10795  08F0  00B1               	movwf	printf@fmt^(0+128)
 10796  08F1  3098               	movlw	high (STR_4| (0+32768))
 10797  08F2  00B2               	movwf	(printf@fmt^(0+128)+1)
 10798  08F3  3193  2351         	fcall	_printf
 10799  08F5  0008               	return
 10800  08F6                     __end_of_myButtonPressedCallback:	
 10801                           
 10802                           	psect	text64
 10803  11CB                     __ptext64:	
 10804 ;; *************** function _Button_DefaultCallback *****************
 10805 ;; Defined at:
 10806 ;;		line 569 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10807 ;; Parameters:    Size  Location     Type
 10808 ;;  button          1   27[BANK1 ] enum E3069
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;		None
 10811 ;; Return value:  Size  Location     Type
 10812 ;;                  1    wreg      void 
 10813 ;; Registers used:
 10814 ;;		None
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10820 ;;      Params:         0       0       1       0       0       0       0       0
 10821 ;;      Locals:         0       0       0       0       0       0       0       0
 10822 ;;      Temps:          0       0       0       0       0       0       0       0
 10823 ;;      Totals:         0       0       1       0       0       0       0       0
 10824 ;;Total ram usage:        1 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; Hardware stack levels required when called:    7
 10827 ;; This function calls:
 10828 ;;		Nothing
 10829 ;; This function is called by:
 10830 ;;		_Button_State_Pressed
 10831 ;;		_Button_State_PressDebounce
 10832 ;;		_Button_State_ReleaseDebounce
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           
 10837                           ;psect for function _Button_DefaultCallback
 10838  11CB                     _Button_DefaultCallback:	
 10839                           
 10840                           ;incstack = 0
 10841                           ; Regs used in _Button_DefaultCallback: []
 10842  11CB  0008               	return
 10843  11CC                     __end_of_Button_DefaultCallback:	
 10844                           
 10845                           	psect	text65
 10846  14F7                     __ptext65:	
 10847 ;; *************** function _myButtonReleasedCallback *****************
 10848 ;; Defined at:
 10849 ;;		line 56 in file "main.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  button          1   27[BANK1 ] enum E2937
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;		None
 10854 ;; Return value:  Size  Location     Type
 10855 ;;                  1    wreg      void 
 10856 ;; Registers used:
 10857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10858 ;; Tracked objects:
 10859 ;;		On entry : 0/0
 10860 ;;		On exit  : 0/0
 10861 ;;		Unchanged: 0/0
 10862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10863 ;;      Params:         0       0       1       0       0       0       0       0
 10864 ;;      Locals:         0       0       0       0       0       0       0       0
 10865 ;;      Temps:          0       0       2       0       0       0       0       0
 10866 ;;      Totals:         0       0       3       0       0       0       0       0
 10867 ;;Total ram usage:        3 bytes
 10868 ;; Hardware stack levels used:    1
 10869 ;; Hardware stack levels required when called:   16
 10870 ;; This function calls:
 10871 ;;		_MTOUCH_Button_Buttonmask_Get
 10872 ;;		_printf
 10873 ;; This function is called by:
 10874 ;;		_main
 10875 ;;		_Button_State_Pressed
 10876 ;;		_Button_State_ReleaseDebounce
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           
 10881                           ;psect for function _myButtonReleasedCallback
 10882  14F7                     _myButtonReleasedCallback:	
 10883                           
 10884                           ;main.c: 56: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 57: 
      +                          {;main.c: 58:     printf("Released\r\n");
 10885                           
 10886                           ;incstack = 0
 10887 ;; hardware stack exceeded
 10888                           ; Regs used in _myButtonReleasedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10889  14F7  3030               	movlw	low (STR_5| (0+32768))
 10890  14F8  0021               	movlb	1	; select bank1
 10891  14F9  00B1               	movwf	printf@fmt^(0+128)
 10892  14FA  3098               	movlw	high (STR_5| (0+32768))
 10893  14FB  00B2               	movwf	(printf@fmt^(0+128)+1)
 10894  14FC  3193  2351  3194   	fcall	_printf
 10895                           
 10896                           ;main.c: 59:     if(user_touch.POWER)
 10897  14FF  0021               	movlb	1	; select bank1
 10898  1500  1CD9               	btfss	_user_touch^(0+128),1
 10899  1501  0008               	return
 10900                           
 10901                           ;main.c: 60:     {;main.c: 61:         printf("%d\r\n",MTOUCH_Button_Buttonmask_Get());
 10902  1502  3065               	movlw	low (STR_6| (0+32768))
 10903  1503  00B1               	movwf	printf@fmt^(0+128)
 10904  1504  3098               	movlw	high (STR_6| (0+32768))
 10905  1505  00B2               	movwf	(printf@fmt^(0+128)+1)
 10906  1506  3195  25A5  3194   	fcall	_MTOUCH_Button_Buttonmask_Get
 10907  1509  0021               	movlb	1	; select bank1
 10908  150A  00BC               	movwf	??_myButtonReleasedCallback^(0+128)
 10909  150B  01BD               	clrf	(??_myButtonReleasedCallback^(0+128)+1)
 10910  150C  083C               	movf	??_myButtonReleasedCallback^(0+128),w
 10911  150D  00B3               	movwf	(?_printf^(0+128)+2)
 10912  150E  083D               	movf	(??_myButtonReleasedCallback+1)^(0+128),w
 10913  150F  00B4               	movwf	((?_printf+1)^(0+128)+2)
 10914  1510  3193  2351         	fcall	_printf
 10915  1512  0008               	return
 10916  1513                     __end_of_myButtonReleasedCallback:	
 10917                           
 10918                           	psect	text66
 10919  1351                     __ptext66:	
 10920 ;; *************** function _printf *****************
 10921 ;; Defined at:
 10922 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
 10923 ;; Parameters:    Size  Location     Type
 10924 ;;  fmt             2   17[BANK1 ] PTR const unsigned char 
 10925 ;;		 -> STR_8(6), STR_7(8), STR_6(5), STR_5(11), 
 10926 ;;		 -> STR_4(6), STR_3(7), STR_2(5), STR_1(5), 
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;  ret             2    0        int 
 10929 ;;  ap              1   26[BANK1 ] PTR void [1]
 10930 ;;		 -> ?_printf(2), 
 10931 ;; Return value:  Size  Location     Type
 10932 ;;                  2   17[BANK1 ] int 
 10933 ;; Registers used:
 10934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10940 ;;      Params:         0       0       6       0       0       0       0       0
 10941 ;;      Locals:         0       0       3       0       0       0       0       0
 10942 ;;      Temps:          0       0       1       0       0       0       0       0
 10943 ;;      Totals:         0       0      10       0       0       0       0       0
 10944 ;;Total ram usage:       10 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; Hardware stack levels required when called:   15
 10947 ;; This function calls:
 10948 ;;		_vfprintf
 10949 ;; This function is called by:
 10950 ;;		_myButtonPressedCallback
 10951 ;;		_myButtonReleasedCallback
 10952 ;;		_printList
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           
 10957                           ;psect for function _printf
 10958  1351                     _printf:	
 10959                           
 10960                           ;incstack = 0
 10961 ;; hardware stack exceeded
 10962                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10963  1351  30B3               	movlw	(low ((?_printf| 0+2)))& (0+255)
 10964  1352  0021               	movlb	1	; select bank1
 10965  1353  00B7               	movwf	??_printf^(0+128)
 10966  1354  0837               	movf	??_printf^(0+128),w
 10967  1355  00BA               	movwf	printf@ap^(0+128)
 10968  1356  0832               	movf	(printf@fmt+1)^(0+128),w
 10969  1357  00AA               	movwf	(vfprintf@fmt+1)^(0+128)
 10970  1358  0831               	movf	printf@fmt^(0+128),w
 10971  1359  00A9               	movwf	vfprintf@fmt^(0+128)
 10972  135A  30BA               	movlw	(low (printf@ap| 0))& (0+255)
 10973  135B  00B7               	movwf	??_printf^(0+128)
 10974  135C  0837               	movf	??_printf^(0+128),w
 10975  135D  00AB               	movwf	vfprintf@ap^(0+128)
 10976  135E  3000               	movlw	0
 10977  135F  3197  2710         	fcall	_vfprintf
 10978  1361  0008               	return
 10979  1362                     __end_of_printf:	
 10980                           
 10981                           	psect	text67
 10982  1710                     __ptext67:	
 10983 ;; *************** function _vfprintf *****************
 10984 ;; Defined at:
 10985 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;  fp              1    wreg     PTR struct _IO_FILE
 10988 ;;		 -> NULL(0), 
 10989 ;;  fmt             2    9[BANK1 ] PTR const unsigned char 
 10990 ;;		 -> STR_8(6), STR_7(8), STR_6(5), STR_5(11), 
 10991 ;;		 -> STR_4(6), STR_3(7), STR_2(5), STR_1(5), 
 10992 ;;  ap              1   11[BANK1 ] PTR PTR void 
 10993 ;;		 -> printf@ap(1), 
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;  fp              1   14[BANK1 ] PTR struct _IO_FILE
 10996 ;;		 -> NULL(0), 
 10997 ;;  cfmt            2   15[BANK1 ] PTR unsigned char 
 10998 ;;		 -> STR_8(6), STR_7(8), STR_6(5), STR_5(11), 
 10999 ;;		 -> STR_4(6), STR_3(7), STR_2(5), STR_1(5), 
 11000 ;; Return value:  Size  Location     Type
 11001 ;;                  2    9[BANK1 ] int 
 11002 ;; Registers used:
 11003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11004 ;; Tracked objects:
 11005 ;;		On entry : 0/0
 11006 ;;		On exit  : 0/0
 11007 ;;		Unchanged: 0/0
 11008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11009 ;;      Params:         0       0       3       0       0       0       0       0
 11010 ;;      Locals:         0       0       3       0       0       0       0       0
 11011 ;;      Temps:          0       0       2       0       0       0       0       0
 11012 ;;      Totals:         0       0       8       0       0       0       0       0
 11013 ;;Total ram usage:        8 bytes
 11014 ;; Hardware stack levels used:    1
 11015 ;; Hardware stack levels required when called:   14
 11016 ;; This function calls:
 11017 ;;		_vfpfcnvrt
 11018 ;; This function is called by:
 11019 ;;		_printf
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           
 11024                           ;psect for function _vfprintf
 11025  1710                     _vfprintf:	
 11026                           
 11027                           ;incstack = 0
 11028 ;; hardware stack exceeded
 11029                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11030                           ;vfprintf@fp stored from wreg
 11031  1710  0021               	movlb	1	; select bank1
 11032  1711  00AE               	movwf	vfprintf@fp^(0+128)
 11033                           
 11034                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 11035  1712  082A               	movf	(vfprintf@fmt+1)^(0+128),w
 11036  1713  00B0               	movwf	(vfprintf@cfmt+1)^(0+128)
 11037  1714  0829               	movf	vfprintf@fmt^(0+128),w
 11038  1715  00AF               	movwf	vfprintf@cfmt^(0+128)
 11039                           
 11040                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 11041  1716  01D1               	clrf	_nout^(0+128)
 11042  1717  01D2               	clrf	(_nout+1)^(0+128)
 11043  1718                     l6092:	
 11044                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 11045                           
 11046                           
 11047                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 11048  1718  082F               	movf	vfprintf@cfmt^(0+128),w
 11049  1719  0084               	movwf	4
 11050  171A  0830               	movf	(vfprintf@cfmt+1)^(0+128),w
 11051  171B  0085               	movwf	5
 11052  171C  0012               	moviw fsr0++
 11053  171D  1903               	btfsc	3,2
 11054  171E  2F38               	goto	l6094
 11055                           
 11056                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 11057  171F  30AF               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 11058  1720  00AC               	movwf	??_vfprintf^(0+128)
 11059  1721  082C               	movf	??_vfprintf^(0+128),w
 11060  1722  0020               	movlb	0	; select bank0
 11061  1723  00DF               	movwf	vfpfcnvrt@fmt
 11062  1724  0021               	movlb	1	; select bank1
 11063  1725  082B               	movf	vfprintf@ap^(0+128),w
 11064  1726  00AD               	movwf	(??_vfprintf+1)^(0+128)
 11065  1727  082D               	movf	(??_vfprintf+1)^(0+128),w
 11066  1728  0020               	movlb	0	; select bank0
 11067  1729  00E0               	movwf	vfpfcnvrt@ap
 11068  172A  0021               	movlb	1	; select bank1
 11069  172B  082E               	movf	vfprintf@fp^(0+128),w
 11070  172C  3182  225A  3197   	fcall	_vfpfcnvrt
 11071  172F  0020               	movlb	0	; select bank0
 11072  1730  085F               	movf	?_vfpfcnvrt,w
 11073  1731  0021               	movlb	1	; select bank1
 11074  1732  07D1               	addwf	_nout^(0+128),f
 11075  1733  0020               	movlb	0	; select bank0
 11076  1734  0860               	movf	?_vfpfcnvrt+1,w
 11077  1735  0021               	movlb	1	; select bank1
 11078  1736  3DD2               	addwfc	(_nout+1)^(0+128),f
 11079  1737  2F18               	goto	l6092
 11080  1738                     l6094:	
 11081                           
 11082                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 11083  1738  0852               	movf	(_nout+1)^(0+128),w
 11084  1739  00AA               	movwf	(?_vfprintf+1)^(0+128)
 11085  173A  0851               	movf	_nout^(0+128),w
 11086  173B  00A9               	movwf	?_vfprintf^(0+128)
 11087  173C  0008               	return
 11088  173D                     __end_of_vfprintf:	
 11089                           
 11090                           	psect	text68
 11091  025A                     __ptext68:	
 11092 ;; *************** function _vfpfcnvrt *****************
 11093 ;; Defined at:
 11094 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;  fp              1    wreg     PTR struct _IO_FILE
 11097 ;;		 -> NULL(0), 
 11098 ;;  fmt             1   63[BANK0 ] PTR PTR unsigned char 
 11099 ;;		 -> vfprintf@cfmt(2), 
 11100 ;;  ap              1   64[BANK0 ] PTR PTR void 
 11101 ;;		 -> printf@ap(1), 
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;  fp              1    8[BANK1 ] PTR struct _IO_FILE
 11104 ;;		 -> NULL(0), 
 11105 ;;  ll              8    0[BANK1 ] long long 
 11106 ;;  llu             8    0        unsigned long long 
 11107 ;;  f               4    0        unsigned long long 
 11108 ;;  ct              3    0        unsigned char [3]
 11109 ;;  vp              2    0        PTR void 
 11110 ;;  i               2    0        int 
 11111 ;;  done            2    0        int 
 11112 ;;  cp              2    0        PTR unsigned char 
 11113 ;;  c               1    0        unsigned char 
 11114 ;; Return value:  Size  Location     Type
 11115 ;;                  2   63[BANK0 ] int 
 11116 ;; Registers used:
 11117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11123 ;;      Params:         0       2       0       0       0       0       0       0
 11124 ;;      Locals:         0       0       9       0       0       0       0       0
 11125 ;;      Temps:          0       5       0       0       0       0       0       0
 11126 ;;      Totals:         0       7       9       0       0       0       0       0
 11127 ;;Total ram usage:       16 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; Hardware stack levels required when called:   13
 11130 ;; This function calls:
 11131 ;;		_dtoa
 11132 ;;		_fputc
 11133 ;;		_strncmp
 11134 ;; This function is called by:
 11135 ;;		_vfprintf
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           
 11140                           ;psect for function _vfpfcnvrt
 11141  025A                     _vfpfcnvrt:	
 11142                           
 11143                           ;incstack = 0
 11144 ;; hardware stack exceeded
 11145                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11146                           ;vfpfcnvrt@fp stored from wreg
 11147  025A  0021               	movlb	1	; select bank1
 11148  025B  00A8               	movwf	vfpfcnvrt@fp^(0+128)
 11149                           
 11150                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 11151  025C  0020               	movlb	0	; select bank0
 11152  025D  085F               	movf	vfpfcnvrt@fmt,w
 11153  025E  0086               	movwf	6
 11154  025F  0187               	clrf	7
 11155  0260  3F40               	moviw [0]fsr1
 11156  0261  00E1               	movwf	??_vfpfcnvrt
 11157  0262  3F41               	moviw [1]fsr1
 11158  0263  00E2               	movwf	??_vfpfcnvrt+1
 11159  0264  0861               	movf	??_vfpfcnvrt,w
 11160  0265  0084               	movwf	4
 11161  0266  0862               	movf	??_vfpfcnvrt+1,w
 11162  0267  0085               	movwf	5
 11163  0268  0012               	moviw fsr0++
 11164  0269  3A25               	xorlw	37
 11165  026A  1D03               	btfss	3,2
 11166  026B  2BA2               	goto	l5964
 11167                           
 11168                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 11169  026C  085F               	movf	vfpfcnvrt@fmt,w
 11170  026D  0086               	movwf	6
 11171  026E  0187               	clrf	7
 11172  026F  3001               	movlw	1
 11173  0270  0781               	addwf	1,f
 11174  0271  3141               	addfsr 1,1
 11175  0272  1803               	skipnc
 11176  0273  0A81               	incf	1,f
 11177                           
 11178                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 11179  0274  0021               	movlb	1	; select bank1
 11180  0275  01D3               	clrf	_width^(0+128)
 11181  0276  01D4               	clrf	(_width+1)^(0+128)
 11182  0277  01D7               	clrf	_flags^(0+128)
 11183  0278  01D8               	clrf	(_flags+1)^(0+128)
 11184                           
 11185                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 11186  0279  30FF               	movlw	255
 11187  027A  00D5               	movwf	_prec^(0+128)
 11188  027B  30FF               	movlw	255
 11189  027C  00D6               	movwf	(_prec^(0+128)+1)
 11190                           
 11191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 11192  027D  0020               	movlb	0	; select bank0
 11193  027E  085F               	movf	vfpfcnvrt@fmt,w
 11194  027F  0086               	movwf	6
 11195  0280  0187               	clrf	7
 11196  0281  3F40               	moviw [0]fsr1
 11197  0282  00E1               	movwf	??_vfpfcnvrt
 11198  0283  3F41               	moviw [1]fsr1
 11199  0284  00E2               	movwf	??_vfpfcnvrt+1
 11200  0285  0861               	movf	??_vfpfcnvrt,w
 11201  0286  0084               	movwf	4
 11202  0287  0862               	movf	??_vfpfcnvrt+1,w
 11203  0288  0085               	movwf	5
 11204  0289  0012               	moviw fsr0++
 11205  028A  3A64               	xorlw	100
 11206  028B  1903               	btfsc	3,2
 11207  028C  2A9C               	goto	l5928
 11208  028D  085F               	movf	vfpfcnvrt@fmt,w
 11209  028E  0086               	movwf	6
 11210  028F  0187               	clrf	7
 11211  0290  3F40               	moviw [0]fsr1
 11212  0291  00E1               	movwf	??_vfpfcnvrt
 11213  0292  3F41               	moviw [1]fsr1
 11214  0293  00E2               	movwf	??_vfpfcnvrt+1
 11215  0294  0861               	movf	??_vfpfcnvrt,w
 11216  0295  0084               	movwf	4
 11217  0296  0862               	movf	??_vfpfcnvrt+1,w
 11218  0297  0085               	movwf	5
 11219  0298  0012               	moviw fsr0++
 11220  0299  3A69               	xorlw	105
 11221  029A  1D03               	btfss	3,2
 11222  029B  2AE9               	goto	l5936
 11223  029C                     l5928:	
 11224                           
 11225                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 11226  029C  085F               	movf	vfpfcnvrt@fmt,w
 11227  029D  0086               	movwf	6
 11228  029E  0187               	clrf	7
 11229  029F  3001               	movlw	1
 11230  02A0  0781               	addwf	1,f
 11231  02A1  3141               	addfsr 1,1
 11232  02A2  1803               	skipnc
 11233  02A3  0A81               	incf	1,f
 11234                           
 11235                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 11236  02A4  0860               	movf	vfpfcnvrt@ap,w
 11237  02A5  0086               	movwf	6
 11238  02A6  0187               	clrf	7
 11239  02A7  0801               	movf	1,w
 11240  02A8  0084               	movwf	4
 11241  02A9  0185               	clrf	5
 11242  02AA  3002               	movlw	2
 11243  02AB  0781               	addwf	1,f
 11244  02AC  3F00               	moviw [0]fsr0
 11245  02AD  00E1               	movwf	??_vfpfcnvrt
 11246  02AE  3F01               	moviw [1]fsr0
 11247  02AF  00E2               	movwf	??_vfpfcnvrt+1
 11248  02B0  0861               	movf	??_vfpfcnvrt,w
 11249  02B1  0021               	movlb	1	; select bank1
 11250  02B2  00A0               	movwf	vfpfcnvrt@ll^(0+128)
 11251  02B3  0020               	movlb	0	; select bank0
 11252  02B4  0862               	movf	??_vfpfcnvrt+1,w
 11253  02B5  0021               	movlb	1	; select bank1
 11254  02B6  00A1               	movwf	(vfpfcnvrt@ll+1)^(0+128)
 11255  02B7  0D89               	rlf	9,f
 11256  02B8  3B89               	subwfb	9,f
 11257  02B9  0989               	comf	9,f
 11258  02BA  00A2               	movwf	(vfpfcnvrt@ll+2)^(0+128)
 11259  02BB  00A3               	movwf	(vfpfcnvrt@ll+3)^(0+128)
 11260  02BC  00A4               	movwf	(vfpfcnvrt@ll+4)^(0+128)
 11261  02BD  00A5               	movwf	(vfpfcnvrt@ll+5)^(0+128)
 11262  02BE  00A6               	movwf	(vfpfcnvrt@ll+6)^(0+128)
 11263  02BF  00A7               	movwf	(vfpfcnvrt@ll+7)^(0+128)
 11264                           
 11265                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 11266  02C0  0820               	movf	vfpfcnvrt@ll^(0+128),w
 11267  02C1  0020               	movlb	0	; select bank0
 11268  02C2  00C1               	movwf	dtoa@d
 11269  02C3  0021               	movlb	1	; select bank1
 11270  02C4  0821               	movf	(vfpfcnvrt@ll+1)^(0+128),w
 11271  02C5  0020               	movlb	0	; select bank0
 11272  02C6  00C2               	movwf	dtoa@d+1
 11273  02C7  0021               	movlb	1	; select bank1
 11274  02C8  0822               	movf	(vfpfcnvrt@ll+2)^(0+128),w
 11275  02C9  0020               	movlb	0	; select bank0
 11276  02CA  00C3               	movwf	dtoa@d+2
 11277  02CB  0021               	movlb	1	; select bank1
 11278  02CC  0823               	movf	(vfpfcnvrt@ll+3)^(0+128),w
 11279  02CD  0020               	movlb	0	; select bank0
 11280  02CE  00C4               	movwf	dtoa@d+3
 11281  02CF  0021               	movlb	1	; select bank1
 11282  02D0  0824               	movf	(vfpfcnvrt@ll+4)^(0+128),w
 11283  02D1  0020               	movlb	0	; select bank0
 11284  02D2  00C5               	movwf	dtoa@d+4
 11285  02D3  0021               	movlb	1	; select bank1
 11286  02D4  0825               	movf	(vfpfcnvrt@ll+5)^(0+128),w
 11287  02D5  0020               	movlb	0	; select bank0
 11288  02D6  00C6               	movwf	dtoa@d+5
 11289  02D7  0021               	movlb	1	; select bank1
 11290  02D8  0826               	movf	(vfpfcnvrt@ll+6)^(0+128),w
 11291  02D9  0020               	movlb	0	; select bank0
 11292  02DA  00C7               	movwf	dtoa@d+6
 11293  02DB  0021               	movlb	1	; select bank1
 11294  02DC  0827               	movf	(vfpfcnvrt@ll+7)^(0+128),w
 11295  02DD  0020               	movlb	0	; select bank0
 11296  02DE  00C8               	movwf	dtoa@d+7
 11297  02DF  0021               	movlb	1	; select bank1
 11298  02E0  0828               	movf	vfpfcnvrt@fp^(0+128),w
 11299  02E1  3183  23C7         	fcall	_dtoa
 11300  02E3  0020               	movlb	0	; select bank0
 11301  02E4  0842               	movf	?_dtoa+1,w
 11302  02E5  00E0               	movwf	?_vfpfcnvrt+1
 11303  02E6  0841               	movf	?_dtoa,w
 11304  02E7  00DF               	movwf	?_vfpfcnvrt
 11305  02E8  0008               	return
 11306  02E9                     l5936:	
 11307                           
 11308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 835:       
      +                            if (!strncmp(*fmt, "ld", ((sizeof("ld")/sizeof("ld"[0]))-1)) || !strncmp(*fmt, "li", (
      +                          (sizeof("li")/sizeof("li"[0]))-1))) {
 11309  02E9  085F               	movf	vfpfcnvrt@fmt,w
 11310  02EA  0086               	movwf	6
 11311  02EB  0187               	clrf	7
 11312  02EC  3F40               	moviw [0]fsr1
 11313  02ED  00A5               	movwf	strncmp@_l
 11314  02EE  3F41               	moviw [1]fsr1
 11315  02EF  00A6               	movwf	strncmp@_l+1
 11316  02F0  306E               	movlw	low (STR_9| (0+32768))
 11317  02F1  00A7               	movwf	strncmp@_r
 11318  02F2  3098               	movlw	high (STR_9| (0+32768))
 11319  02F3  00A8               	movwf	strncmp@_r+1
 11320  02F4  3002               	movlw	2
 11321  02F5  00A9               	movwf	strncmp@n
 11322  02F6  3000               	movlw	0
 11323  02F7  00AA               	movwf	strncmp@n+1
 11324  02F8  318A  222F  3182   	fcall	_strncmp
 11325  02FB  0020               	movlb	0	; select bank0
 11326  02FC  0825               	movf	?_strncmp,w
 11327  02FD  0426               	iorwf	?_strncmp+1,w
 11328  02FE  1903               	btfsc	3,2
 11329  02FF  2B17               	goto	l5940
 11330  0300  085F               	movf	vfpfcnvrt@fmt,w
 11331  0301  0086               	movwf	6
 11332  0302  0187               	clrf	7
 11333  0303  3F40               	moviw [0]fsr1
 11334  0304  00A5               	movwf	strncmp@_l
 11335  0305  3F41               	moviw [1]fsr1
 11336  0306  00A6               	movwf	strncmp@_l+1
 11337  0307  3071               	movlw	low (STR_13| (0+32768))
 11338  0308  00A7               	movwf	strncmp@_r
 11339  0309  3098               	movlw	high (STR_13| (0+32768))
 11340  030A  00A8               	movwf	strncmp@_r+1
 11341  030B  3002               	movlw	2
 11342  030C  00A9               	movwf	strncmp@n
 11343  030D  3000               	movlw	0
 11344  030E  00AA               	movwf	strncmp@n+1
 11345  030F  318A  222F  3182   	fcall	_strncmp
 11346  0312  0020               	movlb	0	; select bank0
 11347  0313  0825               	movf	?_strncmp,w
 11348  0314  0426               	iorwf	?_strncmp+1,w
 11349  0315  1D03               	btfss	3,2
 11350  0316  2B6E               	goto	l5948
 11351  0317                     l5940:	
 11352                           
 11353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 836: ;C:\Pr
      +                          ogram Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 838:             
      +                          *fmt += ((sizeof("ld")/sizeof("ld"[0]))-1);
 11354  0317  085F               	movf	vfpfcnvrt@fmt,w
 11355  0318  0086               	movwf	6
 11356  0319  0187               	clrf	7
 11357  031A  3002               	movlw	2
 11358  031B  0781               	addwf	1,f
 11359  031C  3141               	addfsr 1,1
 11360  031D  1803               	skipnc
 11361  031E  0A81               	incf	1,f
 11362                           
 11363                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 839:       
      +                                ll = (long long)(*(long *)__va_arg(*(long **)ap, (long)0));
 11364  031F  0860               	movf	vfpfcnvrt@ap,w
 11365  0320  0086               	movwf	6
 11366  0321  0187               	clrf	7
 11367  0322  0801               	movf	1,w
 11368  0323  0084               	movwf	4
 11369  0324  0185               	clrf	5
 11370  0325  3004               	movlw	4
 11371  0326  0781               	addwf	1,f
 11372  0327  3F00               	moviw [0]fsr0
 11373  0328  00E1               	movwf	??_vfpfcnvrt
 11374  0329  3F01               	moviw [1]fsr0
 11375  032A  00E2               	movwf	??_vfpfcnvrt+1
 11376  032B  3F02               	moviw [2]fsr0
 11377  032C  00E3               	movwf	??_vfpfcnvrt+2
 11378  032D  3F03               	moviw [3]fsr0
 11379  032E  00E4               	movwf	??_vfpfcnvrt+3
 11380  032F  0861               	movf	??_vfpfcnvrt,w
 11381  0330  0021               	movlb	1	; select bank1
 11382  0331  00A0               	movwf	vfpfcnvrt@ll^(0+128)
 11383  0332  0020               	movlb	0	; select bank0
 11384  0333  0862               	movf	??_vfpfcnvrt+1,w
 11385  0334  0021               	movlb	1	; select bank1
 11386  0335  00A1               	movwf	(vfpfcnvrt@ll+1)^(0+128)
 11387  0336  0020               	movlb	0	; select bank0
 11388  0337  0863               	movf	??_vfpfcnvrt+2,w
 11389  0338  0021               	movlb	1	; select bank1
 11390  0339  00A2               	movwf	(vfpfcnvrt@ll+2)^(0+128)
 11391  033A  0020               	movlb	0	; select bank0
 11392  033B  0864               	movf	??_vfpfcnvrt+3,w
 11393  033C  0021               	movlb	1	; select bank1
 11394  033D  00A3               	movwf	(vfpfcnvrt@ll+3)^(0+128)
 11395  033E  3000               	movlw	0
 11396  033F  1BA3               	btfsc	(vfpfcnvrt@ll+3)^(0+128),7
 11397  0340  30FF               	movlw	255
 11398  0341  00A4               	movwf	(vfpfcnvrt@ll+4)^(0+128)
 11399  0342  00A5               	movwf	(vfpfcnvrt@ll+5)^(0+128)
 11400  0343  00A6               	movwf	(vfpfcnvrt@ll+6)^(0+128)
 11401  0344  00A7               	movwf	(vfpfcnvrt@ll+7)^(0+128)
 11402                           
 11403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 841:       
      +                                return dtoa(fp, ll);
 11404  0345  0820               	movf	vfpfcnvrt@ll^(0+128),w
 11405  0346  0020               	movlb	0	; select bank0
 11406  0347  00C1               	movwf	dtoa@d
 11407  0348  0021               	movlb	1	; select bank1
 11408  0349  0821               	movf	(vfpfcnvrt@ll+1)^(0+128),w
 11409  034A  0020               	movlb	0	; select bank0
 11410  034B  00C2               	movwf	dtoa@d+1
 11411  034C  0021               	movlb	1	; select bank1
 11412  034D  0822               	movf	(vfpfcnvrt@ll+2)^(0+128),w
 11413  034E  0020               	movlb	0	; select bank0
 11414  034F  00C3               	movwf	dtoa@d+2
 11415  0350  0021               	movlb	1	; select bank1
 11416  0351  0823               	movf	(vfpfcnvrt@ll+3)^(0+128),w
 11417  0352  0020               	movlb	0	; select bank0
 11418  0353  00C4               	movwf	dtoa@d+3
 11419  0354  0021               	movlb	1	; select bank1
 11420  0355  0824               	movf	(vfpfcnvrt@ll+4)^(0+128),w
 11421  0356  0020               	movlb	0	; select bank0
 11422  0357  00C5               	movwf	dtoa@d+4
 11423  0358  0021               	movlb	1	; select bank1
 11424  0359  0825               	movf	(vfpfcnvrt@ll+5)^(0+128),w
 11425  035A  0020               	movlb	0	; select bank0
 11426  035B  00C6               	movwf	dtoa@d+5
 11427  035C  0021               	movlb	1	; select bank1
 11428  035D  0826               	movf	(vfpfcnvrt@ll+6)^(0+128),w
 11429  035E  0020               	movlb	0	; select bank0
 11430  035F  00C7               	movwf	dtoa@d+6
 11431  0360  0021               	movlb	1	; select bank1
 11432  0361  0827               	movf	(vfpfcnvrt@ll+7)^(0+128),w
 11433  0362  0020               	movlb	0	; select bank0
 11434  0363  00C8               	movwf	dtoa@d+7
 11435  0364  0021               	movlb	1	; select bank1
 11436  0365  0828               	movf	vfpfcnvrt@fp^(0+128),w
 11437  0366  3183  23C7         	fcall	_dtoa
 11438  0368  0020               	movlb	0	; select bank0
 11439  0369  0842               	movf	?_dtoa+1,w
 11440  036A  00E0               	movwf	?_vfpfcnvrt+1
 11441  036B  0841               	movf	?_dtoa,w
 11442  036C  00DF               	movwf	?_vfpfcnvrt
 11443  036D  0008               	return
 11444  036E                     l5948:	
 11445                           
 11446                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 11447  036E  085F               	movf	vfpfcnvrt@fmt,w
 11448  036F  0086               	movwf	6
 11449  0370  0187               	clrf	7
 11450  0371  3F40               	moviw [0]fsr1
 11451  0372  00E1               	movwf	??_vfpfcnvrt
 11452  0373  3F41               	moviw [1]fsr1
 11453  0374  00E2               	movwf	??_vfpfcnvrt+1
 11454  0375  0861               	movf	??_vfpfcnvrt,w
 11455  0376  0084               	movwf	4
 11456  0377  0862               	movf	??_vfpfcnvrt+1,w
 11457  0378  0085               	movwf	5
 11458  0379  0012               	moviw fsr0++
 11459  037A  3A25               	xorlw	37
 11460  037B  1D03               	btfss	3,2
 11461  037C  2B97               	goto	l5958
 11462                           
 11463                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 11464  037D  085F               	movf	vfpfcnvrt@fmt,w
 11465  037E  0086               	movwf	6
 11466  037F  0187               	clrf	7
 11467  0380  3001               	movlw	1
 11468  0381  0781               	addwf	1,f
 11469  0382  3141               	addfsr 1,1
 11470  0383  1803               	skipnc
 11471  0384  0A81               	incf	1,f
 11472                           
 11473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 11474  0385  3025               	movlw	37
 11475  0386  00A8               	movwf	fputc@c
 11476  0387  3000               	movlw	0
 11477  0388  00A9               	movwf	fputc@c+1
 11478  0389  0021               	movlb	1	; select bank1
 11479  038A  0828               	movf	vfpfcnvrt@fp^(0+128),w
 11480  038B  0020               	movlb	0	; select bank0
 11481  038C  00E1               	movwf	??_vfpfcnvrt
 11482  038D  0861               	movf	??_vfpfcnvrt,w
 11483  038E  00AA               	movwf	fputc@fp
 11484  038F  3188  2008         	fcall	_fputc
 11485  0391                     l5954:	
 11486                           
 11487                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 11488  0391  3001               	movlw	1
 11489  0392  0020               	movlb	0	; select bank0
 11490  0393  00DF               	movwf	?_vfpfcnvrt
 11491  0394  3000               	movlw	0
 11492  0395  00E0               	movwf	?_vfpfcnvrt+1
 11493  0396  0008               	return
 11494  0397                     l5958:	
 11495                           
 11496                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 11497  0397  085F               	movf	vfpfcnvrt@fmt,w
 11498  0398  0086               	movwf	6
 11499  0399  0187               	clrf	7
 11500  039A  3001               	movlw	1
 11501  039B  0781               	addwf	1,f
 11502  039C  3141               	addfsr 1,1
 11503  039D  1803               	skipnc
 11504  039E  0A81               	incf	1,f
 11505                           
 11506                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 11507  039F  01DF               	clrf	?_vfpfcnvrt
 11508  03A0  01E0               	clrf	?_vfpfcnvrt+1
 11509  03A1  0008               	return
 11510  03A2                     l5964:	
 11511                           
 11512                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 11513  03A2  085F               	movf	vfpfcnvrt@fmt,w
 11514  03A3  0086               	movwf	6
 11515  03A4  0187               	clrf	7
 11516  03A5  3F40               	moviw [0]fsr1
 11517  03A6  00E1               	movwf	??_vfpfcnvrt
 11518  03A7  3F41               	moviw [1]fsr1
 11519  03A8  00E2               	movwf	??_vfpfcnvrt+1
 11520  03A9  0861               	movf	??_vfpfcnvrt,w
 11521  03AA  0084               	movwf	4
 11522  03AB  0862               	movf	??_vfpfcnvrt+1,w
 11523  03AC  0085               	movwf	5
 11524  03AD  0800               	movf	0,w	;code access
 11525  03AE  00E3               	movwf	??_vfpfcnvrt+2
 11526  03AF  01E4               	clrf	??_vfpfcnvrt+3
 11527  03B0  0863               	movf	??_vfpfcnvrt+2,w
 11528  03B1  00A8               	movwf	fputc@c
 11529  03B2  0864               	movf	??_vfpfcnvrt+3,w
 11530  03B3  00A9               	movwf	fputc@c+1
 11531  03B4  0021               	movlb	1	; select bank1
 11532  03B5  0828               	movf	vfpfcnvrt@fp^(0+128),w
 11533  03B6  0020               	movlb	0	; select bank0
 11534  03B7  00E5               	movwf	??_vfpfcnvrt+4
 11535  03B8  0865               	movf	??_vfpfcnvrt+4,w
 11536  03B9  00AA               	movwf	fputc@fp
 11537  03BA  3188  2008  3182   	fcall	_fputc
 11538                           
 11539                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 11540  03BD  0020               	movlb	0	; select bank0
 11541  03BE  085F               	movf	vfpfcnvrt@fmt,w
 11542  03BF  0086               	movwf	6
 11543  03C0  0187               	clrf	7
 11544  03C1  3001               	movlw	1
 11545  03C2  0781               	addwf	1,f
 11546  03C3  3141               	addfsr 1,1
 11547  03C4  1803               	skipnc
 11548  03C5  0A81               	incf	1,f
 11549  03C6  2B91               	goto	l5954
 11550  03C7                     __end_of_vfpfcnvrt:	
 11551                           
 11552                           	psect	text69
 11553  0A2F                     __ptext69:	
 11554 ;; *************** function _strncmp *****************
 11555 ;; Defined at:
 11556 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strncmp.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;  _l              2    5[BANK0 ] PTR const unsigned char 
 11559 ;;		 -> STR_8(6), STR_7(8), STR_6(5), STR_5(11), 
 11560 ;;		 -> STR_4(6), STR_3(7), STR_2(5), STR_1(5), 
 11561 ;;  _r              2    7[BANK0 ] PTR const unsigned char 
 11562 ;;		 -> STR_15(3), STR_11(3), 
 11563 ;;  n               2    9[BANK0 ] unsigned int 
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;  r               2   14[BANK0 ] PTR const unsigned char 
 11566 ;;		 -> STR_15(3), STR_11(3), 
 11567 ;;  l               2   12[BANK0 ] PTR const unsigned char 
 11568 ;;		 -> STR_8(6), STR_7(8), STR_6(5), STR_5(11), 
 11569 ;;		 -> STR_4(6), STR_3(7), STR_2(5), STR_1(5), 
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  2    5[BANK0 ] int 
 11572 ;; Registers used:
 11573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11579 ;;      Params:         0       6       0       0       0       0       0       0
 11580 ;;      Locals:         0       4       0       0       0       0       0       0
 11581 ;;      Temps:          0       1       0       0       0       0       0       0
 11582 ;;      Totals:         0      11       0       0       0       0       0       0
 11583 ;;Total ram usage:       11 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; Hardware stack levels required when called:    7
 11586 ;; This function calls:
 11587 ;;		Nothing
 11588 ;; This function is called by:
 11589 ;;		_vfpfcnvrt
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           
 11594                           ;psect for function _strncmp
 11595  0A2F                     _strncmp:	
 11596                           
 11597                           ;incstack = 0
 11598                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
 11599  0A2F  0020               	movlb	0	; select bank0
 11600  0A30  0826               	movf	strncmp@_l+1,w
 11601  0A31  00AD               	movwf	strncmp@l+1
 11602  0A32  0825               	movf	strncmp@_l,w
 11603  0A33  00AC               	movwf	strncmp@l
 11604  0A34  0828               	movf	strncmp@_r+1,w
 11605  0A35  00AF               	movwf	strncmp@r+1
 11606  0A36  0827               	movf	strncmp@_r,w
 11607  0A37  00AE               	movwf	strncmp@r
 11608  0A38  3001               	movlw	1
 11609  0A39  02A9               	subwf	strncmp@n,f
 11610  0A3A  3000               	movlw	0
 11611  0A3B  3BAA               	subwfb	strncmp@n+1,f
 11612  0A3C  0A29               	incf	strncmp@n,w
 11613  0A3D  1D03               	skipz
 11614  0A3E  2A6A               	goto	l5866
 11615  0A3F  0A2A               	incf	strncmp@n+1,w
 11616  0A40  1D03               	btfss	3,2
 11617  0A41  2A6A               	goto	l5866
 11618  0A42  01A5               	clrf	?_strncmp
 11619  0A43  01A6               	clrf	?_strncmp+1
 11620  0A44  0008               	return
 11621  0A45                     l5868:	
 11622  0A45  082E               	movf	strncmp@r,w
 11623  0A46  0084               	movwf	4
 11624  0A47  082F               	movf	strncmp@r+1,w
 11625  0A48  0085               	movwf	5
 11626  0A49  0012               	moviw fsr0++
 11627  0A4A  1903               	btfsc	3,2
 11628  0A4B  2A71               	goto	l5874
 11629  0A4C  0829               	movf	strncmp@n,w
 11630  0A4D  042A               	iorwf	strncmp@n+1,w
 11631  0A4E  1903               	btfsc	3,2
 11632  0A4F  2A71               	goto	l5874
 11633  0A50  082E               	movf	strncmp@r,w
 11634  0A51  0084               	movwf	4
 11635  0A52  082F               	movf	strncmp@r+1,w
 11636  0A53  0085               	movwf	5
 11637  0A54  0800               	movf	0,w	;code access
 11638  0A55  00AB               	movwf	??_strncmp
 11639  0A56  082C               	movf	strncmp@l,w
 11640  0A57  0084               	movwf	4
 11641  0A58  082D               	movf	strncmp@l+1,w
 11642  0A59  0085               	movwf	5
 11643  0A5A  0800               	movf	0,w	;code access
 11644  0A5B  062B               	xorwf	??_strncmp,w
 11645  0A5C  1D03               	btfss	3,2
 11646  0A5D  2A71               	goto	l5874
 11647  0A5E  3001               	movlw	1
 11648  0A5F  07AC               	addwf	strncmp@l,f
 11649  0A60  3000               	movlw	0
 11650  0A61  3DAD               	addwfc	strncmp@l+1,f
 11651  0A62  3001               	movlw	1
 11652  0A63  07AE               	addwf	strncmp@r,f
 11653  0A64  3000               	movlw	0
 11654  0A65  3DAF               	addwfc	strncmp@r+1,f
 11655  0A66  3001               	movlw	1
 11656  0A67  02A9               	subwf	strncmp@n,f
 11657  0A68  3000               	movlw	0
 11658  0A69  3BAA               	subwfb	strncmp@n+1,f
 11659  0A6A                     l5866:	
 11660  0A6A  082C               	movf	strncmp@l,w
 11661  0A6B  0084               	movwf	4
 11662  0A6C  082D               	movf	strncmp@l+1,w
 11663  0A6D  0085               	movwf	5
 11664  0A6E  0012               	moviw fsr0++
 11665  0A6F  1D03               	btfss	3,2
 11666  0A70  2A45               	goto	l5868
 11667  0A71                     l5874:	
 11668  0A71  082C               	movf	strncmp@l,w
 11669  0A72  0084               	movwf	4
 11670  0A73  082D               	movf	strncmp@l+1,w
 11671  0A74  0085               	movwf	5
 11672  0A75  0800               	movf	0,w	;code access
 11673  0A76  00AB               	movwf	??_strncmp
 11674  0A77  082E               	movf	strncmp@r,w
 11675  0A78  0084               	movwf	4
 11676  0A79  082F               	movf	strncmp@r+1,w
 11677  0A7A  0085               	movwf	5
 11678  0A7B  0800               	movf	0,w	;code access
 11679  0A7C  022B               	subwf	??_strncmp,w
 11680  0A7D  00A5               	movwf	?_strncmp
 11681  0A7E  01A6               	clrf	?_strncmp+1
 11682  0A7F  1C03               	skipc
 11683  0A80  03A6               	decf	?_strncmp+1,f
 11684  0A81  0008               	return
 11685  0A82                     __end_of_strncmp:	
 11686                           
 11687                           	psect	text70
 11688  03C7                     __ptext70:	
 11689 ;; *************** function _dtoa *****************
 11690 ;; Defined at:
 11691 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11692 ;; Parameters:    Size  Location     Type
 11693 ;;  fp              1    wreg     PTR struct _IO_FILE
 11694 ;;		 -> NULL(0), 
 11695 ;;  d               8   33[BANK0 ] long long 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;  fp              1   48[BANK0 ] PTR struct _IO_FILE
 11698 ;;		 -> NULL(0), 
 11699 ;;  n               8   53[BANK0 ] long long 
 11700 ;;  i               2   61[BANK0 ] int 
 11701 ;;  s               2   51[BANK0 ] int 
 11702 ;;  w               2   49[BANK0 ] int 
 11703 ;;  p               2   46[BANK0 ] int 
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  2   33[BANK0 ] int 
 11706 ;; Registers used:
 11707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/0
 11710 ;;		On exit  : 0/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11713 ;;      Params:         0       8       0       0       0       0       0       0
 11714 ;;      Locals:         0      19       0       0       0       0       0       0
 11715 ;;      Temps:          0       3       0       0       0       0       0       0
 11716 ;;      Totals:         0      30       0       0       0       0       0       0
 11717 ;;Total ram usage:       30 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:   12
 11720 ;; This function calls:
 11721 ;;		___aodiv
 11722 ;;		___aomod
 11723 ;;		_abs
 11724 ;;		_pad
 11725 ;; This function is called by:
 11726 ;;		_vfpfcnvrt
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           
 11731                           ;psect for function _dtoa
 11732  03C7                     _dtoa:	
 11733                           
 11734                           ;incstack = 0
 11735 ;; hardware stack exceeded
 11736                           ; Regs used in _dtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11737                           ;dtoa@fp stored from wreg
 11738  03C7  0020               	movlb	0	; select bank0
 11739  03C8  00D0               	movwf	dtoa@fp
 11740                           
 11741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 11742  03C9  0841               	movf	dtoa@d,w
 11743  03CA  00D5               	movwf	dtoa@n
 11744  03CB  0842               	movf	dtoa@d+1,w
 11745  03CC  00D6               	movwf	dtoa@n+1
 11746  03CD  0843               	movf	dtoa@d+2,w
 11747  03CE  00D7               	movwf	dtoa@n+2
 11748  03CF  0844               	movf	dtoa@d+3,w
 11749  03D0  00D8               	movwf	dtoa@n+3
 11750  03D1  0845               	movf	dtoa@d+4,w
 11751  03D2  00D9               	movwf	dtoa@n+4
 11752  03D3  0846               	movf	dtoa@d+5,w
 11753  03D4  00DA               	movwf	dtoa@n+5
 11754  03D5  0847               	movf	dtoa@d+6,w
 11755  03D6  00DB               	movwf	dtoa@n+6
 11756  03D7  0848               	movf	dtoa@d+7,w
 11757  03D8  00DC               	movwf	dtoa@n+7
 11758                           
 11759                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 11760  03D9  3055               	movlw	low dtoa@n
 11761  03DA  0086               	movwf	6
 11762  03DB  3000               	movlw	high dtoa@n
 11763  03DC  0087               	movwf	7
 11764  03DD  3F47               	moviw [7]fsr1
 11765  03DE  00C9               	movwf	??_dtoa
 11766  03DF  1FC9               	btfss	??_dtoa,7
 11767  03E0  2BE3               	goto	u5750
 11768  03E1  3001               	movlw	1
 11769  03E2  2BE4               	goto	u5760
 11770  03E3                     u5750:	
 11771  03E3  3000               	movlw	0
 11772  03E4                     u5760:	
 11773  03E4  0020               	movlb	0	; select bank0
 11774  03E5  00CA               	movwf	??_dtoa+1
 11775  03E6  01CB               	clrf	??_dtoa+2
 11776  03E7  084A               	movf	??_dtoa+1,w
 11777  03E8  00D3               	movwf	dtoa@s
 11778  03E9  084B               	movf	??_dtoa+2,w
 11779  03EA  00D4               	movwf	dtoa@s+1
 11780                           
 11781                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 11782  03EB  0853               	movf	dtoa@s,w
 11783  03EC  0454               	iorwf	dtoa@s+1,w
 11784  03ED  1903               	btfsc	3,2
 11785  03EE  2C0D               	goto	l1307
 11786                           
 11787                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 11788  03EF  09D5               	comf	dtoa@n,f
 11789  03F0  09D6               	comf	dtoa@n+1,f
 11790  03F1  09D7               	comf	dtoa@n+2,f
 11791  03F2  09D8               	comf	dtoa@n+3,f
 11792  03F3  09D9               	comf	dtoa@n+4,f
 11793  03F4  09DA               	comf	dtoa@n+5,f
 11794  03F5  09DB               	comf	dtoa@n+6,f
 11795  03F6  09DC               	comf	dtoa@n+7,f
 11796  03F7  0AD5               	incf	dtoa@n,f
 11797  03F8  1D03               	skipz
 11798  03F9  2C0D               	goto	l1307
 11799  03FA  0AD6               	incf	dtoa@n+1,f
 11800  03FB  1D03               	skipz
 11801  03FC  2C0D               	goto	l1307
 11802  03FD  0AD7               	incf	dtoa@n+2,f
 11803  03FE  1D03               	skipz
 11804  03FF  2C0D               	goto	l1307
 11805  0400  0AD8               	incf	dtoa@n+3,f
 11806  0401  1D03               	skipz
 11807  0402  2C0D               	goto	l1307
 11808  0403  0AD9               	incf	dtoa@n+4,f
 11809  0404  1D03               	skipz
 11810  0405  2C0D               	goto	l1307
 11811  0406  0ADA               	incf	dtoa@n+5,f
 11812  0407  1D03               	skipz
 11813  0408  2C0D               	goto	l1307
 11814  0409  0ADB               	incf	dtoa@n+6,f
 11815  040A  1D03               	skipz
 11816  040B  2C0D               	goto	l1307
 11817  040C  0ADC               	incf	dtoa@n+7,f
 11818  040D                     l1307:	
 11819                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
 11820                           
 11821                           
 11822                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 11823  040D  0021               	movlb	1	; select bank1
 11824  040E  1BD6               	btfsc	(_prec+1)^(0+128),7
 11825  040F  2C14               	goto	l1308
 11826                           
 11827                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 11828  0410  30FD               	movlw	253
 11829  0411  05D7               	andwf	_flags^(0+128),f
 11830  0412  30FF               	movlw	255
 11831  0413  05D8               	andwf	(_flags+1)^(0+128),f
 11832  0414                     l1308:	
 11833                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
 11834                           
 11835                           
 11836                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 11837  0414  0856               	movf	(_prec+1)^(0+128),w
 11838  0415  3A80               	xorlw	128
 11839  0416  0020               	movlb	0	; select bank0
 11840  0417  00C9               	movwf	??_dtoa
 11841  0418  3080               	movlw	128
 11842  0419  0249               	subwf	??_dtoa,w
 11843  041A  1D03               	skipz
 11844  041B  2C1F               	goto	u5805
 11845  041C  3001               	movlw	1
 11846  041D  0021               	movlb	1	; select bank1
 11847  041E  0255               	subwf	_prec^(0+128),w
 11848  041F                     u5805:	
 11849  041F  1803               	skipnc
 11850  0420  2C27               	goto	l5810
 11851  0421  3001               	movlw	1
 11852  0422  0020               	movlb	0	; select bank0
 11853  0423  00CE               	movwf	dtoa@p
 11854  0424  3000               	movlw	0
 11855  0425  00CF               	movwf	dtoa@p+1
 11856  0426  2C2F               	goto	l1312
 11857  0427                     l5810:	
 11858  0427  0021               	movlb	1	; select bank1
 11859  0428  0856               	movf	(_prec+1)^(0+128),w
 11860  0429  0020               	movlb	0	; select bank0
 11861  042A  00CF               	movwf	dtoa@p+1
 11862  042B  0021               	movlb	1	; select bank1
 11863  042C  0855               	movf	_prec^(0+128),w
 11864  042D  0020               	movlb	0	; select bank0
 11865  042E  00CE               	movwf	dtoa@p
 11866  042F                     l1312:	
 11867                           
 11868                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 11869  042F  0021               	movlb	1	; select bank1
 11870  0430  0854               	movf	(_width+1)^(0+128),w
 11871  0431  0020               	movlb	0	; select bank0
 11872  0432  00D2               	movwf	dtoa@w+1
 11873  0433  0021               	movlb	1	; select bank1
 11874  0434  0853               	movf	_width^(0+128),w
 11875  0435  0020               	movlb	0	; select bank0
 11876  0436  00D1               	movwf	dtoa@w
 11877                           
 11878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 11879  0437  0853               	movf	dtoa@s,w
 11880  0438  0454               	iorwf	dtoa@s+1,w
 11881  0439  1D03               	btfss	3,2
 11882  043A  2C3E               	goto	l5816
 11883  043B  0021               	movlb	1	; select bank1
 11884  043C  1D57               	btfss	_flags^(0+128),2
 11885  043D  2C43               	goto	l1313
 11886  043E                     l5816:	
 11887                           
 11888                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 11889  043E  30FF               	movlw	255
 11890  043F  0020               	movlb	0	; select bank0
 11891  0440  07D1               	addwf	dtoa@w,f
 11892  0441  30FF               	movlw	255
 11893  0442  3DD2               	addwfc	dtoa@w+1,f
 11894  0443                     l1313:	
 11895                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
 11896                           
 11897                           
 11898                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 11899  0443  301F               	movlw	31
 11900  0444  0020               	movlb	0	; select bank0
 11901  0445  00DD               	movwf	dtoa@i
 11902  0446  3000               	movlw	0
 11903  0447  00DE               	movwf	dtoa@i+1
 11904                           
 11905                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 11906  0448  0024               	movlb	4	; select bank4
 11907  0449  01BF               	clrf	(_dbuf^(0+512)+31)
 11908                           
 11909                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 11910  044A  2CD9               	goto	l1316
 11911  044B                     l5830:	
 11912  044B  0020               	movlb	0	; select bank0
 11913  044C  0855               	movf	dtoa@n,w
 11914  044D  0456               	iorwf	dtoa@n+1,w
 11915  044E  0457               	iorwf	dtoa@n+2,w
 11916  044F  0458               	iorwf	dtoa@n+3,w
 11917  0450  0459               	iorwf	dtoa@n+4,w
 11918  0451  045A               	iorwf	dtoa@n+5,w
 11919  0452  045B               	iorwf	dtoa@n+6,w
 11920  0453  045C               	iorwf	dtoa@n+7,w
 11921  0454  1D03               	skipz
 11922  0455  2C70               	goto	l5820
 11923  0456  084F               	movf	dtoa@p+1,w
 11924  0457  3A80               	xorlw	128
 11925  0458  00C9               	movwf	??_dtoa
 11926  0459  3080               	movlw	128
 11927  045A  0249               	subwf	??_dtoa,w
 11928  045B  1D03               	skipz
 11929  045C  2C5F               	goto	u5855
 11930  045D  3001               	movlw	1
 11931  045E  024E               	subwf	dtoa@p,w
 11932  045F                     u5855:	
 11933  045F  1803               	skipnc
 11934  0460  2C70               	goto	l5820
 11935  0461  0020               	movlb	0	; select bank0
 11936  0462  0852               	movf	dtoa@w+1,w
 11937  0463  3A80               	xorlw	128
 11938  0464  00C9               	movwf	??_dtoa
 11939  0465  3080               	movlw	128
 11940  0466  0249               	subwf	??_dtoa,w
 11941  0467  1D03               	skipz
 11942  0468  2C6B               	goto	u5865
 11943  0469  3001               	movlw	1
 11944  046A  0251               	subwf	dtoa@w,w
 11945  046B                     u5865:	
 11946  046B  1C03               	skipc
 11947  046C  2CE5               	goto	l5838
 11948  046D  0021               	movlb	1	; select bank1
 11949  046E  1CD7               	btfss	_flags^(0+128),1
 11950  046F  2CE5               	goto	l5838
 11951  0470                     l5820:	
 11952                           
 11953                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 11954  0470  30FF               	movlw	255
 11955  0471  0020               	movlb	0	; select bank0
 11956  0472  07DD               	addwf	dtoa@i,f
 11957  0473  30FF               	movlw	255
 11958  0474  3DDE               	addwfc	dtoa@i+1,f
 11959                           
 11960                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 11961  0475  300A               	movlw	10
 11962  0476  00A5               	movwf	___aomod@divisor
 11963  0477  01A6               	clrf	___aomod@divisor+1
 11964  0478  01A7               	clrf	___aomod@divisor+2
 11965  0479  01A8               	clrf	___aomod@divisor+3
 11966  047A  01A9               	clrf	___aomod@divisor+4
 11967  047B  01AA               	clrf	___aomod@divisor+5
 11968  047C  01AB               	clrf	___aomod@divisor+6
 11969  047D  01AC               	clrf	___aomod@divisor+7
 11970  047E  0855               	movf	dtoa@n,w
 11971  047F  00AD               	movwf	___aomod@dividend
 11972  0480  0856               	movf	dtoa@n+1,w
 11973  0481  00AE               	movwf	___aomod@dividend+1
 11974  0482  0857               	movf	dtoa@n+2,w
 11975  0483  00AF               	movwf	___aomod@dividend+2
 11976  0484  0858               	movf	dtoa@n+3,w
 11977  0485  00B0               	movwf	___aomod@dividend+3
 11978  0486  0859               	movf	dtoa@n+4,w
 11979  0487  00B1               	movwf	___aomod@dividend+4
 11980  0488  085A               	movf	dtoa@n+5,w
 11981  0489  00B2               	movwf	___aomod@dividend+5
 11982  048A  085B               	movf	dtoa@n+6,w
 11983  048B  00B3               	movwf	___aomod@dividend+6
 11984  048C  085C               	movf	dtoa@n+7,w
 11985  048D  00B4               	movwf	___aomod@dividend+7
 11986  048E  3186  260F  3183   	fcall	___aomod
 11987  0491  0020               	movlb	0	; select bank0
 11988  0492  0826               	movf	?___aomod+1,w
 11989  0493  00B9               	movwf	abs@a+1
 11990  0494  0825               	movf	?___aomod,w
 11991  0495  00B8               	movwf	abs@a
 11992  0496  3194  2475  3183   	fcall	_abs
 11993  0499  0020               	movlb	0	; select bank0
 11994  049A  0838               	movf	?_abs,w
 11995  049B  3E30               	addlw	48
 11996  049C  00C9               	movwf	??_dtoa
 11997  049D  085D               	movf	dtoa@i,w
 11998  049E  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
 11999  049F  0086               	movwf	6
 12000  04A0  3002               	movlw	2	; select bank4/5
 12001  04A1  0087               	movwf	7
 12002  04A2  0849               	movf	??_dtoa,w
 12003  04A3  0081               	movwf	1
 12004                           
 12005                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 12006  04A4  30FF               	movlw	255
 12007  04A5  07CE               	addwf	dtoa@p,f
 12008  04A6  30FF               	movlw	255
 12009  04A7  3DCF               	addwfc	dtoa@p+1,f
 12010                           
 12011                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 12012  04A8  30FF               	movlw	255
 12013  04A9  07D1               	addwf	dtoa@w,f
 12014  04AA  30FF               	movlw	255
 12015  04AB  3DD2               	addwfc	dtoa@w+1,f
 12016                           
 12017                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 12018  04AC  300A               	movlw	10
 12019  04AD  00A5               	movwf	___aodiv@divisor
 12020  04AE  01A6               	clrf	___aodiv@divisor+1
 12021  04AF  01A7               	clrf	___aodiv@divisor+2
 12022  04B0  01A8               	clrf	___aodiv@divisor+3
 12023  04B1  01A9               	clrf	___aodiv@divisor+4
 12024  04B2  01AA               	clrf	___aodiv@divisor+5
 12025  04B3  01AB               	clrf	___aodiv@divisor+6
 12026  04B4  01AC               	clrf	___aodiv@divisor+7
 12027  04B5  0855               	movf	dtoa@n,w
 12028  04B6  00AD               	movwf	___aodiv@dividend
 12029  04B7  0856               	movf	dtoa@n+1,w
 12030  04B8  00AE               	movwf	___aodiv@dividend+1
 12031  04B9  0857               	movf	dtoa@n+2,w
 12032  04BA  00AF               	movwf	___aodiv@dividend+2
 12033  04BB  0858               	movf	dtoa@n+3,w
 12034  04BC  00B0               	movwf	___aodiv@dividend+3
 12035  04BD  0859               	movf	dtoa@n+4,w
 12036  04BE  00B1               	movwf	___aodiv@dividend+4
 12037  04BF  085A               	movf	dtoa@n+5,w
 12038  04C0  00B2               	movwf	___aodiv@dividend+5
 12039  04C1  085B               	movf	dtoa@n+6,w
 12040  04C2  00B3               	movwf	___aodiv@dividend+6
 12041  04C3  085C               	movf	dtoa@n+7,w
 12042  04C4  00B4               	movwf	___aodiv@dividend+7
 12043  04C5  3185  2518  3183   	fcall	___aodiv
 12044  04C8  0020               	movlb	0	; select bank0
 12045  04C9  0825               	movf	?___aodiv,w
 12046  04CA  00D5               	movwf	dtoa@n
 12047  04CB  0826               	movf	?___aodiv+1,w
 12048  04CC  00D6               	movwf	dtoa@n+1
 12049  04CD  0827               	movf	?___aodiv+2,w
 12050  04CE  00D7               	movwf	dtoa@n+2
 12051  04CF  0828               	movf	?___aodiv+3,w
 12052  04D0  00D8               	movwf	dtoa@n+3
 12053  04D1  0829               	movf	?___aodiv+4,w
 12054  04D2  00D9               	movwf	dtoa@n+4
 12055  04D3  082A               	movf	?___aodiv+5,w
 12056  04D4  00DA               	movwf	dtoa@n+5
 12057  04D5  082B               	movf	?___aodiv+6,w
 12058  04D6  00DB               	movwf	dtoa@n+6
 12059  04D7  082C               	movf	?___aodiv+7,w
 12060  04D8  00DC               	movwf	dtoa@n+7
 12061  04D9                     l1316:	
 12062                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
 12063                           
 12064                           
 12065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 12066  04D9  0020               	movlb	0	; select bank0
 12067  04DA  085E               	movf	dtoa@i+1,w
 12068  04DB  3A80               	xorlw	128
 12069  04DC  00C9               	movwf	??_dtoa
 12070  04DD  3080               	movlw	128
 12071  04DE  0249               	subwf	??_dtoa,w
 12072  04DF  1D03               	skipz
 12073  04E0  2CE3               	goto	u5835
 12074  04E1  3001               	movlw	1
 12075  04E2  025D               	subwf	dtoa@i,w
 12076  04E3                     u5835:	
 12077  04E3  1803               	btfsc	3,0
 12078  04E4  2C4B               	goto	l5830
 12079  04E5                     l5838:	
 12080                           
 12081                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 12082  04E5  0020               	movlb	0	; select bank0
 12083  04E6  0853               	movf	dtoa@s,w
 12084  04E7  0454               	iorwf	dtoa@s+1,w
 12085  04E8  1D03               	btfss	3,2
 12086  04E9  2CED               	goto	l5842
 12087  04EA  0021               	movlb	1	; select bank1
 12088  04EB  1D57               	btfss	_flags^(0+128),2
 12089  04EC  2D05               	goto	l5852
 12090  04ED                     l5842:	
 12091                           
 12092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 12093  04ED  30FF               	movlw	255
 12094  04EE  0020               	movlb	0	; select bank0
 12095  04EF  07DD               	addwf	dtoa@i,f
 12096  04F0  30FF               	movlw	255
 12097  04F1  3DDE               	addwfc	dtoa@i+1,f
 12098                           
 12099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 12100  04F2  0853               	movf	dtoa@s,w
 12101  04F3  0454               	iorwf	dtoa@s+1,w
 12102  04F4  1D03               	btfss	3,2
 12103  04F5  2CF8               	goto	l5848
 12104  04F6  302B               	movlw	43
 12105  04F7  2CF9               	goto	L8
 12106  04F8                     l5848:	
 12107  04F8  302D               	movlw	45
 12108  04F9                     L8:	
 12109  04F9  00CC               	movwf	_dtoa$2256
 12110  04FA  3000               	movlw	0
 12111  04FB  00CD               	movwf	_dtoa$2256+1
 12112  04FC  084C               	movf	_dtoa$2256,w
 12113  04FD  00C9               	movwf	??_dtoa
 12114  04FE  085D               	movf	dtoa@i,w
 12115  04FF  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
 12116  0500  0086               	movwf	6
 12117  0501  3002               	movlw	2	; select bank4/5
 12118  0502  0087               	movwf	7
 12119  0503  0849               	movf	??_dtoa,w
 12120  0504  0081               	movwf	1
 12121  0505                     l5852:	
 12122                           
 12123                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 12124  0505  0020               	movlb	0	; select bank0
 12125  0506  085D               	movf	dtoa@i,w
 12126  0507  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
 12127  0508  00C9               	movwf	??_dtoa
 12128  0509  0849               	movf	??_dtoa,w
 12129  050A  00B8               	movwf	pad@buf
 12130  050B  0852               	movf	dtoa@w+1,w
 12131  050C  00BA               	movwf	pad@p+1
 12132  050D  0851               	movf	dtoa@w,w
 12133  050E  00B9               	movwf	pad@p
 12134  050F  0850               	movf	dtoa@fp,w
 12135  0510  3189  218D         	fcall	_pad
 12136  0512  0020               	movlb	0	; select bank0
 12137  0513  0839               	movf	?_pad+1,w
 12138  0514  00C2               	movwf	?_dtoa+1
 12139  0515  0838               	movf	?_pad,w
 12140  0516  00C1               	movwf	?_dtoa
 12141  0517  0008               	return
 12142  0518                     __end_of_dtoa:	
 12143                           
 12144                           	psect	text71
 12145  098D                     __ptext71:	
 12146 ;; *************** function _pad *****************
 12147 ;; Defined at:
 12148 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12149 ;; Parameters:    Size  Location     Type
 12150 ;;  fp              1    wreg     PTR struct _IO_FILE
 12151 ;;		 -> NULL(0), 
 12152 ;;  buf             1   24[BANK0 ] PTR unsigned char 
 12153 ;;		 -> dbuf(32), 
 12154 ;;  p               2   25[BANK0 ] int 
 12155 ;; Auto vars:     Size  Location     Type
 12156 ;;  fp              1   32[BANK0 ] PTR struct _IO_FILE
 12157 ;;		 -> NULL(0), 
 12158 ;;  w               2   30[BANK0 ] int 
 12159 ;;  i               2   28[BANK0 ] int 
 12160 ;; Return value:  Size  Location     Type
 12161 ;;                  2   24[BANK0 ] int 
 12162 ;; Registers used:
 12163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12164 ;; Tracked objects:
 12165 ;;		On entry : 0/0
 12166 ;;		On exit  : 0/0
 12167 ;;		Unchanged: 0/0
 12168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12169 ;;      Params:         0       3       0       0       0       0       0       0
 12170 ;;      Locals:         0       5       0       0       0       0       0       0
 12171 ;;      Temps:          0       1       0       0       0       0       0       0
 12172 ;;      Totals:         0       9       0       0       0       0       0       0
 12173 ;;Total ram usage:        9 bytes
 12174 ;; Hardware stack levels used:    1
 12175 ;; Hardware stack levels required when called:   11
 12176 ;; This function calls:
 12177 ;;		_fputc
 12178 ;;		_fputs
 12179 ;;		_strlen
 12180 ;; This function is called by:
 12181 ;;		_dtoa
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           
 12186                           ;psect for function _pad
 12187  098D                     _pad:	
 12188                           
 12189                           ;incstack = 0
 12190 ;; hardware stack exceeded
 12191                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12192                           ;pad@fp stored from wreg
 12193  098D  0020               	movlb	0	; select bank0
 12194  098E  00C0               	movwf	pad@fp
 12195                           
 12196                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 12197  098F  0021               	movlb	1	; select bank1
 12198  0990  1C57               	btfss	_flags^(0+128),0
 12199  0991  299B               	goto	l5714
 12200                           
 12201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 12202  0992  0020               	movlb	0	; select bank0
 12203  0993  0840               	movf	pad@fp,w
 12204  0994  00BB               	movwf	??_pad
 12205  0995  083B               	movf	??_pad,w
 12206  0996  00B0               	movwf	fputs@fp
 12207  0997  0838               	movf	pad@buf,w
 12208  0998  3195  25E9  3189   	fcall	_fputs
 12209  099B                     l5714:	
 12210                           
 12211                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 12212  099B  0020               	movlb	0	; select bank0
 12213  099C  1BBA               	btfsc	pad@p+1,7
 12214  099D  29A3               	goto	l5718
 12215  099E  083A               	movf	pad@p+1,w
 12216  099F  00BF               	movwf	pad@w+1
 12217  09A0  0839               	movf	pad@p,w
 12218  09A1  00BE               	movwf	pad@w
 12219  09A2  29A5               	goto	l1299
 12220  09A3                     l5718:	
 12221  09A3  01BE               	clrf	pad@w
 12222  09A4  01BF               	clrf	pad@w+1
 12223  09A5                     l1299:	
 12224                           
 12225                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 12226  09A5  01BC               	clrf	pad@i
 12227  09A6  01BD               	clrf	pad@i+1
 12228  09A7                     l5724:	
 12229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12230                           
 12231                           
 12232                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12233  09A7  083D               	movf	pad@i+1,w
 12234  09A8  3A80               	xorlw	128
 12235  09A9  00BB               	movwf	??_pad
 12236  09AA  083F               	movf	pad@w+1,w
 12237  09AB  3A80               	xorlw	128
 12238  09AC  023B               	subwf	??_pad,w
 12239  09AD  1D03               	skipz
 12240  09AE  29B1               	goto	u5525
 12241  09AF  083E               	movf	pad@w,w
 12242  09B0  023C               	subwf	pad@i,w
 12243  09B1                     u5525:	
 12244  09B1  1803               	btfsc	3,0
 12245  09B2  29C5               	goto	l1302
 12246                           
 12247                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 12248  09B3  3020               	movlw	32
 12249  09B4  0020               	movlb	0	; select bank0
 12250  09B5  00A8               	movwf	fputc@c
 12251  09B6  3000               	movlw	0
 12252  09B7  00A9               	movwf	fputc@c+1
 12253  09B8  0840               	movf	pad@fp,w
 12254  09B9  00BB               	movwf	??_pad
 12255  09BA  083B               	movf	??_pad,w
 12256  09BB  00AA               	movwf	fputc@fp
 12257  09BC  3188  2008  3189   	fcall	_fputc
 12258                           
 12259                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 12260  09BF  3001               	movlw	1
 12261  09C0  0020               	movlb	0	; select bank0
 12262  09C1  07BC               	addwf	pad@i,f
 12263  09C2  3000               	movlw	0
 12264  09C3  3DBD               	addwfc	pad@i+1,f
 12265  09C4  29A7               	goto	l5724
 12266  09C5                     l1302:	
 12267                           
 12268                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 12269  09C5  0021               	movlb	1	; select bank1
 12270  09C6  1857               	btfsc	_flags^(0+128),0
 12271  09C7  29D1               	goto	l1303
 12272                           
 12273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 12274  09C8  0020               	movlb	0	; select bank0
 12275  09C9  0840               	movf	pad@fp,w
 12276  09CA  00BB               	movwf	??_pad
 12277  09CB  083B               	movf	??_pad,w
 12278  09CC  00B0               	movwf	fputs@fp
 12279  09CD  0838               	movf	pad@buf,w
 12280  09CE  3195  25E9  3189   	fcall	_fputs
 12281  09D1                     l1303:	
 12282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 12283                           
 12284                           
 12285                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 12286  09D1  0020               	movlb	0	; select bank0
 12287  09D2  0838               	movf	pad@buf,w
 12288  09D3  3194  248E         	fcall	_strlen
 12289  09D5  0020               	movlb	0	; select bank0
 12290  09D6  083E               	movf	pad@w,w
 12291  09D7  0725               	addwf	?_strlen,w
 12292  09D8  00B8               	movwf	?_pad
 12293  09D9  083F               	movf	pad@w+1,w
 12294  09DA  3D26               	addwfc	?_strlen+1,w
 12295  09DB  00B9               	movwf	?_pad+1
 12296  09DC  0008               	return
 12297  09DD                     __end_of_pad:	
 12298                           
 12299                           	psect	text72
 12300  148E                     __ptext72:	
 12301 ;; *************** function _strlen *****************
 12302 ;; Defined at:
 12303 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;  s               1    wreg     PTR const unsigned char 
 12306 ;;		 -> dbuf(32), 
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;  s               1    9[BANK0 ] PTR const unsigned char 
 12309 ;;		 -> dbuf(32), 
 12310 ;;  a               1    8[BANK0 ] PTR const unsigned char 
 12311 ;;		 -> dbuf(32), 
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  2    5[BANK0 ] unsigned int 
 12314 ;; Registers used:
 12315 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12321 ;;      Params:         0       2       0       0       0       0       0       0
 12322 ;;      Locals:         0       2       0       0       0       0       0       0
 12323 ;;      Temps:          0       1       0       0       0       0       0       0
 12324 ;;      Totals:         0       5       0       0       0       0       0       0
 12325 ;;Total ram usage:        5 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    7
 12328 ;; This function calls:
 12329 ;;		Nothing
 12330 ;; This function is called by:
 12331 ;;		_pad
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           
 12336                           ;psect for function _strlen
 12337  148E                     _strlen:	
 12338                           
 12339                           ;incstack = 0
 12340 ;; hardware stack exceeded
 12341                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 12342                           ;strlen@s stored from wreg
 12343  148E  0020               	movlb	0	; select bank0
 12344  148F  00A9               	movwf	strlen@s
 12345  1490  0829               	movf	strlen@s,w
 12346  1491  00A7               	movwf	??_strlen
 12347  1492  0827               	movf	??_strlen,w
 12348  1493  00A8               	movwf	strlen@a
 12349  1494                     l5700:	
 12350  1494  0829               	movf	strlen@s,w
 12351  1495  0086               	movwf	6
 12352  1496  3002               	movlw	2	; select bank4/5
 12353  1497  0087               	movwf	7
 12354  1498  0801               	movf	1,w
 12355  1499  1903               	btfsc	3,2
 12356  149A  2CA0               	goto	l5702
 12357  149B  3001               	movlw	1
 12358  149C  00A7               	movwf	??_strlen
 12359  149D  0827               	movf	??_strlen,w
 12360  149E  07A9               	addwf	strlen@s,f
 12361  149F  2C94               	goto	l5700
 12362  14A0                     l5702:	
 12363  14A0  0828               	movf	strlen@a,w
 12364  14A1  0229               	subwf	strlen@s,w
 12365  14A2  00A5               	movwf	?_strlen
 12366  14A3  01A6               	clrf	?_strlen+1
 12367  14A4  1BA5               	btfsc	?_strlen,7
 12368  14A5  03A6               	decf	?_strlen+1,f
 12369  14A6  0008               	return
 12370  14A7                     __end_of_strlen:	
 12371                           
 12372                           	psect	text73
 12373  15E9                     __ptext73:	
 12374 ;; *************** function _fputs *****************
 12375 ;; Defined at:
 12376 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;  s               1    wreg     PTR const unsigned char 
 12379 ;;		 -> dbuf(32), 
 12380 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
 12381 ;;		 -> NULL(0), 
 12382 ;; Auto vars:     Size  Location     Type
 12383 ;;  s               1   23[BANK0 ] PTR const unsigned char 
 12384 ;;		 -> dbuf(32), 
 12385 ;;  i               2   21[BANK0 ] int 
 12386 ;;  c               1   20[BANK0 ] unsigned char 
 12387 ;; Return value:  Size  Location     Type
 12388 ;;                  2   16[BANK0 ] int 
 12389 ;; Registers used:
 12390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12391 ;; Tracked objects:
 12392 ;;		On entry : 0/0
 12393 ;;		On exit  : 0/0
 12394 ;;		Unchanged: 0/0
 12395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12396 ;;      Params:         0       1       0       0       0       0       0       0
 12397 ;;      Locals:         0       4       0       0       0       0       0       0
 12398 ;;      Temps:          0       3       0       0       0       0       0       0
 12399 ;;      Totals:         0       8       0       0       0       0       0       0
 12400 ;;Total ram usage:        8 bytes
 12401 ;; Hardware stack levels used:    1
 12402 ;; Hardware stack levels required when called:   10
 12403 ;; This function calls:
 12404 ;;		_fputc
 12405 ;; This function is called by:
 12406 ;;		_pad
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           
 12411                           ;psect for function _fputs
 12412  15E9                     _fputs:	
 12413                           
 12414                           ;incstack = 0
 12415 ;; hardware stack exceeded
 12416                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12417                           ;fputs@s stored from wreg
 12418  15E9  0020               	movlb	0	; select bank0
 12419  15EA  00B7               	movwf	fputs@s
 12420  15EB  01B5               	clrf	fputs@i
 12421  15EC  01B6               	clrf	fputs@i+1
 12422  15ED                     l5694:	
 12423  15ED  0835               	movf	fputs@i,w
 12424  15EE  0737               	addwf	fputs@s,w
 12425  15EF  00B1               	movwf	??_fputs
 12426  15F0  0831               	movf	??_fputs,w
 12427  15F1  0086               	movwf	6
 12428  15F2  3002               	movlw	2	; select bank4/5
 12429  15F3  0087               	movwf	7
 12430  15F4  0801               	movf	1,w
 12431  15F5  00B2               	movwf	??_fputs+1
 12432  15F6  0832               	movf	??_fputs+1,w
 12433  15F7  00B4               	movwf	fputs@c
 12434  15F8  0834               	movf	fputs@c,w
 12435  15F9  1903               	btfsc	3,2
 12436  15FA  0008               	return
 12437  15FB  0834               	movf	fputs@c,w
 12438  15FC  00B1               	movwf	??_fputs
 12439  15FD  01B2               	clrf	??_fputs+1
 12440  15FE  0831               	movf	??_fputs,w
 12441  15FF  00A8               	movwf	fputc@c
 12442  1600  0832               	movf	??_fputs+1,w
 12443  1601  00A9               	movwf	fputc@c+1
 12444  1602  0830               	movf	fputs@fp,w
 12445  1603  00B3               	movwf	??_fputs+2
 12446  1604  0833               	movf	??_fputs+2,w
 12447  1605  00AA               	movwf	fputc@fp
 12448  1606  3188  2008  3195   	fcall	_fputc
 12449  1609  3001               	movlw	1
 12450  160A  0020               	movlb	0	; select bank0
 12451  160B  07B5               	addwf	fputs@i,f
 12452  160C  3000               	movlw	0
 12453  160D  3DB6               	addwfc	fputs@i+1,f
 12454  160E  2DED               	goto	l5694
 12455  160F                     __end_of_fputs:	
 12456                           
 12457                           	psect	text74
 12458  0808                     __ptext74:	
 12459 ;; *************** function _fputc *****************
 12460 ;; Defined at:
 12461 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;  c               2    8[BANK0 ] int 
 12464 ;;  fp              1   10[BANK0 ] PTR struct _IO_FILE
 12465 ;;		 -> NULL(0), 
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;		None
 12468 ;; Return value:  Size  Location     Type
 12469 ;;                  2    8[BANK0 ] int 
 12470 ;; Registers used:
 12471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12472 ;; Tracked objects:
 12473 ;;		On entry : 0/0
 12474 ;;		On exit  : 0/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12477 ;;      Params:         0       3       0       0       0       0       0       0
 12478 ;;      Locals:         0       0       0       0       0       0       0       0
 12479 ;;      Temps:          0       5       0       0       0       0       0       0
 12480 ;;      Totals:         0       8       0       0       0       0       0       0
 12481 ;;Total ram usage:        8 bytes
 12482 ;; Hardware stack levels used:    1
 12483 ;; Hardware stack levels required when called:    9
 12484 ;; This function calls:
 12485 ;;		_putch
 12486 ;; This function is called by:
 12487 ;;		_pad
 12488 ;;		_vfpfcnvrt
 12489 ;;		_fputs
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           
 12494                           ;psect for function _fputc
 12495  0808                     _fputc:	
 12496                           
 12497                           ;incstack = 0
 12498 ;; hardware stack exceeded
 12499                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12500  0808  0020               	movlb	0	; select bank0
 12501  0809  082A               	movf	fputc@fp,w
 12502  080A  1D03               	btfss	3,2
 12503  080B  082A               	movf	fputc@fp,w
 12504  080C  1D03               	btfss	3,2
 12505  080D  2812               	goto	l5680
 12506  080E  0828               	movf	fputc@c,w
 12507  080F  3191  21EE         	fcall	_putch
 12508  0811  0008               	return
 12509  0812                     l5680:	
 12510  0812  082A               	movf	fputc@fp,w
 12511  0813  3E03               	addlw	3
 12512  0814  0086               	movwf	6
 12513  0815  0187               	clrf	7
 12514  0816  0016               	moviw fsr1++
 12515  0817  0401               	iorwf	1,w
 12516  0818  1903               	btfsc	3,2
 12517  0819  2835               	goto	l5684
 12518  081A  082A               	movf	fputc@fp,w
 12519  081B  3E03               	addlw	3
 12520  081C  0086               	movwf	6
 12521  081D  0187               	clrf	7
 12522  081E  3F40               	moviw [0]fsr1
 12523  081F  00AB               	movwf	??_fputc
 12524  0820  3F41               	moviw [1]fsr1
 12525  0821  00AC               	movwf	??_fputc+1
 12526  0822  0A2A               	incf	fputc@fp,w
 12527  0823  0086               	movwf	6
 12528  0824  0187               	clrf	7
 12529  0825  3F40               	moviw [0]fsr1
 12530  0826  00AD               	movwf	??_fputc+2
 12531  0827  3F41               	moviw [1]fsr1
 12532  0828  00AE               	movwf	??_fputc+3
 12533  0829  082E               	movf	??_fputc+3,w
 12534  082A  3A80               	xorlw	128
 12535  082B  00AF               	movwf	??_fputc+4
 12536  082C  082C               	movf	??_fputc+1,w
 12537  082D  3A80               	xorlw	128
 12538  082E  022F               	subwf	??_fputc+4,w
 12539  082F  1D03               	skipz
 12540  0830  2833               	goto	u5465
 12541  0831  082B               	movf	??_fputc,w
 12542  0832  022D               	subwf	??_fputc+2,w
 12543  0833                     u5465:	
 12544  0833  1803               	skipnc
 12545  0834  0008               	return
 12546  0835                     l5684:	
 12547  0835  0020               	movlb	0	; select bank0
 12548  0836  0A2A               	incf	fputc@fp,w
 12549  0837  0086               	movwf	6
 12550  0838  0187               	clrf	7
 12551  0839  3001               	movlw	1
 12552  083A  0781               	addwf	1,f
 12553  083B  3141               	addfsr 1,1
 12554  083C  1803               	skipnc
 12555  083D  0A81               	incf	1,f
 12556  083E  0008               	return
 12557  083F                     __end_of_fputc:	
 12558                           
 12559                           	psect	text75
 12560  11EE                     __ptext75:	
 12561 ;; *************** function _putch *****************
 12562 ;; Defined at:
 12563 ;;		line 200 in file "mcc_generated_files/eusart.c"
 12564 ;; Parameters:    Size  Location     Type
 12565 ;;  txData          1    wreg     unsigned char 
 12566 ;; Auto vars:     Size  Location     Type
 12567 ;;  txData          1    7[BANK0 ] unsigned char 
 12568 ;; Return value:  Size  Location     Type
 12569 ;;                  1    wreg      void 
 12570 ;; Registers used:
 12571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12572 ;; Tracked objects:
 12573 ;;		On entry : 0/0
 12574 ;;		On exit  : 0/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12577 ;;      Params:         0       0       0       0       0       0       0       0
 12578 ;;      Locals:         0       1       0       0       0       0       0       0
 12579 ;;      Temps:          0       0       0       0       0       0       0       0
 12580 ;;      Totals:         0       1       0       0       0       0       0       0
 12581 ;;Total ram usage:        1 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:    8
 12584 ;; This function calls:
 12585 ;;		_EUSART_Write
 12586 ;; This function is called by:
 12587 ;;		_fputc
 12588 ;; This function uses a non-reentrant model
 12589 ;;
 12590                           
 12591                           
 12592                           ;psect for function _putch
 12593  11EE                     _putch:	
 12594                           
 12595                           ;incstack = 0
 12596 ;; hardware stack exceeded
 12597                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12598                           ;putch@txData stored from wreg
 12599  11EE  0020               	movlb	0	; select bank0
 12600  11EF  00A7               	movwf	putch@txData
 12601                           
 12602                           ;mcc_generated_files/eusart.c: 200: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 201: {;mcc_generated_files/eusart.c: 202:     EUSART_Write(txData);
 12603  11F0  0827               	movf	putch@txData,w
 12604  11F1  3196  2637         	fcall	_EUSART_Write
 12605  11F3  0008               	return
 12606  11F4                     __end_of_putch:	
 12607                           
 12608                           	psect	text76
 12609  1637                     __ptext76:	
 12610 ;; *************** function _EUSART_Write *****************
 12611 ;; Defined at:
 12612 ;;		line 171 in file "mcc_generated_files/eusart.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  txData          1    wreg     unsigned char 
 12615 ;; Auto vars:     Size  Location     Type
 12616 ;;  txData          1    6[BANK0 ] unsigned char 
 12617 ;; Return value:  Size  Location     Type
 12618 ;;                  1    wreg      void 
 12619 ;; Registers used:
 12620 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12621 ;; Tracked objects:
 12622 ;;		On entry : 0/0
 12623 ;;		On exit  : 0/0
 12624 ;;		Unchanged: 0/0
 12625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12626 ;;      Params:         0       0       0       0       0       0       0       0
 12627 ;;      Locals:         0       1       0       0       0       0       0       0
 12628 ;;      Temps:          0       1       0       0       0       0       0       0
 12629 ;;      Totals:         0       2       0       0       0       0       0       0
 12630 ;;Total ram usage:        2 bytes
 12631 ;; Hardware stack levels used:    1
 12632 ;; Hardware stack levels required when called:    7
 12633 ;; This function calls:
 12634 ;;		Nothing
 12635 ;; This function is called by:
 12636 ;;		_putch
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           
 12641                           ;psect for function _EUSART_Write
 12642  1637                     _EUSART_Write:	
 12643                           
 12644                           ;incstack = 0
 12645 ;; hardware stack exceeded
 12646                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12647                           ;EUSART_Write@txData stored from wreg
 12648  1637  0020               	movlb	0	; select bank0
 12649  1638  00A6               	movwf	EUSART_Write@txData
 12650  1639                     l5656:	
 12651                           ;mcc_generated_files/eusart.c: 171: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 172: {;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemai
      +                          ning)
 12652                           
 12653                           
 12654                           ;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemaining)
 12655  1639  0021               	movlb	1	; select bank1
 12656  163A  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12657  163B  1D03               	btfss	3,2
 12658  163C  2E3F               	goto	l922
 12659  163D  0064               	clrwdt	;# 
 12660  163E  2E39               	goto	l5656
 12661  163F                     l922:	
 12662                           
 12663                           ;mcc_generated_files/eusart.c: 178:     if(0 == PIE1bits.TXIE)
 12664  163F  1A11               	btfsc	17,4	;volatile
 12665  1640  2E46               	goto	l923
 12666                           
 12667                           ;mcc_generated_files/eusart.c: 179:     {;mcc_generated_files/eusart.c: 180:         TXR
      +                          EG = txData;
 12668  1641  0020               	movlb	0	; select bank0
 12669  1642  0826               	movf	EUSART_Write@txData,w
 12670  1643  0023               	movlb	3	; select bank3
 12671  1644  009A               	movwf	26	;volatile
 12672                           
 12673                           ;mcc_generated_files/eusart.c: 181:     }
 12674  1645  2E5E               	goto	l5670
 12675  1646                     l923:	
 12676                           ;mcc_generated_files/eusart.c: 182:     else
 12677                           
 12678                           
 12679                           ;mcc_generated_files/eusart.c: 183:     {;mcc_generated_files/eusart.c: 184:         PIE
      +                          1bits.TXIE = 0;
 12680  1646  1211               	bcf	17,4	;volatile
 12681                           
 12682                           ;mcc_generated_files/eusart.c: 185:         eusartTxBuffer[eusartTxHead++] = txData;
 12683  1647  0020               	movlb	0	; select bank0
 12684  1648  0826               	movf	EUSART_Write@txData,w
 12685  1649  00A5               	movwf	??_EUSART_Write
 12686  164A  0021               	movlb	1	; select bank1
 12687  164B  0861               	movf	_eusartTxHead^(0+128),w
 12688  164C  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12689  164D  0086               	movwf	6
 12690  164E  3001               	movlw	1	; select bank2/3
 12691  164F  0087               	movwf	7
 12692  1650  0020               	movlb	0	; select bank0
 12693  1651  0825               	movf	??_EUSART_Write,w
 12694  1652  0081               	movwf	1
 12695  1653  3001               	movlw	1
 12696  1654  00A5               	movwf	??_EUSART_Write
 12697  1655  0825               	movf	??_EUSART_Write,w
 12698  1656  0021               	movlb	1	; select bank1
 12699  1657  07E1               	addwf	_eusartTxHead^(0+128),f	;volatile
 12700                           
 12701                           ;mcc_generated_files/eusart.c: 186:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
 12702  1658  3008               	movlw	8
 12703  1659  0261               	subwf	_eusartTxHead^(0+128),w	;volatile
 12704  165A  1803               	btfsc	3,0
 12705                           
 12706                           ;mcc_generated_files/eusart.c: 187:         {;mcc_generated_files/eusart.c: 188:        
      +                               eusartTxHead = 0;
 12707  165B  01E1               	clrf	_eusartTxHead^(0+128)	;volatile
 12708                           
 12709                           ;mcc_generated_files/eusart.c: 190:         eusartTxBufferRemaining--;
 12710  165C  3001               	movlw	1
 12711  165D  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12712  165E                     l5670:	
 12713                           
 12714                           ;mcc_generated_files/eusart.c: 192:     PIE1bits.TXIE = 1;
 12715  165E  0021               	movlb	1	; select bank1
 12716  165F  1611               	bsf	17,4	;volatile
 12717  1660  0008               	return
 12718  1661                     __end_of_EUSART_Write:	
 12719                           
 12720                           	psect	text77
 12721  1475                     __ptext77:	
 12722 ;; *************** function _abs *****************
 12723 ;; Defined at:
 12724 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 12725 ;; Parameters:    Size  Location     Type
 12726 ;;  a               2   24[BANK0 ] int 
 12727 ;; Auto vars:     Size  Location     Type
 12728 ;;		None
 12729 ;; Return value:  Size  Location     Type
 12730 ;;                  2   24[BANK0 ] int 
 12731 ;; Registers used:
 12732 ;;		wreg, status,2, status,0
 12733 ;; Tracked objects:
 12734 ;;		On entry : 0/0
 12735 ;;		On exit  : 0/0
 12736 ;;		Unchanged: 0/0
 12737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12738 ;;      Params:         0       2       0       0       0       0       0       0
 12739 ;;      Locals:         0       0       0       0       0       0       0       0
 12740 ;;      Temps:          0       2       0       0       0       0       0       0
 12741 ;;      Totals:         0       4       0       0       0       0       0       0
 12742 ;;Total ram usage:        4 bytes
 12743 ;; Hardware stack levels used:    1
 12744 ;; Hardware stack levels required when called:    7
 12745 ;; This function calls:
 12746 ;;		Nothing
 12747 ;; This function is called by:
 12748 ;;		_Sensor_postAcquisitionProcess
 12749 ;;		_Sensor_Acq_ExecutePacket
 12750 ;;		_Sensor_autoCalibration
 12751 ;;		_dtoa
 12752 ;; This function uses a non-reentrant model
 12753 ;;
 12754                           
 12755                           
 12756                           ;psect for function _abs
 12757  1475                     _abs:	
 12758                           
 12759                           ;incstack = 0
 12760                           ; Regs used in _abs: [wreg+status,2+status,0]
 12761  1475  0020               	movlb	0	; select bank0
 12762  1476  0839               	movf	abs@a+1,w
 12763  1477  3A80               	xorlw	128
 12764  1478  00BA               	movwf	??_abs
 12765  1479  3080               	movlw	128
 12766  147A  023A               	subwf	??_abs,w
 12767  147B  1D03               	skipz
 12768  147C  2C7F               	goto	u5495
 12769  147D  3001               	movlw	1
 12770  147E  0238               	subwf	abs@a,w
 12771  147F                     u5495:	
 12772  147F  1803               	skipnc
 12773  1480  0008               	return
 12774  1481  0020               	movlb	0	; select bank0
 12775  1482  0938               	comf	abs@a,w
 12776  1483  00BA               	movwf	??_abs
 12777  1484  0939               	comf	abs@a+1,w
 12778  1485  00BB               	movwf	??_abs+1
 12779  1486  0ABA               	incf	??_abs,f
 12780  1487  1903               	skipnz
 12781  1488  0ABB               	incf	??_abs+1,f
 12782  1489  083A               	movf	??_abs,w
 12783  148A  00B8               	movwf	?_abs
 12784  148B  083B               	movf	??_abs+1,w
 12785  148C  00B9               	movwf	?_abs+1
 12786  148D  0008               	return
 12787  148E                     __end_of_abs:	
 12788                           
 12789                           	psect	text78
 12790  060F                     __ptext78:	
 12791 ;; *************** function ___aomod *****************
 12792 ;; Defined at:
 12793 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 12794 ;; Parameters:    Size  Location     Type
 12795 ;;  divisor         8    5[BANK0 ] long long 
 12796 ;;  dividend        8   13[BANK0 ] long long 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  sign            1   23[BANK0 ] unsigned char 
 12799 ;;  counter         1   22[BANK0 ] unsigned char 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;                  8    5[BANK0 ] long long 
 12802 ;; Registers used:
 12803 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12809 ;;      Params:         0      16       0       0       0       0       0       0
 12810 ;;      Locals:         0       2       0       0       0       0       0       0
 12811 ;;      Temps:          0       1       0       0       0       0       0       0
 12812 ;;      Totals:         0      19       0       0       0       0       0       0
 12813 ;;Total ram usage:       19 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    7
 12816 ;; This function calls:
 12817 ;;		Nothing
 12818 ;; This function is called by:
 12819 ;;		_dtoa
 12820 ;; This function uses a non-reentrant model
 12821 ;;
 12822                           
 12823                           
 12824                           ;psect for function ___aomod
 12825  060F                     ___aomod:	
 12826                           
 12827                           ;incstack = 0
 12828 ;; hardware stack exceeded
 12829                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 12830  060F  0020               	movlb	0	; select bank0
 12831  0610  01B7               	clrf	___aomod@sign
 12832  0611  302D               	movlw	low ___aomod@dividend
 12833  0612  0086               	movwf	6
 12834  0613  3000               	movlw	high ___aomod@dividend
 12835  0614  0087               	movwf	7
 12836  0615  3F47               	moviw [7]fsr1
 12837  0616  00B5               	movwf	??___aomod
 12838  0617  1FB5               	btfss	??___aomod,7
 12839  0618  2E3B               	goto	l5774
 12840  0619  0020               	movlb	0	; select bank0
 12841  061A  09AD               	comf	___aomod@dividend,f
 12842  061B  09AE               	comf	___aomod@dividend+1,f
 12843  061C  09AF               	comf	___aomod@dividend+2,f
 12844  061D  09B0               	comf	___aomod@dividend+3,f
 12845  061E  09B1               	comf	___aomod@dividend+4,f
 12846  061F  09B2               	comf	___aomod@dividend+5,f
 12847  0620  09B3               	comf	___aomod@dividend+6,f
 12848  0621  09B4               	comf	___aomod@dividend+7,f
 12849  0622  0AAD               	incf	___aomod@dividend,f
 12850  0623  1D03               	skipz
 12851  0624  2E38               	goto	u566lld
 12852  0625  0AAE               	incf	___aomod@dividend+1,f
 12853  0626  1D03               	skipz
 12854  0627  2E38               	goto	u566lld
 12855  0628  0AAF               	incf	___aomod@dividend+2,f
 12856  0629  1D03               	skipz
 12857  062A  2E38               	goto	u566lld
 12858  062B  0AB0               	incf	___aomod@dividend+3,f
 12859  062C  1D03               	skipz
 12860  062D  2E38               	goto	u566lld
 12861  062E  0AB1               	incf	___aomod@dividend+4,f
 12862  062F  1D03               	skipz
 12863  0630  2E38               	goto	u566lld
 12864  0631  0AB2               	incf	___aomod@dividend+5,f
 12865  0632  1D03               	skipz
 12866  0633  2E38               	goto	u566lld
 12867  0634  0AB3               	incf	___aomod@dividend+6,f
 12868  0635  1D03               	skipz
 12869  0636  2E38               	goto	u566lld
 12870  0637  0AB4               	incf	___aomod@dividend+7,f
 12871  0638                     u566lld:	
 12872  0638  0020               	movlb	0	; select bank0
 12873  0639  01B7               	clrf	___aomod@sign
 12874  063A  0AB7               	incf	___aomod@sign,f
 12875  063B                     l5774:	
 12876  063B  3025               	movlw	low ___aomod@divisor
 12877  063C  0086               	movwf	6
 12878  063D  3000               	movlw	high ___aomod@divisor
 12879  063E  0087               	movwf	7
 12880  063F  3F47               	moviw [7]fsr1
 12881  0640  0020               	movlb	0	; select bank0
 12882  0641  00B5               	movwf	??___aomod
 12883  0642  1FB5               	btfss	??___aomod,7
 12884  0643  2E63               	goto	l5778
 12885  0644  0020               	movlb	0	; select bank0
 12886  0645  09A5               	comf	___aomod@divisor,f
 12887  0646  09A6               	comf	___aomod@divisor+1,f
 12888  0647  09A7               	comf	___aomod@divisor+2,f
 12889  0648  09A8               	comf	___aomod@divisor+3,f
 12890  0649  09A9               	comf	___aomod@divisor+4,f
 12891  064A  09AA               	comf	___aomod@divisor+5,f
 12892  064B  09AB               	comf	___aomod@divisor+6,f
 12893  064C  09AC               	comf	___aomod@divisor+7,f
 12894  064D  0AA5               	incf	___aomod@divisor,f
 12895  064E  1D03               	skipz
 12896  064F  2E63               	goto	l5778
 12897  0650  0AA6               	incf	___aomod@divisor+1,f
 12898  0651  1D03               	skipz
 12899  0652  2E63               	goto	l5778
 12900  0653  0AA7               	incf	___aomod@divisor+2,f
 12901  0654  1D03               	skipz
 12902  0655  2E63               	goto	l5778
 12903  0656  0AA8               	incf	___aomod@divisor+3,f
 12904  0657  1D03               	skipz
 12905  0658  2E63               	goto	l5778
 12906  0659  0AA9               	incf	___aomod@divisor+4,f
 12907  065A  1D03               	skipz
 12908  065B  2E63               	goto	l5778
 12909  065C  0AAA               	incf	___aomod@divisor+5,f
 12910  065D  1D03               	skipz
 12911  065E  2E63               	goto	l5778
 12912  065F  0AAB               	incf	___aomod@divisor+6,f
 12913  0660  1D03               	skipz
 12914  0661  2E63               	goto	l5778
 12915  0662  0AAC               	incf	___aomod@divisor+7,f
 12916  0663                     l5778:	
 12917  0663  0020               	movlb	0	; select bank0
 12918  0664  0825               	movf	___aomod@divisor,w
 12919  0665  0426               	iorwf	___aomod@divisor+1,w
 12920  0666  0427               	iorwf	___aomod@divisor+2,w
 12921  0667  0428               	iorwf	___aomod@divisor+3,w
 12922  0668  0429               	iorwf	___aomod@divisor+4,w
 12923  0669  042A               	iorwf	___aomod@divisor+5,w
 12924  066A  042B               	iorwf	___aomod@divisor+6,w
 12925  066B  042C               	iorwf	___aomod@divisor+7,w
 12926  066C  1903               	skipnz
 12927  066D  2EBB               	goto	l5794
 12928  066E  01B6               	clrf	___aomod@counter
 12929  066F  0AB6               	incf	___aomod@counter,f
 12930  0670                     l5786:	
 12931  0670  1BAC               	btfsc	___aomod@divisor+7,7
 12932  0671  2E7F               	goto	l5788
 12933  0672  35A5               	lslf	___aomod@divisor,f
 12934  0673  0DA6               	rlf	___aomod@divisor+1,f
 12935  0674  0DA7               	rlf	___aomod@divisor+2,f
 12936  0675  0DA8               	rlf	___aomod@divisor+3,f
 12937  0676  0DA9               	rlf	___aomod@divisor+4,f
 12938  0677  0DAA               	rlf	___aomod@divisor+5,f
 12939  0678  0DAB               	rlf	___aomod@divisor+6,f
 12940  0679  0DAC               	rlf	___aomod@divisor+7,f
 12941  067A  3001               	movlw	1
 12942  067B  00B5               	movwf	??___aomod
 12943  067C  0835               	movf	??___aomod,w
 12944  067D  07B6               	addwf	___aomod@counter,f
 12945  067E  2E70               	goto	l5786
 12946  067F                     l5788:	
 12947  067F  082C               	movf	___aomod@divisor+7,w
 12948  0680  0234               	subwf	___aomod@dividend+7,w
 12949  0681  1D03               	skipz
 12950  0682  2E9D               	goto	u5715
 12951  0683  082B               	movf	___aomod@divisor+6,w
 12952  0684  0233               	subwf	___aomod@dividend+6,w
 12953  0685  1D03               	skipz
 12954  0686  2E9D               	goto	u5715
 12955  0687  082A               	movf	___aomod@divisor+5,w
 12956  0688  0232               	subwf	___aomod@dividend+5,w
 12957  0689  1D03               	skipz
 12958  068A  2E9D               	goto	u5715
 12959  068B  0829               	movf	___aomod@divisor+4,w
 12960  068C  0231               	subwf	___aomod@dividend+4,w
 12961  068D  1D03               	skipz
 12962  068E  2E9D               	goto	u5715
 12963  068F  0828               	movf	___aomod@divisor+3,w
 12964  0690  0230               	subwf	___aomod@dividend+3,w
 12965  0691  1D03               	skipz
 12966  0692  2E9D               	goto	u5715
 12967  0693  0827               	movf	___aomod@divisor+2,w
 12968  0694  022F               	subwf	___aomod@dividend+2,w
 12969  0695  1D03               	skipz
 12970  0696  2E9D               	goto	u5715
 12971  0697  0826               	movf	___aomod@divisor+1,w
 12972  0698  022E               	subwf	___aomod@dividend+1,w
 12973  0699  1D03               	skipz
 12974  069A  2E9D               	goto	u5715
 12975  069B  0825               	movf	___aomod@divisor,w
 12976  069C  022D               	subwf	___aomod@dividend,w
 12977  069D                     u5715:	
 12978  069D  1C03               	skipc
 12979  069E  2EAF               	goto	l5792
 12980  069F  0825               	movf	___aomod@divisor,w
 12981  06A0  02AD               	subwf	___aomod@dividend,f
 12982  06A1  0826               	movf	___aomod@divisor+1,w
 12983  06A2  3BAE               	subwfb	___aomod@dividend+1,f
 12984  06A3  0827               	movf	___aomod@divisor+2,w
 12985  06A4  3BAF               	subwfb	___aomod@dividend+2,f
 12986  06A5  0828               	movf	___aomod@divisor+3,w
 12987  06A6  3BB0               	subwfb	___aomod@dividend+3,f
 12988  06A7  0829               	movf	___aomod@divisor+4,w
 12989  06A8  3BB1               	subwfb	___aomod@dividend+4,f
 12990  06A9  082A               	movf	___aomod@divisor+5,w
 12991  06AA  3BB2               	subwfb	___aomod@dividend+5,f
 12992  06AB  082B               	movf	___aomod@divisor+6,w
 12993  06AC  3BB3               	subwfb	___aomod@dividend+6,f
 12994  06AD  082C               	movf	___aomod@divisor+7,w
 12995  06AE  3BB4               	subwfb	___aomod@dividend+7,f
 12996  06AF                     l5792:	
 12997  06AF  36AC               	lsrf	___aomod@divisor+7,f
 12998  06B0  0CAB               	rrf	___aomod@divisor+6,f
 12999  06B1  0CAA               	rrf	___aomod@divisor+5,f
 13000  06B2  0CA9               	rrf	___aomod@divisor+4,f
 13001  06B3  0CA8               	rrf	___aomod@divisor+3,f
 13002  06B4  0CA7               	rrf	___aomod@divisor+2,f
 13003  06B5  0CA6               	rrf	___aomod@divisor+1,f
 13004  06B6  0CA5               	rrf	___aomod@divisor,f
 13005  06B7  3001               	movlw	1
 13006  06B8  02B6               	subwf	___aomod@counter,f
 13007  06B9  1D03               	btfss	3,2
 13008  06BA  2E7F               	goto	l5788
 13009  06BB                     l5794:	
 13010  06BB  0837               	movf	___aomod@sign,w
 13011  06BC  1903               	btfsc	3,2
 13012  06BD  2EDC               	goto	l1464
 13013  06BE  09AD               	comf	___aomod@dividend,f
 13014  06BF  09AE               	comf	___aomod@dividend+1,f
 13015  06C0  09AF               	comf	___aomod@dividend+2,f
 13016  06C1  09B0               	comf	___aomod@dividend+3,f
 13017  06C2  09B1               	comf	___aomod@dividend+4,f
 13018  06C3  09B2               	comf	___aomod@dividend+5,f
 13019  06C4  09B3               	comf	___aomod@dividend+6,f
 13020  06C5  09B4               	comf	___aomod@dividend+7,f
 13021  06C6  0AAD               	incf	___aomod@dividend,f
 13022  06C7  1D03               	skipz
 13023  06C8  2EDC               	goto	l1464
 13024  06C9  0AAE               	incf	___aomod@dividend+1,f
 13025  06CA  1D03               	skipz
 13026  06CB  2EDC               	goto	l1464
 13027  06CC  0AAF               	incf	___aomod@dividend+2,f
 13028  06CD  1D03               	skipz
 13029  06CE  2EDC               	goto	l1464
 13030  06CF  0AB0               	incf	___aomod@dividend+3,f
 13031  06D0  1D03               	skipz
 13032  06D1  2EDC               	goto	l1464
 13033  06D2  0AB1               	incf	___aomod@dividend+4,f
 13034  06D3  1D03               	skipz
 13035  06D4  2EDC               	goto	l1464
 13036  06D5  0AB2               	incf	___aomod@dividend+5,f
 13037  06D6  1D03               	skipz
 13038  06D7  2EDC               	goto	l1464
 13039  06D8  0AB3               	incf	___aomod@dividend+6,f
 13040  06D9  1D03               	skipz
 13041  06DA  2EDC               	goto	l1464
 13042  06DB  0AB4               	incf	___aomod@dividend+7,f
 13043  06DC                     l1464:	
 13044  06DC  0020               	movlb	0	; select bank0
 13045  06DD  082D               	movf	___aomod@dividend,w
 13046  06DE  00A5               	movwf	?___aomod
 13047  06DF  082E               	movf	___aomod@dividend+1,w
 13048  06E0  00A6               	movwf	?___aomod+1
 13049  06E1  082F               	movf	___aomod@dividend+2,w
 13050  06E2  00A7               	movwf	?___aomod+2
 13051  06E3  0830               	movf	___aomod@dividend+3,w
 13052  06E4  00A8               	movwf	?___aomod+3
 13053  06E5  0831               	movf	___aomod@dividend+4,w
 13054  06E6  00A9               	movwf	?___aomod+4
 13055  06E7  0832               	movf	___aomod@dividend+5,w
 13056  06E8  00AA               	movwf	?___aomod+5
 13057  06E9  0833               	movf	___aomod@dividend+6,w
 13058  06EA  00AB               	movwf	?___aomod+6
 13059  06EB  0834               	movf	___aomod@dividend+7,w
 13060  06EC  00AC               	movwf	?___aomod+7
 13061  06ED  0008               	return
 13062  06EE                     __end_of___aomod:	
 13063                           
 13064                           	psect	text79
 13065  0518                     __ptext79:	
 13066 ;; *************** function ___aodiv *****************
 13067 ;; Defined at:
 13068 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;  divisor         8    5[BANK0 ] long long 
 13071 ;;  dividend        8   13[BANK0 ] long long 
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  quotient        8   24[BANK0 ] long long 
 13074 ;;  sign            1   23[BANK0 ] unsigned char 
 13075 ;;  counter         1   22[BANK0 ] unsigned char 
 13076 ;; Return value:  Size  Location     Type
 13077 ;;                  8    5[BANK0 ] long long 
 13078 ;; Registers used:
 13079 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13080 ;; Tracked objects:
 13081 ;;		On entry : 0/0
 13082 ;;		On exit  : 0/0
 13083 ;;		Unchanged: 0/0
 13084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13085 ;;      Params:         0      16       0       0       0       0       0       0
 13086 ;;      Locals:         0      10       0       0       0       0       0       0
 13087 ;;      Temps:          0       1       0       0       0       0       0       0
 13088 ;;      Totals:         0      27       0       0       0       0       0       0
 13089 ;;Total ram usage:       27 bytes
 13090 ;; Hardware stack levels used:    1
 13091 ;; Hardware stack levels required when called:    7
 13092 ;; This function calls:
 13093 ;;		Nothing
 13094 ;; This function is called by:
 13095 ;;		_dtoa
 13096 ;; This function uses a non-reentrant model
 13097 ;;
 13098                           
 13099                           
 13100                           ;psect for function ___aodiv
 13101  0518                     ___aodiv:	
 13102                           
 13103                           ;incstack = 0
 13104 ;; hardware stack exceeded
 13105                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 13106  0518  0020               	movlb	0	; select bank0
 13107  0519  01B7               	clrf	___aodiv@sign
 13108  051A  3025               	movlw	low ___aodiv@divisor
 13109  051B  0086               	movwf	6
 13110  051C  3000               	movlw	high ___aodiv@divisor
 13111  051D  0087               	movwf	7
 13112  051E  3F47               	moviw [7]fsr1
 13113  051F  00B5               	movwf	??___aodiv
 13114  0520  1FB5               	btfss	??___aodiv,7
 13115  0521  2D44               	goto	l5736
 13116  0522  0020               	movlb	0	; select bank0
 13117  0523  09A5               	comf	___aodiv@divisor,f
 13118  0524  09A6               	comf	___aodiv@divisor+1,f
 13119  0525  09A7               	comf	___aodiv@divisor+2,f
 13120  0526  09A8               	comf	___aodiv@divisor+3,f
 13121  0527  09A9               	comf	___aodiv@divisor+4,f
 13122  0528  09AA               	comf	___aodiv@divisor+5,f
 13123  0529  09AB               	comf	___aodiv@divisor+6,f
 13124  052A  09AC               	comf	___aodiv@divisor+7,f
 13125  052B  0AA5               	incf	___aodiv@divisor,f
 13126  052C  1D03               	skipz
 13127  052D  2D41               	goto	u555lld
 13128  052E  0AA6               	incf	___aodiv@divisor+1,f
 13129  052F  1D03               	skipz
 13130  0530  2D41               	goto	u555lld
 13131  0531  0AA7               	incf	___aodiv@divisor+2,f
 13132  0532  1D03               	skipz
 13133  0533  2D41               	goto	u555lld
 13134  0534  0AA8               	incf	___aodiv@divisor+3,f
 13135  0535  1D03               	skipz
 13136  0536  2D41               	goto	u555lld
 13137  0537  0AA9               	incf	___aodiv@divisor+4,f
 13138  0538  1D03               	skipz
 13139  0539  2D41               	goto	u555lld
 13140  053A  0AAA               	incf	___aodiv@divisor+5,f
 13141  053B  1D03               	skipz
 13142  053C  2D41               	goto	u555lld
 13143  053D  0AAB               	incf	___aodiv@divisor+6,f
 13144  053E  1D03               	skipz
 13145  053F  2D41               	goto	u555lld
 13146  0540  0AAC               	incf	___aodiv@divisor+7,f
 13147  0541                     u555lld:	
 13148  0541  0020               	movlb	0	; select bank0
 13149  0542  01B7               	clrf	___aodiv@sign
 13150  0543  0AB7               	incf	___aodiv@sign,f
 13151  0544                     l5736:	
 13152  0544  302D               	movlw	low ___aodiv@dividend
 13153  0545  0086               	movwf	6
 13154  0546  3000               	movlw	high ___aodiv@dividend
 13155  0547  0087               	movwf	7
 13156  0548  3F47               	moviw [7]fsr1
 13157  0549  0020               	movlb	0	; select bank0
 13158  054A  00B5               	movwf	??___aodiv
 13159  054B  1FB5               	btfss	??___aodiv,7
 13160  054C  2D71               	goto	l5742
 13161  054D  0020               	movlb	0	; select bank0
 13162  054E  09AD               	comf	___aodiv@dividend,f
 13163  054F  09AE               	comf	___aodiv@dividend+1,f
 13164  0550  09AF               	comf	___aodiv@dividend+2,f
 13165  0551  09B0               	comf	___aodiv@dividend+3,f
 13166  0552  09B1               	comf	___aodiv@dividend+4,f
 13167  0553  09B2               	comf	___aodiv@dividend+5,f
 13168  0554  09B3               	comf	___aodiv@dividend+6,f
 13169  0555  09B4               	comf	___aodiv@dividend+7,f
 13170  0556  0AAD               	incf	___aodiv@dividend,f
 13171  0557  1D03               	skipz
 13172  0558  2D6C               	goto	l5740
 13173  0559  0AAE               	incf	___aodiv@dividend+1,f
 13174  055A  1D03               	skipz
 13175  055B  2D6C               	goto	l5740
 13176  055C  0AAF               	incf	___aodiv@dividend+2,f
 13177  055D  1D03               	skipz
 13178  055E  2D6C               	goto	l5740
 13179  055F  0AB0               	incf	___aodiv@dividend+3,f
 13180  0560  1D03               	skipz
 13181  0561  2D6C               	goto	l5740
 13182  0562  0AB1               	incf	___aodiv@dividend+4,f
 13183  0563  1D03               	skipz
 13184  0564  2D6C               	goto	l5740
 13185  0565  0AB2               	incf	___aodiv@dividend+5,f
 13186  0566  1D03               	skipz
 13187  0567  2D6C               	goto	l5740
 13188  0568  0AB3               	incf	___aodiv@dividend+6,f
 13189  0569  1D03               	skipz
 13190  056A  2D6C               	goto	l5740
 13191  056B  0AB4               	incf	___aodiv@dividend+7,f
 13192  056C                     l5740:	
 13193  056C  3001               	movlw	1
 13194  056D  0020               	movlb	0	; select bank0
 13195  056E  00B5               	movwf	??___aodiv
 13196  056F  0835               	movf	??___aodiv,w
 13197  0570  06B7               	xorwf	___aodiv@sign,f
 13198  0571                     l5742:	
 13199  0571  3038               	movlw	low ___aodiv@quotient
 13200  0572  0086               	movwf	6
 13201  0573  3000               	movlw	high ___aodiv@quotient
 13202  0574  0087               	movwf	7
 13203  0575  3008               	movlw	8
 13204  0576  0020               	movlb	0	; select bank0
 13205  0577  00B5               	movwf	??___aodiv
 13206  0578  3000               	movlw	0
 13207  0579                     u5580:	
 13208  0579  001E               	movwi fsr1++
 13209  057A  0BB5               	decfsz	??___aodiv,f
 13210  057B  2D79               	goto	u5580
 13211  057C  0825               	movf	___aodiv@divisor,w
 13212  057D  0426               	iorwf	___aodiv@divisor+1,w
 13213  057E  0427               	iorwf	___aodiv@divisor+2,w
 13214  057F  0428               	iorwf	___aodiv@divisor+3,w
 13215  0580  0429               	iorwf	___aodiv@divisor+4,w
 13216  0581  042A               	iorwf	___aodiv@divisor+5,w
 13217  0582  042B               	iorwf	___aodiv@divisor+6,w
 13218  0583  042C               	iorwf	___aodiv@divisor+7,w
 13219  0584  1903               	skipnz
 13220  0585  2DDC               	goto	l5764
 13221  0586  01B6               	clrf	___aodiv@counter
 13222  0587  0AB6               	incf	___aodiv@counter,f
 13223  0588                     l5752:	
 13224  0588  1BAC               	btfsc	___aodiv@divisor+7,7
 13225  0589  2D97               	goto	l5754
 13226  058A  35A5               	lslf	___aodiv@divisor,f
 13227  058B  0DA6               	rlf	___aodiv@divisor+1,f
 13228  058C  0DA7               	rlf	___aodiv@divisor+2,f
 13229  058D  0DA8               	rlf	___aodiv@divisor+3,f
 13230  058E  0DA9               	rlf	___aodiv@divisor+4,f
 13231  058F  0DAA               	rlf	___aodiv@divisor+5,f
 13232  0590  0DAB               	rlf	___aodiv@divisor+6,f
 13233  0591  0DAC               	rlf	___aodiv@divisor+7,f
 13234  0592  3001               	movlw	1
 13235  0593  00B5               	movwf	??___aodiv
 13236  0594  0835               	movf	??___aodiv,w
 13237  0595  07B6               	addwf	___aodiv@counter,f
 13238  0596  2D88               	goto	l5752
 13239  0597                     l5754:	
 13240  0597  35B8               	lslf	___aodiv@quotient,f
 13241  0598  0DB9               	rlf	___aodiv@quotient+1,f
 13242  0599  0DBA               	rlf	___aodiv@quotient+2,f
 13243  059A  0DBB               	rlf	___aodiv@quotient+3,f
 13244  059B  0DBC               	rlf	___aodiv@quotient+4,f
 13245  059C  0DBD               	rlf	___aodiv@quotient+5,f
 13246  059D  0DBE               	rlf	___aodiv@quotient+6,f
 13247  059E  0DBF               	rlf	___aodiv@quotient+7,f
 13248  059F  082C               	movf	___aodiv@divisor+7,w
 13249  05A0  0234               	subwf	___aodiv@dividend+7,w
 13250  05A1  1D03               	skipz
 13251  05A2  2DBD               	goto	u5615
 13252  05A3  082B               	movf	___aodiv@divisor+6,w
 13253  05A4  0233               	subwf	___aodiv@dividend+6,w
 13254  05A5  1D03               	skipz
 13255  05A6  2DBD               	goto	u5615
 13256  05A7  082A               	movf	___aodiv@divisor+5,w
 13257  05A8  0232               	subwf	___aodiv@dividend+5,w
 13258  05A9  1D03               	skipz
 13259  05AA  2DBD               	goto	u5615
 13260  05AB  0829               	movf	___aodiv@divisor+4,w
 13261  05AC  0231               	subwf	___aodiv@dividend+4,w
 13262  05AD  1D03               	skipz
 13263  05AE  2DBD               	goto	u5615
 13264  05AF  0828               	movf	___aodiv@divisor+3,w
 13265  05B0  0230               	subwf	___aodiv@dividend+3,w
 13266  05B1  1D03               	skipz
 13267  05B2  2DBD               	goto	u5615
 13268  05B3  0827               	movf	___aodiv@divisor+2,w
 13269  05B4  022F               	subwf	___aodiv@dividend+2,w
 13270  05B5  1D03               	skipz
 13271  05B6  2DBD               	goto	u5615
 13272  05B7  0826               	movf	___aodiv@divisor+1,w
 13273  05B8  022E               	subwf	___aodiv@dividend+1,w
 13274  05B9  1D03               	skipz
 13275  05BA  2DBD               	goto	u5615
 13276  05BB  0825               	movf	___aodiv@divisor,w
 13277  05BC  022D               	subwf	___aodiv@dividend,w
 13278  05BD                     u5615:	
 13279  05BD  1C03               	skipc
 13280  05BE  2DD0               	goto	l5762
 13281  05BF  0825               	movf	___aodiv@divisor,w
 13282  05C0  02AD               	subwf	___aodiv@dividend,f
 13283  05C1  0826               	movf	___aodiv@divisor+1,w
 13284  05C2  3BAE               	subwfb	___aodiv@dividend+1,f
 13285  05C3  0827               	movf	___aodiv@divisor+2,w
 13286  05C4  3BAF               	subwfb	___aodiv@dividend+2,f
 13287  05C5  0828               	movf	___aodiv@divisor+3,w
 13288  05C6  3BB0               	subwfb	___aodiv@dividend+3,f
 13289  05C7  0829               	movf	___aodiv@divisor+4,w
 13290  05C8  3BB1               	subwfb	___aodiv@dividend+4,f
 13291  05C9  082A               	movf	___aodiv@divisor+5,w
 13292  05CA  3BB2               	subwfb	___aodiv@dividend+5,f
 13293  05CB  082B               	movf	___aodiv@divisor+6,w
 13294  05CC  3BB3               	subwfb	___aodiv@dividend+6,f
 13295  05CD  082C               	movf	___aodiv@divisor+7,w
 13296  05CE  3BB4               	subwfb	___aodiv@dividend+7,f
 13297  05CF  1438               	bsf	___aodiv@quotient,0
 13298  05D0                     l5762:	
 13299  05D0  36AC               	lsrf	___aodiv@divisor+7,f
 13300  05D1  0CAB               	rrf	___aodiv@divisor+6,f
 13301  05D2  0CAA               	rrf	___aodiv@divisor+5,f
 13302  05D3  0CA9               	rrf	___aodiv@divisor+4,f
 13303  05D4  0CA8               	rrf	___aodiv@divisor+3,f
 13304  05D5  0CA7               	rrf	___aodiv@divisor+2,f
 13305  05D6  0CA6               	rrf	___aodiv@divisor+1,f
 13306  05D7  0CA5               	rrf	___aodiv@divisor,f
 13307  05D8  3001               	movlw	1
 13308  05D9  02B6               	subwf	___aodiv@counter,f
 13309  05DA  1D03               	btfss	3,2
 13310  05DB  2D97               	goto	l5754
 13311  05DC                     l5764:	
 13312  05DC  0837               	movf	___aodiv@sign,w
 13313  05DD  1903               	btfsc	3,2
 13314  05DE  2DFD               	goto	l1451
 13315  05DF  09B8               	comf	___aodiv@quotient,f
 13316  05E0  09B9               	comf	___aodiv@quotient+1,f
 13317  05E1  09BA               	comf	___aodiv@quotient+2,f
 13318  05E2  09BB               	comf	___aodiv@quotient+3,f
 13319  05E3  09BC               	comf	___aodiv@quotient+4,f
 13320  05E4  09BD               	comf	___aodiv@quotient+5,f
 13321  05E5  09BE               	comf	___aodiv@quotient+6,f
 13322  05E6  09BF               	comf	___aodiv@quotient+7,f
 13323  05E7  0AB8               	incf	___aodiv@quotient,f
 13324  05E8  1D03               	skipz
 13325  05E9  2DFD               	goto	l1451
 13326  05EA  0AB9               	incf	___aodiv@quotient+1,f
 13327  05EB  1D03               	skipz
 13328  05EC  2DFD               	goto	l1451
 13329  05ED  0ABA               	incf	___aodiv@quotient+2,f
 13330  05EE  1D03               	skipz
 13331  05EF  2DFD               	goto	l1451
 13332  05F0  0ABB               	incf	___aodiv@quotient+3,f
 13333  05F1  1D03               	skipz
 13334  05F2  2DFD               	goto	l1451
 13335  05F3  0ABC               	incf	___aodiv@quotient+4,f
 13336  05F4  1D03               	skipz
 13337  05F5  2DFD               	goto	l1451
 13338  05F6  0ABD               	incf	___aodiv@quotient+5,f
 13339  05F7  1D03               	skipz
 13340  05F8  2DFD               	goto	l1451
 13341  05F9  0ABE               	incf	___aodiv@quotient+6,f
 13342  05FA  1D03               	skipz
 13343  05FB  2DFD               	goto	l1451
 13344  05FC  0ABF               	incf	___aodiv@quotient+7,f
 13345  05FD                     l1451:	
 13346  05FD  0020               	movlb	0	; select bank0
 13347  05FE  0838               	movf	___aodiv@quotient,w
 13348  05FF  00A5               	movwf	?___aodiv
 13349  0600  0839               	movf	___aodiv@quotient+1,w
 13350  0601  00A6               	movwf	?___aodiv+1
 13351  0602  083A               	movf	___aodiv@quotient+2,w
 13352  0603  00A7               	movwf	?___aodiv+2
 13353  0604  083B               	movf	___aodiv@quotient+3,w
 13354  0605  00A8               	movwf	?___aodiv+3
 13355  0606  083C               	movf	___aodiv@quotient+4,w
 13356  0607  00A9               	movwf	?___aodiv+4
 13357  0608  083D               	movf	___aodiv@quotient+5,w
 13358  0609  00AA               	movwf	?___aodiv+5
 13359  060A  083E               	movf	___aodiv@quotient+6,w
 13360  060B  00AB               	movwf	?___aodiv+6
 13361  060C  083F               	movf	___aodiv@quotient+7,w
 13362  060D  00AC               	movwf	?___aodiv+7
 13363  060E  0008               	return
 13364  060F                     __end_of___aodiv:	
 13365                           
 13366                           	psect	text80
 13367  15A5                     __ptext80:	
 13368 ;; *************** function _MTOUCH_Button_Buttonmask_Get *****************
 13369 ;; Defined at:
 13370 ;;		line 463 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13371 ;; Parameters:    Size  Location     Type
 13372 ;;		None
 13373 ;; Auto vars:     Size  Location     Type
 13374 ;;  i               1   11[BANK0 ] unsigned char 
 13375 ;;  output          1   10[BANK0 ] unsigned char 
 13376 ;; Return value:  Size  Location     Type
 13377 ;;                  1    wreg      unsigned char 
 13378 ;; Registers used:
 13379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13385 ;;      Params:         0       0       0       0       0       0       0       0
 13386 ;;      Locals:         0       2       0       0       0       0       0       0
 13387 ;;      Temps:          0       2       0       0       0       0       0       0
 13388 ;;      Totals:         0       4       0       0       0       0       0       0
 13389 ;;Total ram usage:        4 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    8
 13392 ;; This function calls:
 13393 ;;		_MTOUCH_Button_isPressed
 13394 ;; This function is called by:
 13395 ;;		_myButtonPressedCallback
 13396 ;;		_myButtonReleasedCallback
 13397 ;; This function uses a non-reentrant model
 13398 ;;
 13399                           
 13400                           
 13401                           ;psect for function _MTOUCH_Button_Buttonmask_Get
 13402  15A5                     _MTOUCH_Button_Buttonmask_Get:	
 13403                           
 13404                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     mtouch_buttonmask_t output = 0;
 13405                           
 13406                           ;incstack = 0
 13407                           ; Regs used in _MTOUCH_Button_Buttonmask_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13408  15A5  0020               	movlb	0	; select bank0
 13409  15A6  01AA               	clrf	MTOUCH_Button_Buttonmask_Get@output
 13410                           
 13411                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:     for (uint8_t i = 0; i < 3u; i++)
 13412  15A7  01AB               	clrf	MTOUCH_Button_Buttonmask_Get@i
 13413  15A8                     l6340:	
 13414                           
 13415                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 469:         if (MTOUCH_Button_isPressed(i) == 1)
 13416  15A8  082B               	movf	MTOUCH_Button_Buttonmask_Get@i,w
 13417  15A9  3196  268B  3195   	fcall	_MTOUCH_Button_isPressed
 13418  15AC  3A01               	xorlw	1
 13419  15AD  1D03               	skipz
 13420  15AE  2DBB               	goto	l614
 13421                           
 13422                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 471:             output |= (mtouch_buttonmask_t)0x01 << i;
 13423  15AF  3001               	movlw	1
 13424  15B0  0020               	movlb	0	; select bank0
 13425  15B1  00A8               	movwf	??_MTOUCH_Button_Buttonmask_Get
 13426  15B2  0A2B               	incf	MTOUCH_Button_Buttonmask_Get@i,w
 13427  15B3  2DB5               	goto	u6644
 13428  15B4                     u6645:	
 13429  15B4  35A8               	lslf	??_MTOUCH_Button_Buttonmask_Get,f
 13430  15B5                     u6644:	
 13431  15B5  0B89               	decfsz	9,f
 13432  15B6  2DB4               	goto	u6645
 13433  15B7  0828               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 13434  15B8  00A9               	movwf	??_MTOUCH_Button_Buttonmask_Get+1
 13435  15B9  0829               	movf	??_MTOUCH_Button_Buttonmask_Get+1,w
 13436  15BA  04AA               	iorwf	MTOUCH_Button_Buttonmask_Get@output,f
 13437  15BB                     l614:	
 13438                           ;mcc_generated_files/mtouch/mtouch_button.c: 472:         }
 13439                           
 13440                           
 13441                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:     }
 13442  15BB  3001               	movlw	1
 13443  15BC  0020               	movlb	0	; select bank0
 13444  15BD  00A8               	movwf	??_MTOUCH_Button_Buttonmask_Get
 13445  15BE  0828               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 13446  15BF  07AB               	addwf	MTOUCH_Button_Buttonmask_Get@i,f
 13447  15C0  3003               	movlw	3
 13448  15C1  022B               	subwf	MTOUCH_Button_Buttonmask_Get@i,w
 13449  15C2  1C03               	skipc
 13450  15C3  2DA8               	goto	l6340
 13451                           
 13452                           ;mcc_generated_files/mtouch/mtouch_button.c: 474:     return output;
 13453  15C4  082A               	movf	MTOUCH_Button_Buttonmask_Get@output,w
 13454  15C5  0008               	return
 13455  15C6                     __end_of_MTOUCH_Button_Buttonmask_Get:	
 13456                           
 13457                           	psect	text81
 13458  168B                     __ptext81:	
 13459 ;; *************** function _MTOUCH_Button_isPressed *****************
 13460 ;; Defined at:
 13461 ;;		line 416 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;  name            1    wreg     enum E3069
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;  name            1    7[BANK0 ] enum E3069
 13466 ;; Return value:  Size  Location     Type
 13467 ;;                  1    wreg      _Bool 
 13468 ;; Registers used:
 13469 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13470 ;; Tracked objects:
 13471 ;;		On entry : 0/0
 13472 ;;		On exit  : 0/0
 13473 ;;		Unchanged: 0/0
 13474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13475 ;;      Params:         0       0       0       0       0       0       0       0
 13476 ;;      Locals:         0       2       0       0       0       0       0       0
 13477 ;;      Temps:          0       1       0       0       0       0       0       0
 13478 ;;      Totals:         0       3       0       0       0       0       0       0
 13479 ;;Total ram usage:        3 bytes
 13480 ;; Hardware stack levels used:    1
 13481 ;; Hardware stack levels required when called:    7
 13482 ;; This function calls:
 13483 ;;		Nothing
 13484 ;; This function is called by:
 13485 ;;		_MTOUCH_Button_Buttonmask_Get
 13486 ;;		_touch_example
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           
 13491                           ;psect for function _MTOUCH_Button_isPressed
 13492  168B                     _MTOUCH_Button_isPressed:	
 13493                           
 13494                           ;incstack = 0
 13495                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 13496                           ;MTOUCH_Button_isPressed@name stored from wreg
 13497  168B  0020               	movlb	0	; select bank0
 13498  168C  00A7               	movwf	MTOUCH_Button_isPressed@name
 13499                           
 13500                           ;mcc_generated_files/mtouch/mtouch_button.c: 416: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 417: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 418:     if(name < 3u)
 13501  168D  3003               	movlw	3
 13502  168E  0227               	subwf	MTOUCH_Button_isPressed@name,w
 13503  168F  1803               	skipnc
 13504  1690  2EB5               	goto	l5988
 13505                           
 13506                           ;mcc_generated_files/mtouch/mtouch_button.c: 419:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed || mtouch_button[name].state == MTOUCH_BUTTON
      +                          _STATE_releaseDebounce) ? 1 : 0);
 13507  1691  01A6               	clrf	_MTOUCH_Button_isPressed$1152
 13508  1692  0AA6               	incf	_MTOUCH_Button_isPressed$1152,f
 13509  1693  0827               	movf	MTOUCH_Button_isPressed@name,w
 13510  1694  00A5               	movwf	??_MTOUCH_Button_isPressed
 13511  1695  3003               	movlw	3
 13512  1696                     u6065:	
 13513  1696  35A5               	lslf	??_MTOUCH_Button_isPressed,f
 13514  1697  3EFF               	addlw	-1
 13515  1698  1D03               	skipz
 13516  1699  2E96               	goto	u6065
 13517  169A  3525               	lslf	??_MTOUCH_Button_isPressed,w
 13518  169B  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 13519  169C  0086               	movwf	6
 13520  169D  3001               	movlw	1	; select bank3/4
 13521  169E  0087               	movwf	7
 13522  169F  3003               	movlw	3
 13523  16A0  0601               	xorwf	1,w
 13524  16A1  1903               	btfsc	3,2
 13525  16A2  2EB3               	goto	l5982
 13526  16A3  0827               	movf	MTOUCH_Button_isPressed@name,w
 13527  16A4  00A5               	movwf	??_MTOUCH_Button_isPressed
 13528  16A5  3003               	movlw	3
 13529  16A6                     u6085:	
 13530  16A6  35A5               	lslf	??_MTOUCH_Button_isPressed,f
 13531  16A7  3EFF               	addlw	-1
 13532  16A8  1D03               	skipz
 13533  16A9  2EA6               	goto	u6085
 13534  16AA  3525               	lslf	??_MTOUCH_Button_isPressed,w
 13535  16AB  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 13536  16AC  0086               	movwf	6
 13537  16AD  3001               	movlw	1	; select bank3/4
 13538  16AE  0087               	movwf	7
 13539  16AF  3004               	movlw	4
 13540  16B0  0601               	xorwf	1,w
 13541  16B1  1D03               	btfss	3,2
 13542  16B2  01A6               	clrf	_MTOUCH_Button_isPressed$1152
 13543  16B3                     l5982:	
 13544  16B3  0826               	movf	_MTOUCH_Button_isPressed$1152,w
 13545  16B4  0008               	return
 13546  16B5                     l5988:	
 13547                           
 13548                           ;mcc_generated_files/mtouch/mtouch_button.c: 421:         return 0;
 13549  16B5  3000               	movlw	0
 13550  16B6  0008               	return
 13551  16B7                     __end_of_MTOUCH_Button_isPressed:	
 13552                           
 13553                           	psect	text82
 13554  17C9                     __ptext82:	
 13555 ;; *************** function _MTOUCH_Button_Initialize *****************
 13556 ;; Defined at:
 13557 ;;		line 165 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  name            1    wreg     enum E3069
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;  name            1   13[BANK0 ] enum E3069
 13562 ;;  button          1   14[BANK0 ] PTR struct .
 13563 ;;		 -> mtouch_button(48), 
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  1    wreg      void 
 13566 ;; Registers used:
 13567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13573 ;;      Params:         0       0       0       0       0       0       0       0
 13574 ;;      Locals:         0       2       0       0       0       0       0       0
 13575 ;;      Temps:          0       2       0       0       0       0       0       0
 13576 ;;      Totals:         0       4       0       0       0       0       0       0
 13577 ;;Total ram usage:        4 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; Hardware stack levels required when called:    9
 13580 ;; This function calls:
 13581 ;;		_MTOUCH_Sensor_Calibrate
 13582 ;; This function is called by:
 13583 ;;		_MTOUCH_Button_InitializeAll
 13584 ;;		_Button_Service
 13585 ;;		_Button_State_NotPressed
 13586 ;;		_Button_State_Pressed
 13587 ;; This function uses a non-reentrant model
 13588 ;;
 13589                           
 13590                           
 13591                           ;psect for function _MTOUCH_Button_Initialize
 13592  17C9                     _MTOUCH_Button_Initialize:	
 13593                           
 13594                           ;incstack = 0
 13595                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13596                           ;MTOUCH_Button_Initialize@name stored from wreg
 13597  17C9  0020               	movlb	0	; select bank0
 13598  17CA  00AD               	movwf	MTOUCH_Button_Initialize@name
 13599                           
 13600                           ;mcc_generated_files/mtouch/mtouch_button.c: 165: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 166: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 167:     mtouch_button_t* button = &mtouch_button[name];
 13601  17CB  082D               	movf	MTOUCH_Button_Initialize@name,w
 13602  17CC  00AB               	movwf	??_MTOUCH_Button_Initialize
 13603  17CD  3003               	movlw	3
 13604  17CE                     u6745:	
 13605  17CE  35AB               	lslf	??_MTOUCH_Button_Initialize,f
 13606  17CF  3EFF               	addlw	-1
 13607  17D0  1D03               	skipz
 13608  17D1  2FCE               	goto	u6745
 13609  17D2  352B               	lslf	??_MTOUCH_Button_Initialize,w
 13610  17D3  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 13611  17D4  00AC               	movwf	??_MTOUCH_Button_Initialize+1
 13612  17D5  082C               	movf	??_MTOUCH_Button_Initialize+1,w
 13613  17D6  00AE               	movwf	MTOUCH_Button_Initialize@button
 13614                           
 13615                           ;mcc_generated_files/mtouch/mtouch_button.c: 169:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 13616  17D7  082E               	movf	MTOUCH_Button_Initialize@button,w
 13617  17D8  3E02               	addlw	2
 13618  17D9  0086               	movwf	6
 13619  17DA  3001               	movlw	1	; select bank2/3
 13620  17DB  0087               	movwf	7
 13621  17DC  0181               	clrf	1
 13622                           
 13623                           ;mcc_generated_files/mtouch/mtouch_button.c: 170:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 13624  17DD  082E               	movf	MTOUCH_Button_Initialize@button,w
 13625  17DE  3E05               	addlw	5
 13626  17DF  0086               	movwf	6
 13627  17E0  3001               	movlw	1	; select bank2/3
 13628  17E1  0087               	movwf	7
 13629  17E2  3000               	movlw	0
 13630  17E3  3FC0               	movwi [0]fsr1
 13631  17E4  3000               	movlw	0
 13632  17E5  3FC1               	movwi [1]fsr1
 13633  17E6  3FC2               	movwi [2]fsr1
 13634  17E7  3FC3               	movwi [3]fsr1
 13635                           
 13636                           ;mcc_generated_files/mtouch/mtouch_button.c: 171:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 13637  17E8  082E               	movf	MTOUCH_Button_Initialize@button,w
 13638  17E9  3E0A               	addlw	10
 13639  17EA  0086               	movwf	6
 13640  17EB  3001               	movlw	1	; select bank2/3
 13641  17EC  0087               	movwf	7
 13642  17ED  3000               	movlw	0
 13643  17EE  3FC0               	movwi [0]fsr1
 13644  17EF  3FC1               	movwi [1]fsr1
 13645                           
 13646                           ;mcc_generated_files/mtouch/mtouch_button.c: 172:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 13647  17F0  082E               	movf	MTOUCH_Button_Initialize@button,w
 13648  17F1  3E0C               	addlw	12
 13649  17F2  0086               	movwf	6
 13650  17F3  3001               	movlw	1	; select bank2/3
 13651  17F4  0087               	movwf	7
 13652  17F5  3000               	movlw	0
 13653  17F6  3FC0               	movwi [0]fsr1
 13654  17F7  3FC1               	movwi [1]fsr1
 13655                           
 13656                           ;mcc_generated_files/mtouch/mtouch_button.c: 174:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 13657  17F8  0A2E               	incf	MTOUCH_Button_Initialize@button,w
 13658  17F9  0086               	movwf	6
 13659  17FA  3001               	movlw	1	; select bank2/3
 13660  17FB  0087               	movwf	7
 13661  17FC  0801               	movf	1,w
 13662  17FD  3193  2398         	fcall	_MTOUCH_Sensor_Calibrate
 13663  17FF  0008               	return
 13664  1800                     __end_of_MTOUCH_Button_Initialize:	
 13665                           
 13666                           	psect	text83
 13667  1398                     __ptext83:	
 13668 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 13669 ;; Defined at:
 13670 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13671 ;; Parameters:    Size  Location     Type
 13672 ;;  sensor          1    wreg     enum E2878
 13673 ;; Auto vars:     Size  Location     Type
 13674 ;;  sensor          1   10[BANK0 ] enum E2878
 13675 ;; Return value:  Size  Location     Type
 13676 ;;                  1    wreg      void 
 13677 ;; Registers used:
 13678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13679 ;; Tracked objects:
 13680 ;;		On entry : 0/0
 13681 ;;		On exit  : 0/0
 13682 ;;		Unchanged: 0/0
 13683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13684 ;;      Params:         0       0       0       0       0       0       0       0
 13685 ;;      Locals:         0       1       0       0       0       0       0       0
 13686 ;;      Temps:          0       1       0       0       0       0       0       0
 13687 ;;      Totals:         0       2       0       0       0       0       0       0
 13688 ;;Total ram usage:        2 bytes
 13689 ;; Hardware stack levels used:    1
 13690 ;; Hardware stack levels required when called:    8
 13691 ;; This function calls:
 13692 ;;		___bmul
 13693 ;; This function is called by:
 13694 ;;		_MTOUCH_Sensor_Initialize
 13695 ;;		_MTOUCH_Button_Initialize
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           
 13700                           ;psect for function _MTOUCH_Sensor_Calibrate
 13701  1398                     _MTOUCH_Sensor_Calibrate:	
 13702                           
 13703                           ;incstack = 0
 13704                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13705                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 13706  1398  0020               	movlb	0	; select bank0
 13707  1399  00AA               	movwf	MTOUCH_Sensor_Calibrate@sensor
 13708                           
 13709                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 13710  139A  3003               	movlw	3
 13711  139B  022A               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 13712  139C  1803               	skipnc
 13713  139D  0008               	return
 13714                           
 13715                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 13716  139E  3009               	movlw	9
 13717  139F  00A9               	movwf	??_MTOUCH_Sensor_Calibrate
 13718  13A0  0829               	movf	??_MTOUCH_Sensor_Calibrate,w
 13719  13A1  00A5               	movwf	___bmul@multiplicand
 13720  13A2  082A               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 13721  13A3  3193  2362         	fcall	___bmul
 13722  13A5  3ED8               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 13723  13A6  0086               	movwf	6
 13724  13A7  3001               	movlw	1	; select bank3/4
 13725  13A8  0087               	movwf	7
 13726  13A9  1101               	bcf	1,2
 13727  13AA  0008               	return
 13728  13AB                     __end_of_MTOUCH_Sensor_Calibrate:	
 13729                           
 13730                           	psect	text84
 13731  0CFD                     __ptext84:	
 13732 ;; *************** function _Button_Baseline_Update *****************
 13733 ;; Defined at:
 13734 ;;		line 523 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13735 ;; Parameters:    Size  Location     Type
 13736 ;;  button          1    wreg     PTR struct .
 13737 ;;		 -> mtouch_button(48), 
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;  button          1   11[BANK0 ] PTR struct .
 13740 ;;		 -> mtouch_button(48), 
 13741 ;; Return value:  Size  Location     Type
 13742 ;;                  1    wreg      void 
 13743 ;; Registers used:
 13744 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13745 ;; Tracked objects:
 13746 ;;		On entry : 0/0
 13747 ;;		On exit  : 0/0
 13748 ;;		Unchanged: 0/0
 13749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13750 ;;      Params:         0       0       0       0       0       0       0       0
 13751 ;;      Locals:         0       1       0       0       0       0       0       0
 13752 ;;      Temps:          0       6       0       0       0       0       0       0
 13753 ;;      Totals:         0       7       0       0       0       0       0       0
 13754 ;;Total ram usage:        7 bytes
 13755 ;; Hardware stack levels used:    1
 13756 ;; Hardware stack levels required when called:    7
 13757 ;; This function calls:
 13758 ;;		Nothing
 13759 ;; This function is called by:
 13760 ;;		_Button_State_Initializing
 13761 ;;		_Button_State_NotPressed
 13762 ;; This function uses a non-reentrant model
 13763 ;;
 13764                           
 13765                           
 13766                           ;psect for function _Button_Baseline_Update
 13767  0CFD                     _Button_Baseline_Update:	
 13768                           
 13769                           ;incstack = 0
 13770                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13771                           ;Button_Baseline_Update@button stored from wreg
 13772  0CFD  0020               	movlb	0	; select bank0
 13773  0CFE  00AB               	movwf	Button_Baseline_Update@button
 13774                           
 13775                           ;mcc_generated_files/mtouch/mtouch_button.c: 523: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 524: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 525:     if (GIE == (uint8_t)1)
 13776  0CFF  1F8B               	btfss	11,7	;volatile
 13777  0D00  2D48               	goto	l6442
 13778                           
 13779                           ;mcc_generated_files/mtouch/mtouch_button.c: 526:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 527:         GIE = (uint8_t)0;
 13780  0D01  138B               	bcf	11,7	;volatile
 13781                           
 13782                           ;mcc_generated_files/mtouch/mtouch_button.c: 528:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 13783  0D02  082B               	movf	Button_Baseline_Update@button,w
 13784  0D03  3E05               	addlw	5
 13785  0D04  0086               	movwf	6
 13786  0D05  3001               	movlw	1	; select bank2/3
 13787  0D06  0087               	movwf	7
 13788  0D07  3F40               	moviw [0]fsr1
 13789  0D08  00A5               	movwf	??_Button_Baseline_Update
 13790  0D09  3F41               	moviw [1]fsr1
 13791  0D0A  00A6               	movwf	??_Button_Baseline_Update+1
 13792  0D0B  3F42               	moviw [2]fsr1
 13793  0D0C  00A7               	movwf	??_Button_Baseline_Update+2
 13794  0D0D  3F43               	moviw [3]fsr1
 13795  0D0E  00A8               	movwf	??_Button_Baseline_Update+3
 13796  0D0F  3004               	movlw	4
 13797  0D10                     u6775:	
 13798  0D10  36A8               	lsrf	??_Button_Baseline_Update+3,f
 13799  0D11  0CA7               	rrf	??_Button_Baseline_Update+2,f
 13800  0D12  0CA6               	rrf	??_Button_Baseline_Update+1,f
 13801  0D13  0CA5               	rrf	??_Button_Baseline_Update,f
 13802  0D14  0B89               	decfsz	9,f
 13803  0D15  2D10               	goto	u6775
 13804  0D16  082B               	movf	Button_Baseline_Update@button,w
 13805  0D17  3E05               	addlw	5
 13806  0D18  0086               	movwf	6
 13807  0D19  3001               	movlw	1	; select bank2/3
 13808  0D1A  0087               	movwf	7
 13809  0D1B  0825               	movf	??_Button_Baseline_Update,w
 13810  0D1C  0281               	subwf	1,f
 13811  0D1D  3141               	addfsr 1,1
 13812  0D1E  0826               	movf	??_Button_Baseline_Update+1,w
 13813  0D1F  3B81               	subwfb	1,f
 13814  0D20  3141               	addfsr 1,1
 13815  0D21  0827               	movf	??_Button_Baseline_Update+2,w
 13816  0D22  3B81               	subwfb	1,f
 13817  0D23  3141               	addfsr 1,1
 13818  0D24  0828               	movf	??_Button_Baseline_Update+3,w
 13819  0D25  3B81               	subwfb	1,f
 13820  0D26  317D               	addfsr 1,-3
 13821                           
 13822                           ;mcc_generated_files/mtouch/mtouch_button.c: 529:         button->baseline += button->re
      +                          ading;
 13823  0D27  082B               	movf	Button_Baseline_Update@button,w
 13824  0D28  3E03               	addlw	3
 13825  0D29  0086               	movwf	6
 13826  0D2A  3001               	movlw	1	; select bank2/3
 13827  0D2B  0087               	movwf	7
 13828  0D2C  3F40               	moviw [0]fsr1
 13829  0D2D  00A5               	movwf	??_Button_Baseline_Update
 13830  0D2E  3F41               	moviw [1]fsr1
 13831  0D2F  00A6               	movwf	??_Button_Baseline_Update+1
 13832  0D30  0825               	movf	??_Button_Baseline_Update,w
 13833  0D31  00A7               	movwf	??_Button_Baseline_Update+2
 13834  0D32  0826               	movf	??_Button_Baseline_Update+1,w
 13835  0D33  00A8               	movwf	??_Button_Baseline_Update+3
 13836  0D34  01A9               	clrf	??_Button_Baseline_Update+4
 13837  0D35  01AA               	clrf	??_Button_Baseline_Update+5
 13838  0D36  082B               	movf	Button_Baseline_Update@button,w
 13839  0D37  3E05               	addlw	5
 13840  0D38  0086               	movwf	6
 13841  0D39  3001               	movlw	1	; select bank2/3
 13842  0D3A  0087               	movwf	7
 13843  0D3B  0827               	movf	??_Button_Baseline_Update+2,w
 13844  0D3C  0781               	addwf	1,f
 13845  0D3D  3141               	addfsr 1,1
 13846  0D3E  0828               	movf	??_Button_Baseline_Update+3,w
 13847  0D3F  3D81               	addwfc	1,f
 13848  0D40  3141               	addfsr 1,1
 13849  0D41  0829               	movf	??_Button_Baseline_Update+4,w
 13850  0D42  3D81               	addwfc	1,f
 13851  0D43  3141               	addfsr 1,1
 13852  0D44  082A               	movf	??_Button_Baseline_Update+5,w
 13853  0D45  3D81               	addwfc	1,f
 13854                           
 13855                           ;mcc_generated_files/mtouch/mtouch_button.c: 530:         GIE = (uint8_t)1;
 13856  0D46  178B               	bsf	11,7	;volatile
 13857                           
 13858                           ;mcc_generated_files/mtouch/mtouch_button.c: 531:     }
 13859  0D47  0008               	return
 13860  0D48                     l6442:	
 13861                           
 13862                           ;mcc_generated_files/mtouch/mtouch_button.c: 533:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 534:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 13863  0D48  082B               	movf	Button_Baseline_Update@button,w
 13864  0D49  3E05               	addlw	5
 13865  0D4A  0086               	movwf	6
 13866  0D4B  3001               	movlw	1	; select bank2/3
 13867  0D4C  0087               	movwf	7
 13868  0D4D  3F40               	moviw [0]fsr1
 13869  0D4E  00A5               	movwf	??_Button_Baseline_Update
 13870  0D4F  3F41               	moviw [1]fsr1
 13871  0D50  00A6               	movwf	??_Button_Baseline_Update+1
 13872  0D51  3F42               	moviw [2]fsr1
 13873  0D52  00A7               	movwf	??_Button_Baseline_Update+2
 13874  0D53  3F43               	moviw [3]fsr1
 13875  0D54  00A8               	movwf	??_Button_Baseline_Update+3
 13876  0D55  3004               	movlw	4
 13877  0D56                     u6785:	
 13878  0D56  36A8               	lsrf	??_Button_Baseline_Update+3,f
 13879  0D57  0CA7               	rrf	??_Button_Baseline_Update+2,f
 13880  0D58  0CA6               	rrf	??_Button_Baseline_Update+1,f
 13881  0D59  0CA5               	rrf	??_Button_Baseline_Update,f
 13882  0D5A  0B89               	decfsz	9,f
 13883  0D5B  2D56               	goto	u6785
 13884  0D5C  082B               	movf	Button_Baseline_Update@button,w
 13885  0D5D  3E05               	addlw	5
 13886  0D5E  0086               	movwf	6
 13887  0D5F  3001               	movlw	1	; select bank2/3
 13888  0D60  0087               	movwf	7
 13889  0D61  0825               	movf	??_Button_Baseline_Update,w
 13890  0D62  0281               	subwf	1,f
 13891  0D63  3141               	addfsr 1,1
 13892  0D64  0826               	movf	??_Button_Baseline_Update+1,w
 13893  0D65  3B81               	subwfb	1,f
 13894  0D66  3141               	addfsr 1,1
 13895  0D67  0827               	movf	??_Button_Baseline_Update+2,w
 13896  0D68  3B81               	subwfb	1,f
 13897  0D69  3141               	addfsr 1,1
 13898  0D6A  0828               	movf	??_Button_Baseline_Update+3,w
 13899  0D6B  3B81               	subwfb	1,f
 13900  0D6C  317D               	addfsr 1,-3
 13901                           
 13902                           ;mcc_generated_files/mtouch/mtouch_button.c: 535:         button->baseline += button->re
      +                          ading;
 13903  0D6D  082B               	movf	Button_Baseline_Update@button,w
 13904  0D6E  3E03               	addlw	3
 13905  0D6F  0086               	movwf	6
 13906  0D70  3001               	movlw	1	; select bank2/3
 13907  0D71  0087               	movwf	7
 13908  0D72  3F40               	moviw [0]fsr1
 13909  0D73  00A5               	movwf	??_Button_Baseline_Update
 13910  0D74  3F41               	moviw [1]fsr1
 13911  0D75  00A6               	movwf	??_Button_Baseline_Update+1
 13912  0D76  0825               	movf	??_Button_Baseline_Update,w
 13913  0D77  00A7               	movwf	??_Button_Baseline_Update+2
 13914  0D78  0826               	movf	??_Button_Baseline_Update+1,w
 13915  0D79  00A8               	movwf	??_Button_Baseline_Update+3
 13916  0D7A  01A9               	clrf	??_Button_Baseline_Update+4
 13917  0D7B  01AA               	clrf	??_Button_Baseline_Update+5
 13918  0D7C  082B               	movf	Button_Baseline_Update@button,w
 13919  0D7D  3E05               	addlw	5
 13920  0D7E  0086               	movwf	6
 13921  0D7F  3001               	movlw	1	; select bank2/3
 13922  0D80  0087               	movwf	7
 13923  0D81  0827               	movf	??_Button_Baseline_Update+2,w
 13924  0D82  0781               	addwf	1,f
 13925  0D83  3141               	addfsr 1,1
 13926  0D84  0828               	movf	??_Button_Baseline_Update+3,w
 13927  0D85  3D81               	addwfc	1,f
 13928  0D86  3141               	addfsr 1,1
 13929  0D87  0829               	movf	??_Button_Baseline_Update+4,w
 13930  0D88  3D81               	addwfc	1,f
 13931  0D89  3141               	addfsr 1,1
 13932  0D8A  082A               	movf	??_Button_Baseline_Update+5,w
 13933  0D8B  3D81               	addwfc	1,f
 13934  0D8C  0008               	return
 13935  0D8D                     __end_of_Button_Baseline_Update:	
 13936                           
 13937                           	psect	text85
 13938  179A                     __ptext85:	
 13939 ;; *************** function _Button_Baseline_Initialize *****************
 13940 ;; Defined at:
 13941 ;;		line 517 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;  button          1    wreg     PTR struct .
 13944 ;;		 -> mtouch_button(48), 
 13945 ;; Auto vars:     Size  Location     Type
 13946 ;;  button          1   17[BANK0 ] PTR struct .
 13947 ;;		 -> mtouch_button(48), 
 13948 ;; Return value:  Size  Location     Type
 13949 ;;                  1    wreg      void 
 13950 ;; Registers used:
 13951 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13952 ;; Tracked objects:
 13953 ;;		On entry : 0/0
 13954 ;;		On exit  : 0/0
 13955 ;;		Unchanged: 0/0
 13956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13957 ;;      Params:         0       0       0       0       0       0       0       0
 13958 ;;      Locals:         0       1       0       0       0       0       0       0
 13959 ;;      Temps:          0       4       0       0       0       0       0       0
 13960 ;;      Totals:         0       5       0       0       0       0       0       0
 13961 ;;Total ram usage:        5 bytes
 13962 ;; Hardware stack levels used:    1
 13963 ;; Hardware stack levels required when called:    9
 13964 ;; This function calls:
 13965 ;;		_MTOUCH_Sensor_RawSample_Get
 13966 ;; This function is called by:
 13967 ;;		_Button_State_Initializing
 13968 ;; This function uses a non-reentrant model
 13969 ;;
 13970                           
 13971                           
 13972                           ;psect for function _Button_Baseline_Initialize
 13973  179A                     _Button_Baseline_Initialize:	
 13974                           
 13975                           ;incstack = 0
 13976                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13977                           ;Button_Baseline_Initialize@button stored from wreg
 13978  179A  0020               	movlb	0	; select bank0
 13979  179B  00B1               	movwf	Button_Baseline_Initialize@button
 13980                           
 13981                           ;mcc_generated_files/mtouch/mtouch_button.c: 517: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 518: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 519:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 13982  179C  0A31               	incf	Button_Baseline_Initialize@button,w
 13983  179D  0086               	movwf	6
 13984  179E  3001               	movlw	1	; select bank2/3
 13985  179F  0087               	movwf	7
 13986  17A0  0801               	movf	1,w
 13987  17A1  3194  24A7  3197   	fcall	_MTOUCH_Sensor_RawSample_Get
 13988  17A4  0020               	movlb	0	; select bank0
 13989  17A5  0829               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 13990  17A6  00AD               	movwf	??_Button_Baseline_Initialize
 13991  17A7  082A               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 13992  17A8  00AE               	movwf	??_Button_Baseline_Initialize+1
 13993  17A9  01AF               	clrf	??_Button_Baseline_Initialize+2
 13994  17AA  01B0               	clrf	??_Button_Baseline_Initialize+3
 13995  17AB  0831               	movf	Button_Baseline_Initialize@button,w
 13996  17AC  3E05               	addlw	5
 13997  17AD  0086               	movwf	6
 13998  17AE  3001               	movlw	1	; select bank2/3
 13999  17AF  0087               	movwf	7
 14000  17B0  082D               	movf	??_Button_Baseline_Initialize,w
 14001  17B1  3FC0               	movwi [0]fsr1
 14002  17B2  082E               	movf	??_Button_Baseline_Initialize+1,w
 14003  17B3  3FC1               	movwi [1]fsr1
 14004  17B4  082F               	movf	??_Button_Baseline_Initialize+2,w
 14005  17B5  3FC2               	movwi [2]fsr1
 14006  17B6  0830               	movf	??_Button_Baseline_Initialize+3,w
 14007  17B7  3FC3               	movwi [3]fsr1
 14008                           
 14009                           ;mcc_generated_files/mtouch/mtouch_button.c: 520:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 14010  17B8  0831               	movf	Button_Baseline_Initialize@button,w
 14011  17B9  3E05               	addlw	5
 14012  17BA  0086               	movwf	6
 14013  17BB  3001               	movlw	1	; select bank2/3
 14014  17BC  0087               	movwf	7
 14015  17BD  3004               	movlw	4
 14016  17BE                     u6755:	
 14017  17BE  3581               	lslf	1,f
 14018  17BF  3141               	addfsr 1,1
 14019  17C0  0D81               	rlf	1,f
 14020  17C1  3141               	addfsr 1,1
 14021  17C2  0D81               	rlf	1,f
 14022  17C3  3141               	addfsr 1,1
 14023  17C4  0D81               	rlf	1,f
 14024  17C5  317D               	addfsr 1,-3
 14025  17C6  0B89               	decfsz	9,f
 14026  17C7  2FBE               	goto	u6755
 14027  17C8  0008               	return
 14028  17C9                     __end_of_Button_Baseline_Initialize:	
 14029                           
 14030                           	psect	text86
 14031  12D5                     __ptext86:	
 14032 ;; *************** function _Button_Reading_Update *****************
 14033 ;; Defined at:
 14034 ;;		line 490 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;  button          1    wreg     PTR struct .
 14037 ;;		 -> mtouch_button(48), 
 14038 ;; Auto vars:     Size  Location     Type
 14039 ;;  button          1   16[BANK0 ] PTR struct .
 14040 ;;		 -> mtouch_button(48), 
 14041 ;; Return value:  Size  Location     Type
 14042 ;;                  1    wreg      void 
 14043 ;; Registers used:
 14044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14045 ;; Tracked objects:
 14046 ;;		On entry : 0/0
 14047 ;;		On exit  : 0/0
 14048 ;;		Unchanged: 0/0
 14049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14050 ;;      Params:         0       0       0       0       0       0       0       0
 14051 ;;      Locals:         0       1       0       0       0       0       0       0
 14052 ;;      Temps:          0       0       0       0       0       0       0       0
 14053 ;;      Totals:         0       1       0       0       0       0       0       0
 14054 ;;Total ram usage:        1 bytes
 14055 ;; Hardware stack levels used:    1
 14056 ;; Hardware stack levels required when called:   10
 14057 ;; This function calls:
 14058 ;;		_Button_Reading_Update_Helper
 14059 ;; This function is called by:
 14060 ;;		_Button_Service
 14061 ;; This function uses a non-reentrant model
 14062 ;;
 14063                           
 14064                           
 14065                           ;psect for function _Button_Reading_Update
 14066  12D5                     _Button_Reading_Update:	
 14067                           
 14068                           ;incstack = 0
 14069                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14070                           ;Button_Reading_Update@button stored from wreg
 14071  12D5  0020               	movlb	0	; select bank0
 14072  12D6  00B0               	movwf	Button_Reading_Update@button
 14073                           
 14074                           ;mcc_generated_files/mtouch/mtouch_button.c: 490: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 491: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 492:     if (GIE == (uint8_t) 1)
 14075  12D7  1F8B               	btfss	11,7	;volatile
 14076  12D8  2ADF               	goto	l6560
 14077                           
 14078                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 494:         GIE = (uint8_t) 0;
 14079  12D9  138B               	bcf	11,7	;volatile
 14080                           
 14081                           ;mcc_generated_files/mtouch/mtouch_button.c: 495:         Button_Reading_Update_Helper(b
      +                          utton);
 14082  12DA  0830               	movf	Button_Reading_Update@button,w
 14083  12DB  3189  213D         	fcall	_Button_Reading_Update_Helper
 14084                           
 14085                           ;mcc_generated_files/mtouch/mtouch_button.c: 496:         GIE = (uint8_t) 1;
 14086  12DD  178B               	bsf	11,7	;volatile
 14087                           
 14088                           ;mcc_generated_files/mtouch/mtouch_button.c: 497:     }
 14089  12DE  0008               	return
 14090  12DF                     l6560:	
 14091                           
 14092                           ;mcc_generated_files/mtouch/mtouch_button.c: 499:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 500:         Button_Reading_Update_Helper(button);
 14093  12DF  0830               	movf	Button_Reading_Update@button,w
 14094  12E0  3189  213D         	fcall	_Button_Reading_Update_Helper
 14095  12E2  0008               	return
 14096  12E3                     __end_of_Button_Reading_Update:	
 14097                           
 14098                           	psect	text87
 14099  093D                     __ptext87:	
 14100 ;; *************** function _Button_Reading_Update_Helper *****************
 14101 ;; Defined at:
 14102 ;;		line 504 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14103 ;; Parameters:    Size  Location     Type
 14104 ;;  button          1    wreg     PTR struct .
 14105 ;;		 -> mtouch_button(48), 
 14106 ;; Auto vars:     Size  Location     Type
 14107 ;;  button          1   15[BANK0 ] PTR struct .
 14108 ;;		 -> mtouch_button(48), 
 14109 ;; Return value:  Size  Location     Type
 14110 ;;                  1    wreg      void 
 14111 ;; Registers used:
 14112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14113 ;; Tracked objects:
 14114 ;;		On entry : 0/0
 14115 ;;		On exit  : 0/0
 14116 ;;		Unchanged: 0/0
 14117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14118 ;;      Params:         0       0       0       0       0       0       0       0
 14119 ;;      Locals:         0       1       0       0       0       0       0       0
 14120 ;;      Temps:          0       2       0       0       0       0       0       0
 14121 ;;      Totals:         0       3       0       0       0       0       0       0
 14122 ;;Total ram usage:        3 bytes
 14123 ;; Hardware stack levels used:    1
 14124 ;; Hardware stack levels required when called:    9
 14125 ;; This function calls:
 14126 ;;		_MTOUCH_Sensor_RawSample_Get
 14127 ;; This function is called by:
 14128 ;;		_Button_Reading_Update
 14129 ;; This function uses a non-reentrant model
 14130 ;;
 14131                           
 14132                           
 14133                           ;psect for function _Button_Reading_Update_Helper
 14134  093D                     _Button_Reading_Update_Helper:	
 14135                           
 14136                           ;incstack = 0
 14137                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 14138                           ;Button_Reading_Update_Helper@button stored from wreg
 14139  093D  0020               	movlb	0	; select bank0
 14140  093E  00AF               	movwf	Button_Reading_Update_Helper@button
 14141                           
 14142                           ;mcc_generated_files/mtouch/mtouch_button.c: 504: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 505: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 506:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 14143  093F  082F               	movf	Button_Reading_Update_Helper@button,w
 14144  0940  3E02               	addlw	2
 14145  0941  0086               	movwf	6
 14146  0942  3001               	movlw	1	; select bank2/3
 14147  0943  0087               	movwf	7
 14148  0944  0801               	movf	1,w
 14149  0945  1903               	btfsc	3,2
 14150  0946  297B               	goto	l6450
 14151                           
 14152                           ;mcc_generated_files/mtouch/mtouch_button.c: 507:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 508:         button->reading -= button->reading>>((uint8_t)2u);
 14153  0947  082F               	movf	Button_Reading_Update_Helper@button,w
 14154  0948  3E03               	addlw	3
 14155  0949  0086               	movwf	6
 14156  094A  3001               	movlw	1	; select bank2/3
 14157  094B  0087               	movwf	7
 14158  094C  3F40               	moviw [0]fsr1
 14159  094D  00AD               	movwf	??_Button_Reading_Update_Helper
 14160  094E  3F41               	moviw [1]fsr1
 14161  094F  00AE               	movwf	??_Button_Reading_Update_Helper+1
 14162  0950  36AE               	lsrf	??_Button_Reading_Update_Helper+1,f
 14163  0951  0CAD               	rrf	??_Button_Reading_Update_Helper,f
 14164  0952  36AE               	lsrf	??_Button_Reading_Update_Helper+1,f
 14165  0953  0CAD               	rrf	??_Button_Reading_Update_Helper,f
 14166  0954  082F               	movf	Button_Reading_Update_Helper@button,w
 14167  0955  3E03               	addlw	3
 14168  0956  0086               	movwf	6
 14169  0957  3001               	movlw	1	; select bank2/3
 14170  0958  0087               	movwf	7
 14171  0959  082D               	movf	??_Button_Reading_Update_Helper,w
 14172  095A  0281               	subwf	1,f
 14173  095B  3141               	addfsr 1,1
 14174  095C  082E               	movf	??_Button_Reading_Update_Helper+1,w
 14175  095D  3B81               	subwfb	1,f
 14176  095E  317F               	addfsr 1,-1
 14177                           
 14178                           ;mcc_generated_files/mtouch/mtouch_button.c: 509:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 14179  095F  0A2F               	incf	Button_Reading_Update_Helper@button,w
 14180  0960  0086               	movwf	6
 14181  0961  3001               	movlw	1	; select bank2/3
 14182  0962  0087               	movwf	7
 14183  0963  0801               	movf	1,w
 14184  0964  3194  24A7         	fcall	_MTOUCH_Sensor_RawSample_Get
 14185  0966  0020               	movlb	0	; select bank0
 14186  0967  0829               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 14187  0968  00AD               	movwf	??_Button_Reading_Update_Helper
 14188  0969  082A               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 14189  096A  00AE               	movwf	??_Button_Reading_Update_Helper+1
 14190  096B  36AE               	lsrf	??_Button_Reading_Update_Helper+1,f
 14191  096C  0CAD               	rrf	??_Button_Reading_Update_Helper,f
 14192  096D  36AE               	lsrf	??_Button_Reading_Update_Helper+1,f
 14193  096E  0CAD               	rrf	??_Button_Reading_Update_Helper,f
 14194  096F  082F               	movf	Button_Reading_Update_Helper@button,w
 14195  0970  3E03               	addlw	3
 14196  0971  0086               	movwf	6
 14197  0972  3001               	movlw	1	; select bank2/3
 14198  0973  0087               	movwf	7
 14199  0974  082D               	movf	??_Button_Reading_Update_Helper,w
 14200  0975  0781               	addwf	1,f
 14201  0976  3141               	addfsr 1,1
 14202  0977  082E               	movf	??_Button_Reading_Update_Helper+1,w
 14203  0978  3D81               	addwfc	1,f
 14204  0979  317F               	addfsr 1,-1
 14205                           
 14206                           ;mcc_generated_files/mtouch/mtouch_button.c: 510:     }
 14207  097A  0008               	return
 14208  097B                     l6450:	
 14209                           
 14210                           ;mcc_generated_files/mtouch/mtouch_button.c: 512:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 513:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 14211  097B  0A2F               	incf	Button_Reading_Update_Helper@button,w
 14212  097C  0086               	movwf	6
 14213  097D  3001               	movlw	1	; select bank2/3
 14214  097E  0087               	movwf	7
 14215  097F  0801               	movf	1,w
 14216  0980  3194  24A7         	fcall	_MTOUCH_Sensor_RawSample_Get
 14217  0982  0020               	movlb	0	; select bank0
 14218  0983  082F               	movf	Button_Reading_Update_Helper@button,w
 14219  0984  3E03               	addlw	3
 14220  0985  0086               	movwf	6
 14221  0986  3001               	movlw	1	; select bank2/3
 14222  0987  0087               	movwf	7
 14223  0988  0829               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 14224  0989  3FC0               	movwi [0]fsr1
 14225  098A  082A               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 14226  098B  3FC1               	movwi [1]fsr1
 14227  098C  0008               	return
 14228  098D                     __end_of_Button_Reading_Update_Helper:	
 14229                           
 14230                           	psect	text88
 14231  14A7                     __ptext88:	
 14232 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 14233 ;; Defined at:
 14234 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14235 ;; Parameters:    Size  Location     Type
 14236 ;;  name            1    wreg     enum E2878
 14237 ;; Auto vars:     Size  Location     Type
 14238 ;;  name            1   12[BANK0 ] enum E2878
 14239 ;; Return value:  Size  Location     Type
 14240 ;;                  2    9[BANK0 ] unsigned short 
 14241 ;; Registers used:
 14242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14243 ;; Tracked objects:
 14244 ;;		On entry : 0/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14248 ;;      Params:         0       2       0       0       0       0       0       0
 14249 ;;      Locals:         0       1       0       0       0       0       0       0
 14250 ;;      Temps:          0       1       0       0       0       0       0       0
 14251 ;;      Totals:         0       4       0       0       0       0       0       0
 14252 ;;Total ram usage:        4 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; Hardware stack levels required when called:    8
 14255 ;; This function calls:
 14256 ;;		___bmul
 14257 ;; This function is called by:
 14258 ;;		_Button_Reading_Update_Helper
 14259 ;;		_Button_Baseline_Initialize
 14260 ;; This function uses a non-reentrant model
 14261 ;;
 14262                           
 14263                           
 14264                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 14265  14A7                     _MTOUCH_Sensor_RawSample_Get:	
 14266                           
 14267                           ;incstack = 0
 14268                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14269                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 14270  14A7  0020               	movlb	0	; select bank0
 14271  14A8  00AC               	movwf	MTOUCH_Sensor_RawSample_Get@name
 14272                           
 14273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 14274  14A9  3003               	movlw	3
 14275  14AA  022C               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 14276  14AB  1803               	skipnc
 14277  14AC  2CBE               	goto	l6330
 14278                           
 14279                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 14280  14AD  3009               	movlw	9
 14281  14AE  00AB               	movwf	??_MTOUCH_Sensor_RawSample_Get
 14282  14AF  082B               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 14283  14B0  00A5               	movwf	___bmul@multiplicand
 14284  14B1  082C               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 14285  14B2  3193  2362         	fcall	___bmul
 14286  14B4  3ED6               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 14287  14B5  0086               	movwf	6
 14288  14B6  3001               	movlw	1	; select bank3/4
 14289  14B7  0087               	movwf	7
 14290  14B8  3F40               	moviw [0]fsr1
 14291  14B9  0020               	movlb	0	; select bank0
 14292  14BA  00A9               	movwf	?_MTOUCH_Sensor_RawSample_Get
 14293  14BB  3F41               	moviw [1]fsr1
 14294  14BC  00AA               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 14295  14BD  0008               	return
 14296  14BE                     l6330:	
 14297                           
 14298                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 14299  14BE  01A9               	clrf	?_MTOUCH_Sensor_RawSample_Get
 14300  14BF  01AA               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 14301  14C0  0008               	return
 14302  14C1                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 14303                           
 14304                           	psect	text89
 14305  1362                     __ptext89:	
 14306 ;; *************** function ___bmul *****************
 14307 ;; Defined at:
 14308 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 14309 ;; Parameters:    Size  Location     Type
 14310 ;;  multiplier      1    wreg     unsigned char 
 14311 ;;  multiplicand    1    5[BANK0 ] unsigned char 
 14312 ;; Auto vars:     Size  Location     Type
 14313 ;;  multiplier      1    8[BANK0 ] unsigned char 
 14314 ;;  product         1    7[BANK0 ] unsigned char 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      unsigned char 
 14317 ;; Registers used:
 14318 ;;		wreg, status,2, status,0
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14324 ;;      Params:         0       1       0       0       0       0       0       0
 14325 ;;      Locals:         0       2       0       0       0       0       0       0
 14326 ;;      Temps:          0       1       0       0       0       0       0       0
 14327 ;;      Totals:         0       4       0       0       0       0       0       0
 14328 ;;Total ram usage:        4 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    7
 14331 ;; This function calls:
 14332 ;;		Nothing
 14333 ;; This function is called by:
 14334 ;;		_MTOUCH_Sensor_Initialize
 14335 ;;		_MTOUCH_Sensor_RawSample_Get
 14336 ;;		_MTOUCH_Sensor_Enable
 14337 ;;		_MTOUCH_Sensor_Calibrate
 14338 ;;		_MTOUCH_Sensor_isCalibrated
 14339 ;;		_MTOUCH_Sensor_wasSampled
 14340 ;;		_MTOUCH_Sensor_isAnySensorActive
 14341 ;;		_MTOUCH_Sensor_Disable
 14342 ;;		_MTOUCH_Sensor_isEnabled
 14343 ;;		_MTOUCH_Sensor_isActive
 14344 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 14345 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 14346 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 14347 ;;		_MTOUCH_Sensor_Oversampling_Get
 14348 ;;		_MTOUCH_Sensor_Oversampling_Set
 14349 ;; This function uses a non-reentrant model
 14350 ;;
 14351                           
 14352                           
 14353                           ;psect for function ___bmul
 14354  1362                     ___bmul:	
 14355                           
 14356                           ;incstack = 0
 14357                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14358                           ;___bmul@multiplier stored from wreg
 14359  1362  0020               	movlb	0	; select bank0
 14360  1363  00A8               	movwf	___bmul@multiplier
 14361  1364  01A7               	clrf	___bmul@product
 14362  1365                     l6100:	
 14363  1365  1C28               	btfss	___bmul@multiplier,0
 14364  1366  2B6B               	goto	l6104
 14365  1367  0825               	movf	___bmul@multiplicand,w
 14366  1368  00A6               	movwf	??___bmul
 14367  1369  0826               	movf	??___bmul,w
 14368  136A  07A7               	addwf	___bmul@product,f
 14369  136B                     l6104:	
 14370  136B  1003               	clrc
 14371  136C  0DA5               	rlf	___bmul@multiplicand,f
 14372  136D  1003               	clrc
 14373  136E  0CA8               	rrf	___bmul@multiplier,f
 14374  136F  0828               	movf	___bmul@multiplier,w
 14375  1370  1D03               	btfss	3,2
 14376  1371  2B65               	goto	l6100
 14377  1372  0827               	movf	___bmul@product,w
 14378  1373  0008               	return
 14379  1374                     __end_of___bmul:	
 14380                           
 14381                           	psect	text90
 14382  0C76                     __ptext90:	
 14383 ;; *************** function _Button_Deviation_Update *****************
 14384 ;; Defined at:
 14385 ;;		line 441 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14386 ;; Parameters:    Size  Location     Type
 14387 ;;  button          1    wreg     PTR struct .
 14388 ;;		 -> mtouch_button(48), 
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  button          1   15[BANK0 ] PTR struct .
 14391 ;;		 -> mtouch_button(48), 
 14392 ;;  deviation       4   16[BANK0 ] long 
 14393 ;; Return value:  Size  Location     Type
 14394 ;;                  1    wreg      void 
 14395 ;; Registers used:
 14396 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14402 ;;      Params:         0       0       0       0       0       0       0       0
 14403 ;;      Locals:         0       5       0       0       0       0       0       0
 14404 ;;      Temps:          0      10       0       0       0       0       0       0
 14405 ;;      Totals:         0      15       0       0       0       0       0       0
 14406 ;;Total ram usage:       15 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; Hardware stack levels required when called:    7
 14409 ;; This function calls:
 14410 ;;		Nothing
 14411 ;; This function is called by:
 14412 ;;		_Button_Service
 14413 ;; This function uses a non-reentrant model
 14414 ;;
 14415                           
 14416                           
 14417                           ;psect for function _Button_Deviation_Update
 14418  0C76                     _Button_Deviation_Update:	
 14419                           
 14420                           ;incstack = 0
 14421                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 14422                           ;Button_Deviation_Update@button stored from wreg
 14423  0C76  0020               	movlb	0	; select bank0
 14424  0C77  00AF               	movwf	Button_Deviation_Update@button
 14425                           
 14426                           ;mcc_generated_files/mtouch/mtouch_button.c: 441: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 442: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 443:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 445:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 14427  0C78  082F               	movf	Button_Deviation_Update@button,w
 14428  0C79  3E05               	addlw	5
 14429  0C7A  0086               	movwf	6
 14430  0C7B  3001               	movlw	1	; select bank2/3
 14431  0C7C  0087               	movwf	7
 14432  0C7D  3F40               	moviw [0]fsr1
 14433  0C7E  00A5               	movwf	??_Button_Deviation_Update
 14434  0C7F  3F41               	moviw [1]fsr1
 14435  0C80  00A6               	movwf	??_Button_Deviation_Update+1
 14436  0C81  3F42               	moviw [2]fsr1
 14437  0C82  00A7               	movwf	??_Button_Deviation_Update+2
 14438  0C83  3F43               	moviw [3]fsr1
 14439  0C84  00A8               	movwf	??_Button_Deviation_Update+3
 14440  0C85  3004               	movlw	4
 14441  0C86                     u7005:	
 14442  0C86  36A8               	lsrf	??_Button_Deviation_Update+3,f
 14443  0C87  0CA7               	rrf	??_Button_Deviation_Update+2,f
 14444  0C88  0CA6               	rrf	??_Button_Deviation_Update+1,f
 14445  0C89  0CA5               	rrf	??_Button_Deviation_Update,f
 14446  0C8A  0B89               	decfsz	9,f
 14447  0C8B  2C86               	goto	u7005
 14448  0C8C  082F               	movf	Button_Deviation_Update@button,w
 14449  0C8D  3E03               	addlw	3
 14450  0C8E  0086               	movwf	6
 14451  0C8F  3001               	movlw	1	; select bank2/3
 14452  0C90  0087               	movwf	7
 14453  0C91  3F40               	moviw [0]fsr1
 14454  0C92  00A9               	movwf	??_Button_Deviation_Update+4
 14455  0C93  3F41               	moviw [1]fsr1
 14456  0C94  00AA               	movwf	??_Button_Deviation_Update+5
 14457  0C95  0829               	movf	??_Button_Deviation_Update+4,w
 14458  0C96  00AB               	movwf	??_Button_Deviation_Update+6
 14459  0C97  082A               	movf	??_Button_Deviation_Update+5,w
 14460  0C98  00AC               	movwf	??_Button_Deviation_Update+7
 14461  0C99  01AD               	clrf	??_Button_Deviation_Update+8
 14462  0C9A  01AE               	clrf	??_Button_Deviation_Update+9
 14463  0C9B  0825               	movf	??_Button_Deviation_Update,w
 14464  0C9C  02AB               	subwf	??_Button_Deviation_Update+6,f
 14465  0C9D  0826               	movf	??_Button_Deviation_Update+1,w
 14466  0C9E  3BAC               	subwfb	??_Button_Deviation_Update+7,f
 14467  0C9F  0827               	movf	??_Button_Deviation_Update+2,w
 14468  0CA0  3BAD               	subwfb	??_Button_Deviation_Update+8,f
 14469  0CA1  0828               	movf	??_Button_Deviation_Update+3,w
 14470  0CA2  3BAE               	subwfb	??_Button_Deviation_Update+9,f
 14471  0CA3  082E               	movf	??_Button_Deviation_Update+9,w
 14472  0CA4  00B3               	movwf	Button_Deviation_Update@deviation+3
 14473  0CA5  082D               	movf	??_Button_Deviation_Update+8,w
 14474  0CA6  00B2               	movwf	Button_Deviation_Update@deviation+2
 14475  0CA7  082C               	movf	??_Button_Deviation_Update+7,w
 14476  0CA8  00B1               	movwf	Button_Deviation_Update@deviation+1
 14477  0CA9  082B               	movf	??_Button_Deviation_Update+6,w
 14478  0CAA  00B0               	movwf	Button_Deviation_Update@deviation
 14479                           
 14480                           ;mcc_generated_files/mtouch/mtouch_button.c: 448:     deviation = deviation >> (button->
      +                          scaling);
 14481  0CAB  0830               	movf	Button_Deviation_Update@deviation,w
 14482  0CAC  00A5               	movwf	??_Button_Deviation_Update
 14483  0CAD  0831               	movf	Button_Deviation_Update@deviation+1,w
 14484  0CAE  00A6               	movwf	??_Button_Deviation_Update+1
 14485  0CAF  0832               	movf	Button_Deviation_Update@deviation+2,w
 14486  0CB0  00A7               	movwf	??_Button_Deviation_Update+2
 14487  0CB1  0833               	movf	Button_Deviation_Update@deviation+3,w
 14488  0CB2  00A8               	movwf	??_Button_Deviation_Update+3
 14489  0CB3  082F               	movf	Button_Deviation_Update@button,w
 14490  0CB4  3E0F               	addlw	15
 14491  0CB5  0086               	movwf	6
 14492  0CB6  3001               	movlw	1	; select bank2/3
 14493  0CB7  0087               	movwf	7
 14494  0CB8  0A01               	incf	1,w
 14495  0CB9  2CBE               	goto	u7010
 14496  0CBA                     u7015:	
 14497  0CBA  37A8               	asrf	??_Button_Deviation_Update+3,f
 14498  0CBB  0CA7               	rrf	??_Button_Deviation_Update+2,f
 14499  0CBC  0CA6               	rrf	??_Button_Deviation_Update+1,f
 14500  0CBD  0CA5               	rrf	??_Button_Deviation_Update,f
 14501  0CBE                     u7010:	
 14502  0CBE  0B89               	decfsz	9,f
 14503  0CBF  2CBA               	goto	u7015
 14504  0CC0  0828               	movf	??_Button_Deviation_Update+3,w
 14505  0CC1  00B3               	movwf	Button_Deviation_Update@deviation+3
 14506  0CC2  0827               	movf	??_Button_Deviation_Update+2,w
 14507  0CC3  00B2               	movwf	Button_Deviation_Update@deviation+2
 14508  0CC4  0826               	movf	??_Button_Deviation_Update+1,w
 14509  0CC5  00B1               	movwf	Button_Deviation_Update@deviation+1
 14510  0CC6  0825               	movf	??_Button_Deviation_Update,w
 14511  0CC7  00B0               	movwf	Button_Deviation_Update@deviation
 14512                           
 14513                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     if (deviation > ((0x7f)))
 14514  0CC8  1BB3               	btfsc	Button_Deviation_Update@deviation+3,7
 14515  0CC9  2CDF               	goto	l6568
 14516  0CCA  0833               	movf	Button_Deviation_Update@deviation+3,w
 14517  0CCB  1D03               	btfss	3,2
 14518  0CCC  2CD7               	goto	l6566
 14519  0CCD  0832               	movf	Button_Deviation_Update@deviation+2,w
 14520  0CCE  1D03               	btfss	3,2
 14521  0CCF  2CD7               	goto	l6566
 14522  0CD0  0831               	movf	Button_Deviation_Update@deviation+1,w
 14523  0CD1  1D03               	btfss	3,2
 14524  0CD2  2CD7               	goto	l6566
 14525  0CD3  3080               	movlw	128
 14526  0CD4  0230               	subwf	Button_Deviation_Update@deviation,w
 14527  0CD5  1C03               	btfss	3,0
 14528  0CD6  2CDF               	goto	l6568
 14529  0CD7                     l6566:	
 14530                           
 14531                           ;mcc_generated_files/mtouch/mtouch_button.c: 452:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 453:         deviation = ((0x7f));
 14532  0CD7  3000               	movlw	0
 14533  0CD8  00B3               	movwf	Button_Deviation_Update@deviation+3
 14534  0CD9  3000               	movlw	0
 14535  0CDA  00B2               	movwf	Button_Deviation_Update@deviation+2
 14536  0CDB  3000               	movlw	0
 14537  0CDC  00B1               	movwf	Button_Deviation_Update@deviation+1
 14538  0CDD  307F               	movlw	127
 14539  0CDE  00B0               	movwf	Button_Deviation_Update@deviation
 14540  0CDF                     l6568:	
 14541                           
 14542                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     if (deviation < ((-1-0x7f)))
 14543  0CDF  1FB3               	btfss	Button_Deviation_Update@deviation+3,7
 14544  0CE0  2CF3               	goto	l6572
 14545  0CE1  3080               	movlw	128
 14546  0CE2  0230               	subwf	Button_Deviation_Update@deviation,w
 14547  0CE3  30FF               	movlw	255
 14548  0CE4  3B31               	subwfb	Button_Deviation_Update@deviation+1,w
 14549  0CE5  30FF               	movlw	255
 14550  0CE6  3B32               	subwfb	Button_Deviation_Update@deviation+2,w
 14551  0CE7  30FF               	movlw	255
 14552  0CE8  3B33               	subwfb	Button_Deviation_Update@deviation+3,w
 14553  0CE9  1803               	btfsc	3,0
 14554  0CEA  2CF3               	goto	l6572
 14555                           
 14556                           ;mcc_generated_files/mtouch/mtouch_button.c: 456:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 457:         deviation = ((-1-0x7f));
 14557  0CEB  30FF               	movlw	255
 14558  0CEC  00B3               	movwf	Button_Deviation_Update@deviation+3
 14559  0CED  30FF               	movlw	255
 14560  0CEE  00B2               	movwf	Button_Deviation_Update@deviation+2
 14561  0CEF  30FF               	movlw	255
 14562  0CF0  00B1               	movwf	Button_Deviation_Update@deviation+1
 14563  0CF1  3080               	movlw	128
 14564  0CF2  00B0               	movwf	Button_Deviation_Update@deviation
 14565  0CF3                     l6572:	
 14566                           
 14567                           ;mcc_generated_files/mtouch/mtouch_button.c: 460:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 14568  0CF3  0830               	movf	Button_Deviation_Update@deviation,w
 14569  0CF4  00A5               	movwf	??_Button_Deviation_Update
 14570  0CF5  082F               	movf	Button_Deviation_Update@button,w
 14571  0CF6  3E09               	addlw	9
 14572  0CF7  0086               	movwf	6
 14573  0CF8  3001               	movlw	1	; select bank2/3
 14574  0CF9  0087               	movwf	7
 14575  0CFA  0825               	movf	??_Button_Deviation_Update,w
 14576  0CFB  0081               	movwf	1
 14577  0CFC  0008               	return
 14578  0CFD                     __end_of_Button_Deviation_Update:	
 14579                           
 14580                           	psect	text91
 14581  1226                     __ptext91:	
 14582 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 14583 ;; Defined at:
 14584 ;;		line 570 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;  callback        2    5[BANK0 ] PTR FTN(enum E3069,)void
 14587 ;;		 -> myButtonPressedCallback(1), 
 14588 ;; Auto vars:     Size  Location     Type
 14589 ;;		None
 14590 ;; Return value:  Size  Location     Type
 14591 ;;                  1    wreg      void 
 14592 ;; Registers used:
 14593 ;;		wreg
 14594 ;; Tracked objects:
 14595 ;;		On entry : 0/0
 14596 ;;		On exit  : 0/0
 14597 ;;		Unchanged: 0/0
 14598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14599 ;;      Params:         0       2       0       0       0       0       0       0
 14600 ;;      Locals:         0       0       0       0       0       0       0       0
 14601 ;;      Temps:          0       0       0       0       0       0       0       0
 14602 ;;      Totals:         0       2       0       0       0       0       0       0
 14603 ;;Total ram usage:        2 bytes
 14604 ;; Hardware stack levels used:    1
 14605 ;; Hardware stack levels required when called:    7
 14606 ;; This function calls:
 14607 ;;		Nothing
 14608 ;; This function is called by:
 14609 ;;		_main
 14610 ;; This function uses a non-reentrant model
 14611 ;;
 14612                           
 14613                           
 14614                           ;psect for function _MTOUCH_Button_SetPressedCallback
 14615  1226                     _MTOUCH_Button_SetPressedCallback:	
 14616                           
 14617                           ;mcc_generated_files/mtouch/mtouch_button.c: 570: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          571: {;mcc_generated_files/mtouch/mtouch_button.c: 572:     callback_pressed = callback;
 14618                           
 14619                           ;incstack = 0
 14620                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 14621  1226  0020               	movlb	0	; select bank0
 14622  1227  0826               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 14623  1228  0021               	movlb	1	; select bank1
 14624  1229  00E8               	movwf	(_callback_pressed+1)^(0+128)
 14625  122A  0020               	movlb	0	; select bank0
 14626  122B  0825               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 14627  122C  0021               	movlb	1	; select bank1
 14628  122D  00E7               	movwf	_callback_pressed^(0+128)
 14629  122E  0008               	return
 14630  122F                     __end_of_MTOUCH_Button_SetPressedCallback:	
 14631                           
 14632                           	psect	text92
 14633  121D                     __ptext92:	
 14634 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 14635 ;; Defined at:
 14636 ;;		line 574 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14637 ;; Parameters:    Size  Location     Type
 14638 ;;  callback        2    5[BANK0 ] PTR FTN(enum E3069,)void
 14639 ;;		 -> myButtonReleasedCallback(1), 
 14640 ;; Auto vars:     Size  Location     Type
 14641 ;;		None
 14642 ;; Return value:  Size  Location     Type
 14643 ;;                  1    wreg      void 
 14644 ;; Registers used:
 14645 ;;		wreg
 14646 ;; Tracked objects:
 14647 ;;		On entry : 0/0
 14648 ;;		On exit  : 0/0
 14649 ;;		Unchanged: 0/0
 14650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14651 ;;      Params:         0       2       0       0       0       0       0       0
 14652 ;;      Locals:         0       0       0       0       0       0       0       0
 14653 ;;      Temps:          0       0       0       0       0       0       0       0
 14654 ;;      Totals:         0       2       0       0       0       0       0       0
 14655 ;;Total ram usage:        2 bytes
 14656 ;; Hardware stack levels used:    1
 14657 ;; Hardware stack levels required when called:    7
 14658 ;; This function calls:
 14659 ;;		Nothing
 14660 ;; This function is called by:
 14661 ;;		_main
 14662 ;; This function uses a non-reentrant model
 14663 ;;
 14664                           
 14665                           
 14666                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 14667  121D                     _MTOUCH_Button_SetNotPressedCallback:	
 14668                           
 14669                           ;mcc_generated_files/mtouch/mtouch_button.c: 574: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 575: {;mcc_generated_files/mtouch/mtouch_button.c: 576:     callback_notPressed = cal
      +                          lback;
 14670                           
 14671                           ;incstack = 0
 14672                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 14673  121D  0020               	movlb	0	; select bank0
 14674  121E  0826               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 14675  121F  0021               	movlb	1	; select bank1
 14676  1220  00E6               	movwf	(_callback_notPressed+1)^(0+128)
 14677  1221  0020               	movlb	0	; select bank0
 14678  1222  0825               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 14679  1223  0021               	movlb	1	; select bank1
 14680  1224  00E5               	movwf	_callback_notPressed^(0+128)
 14681  1225  0008               	return
 14682  1226                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 14683                           
 14684                           	psect	intentry
 14685  0004                     __pintentry:	
 14686 ;; *************** function _INTERRUPT_InterruptManager *****************
 14687 ;; Defined at:
 14688 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;		None
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;		None
 14693 ;; Return value:  Size  Location     Type
 14694 ;;                  1    wreg      void 
 14695 ;; Registers used:
 14696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14702 ;;      Params:         0       0       0       0       0       0       0       0
 14703 ;;      Locals:         0       0       0       0       0       0       0       0
 14704 ;;      Temps:          0       0       0       0       0       0       0       0
 14705 ;;      Totals:         0       0       0       0       0       0       0       0
 14706 ;;Total ram usage:        0 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    6
 14709 ;; This function calls:
 14710 ;;		Absolute function
 14711 ;;		_EUSART_Receive_ISR
 14712 ;;		_EUSART_Transmit_ISR
 14713 ;;		_INT_ISR
 14714 ;;		_TMR0_ISR
 14715 ;; This function is called by:
 14716 ;;		Interrupt level 1
 14717 ;; This function uses a non-reentrant model
 14718 ;;
 14719                           
 14720  0004                     _INTERRUPT_InterruptManager:	
 14721                           
 14722                           ;incstack = 0
 14723 ;; hardware stack exceeded
 14724  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14725                           
 14726                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14727  0005  3180               	pagesel	$
 14728                           
 14729                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 14730  0006  1A8B               	btfsc	11,5	;volatile
 14731  0007  1D0B               	btfss	11,2	;volatile
 14732  0008  280D               	goto	i1l994
 14733                           
 14734                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 14735  0009  3192  220D  3180   	fcall	_TMR0_ISR
 14736                           
 14737                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 14738  000C  282F               	goto	i1l1004
 14739  000D                     i1l994:	
 14740                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 14741                           
 14742  000D  1A0B               	btfsc	11,4	;volatile
 14743  000E  1C8B               	btfss	11,1	;volatile
 14744  000F  2814               	goto	i1l996
 14745                           
 14746                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 14747  0010  3191  21DC  3180   	fcall	_INT_ISR
 14748                           
 14749                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 14750  0013  282F               	goto	i1l1004
 14751  0014                     i1l996:	
 14752                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.PEIE == 1)
 14753                           
 14754  0014  1F0B               	btfss	11,6	;volatile
 14755  0015  282F               	goto	i1l1004
 14756                           
 14757                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14758  0016  0021               	movlb	1	; select bank1
 14759  0017  1E11               	btfss	17,4	;volatile
 14760  0018  2823               	goto	i1l999
 14761  0019  0020               	movlb	0	; select bank0
 14762  001A  1E11               	btfss	17,4	;volatile
 14763  001B  2823               	goto	i1l999
 14764                           
 14765                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
 14766  001C  0022               	movlb	2	; select bank2
 14767  001D  0855               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 14768  001E  008A               	movwf	10
 14769  001F  0854               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 14770  0020  000A               	callw
 14771  0021  3180               	pagesel	$
 14772                           
 14773                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 14774  0022  282F               	goto	i1l1004
 14775  0023                     i1l999:	
 14776                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14777                           
 14778  0023  0021               	movlb	1	; select bank1
 14779  0024  1E91               	btfss	17,5	;volatile
 14780  0025  282F               	goto	i1l1004
 14781  0026  0020               	movlb	0	; select bank0
 14782  0027  1E91               	btfss	17,5	;volatile
 14783  0028  282F               	goto	i1l1004
 14784                           
 14785                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
 14786  0029  0022               	movlb	2	; select bank2
 14787  002A  0853               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 14788  002B  008A               	movwf	10
 14789  002C  0852               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 14790  002D  000A               	callw
 14791  002E  3180               	pagesel	$
 14792  002F                     i1l1004:	
 14793                           ;mcc_generated_files/interrupt_manager.c: 79:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 81:     }
 14794                           
 14795                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 14796                           
 14797  002F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14798  0030  0009               	retfie
 14799  0031                     __end_of_INTERRUPT_InterruptManager:	
 14800                           
 14801                           	psect	text94
 14802  120D                     __ptext94:	
 14803 ;; *************** function _TMR0_ISR *****************
 14804 ;; Defined at:
 14805 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;		None
 14808 ;; Auto vars:     Size  Location     Type
 14809 ;;		None
 14810 ;; Return value:  Size  Location     Type
 14811 ;;                  1    wreg      void 
 14812 ;; Registers used:
 14813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14814 ;; Tracked objects:
 14815 ;;		On entry : 0/0
 14816 ;;		On exit  : 0/0
 14817 ;;		Unchanged: 0/0
 14818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14819 ;;      Params:         0       0       0       0       0       0       0       0
 14820 ;;      Locals:         0       0       0       0       0       0       0       0
 14821 ;;      Temps:          0       0       0       0       0       0       0       0
 14822 ;;      Totals:         0       0       0       0       0       0       0       0
 14823 ;;Total ram usage:        0 bytes
 14824 ;; Hardware stack levels used:    1
 14825 ;; Hardware stack levels required when called:    5
 14826 ;; This function calls:
 14827 ;;		_TMR0_CallBack
 14828 ;; This function is called by:
 14829 ;;		_INTERRUPT_InterruptManager
 14830 ;; This function uses a non-reentrant model
 14831 ;;
 14832                           
 14833                           
 14834                           ;psect for function _TMR0_ISR
 14835  120D                     _TMR0_ISR:	
 14836                           
 14837                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 14838                           
 14839                           ;incstack = 0
 14840 ;; hardware stack exceeded
 14841                           ; Regs used in _TMR0_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14842  120D  110B               	bcf	11,2	;volatile
 14843                           
 14844                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 14845  120E  0021               	movlb	1	; select bank1
 14846  120F  086E               	movf	_timer0ReloadVal^(0+128),w	;volatile
 14847  1210  0020               	movlb	0	; select bank0
 14848  1211  0095               	movwf	21	;volatile
 14849                           
 14850                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
 14851  1212  3192  22A7         	fcall	_TMR0_CallBack
 14852  1214  0008               	return
 14853  1215                     __end_of_TMR0_ISR:	
 14854                           
 14855                           	psect	text95
 14856  12A7                     __ptext95:	
 14857 ;; *************** function _TMR0_CallBack *****************
 14858 ;; Defined at:
 14859 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 14860 ;; Parameters:    Size  Location     Type
 14861 ;;		None
 14862 ;; Auto vars:     Size  Location     Type
 14863 ;;		None
 14864 ;; Return value:  Size  Location     Type
 14865 ;;                  1    wreg      void 
 14866 ;; Registers used:
 14867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14868 ;; Tracked objects:
 14869 ;;		On entry : 0/0
 14870 ;;		On exit  : 0/0
 14871 ;;		Unchanged: 0/0
 14872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14873 ;;      Params:         0       0       0       0       0       0       0       0
 14874 ;;      Locals:         0       0       0       0       0       0       0       0
 14875 ;;      Temps:          0       0       0       0       0       0       0       0
 14876 ;;      Totals:         0       0       0       0       0       0       0       0
 14877 ;;Total ram usage:        0 bytes
 14878 ;; Hardware stack levels used:    1
 14879 ;; Hardware stack levels required when called:    4
 14880 ;; This function calls:
 14881 ;;		Absolute function
 14882 ;;		_TMR0_DefaultInterruptHandler
 14883 ;;		_timeout_isr
 14884 ;; This function is called by:
 14885 ;;		_TMR0_ISR
 14886 ;; This function uses a non-reentrant model
 14887 ;;
 14888                           
 14889                           
 14890                           ;psect for function _TMR0_CallBack
 14891  12A7                     _TMR0_CallBack:	
 14892                           
 14893                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
 14894                           
 14895                           ;incstack = 0
 14896 ;; hardware stack exceeded
 14897                           ; Regs used in _TMR0_CallBack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14898  12A7  0021               	movlb	1	; select bank1
 14899  12A8  086C               	movf	_TMR0_InterruptHandler^(0+128),w
 14900  12A9  046D               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 14901  12AA  1903               	btfsc	3,2
 14902  12AB  0008               	return
 14903                           
 14904                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
 14905  12AC  086D               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 14906  12AD  008A               	movwf	10
 14907  12AE  086C               	movf	_TMR0_InterruptHandler^(0+128),w
 14908  12AF  000A               	callw
 14909  12B0  3192               	pagesel	$
 14910  12B1  0008               	return
 14911  12B2                     __end_of_TMR0_CallBack:	
 14912                           
 14913                           	psect	text96
 14914  11CA                     __ptext96:	
 14915 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 14916 ;; Defined at:
 14917 ;;		line 137 in file "mcc_generated_files/tmr0.c"
 14918 ;; Parameters:    Size  Location     Type
 14919 ;;		None
 14920 ;; Auto vars:     Size  Location     Type
 14921 ;;		None
 14922 ;; Return value:  Size  Location     Type
 14923 ;;                  1    wreg      void 
 14924 ;; Registers used:
 14925 ;;		None
 14926 ;; Tracked objects:
 14927 ;;		On entry : 0/0
 14928 ;;		On exit  : 0/0
 14929 ;;		Unchanged: 0/0
 14930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14931 ;;      Params:         0       0       0       0       0       0       0       0
 14932 ;;      Locals:         0       0       0       0       0       0       0       0
 14933 ;;      Temps:          0       0       0       0       0       0       0       0
 14934 ;;      Totals:         0       0       0       0       0       0       0       0
 14935 ;;Total ram usage:        0 bytes
 14936 ;; Hardware stack levels used:    1
 14937 ;; This function calls:
 14938 ;;		Nothing
 14939 ;; This function is called by:
 14940 ;;		_TMR0_Initialize
 14941 ;;		_TMR0_CallBack
 14942 ;; This function uses a non-reentrant model
 14943 ;;
 14944                           
 14945                           
 14946                           ;psect for function _TMR0_DefaultInterruptHandler
 14947  11CA                     _TMR0_DefaultInterruptHandler:	
 14948                           
 14949                           ;incstack = 0
 14950 ;; hardware stack exceeded
 14951                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 14952  11CA  0008               	return
 14953  11CB                     __end_of_TMR0_DefaultInterruptHandler:	
 14954                           
 14955                           	psect	text97
 14956  176B                     __ptext97:	
 14957 ;; *************** function _timeout_isr *****************
 14958 ;; Defined at:
 14959 ;;		line 346 in file "mcc_generated_files/drivers/timeout.c"
 14960 ;; Parameters:    Size  Location     Type
 14961 ;;		None
 14962 ;; Auto vars:     Size  Location     Type
 14963 ;;  next            1    4[BANK0 ] PTR struct tmrStruct
 14964 ;;		 -> dummy(8), NULL(0), 
 14965 ;; Return value:  Size  Location     Type
 14966 ;;                  1    wreg      void 
 14967 ;; Registers used:
 14968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14969 ;; Tracked objects:
 14970 ;;		On entry : 0/0
 14971 ;;		On exit  : 0/0
 14972 ;;		Unchanged: 0/0
 14973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14974 ;;      Params:         0       0       0       0       0       0       0       0
 14975 ;;      Locals:         0       1       0       0       0       0       0       0
 14976 ;;      Temps:          1       0       0       0       0       0       0       0
 14977 ;;      Totals:         1       1       0       0       0       0       0       0
 14978 ;;Total ram usage:        2 bytes
 14979 ;; Hardware stack levels used:    1
 14980 ;; Hardware stack levels required when called:    3
 14981 ;; This function calls:
 14982 ;;		_enqueueCallback
 14983 ;;		_startTimerAtHead
 14984 ;; This function is called by:
 14985 ;;		_timeout_initialize
 14986 ;;		_TMR0_CallBack
 14987 ;; This function uses a non-reentrant model
 14988 ;;
 14989                           
 14990                           
 14991                           ;psect for function _timeout_isr
 14992  176B                     _timeout_isr:	
 14993                           
 14994                           ;mcc_generated_files/drivers/timeout.c: 348:     timerStruct_t *next = listHead->next;
 14995                           
 14996                           ;incstack = 0
 14997 ;; hardware stack exceeded
 14998                           ; Regs used in _timeout_isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14999  176B  0020               	movlb	0	; select bank0
 15000  176C  086A               	movf	_listHead,w
 15001  176D  0086               	movwf	6
 15002  176E  3001               	movlw	1	; select bank2/3
 15003  176F  0087               	movwf	7
 15004  1770  3001               	movlw	1	; select bank2/3
 15005  1771  3F43               	moviw [3]fsr1
 15006  1772  00A4               	movwf	timeout_isr@next
 15007                           
 15008                           ;mcc_generated_files/drivers/timeout.c: 349:     absoluteTimeofLastTimeout = listHead->a
      +                          bsoluteTime;
 15009  1773  086A               	movf	_listHead,w
 15010  1774  3E04               	addlw	4
 15011  1775  0086               	movwf	6
 15012  1776  3001               	movlw	1	; select bank2/3
 15013  1777  0087               	movwf	7
 15014  1778  3F40               	moviw [0]fsr1
 15015  1779  0021               	movlb	1	; select bank1
 15016  177A  00C9               	movwf	_absoluteTimeofLastTimeout^(0+128)	;volatile
 15017  177B  3F41               	moviw [1]fsr1
 15018  177C  00CA               	movwf	(_absoluteTimeofLastTimeout+1)^(0+128)	;volatile
 15019  177D  3F42               	moviw [2]fsr1
 15020  177E  00CB               	movwf	(_absoluteTimeofLastTimeout+2)^(0+128)	;volatile
 15021  177F  3F43               	moviw [3]fsr1
 15022  1780  00CC               	movwf	(_absoluteTimeofLastTimeout+3)^(0+128)	;volatile
 15023                           
 15024                           ;mcc_generated_files/drivers/timeout.c: 350:     lastTimerLoad = 0;
 15025  1781  3000               	movlw	0
 15026  1782  00C8               	movwf	(_lastTimerLoad+3)^(0+128)	;volatile
 15027  1783  3000               	movlw	0
 15028  1784  00C7               	movwf	(_lastTimerLoad+2)^(0+128)	;volatile
 15029  1785  3000               	movlw	0
 15030  1786  00C6               	movwf	(_lastTimerLoad+1)^(0+128)	;volatile
 15031  1787  3000               	movlw	0
 15032  1788  00C5               	movwf	_lastTimerLoad^(0+128)	;volatile
 15033                           
 15034                           ;mcc_generated_files/drivers/timeout.c: 352:     if (listHead != &dummy) {
 15035  1789  0020               	movlb	0	; select bank0
 15036  178A  086A               	movf	_listHead,w
 15037  178B  3A42               	xorlw	(low (_dummy| (0+256)))& (0+255)
 15038  178C  1903               	skipnz
 15039  178D  2F92               	goto	i1l4998
 15040                           
 15041                           ;mcc_generated_files/drivers/timeout.c: 353:         enqueueCallback(listHead);
 15042  178E  086A               	movf	_listHead,w
 15043  178F  3196  26E3  3197   	fcall	_enqueueCallback
 15044  1792                     i1l4998:	
 15045                           
 15046                           ;mcc_generated_files/drivers/timeout.c: 356:     listHead = next;
 15047  1792  0020               	movlb	0	; select bank0
 15048  1793  0824               	movf	timeout_isr@next,w
 15049  1794  00FD               	movwf	??_timeout_isr
 15050  1795  087D               	movf	??_timeout_isr,w
 15051  1796  00EA               	movwf	_listHead
 15052                           
 15053                           ;mcc_generated_files/drivers/timeout.c: 358:     startTimerAtHead();
 15054  1797  318B  23A2         	fcall	_startTimerAtHead
 15055  1799  0008               	return
 15056  179A                     __end_of_timeout_isr:	
 15057                           
 15058                           	psect	text98
 15059  0BA2                     __ptext98:	
 15060 ;; *************** function _startTimerAtHead *****************
 15061 ;; Defined at:
 15062 ;;		line 167 in file "mcc_generated_files/drivers/timeout.c"
 15063 ;; Parameters:    Size  Location     Type
 15064 ;;		None
 15065 ;; Auto vars:     Size  Location     Type
 15066 ;;  period          4    0[BANK0 ] unsigned long 
 15067 ;; Return value:  Size  Location     Type
 15068 ;;                  1    wreg      void 
 15069 ;; Registers used:
 15070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15076 ;;      Params:         0       0       0       0       0       0       0       0
 15077 ;;      Locals:         0       4       0       0       0       0       0       0
 15078 ;;      Temps:          4       0       0       0       0       0       0       0
 15079 ;;      Totals:         4       4       0       0       0       0       0       0
 15080 ;;Total ram usage:        8 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    2
 15083 ;; This function calls:
 15084 ;;		_setTimerDuration
 15085 ;;		_stopTimeouts
 15086 ;; This function is called by:
 15087 ;;		_timeout_isr
 15088 ;;		_timeout_deleteHelper
 15089 ;;		_timeout_create
 15090 ;; This function uses a non-reentrant model
 15091 ;;
 15092                           
 15093                           
 15094                           ;psect for function _startTimerAtHead
 15095  0BA2                     _startTimerAtHead:	
 15096                           
 15097                           ;mcc_generated_files/drivers/timeout.c: 171:     INTCONbits.TMR0IE = 0;
 15098                           
 15099                           ;incstack = 0
 15100 ;; hardware stack exceeded
 15101                           ; Regs used in _startTimerAtHead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15102  0BA2  128B               	bcf	11,5	;volatile
 15103                           
 15104                           ;mcc_generated_files/drivers/timeout.c: 173:     if(listHead==((void*)0))
 15105  0BA3  0020               	movlb	0	; select bank0
 15106  0BA4  086A               	movf	_listHead,w
 15107  0BA5  1D03               	btfss	3,2
 15108  0BA6  2BAA               	goto	i1l4816
 15109                           
 15110                           ;mcc_generated_files/drivers/timeout.c: 174:     {;mcc_generated_files/drivers/timeout.c
      +                          : 175:         stopTimeouts();
 15111  0BA7  3193  23BE         	fcall	_stopTimeouts
 15112  0BA9  0008               	return
 15113  0BAA                     i1l4816:	
 15114                           
 15115                           ;mcc_generated_files/drivers/timeout.c: 179:     uint32_t period = listHead->absoluteTim
      +                          e - absoluteTimeofLastTimeout;
 15116  0BAA  086A               	movf	_listHead,w
 15117  0BAB  3E04               	addlw	4
 15118  0BAC  0086               	movwf	6
 15119  0BAD  3001               	movlw	1	; select bank2/3
 15120  0BAE  0087               	movwf	7
 15121  0BAF  3F40               	moviw [0]fsr1
 15122  0BB0  00F9               	movwf	??_startTimerAtHead
 15123  0BB1  3F41               	moviw [1]fsr1
 15124  0BB2  00FA               	movwf	??_startTimerAtHead+1
 15125  0BB3  3F42               	moviw [2]fsr1
 15126  0BB4  00FB               	movwf	??_startTimerAtHead+2
 15127  0BB5  3F43               	moviw [3]fsr1
 15128  0BB6  00FC               	movwf	??_startTimerAtHead+3
 15129  0BB7  0021               	movlb	1	; select bank1
 15130  0BB8  0849               	movf	_absoluteTimeofLastTimeout^(0+128),w	;volatile
 15131  0BB9  02F9               	subwf	??_startTimerAtHead,f
 15132  0BBA  084A               	movf	(_absoluteTimeofLastTimeout+1)^(0+128),w	;volatile
 15133  0BBB  3BFA               	subwfb	??_startTimerAtHead+1,f
 15134  0BBC  084B               	movf	(_absoluteTimeofLastTimeout+2)^(0+128),w	;volatile
 15135  0BBD  3BFB               	subwfb	??_startTimerAtHead+2,f
 15136  0BBE  084C               	movf	(_absoluteTimeofLastTimeout+3)^(0+128),w	;volatile
 15137  0BBF  3BFC               	subwfb	??_startTimerAtHead+3,f
 15138  0BC0  087C               	movf	??_startTimerAtHead+3,w
 15139  0BC1  0020               	movlb	0	; select bank0
 15140  0BC2  00A3               	movwf	startTimerAtHead@period+3
 15141  0BC3  087B               	movf	??_startTimerAtHead+2,w
 15142  0BC4  00A2               	movwf	startTimerAtHead@period+2
 15143  0BC5  087A               	movf	??_startTimerAtHead+1,w
 15144  0BC6  00A1               	movwf	startTimerAtHead@period+1
 15145  0BC7  0879               	movf	??_startTimerAtHead,w
 15146  0BC8  00A0               	movwf	startTimerAtHead@period
 15147                           
 15148                           ;mcc_generated_files/drivers/timeout.c: 182:     if (period > (255))
 15149  0BC9  0823               	movf	startTimerAtHead@period+3,w
 15150  0BCA  1D03               	btfss	3,2
 15151  0BCB  2BD3               	goto	i1l4820
 15152  0BCC  0822               	movf	startTimerAtHead@period+2,w
 15153  0BCD  1D03               	btfss	3,2
 15154  0BCE  2BD3               	goto	i1l4820
 15155  0BCF  3001               	movlw	1
 15156  0BD0  0221               	subwf	startTimerAtHead@period+1,w
 15157  0BD1  1C03               	btfss	3,0
 15158  0BD2  2BFA               	goto	i1l4828
 15159  0BD3                     i1l4820:	
 15160                           
 15161                           ;mcc_generated_files/drivers/timeout.c: 183:     {;mcc_generated_files/drivers/timeout.c
      +                          : 184:         dummy.absoluteTime = absoluteTimeofLastTimeout + (255);
 15162  0BD3  30FF               	movlw	255
 15163  0BD4  0021               	movlb	1	; select bank1
 15164  0BD5  0749               	addwf	_absoluteTimeofLastTimeout^(0+128),w	;volatile
 15165  0BD6  0022               	movlb	2	; select bank2
 15166  0BD7  00C6               	movwf	(_dummy^(0+256)+4)
 15167  0BD8  3000               	movlw	0
 15168  0BD9  0021               	movlb	1	; select bank1
 15169  0BDA  3D4A               	addwfc	(_absoluteTimeofLastTimeout+1)^(0+128),w	;volatile
 15170  0BDB  0022               	movlb	2	; select bank2
 15171  0BDC  00C7               	movwf	((_dummy+1)^(0+256)+4)
 15172  0BDD  3000               	movlw	0
 15173  0BDE  0021               	movlb	1	; select bank1
 15174  0BDF  3D4B               	addwfc	(_absoluteTimeofLastTimeout+2)^(0+128),w	;volatile
 15175  0BE0  0022               	movlb	2	; select bank2
 15176  0BE1  00C8               	movwf	((_dummy+2)^(0+256)+4)
 15177  0BE2  3000               	movlw	0
 15178  0BE3  0021               	movlb	1	; select bank1
 15179  0BE4  3D4C               	addwfc	(_absoluteTimeofLastTimeout+3)^(0+128),w	;volatile
 15180  0BE5  0022               	movlb	2	; select bank2
 15181  0BE6  00C9               	movwf	((_dummy+3)^(0+256)+4)
 15182                           
 15183                           ;mcc_generated_files/drivers/timeout.c: 185:         dummy.next = listHead;
 15184  0BE7  0020               	movlb	0	; select bank0
 15185  0BE8  086A               	movf	_listHead,w
 15186  0BE9  00F9               	movwf	??_startTimerAtHead
 15187  0BEA  0879               	movf	??_startTimerAtHead,w
 15188  0BEB  0022               	movlb	2	; select bank2
 15189  0BEC  00C5               	movwf	(low ((_dummy| (0+256)+3)))^0
 15190                           
 15191                           ;mcc_generated_files/drivers/timeout.c: 186:         listHead = &dummy;
 15192  0BED  3042               	movlw	(low (_dummy| (0+256)))& (0+255)
 15193  0BEE  00F9               	movwf	??_startTimerAtHead
 15194  0BEF  0879               	movf	??_startTimerAtHead,w
 15195  0BF0  0020               	movlb	0	; select bank0
 15196  0BF1  00EA               	movwf	_listHead
 15197                           
 15198                           ;mcc_generated_files/drivers/timeout.c: 187:         period = (255);
 15199  0BF2  3000               	movlw	0
 15200  0BF3  00A3               	movwf	startTimerAtHead@period+3
 15201  0BF4  3000               	movlw	0
 15202  0BF5  00A2               	movwf	startTimerAtHead@period+2
 15203  0BF6  3000               	movlw	0
 15204  0BF7  00A1               	movwf	startTimerAtHead@period+1
 15205  0BF8  30FF               	movlw	255
 15206  0BF9  00A0               	movwf	startTimerAtHead@period
 15207  0BFA                     i1l4828:	
 15208                           
 15209                           ;mcc_generated_files/drivers/timeout.c: 190:     setTimerDuration(period);
 15210  0BFA  0823               	movf	startTimerAtHead@period+3,w
 15211  0BFB  00F4               	movwf	setTimerDuration@duration+3
 15212  0BFC  0822               	movf	startTimerAtHead@period+2,w
 15213  0BFD  00F3               	movwf	setTimerDuration@duration+2
 15214  0BFE  0821               	movf	startTimerAtHead@period+1,w
 15215  0BFF  00F2               	movwf	setTimerDuration@duration+1
 15216  0C00  0820               	movf	startTimerAtHead@period,w
 15217  0C01  00F1               	movwf	setTimerDuration@duration
 15218  0C02  3195  25C6         	fcall	_setTimerDuration
 15219                           
 15220                           ;mcc_generated_files/drivers/timeout.c: 192:     INTCONbits.TMR0IE = 1;
 15221  0C04  168B               	bsf	11,5	;volatile
 15222                           
 15223                           ;mcc_generated_files/drivers/timeout.c: 193:     isRunning = 1;
 15224  0C05  3001               	movlw	1
 15225  0C06  00F9               	movwf	??_startTimerAtHead
 15226  0C07  0879               	movf	??_startTimerAtHead,w
 15227  0C08  0021               	movlb	1	; select bank1
 15228  0C09  00DD               	movwf	_isRunning^(0+128)	;volatile
 15229  0C0A  0008               	return
 15230  0C0B                     __end_of_startTimerAtHead:	
 15231                           
 15232                           	psect	text99
 15233  13BE                     __ptext99:	
 15234 ;; *************** function _stopTimeouts *****************
 15235 ;; Defined at:
 15236 ;;		line 59 in file "mcc_generated_files/drivers/timeout.c"
 15237 ;; Parameters:    Size  Location     Type
 15238 ;;		None
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;		None
 15241 ;; Return value:  Size  Location     Type
 15242 ;;                  1    wreg      void 
 15243 ;; Registers used:
 15244 ;;		wreg, status,2
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15250 ;;      Params:         0       0       0       0       0       0       0       0
 15251 ;;      Locals:         0       0       0       0       0       0       0       0
 15252 ;;      Temps:          0       0       0       0       0       0       0       0
 15253 ;;      Totals:         0       0       0       0       0       0       0       0
 15254 ;;Total ram usage:        0 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; This function calls:
 15257 ;;		Nothing
 15258 ;; This function is called by:
 15259 ;;		_startTimerAtHead
 15260 ;;		_timeout_flushAll
 15261 ;; This function uses a non-reentrant model
 15262 ;;
 15263                           
 15264                           
 15265                           ;psect for function _stopTimeouts
 15266  13BE                     _stopTimeouts:	
 15267                           
 15268                           ;mcc_generated_files/drivers/timeout.c: 61:     INTCONbits.TMR0IE = 0;
 15269                           
 15270                           ;incstack = 0
 15271 ;; hardware stack exceeded
 15272                           ; Regs used in _stopTimeouts: [wreg+status,2]
 15273  13BE  128B               	bcf	11,5	;volatile
 15274                           
 15275                           ;mcc_generated_files/drivers/timeout.c: 62:     absoluteTimeofLastTimeout = 0;
 15276  13BF  3000               	movlw	0
 15277  13C0  0021               	movlb	1	; select bank1
 15278  13C1  00CC               	movwf	(_absoluteTimeofLastTimeout+3)^(0+128)	;volatile
 15279  13C2  3000               	movlw	0
 15280  13C3  00CB               	movwf	(_absoluteTimeofLastTimeout+2)^(0+128)	;volatile
 15281  13C4  3000               	movlw	0
 15282  13C5  00CA               	movwf	(_absoluteTimeofLastTimeout+1)^(0+128)	;volatile
 15283  13C6  3000               	movlw	0
 15284  13C7  00C9               	movwf	_absoluteTimeofLastTimeout^(0+128)	;volatile
 15285                           
 15286                           ;mcc_generated_files/drivers/timeout.c: 63:     lastTimerLoad = 0;
 15287  13C8  3000               	movlw	0
 15288  13C9  00C8               	movwf	(_lastTimerLoad+3)^(0+128)	;volatile
 15289  13CA  3000               	movlw	0
 15290  13CB  00C7               	movwf	(_lastTimerLoad+2)^(0+128)	;volatile
 15291  13CC  3000               	movlw	0
 15292  13CD  00C6               	movwf	(_lastTimerLoad+1)^(0+128)	;volatile
 15293  13CE  3000               	movlw	0
 15294  13CF  00C5               	movwf	_lastTimerLoad^(0+128)	;volatile
 15295                           
 15296                           ;mcc_generated_files/drivers/timeout.c: 64:     isRunning = 0;
 15297  13D0  01DD               	clrf	_isRunning^(0+128)	;volatile
 15298  13D1  0008               	return
 15299  13D2                     __end_of_stopTimeouts:	
 15300                           
 15301                           	psect	text100
 15302  15C6                     __ptext100:	
 15303 ;; *************** function _setTimerDuration *****************
 15304 ;; Defined at:
 15305 ;;		line 67 in file "mcc_generated_files/drivers/timeout.c"
 15306 ;; Parameters:    Size  Location     Type
 15307 ;;  duration        4    1[COMMON] unsigned long 
 15308 ;; Auto vars:     Size  Location     Type
 15309 ;;		None
 15310 ;; Return value:  Size  Location     Type
 15311 ;;                  1    wreg      void 
 15312 ;; Registers used:
 15313 ;;		wreg, status,2, status,0, pclath, cstack
 15314 ;; Tracked objects:
 15315 ;;		On entry : 0/0
 15316 ;;		On exit  : 0/0
 15317 ;;		Unchanged: 0/0
 15318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15319 ;;      Params:         4       0       0       0       0       0       0       0
 15320 ;;      Locals:         0       0       0       0       0       0       0       0
 15321 ;;      Temps:          4       0       0       0       0       0       0       0
 15322 ;;      Totals:         8       0       0       0       0       0       0       0
 15323 ;;Total ram usage:        8 bytes
 15324 ;; Hardware stack levels used:    1
 15325 ;; Hardware stack levels required when called:    1
 15326 ;; This function calls:
 15327 ;;		_TMR0_WriteTimer
 15328 ;; This function is called by:
 15329 ;;		_startTimerAtHead
 15330 ;;		_sortedInsert
 15331 ;; This function uses a non-reentrant model
 15332 ;;
 15333                           
 15334                           
 15335                           ;psect for function _setTimerDuration
 15336  15C6                     _setTimerDuration:	
 15337                           
 15338                           ;mcc_generated_files/drivers/timeout.c: 67: __attribute__((inline)) void setTimerDuratio
      +                          n(uint32_t duration);mcc_generated_files/drivers/timeout.c: 68: {;mcc_generated_files/dr
      +                          ivers/timeout.c: 69:     lastTimerLoad = (255) - duration;
 15339                           
 15340                           ;incstack = 0
 15341 ;; hardware stack exceeded
 15342                           ; Regs used in _setTimerDuration: [wreg+status,2+status,0+pclath+cstack]
 15343  15C6  30FF               	movlw	255
 15344  15C7  00F5               	movwf	??_setTimerDuration
 15345  15C8  3000               	movlw	0
 15346  15C9  00F6               	movwf	??_setTimerDuration+1
 15347  15CA  3000               	movlw	0
 15348  15CB  00F7               	movwf	??_setTimerDuration+2
 15349  15CC  3000               	movlw	0
 15350  15CD  00F8               	movwf	??_setTimerDuration+3
 15351  15CE  0871               	movf	setTimerDuration@duration,w
 15352  15CF  02F5               	subwf	??_setTimerDuration,f
 15353  15D0  0872               	movf	setTimerDuration@duration+1,w
 15354  15D1  3BF6               	subwfb	??_setTimerDuration+1,f
 15355  15D2  0873               	movf	setTimerDuration@duration+2,w
 15356  15D3  3BF7               	subwfb	??_setTimerDuration+2,f
 15357  15D4  0874               	movf	setTimerDuration@duration+3,w
 15358  15D5  3BF8               	subwfb	??_setTimerDuration+3,f
 15359  15D6  0878               	movf	??_setTimerDuration+3,w
 15360  15D7  0021               	movlb	1	; select bank1
 15361  15D8  00C8               	movwf	(_lastTimerLoad+3)^(0+128)	;volatile
 15362  15D9  0877               	movf	??_setTimerDuration+2,w
 15363  15DA  00C7               	movwf	(_lastTimerLoad+2)^(0+128)	;volatile
 15364  15DB  0876               	movf	??_setTimerDuration+1,w
 15365  15DC  00C6               	movwf	(_lastTimerLoad+1)^(0+128)	;volatile
 15366  15DD  0875               	movf	??_setTimerDuration,w
 15367  15DE  00C5               	movwf	_lastTimerLoad^(0+128)	;volatile
 15368                           
 15369                           ;mcc_generated_files/drivers/timeout.c: 71:     TMR0_WriteTimer(0);
 15370  15DF  3000               	movlw	0
 15371  15E0  3191  21E4  3195   	fcall	_TMR0_WriteTimer
 15372                           
 15373                           ;mcc_generated_files/drivers/timeout.c: 73:     INTCONbits.TMR0IF = 0;
 15374  15E3  110B               	bcf	11,2	;volatile
 15375                           
 15376                           ;mcc_generated_files/drivers/timeout.c: 74:     TMR0_WriteTimer(lastTimerLoad);
 15377  15E4  0021               	movlb	1	; select bank1
 15378  15E5  0845               	movf	_lastTimerLoad^(0+128),w	;volatile
 15379  15E6  3191  21E4         	fcall	_TMR0_WriteTimer
 15380  15E8  0008               	return
 15381  15E9                     __end_of_setTimerDuration:	
 15382                           
 15383                           	psect	text101
 15384  11E4                     __ptext101:	
 15385 ;; *************** function _TMR0_WriteTimer *****************
 15386 ;; Defined at:
 15387 ;;		line 96 in file "mcc_generated_files/tmr0.c"
 15388 ;; Parameters:    Size  Location     Type
 15389 ;;  timerVal        1    wreg     unsigned char 
 15390 ;; Auto vars:     Size  Location     Type
 15391 ;;  timerVal        1    0[COMMON] unsigned char 
 15392 ;; Return value:  Size  Location     Type
 15393 ;;                  1    wreg      void 
 15394 ;; Registers used:
 15395 ;;		wreg
 15396 ;; Tracked objects:
 15397 ;;		On entry : 0/0
 15398 ;;		On exit  : 0/0
 15399 ;;		Unchanged: 0/0
 15400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15401 ;;      Params:         0       0       0       0       0       0       0       0
 15402 ;;      Locals:         1       0       0       0       0       0       0       0
 15403 ;;      Temps:          0       0       0       0       0       0       0       0
 15404 ;;      Totals:         1       0       0       0       0       0       0       0
 15405 ;;Total ram usage:        1 bytes
 15406 ;; Hardware stack levels used:    1
 15407 ;; This function calls:
 15408 ;;		Nothing
 15409 ;; This function is called by:
 15410 ;;		_setTimerDuration
 15411 ;; This function uses a non-reentrant model
 15412 ;;
 15413                           
 15414                           
 15415                           ;psect for function _TMR0_WriteTimer
 15416  11E4                     _TMR0_WriteTimer:	
 15417                           
 15418                           ;incstack = 0
 15419 ;; hardware stack exceeded
 15420                           ; Regs used in _TMR0_WriteTimer: [wreg]
 15421                           ;TMR0_WriteTimer@timerVal stored from wreg
 15422  11E4  00F0               	movwf	TMR0_WriteTimer@timerVal
 15423                           
 15424                           ;mcc_generated_files/tmr0.c: 96: void TMR0_WriteTimer(uint8_t timerVal);mcc_generated_fi
      +                          les/tmr0.c: 97: {;mcc_generated_files/tmr0.c: 99:     TMR0 = timerVal;
 15425  11E5  0870               	movf	TMR0_WriteTimer@timerVal,w
 15426  11E6  0020               	movlb	0	; select bank0
 15427  11E7  0095               	movwf	21	;volatile
 15428  11E8  0008               	return
 15429  11E9                     __end_of_TMR0_WriteTimer:	
 15430                           
 15431                           	psect	text102
 15432  16E3                     __ptext102:	
 15433 ;; *************** function _enqueueCallback *****************
 15434 ;; Defined at:
 15435 ;;		line 262 in file "mcc_generated_files/drivers/timeout.c"
 15436 ;; Parameters:    Size  Location     Type
 15437 ;;  timer           1    wreg     PTR struct tmrStruct
 15438 ;;		 -> dummy(8), NULL(0), 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  timer           1    1[COMMON] PTR struct tmrStruct
 15441 ;;		 -> dummy(8), NULL(0), 
 15442 ;;  tmp             1    2[COMMON] PTR struct tmrStruct
 15443 ;;		 -> dummy(8), NULL(0), 
 15444 ;; Return value:  Size  Location     Type
 15445 ;;                  1    wreg      void 
 15446 ;; Registers used:
 15447 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15448 ;; Tracked objects:
 15449 ;;		On entry : 0/0
 15450 ;;		On exit  : 0/0
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15453 ;;      Params:         0       0       0       0       0       0       0       0
 15454 ;;      Locals:         2       0       0       0       0       0       0       0
 15455 ;;      Temps:          1       0       0       0       0       0       0       0
 15456 ;;      Totals:         3       0       0       0       0       0       0       0
 15457 ;;Total ram usage:        3 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; This function calls:
 15460 ;;		Nothing
 15461 ;; This function is called by:
 15462 ;;		_timeout_isr
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           
 15467                           ;psect for function _enqueueCallback
 15468  16E3                     _enqueueCallback:	
 15469                           
 15470                           ;incstack = 0
 15471 ;; hardware stack exceeded
 15472                           ; Regs used in _enqueueCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 15473                           ;enqueueCallback@timer stored from wreg
 15474  16E3  00F1               	movwf	enqueueCallback@timer
 15475                           
 15476                           ;mcc_generated_files/drivers/timeout.c: 262: __attribute__((inline)) void enqueueCallbac
      +                          k(timerStruct_t* timer);mcc_generated_files/drivers/timeout.c: 263: {;mcc_generated_file
      +                          s/drivers/timeout.c: 264:     timerStruct_t *tmp;;mcc_generated_files/drivers/timeout.c:
      +                           265:     timer->next = ((void*)0);
 15477  16E4  0871               	movf	enqueueCallback@timer,w
 15478  16E5  3E03               	addlw	3
 15479  16E6  0086               	movwf	6
 15480  16E7  3001               	movlw	1	; select bank2/3
 15481  16E8  0087               	movwf	7
 15482  16E9  0181               	clrf	1
 15483                           
 15484                           ;mcc_generated_files/drivers/timeout.c: 268:     if (executeQueueHead == ((void*)0))
 15485  16EA  0020               	movlb	0	; select bank0
 15486  16EB  0869               	movf	_executeQueueHead,w	;volatile
 15487  16EC  1D03               	btfss	3,2
 15488  16ED  2EF3               	goto	i1l4842
 15489                           
 15490                           ;mcc_generated_files/drivers/timeout.c: 269:     {;mcc_generated_files/drivers/timeout.c
      +                          : 270:         executeQueueHead = timer;
 15491  16EE  0871               	movf	enqueueCallback@timer,w
 15492  16EF  00F0               	movwf	??_enqueueCallback
 15493  16F0  0870               	movf	??_enqueueCallback,w
 15494  16F1  00E9               	movwf	_executeQueueHead	;volatile
 15495  16F2  0008               	return
 15496  16F3                     i1l4842:	
 15497                           
 15498                           ;mcc_generated_files/drivers/timeout.c: 275:     tmp = executeQueueHead;
 15499  16F3  0869               	movf	_executeQueueHead,w	;volatile
 15500  16F4  00F0               	movwf	??_enqueueCallback
 15501  16F5  0870               	movf	??_enqueueCallback,w
 15502  16F6                     L9:	
 15503  16F6  00F2               	movwf	enqueueCallback@tmp
 15504                           
 15505                           ;mcc_generated_files/drivers/timeout.c: 276:     while(tmp->next != ((void*)0))
 15506  16F7  0872               	movf	enqueueCallback@tmp,w
 15507  16F8  3E03               	addlw	3
 15508  16F9  0086               	movwf	6
 15509  16FA  3001               	movlw	1	; select bank2/3
 15510  16FB  0087               	movwf	7
 15511  16FC  0801               	movf	1,w
 15512  16FD  1903               	btfsc	3,2
 15513  16FE  2F06               	goto	i1l4848
 15514                           
 15515                           ;mcc_generated_files/drivers/timeout.c: 277:         tmp = tmp->next;
 15516                           
 15517                           ;mcc_generated_files/drivers/timeout.c: 276:     while(tmp->next != ((void*)0))
 15518  16FF  0872               	movf	enqueueCallback@tmp,w
 15519  1700  0086               	movwf	6
 15520  1701  3001               	movlw	1	; select bank2/3
 15521  1702  0087               	movwf	7
 15522  1703  3001               	movlw	1	; select bank2/3
 15523  1704  3F43               	moviw [3]fsr1
 15524  1705  2EF6               	goto	L9
 15525  1706                     i1l4848:	
 15526                           
 15527                           ;mcc_generated_files/drivers/timeout.c: 279:     tmp->next = timer;
 15528  1706  0871               	movf	enqueueCallback@timer,w
 15529  1707  00F0               	movwf	??_enqueueCallback
 15530  1708  0872               	movf	enqueueCallback@tmp,w
 15531  1709  3E03               	addlw	3
 15532  170A  0086               	movwf	6
 15533  170B  3001               	movlw	1	; select bank2/3
 15534  170C  0087               	movwf	7
 15535  170D  0870               	movf	??_enqueueCallback,w
 15536  170E  0081               	movwf	1
 15537  170F  0008               	return
 15538  1710                     __end_of_enqueueCallback:	
 15539                           
 15540                           	psect	text103
 15541  11DC                     __ptext103:	
 15542 ;; *************** function _INT_ISR *****************
 15543 ;; Defined at:
 15544 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 15545 ;; Parameters:    Size  Location     Type
 15546 ;;		None
 15547 ;; Auto vars:     Size  Location     Type
 15548 ;;		None
 15549 ;; Return value:  Size  Location     Type
 15550 ;;                  1    wreg      void 
 15551 ;; Registers used:
 15552 ;;		wreg, status,2, status,0, pclath, cstack
 15553 ;; Tracked objects:
 15554 ;;		On entry : 0/0
 15555 ;;		On exit  : 0/0
 15556 ;;		Unchanged: 0/0
 15557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15558 ;;      Params:         0       0       0       0       0       0       0       0
 15559 ;;      Locals:         0       0       0       0       0       0       0       0
 15560 ;;      Temps:          0       0       0       0       0       0       0       0
 15561 ;;      Totals:         0       0       0       0       0       0       0       0
 15562 ;;Total ram usage:        0 bytes
 15563 ;; Hardware stack levels used:    1
 15564 ;; Hardware stack levels required when called:    2
 15565 ;; This function calls:
 15566 ;;		_INT_CallBack
 15567 ;; This function is called by:
 15568 ;;		_INTERRUPT_InterruptManager
 15569 ;; This function uses a non-reentrant model
 15570 ;;
 15571                           
 15572                           
 15573                           ;psect for function _INT_ISR
 15574  11DC                     _INT_ISR:	
 15575                           
 15576                           ;mcc_generated_files/ext_int.c: 34:     (INTCONbits.INTF = 0);
 15577                           
 15578                           ;incstack = 0
 15579 ;; hardware stack exceeded
 15580                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 15581  11DC  108B               	bcf	11,1	;volatile
 15582                           
 15583                           ;mcc_generated_files/ext_int.c: 37:     INT_CallBack();
 15584  11DD  3192  229C         	fcall	_INT_CallBack
 15585  11DF  0008               	return
 15586  11E0                     __end_of_INT_ISR:	
 15587                           
 15588                           	psect	text104
 15589  129C                     __ptext104:	
 15590 ;; *************** function _INT_CallBack *****************
 15591 ;; Defined at:
 15592 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;		None
 15595 ;; Auto vars:     Size  Location     Type
 15596 ;;		None
 15597 ;; Return value:  Size  Location     Type
 15598 ;;                  1    wreg      void 
 15599 ;; Registers used:
 15600 ;;		wreg, status,2, status,0, pclath, cstack
 15601 ;; Tracked objects:
 15602 ;;		On entry : 0/0
 15603 ;;		On exit  : 0/0
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15606 ;;      Params:         0       0       0       0       0       0       0       0
 15607 ;;      Locals:         0       0       0       0       0       0       0       0
 15608 ;;      Temps:          0       0       0       0       0       0       0       0
 15609 ;;      Totals:         0       0       0       0       0       0       0       0
 15610 ;;Total ram usage:        0 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; Hardware stack levels required when called:    1
 15613 ;; This function calls:
 15614 ;;		Absolute function
 15615 ;;		_INT_DefaultInterruptHandler
 15616 ;; This function is called by:
 15617 ;;		_INT_ISR
 15618 ;; This function uses a non-reentrant model
 15619 ;;
 15620                           
 15621                           
 15622                           ;psect for function _INT_CallBack
 15623  129C                     _INT_CallBack:	
 15624                           
 15625                           ;mcc_generated_files/ext_int.c: 44:     if(INT_InterruptHandler)
 15626                           
 15627                           ;incstack = 0
 15628 ;; hardware stack exceeded
 15629                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15630  129C  0022               	movlb	2	; select bank2
 15631  129D  084A               	movf	_INT_InterruptHandler^(0+256),w
 15632  129E  044B               	iorwf	(_INT_InterruptHandler+1)^(0+256),w
 15633  129F  1903               	btfsc	3,2
 15634  12A0  0008               	return
 15635                           
 15636                           ;mcc_generated_files/ext_int.c: 45:     {;mcc_generated_files/ext_int.c: 46:         INT
      +                          _InterruptHandler();
 15637  12A1  084B               	movf	(_INT_InterruptHandler+1)^(0+256),w
 15638  12A2  008A               	movwf	10
 15639  12A3  084A               	movf	_INT_InterruptHandler^(0+256),w
 15640  12A4  000A               	callw
 15641  12A5  3192               	pagesel	$
 15642  12A6  0008               	return
 15643  12A7                     __end_of_INT_CallBack:	
 15644                           
 15645                           	psect	text105
 15646  11C9                     __ptext105:	
 15647 ;; *************** function _INT_DefaultInterruptHandler *****************
 15648 ;; Defined at:
 15649 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 15650 ;; Parameters:    Size  Location     Type
 15651 ;;		None
 15652 ;; Auto vars:     Size  Location     Type
 15653 ;;		None
 15654 ;; Return value:  Size  Location     Type
 15655 ;;                  1    wreg      void 
 15656 ;; Registers used:
 15657 ;;		None
 15658 ;; Tracked objects:
 15659 ;;		On entry : 0/0
 15660 ;;		On exit  : 0/0
 15661 ;;		Unchanged: 0/0
 15662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15663 ;;      Params:         0       0       0       0       0       0       0       0
 15664 ;;      Locals:         0       0       0       0       0       0       0       0
 15665 ;;      Temps:          0       0       0       0       0       0       0       0
 15666 ;;      Totals:         0       0       0       0       0       0       0       0
 15667 ;;Total ram usage:        0 bytes
 15668 ;; Hardware stack levels used:    1
 15669 ;; This function calls:
 15670 ;;		Nothing
 15671 ;; This function is called by:
 15672 ;;		_EXT_INT_Initialize
 15673 ;;		_INT_CallBack
 15674 ;; This function uses a non-reentrant model
 15675 ;;
 15676                           
 15677                           
 15678                           ;psect for function _INT_DefaultInterruptHandler
 15679  11C9                     _INT_DefaultInterruptHandler:	
 15680                           
 15681                           ;incstack = 0
 15682 ;; hardware stack exceeded
 15683                           ; Regs used in _INT_DefaultInterruptHandler: []
 15684  11C9  0008               	return
 15685  11CA                     __end_of_INT_DefaultInterruptHandler:	
 15686                           
 15687                           	psect	text106
 15688  152F                     __ptext106:	
 15689 ;; *************** function _EUSART_Transmit_ISR *****************
 15690 ;; Defined at:
 15691 ;;		line 205 in file "mcc_generated_files/eusart.c"
 15692 ;; Parameters:    Size  Location     Type
 15693 ;;		None
 15694 ;; Auto vars:     Size  Location     Type
 15695 ;;		None
 15696 ;; Return value:  Size  Location     Type
 15697 ;;                  1    wreg      void 
 15698 ;; Registers used:
 15699 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15700 ;; Tracked objects:
 15701 ;;		On entry : 0/0
 15702 ;;		On exit  : 0/0
 15703 ;;		Unchanged: 0/0
 15704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15705 ;;      Params:         0       0       0       0       0       0       0       0
 15706 ;;      Locals:         0       0       0       0       0       0       0       0
 15707 ;;      Temps:          1       0       0       0       0       0       0       0
 15708 ;;      Totals:         1       0       0       0       0       0       0       0
 15709 ;;Total ram usage:        1 bytes
 15710 ;; Hardware stack levels used:    1
 15711 ;; This function calls:
 15712 ;;		Nothing
 15713 ;; This function is called by:
 15714 ;;		_EUSART_Initialize
 15715 ;;		_INTERRUPT_InterruptManager
 15716 ;; This function uses a non-reentrant model
 15717 ;;
 15718                           
 15719                           
 15720                           ;psect for function _EUSART_Transmit_ISR
 15721  152F                     _EUSART_Transmit_ISR:	
 15722                           
 15723                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 15724                           
 15725                           ;incstack = 0
 15726                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 15727  152F  3008               	movlw	8
 15728  1530  0021               	movlb	1	; select bank1
 15729  1531  026F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 15730  1532  1803               	skipnc
 15731  1533  2D4A               	goto	i1l935
 15732                           
 15733                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 15734  1534  0860               	movf	_eusartTxTail^(0+128),w
 15735  1535  3E30               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 15736  1536  0086               	movwf	6
 15737  1537  3001               	movlw	1	; select bank2/3
 15738  1538  0087               	movwf	7
 15739  1539  0801               	movf	1,w
 15740  153A  0023               	movlb	3	; select bank3
 15741  153B  009A               	movwf	26	;volatile
 15742  153C  3001               	movlw	1
 15743  153D  00F0               	movwf	??_EUSART_Transmit_ISR
 15744  153E  0870               	movf	??_EUSART_Transmit_ISR,w
 15745  153F  0021               	movlb	1	; select bank1
 15746  1540  07E0               	addwf	_eusartTxTail^(0+128),f	;volatile
 15747                           
 15748                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 15749  1541  3008               	movlw	8
 15750  1542  0260               	subwf	_eusartTxTail^(0+128),w	;volatile
 15751  1543  1803               	btfsc	3,0
 15752                           
 15753                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 15754  1544  01E0               	clrf	_eusartTxTail^(0+128)	;volatile
 15755                           
 15756                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 15757  1545  3001               	movlw	1
 15758  1546  00F0               	movwf	??_EUSART_Transmit_ISR
 15759  1547  0870               	movf	??_EUSART_Transmit_ISR,w
 15760  1548  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 15761                           
 15762                           ;mcc_generated_files/eusart.c: 217:     }
 15763  1549  0008               	return
 15764  154A                     i1l935:	
 15765                           ;mcc_generated_files/eusart.c: 218:     else
 15766                           
 15767                           
 15768                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 15769  154A  1211               	bcf	17,4	;volatile
 15770  154B  0008               	return
 15771  154C                     __end_of_EUSART_Transmit_ISR:	
 15772                           
 15773                           	psect	text107
 15774  083F                     __ptext107:	
 15775 ;; *************** function _EUSART_Receive_ISR *****************
 15776 ;; Defined at:
 15777 ;;		line 224 in file "mcc_generated_files/eusart.c"
 15778 ;; Parameters:    Size  Location     Type
 15779 ;;		None
 15780 ;; Auto vars:     Size  Location     Type
 15781 ;;		None
 15782 ;; Return value:  Size  Location     Type
 15783 ;;                  1    wreg      void 
 15784 ;; Registers used:
 15785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15786 ;; Tracked objects:
 15787 ;;		On entry : 0/0
 15788 ;;		On exit  : 0/0
 15789 ;;		Unchanged: 0/0
 15790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15791 ;;      Params:         0       0       0       0       0       0       0       0
 15792 ;;      Locals:         0       0       0       0       0       0       0       0
 15793 ;;      Temps:          0       0       0       0       0       0       0       0
 15794 ;;      Totals:         0       0       0       0       0       0       0       0
 15795 ;;Total ram usage:        0 bytes
 15796 ;; Hardware stack levels used:    1
 15797 ;; Hardware stack levels required when called:    2
 15798 ;; This function calls:
 15799 ;;		Absolute function
 15800 ;;		_EUSART_DefaultErrorHandler
 15801 ;;		_EUSART_DefaultFramingErrorHandler
 15802 ;;		_EUSART_DefaultOverrunErrorHandler
 15803 ;;		_EUSART_RxDataHandler
 15804 ;; This function is called by:
 15805 ;;		_EUSART_Initialize
 15806 ;;		_INTERRUPT_InterruptManager
 15807 ;; This function uses a non-reentrant model
 15808 ;;
 15809                           
 15810                           
 15811                           ;psect for function _EUSART_Receive_ISR
 15812  083F                     _EUSART_Receive_ISR:	
 15813                           
 15814                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 15815                           
 15816                           ;incstack = 0
 15817 ;; hardware stack exceeded
 15818                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15819  083F  0020               	movlb	0	; select bank0
 15820  0840  0867               	movf	_eusartRxHead,w	;volatile
 15821  0841  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15822  0842  0086               	movwf	6
 15823  0843  3001               	movlw	1	; select bank2/3
 15824  0844  0087               	movwf	7
 15825  0845  0181               	clrf	1
 15826                           
 15827                           ;mcc_generated_files/eusart.c: 229:     if(RCSTAbits.FERR){
 15828  0846  0023               	movlb	3	; select bank3
 15829  0847  1D1D               	btfss	29,2	;volatile
 15830  0848  2856               	goto	i1l5340
 15831                           
 15832                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 15833  0849  0020               	movlb	0	; select bank0
 15834  084A  0867               	movf	_eusartRxHead,w	;volatile
 15835  084B  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15836  084C  0086               	movwf	6
 15837  084D  3001               	movlw	1	; select bank2/3
 15838  084E  0087               	movwf	7
 15839  084F  1481               	bsf	1,1
 15840                           
 15841                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 15842  0850  0022               	movlb	2	; select bank2
 15843  0851  0851               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 15844  0852  008A               	movwf	10
 15845  0853  0850               	movf	_EUSART_FramingErrorHandler^(0+256),w
 15846  0854  000A               	callw
 15847  0855  3188               	pagesel	$
 15848  0856                     i1l5340:	
 15849                           
 15850                           ;mcc_generated_files/eusart.c: 234:     if(RCSTAbits.OERR){
 15851  0856  0023               	movlb	3	; select bank3
 15852  0857  1C9D               	btfss	29,1	;volatile
 15853  0858  2866               	goto	i1l5346
 15854                           
 15855                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 15856  0859  0020               	movlb	0	; select bank0
 15857  085A  0867               	movf	_eusartRxHead,w	;volatile
 15858  085B  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15859  085C  0086               	movwf	6
 15860  085D  3001               	movlw	1	; select bank2/3
 15861  085E  0087               	movwf	7
 15862  085F  1501               	bsf	1,2
 15863                           
 15864                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 15865  0860  0022               	movlb	2	; select bank2
 15866  0861  084F               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 15867  0862  008A               	movwf	10
 15868  0863  084E               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 15869  0864  000A               	callw
 15870  0865  3188               	pagesel	$
 15871  0866                     i1l5346:	
 15872                           
 15873                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 15874  0866  0020               	movlb	0	; select bank0
 15875  0867  0867               	movf	_eusartRxHead,w	;volatile
 15876  0868  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15877  0869  0086               	movwf	6
 15878  086A  3001               	movlw	1	; select bank2/3
 15879  086B  0087               	movwf	7
 15880  086C  0801               	movf	1,w
 15881  086D  1903               	btfsc	3,2
 15882  086E  2876               	goto	i1l5350
 15883                           
 15884                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 15885  086F  0022               	movlb	2	; select bank2
 15886  0870  084D               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 15887  0871  008A               	movwf	10
 15888  0872  084C               	movf	_EUSART_ErrorHandler^(0+256),w
 15889  0873  000A               	callw
 15890  0874  3188               	pagesel	$
 15891                           
 15892                           ;mcc_generated_files/eusart.c: 241:     } else {
 15893  0875  0008               	return
 15894  0876                     i1l5350:	
 15895                           
 15896                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 15897  0876  3194  245C         	fcall	_EUSART_RxDataHandler
 15898  0878  0008               	return
 15899  0879                     __end_of_EUSART_Receive_ISR:	
 15900                           
 15901                           	psect	text108
 15902  11D8                     __ptext108:	
 15903 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 15904 ;; Defined at:
 15905 ;;		line 260 in file "mcc_generated_files/eusart.c"
 15906 ;; Parameters:    Size  Location     Type
 15907 ;;		None
 15908 ;; Auto vars:     Size  Location     Type
 15909 ;;		None
 15910 ;; Return value:  Size  Location     Type
 15911 ;;                  1    wreg      void 
 15912 ;; Registers used:
 15913 ;;		None
 15914 ;; Tracked objects:
 15915 ;;		On entry : 0/0
 15916 ;;		On exit  : 0/0
 15917 ;;		Unchanged: 0/0
 15918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15919 ;;      Params:         0       0       0       0       0       0       0       0
 15920 ;;      Locals:         0       0       0       0       0       0       0       0
 15921 ;;      Temps:          0       0       0       0       0       0       0       0
 15922 ;;      Totals:         0       0       0       0       0       0       0       0
 15923 ;;Total ram usage:        0 bytes
 15924 ;; Hardware stack levels used:    1
 15925 ;; This function calls:
 15926 ;;		Nothing
 15927 ;; This function is called by:
 15928 ;;		_EUSART_Initialize
 15929 ;;		_EUSART_Receive_ISR
 15930 ;; This function uses a non-reentrant model
 15931 ;;
 15932                           
 15933                           
 15934                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 15935  11D8                     _EUSART_DefaultOverrunErrorHandler:	
 15936                           
 15937                           ;mcc_generated_files/eusart.c: 263:     RCSTAbits.CREN = 0;
 15938                           
 15939                           ;incstack = 0
 15940 ;; hardware stack exceeded
 15941                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 15942  11D8  0023               	movlb	3	; select bank3
 15943  11D9  121D               	bcf	29,4	;volatile
 15944                           
 15945                           ;mcc_generated_files/eusart.c: 264:     RCSTAbits.CREN = 1;
 15946  11DA  161D               	bsf	29,4	;volatile
 15947  11DB  0008               	return
 15948  11DC                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 15949                           
 15950                           	psect	text109
 15951  11C8                     __ptext109:	
 15952 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 15953 ;; Defined at:
 15954 ;;		line 258 in file "mcc_generated_files/eusart.c"
 15955 ;; Parameters:    Size  Location     Type
 15956 ;;		None
 15957 ;; Auto vars:     Size  Location     Type
 15958 ;;		None
 15959 ;; Return value:  Size  Location     Type
 15960 ;;                  1    wreg      void 
 15961 ;; Registers used:
 15962 ;;		None
 15963 ;; Tracked objects:
 15964 ;;		On entry : 0/0
 15965 ;;		On exit  : 0/0
 15966 ;;		Unchanged: 0/0
 15967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15968 ;;      Params:         0       0       0       0       0       0       0       0
 15969 ;;      Locals:         0       0       0       0       0       0       0       0
 15970 ;;      Temps:          0       0       0       0       0       0       0       0
 15971 ;;      Totals:         0       0       0       0       0       0       0       0
 15972 ;;Total ram usage:        0 bytes
 15973 ;; Hardware stack levels used:    1
 15974 ;; This function calls:
 15975 ;;		Nothing
 15976 ;; This function is called by:
 15977 ;;		_EUSART_Initialize
 15978 ;;		_EUSART_Receive_ISR
 15979 ;; This function uses a non-reentrant model
 15980 ;;
 15981                           
 15982                           
 15983                           ;psect for function _EUSART_DefaultFramingErrorHandler
 15984  11C8                     _EUSART_DefaultFramingErrorHandler:	
 15985                           
 15986                           ;incstack = 0
 15987 ;; hardware stack exceeded
 15988                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 15989  11C8  0008               	return
 15990  11C9                     __end_of_EUSART_DefaultFramingErrorHandler:	
 15991                           
 15992                           	psect	text110
 15993  11CC                     __ptext110:	
 15994 ;; *************** function _EUSART_DefaultErrorHandler *****************
 15995 ;; Defined at:
 15996 ;;		line 268 in file "mcc_generated_files/eusart.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;		None
 15999 ;; Auto vars:     Size  Location     Type
 16000 ;;		None
 16001 ;; Return value:  Size  Location     Type
 16002 ;;                  1    wreg      void 
 16003 ;; Registers used:
 16004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16010 ;;      Params:         0       0       0       0       0       0       0       0
 16011 ;;      Locals:         0       0       0       0       0       0       0       0
 16012 ;;      Temps:          0       0       0       0       0       0       0       0
 16013 ;;      Totals:         0       0       0       0       0       0       0       0
 16014 ;;Total ram usage:        0 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:    1
 16017 ;; This function calls:
 16018 ;;		_EUSART_RxDataHandler
 16019 ;; This function is called by:
 16020 ;;		_EUSART_Initialize
 16021 ;;		_EUSART_Receive_ISR
 16022 ;; This function uses a non-reentrant model
 16023 ;;
 16024                           
 16025                           
 16026                           ;psect for function _EUSART_DefaultErrorHandler
 16027  11CC                     _EUSART_DefaultErrorHandler:	
 16028                           
 16029                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 16030                           
 16031                           ;incstack = 0
 16032 ;; hardware stack exceeded
 16033                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16034  11CC  3194  245C         	fcall	_EUSART_RxDataHandler
 16035  11CE  0008               	return
 16036  11CF                     __end_of_EUSART_DefaultErrorHandler:	
 16037                           
 16038                           	psect	text111
 16039  145C                     __ptext111:	
 16040 ;; *************** function _EUSART_RxDataHandler *****************
 16041 ;; Defined at:
 16042 ;;		line 248 in file "mcc_generated_files/eusart.c"
 16043 ;; Parameters:    Size  Location     Type
 16044 ;;		None
 16045 ;; Auto vars:     Size  Location     Type
 16046 ;;		None
 16047 ;; Return value:  Size  Location     Type
 16048 ;;                  1    wreg      void 
 16049 ;; Registers used:
 16050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16051 ;; Tracked objects:
 16052 ;;		On entry : 0/0
 16053 ;;		On exit  : 0/0
 16054 ;;		Unchanged: 0/0
 16055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16056 ;;      Params:         0       0       0       0       0       0       0       0
 16057 ;;      Locals:         0       0       0       0       0       0       0       0
 16058 ;;      Temps:          1       0       0       0       0       0       0       0
 16059 ;;      Totals:         1       0       0       0       0       0       0       0
 16060 ;;Total ram usage:        1 bytes
 16061 ;; Hardware stack levels used:    1
 16062 ;; This function calls:
 16063 ;;		Nothing
 16064 ;; This function is called by:
 16065 ;;		_EUSART_Receive_ISR
 16066 ;;		_EUSART_DefaultErrorHandler
 16067 ;; This function uses a non-reentrant model
 16068 ;;
 16069                           
 16070                           
 16071                           ;psect for function _EUSART_RxDataHandler
 16072  145C                     _EUSART_RxDataHandler:	
 16073                           
 16074                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16075                           
 16076                           ;incstack = 0
 16077 ;; hardware stack exceeded
 16078                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16079  145C  0023               	movlb	3	; select bank3
 16080  145D  0819               	movf	25,w	;volatile
 16081  145E  00F0               	movwf	??_EUSART_RxDataHandler
 16082  145F  0020               	movlb	0	; select bank0
 16083  1460  0867               	movf	_eusartRxHead,w
 16084  1461  3E28               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16085  1462  0086               	movwf	6
 16086  1463  3001               	movlw	1	; select bank2/3
 16087  1464  0087               	movwf	7
 16088  1465  0870               	movf	??_EUSART_RxDataHandler,w
 16089  1466  0081               	movwf	1
 16090  1467  3001               	movlw	1
 16091  1468  00F0               	movwf	??_EUSART_RxDataHandler
 16092  1469  0870               	movf	??_EUSART_RxDataHandler,w
 16093  146A  07E7               	addwf	_eusartRxHead,f	;volatile
 16094                           
 16095                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16096  146B  3008               	movlw	8
 16097  146C  0267               	subwf	_eusartRxHead,w	;volatile
 16098  146D  1803               	btfsc	3,0
 16099                           
 16100                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 16101  146E  01E7               	clrf	_eusartRxHead	;volatile
 16102                           
 16103                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 16104  146F  3001               	movlw	1
 16105  1470  00F0               	movwf	??_EUSART_RxDataHandler
 16106  1471  0870               	movf	??_EUSART_RxDataHandler,w
 16107  1472  0021               	movlb	1	; select bank1
 16108  1473  07DF               	addwf	_eusartRxCount^(0+128),f	;volatile
 16109  1474  0008               	return
 16110  1475                     __end_of_EUSART_RxDataHandler:	
 16111  007E                     btemp	set	126	;btemp
 16112  007E                     int$flags	set	126
 16113  007E                     wtemp0	set	126


Data Sizes:
    Strings     59
    Constant    57
    Data        52
    BSS         141
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     70      75
    BANK1            80     37      80
    BANK2            80      5      59
    BANK3            80      0      75
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    timeout_startTimer@timer.next	PTR struct tmrStruct size(1) Largest target is 8
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_startTimer@timer.payload	PTR void  size(1) Largest target is 0

    timeout_startTimer@timer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 0
		 -> dummyHandler(), 

    Button_Service$2936$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Service$2936	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_ReleaseDebounce(), Button_State_Pressed(), Button_State_PressDebounce(), Button_State_NotPressed(), 
		 -> Button_State_Initializing(), 

    S1888$0$0	PTR void  size(1) Largest target is 0

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[3]), STR_11(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[3]), STR_11(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[5]), STR_5(CODE[11]), 
		 -> STR_4(CODE[6]), STR_3(CODE[7]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[5]), STR_5(CODE[11]), 
		 -> STR_4(CODE[6]), STR_3(CODE[7]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[5]), STR_5(CODE[11]), 
		 -> STR_4(CODE[6]), STR_3(CODE[7]), STR_2(CODE[5]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2571_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[5]), STR_5(CODE[11]), 
		 -> STR_4(CODE[6]), STR_3(CODE[7]), STR_2(CODE[5]), STR_1(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[6]), STR_7(CODE[8]), STR_6(CODE[5]), STR_5(CODE[11]), 
		 -> STR_4(CODE[6]), STR_3(CODE[7]), STR_2(CODE[5]), STR_1(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    timeout_stopTimer@timer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_stopTimer@timer.payload	PTR void  size(1) Largest target is 0

    timeout_stopTimer@timer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_isr@next.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_isr@next.payload	PTR void  size(1) Largest target is 0

    timeout_isr@next.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_isr@next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_create@timer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_create@timer.payload	PTR void  size(1) Largest target is 0

    timeout_create@timer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_callNextCallback@callBackTimer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_callNextCallback@callBackTimer.payload	PTR void  size(1) Largest target is 0

    timeout_callNextCallback@callBackTimer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    enqueueCallback@tmp.next.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    enqueueCallback@tmp.next.payload	PTR void  size(1) Largest target is 0

    enqueueCallback@tmp.next.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    enqueueCallback@tmp.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    enqueueCallback@tmp.payload	PTR void  size(1) Largest target is 0

    enqueueCallback@tmp.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    enqueueCallback@tmp	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    executeQueueHead.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    executeQueueHead.payload	PTR void  size(1) Largest target is 0

    executeQueueHead.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    enqueueCallback@timer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    enqueueCallback@timer.payload	PTR void  size(1) Largest target is 0

    enqueueCallback@timer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    enqueueCallback@timer	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_delete@timer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_delete@timer.payload	PTR void  size(1) Largest target is 0

    timeout_delete@timer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_deleteHelper@prevTimer.next.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_deleteHelper@prevTimer.next.payload	PTR void  size(1) Largest target is 0

    timeout_deleteHelper@prevTimer.next.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_deleteHelper@prevTimer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_deleteHelper@prevTimer.payload	PTR void  size(1) Largest target is 0

    timeout_deleteHelper@prevTimer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_deleteHelper@findTimer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_deleteHelper@findTimer.payload	PTR void  size(1) Largest target is 0

    timeout_deleteHelper@findTimer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_deleteHelper@list.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_deleteHelper@list.payload	PTR void  size(1) Largest target is 0

    timeout_deleteHelper@list.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    dummy.next.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    dummy.next.payload	PTR void  size(1) Largest target is 0

    dummy.next.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    sortedInsert@prevPoint.next.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    sortedInsert@prevPoint.next.payload	PTR void  size(1) Largest target is 0

    sortedInsert@prevPoint.next.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    sortedInsert@timer.next.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    sortedInsert@timer.next.payload	PTR void  size(1) Largest target is 0

    sortedInsert@timer.next.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    listHead.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    listHead.payload	PTR void  size(1) Largest target is 0

    listHead.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    sortedInsert$2007.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    sortedInsert$2007.payload	PTR void  size(1) Largest target is 0

    sortedInsert$2007.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    sortedInsert@prevPoint.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    sortedInsert@prevPoint.payload	PTR void  size(1) Largest target is 0

    sortedInsert@prevPoint.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    sortedInsert@insertPoint.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    sortedInsert@insertPoint.payload	PTR void  size(1) Largest target is 0

    sortedInsert@insertPoint.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    sortedInsert@timer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    sortedInsert@timer.payload	PTR void  size(1) Largest target is 0

    sortedInsert@timer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    printList@basePoint.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    printList@basePoint.payload	PTR void  size(1) Largest target is 0

    printList@basePoint.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    rebaseList@basePoint.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    rebaseList@basePoint.payload	PTR void  size(1) Largest target is 0

    rebaseList@basePoint.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    timeout_getTimeRemaining@timer.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    timeout_getTimeRemaining@timer.payload	PTR void  size(1) Largest target is 0

    timeout_getTimeRemaining@timer.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    executeQueueHead	volatile PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    listHead	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    S1888tmrStruct$next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    dummy.next	PTR struct tmrStruct size(1) Largest target is 10
		 -> dummy(BANK2[8]), NULL(NULL[0]), 

    S1888tmrStruct$payload	PTR void  size(1) Largest target is 0

    dummy.payload	PTR void  size(1) Largest target is 0

    S1888tmrStruct$callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    dummy.callbackPtr	PTR FTN(PTR void ,)unsigned long  size(2) Largest target is 4
		 -> dummyHandler(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timeout_isr(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timeout_isr(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_ReleaseDebounce@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_PressDebounce@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [5] size(2) Largest target is 1
		 -> Button_State_ReleaseDebounce(), Button_State_Pressed(), Button_State_PressDebounce(), Button_State_NotPressed(), 
		 -> Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    S113$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK3[27]), 

    S113$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK3[27]), 

    callback_sampled	PTR FTN(enum E2878,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR0_CallBack->_timeout_isr
    _timeout_isr->_startTimerAtHead
    _startTimerAtHead->_setTimerDuration
    _setTimerDuration->_TMR0_WriteTimer
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _timeout_initialize->_TMR0_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _abs->___aomod
    _MTOUCH_Button_Buttonmask_Get->_MTOUCH_Button_isPressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR0_CallBack->_timeout_isr
    _timeout_isr->_startTimerAtHead

Critical Paths under _main in BANK1

    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_ReleaseDebounce->_myButtonReleasedCallback
    _Button_State_Pressed->_myButtonReleasedCallback
    _myButtonReleasedCallback->_printf
    _myButtonPressedCallback->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_MTOUCH_Service_Mainloop
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Button_ServiceAll->_Button_Service

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   63606
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4818
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
                 _timeout_initialize
 ---------------------------------------------------------------------------------
 (2) _timeout_initialize                                   0     0      0     174
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     174
                                              7 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     174
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3882
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                             13 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                             11 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              9 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1339
                                             15 BANK0      2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     328
                                              5 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      98
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              7 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   58592
                                              4 BANK2      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              8 BANK0      2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              6 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   17259
                                             69 BANK0      1     1      0
                                              4 BANK1      1     1      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   17160
                                             66 BANK0      3     3      0
                                              0 BANK1      4     4      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0     103
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     530
                                              9 BANK0      3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     130
                                              5 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   15712
                                             62 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1697
                                             28 BANK0      5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6790
                                             49 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    6247
                                             34 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1    1226
                                              6 BANK0      8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     211
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     242
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     170
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1965
                                             28 BANK0      6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     134
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     134
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     300
                                              5 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   40965
                                              2 BANK2      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   40866
                                             35 BANK1      2     2      0
                                              0 BANK2      2     2      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
         _Button_State_PressDebounce *
               _Button_State_Pressed *
       _Button_State_ReleaseDebounce *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              9 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              9 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_ReleaseDebounce                         3     2      1   11020
                                             30 BANK1      3     2      1
             _Button_DefaultCallback *
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1   11774
                                             30 BANK1      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             3     2      1   10614
                                             27 BANK1      3     2      1
       _MTOUCH_Button_Buttonmask_Get
                             _printf
 ---------------------------------------------------------------------------------
 (4) _Button_State_PressDebounce                           3     2      1   10859
                                             30 BANK1      3     2      1
             _Button_DefaultCallback *
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1   10580
                                             27 BANK1      1     0      1
       _MTOUCH_Button_Buttonmask_Get
                             _printf
 ---------------------------------------------------------------------------------
 (6) _printf                                              10     4      6   10187
                                             17 BANK1     10     4      6
       _MTOUCH_Button_Buttonmask_Get (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (7) _vfprintf                                             8     5      3    9380
                                              9 BANK1      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (8) _vfpfcnvrt                                           40    38      2    8930
                                             63 BANK0      7     5      2
                                              0 BANK1      9     9      0
                               _dtoa
                              _fputc
                            _strncmp
 ---------------------------------------------------------------------------------
 (9) _strncmp                                             11     5      6     865
                                              5 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (9) _dtoa                                                30    22      8    6136
                                             33 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (10) _pad                                                 9     6      3    3220
                                             24 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _strlen                                              5     3      2     166
                                              5 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (11) _fputs                                               8     7      1    1429
                                             16 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                8     5      3    1037
                                              8 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0      93
                                              7 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (11) _EUSART_Write                                        2     2      0      62
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     723
                                             24 BANK0      4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (10) ___aomod                                            19     3     16     613
                                              5 BANK0     19     3     16
 ---------------------------------------------------------------------------------
 (10) ___aodiv                                            27    11     16     625
                                              5 BANK0     27    11     16
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_Buttonmask_Get                         4     4      0     297
                                              8 BANK0      4     4      0
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Button_isPressed                              3     3      0     130
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                             27 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1717
                                             30 BANK1      3     2      1
             _Button_Baseline_Update
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                             11 BANK0      4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              9 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1481
                                             30 BANK1      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     340
                                              5 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                             13 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                             16 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                             13 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              9 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              5 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     296
                                              5 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _INTERRUPT_InterruptManager                          0     0      0     432
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (16) _TMR0_ISR                                            0     0      0     432
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (17) _TMR0_CallBack                                       0     0      0     432
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _timeout_isr *
 ---------------------------------------------------------------------------------
 (18) _timeout_isr                                         2     2      0     432
                                             13 COMMON     1     1      0
                                              4 BANK0      1     1      0
                    _enqueueCallback
                   _startTimerAtHead
 ---------------------------------------------------------------------------------
 (19) _startTimerAtHead                                    8     8      0     242
                                              9 COMMON     4     4      0
                                              0 BANK0      4     4      0
                   _setTimerDuration
                       _stopTimeouts
 ---------------------------------------------------------------------------------
 (20) _stopTimeouts                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (20) _setTimerDuration                                    8     4      4     196
                                              1 COMMON     8     4      4
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (21) _TMR0_WriteTimer                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (19) _enqueueCallback                                     3     3      0     167
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (18) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _INT_ISR                                             0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (17) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (18) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (16) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
               ___bmul
         _Button_State_PressDebounce *
           _Button_DefaultCallback *
           _myButtonPressedCallback *
             _MTOUCH_Button_Buttonmask_Get
               _MTOUCH_Button_isPressed
             _printf
               _MTOUCH_Button_Buttonmask_Get (ARG)
                 _MTOUCH_Button_isPressed
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _putch
                           _EUSART_Write
                       _fputs
                         _fputc
                           _putch
                             _EUSART_Write
                       _strlen
                   _fputc
                     _putch
                       _EUSART_Write
                   _strncmp
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_Buttonmask_Get
               _MTOUCH_Button_isPressed
             _printf
               _MTOUCH_Button_Buttonmask_Get (ARG)
                 _MTOUCH_Button_isPressed
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _putch
                           _EUSART_Write
                       _fputs
                         _fputc
                           _putch
                             _EUSART_Write
                       _strlen
                   _fputc
                     _putch
                       _EUSART_Write
                   _strncmp
         _Button_State_ReleaseDebounce *
           _Button_DefaultCallback *
           _myButtonReleasedCallback *
             _MTOUCH_Button_Buttonmask_Get
               _MTOUCH_Button_isPressed
             _printf
               _MTOUCH_Button_Buttonmask_Get (ARG)
                 _MTOUCH_Button_isPressed
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _putch
                           _EUSART_Write
                       _fputs
                         _fputc
                           _putch
                             _EUSART_Write
                       _strlen
                   _fputc
                     _putch
                       _EUSART_Write
                   _strncmp
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
                 ___aomod (ARG)
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
               ___aomod (ARG)
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
                   ___aomod (ARG)
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
                 ___aomod (ARG)
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
               ___aomod (ARG)
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
     _timeout_initialize
       _TMR0_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timeout_isr *
         _enqueueCallback
         _startTimerAtHead
           _setTimerDuration
             _TMR0_WriteTimer
           _stopTimeouts

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     14F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     46      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     25      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      5      3B      10       73.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4B      12       93.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      20      14       40.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     14F      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jul 04 14:48:04 2019

                       ?_EUSART_SetRxInterruptHandler 0025                       Sensor_loadADCSettings@adc_index 0026  
                        ?_MTOUCH_Sensor_RawSample_Get 0029                                        ___bmul@product 0027  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 1241                                       _timer0ReloadVal 00EE  
                           _Sensor_setCalibratAcqTime 1331                                           __CFG_LVP$ON 0000  
                                                 l303 01F7                                                   l305 020E  
                                                 l257 06FD                                                   l293 014C  
                                                 l614 15BB                                                   l526 0E00  
                                                 l286 0149                                                   l288 0145  
                                                 l817 08EC                                                   l922 163F  
                                                 l923 1646                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 1475  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 098D  
                      ?_EUSART_SetFramingErrorHandler 0025                               ?_Sensor_loadADCSettings 0026  
                                     _TMR2_Initialize 1215                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0026  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0017  
                      Sensor_getScanGroupIndex@sensor 0027                     __size_of_MTOUCH_Sensor_Initialize 0018  
                           ?_MTOUCH_Sensor_Initialize 0070                        ??_Button_State_ReleaseDebounce 00BF  
                                                ?_abs 0038                                                  l1302 09C5  
                                                l1303 09D1                                                  l1312 042F  
                                                l1313 0443                                                  l1307 040D  
                                                l1316 04D9                                                  l1308 0414  
                                                l1451 05FD                                                  l1464 06DC  
                                                l1299 09A5                                                  l6100 1365  
                                                l6012 1384                                                  l6022 12F9  
                                                l6104 136B                                                  l6034 06F9  
                                                l6202 0123                                                  l6130 00A5  
                                                l6140 00C3                                                  l6054 0780  
                                                l6302 024D                                                  l6142 00D8  
                                                ?_pad 0038                                                  l6080 0E9B  
                                                l6072 0E63                                                  l6048 0758  
                                                l6160 00CB                                                  l6330 14BE  
                                                l6074 0E67                                                  l6250 01D1  
                                                l6242 01B6                                                  l6226 014F  
                                                l6218 013F                                                  l6138 00BC  
                                                l6410 0FE1                                                  l6340 15A8  
                                                l5700 1494                                                  l6092 1718  
                                                l6172 00DA                                                  l6148 00C5  
                                                l6404 0FA4                                                  l5702 14A0  
                                                l6094 1738                                                  l6254 01EE  
                                                l6238 0198                                                  l6406 0FB7  
                                                l6510 07E4                                                  l6502 07CC  
                                                l4718 16C1                                                  l6192 0110  
                                                l6176 00E4                                                  l6450 097B  
                                                l6442 0D48                                                  l5714 099B  
                                                l5810 0427                                                  l6610 0A05  
                                                l6290 0224                                                  l6282 0212  
                                                l6514 07F4                                                  l6506 07D4  
                                                l5740 056C                                                  l5724 09A7  
                                                l5820 0470                                                  l6372 08B2  
                                                l6532 167D                                                  l5742 0571  
                                                l5670 165E                                                  l5718 09A3  
                                                l5830 044B                                                  l6622 0B91  
                                                l6286 021B                                                  l6366 08A4  
                                                l6518 07FD                                                  l6560 12DF  
                                                l5752 0588                                                  l5736 0544  
                                                l5656 1639                                                  l5680 0812  
                                                l5816 043E                                                  l6464 08DE  
                                                l6456 08C4                                                  l6632 0C64  
                                                l6544 13FC                                                  l6296 0238  
                                                l6368 08A7                                                  l6640 1343  
                                                l5762 05D0                                                  l5754 0597  
                                                l5842 04ED                                                  l6490 07B1  
                                                l6572 0CF3                                                  l5764 05DC  
                                                l5684 0835                                                  l5852 0505  
                                                l5940 0317                                                  l6580 0AF6  
                                                l6716 0AC5                                                  l6396 0F9F  
                                                l6388 0F89                                                  l6732 1400  
                                                l4892 142E                                                  l6566 0CD7  
                                                l5774 063B                                                  l5694 15ED  
                                                l5838 04E5                                                  l6670 0EFE  
                                                l6654 1578                                                  l6568 0CDF  
                                                l5792 06AF                                                  l5848 04F8  
                                                l5936 02E9                                                  l5928 029C  
                                                l6752 1313                                                  l6496 07B9  
                                                l6680 0F20                                                  l6664 0EEE  
                                                l5786 0670                                                  l5794 06BB  
                                                l5778 0663                                                  l5874 0A71  
                                                l5866 0A6A                                                  l5954 0391  
                                                l6578 0AF2                                                  l6594 0DCC  
                                                l5890 1751                                                  l6674 0F10  
                                                l6738 1409                                                  l5788 067F  
                                                l5868 0A45                                                  l5948 036E  
                                                l5964 03A2                                                  l5884 1740  
                                                l5982 16B3                                                  l5958 0397  
                                                l6598 0DF7                                                  l5886 174F  
                                                l6686 0F33                                                  l5896 1762  
                                                l6688 0F57                                                  l6768 1557  
                                                l6970 0F41                                                  l5988 16B5  
                                                l6972 0F46                                                  l6898 15A1  
                                                STR_1 185B                                                  STR_2 1860  
                                                STR_3 1843                                                  STR_4 1850  
                                                STR_5 1830                                                  STR_6 1865  
                                                STR_7 183B                                                  STR_8 184A  
                                                STR_9 186E                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                     __end_of_INT_ISR 11E0                                                  _LATC 010E  
                                                u7010 0CBE                                                  u7005 0C86  
                                                u7015 0CBA                                                  u6215 0E8C  
                                                u6065 1696                                                  u6085 16A6  
                                                u5525 09B1                                                  u6165 0796  
                                                u5615 05BD                                                  u7135 0B55  
                                                u5465 0833                                                  u7065 0B1F  
                                                u6185 0E46                                                  u5715 069D  
                                                u7235 0A88                                                  u6195 0E50  
                                                u4595 1431                                                  u5580 0579  
                                                u5805 041F                                                  u5750 03E3  
                                                u5495 147F                                                  u7095 0DE2  
                                                u5760 03E4                                                  u6810 08C2  
                                                u5835 04E3                                                  u6644 15B5  
                                                u6645 15B4                                                  u6725 0FC1  
                                                u5855 045F                                                  u6745 17CE  
                                                u5865 046B                                                  u6755 17BE  
                                                u6775 0D10                                                  u6785 0D56  
                          Button_State_Pressed@button 00BE                                                  _TMR0 0015  
                                                _TMR2 001A                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01DB  
                            _Sensor_getScanGroupIndex 173D                             ?_Sensor_Acq_ExecutePacket 0042  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0038                                                  _dbuf 0220  
                                                _main 1586                                                  _dtoa 03C7  
                __size_of_MTOUCH_Button_InitializeAll 001D                                                  _prec 00D5  
                                                _nout 00D1                                                  pad@i 003C  
                                                pad@p 0039                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 003E  
                __size_of_MTOUCH_Sensor_InitializeAll 0010                                                  btemp 007E  
                               __size_of_stopTimeouts 0014                   __end_of_INT_DefaultInterruptHandler 11CA  
                         _INT_DefaultInterruptHandler 11C9                                      ?_enqueueCallback 0070  
                                                start 0031                       __end_of_INT_SetInterruptHandler 1289  
                                   ___bmul@multiplier 0028                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                    MTOUCH_Button_Buttonmask_Get@output 002A  
                      __end_of_Sensor_autoCalibration 0EBA  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 185B  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1856                              _myButtonReleasedCallback 14F7  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 002C  
                       __size_of_Button_State_Pressed 0052                                                 ??_abs 003A  
                                               ??_pad 003B                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 003D                               __end_of_TMR0_Initialize 142C  
                       ??_MTOUCH_Sensor_RawSample_Get 002B                         Sensor_RawSample_Update@sensor 002B  
                       myButtonPressedCallback@button 00BB                        ??_TMR0_DefaultInterruptHandler 0070  
                           __size_of_Sensor_isEnabled 0012                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                           ?_Button_State_PressDebounce 00BE  
                       __end_of_OSCILLATOR_Initialize 11FA     Sensor_Scanfrequency_Evaluation@best_packet_sample 0059  
                                    _setTimerDuration 15C6                   __end_of_Sensor_isCalibratingAcqTime 129C  
                         _Sensor_isCalibratingAcqTime 1292                                       __end_of___aodiv 060F  
                                               ?_main 0070                                                 ?_dtoa 0041  
                                     __end_of___aomod 06EE                                                 STR_11 186E  
                                               STR_13 1871                                                 STR_15 1871  
                      __end_of_Sensor_loadADCSettings 07A3                                                 _T2CON 001C  
                             __size_of_Button_Service 005A                                       _TMR0_WriteTimer 11E4  
                                               i1l935 154A                                                 i1l994 000D  
                                               i1l996 0014                                                 i1l999 0023  
                                               _RCREG 0199                                                 _RCSTA 019D  
                                        vfpfcnvrt@fmt 005F                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TXREG 019A                                                 _TXSTA 019E  
                   __size_of_TMR0_SetInterruptHandler 0009                       __size_of_Button_DefaultCallback 0001  
                           ?_TMR0_SetInterruptHandler 0025                                  ??_MTOUCH_needReburst 0025  
                                    _executeQueueHead 0069                                      __end_of_TMR0_ISR 1215  
                     __size_of_Sensor_DefaultCallback 0001                                                 _flags 00D7  
                             __size_of_Sensor_Service 00A0                 __end_of_MTOUCH_Sensor_Scan_Initialize 1331  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 1321  
                                      _WDT_Initialize 11E0                                          _stopTimeouts 13BE  
                             Sensor_setSampled@sensor 0025                                                 _dummy 0142  
                                               _fputc 0808                                                 _fputs 15E9  
                                               _value 00E2                                                 pad@fp 0040  
                                               _width 00D3                                                 _putch 11EE  
                    __size_of_Button_State_NotPressed 0096                                                 dtoa@d 0041  
                                               dtoa@i 005D                                                 dtoa@n 0055  
                                               dtoa@p 004E                                                 dtoa@s 0053  
                                               dtoa@w 0051                                     ?_startTimerAtHead 0070  
                                               pclath 000A                                  _Sensor_Sampled_Reset 124A  
                                  ??_startTimerAtHead 0079                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 11CF  
                    __size_of_TMR2_LoadPeriodRegister 0005                                       __end_of_strncmp 0A82  
                           __size_of_Sensor_setActive 0009                                Sensor_isEnabled@sensor 0026  
                                     __initialization 0033                                          __end_of_main 15A5  
                                        __end_of_dtoa 0518                                  _Sensor_setCalibrated 12E3  
                                      ??_EUSART_Write 0025                               __end_of_TMR2_Initialize 121D  
                                      __CFG_LPBOR$OFF 0000                           ?_INTERRUPT_InterruptManager 0070  
                      ??_EUSART_SetRxInterruptHandler 0027                      __end_of_MTOUCH_Button_Initialize 1800  
                                              ??_main 0066                                                ??_dtoa 0049  
                             _MTOUCH_Sensor_Calibrate 1398                             Sensor_Service@sensor_adc1 00A2  
                           Sensor_Service@sensor_adc2 00A3                               ??_Button_Reading_Update 0030  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0027                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 11E4                                             ??_INT_ISR 0070  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 002B  
           __end_of_EUSART_DefaultFramingErrorHandler 11C9            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 11C8                            _EUSART_OverrunErrorHandler 014E  
                __size_of_MTOUCH_Sensor_RawSample_Get 001A                                                ?_fputc 0028  
                                              ?_fputs 0030                                                _APFCON 011D  
                          __end_of_timeout_initialize 0808                                                _ANSELA 018C  
                                              ?_putch 0070                                                _ANSELB 018D  
                                              _ANSELC 018E                                                _BORCON 0116  
                                              i1l1004 002F                                                i1l5340 0856  
                                              i1l5350 0876                                                i1l5346 0866  
                                              i1l4820 0BD3                                                i1l4816 0BAA  
                                              i1l4842 16F3                                                i1l4828 0BFA  
                                              i1l4848 1706                                                i1l4998 1792  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                                                u555lld 0541  
                                              u566lld 0638                     MTOUCH_Button_InitializeAll@button 0030  
                                       _lastTimerLoad 00C5                        ??_Button_Reading_Update_Helper 002D  
                              _Button_DefaultCallback 11CB                       __end_of_MTOUCH_Service_Mainloop 1569  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 12B2  
                                enqueueCallback@timer 0071                                _Sensor_DefaultCallback 07FF  
                                        vfprintf@cfmt 00AF                                         _packet_sample 00CD  
                                              ___bmul 1362                                 ?_Sensor_setCalibrated 0070  
                                           ??___aodiv 0035                                             ??___aomod 0035  
                        Sensor_DefaultCallback@sensor 0025                                        __CFG_STVREN$ON 0000  
                             __end_of_TMR0_WriteTimer 11E9                      __size_of_myButtonPressedCallback 0040  
                                 _EUSART_Transmit_ISR 152F                                                _memcpy 16B7  
                                    ?_TMR0_Initialize 0070                      __end_of_MTOUCH_Button_ServiceAll 1321  
                                              _printf 1351                                                pad@buf 0038  
                        Sensor_autoCalibration@sensor 0041                                                dtoa@fp 0050  
                                       ?_INT_CallBack 0070                                                _strlen 148E  
                                              fputc@c 0028                                                fputs@c 0034  
                                              fputs@i 0035                                                fputs@s 0037  
                             _MTOUCH_Sensor_SampleAll 13FE                          Button_DefaultCallback@button 00BB  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 07FF  
                               __end_of_TMR0_CallBack 12B2                      __size_of_INT_SetInterruptHandler 0009  
                             ?_Button_Baseline_Update 0070                                      __end_of_vfprintf 173D  
                 Sensor_postAcquisitionProcess@sensor 0040                               __end_of_TMR2_StartTimer 11D2  
             INT_SetInterruptHandler@InterruptHandler 0025              TMR0_SetInterruptHandler@InterruptHandler 0025  
                  Button_State_ReleaseDebounce@button 00BE                    __size_of_Sensor_setCalibratAcqTime 0010  
            __end_of_MTOUCH_Button_SetPressedCallback 122F             __size_of_MTOUCH_Button_SetPressedCallback 0009  
                  ??_MTOUCH_Button_SetPressedCallback 0027                     ?_MTOUCH_Button_SetPressedCallback 0025  
                    _MTOUCH_Button_SetPressedCallback 1226                                             ??_strncmp 002B  
                            __size_of_Sensor_isActive 000F                                  ?_EUSART_Transmit_ISR 0070  
                     MTOUCH_Sensor_RawSample_Get@name 002C                                          ?_timeout_isr 0070  
                 Sensor_getScanGroupIndex@sensorGroup 0028                                     _SYSTEM_Initialize 14C1  
                             __end_of__initialization 007B                   __size_of_Button_Baseline_Initialize 002F  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                       ??_Sensor_postAcquisitionProcess 003C  
                 __size_of_Button_State_PressDebounce 0064                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 0138                            __end_of_Button_Tick_helper 1637  
                       MTOUCH_Sensor_Calibrate@sensor 002A                  __end_of_EUSART_SetTxInterruptHandler 1280  
               __size_of_EUSART_SetTxInterruptHandler 0009                          _EUSART_SetTxInterruptHandler 1277  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0047                                   ___bmul@multiplicand 0025  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 168B  
                                        __pidataBANK1 1206                                          __pidataBANK2 1386  
                                        __pidataBANK3 14DC           __end_of_MTOUCH_Button_SetNotPressedCallback 1226  
        __size_of_MTOUCH_Button_SetNotPressedCallback 0009                 ??_MTOUCH_Button_SetNotPressedCallback 0027  
                ?_MTOUCH_Button_SetNotPressedCallback 0025                   _MTOUCH_Button_SetNotPressedCallback 121D  
                                 ??_SYSTEM_Initialize 0031                                             ?_TMR0_ISR 0070  
                          __end_of_MTOUCH_Button_Tick 1444                                         __end_of_fputc 083F  
                                       __end_of_fputs 160F                      __end_of_MTOUCH_Sensor_Initialize 145C  
                                       __end_of_putch 11F4                             ??_MTOUCH_Sensor_Calibrate 0029  
                                    _Sensor_isEnabled 1374                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0CFD                                        ??_INT_CallBack 0070  
                            Sensor_setInactive@sensor 0025                                        _Button_Service 0A82  
                    __end_of_Sensor_Acq_ExecutePacket 025A                            ?_Button_State_Initializing 00BE  
                         __size_of_EXT_INT_Initialize 000C                                  Button_Service@button 0157  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0025  
                          ??_Sensor_getScanGroupIndex 0025                                  _eusartRxStatusBuffer 0120  
                      __end_of_Button_Baseline_Update 0D8D                   Sensor_Acq_ExecutePacket@sensor_adc1 0050  
                 Sensor_Acq_ExecutePacket@sensor_adc2 0042                              _MTOUCH_Button_Initialize 17C9  
                     ??_EUSART_SetOverrunErrorHandler 0027                                        _Sensor_Service 0EBA  
                             _Button_State_NotPressed 0D8D                         __size_of_MTOUCH_Sensor_Enable 0013  
                                  _Sensor_setInactive 1238                                     _sensor_scan_group 186A  
                                             ??_fputc 002B                             __end_of_SYSTEM_Initialize 14DC  
                                   _lowpowerActivated 00E3                                               ??_fputs 0031  
                               ??_EUSART_Transmit_ISR 0070                      MTOUCH_Sensor_isCalibrated@sensor 002A  
                              ??_Sensor_Sampled_Reset 0025                                               ??_putch 0027  
                                          __pbssBANK0 0066                                            __pbssBANK1 00C5  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          __pbssBANK4 0220                                  __end_of_EUSART_Write 1661  
                             _TMR2_LoadPeriodRegister 11E9                              __end_of_setTimerDuration 15E9  
                          ??_myButtonReleasedCallback 00BC                          Sensor_loadADCSettings@sensor 002D  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 122F  
                         __size_of_EUSART_Receive_ISR 003A                            __end_of_mtouch_button_init 1830  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0048                                ??_Sensor_setCalibrated 0025  
                                          __pmaintext 1586                                               ?___bmul 0025  
                       ?_EUSART_SetTxInterruptHandler 0025                      _EUSART_TxDefaultInterruptHandler 0154  
                    __end_of_TMR0_SetInterruptHandler 1292                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                                          ??_TMR0_ISR 007E                        MTOUCH_Sensor_wasSampled@sensor 002A  
                                          __pintentry 0004                                      ?_TMR0_WriteTimer 0070  
                              __end_of_Button_Service 0ADC                                               ?_memcpy 0025  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 1586                           _MTOUCH_Button_InitializeAll 1569  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 1351                           _MTOUCH_Sensor_InitializeAll 1341  
                           ??_MTOUCH_Sensor_SampleAll 0065                                               ?_printf 00B1  
                     __end_of_Sensor_RawSample_Update 168B                                  ??_Sensor_setInactive 0025  
                                             ?_strlen 0025                     __size_of_MTOUCH_Sensor_wasSampled 0010  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 00DF  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0025  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0B3E  
                              __end_of_Sensor_Service 0F5A                               Sensor_Service@scanGroup 00A0  
                            _MTOUCH_Button_ServiceAll 1311                                               _INT_ISR 11DC  
                           __end_of_sensor_scan_group 186E                                    __size_of_vfpfcnvrt 016D  
                       __size_of_EUSART_RxDataHandler 0019                      __size_of_MTOUCH_Service_Mainloop 001D  
                        __end_of_Button_State_Pressed 0A2F                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0027                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0031                       Sensor_setCalibratAcqTime@sensor 0025  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 002C  
                __size_of_Sensor_isCalibratingAcqTime 000A                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 0044  
                           ??_MTOUCH_Button_isPressed 0025                                     ??_Sensor_isActive 0025  
                 __size_of_EUSART_DefaultErrorHandler 0003                         MTOUCH_Button_Buttonmask_Get@i 002B  
               __end_of_Sensor_postAcquisitionProcess 08B6                __size_of_Sensor_postAcquisitionProcess 003D  
                       _Sensor_postAcquisitionProcess 0879                               _myButtonPressedCallback 08B6  
                             Sensor_Acquisition@retry 0060                                       __size_of___bmul 0012  
                                             ___aodiv 0518                                           _AD1CON0bits 0711  
                                             ___aomod 060F                             __size_of_startTimerAtHead 0069  
                      MTOUCH_Button_Initialize@button 002E                                           _AD2CON0bits 0791  
                                           ?_vfprintf 00A9                              __size_of_enqueueCallback 002D  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0054  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 0051                                       __size_of_memcpy 002C  
                                             __ptext1 14C1                                               __ptext2 0800  
                                             __ptext3 11E0                                               __ptext4 1215  
                                             __ptext5 1415                                               __ptext6 1289  
                                             __ptext7 1513                                               __ptext8 11F4  
                                             __ptext9 12C9                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0030                                       __size_of_strlen 0019  
                            _MTOUCH_Sensor_Initialize 1444                                 _OSCILLATOR_Initialize 11F4  
                                           _T2CONbits 001C                                          __size_of_abs 0019  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 00BF  
                            setTimerDuration@duration 0071                                       ?_Sensor_Service 0070  
                            ??_PIN_MANAGER_Initialize 0025                               _INT_SetInterruptHandler 1280  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                       __end_of_Button_Reading_Update 12E3                     MTOUCH_Sensor_InitializeAll@sensor 002E  
                            _Sensor_Acq_ExecutePacket 007F                                      _callback_sampled 00E9  
                           ??_TMR2_LoadPeriodRegister 0025                       Sensor_RawSample_Update@adcIndex 002A  
                          __size_of_SYSTEM_Initialize 001B                                               clrloop0 11FB  
                                             _strncmp 0A2F                                      _callback_pressed 00E7  
                      MTOUCH_Sensor_Initialize@sensor 002C                                  end_of_initialization 007B  
                                     timeout_isr@next 0024                               ?_Button_DefaultCallback 00BB  
               __end_of_EUSART_SetOverrunErrorHandler 126E                __size_of_EUSART_SetOverrunErrorHandler 0009  
                       _EUSART_SetOverrunErrorHandler 1265                                               memcpy@d 002E  
                                             memcpy@n 0027                                               memcpy@s 002A  
                                             fputc@fp 002A                                               init_ram 1200  
                                             fputs@fp 0030                                               initloop 1201  
                                __end_of_INT_CallBack 12A7                                  __size_of_timeout_isr 002F  
                             ?_Sensor_DefaultCallback 0025                         Sensor_Acquisition@sensor_adc1 0061  
                       Sensor_Acquisition@sensor_adc2 005E                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 08F6                          ??_MTOUCH_Sensor_isCalibrated 0029  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 03C7  
                 __end_of_MTOUCH_Sensor_RawSample_Get 14C1                           _MTOUCH_Sensor_RawSample_Get 14A7  
                                  _timeout_initialize 0800                                             _RCSTAbits 019D  
                                          ??_vfprintf 00AC                                               strlen@a 0028  
                                             strlen@s 0029                                   ??_EUSART_Initialize 0027  
                                    ??_WDT_Initialize 0025                        ??_EUSART_SetTxInterruptHandler 0027  
                                 ?_timeout_initialize 0070                              _TMR0_SetInterruptHandler 1289  
                              Sensor_setActive@sensor 0025                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0057                         Button_Deviation_Update@button 002F  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0045                                 __size_of_EUSART_Write 002A  
            MTOUCH_Button_SetPressedCallback@callback 0025                            MTOUCH_Sensor_Enable@sensor 002A  
                        _MTOUCH_Button_isPressed$1152 0026                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0046  
                                 _callback_notPressed 00E5                   __size_of_MTOUCH_Sensor_isCalibrated 0017  
                      __end_of_Button_DefaultCallback 11CC                       __size_of_EUSART_SetErrorHandler 0009  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0055                                    _sensor_globalFlags 0068  
                            __end_of_Sensor_isEnabled 1386                            Sensor_setCalibrated@sensor 0025  
                      __end_of_Sensor_DefaultCallback 0800                      __end_of_myButtonReleasedCallback 1513  
                                ??_timeout_initialize 0027                             __end_of_EUSART_Initialize 093D  
                            ??_Sensor_autoCalibration 003C                            _Sensor_loadADCSettings$562 002A  
                                           _TXSTAbits 019E                             ??_myButtonPressedCallback 0066  
                    __size_of_Sensor_RawSample_Update 002A                                    _Sensor_Acquisition 07A3  
                                          _user_touch 00D9                              ??_Sensor_loadADCSettings 0027  
                                _Button_State_Pressed 09DD                                        __end_of___bmul 1374  
                  __end_of_EUSART_DefaultErrorHandler 11CF                            _EUSART_DefaultErrorHandler 11CC  
                                 ?_Sensor_Acquisition 005E                                           vfpfcnvrt@ap 0060  
                                         vfpfcnvrt@fp 00A8                                           vfpfcnvrt@ll 00A0  
                          ??_MTOUCH_Button_Initialize 002B           MTOUCH_Button_SetNotPressedCallback@callback 0025  
                     ??_MTOUCH_Sensor_Scan_Initialize 0025                        ?_Sensor_postAcquisitionProcess 0070  
                                        _EUSART_Write 1637                                     __size_of_TMR0_ISR 0008  
                                  enqueueCallback@tmp 0072                                    _Button_Tick_helper 160F  
                                      __end_of_memcpy 16E3                                ?_OSCILLATOR_Initialize 0070  
                           ??_INT_SetInterruptHandler 0027                                   MTOUCH_Button_Tick@i 0029  
                            __end_of_Sensor_setActive 1238                      TMR2_LoadPeriodRegister@periodVal 0025  
                                      __end_of_printf 1362                           ??_Button_State_Initializing 00BF  
                                      __end_of_strlen 14A7                                   start_initialization 0033  
                                   ??_enqueueCallback 0070                               _MTOUCH_Service_Mainloop 154C  
                            __size_of_TMR0_Initialize 0017                       __size_of_PIN_MANAGER_Initialize 001C  
                                  _MTOUCH_Button_Tick 142C                                   ?_Button_Tick_helper 0070  
                                         __end_of_abs 148E                                           __end_of_pad 09DD  
                                      _TMR2_StopTimer 11D2          EUSART_SetRxInterruptHandler@interruptHandler 0025  
        EUSART_SetTxInterruptHandler@interruptHandler 0025                                           putch@txData 0027  
                                ??_Sensor_Acquisition 005F                                   ?_MTOUCH_Button_Tick 0070  
                     Button_State_Initializing@button 00BE                                     ?_setTimerDuration 0071  
                      Sensor_autoCalibration@adcIndex 0040                          ?_INT_DefaultInterruptHandler 0070  
                                  ??_setTimerDuration 0075                        ?_EUSART_SetOverrunErrorHandler 0025  
                    __end_of_MTOUCH_Sensor_wasSampled 1311                                  ??_Button_Tick_helper 0025  
                        __end_of_MTOUCH_Sensor_Enable 13BE                                           vfprintf@fmt 00A9  
                                        _packet_noise 00DB                            _EUSART_FramingErrorHandler 0150  
                                            ??___bmul 0026                                 ?_Button_State_Pressed 00BE  
                              _EUSART_SetErrorHandler 1253                                      _startTimerAtHead 0BA2  
                              __size_of_TMR0_CallBack 000B                            ??_MTOUCH_Button_ServiceAll 0158  
                                         __pdataBANK1 00E5                                           __pdataBANK2 0138  
                                         __pdataBANK3 01D0                                              ??_memcpy 0029  
                         __end_of_Sensor_isCalibrated 12BD                          ??_Button_Baseline_Initialize 002D  
                          __end_of_EXT_INT_Initialize 12C9                                         _sample_period 00EB  
                                ??_MTOUCH_Button_Tick 0028                                    _mtouch_button_init 1800  
                          Sensor_Sampled_Reset@sensor 0025                                              ??_printf 00B7  
                        ??_Button_State_PressDebounce 00BF                                              ??_strlen 0027  
                                        _dummyHandler 0000                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 08F6                           __end_of_EUSART_Transmit_ISR 154C  
                              __end_of_TMR2_StopTimer 11D5                                             ___latbits 0002  
                                            ?_INT_ISR 0070                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00A0                                         __pcstackBANK2 0156  
                                    ___aodiv@dividend 002D                              __size_of_TMR2_Initialize 0008  
                                       ?_stopTimeouts 0070                                       _Sensor_isActive 12F2  
                               __size_of_INT_CallBack 000B                        MTOUCH_Button_ServiceAll@button 0159  
                                 Sensor_Service@error 00A1                            __end_of_EUSART_Receive_ISR 0879  
                       __size_of_Sensor_Sampled_Reset 0009                            __size_of_EUSART_Initialize 0047  
                             _Button_Deviation_Update 0C76                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 0152                             _Button_State_Initializing 0ADC  
                  __end_of_MTOUCH_Sensor_isCalibrated 13FE                            _MTOUCH_Sensor_isCalibrated 13E7  
                               _TMR0_InterruptHandler 00EC                                             __pnvBANK1 00EC  
                                           __pnvBANK2 014A                       __size_of_Sensor_autoCalibration 0097  
                   __size_of_Sensor_getScanGroupIndex 002E                                     _Sensor_setSampled 1241  
                           ?_Sensor_getScanGroupIndex 0070                          __end_of_EUSART_RxDataHandler 1475  
                              _PIN_MANAGER_Initialize 1513                                      ??_Button_Service 00C3  
                                           _dtoa$2256 004C                         ??_INT_DefaultInterruptHandler 0070  
                            ?_MTOUCH_Sensor_Calibrate 0070                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 002F                            ??_MTOUCH_Sensor_Initialize 002B  
                                            ?___aodiv 0025                         __size_of_Sensor_setCalibrated 000F  
                                            ?___aomod 0025                                             __ptext100 15C6  
                                           __ptext101 11E4                                             __ptext110 11CC  
                                           __ptext102 16E3                                      ___aodiv@quotient 0038  
                                           __ptext111 145C                                             __ptext103 11DC  
                                           __ptext104 129C                                             __ptext105 11C9  
                                           __ptext106 152F                                             __ptext107 083F  
                                           __ptext108 11D8                                             __ptext109 11C8  
                     __size_of_Sensor_loadADCSettings 00B5                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 0067  
                                            _AAD2RES0 079A                                          _eusartTxHead 00E1  
                                        _eusartRxTail 0066                                          _eusartTxTail 00E0  
                                    ??_Sensor_Service 0062                            ??_Sensor_Acq_ExecutePacket 0043  
                        ??_INTERRUPT_InterruptManager 007E                                   ??_Sensor_setSampled 0025  
                   __size_of_myButtonReleasedCallback 001C                             ?_myButtonReleasedCallback 00BB  
                           ??_MTOUCH_Service_Mainloop 015A                                     __size_of_vfprintf 002D  
                                            _ADCOMCON 0712                             _absoluteTimeofLastTimeout 00C9  
                             _eusartTxBufferRemaining 00EF                                          _INT_CallBack 129C  
                         __size_of_Sensor_setInactive 0009                        Sensor_Acq_ExecutePacket@last_a 004B  
                      Sensor_Acq_ExecutePacket@last_b 004D                  __end_of_MTOUCH_Button_Buttonmask_Get 15C6  
               __size_of_MTOUCH_Button_Buttonmask_Get 0021                          _MTOUCH_Button_Buttonmask_Get 15A5  
                                     ?_TMR2_StopTimer 0070                              __size_of_TMR0_WriteTimer 0005  
                       ??_Sensor_isCalibratingAcqTime 0025                                             _isRunning 00DD  
                                      ??_stopTimeouts 0070                                         ??_MTOUCH_Tick 002A  
                                    __CFG_WDTE$SWDTEN 0000                                         _TMR0_CallBack 12A7  
                                      __size_of_fputc 0037                                        __size_of_fputs 0026  
                                            ?_strncmp 0025                                        __size_of_putch 0006  
                                      _eusartRxBuffer 0128                                     ??_TMR0_Initialize 0027  
                                      _eusartTxBuffer 0130                             __end_of_Sensor_setSampled 124A  
                                            _LATAbits 010C                EUSART_SetErrorHandler@interruptHandler 0025  
                                            _LATCbits 010E                               _Sensor_RawSample_Update 1661  
                   __end_of_Sensor_setCalibratAcqTime 1341                                             clear_ram0 11FA  
                                            _PIE1bits 0091                                     _eusartRxLastError 00DE  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 002D  
                          ??_TMR0_SetInterruptHandler 0027                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0027                Sensor_Acq_ExecutePacket@packet_counter 004F  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 00BF  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 13E7               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015  
                      _MTOUCH_Sensor_Sampled_ResetAll 13D2                              ?_MTOUCH_Sensor_SampleAll 0070  
                                            _TMR0_ISR 120D             __end_of_EUSART_DefaultOverrunErrorHandler 11DC  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0070  
                  ?_EUSART_DefaultOverrunErrorHandler 0070                     _EUSART_DefaultOverrunErrorHandler 11D8  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0049                              _MTOUCH_Sensor_wasSampled 1301  
                                  _mtouch_time_toScan 00E4                                             _vfpfcnvrt 025A  
                            ??_Button_Baseline_Update 0025                               __end_of_Sensor_isActive 1301  
                              _Sensor_autoCalibration 0E23                            __end_of_MTOUCH_needReburst 0004  
                __size_of_INT_DefaultInterruptHandler 0001                        myButtonReleasedCallback@button 00BB  
                       ?_MTOUCH_Button_Buttonmask_Get 0070                                      __size_of_INT_ISR 0004  
                                      ?_TMR0_CallBack 0070                                _Sensor_loadADCSettings 06EE  
                                _MTOUCH_Sensor_Enable 13AB                              Button_Tick_helper@button 0027  
                           ??_Button_Deviation_Update 0025                                 _Button_Reading_Update 12D5  
                                       ??_timeout_isr 007D                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                     ??_TMR2_Initialize 0025  
                                 __end_of_MTOUCH_Tick 11D8                                     _MTOUCH_Initialize 12C9  
                     __end_of_MTOUCH_Sensor_Calibrate 13AB                                    ??_Sensor_isEnabled 0025  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 003E  
                                           memcpy@tmp 002C                                            vfprintf@ap 00AB  
                                          vfprintf@fp 00AE                                            _APFCONbits 011D  
                                     _enqueueCallback 16E3                               ??_OSCILLATOR_Initialize 0025  
                  __end_of_Button_Baseline_Initialize 17C9                            _Button_Baseline_Initialize 179A  
                                 _EUSART_ErrorHandler 014C                                      __size_of___aodiv 00F7  
                                    __size_of___aomod 00DF                                   ??_MTOUCH_Initialize 0031  
                         ?_EUSART_DefaultErrorHandler 0070                    __end_of_Button_State_PressDebounce 0BA2  
                          _Button_State_PressDebounce 0B3E                                            ?_vfpfcnvrt 005F  
                            ?_Button_State_NotPressed 00BE                                       ___aodiv@divisor 0025  
                __end_of_Button_State_ReleaseDebounce 0C76                 __size_of_Button_State_ReleaseDebounce 006B  
                        _Button_State_ReleaseDebounce 0C0B                                       ___aodiv@counter 0036  
                                  Button_Service@name 0156                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0025  
                Sensor_Scanfrequency_Evaluation@retry 0058                                    ??_Sensor_setActive 0025  
                                _EUSART_RxDataHandler 145C                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 1341                                              __ptext11 1444  
                                            __ptext20 1265                                              __ptext12 13AB  
                                            __ptext21 125C                                              __ptext13 1569  
                                            __ptext30 13FE                                              __ptext22 1253  
                                            __ptext14 16B7                                              __ptext31 0EBA  
                                            __ptext23 154C                                              __ptext15 12BD  
                                            __ptext40 007F                                              __ptext32 1241  
                                            __ptext24 0002                                              __ptext16 1280  
                                            __ptext41 11D2                                              __ptext33 1661  
                                            __ptext25 11D5                                              __ptext17 08F6  
                                            __ptext50 1331                                              __ptext42 11CF  
                                            __ptext34 07FF                                              __ptext26 142C  
                                            __ptext18 1277                                              __ptext51 1292  
                                            __ptext43 11E9                                              __ptext35 07A3  
                                            __ptext27 160F                                              __ptext19 126E  
                                            __ptext60 0D8D                                              __ptext52 173D  
                                            __ptext44 06EE                                              __ptext36 0879  
                                            __ptext28 13D2                                              __ptext61 0ADC  
                                            __ptext53 1321                                              __ptext45 12B2  
                                            __ptext37 1238                                              __ptext29 124A  
                                            __ptext70 03C7                                              __ptext62 0C0B  
                                            __ptext54 1311                                              __ptext46 1374  
                                            __ptext38 122F                                              __ptext71 098D  
                                            __ptext63 08B6                                              __ptext55 0A82  
                                            __ptext47 12F2                                              __ptext39 0F5A  
                                            __ptext80 15A5                                              __ptext72 148E  
                                            __ptext64 11CB                                              __ptext56 1301  
                                            __ptext48 0E23                                              __ptext81 168B  
                                            __ptext73 15E9                                              __ptext65 14F7  
                                            __ptext57 13E7                                              __ptext49 12E3  
                                            __ptext90 0C76                                              __ptext82 17C9  
                                            __ptext74 0808                                              __ptext66 1351  
                                            __ptext58 09DD                                              __ptext91 1226  
                                            __ptext83 1398                                              __ptext75 11EE  
                                            __ptext67 1710                                              __ptext59 0B3E  
                                            __ptext92 121D                                              __ptext84 0CFD  
                                            __ptext76 1637                                              __ptext68 025A  
                                            __ptext85 179A                                              __ptext77 1475  
                                            __ptext69 0A2F                                              __ptext94 120D  
                                            __ptext86 12D5                                              __ptext78 060F  
                                            __ptext95 12A7                                              __ptext87 093D  
                                            __ptext79 0518                                              __ptext96 11CA  
                                            __ptext88 14A7                                              __ptext97 176B  
                                            __ptext89 1362                                              __ptext98 0BA2  
                                            __ptext99 13BE                              __end_of_startTimerAtHead 0C0B  
                             TMR0_WriteTimer@timerVal 0070                             __end_of_MTOUCH_Initialize 12D5  
                           ??_Sensor_RawSample_Update 0029                                     ??_TMR0_WriteTimer 0070  
                                    __size_of_strncmp 0053                            __size_of_Sensor_setSampled 0009  
                         __size_of_timeout_initialize 0008                                         __size_of_main 001F  
                                       __size_of_dtoa 0151                                              _listHead 006A  
                     __end_of_MTOUCH_Sensor_SampleAll 1415                  __end_of_TMR0_DefaultInterruptHandler 11CB  
               __size_of_TMR0_DefaultInterruptHandler 0001                          _TMR0_DefaultInterruptHandler 11CA  
                    Sensor_Scanfrequency_Evaluation@i 005D                               ?_EUSART_SetErrorHandler 0025  
                                 __end_of_timeout_isr 179A         EUSART_SetOverrunErrorHandler@interruptHandler 0025  
                                __end_of_stopTimeouts 13D2                                              int$flags 007E  
                                            _vfprintf 1710                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 0025                    __end_of_INTERRUPT_InterruptManager 0031  
                          _INTERRUPT_InterruptManager 0004                                             printf@fmt 00B1  
               __end_of_EUSART_SetFramingErrorHandler 1265                __size_of_EUSART_SetFramingErrorHandler 0009  
                       _EUSART_SetFramingErrorHandler 125C                       __size_of_Button_Baseline_Update 0090  
                        ?_MTOUCH_Button_InitializeAll 0070                             __size_of_setTimerDuration 0023  
                        MTOUCH_Sensor_SampleAll@group 00A4                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                    ___aomod@dividend 002D                                      ?_Sensor_isActive 0070  
                       ?_Button_State_ReleaseDebounce 00BE                                         _mtouch_button 01A0  
                                          _INTCONbits 000B                                       ??_TMR0_CallBack 007E  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 01D0  
                                            memcpy@d1 002D                                              memcpy@s1 0025  
                                _INT_InterruptHandler 014A                       __end_of_MTOUCH_Button_isPressed 16B7  
                    __end_of_Sensor_getScanGroupIndex 176B                                     __CFG_BOREN$NSLEEP 0000  
                                      __pstringtext10 1860                                        __pstringtext11 1865  
                                      __pstringtext12 186E                                        __pstringtext13 1871  
                                      __pstringtext14 0000                                           _MTOUCH_Tick 11D5  
                              ?_Button_Reading_Update 0070                                    _EXT_INT_Initialize 12BD  
                    Button_Deviation_Update@deviation 0030                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 002D                     __size_of_MTOUCH_Button_Initialize 0037  
                              startTimerAtHead@period 0020                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                      ??_MTOUCH_Button_Buttonmask_Get 0028                              ?_myButtonPressedCallback 00BB  
             __end_of_Sensor_Scanfrequency_Evaluation 1000              __size_of_Sensor_Scanfrequency_Evaluation 00A6  
                   ??_Sensor_Scanfrequency_Evaluation 0052                      ?_Sensor_Scanfrequency_Evaluation 0051  
                     _Sensor_Scanfrequency_Evaluation 0F5A                               ?_PIN_MANAGER_Initialize 0070  
                         ??_Sensor_setCalibratAcqTime 0025                        __end_of_EUSART_SetErrorHandler 125C  
                                   __CFG_CLKOUTEN$OFF 0000                                   ?_EXT_INT_Initialize 0070  
                             __end_of_enqueueCallback 1710                           ?_MTOUCH_Sensor_isCalibrated 0070  
                                           strncmp@_l 0025                                             strncmp@_r 0027  
                __end_of_EUSART_SetRxInterruptHandler 1277                 __size_of_EUSART_SetRxInterruptHandler 0009  
                        _EUSART_SetRxInterruptHandler 126E                         ?_TMR0_DefaultInterruptHandler 0070  
                         __size_of_Button_Tick_helper 0028                       __end_of_Button_State_NotPressed 0E23  
                                            printf@ap 00BA                                    _EUSART_Receive_ISR 083F  
       EUSART_SetFramingErrorHandler@interruptHandler 0025                              ?_INT_SetInterruptHandler 0025  
                                     ___aomod@divisor 0025                          __end_of_Sensor_Sampled_Reset 1253  
                                         ??_vfpfcnvrt 0061                                      ??_TMR2_StopTimer 0025  
                                     ___aomod@counter 0036                       __end_of_TMR2_LoadPeriodRegister 11EE  
                         __size_of_MTOUCH_Button_Tick 0018                                         __pstringtext1 1856  
                                       __pstringtext2 186A                                         __pstringtext3 1800  
                                       __pstringtext4 1830                                         __pstringtext5 183B  
                                       __pstringtext6 1843                                         __pstringtext7 184A  
                                       __pstringtext8 1850                                         __pstringtext9 185B  
                                ??_EXT_INT_Initialize 0027                                            _OPTION_REG 0095  
                                 ?_EUSART_Receive_ISR 0070                         ??_MTOUCH_Button_InitializeAll 002F  
                            ??_Button_DefaultCallback 0066                         ??_MTOUCH_Sensor_InitializeAll 002D  
                Sensor_Acq_ExecutePacket@activeSensor 004A                                       _TMR0_Initialize 1415  
                    __size_of_MTOUCH_Sensor_Calibrate 0013                                ??_MTOUCH_Sensor_Enable 0029  
                                            strncmp@l 002C                                              strncmp@n 0029  
                                            strncmp@r 002E                     Sensor_isCalibratingAcqTime@sensor 0025  
                        __size_of_Sensor_isCalibrated 000B                              ??_Sensor_DefaultCallback 0026  
                        __end_of_Sensor_setCalibrated 12F2                  __end_of_Button_Reading_Update_Helper 098D  
               __size_of_Button_Reading_Update_Helper 0050                          _Button_Reading_Update_Helper 093D  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 00BE                                    EUSART_Write@txData 0026  
                        __size_of_EUSART_Transmit_ISR 001D                                          ___aodiv@sign 0037  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 152F  
                                         _timeout_isr 176B                                _Button_Baseline_Update 0CFD  
                         MTOUCH_Button_isPressed@name 0027                                  ??_EUSART_Receive_ISR 0071  
                          ??_MTOUCH_Sensor_wasSampled 0029                                          ___aomod@sign 0037  
                    Button_State_PressDebounce@button 00BE  
