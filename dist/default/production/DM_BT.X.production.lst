

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Jul 19 14:59:02 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	cinit,global,class=CODE,merge=1,delta=2
    31                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    32                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    37                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    38                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    39                           	psect	inittext,global,class=CODE,delta=2
    40                           	psect	clrtext,global,class=CODE,delta=2
    41                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    42                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    43                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    44                           	psect	text1,local,class=CODE,merge=1,delta=2
    45                           	psect	text2,local,class=CODE,merge=1,delta=2
    46                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text4,local,class=CODE,merge=1,delta=2
    48                           	psect	text5,local,class=CODE,merge=1,delta=2
    49                           	psect	text6,local,class=CODE,merge=1,delta=2
    50                           	psect	text7,local,class=CODE,merge=1,delta=2
    51                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text11,local,class=CODE,merge=1,delta=2
    55                           	psect	text12,local,class=CODE,merge=1,delta=2
    56                           	psect	text13,local,class=CODE,merge=1,delta=2
    57                           	psect	text14,local,class=CODE,merge=1,delta=2
    58                           	psect	text15,local,class=CODE,merge=1,delta=2
    59                           	psect	text16,local,class=CODE,merge=1,delta=2
    60                           	psect	text17,local,class=CODE,merge=1,delta=2
    61                           	psect	text18,local,class=CODE,merge=1,delta=2
    62                           	psect	text19,local,class=CODE,merge=1,delta=2
    63                           	psect	text20,local,class=CODE,merge=1,delta=2
    64                           	psect	text21,local,class=CODE,merge=1,delta=2
    65                           	psect	text22,local,class=CODE,merge=1,delta=2
    66                           	psect	text23,local,class=CODE,merge=1,delta=2
    67                           	psect	text24,local,class=CODE,merge=1,delta=2
    68                           	psect	text25,local,class=CODE,merge=1,delta=2
    69                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text27,local,class=CODE,merge=1,delta=2
    71                           	psect	text28,local,class=CODE,merge=1,delta=2
    72                           	psect	text29,local,class=CODE,merge=1,delta=2
    73                           	psect	text30,local,class=CODE,merge=1,delta=2
    74                           	psect	text31,local,class=CODE,merge=1,delta=2
    75                           	psect	text32,local,class=CODE,merge=1,delta=2
    76                           	psect	text33,local,class=CODE,merge=1,delta=2
    77                           	psect	text34,local,class=CODE,merge=1,delta=2
    78                           	psect	text35,local,class=CODE,merge=1,delta=2
    79                           	psect	text36,local,class=CODE,merge=1,delta=2
    80                           	psect	text37,local,class=CODE,merge=1,delta=2
    81                           	psect	text38,local,class=CODE,merge=1,delta=2
    82                           	psect	text39,local,class=CODE,merge=1,delta=2
    83                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text41,local,class=CODE,merge=1,delta=2
    85                           	psect	text42,local,class=CODE,merge=1,delta=2
    86                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text44,local,class=CODE,merge=1,delta=2
    88                           	psect	text45,local,class=CODE,merge=1,delta=2
    89                           	psect	text46,local,class=CODE,merge=1,delta=2
    90                           	psect	text47,local,class=CODE,merge=1,delta=2
    91                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text50,local,class=CODE,merge=1,delta=2
    94                           	psect	text51,local,class=CODE,merge=1,delta=2
    95                           	psect	text52,local,class=CODE,merge=1,delta=2
    96                           	psect	text53,local,class=CODE,merge=1,delta=2
    97                           	psect	text54,local,class=CODE,merge=1,delta=2
    98                           	psect	text55,local,class=CODE,merge=1,delta=2
    99                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text57,local,class=CODE,merge=1,delta=2
   101                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text59,local,class=CODE,merge=1,delta=2
   103                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
   104                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text64,local,class=CODE,merge=1,delta=2
   108                           	psect	text65,local,class=CODE,merge=1,delta=2
   109                           	psect	text66,local,class=CODE,merge=1,delta=2
   110                           	psect	text67,local,class=CODE,merge=1,delta=2
   111                           	psect	text68,local,class=CODE,merge=1,delta=2
   112                           	psect	text69,local,class=CODE,merge=1,delta=2
   113                           	psect	text70,local,class=CODE,merge=1,delta=2
   114                           	psect	text71,local,class=CODE,merge=1,delta=2
   115                           	psect	text72,local,class=CODE,merge=1,delta=2
   116                           	psect	text73,local,class=CODE,merge=1,delta=2
   117                           	psect	text74,local,class=CODE,merge=1,delta=2
   118                           	psect	text75,local,class=CODE,merge=1,delta=2
   119                           	psect	text76,local,class=CODE,merge=1,delta=2
   120                           	psect	text77,local,class=CODE,merge=1,delta=2
   121                           	psect	text78,local,class=CODE,merge=1,delta=2
   122                           	psect	text79,local,class=CODE,merge=1,delta=2
   123                           	psect	text80,local,class=CODE,merge=1,delta=2
   124                           	psect	text81,local,class=CODE,merge=1,delta=2
   125                           	psect	text82,local,class=CODE,merge=1,delta=2
   126                           	psect	text83,local,class=CODE,merge=1,delta=2
   127                           	psect	text84,local,class=CODE,merge=1,delta=2
   128                           	psect	text85,local,class=CODE,merge=1,delta=2
   129                           	psect	text86,local,class=CODE,merge=1,delta=2
   130                           	psect	text87,local,class=CODE,merge=1,delta=2,group=1
   131                           	psect	text88,local,class=CODE,merge=1,delta=2
   132                           	psect	text89,local,class=CODE,merge=1,delta=2
   133                           	psect	text90,local,class=CODE,merge=1,delta=2
   134                           	psect	text91,local,class=CODE,merge=1,delta=2
   135                           	psect	text92,local,class=CODE,merge=1,delta=2
   136                           	psect	text93,local,class=CODE,merge=1,delta=2
   137                           	psect	text94,local,class=CODE,merge=1,delta=2
   138                           	psect	text95,local,class=CODE,merge=1,delta=2
   139                           	psect	text96,local,class=CODE,merge=1,delta=2
   140                           	psect	text97,local,class=CODE,merge=1,delta=2
   141                           	psect	text98,local,class=CODE,merge=1,delta=2
   142                           	psect	text99,local,class=CODE,merge=1,delta=2
   143                           	psect	text100,local,class=CODE,merge=1,delta=2
   144                           	psect	text101,local,class=CODE,merge=1,delta=2
   145                           	psect	text102,local,class=CODE,merge=1,delta=2
   146                           	psect	text103,local,class=CODE,merge=1,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text105,local,class=CODE,merge=1,delta=2
   149                           	psect	text106,local,class=CODE,merge=1,delta=2
   150                           	psect	text107,local,class=CODE,merge=1,delta=2
   151                           	psect	text108,local,class=CODE,merge=1,delta=2
   152                           	psect	text109,local,class=CODE,merge=1,delta=2
   153                           	psect	text110,local,class=CODE,merge=1,delta=2
   154                           	psect	text111,local,class=CODE,merge=1,delta=2
   155                           	psect	text112,local,class=CODE,merge=1,delta=2
   156                           	psect	text113,local,class=CODE,merge=1,delta=2
   157                           	psect	text114,local,class=CODE,merge=1,delta=2
   158                           	psect	text115,local,class=CODE,merge=1,delta=2
   159                           	dabs	1,0x7E,2
   160  0000                     
   161                           ; Version 2.05
   162                           ; Generated 20/12/2018 GMT
   163                           ; 
   164                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   165                           ; All rights reserved.
   166                           ; 
   167                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   168                           ; 
   169                           ; Redistribution and use in source and binary forms, with or without modification, are
   170                           ; permitted provided that the following conditions are met:
   171                           ; 
   172                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   173                           ;        conditions and the following disclaimer.
   174                           ; 
   175                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   176                           ;        of conditions and the following disclaimer in the documentation and/or other
   177                           ;        materials provided with the distribution.
   178                           ; 
   179                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   180                           ;        software without specific prior written permission.
   181                           ; 
   182                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   183                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   184                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   185                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   186                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   187                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   188                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   189                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   190                           ; 
   191                           ; 
   192                           ; Code-generator required, PIC16LF1559 Definitions
   193                           ; 
   194                           ; SFR Addresses
   195  0000                     	;# 
   196  0001                     	;# 
   197  0002                     	;# 
   198  0003                     	;# 
   199  0004                     	;# 
   200  0005                     	;# 
   201  0006                     	;# 
   202  0007                     	;# 
   203  0008                     	;# 
   204  0009                     	;# 
   205  000A                     	;# 
   206  000B                     	;# 
   207  000C                     	;# 
   208  000D                     	;# 
   209  000E                     	;# 
   210  0011                     	;# 
   211  0012                     	;# 
   212  0015                     	;# 
   213  0016                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001C                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  0091                     	;# 
   225  0092                     	;# 
   226  0095                     	;# 
   227  0096                     	;# 
   228  0097                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009B                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  009F                     	;# 
   237  010C                     	;# 
   238  010D                     	;# 
   239  010E                     	;# 
   240  0116                     	;# 
   241  0117                     	;# 
   242  011D                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245  018E                     	;# 
   246  0191                     	;# 
   247  0191                     	;# 
   248  0192                     	;# 
   249  0193                     	;# 
   250  0193                     	;# 
   251  0194                     	;# 
   252  0195                     	;# 
   253  0196                     	;# 
   254  0199                     	;# 
   255  019A                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019D                     	;# 
   260  019E                     	;# 
   261  019F                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  0211                     	;# 
   265  0211                     	;# 
   266  0212                     	;# 
   267  0212                     	;# 
   268  0213                     	;# 
   269  0213                     	;# 
   270  0214                     	;# 
   271  0214                     	;# 
   272  0215                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0216                     	;# 
   276  0216                     	;# 
   277  0217                     	;# 
   278  0217                     	;# 
   279  0391                     	;# 
   280  0392                     	;# 
   281  0393                     	;# 
   282  0394                     	;# 
   283  0395                     	;# 
   284  0396                     	;# 
   285  0611                     	;# 
   286  0612                     	;# 
   287  0613                     	;# 
   288  0613                     	;# 
   289  0614                     	;# 
   290  0615                     	;# 
   291  0616                     	;# 
   292  0616                     	;# 
   293  0711                     	;# 
   294  0711                     	;# 
   295  0711                     	;# 
   296  0712                     	;# 
   297  0712                     	;# 
   298  0713                     	;# 
   299  0713                     	;# 
   300  0713                     	;# 
   301  0714                     	;# 
   302  0714                     	;# 
   303  0714                     	;# 
   304  0715                     	;# 
   305  0715                     	;# 
   306  0716                     	;# 
   307  0716                     	;# 
   308  0716                     	;# 
   309  0716                     	;# 
   310  0717                     	;# 
   311  0717                     	;# 
   312  0717                     	;# 
   313  0717                     	;# 
   314  0718                     	;# 
   315  0718                     	;# 
   316  0718                     	;# 
   317  0719                     	;# 
   318  0719                     	;# 
   319  0719                     	;# 
   320  0719                     	;# 
   321  071A                     	;# 
   322  071A                     	;# 
   323  071A                     	;# 
   324  071A                     	;# 
   325  071A                     	;# 
   326  071B                     	;# 
   327  071B                     	;# 
   328  071C                     	;# 
   329  071C                     	;# 
   330  071C                     	;# 
   331  071C                     	;# 
   332  071C                     	;# 
   333  071D                     	;# 
   334  071D                     	;# 
   335  071E                     	;# 
   336  071E                     	;# 
   337  0791                     	;# 
   338  0791                     	;# 
   339  0793                     	;# 
   340  0793                     	;# 
   341  0794                     	;# 
   342  0794                     	;# 
   343  0796                     	;# 
   344  0796                     	;# 
   345  0796                     	;# 
   346  0797                     	;# 
   347  0797                     	;# 
   348  0797                     	;# 
   349  0798                     	;# 
   350  0798                     	;# 
   351  0799                     	;# 
   352  0799                     	;# 
   353  0799                     	;# 
   354  079A                     	;# 
   355  079A                     	;# 
   356  079A                     	;# 
   357  079B                     	;# 
   358  079C                     	;# 
   359  079C                     	;# 
   360  079C                     	;# 
   361  079D                     	;# 
   362  079E                     	;# 
   363  079E                     	;# 
   364  0F8C                     	;# 
   365  0F8D                     	;# 
   366  0F91                     	;# 
   367  0F96                     	;# 
   368  0F97                     	;# 
   369  0F9C                     	;# 
   370  0F9D                     	;# 
   371  0F9E                     	;# 
   372  0FE3                     	;# 
   373  0FE4                     	;# 
   374  0FE5                     	;# 
   375  0FE6                     	;# 
   376  0FE7                     	;# 
   377  0FE8                     	;# 
   378  0FE9                     	;# 
   379  0FEA                     	;# 
   380  0FEB                     	;# 
   381  0FED                     	;# 
   382  0FEE                     	;# 
   383  0FEF                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  0011                     	;# 
   400  0012                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  008C                     	;# 
   411  008D                     	;# 
   412  008E                     	;# 
   413  0091                     	;# 
   414  0092                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0116                     	;# 
   430  0117                     	;# 
   431  011D                     	;# 
   432  018C                     	;# 
   433  018D                     	;# 
   434  018E                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0194                     	;# 
   441  0195                     	;# 
   442  0196                     	;# 
   443  0199                     	;# 
   444  019A                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019D                     	;# 
   449  019E                     	;# 
   450  019F                     	;# 
   451  020C                     	;# 
   452  020D                     	;# 
   453  0211                     	;# 
   454  0211                     	;# 
   455  0212                     	;# 
   456  0212                     	;# 
   457  0213                     	;# 
   458  0213                     	;# 
   459  0214                     	;# 
   460  0214                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0216                     	;# 
   465  0216                     	;# 
   466  0217                     	;# 
   467  0217                     	;# 
   468  0391                     	;# 
   469  0392                     	;# 
   470  0393                     	;# 
   471  0394                     	;# 
   472  0395                     	;# 
   473  0396                     	;# 
   474  0611                     	;# 
   475  0612                     	;# 
   476  0613                     	;# 
   477  0613                     	;# 
   478  0614                     	;# 
   479  0615                     	;# 
   480  0616                     	;# 
   481  0616                     	;# 
   482  0711                     	;# 
   483  0711                     	;# 
   484  0711                     	;# 
   485  0712                     	;# 
   486  0712                     	;# 
   487  0713                     	;# 
   488  0713                     	;# 
   489  0713                     	;# 
   490  0714                     	;# 
   491  0714                     	;# 
   492  0714                     	;# 
   493  0715                     	;# 
   494  0715                     	;# 
   495  0716                     	;# 
   496  0716                     	;# 
   497  0716                     	;# 
   498  0716                     	;# 
   499  0717                     	;# 
   500  0717                     	;# 
   501  0717                     	;# 
   502  0717                     	;# 
   503  0718                     	;# 
   504  0718                     	;# 
   505  0718                     	;# 
   506  0719                     	;# 
   507  0719                     	;# 
   508  0719                     	;# 
   509  0719                     	;# 
   510  071A                     	;# 
   511  071A                     	;# 
   512  071A                     	;# 
   513  071A                     	;# 
   514  071A                     	;# 
   515  071B                     	;# 
   516  071B                     	;# 
   517  071C                     	;# 
   518  071C                     	;# 
   519  071C                     	;# 
   520  071C                     	;# 
   521  071C                     	;# 
   522  071D                     	;# 
   523  071D                     	;# 
   524  071E                     	;# 
   525  071E                     	;# 
   526  0791                     	;# 
   527  0791                     	;# 
   528  0793                     	;# 
   529  0793                     	;# 
   530  0794                     	;# 
   531  0794                     	;# 
   532  0796                     	;# 
   533  0796                     	;# 
   534  0796                     	;# 
   535  0797                     	;# 
   536  0797                     	;# 
   537  0797                     	;# 
   538  0798                     	;# 
   539  0798                     	;# 
   540  0799                     	;# 
   541  0799                     	;# 
   542  0799                     	;# 
   543  079A                     	;# 
   544  079A                     	;# 
   545  079A                     	;# 
   546  079B                     	;# 
   547  079C                     	;# 
   548  079C                     	;# 
   549  079C                     	;# 
   550  079D                     	;# 
   551  079E                     	;# 
   552  079E                     	;# 
   553  0F8C                     	;# 
   554  0F8D                     	;# 
   555  0F91                     	;# 
   556  0F96                     	;# 
   557  0F97                     	;# 
   558  0F9C                     	;# 
   559  0F9D                     	;# 
   560  0F9E                     	;# 
   561  0FE3                     	;# 
   562  0FE4                     	;# 
   563  0FE5                     	;# 
   564  0FE6                     	;# 
   565  0FE7                     	;# 
   566  0FE8                     	;# 
   567  0FE9                     	;# 
   568  0FEA                     	;# 
   569  0FEB                     	;# 
   570  0FED                     	;# 
   571  0FEE                     	;# 
   572  0FEF                     	;# 
   573  0000                     	;# 
   574  0001                     	;# 
   575  0002                     	;# 
   576  0003                     	;# 
   577  0004                     	;# 
   578  0005                     	;# 
   579  0006                     	;# 
   580  0007                     	;# 
   581  0008                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  008C                     	;# 
   600  008D                     	;# 
   601  008E                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0099                     	;# 
   608  009A                     	;# 
   609  009B                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  009F                     	;# 
   615  010C                     	;# 
   616  010D                     	;# 
   617  010E                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  011D                     	;# 
   621  018C                     	;# 
   622  018D                     	;# 
   623  018E                     	;# 
   624  0191                     	;# 
   625  0191                     	;# 
   626  0192                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0199                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019C                     	;# 
   637  019D                     	;# 
   638  019E                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020D                     	;# 
   642  0211                     	;# 
   643  0211                     	;# 
   644  0212                     	;# 
   645  0212                     	;# 
   646  0213                     	;# 
   647  0213                     	;# 
   648  0214                     	;# 
   649  0214                     	;# 
   650  0215                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0216                     	;# 
   654  0216                     	;# 
   655  0217                     	;# 
   656  0217                     	;# 
   657  0391                     	;# 
   658  0392                     	;# 
   659  0393                     	;# 
   660  0394                     	;# 
   661  0395                     	;# 
   662  0396                     	;# 
   663  0611                     	;# 
   664  0612                     	;# 
   665  0613                     	;# 
   666  0613                     	;# 
   667  0614                     	;# 
   668  0615                     	;# 
   669  0616                     	;# 
   670  0616                     	;# 
   671  0711                     	;# 
   672  0711                     	;# 
   673  0711                     	;# 
   674  0712                     	;# 
   675  0712                     	;# 
   676  0713                     	;# 
   677  0713                     	;# 
   678  0713                     	;# 
   679  0714                     	;# 
   680  0714                     	;# 
   681  0714                     	;# 
   682  0715                     	;# 
   683  0715                     	;# 
   684  0716                     	;# 
   685  0716                     	;# 
   686  0716                     	;# 
   687  0716                     	;# 
   688  0717                     	;# 
   689  0717                     	;# 
   690  0717                     	;# 
   691  0717                     	;# 
   692  0718                     	;# 
   693  0718                     	;# 
   694  0718                     	;# 
   695  0719                     	;# 
   696  0719                     	;# 
   697  0719                     	;# 
   698  0719                     	;# 
   699  071A                     	;# 
   700  071A                     	;# 
   701  071A                     	;# 
   702  071A                     	;# 
   703  071A                     	;# 
   704  071B                     	;# 
   705  071B                     	;# 
   706  071C                     	;# 
   707  071C                     	;# 
   708  071C                     	;# 
   709  071C                     	;# 
   710  071C                     	;# 
   711  071D                     	;# 
   712  071D                     	;# 
   713  071E                     	;# 
   714  071E                     	;# 
   715  0791                     	;# 
   716  0791                     	;# 
   717  0793                     	;# 
   718  0793                     	;# 
   719  0794                     	;# 
   720  0794                     	;# 
   721  0796                     	;# 
   722  0796                     	;# 
   723  0796                     	;# 
   724  0797                     	;# 
   725  0797                     	;# 
   726  0797                     	;# 
   727  0798                     	;# 
   728  0798                     	;# 
   729  0799                     	;# 
   730  0799                     	;# 
   731  0799                     	;# 
   732  079A                     	;# 
   733  079A                     	;# 
   734  079A                     	;# 
   735  079B                     	;# 
   736  079C                     	;# 
   737  079C                     	;# 
   738  079C                     	;# 
   739  079D                     	;# 
   740  079E                     	;# 
   741  079E                     	;# 
   742  0F8C                     	;# 
   743  0F8D                     	;# 
   744  0F91                     	;# 
   745  0F96                     	;# 
   746  0F97                     	;# 
   747  0F9C                     	;# 
   748  0F9D                     	;# 
   749  0F9E                     	;# 
   750  0FE3                     	;# 
   751  0FE4                     	;# 
   752  0FE5                     	;# 
   753  0FE6                     	;# 
   754  0FE7                     	;# 
   755  0FE8                     	;# 
   756  0FE9                     	;# 
   757  0FEA                     	;# 
   758  0FEB                     	;# 
   759  0FED                     	;# 
   760  0FEE                     	;# 
   761  0FEF                     	;# 
   762  0000                     	;# 
   763  0001                     	;# 
   764  0002                     	;# 
   765  0003                     	;# 
   766  0004                     	;# 
   767  0005                     	;# 
   768  0006                     	;# 
   769  0007                     	;# 
   770  0008                     	;# 
   771  0009                     	;# 
   772  000A                     	;# 
   773  000B                     	;# 
   774  000C                     	;# 
   775  000D                     	;# 
   776  000E                     	;# 
   777  0011                     	;# 
   778  0012                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  0091                     	;# 
   792  0092                     	;# 
   793  0095                     	;# 
   794  0096                     	;# 
   795  0097                     	;# 
   796  0099                     	;# 
   797  009A                     	;# 
   798  009B                     	;# 
   799  009B                     	;# 
   800  009C                     	;# 
   801  009D                     	;# 
   802  009E                     	;# 
   803  009F                     	;# 
   804  010C                     	;# 
   805  010D                     	;# 
   806  010E                     	;# 
   807  0116                     	;# 
   808  0117                     	;# 
   809  011D                     	;# 
   810  018C                     	;# 
   811  018D                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0199                     	;# 
   822  019A                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019C                     	;# 
   826  019D                     	;# 
   827  019E                     	;# 
   828  019F                     	;# 
   829  020C                     	;# 
   830  020D                     	;# 
   831  0211                     	;# 
   832  0211                     	;# 
   833  0212                     	;# 
   834  0212                     	;# 
   835  0213                     	;# 
   836  0213                     	;# 
   837  0214                     	;# 
   838  0214                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0216                     	;# 
   843  0216                     	;# 
   844  0217                     	;# 
   845  0217                     	;# 
   846  0391                     	;# 
   847  0392                     	;# 
   848  0393                     	;# 
   849  0394                     	;# 
   850  0395                     	;# 
   851  0396                     	;# 
   852  0611                     	;# 
   853  0612                     	;# 
   854  0613                     	;# 
   855  0613                     	;# 
   856  0614                     	;# 
   857  0615                     	;# 
   858  0616                     	;# 
   859  0616                     	;# 
   860  0711                     	;# 
   861  0711                     	;# 
   862  0711                     	;# 
   863  0712                     	;# 
   864  0712                     	;# 
   865  0713                     	;# 
   866  0713                     	;# 
   867  0713                     	;# 
   868  0714                     	;# 
   869  0714                     	;# 
   870  0714                     	;# 
   871  0715                     	;# 
   872  0715                     	;# 
   873  0716                     	;# 
   874  0716                     	;# 
   875  0716                     	;# 
   876  0716                     	;# 
   877  0717                     	;# 
   878  0717                     	;# 
   879  0717                     	;# 
   880  0717                     	;# 
   881  0718                     	;# 
   882  0718                     	;# 
   883  0718                     	;# 
   884  0719                     	;# 
   885  0719                     	;# 
   886  0719                     	;# 
   887  0719                     	;# 
   888  071A                     	;# 
   889  071A                     	;# 
   890  071A                     	;# 
   891  071A                     	;# 
   892  071A                     	;# 
   893  071B                     	;# 
   894  071B                     	;# 
   895  071C                     	;# 
   896  071C                     	;# 
   897  071C                     	;# 
   898  071C                     	;# 
   899  071C                     	;# 
   900  071D                     	;# 
   901  071D                     	;# 
   902  071E                     	;# 
   903  071E                     	;# 
   904  0791                     	;# 
   905  0791                     	;# 
   906  0793                     	;# 
   907  0793                     	;# 
   908  0794                     	;# 
   909  0794                     	;# 
   910  0796                     	;# 
   911  0796                     	;# 
   912  0796                     	;# 
   913  0797                     	;# 
   914  0797                     	;# 
   915  0797                     	;# 
   916  0798                     	;# 
   917  0798                     	;# 
   918  0799                     	;# 
   919  0799                     	;# 
   920  0799                     	;# 
   921  079A                     	;# 
   922  079A                     	;# 
   923  079A                     	;# 
   924  079B                     	;# 
   925  079C                     	;# 
   926  079C                     	;# 
   927  079C                     	;# 
   928  079D                     	;# 
   929  079E                     	;# 
   930  079E                     	;# 
   931  0F8C                     	;# 
   932  0F8D                     	;# 
   933  0F91                     	;# 
   934  0F96                     	;# 
   935  0F97                     	;# 
   936  0F9C                     	;# 
   937  0F9D                     	;# 
   938  0F9E                     	;# 
   939  0FE3                     	;# 
   940  0FE4                     	;# 
   941  0FE5                     	;# 
   942  0FE6                     	;# 
   943  0FE7                     	;# 
   944  0FE8                     	;# 
   945  0FE9                     	;# 
   946  0FEA                     	;# 
   947  0FEB                     	;# 
   948  0FED                     	;# 
   949  0FEE                     	;# 
   950  0FEF                     	;# 
   951  0000                     	;# 
   952  0001                     	;# 
   953  0002                     	;# 
   954  0003                     	;# 
   955  0004                     	;# 
   956  0005                     	;# 
   957  0006                     	;# 
   958  0007                     	;# 
   959  0008                     	;# 
   960  0009                     	;# 
   961  000A                     	;# 
   962  000B                     	;# 
   963  000C                     	;# 
   964  000D                     	;# 
   965  000E                     	;# 
   966  0011                     	;# 
   967  0012                     	;# 
   968  0015                     	;# 
   969  0016                     	;# 
   970  0016                     	;# 
   971  0017                     	;# 
   972  0018                     	;# 
   973  0019                     	;# 
   974  001A                     	;# 
   975  001B                     	;# 
   976  001C                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0091                     	;# 
   981  0092                     	;# 
   982  0095                     	;# 
   983  0096                     	;# 
   984  0097                     	;# 
   985  0099                     	;# 
   986  009A                     	;# 
   987  009B                     	;# 
   988  009B                     	;# 
   989  009C                     	;# 
   990  009D                     	;# 
   991  009E                     	;# 
   992  009F                     	;# 
   993  010C                     	;# 
   994  010D                     	;# 
   995  010E                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0199                     	;# 
  1011  019A                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019C                     	;# 
  1015  019D                     	;# 
  1016  019E                     	;# 
  1017  019F                     	;# 
  1018  020C                     	;# 
  1019  020D                     	;# 
  1020  0211                     	;# 
  1021  0211                     	;# 
  1022  0212                     	;# 
  1023  0212                     	;# 
  1024  0213                     	;# 
  1025  0213                     	;# 
  1026  0214                     	;# 
  1027  0214                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0216                     	;# 
  1032  0216                     	;# 
  1033  0217                     	;# 
  1034  0217                     	;# 
  1035  0391                     	;# 
  1036  0392                     	;# 
  1037  0393                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0611                     	;# 
  1042  0612                     	;# 
  1043  0613                     	;# 
  1044  0613                     	;# 
  1045  0614                     	;# 
  1046  0615                     	;# 
  1047  0616                     	;# 
  1048  0616                     	;# 
  1049  0711                     	;# 
  1050  0711                     	;# 
  1051  0711                     	;# 
  1052  0712                     	;# 
  1053  0712                     	;# 
  1054  0713                     	;# 
  1055  0713                     	;# 
  1056  0713                     	;# 
  1057  0714                     	;# 
  1058  0714                     	;# 
  1059  0714                     	;# 
  1060  0715                     	;# 
  1061  0715                     	;# 
  1062  0716                     	;# 
  1063  0716                     	;# 
  1064  0716                     	;# 
  1065  0716                     	;# 
  1066  0717                     	;# 
  1067  0717                     	;# 
  1068  0717                     	;# 
  1069  0717                     	;# 
  1070  0718                     	;# 
  1071  0718                     	;# 
  1072  0718                     	;# 
  1073  0719                     	;# 
  1074  0719                     	;# 
  1075  0719                     	;# 
  1076  0719                     	;# 
  1077  071A                     	;# 
  1078  071A                     	;# 
  1079  071A                     	;# 
  1080  071A                     	;# 
  1081  071A                     	;# 
  1082  071B                     	;# 
  1083  071B                     	;# 
  1084  071C                     	;# 
  1085  071C                     	;# 
  1086  071C                     	;# 
  1087  071C                     	;# 
  1088  071C                     	;# 
  1089  071D                     	;# 
  1090  071D                     	;# 
  1091  071E                     	;# 
  1092  071E                     	;# 
  1093  0791                     	;# 
  1094  0791                     	;# 
  1095  0793                     	;# 
  1096  0793                     	;# 
  1097  0794                     	;# 
  1098  0794                     	;# 
  1099  0796                     	;# 
  1100  0796                     	;# 
  1101  0796                     	;# 
  1102  0797                     	;# 
  1103  0797                     	;# 
  1104  0797                     	;# 
  1105  0798                     	;# 
  1106  0798                     	;# 
  1107  0799                     	;# 
  1108  0799                     	;# 
  1109  0799                     	;# 
  1110  079A                     	;# 
  1111  079A                     	;# 
  1112  079A                     	;# 
  1113  079B                     	;# 
  1114  079C                     	;# 
  1115  079C                     	;# 
  1116  079C                     	;# 
  1117  079D                     	;# 
  1118  079E                     	;# 
  1119  079E                     	;# 
  1120  0F8C                     	;# 
  1121  0F8D                     	;# 
  1122  0F91                     	;# 
  1123  0F96                     	;# 
  1124  0F97                     	;# 
  1125  0F9C                     	;# 
  1126  0F9D                     	;# 
  1127  0F9E                     	;# 
  1128  0FE3                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE9                     	;# 
  1135  0FEA                     	;# 
  1136  0FEB                     	;# 
  1137  0FED                     	;# 
  1138  0FEE                     	;# 
  1139  0FEF                     	;# 
  1140  0000                     	;# 
  1141  0001                     	;# 
  1142  0002                     	;# 
  1143  0003                     	;# 
  1144  0004                     	;# 
  1145  0005                     	;# 
  1146  0006                     	;# 
  1147  0007                     	;# 
  1148  0008                     	;# 
  1149  0009                     	;# 
  1150  000A                     	;# 
  1151  000B                     	;# 
  1152  000C                     	;# 
  1153  000D                     	;# 
  1154  000E                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0015                     	;# 
  1158  0016                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  0019                     	;# 
  1163  001A                     	;# 
  1164  001B                     	;# 
  1165  001C                     	;# 
  1166  008C                     	;# 
  1167  008D                     	;# 
  1168  008E                     	;# 
  1169  0091                     	;# 
  1170  0092                     	;# 
  1171  0095                     	;# 
  1172  0096                     	;# 
  1173  0097                     	;# 
  1174  0099                     	;# 
  1175  009A                     	;# 
  1176  009B                     	;# 
  1177  009B                     	;# 
  1178  009C                     	;# 
  1179  009D                     	;# 
  1180  009E                     	;# 
  1181  009F                     	;# 
  1182  010C                     	;# 
  1183  010D                     	;# 
  1184  010E                     	;# 
  1185  0116                     	;# 
  1186  0117                     	;# 
  1187  011D                     	;# 
  1188  018C                     	;# 
  1189  018D                     	;# 
  1190  018E                     	;# 
  1191  0191                     	;# 
  1192  0191                     	;# 
  1193  0192                     	;# 
  1194  0193                     	;# 
  1195  0193                     	;# 
  1196  0194                     	;# 
  1197  0195                     	;# 
  1198  0196                     	;# 
  1199  0199                     	;# 
  1200  019A                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019E                     	;# 
  1206  019F                     	;# 
  1207  020C                     	;# 
  1208  020D                     	;# 
  1209  0211                     	;# 
  1210  0211                     	;# 
  1211  0212                     	;# 
  1212  0212                     	;# 
  1213  0213                     	;# 
  1214  0213                     	;# 
  1215  0214                     	;# 
  1216  0214                     	;# 
  1217  0215                     	;# 
  1218  0215                     	;# 
  1219  0215                     	;# 
  1220  0216                     	;# 
  1221  0216                     	;# 
  1222  0217                     	;# 
  1223  0217                     	;# 
  1224  0391                     	;# 
  1225  0392                     	;# 
  1226  0393                     	;# 
  1227  0394                     	;# 
  1228  0395                     	;# 
  1229  0396                     	;# 
  1230  0611                     	;# 
  1231  0612                     	;# 
  1232  0613                     	;# 
  1233  0613                     	;# 
  1234  0614                     	;# 
  1235  0615                     	;# 
  1236  0616                     	;# 
  1237  0616                     	;# 
  1238  0711                     	;# 
  1239  0711                     	;# 
  1240  0711                     	;# 
  1241  0712                     	;# 
  1242  0712                     	;# 
  1243  0713                     	;# 
  1244  0713                     	;# 
  1245  0713                     	;# 
  1246  0714                     	;# 
  1247  0714                     	;# 
  1248  0714                     	;# 
  1249  0715                     	;# 
  1250  0715                     	;# 
  1251  0716                     	;# 
  1252  0716                     	;# 
  1253  0716                     	;# 
  1254  0716                     	;# 
  1255  0717                     	;# 
  1256  0717                     	;# 
  1257  0717                     	;# 
  1258  0717                     	;# 
  1259  0718                     	;# 
  1260  0718                     	;# 
  1261  0718                     	;# 
  1262  0719                     	;# 
  1263  0719                     	;# 
  1264  0719                     	;# 
  1265  0719                     	;# 
  1266  071A                     	;# 
  1267  071A                     	;# 
  1268  071A                     	;# 
  1269  071A                     	;# 
  1270  071A                     	;# 
  1271  071B                     	;# 
  1272  071B                     	;# 
  1273  071C                     	;# 
  1274  071C                     	;# 
  1275  071C                     	;# 
  1276  071C                     	;# 
  1277  071C                     	;# 
  1278  071D                     	;# 
  1279  071D                     	;# 
  1280  071E                     	;# 
  1281  071E                     	;# 
  1282  0791                     	;# 
  1283  0791                     	;# 
  1284  0793                     	;# 
  1285  0793                     	;# 
  1286  0794                     	;# 
  1287  0794                     	;# 
  1288  0796                     	;# 
  1289  0796                     	;# 
  1290  0796                     	;# 
  1291  0797                     	;# 
  1292  0797                     	;# 
  1293  0797                     	;# 
  1294  0798                     	;# 
  1295  0798                     	;# 
  1296  0799                     	;# 
  1297  0799                     	;# 
  1298  0799                     	;# 
  1299  079A                     	;# 
  1300  079A                     	;# 
  1301  079A                     	;# 
  1302  079B                     	;# 
  1303  079C                     	;# 
  1304  079C                     	;# 
  1305  079C                     	;# 
  1306  079D                     	;# 
  1307  079E                     	;# 
  1308  079E                     	;# 
  1309  0F8C                     	;# 
  1310  0F8D                     	;# 
  1311  0F91                     	;# 
  1312  0F96                     	;# 
  1313  0F97                     	;# 
  1314  0F9C                     	;# 
  1315  0F9D                     	;# 
  1316  0F9E                     	;# 
  1317  0FE3                     	;# 
  1318  0FE4                     	;# 
  1319  0FE5                     	;# 
  1320  0FE6                     	;# 
  1321  0FE7                     	;# 
  1322  0FE8                     	;# 
  1323  0FE9                     	;# 
  1324  0FEA                     	;# 
  1325  0FEB                     	;# 
  1326  0FED                     	;# 
  1327  0FEE                     	;# 
  1328  0FEF                     	;# 
  1329  0000                     	;# 
  1330  0001                     	;# 
  1331  0002                     	;# 
  1332  0003                     	;# 
  1333  0004                     	;# 
  1334  0005                     	;# 
  1335  0006                     	;# 
  1336  0007                     	;# 
  1337  0008                     	;# 
  1338  0009                     	;# 
  1339  000A                     	;# 
  1340  000B                     	;# 
  1341  000C                     	;# 
  1342  000D                     	;# 
  1343  000E                     	;# 
  1344  0011                     	;# 
  1345  0012                     	;# 
  1346  0015                     	;# 
  1347  0016                     	;# 
  1348  0016                     	;# 
  1349  0017                     	;# 
  1350  0018                     	;# 
  1351  0019                     	;# 
  1352  001A                     	;# 
  1353  001B                     	;# 
  1354  001C                     	;# 
  1355  008C                     	;# 
  1356  008D                     	;# 
  1357  008E                     	;# 
  1358  0091                     	;# 
  1359  0092                     	;# 
  1360  0095                     	;# 
  1361  0096                     	;# 
  1362  0097                     	;# 
  1363  0099                     	;# 
  1364  009A                     	;# 
  1365  009B                     	;# 
  1366  009B                     	;# 
  1367  009C                     	;# 
  1368  009D                     	;# 
  1369  009E                     	;# 
  1370  009F                     	;# 
  1371  010C                     	;# 
  1372  010D                     	;# 
  1373  010E                     	;# 
  1374  0116                     	;# 
  1375  0117                     	;# 
  1376  011D                     	;# 
  1377  018C                     	;# 
  1378  018D                     	;# 
  1379  018E                     	;# 
  1380  0191                     	;# 
  1381  0191                     	;# 
  1382  0192                     	;# 
  1383  0193                     	;# 
  1384  0193                     	;# 
  1385  0194                     	;# 
  1386  0195                     	;# 
  1387  0196                     	;# 
  1388  0199                     	;# 
  1389  019A                     	;# 
  1390  019B                     	;# 
  1391  019B                     	;# 
  1392  019C                     	;# 
  1393  019D                     	;# 
  1394  019E                     	;# 
  1395  019F                     	;# 
  1396  020C                     	;# 
  1397  020D                     	;# 
  1398  0211                     	;# 
  1399  0211                     	;# 
  1400  0212                     	;# 
  1401  0212                     	;# 
  1402  0213                     	;# 
  1403  0213                     	;# 
  1404  0214                     	;# 
  1405  0214                     	;# 
  1406  0215                     	;# 
  1407  0215                     	;# 
  1408  0215                     	;# 
  1409  0216                     	;# 
  1410  0216                     	;# 
  1411  0217                     	;# 
  1412  0217                     	;# 
  1413  0391                     	;# 
  1414  0392                     	;# 
  1415  0393                     	;# 
  1416  0394                     	;# 
  1417  0395                     	;# 
  1418  0396                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0613                     	;# 
  1423  0614                     	;# 
  1424  0615                     	;# 
  1425  0616                     	;# 
  1426  0616                     	;# 
  1427  0711                     	;# 
  1428  0711                     	;# 
  1429  0711                     	;# 
  1430  0712                     	;# 
  1431  0712                     	;# 
  1432  0713                     	;# 
  1433  0713                     	;# 
  1434  0713                     	;# 
  1435  0714                     	;# 
  1436  0714                     	;# 
  1437  0714                     	;# 
  1438  0715                     	;# 
  1439  0715                     	;# 
  1440  0716                     	;# 
  1441  0716                     	;# 
  1442  0716                     	;# 
  1443  0716                     	;# 
  1444  0717                     	;# 
  1445  0717                     	;# 
  1446  0717                     	;# 
  1447  0717                     	;# 
  1448  0718                     	;# 
  1449  0718                     	;# 
  1450  0718                     	;# 
  1451  0719                     	;# 
  1452  0719                     	;# 
  1453  0719                     	;# 
  1454  0719                     	;# 
  1455  071A                     	;# 
  1456  071A                     	;# 
  1457  071A                     	;# 
  1458  071A                     	;# 
  1459  071A                     	;# 
  1460  071B                     	;# 
  1461  071B                     	;# 
  1462  071C                     	;# 
  1463  071C                     	;# 
  1464  071C                     	;# 
  1465  071C                     	;# 
  1466  071C                     	;# 
  1467  071D                     	;# 
  1468  071D                     	;# 
  1469  071E                     	;# 
  1470  071E                     	;# 
  1471  0791                     	;# 
  1472  0791                     	;# 
  1473  0793                     	;# 
  1474  0793                     	;# 
  1475  0794                     	;# 
  1476  0794                     	;# 
  1477  0796                     	;# 
  1478  0796                     	;# 
  1479  0796                     	;# 
  1480  0797                     	;# 
  1481  0797                     	;# 
  1482  0797                     	;# 
  1483  0798                     	;# 
  1484  0798                     	;# 
  1485  0799                     	;# 
  1486  0799                     	;# 
  1487  0799                     	;# 
  1488  079A                     	;# 
  1489  079A                     	;# 
  1490  079A                     	;# 
  1491  079B                     	;# 
  1492  079C                     	;# 
  1493  079C                     	;# 
  1494  079C                     	;# 
  1495  079D                     	;# 
  1496  079E                     	;# 
  1497  079E                     	;# 
  1498  0F8C                     	;# 
  1499  0F8D                     	;# 
  1500  0F91                     	;# 
  1501  0F96                     	;# 
  1502  0F97                     	;# 
  1503  0F9C                     	;# 
  1504  0F9D                     	;# 
  1505  0F9E                     	;# 
  1506  0FE3                     	;# 
  1507  0FE4                     	;# 
  1508  0FE5                     	;# 
  1509  0FE6                     	;# 
  1510  0FE7                     	;# 
  1511  0FE8                     	;# 
  1512  0FE9                     	;# 
  1513  0FEA                     	;# 
  1514  0FEB                     	;# 
  1515  0FED                     	;# 
  1516  0FEE                     	;# 
  1517  0FEF                     	;# 
  1518  0000                     	;# 
  1519  0001                     	;# 
  1520  0002                     	;# 
  1521  0003                     	;# 
  1522  0004                     	;# 
  1523  0005                     	;# 
  1524  0006                     	;# 
  1525  0007                     	;# 
  1526  0008                     	;# 
  1527  0009                     	;# 
  1528  000A                     	;# 
  1529  000B                     	;# 
  1530  000C                     	;# 
  1531  000D                     	;# 
  1532  000E                     	;# 
  1533  0011                     	;# 
  1534  0012                     	;# 
  1535  0015                     	;# 
  1536  0016                     	;# 
  1537  0016                     	;# 
  1538  0017                     	;# 
  1539  0018                     	;# 
  1540  0019                     	;# 
  1541  001A                     	;# 
  1542  001B                     	;# 
  1543  001C                     	;# 
  1544  008C                     	;# 
  1545  008D                     	;# 
  1546  008E                     	;# 
  1547  0091                     	;# 
  1548  0092                     	;# 
  1549  0095                     	;# 
  1550  0096                     	;# 
  1551  0097                     	;# 
  1552  0099                     	;# 
  1553  009A                     	;# 
  1554  009B                     	;# 
  1555  009B                     	;# 
  1556  009C                     	;# 
  1557  009D                     	;# 
  1558  009E                     	;# 
  1559  009F                     	;# 
  1560  010C                     	;# 
  1561  010D                     	;# 
  1562  010E                     	;# 
  1563  0116                     	;# 
  1564  0117                     	;# 
  1565  011D                     	;# 
  1566  018C                     	;# 
  1567  018D                     	;# 
  1568  018E                     	;# 
  1569  0191                     	;# 
  1570  0191                     	;# 
  1571  0192                     	;# 
  1572  0193                     	;# 
  1573  0193                     	;# 
  1574  0194                     	;# 
  1575  0195                     	;# 
  1576  0196                     	;# 
  1577  0199                     	;# 
  1578  019A                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019C                     	;# 
  1582  019D                     	;# 
  1583  019E                     	;# 
  1584  019F                     	;# 
  1585  020C                     	;# 
  1586  020D                     	;# 
  1587  0211                     	;# 
  1588  0211                     	;# 
  1589  0212                     	;# 
  1590  0212                     	;# 
  1591  0213                     	;# 
  1592  0213                     	;# 
  1593  0214                     	;# 
  1594  0214                     	;# 
  1595  0215                     	;# 
  1596  0215                     	;# 
  1597  0215                     	;# 
  1598  0216                     	;# 
  1599  0216                     	;# 
  1600  0217                     	;# 
  1601  0217                     	;# 
  1602  0391                     	;# 
  1603  0392                     	;# 
  1604  0393                     	;# 
  1605  0394                     	;# 
  1606  0395                     	;# 
  1607  0396                     	;# 
  1608  0611                     	;# 
  1609  0612                     	;# 
  1610  0613                     	;# 
  1611  0613                     	;# 
  1612  0614                     	;# 
  1613  0615                     	;# 
  1614  0616                     	;# 
  1615  0616                     	;# 
  1616  0711                     	;# 
  1617  0711                     	;# 
  1618  0711                     	;# 
  1619  0712                     	;# 
  1620  0712                     	;# 
  1621  0713                     	;# 
  1622  0713                     	;# 
  1623  0713                     	;# 
  1624  0714                     	;# 
  1625  0714                     	;# 
  1626  0714                     	;# 
  1627  0715                     	;# 
  1628  0715                     	;# 
  1629  0716                     	;# 
  1630  0716                     	;# 
  1631  0716                     	;# 
  1632  0716                     	;# 
  1633  0717                     	;# 
  1634  0717                     	;# 
  1635  0717                     	;# 
  1636  0717                     	;# 
  1637  0718                     	;# 
  1638  0718                     	;# 
  1639  0718                     	;# 
  1640  0719                     	;# 
  1641  0719                     	;# 
  1642  0719                     	;# 
  1643  0719                     	;# 
  1644  071A                     	;# 
  1645  071A                     	;# 
  1646  071A                     	;# 
  1647  071A                     	;# 
  1648  071A                     	;# 
  1649  071B                     	;# 
  1650  071B                     	;# 
  1651  071C                     	;# 
  1652  071C                     	;# 
  1653  071C                     	;# 
  1654  071C                     	;# 
  1655  071C                     	;# 
  1656  071D                     	;# 
  1657  071D                     	;# 
  1658  071E                     	;# 
  1659  071E                     	;# 
  1660  0791                     	;# 
  1661  0791                     	;# 
  1662  0793                     	;# 
  1663  0793                     	;# 
  1664  0794                     	;# 
  1665  0794                     	;# 
  1666  0796                     	;# 
  1667  0796                     	;# 
  1668  0796                     	;# 
  1669  0797                     	;# 
  1670  0797                     	;# 
  1671  0797                     	;# 
  1672  0798                     	;# 
  1673  0798                     	;# 
  1674  0799                     	;# 
  1675  0799                     	;# 
  1676  0799                     	;# 
  1677  079A                     	;# 
  1678  079A                     	;# 
  1679  079A                     	;# 
  1680  079B                     	;# 
  1681  079C                     	;# 
  1682  079C                     	;# 
  1683  079C                     	;# 
  1684  079D                     	;# 
  1685  079E                     	;# 
  1686  079E                     	;# 
  1687  0F8C                     	;# 
  1688  0F8D                     	;# 
  1689  0F91                     	;# 
  1690  0F96                     	;# 
  1691  0F97                     	;# 
  1692  0F9C                     	;# 
  1693  0F9D                     	;# 
  1694  0F9E                     	;# 
  1695  0FE3                     	;# 
  1696  0FE4                     	;# 
  1697  0FE5                     	;# 
  1698  0FE6                     	;# 
  1699  0FE7                     	;# 
  1700  0FE8                     	;# 
  1701  0FE9                     	;# 
  1702  0FEA                     	;# 
  1703  0FEB                     	;# 
  1704  0FED                     	;# 
  1705  0FEE                     	;# 
  1706  0FEF                     	;# 
  1707  0000                     	;# 
  1708  0001                     	;# 
  1709  0002                     	;# 
  1710  0003                     	;# 
  1711  0004                     	;# 
  1712  0005                     	;# 
  1713  0006                     	;# 
  1714  0007                     	;# 
  1715  0008                     	;# 
  1716  0009                     	;# 
  1717  000A                     	;# 
  1718  000B                     	;# 
  1719  000C                     	;# 
  1720  000D                     	;# 
  1721  000E                     	;# 
  1722  0011                     	;# 
  1723  0012                     	;# 
  1724  0015                     	;# 
  1725  0016                     	;# 
  1726  0016                     	;# 
  1727  0017                     	;# 
  1728  0018                     	;# 
  1729  0019                     	;# 
  1730  001A                     	;# 
  1731  001B                     	;# 
  1732  001C                     	;# 
  1733  008C                     	;# 
  1734  008D                     	;# 
  1735  008E                     	;# 
  1736  0091                     	;# 
  1737  0092                     	;# 
  1738  0095                     	;# 
  1739  0096                     	;# 
  1740  0097                     	;# 
  1741  0099                     	;# 
  1742  009A                     	;# 
  1743  009B                     	;# 
  1744  009B                     	;# 
  1745  009C                     	;# 
  1746  009D                     	;# 
  1747  009E                     	;# 
  1748  009F                     	;# 
  1749  010C                     	;# 
  1750  010D                     	;# 
  1751  010E                     	;# 
  1752  0116                     	;# 
  1753  0117                     	;# 
  1754  011D                     	;# 
  1755  018C                     	;# 
  1756  018D                     	;# 
  1757  018E                     	;# 
  1758  0191                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0193                     	;# 
  1762  0193                     	;# 
  1763  0194                     	;# 
  1764  0195                     	;# 
  1765  0196                     	;# 
  1766  0199                     	;# 
  1767  019A                     	;# 
  1768  019B                     	;# 
  1769  019B                     	;# 
  1770  019C                     	;# 
  1771  019D                     	;# 
  1772  019E                     	;# 
  1773  019F                     	;# 
  1774  020C                     	;# 
  1775  020D                     	;# 
  1776  0211                     	;# 
  1777  0211                     	;# 
  1778  0212                     	;# 
  1779  0212                     	;# 
  1780  0213                     	;# 
  1781  0213                     	;# 
  1782  0214                     	;# 
  1783  0214                     	;# 
  1784  0215                     	;# 
  1785  0215                     	;# 
  1786  0215                     	;# 
  1787  0216                     	;# 
  1788  0216                     	;# 
  1789  0217                     	;# 
  1790  0217                     	;# 
  1791  0391                     	;# 
  1792  0392                     	;# 
  1793  0393                     	;# 
  1794  0394                     	;# 
  1795  0395                     	;# 
  1796  0396                     	;# 
  1797  0611                     	;# 
  1798  0612                     	;# 
  1799  0613                     	;# 
  1800  0613                     	;# 
  1801  0614                     	;# 
  1802  0615                     	;# 
  1803  0616                     	;# 
  1804  0616                     	;# 
  1805  0711                     	;# 
  1806  0711                     	;# 
  1807  0711                     	;# 
  1808  0712                     	;# 
  1809  0712                     	;# 
  1810  0713                     	;# 
  1811  0713                     	;# 
  1812  0713                     	;# 
  1813  0714                     	;# 
  1814  0714                     	;# 
  1815  0714                     	;# 
  1816  0715                     	;# 
  1817  0715                     	;# 
  1818  0716                     	;# 
  1819  0716                     	;# 
  1820  0716                     	;# 
  1821  0716                     	;# 
  1822  0717                     	;# 
  1823  0717                     	;# 
  1824  0717                     	;# 
  1825  0717                     	;# 
  1826  0718                     	;# 
  1827  0718                     	;# 
  1828  0718                     	;# 
  1829  0719                     	;# 
  1830  0719                     	;# 
  1831  0719                     	;# 
  1832  0719                     	;# 
  1833  071A                     	;# 
  1834  071A                     	;# 
  1835  071A                     	;# 
  1836  071A                     	;# 
  1837  071A                     	;# 
  1838  071B                     	;# 
  1839  071B                     	;# 
  1840  071C                     	;# 
  1841  071C                     	;# 
  1842  071C                     	;# 
  1843  071C                     	;# 
  1844  071C                     	;# 
  1845  071D                     	;# 
  1846  071D                     	;# 
  1847  071E                     	;# 
  1848  071E                     	;# 
  1849  0791                     	;# 
  1850  0791                     	;# 
  1851  0793                     	;# 
  1852  0793                     	;# 
  1853  0794                     	;# 
  1854  0794                     	;# 
  1855  0796                     	;# 
  1856  0796                     	;# 
  1857  0796                     	;# 
  1858  0797                     	;# 
  1859  0797                     	;# 
  1860  0797                     	;# 
  1861  0798                     	;# 
  1862  0798                     	;# 
  1863  0799                     	;# 
  1864  0799                     	;# 
  1865  0799                     	;# 
  1866  079A                     	;# 
  1867  079A                     	;# 
  1868  079A                     	;# 
  1869  079B                     	;# 
  1870  079C                     	;# 
  1871  079C                     	;# 
  1872  079C                     	;# 
  1873  079D                     	;# 
  1874  079E                     	;# 
  1875  079E                     	;# 
  1876  0F8C                     	;# 
  1877  0F8D                     	;# 
  1878  0F91                     	;# 
  1879  0F96                     	;# 
  1880  0F97                     	;# 
  1881  0F9C                     	;# 
  1882  0F9D                     	;# 
  1883  0F9E                     	;# 
  1884  0FE3                     	;# 
  1885  0FE4                     	;# 
  1886  0FE5                     	;# 
  1887  0FE6                     	;# 
  1888  0FE7                     	;# 
  1889  0FE8                     	;# 
  1890  0FE9                     	;# 
  1891  0FEA                     	;# 
  1892  0FEB                     	;# 
  1893  0FED                     	;# 
  1894  0FEE                     	;# 
  1895  0FEF                     	;# 
  1896  0000                     	;# 
  1897  0001                     	;# 
  1898  0002                     	;# 
  1899  0003                     	;# 
  1900  0004                     	;# 
  1901  0005                     	;# 
  1902  0006                     	;# 
  1903  0007                     	;# 
  1904  0008                     	;# 
  1905  0009                     	;# 
  1906  000A                     	;# 
  1907  000B                     	;# 
  1908  000C                     	;# 
  1909  000D                     	;# 
  1910  000E                     	;# 
  1911  0011                     	;# 
  1912  0012                     	;# 
  1913  0015                     	;# 
  1914  0016                     	;# 
  1915  0016                     	;# 
  1916  0017                     	;# 
  1917  0018                     	;# 
  1918  0019                     	;# 
  1919  001A                     	;# 
  1920  001B                     	;# 
  1921  001C                     	;# 
  1922  008C                     	;# 
  1923  008D                     	;# 
  1924  008E                     	;# 
  1925  0091                     	;# 
  1926  0092                     	;# 
  1927  0095                     	;# 
  1928  0096                     	;# 
  1929  0097                     	;# 
  1930  0099                     	;# 
  1931  009A                     	;# 
  1932  009B                     	;# 
  1933  009B                     	;# 
  1934  009C                     	;# 
  1935  009D                     	;# 
  1936  009E                     	;# 
  1937  009F                     	;# 
  1938  010C                     	;# 
  1939  010D                     	;# 
  1940  010E                     	;# 
  1941  0116                     	;# 
  1942  0117                     	;# 
  1943  011D                     	;# 
  1944  018C                     	;# 
  1945  018D                     	;# 
  1946  018E                     	;# 
  1947  0191                     	;# 
  1948  0191                     	;# 
  1949  0192                     	;# 
  1950  0193                     	;# 
  1951  0193                     	;# 
  1952  0194                     	;# 
  1953  0195                     	;# 
  1954  0196                     	;# 
  1955  0199                     	;# 
  1956  019A                     	;# 
  1957  019B                     	;# 
  1958  019B                     	;# 
  1959  019C                     	;# 
  1960  019D                     	;# 
  1961  019E                     	;# 
  1962  019F                     	;# 
  1963  020C                     	;# 
  1964  020D                     	;# 
  1965  0211                     	;# 
  1966  0211                     	;# 
  1967  0212                     	;# 
  1968  0212                     	;# 
  1969  0213                     	;# 
  1970  0213                     	;# 
  1971  0214                     	;# 
  1972  0214                     	;# 
  1973  0215                     	;# 
  1974  0215                     	;# 
  1975  0215                     	;# 
  1976  0216                     	;# 
  1977  0216                     	;# 
  1978  0217                     	;# 
  1979  0217                     	;# 
  1980  0391                     	;# 
  1981  0392                     	;# 
  1982  0393                     	;# 
  1983  0394                     	;# 
  1984  0395                     	;# 
  1985  0396                     	;# 
  1986  0611                     	;# 
  1987  0612                     	;# 
  1988  0613                     	;# 
  1989  0613                     	;# 
  1990  0614                     	;# 
  1991  0615                     	;# 
  1992  0616                     	;# 
  1993  0616                     	;# 
  1994  0711                     	;# 
  1995  0711                     	;# 
  1996  0711                     	;# 
  1997  0712                     	;# 
  1998  0712                     	;# 
  1999  0713                     	;# 
  2000  0713                     	;# 
  2001  0713                     	;# 
  2002  0714                     	;# 
  2003  0714                     	;# 
  2004  0714                     	;# 
  2005  0715                     	;# 
  2006  0715                     	;# 
  2007  0716                     	;# 
  2008  0716                     	;# 
  2009  0716                     	;# 
  2010  0716                     	;# 
  2011  0717                     	;# 
  2012  0717                     	;# 
  2013  0717                     	;# 
  2014  0717                     	;# 
  2015  0718                     	;# 
  2016  0718                     	;# 
  2017  0718                     	;# 
  2018  0719                     	;# 
  2019  0719                     	;# 
  2020  0719                     	;# 
  2021  0719                     	;# 
  2022  071A                     	;# 
  2023  071A                     	;# 
  2024  071A                     	;# 
  2025  071A                     	;# 
  2026  071A                     	;# 
  2027  071B                     	;# 
  2028  071B                     	;# 
  2029  071C                     	;# 
  2030  071C                     	;# 
  2031  071C                     	;# 
  2032  071C                     	;# 
  2033  071C                     	;# 
  2034  071D                     	;# 
  2035  071D                     	;# 
  2036  071E                     	;# 
  2037  071E                     	;# 
  2038  0791                     	;# 
  2039  0791                     	;# 
  2040  0793                     	;# 
  2041  0793                     	;# 
  2042  0794                     	;# 
  2043  0794                     	;# 
  2044  0796                     	;# 
  2045  0796                     	;# 
  2046  0796                     	;# 
  2047  0797                     	;# 
  2048  0797                     	;# 
  2049  0797                     	;# 
  2050  0798                     	;# 
  2051  0798                     	;# 
  2052  0799                     	;# 
  2053  0799                     	;# 
  2054  0799                     	;# 
  2055  079A                     	;# 
  2056  079A                     	;# 
  2057  079A                     	;# 
  2058  079B                     	;# 
  2059  079C                     	;# 
  2060  079C                     	;# 
  2061  079C                     	;# 
  2062  079D                     	;# 
  2063  079E                     	;# 
  2064  079E                     	;# 
  2065  0F8C                     	;# 
  2066  0F8D                     	;# 
  2067  0F91                     	;# 
  2068  0F96                     	;# 
  2069  0F97                     	;# 
  2070  0F9C                     	;# 
  2071  0F9D                     	;# 
  2072  0F9E                     	;# 
  2073  0FE3                     	;# 
  2074  0FE4                     	;# 
  2075  0FE5                     	;# 
  2076  0FE6                     	;# 
  2077  0FE7                     	;# 
  2078  0FE8                     	;# 
  2079  0FE9                     	;# 
  2080  0FEA                     	;# 
  2081  0FEB                     	;# 
  2082  0FED                     	;# 
  2083  0FEE                     	;# 
  2084  0FEF                     	;# 
  2085  0000                     	;# 
  2086  0001                     	;# 
  2087  0002                     	;# 
  2088  0003                     	;# 
  2089  0004                     	;# 
  2090  0005                     	;# 
  2091  0006                     	;# 
  2092  0007                     	;# 
  2093  0008                     	;# 
  2094  0009                     	;# 
  2095  000A                     	;# 
  2096  000B                     	;# 
  2097  000C                     	;# 
  2098  000D                     	;# 
  2099  000E                     	;# 
  2100  0011                     	;# 
  2101  0012                     	;# 
  2102  0015                     	;# 
  2103  0016                     	;# 
  2104  0016                     	;# 
  2105  0017                     	;# 
  2106  0018                     	;# 
  2107  0019                     	;# 
  2108  001A                     	;# 
  2109  001B                     	;# 
  2110  001C                     	;# 
  2111  008C                     	;# 
  2112  008D                     	;# 
  2113  008E                     	;# 
  2114  0091                     	;# 
  2115  0092                     	;# 
  2116  0095                     	;# 
  2117  0096                     	;# 
  2118  0097                     	;# 
  2119  0099                     	;# 
  2120  009A                     	;# 
  2121  009B                     	;# 
  2122  009B                     	;# 
  2123  009C                     	;# 
  2124  009D                     	;# 
  2125  009E                     	;# 
  2126  009F                     	;# 
  2127  010C                     	;# 
  2128  010D                     	;# 
  2129  010E                     	;# 
  2130  0116                     	;# 
  2131  0117                     	;# 
  2132  011D                     	;# 
  2133  018C                     	;# 
  2134  018D                     	;# 
  2135  018E                     	;# 
  2136  0191                     	;# 
  2137  0191                     	;# 
  2138  0192                     	;# 
  2139  0193                     	;# 
  2140  0193                     	;# 
  2141  0194                     	;# 
  2142  0195                     	;# 
  2143  0196                     	;# 
  2144  0199                     	;# 
  2145  019A                     	;# 
  2146  019B                     	;# 
  2147  019B                     	;# 
  2148  019C                     	;# 
  2149  019D                     	;# 
  2150  019E                     	;# 
  2151  019F                     	;# 
  2152  020C                     	;# 
  2153  020D                     	;# 
  2154  0211                     	;# 
  2155  0211                     	;# 
  2156  0212                     	;# 
  2157  0212                     	;# 
  2158  0213                     	;# 
  2159  0213                     	;# 
  2160  0214                     	;# 
  2161  0214                     	;# 
  2162  0215                     	;# 
  2163  0215                     	;# 
  2164  0215                     	;# 
  2165  0216                     	;# 
  2166  0216                     	;# 
  2167  0217                     	;# 
  2168  0217                     	;# 
  2169  0391                     	;# 
  2170  0392                     	;# 
  2171  0393                     	;# 
  2172  0394                     	;# 
  2173  0395                     	;# 
  2174  0396                     	;# 
  2175  0611                     	;# 
  2176  0612                     	;# 
  2177  0613                     	;# 
  2178  0613                     	;# 
  2179  0614                     	;# 
  2180  0615                     	;# 
  2181  0616                     	;# 
  2182  0616                     	;# 
  2183  0711                     	;# 
  2184  0711                     	;# 
  2185  0711                     	;# 
  2186  0712                     	;# 
  2187  0712                     	;# 
  2188  0713                     	;# 
  2189  0713                     	;# 
  2190  0713                     	;# 
  2191  0714                     	;# 
  2192  0714                     	;# 
  2193  0714                     	;# 
  2194  0715                     	;# 
  2195  0715                     	;# 
  2196  0716                     	;# 
  2197  0716                     	;# 
  2198  0716                     	;# 
  2199  0716                     	;# 
  2200  0717                     	;# 
  2201  0717                     	;# 
  2202  0717                     	;# 
  2203  0717                     	;# 
  2204  0718                     	;# 
  2205  0718                     	;# 
  2206  0718                     	;# 
  2207  0719                     	;# 
  2208  0719                     	;# 
  2209  0719                     	;# 
  2210  0719                     	;# 
  2211  071A                     	;# 
  2212  071A                     	;# 
  2213  071A                     	;# 
  2214  071A                     	;# 
  2215  071A                     	;# 
  2216  071B                     	;# 
  2217  071B                     	;# 
  2218  071C                     	;# 
  2219  071C                     	;# 
  2220  071C                     	;# 
  2221  071C                     	;# 
  2222  071C                     	;# 
  2223  071D                     	;# 
  2224  071D                     	;# 
  2225  071E                     	;# 
  2226  071E                     	;# 
  2227  0791                     	;# 
  2228  0791                     	;# 
  2229  0793                     	;# 
  2230  0793                     	;# 
  2231  0794                     	;# 
  2232  0794                     	;# 
  2233  0796                     	;# 
  2234  0796                     	;# 
  2235  0796                     	;# 
  2236  0797                     	;# 
  2237  0797                     	;# 
  2238  0797                     	;# 
  2239  0798                     	;# 
  2240  0798                     	;# 
  2241  0799                     	;# 
  2242  0799                     	;# 
  2243  0799                     	;# 
  2244  079A                     	;# 
  2245  079A                     	;# 
  2246  079A                     	;# 
  2247  079B                     	;# 
  2248  079C                     	;# 
  2249  079C                     	;# 
  2250  079C                     	;# 
  2251  079D                     	;# 
  2252  079E                     	;# 
  2253  079E                     	;# 
  2254  0F8C                     	;# 
  2255  0F8D                     	;# 
  2256  0F91                     	;# 
  2257  0F96                     	;# 
  2258  0F97                     	;# 
  2259  0F9C                     	;# 
  2260  0F9D                     	;# 
  2261  0F9E                     	;# 
  2262  0FE3                     	;# 
  2263  0FE4                     	;# 
  2264  0FE5                     	;# 
  2265  0FE6                     	;# 
  2266  0FE7                     	;# 
  2267  0FE8                     	;# 
  2268  0FE9                     	;# 
  2269  0FEA                     	;# 
  2270  0FEB                     	;# 
  2271  0FED                     	;# 
  2272  0FEE                     	;# 
  2273  0FEF                     	;# 
  2274  0000                     	;# 
  2275  0001                     	;# 
  2276  0002                     	;# 
  2277  0003                     	;# 
  2278  0004                     	;# 
  2279  0005                     	;# 
  2280  0006                     	;# 
  2281  0007                     	;# 
  2282  0008                     	;# 
  2283  0009                     	;# 
  2284  000A                     	;# 
  2285  000B                     	;# 
  2286  000C                     	;# 
  2287  000D                     	;# 
  2288  000E                     	;# 
  2289  0011                     	;# 
  2290  0012                     	;# 
  2291  0015                     	;# 
  2292  0016                     	;# 
  2293  0016                     	;# 
  2294  0017                     	;# 
  2295  0018                     	;# 
  2296  0019                     	;# 
  2297  001A                     	;# 
  2298  001B                     	;# 
  2299  001C                     	;# 
  2300  008C                     	;# 
  2301  008D                     	;# 
  2302  008E                     	;# 
  2303  0091                     	;# 
  2304  0092                     	;# 
  2305  0095                     	;# 
  2306  0096                     	;# 
  2307  0097                     	;# 
  2308  0099                     	;# 
  2309  009A                     	;# 
  2310  009B                     	;# 
  2311  009B                     	;# 
  2312  009C                     	;# 
  2313  009D                     	;# 
  2314  009E                     	;# 
  2315  009F                     	;# 
  2316  010C                     	;# 
  2317  010D                     	;# 
  2318  010E                     	;# 
  2319  0116                     	;# 
  2320  0117                     	;# 
  2321  011D                     	;# 
  2322  018C                     	;# 
  2323  018D                     	;# 
  2324  018E                     	;# 
  2325  0191                     	;# 
  2326  0191                     	;# 
  2327  0192                     	;# 
  2328  0193                     	;# 
  2329  0193                     	;# 
  2330  0194                     	;# 
  2331  0195                     	;# 
  2332  0196                     	;# 
  2333  0199                     	;# 
  2334  019A                     	;# 
  2335  019B                     	;# 
  2336  019B                     	;# 
  2337  019C                     	;# 
  2338  019D                     	;# 
  2339  019E                     	;# 
  2340  019F                     	;# 
  2341  020C                     	;# 
  2342  020D                     	;# 
  2343  0211                     	;# 
  2344  0211                     	;# 
  2345  0212                     	;# 
  2346  0212                     	;# 
  2347  0213                     	;# 
  2348  0213                     	;# 
  2349  0214                     	;# 
  2350  0214                     	;# 
  2351  0215                     	;# 
  2352  0215                     	;# 
  2353  0215                     	;# 
  2354  0216                     	;# 
  2355  0216                     	;# 
  2356  0217                     	;# 
  2357  0217                     	;# 
  2358  0391                     	;# 
  2359  0392                     	;# 
  2360  0393                     	;# 
  2361  0394                     	;# 
  2362  0395                     	;# 
  2363  0396                     	;# 
  2364  0611                     	;# 
  2365  0612                     	;# 
  2366  0613                     	;# 
  2367  0613                     	;# 
  2368  0614                     	;# 
  2369  0615                     	;# 
  2370  0616                     	;# 
  2371  0616                     	;# 
  2372  0711                     	;# 
  2373  0711                     	;# 
  2374  0711                     	;# 
  2375  0712                     	;# 
  2376  0712                     	;# 
  2377  0713                     	;# 
  2378  0713                     	;# 
  2379  0713                     	;# 
  2380  0714                     	;# 
  2381  0714                     	;# 
  2382  0714                     	;# 
  2383  0715                     	;# 
  2384  0715                     	;# 
  2385  0716                     	;# 
  2386  0716                     	;# 
  2387  0716                     	;# 
  2388  0716                     	;# 
  2389  0717                     	;# 
  2390  0717                     	;# 
  2391  0717                     	;# 
  2392  0717                     	;# 
  2393  0718                     	;# 
  2394  0718                     	;# 
  2395  0718                     	;# 
  2396  0719                     	;# 
  2397  0719                     	;# 
  2398  0719                     	;# 
  2399  0719                     	;# 
  2400  071A                     	;# 
  2401  071A                     	;# 
  2402  071A                     	;# 
  2403  071A                     	;# 
  2404  071A                     	;# 
  2405  071B                     	;# 
  2406  071B                     	;# 
  2407  071C                     	;# 
  2408  071C                     	;# 
  2409  071C                     	;# 
  2410  071C                     	;# 
  2411  071C                     	;# 
  2412  071D                     	;# 
  2413  071D                     	;# 
  2414  071E                     	;# 
  2415  071E                     	;# 
  2416  0791                     	;# 
  2417  0791                     	;# 
  2418  0793                     	;# 
  2419  0793                     	;# 
  2420  0794                     	;# 
  2421  0794                     	;# 
  2422  0796                     	;# 
  2423  0796                     	;# 
  2424  0796                     	;# 
  2425  0797                     	;# 
  2426  0797                     	;# 
  2427  0797                     	;# 
  2428  0798                     	;# 
  2429  0798                     	;# 
  2430  0799                     	;# 
  2431  0799                     	;# 
  2432  0799                     	;# 
  2433  079A                     	;# 
  2434  079A                     	;# 
  2435  079A                     	;# 
  2436  079B                     	;# 
  2437  079C                     	;# 
  2438  079C                     	;# 
  2439  079C                     	;# 
  2440  079D                     	;# 
  2441  079E                     	;# 
  2442  079E                     	;# 
  2443  0F8C                     	;# 
  2444  0F8D                     	;# 
  2445  0F91                     	;# 
  2446  0F96                     	;# 
  2447  0F97                     	;# 
  2448  0F9C                     	;# 
  2449  0F9D                     	;# 
  2450  0F9E                     	;# 
  2451  0FE3                     	;# 
  2452  0FE4                     	;# 
  2453  0FE5                     	;# 
  2454  0FE6                     	;# 
  2455  0FE7                     	;# 
  2456  0FE8                     	;# 
  2457  0FE9                     	;# 
  2458  0FEA                     	;# 
  2459  0FEB                     	;# 
  2460  0FED                     	;# 
  2461  0FEE                     	;# 
  2462  0FEF                     	;# 
  2463                           
  2464                           	psect	idataBANK0
  2465  0800                     __pidataBANK0:	
  2466                           
  2467                           ;initializer for _sample_period
  2468  0800  34AE               	retlw	174
  2469                           
  2470                           	psect	idataBANK1
  2471  1360                     __pidataBANK1:	
  2472                           
  2473                           ;initializer for _Button_StateMachine
  2474  1360  3422               	retlw	low _Button_State_Initializing
  2475  1361  340B               	retlw	high _Button_State_Initializing
  2476  1362  34B4               	retlw	low _Button_State_NotPressed
  2477  1363  340E               	retlw	high _Button_State_NotPressed
  2478  1364  3484               	retlw	low _Button_State_Pressed
  2479  1365  340B               	retlw	high _Button_State_Pressed
  2480                           
  2481                           ;initializer for _callback_notPressed
  2482  1366  344C               	retlw	low _Button_DefaultCallback
  2483  1367  3412               	retlw	high _Button_DefaultCallback
  2484                           
  2485                           ;initializer for _callback_pressed
  2486  1368  344C               	retlw	low _Button_DefaultCallback
  2487  1369  3412               	retlw	high _Button_DefaultCallback
  2488                           
  2489                           ;initializer for _callback_sampled
  2490  136A  344D               	retlw	low _Sensor_DefaultCallback
  2491  136B  3412               	retlw	high _Sensor_DefaultCallback
  2492                           
  2493                           	psect	idataBANK2
  2494  1582                     __pidataBANK2:	
  2495                           
  2496                           ;initializer for _mtouch_sensor
  2497  1582  3400               	retlw	0
  2498  1583  3469               	retlw	105
  2499  1584  3430               	retlw	48
  2500  1585  3410               	retlw	16
  2501  1586  3420               	retlw	32
  2502  1587  3400               	retlw	0
  2503  1588  3400               	retlw	0
  2504  1589  3400               	retlw	0
  2505  158A  3400               	retlw	0
  2506  158B  3401               	retlw	1
  2507  158C  3431               	retlw	49
  2508  158D  3430               	retlw	48
  2509  158E  3410               	retlw	16
  2510  158F  3420               	retlw	32
  2511  1590  3400               	retlw	0
  2512  1591  3400               	retlw	0
  2513  1592  3400               	retlw	0
  2514  1593  3400               	retlw	0
  2515  1594  3402               	retlw	2
  2516  1595  3461               	retlw	97
  2517  1596  3430               	retlw	48
  2518  1597  3410               	retlw	16
  2519  1598  3420               	retlw	32
  2520  1599  3400               	retlw	0
  2521  159A  3400               	retlw	0
  2522  159B  3400               	retlw	0
  2523  159C  3400               	retlw	0
  2524                           
  2525                           	psect	stringtext1
  2526  1839                     __pstringtext1:	
  2527  1839                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2528  1839  3400               	retlw	0
  2529  183A  340D               	retlw	13
  2530  183B  341C               	retlw	28
  2531  183C  341E               	retlw	30
  2532  183D  3417               	retlw	23
  2533  183E                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2534                           
  2535                           	psect	stringtext2
  2536  188E                     __pstringtext2:	
  2537  188E                     _sensor_scan_group:	
  2538  188E  3459               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2539  188F  3450               	retlw	low (_mtouch_sensor| (0+256))
  2540  1890  3400               	retlw	0
  2541  1891  3462               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2542  1892                     __end_of_sensor_scan_group:	
  2543                           
  2544                           	psect	stringtext3
  2545  1800                     __pstringtext3:	
  2546  1800                     _mtouch_button_init:	
  2547  1800  3400               	retlw	0
  2548  1801  3402               	retlw	2
  2549  1802  3400               	retlw	0
  2550  1803  3400               	retlw	0
  2551  1804  3400               	retlw	0
  2552  1805  3400               	retlw	0
  2553  1806  3400               	retlw	0
  2554  1807  3400               	retlw	0
  2555  1808  3400               	retlw	0
  2556  1809  3400               	retlw	0
  2557  180A  3400               	retlw	0
  2558  180B  3400               	retlw	0
  2559  180C  3400               	retlw	0
  2560  180D  3400               	retlw	0
  2561  180E  3464               	retlw	100
  2562  180F  3401               	retlw	1
  2563  1810  3401               	retlw	1
  2564  1811  3400               	retlw	0
  2565  1812  3400               	retlw	0
  2566  1813  3400               	retlw	0
  2567  1814  3400               	retlw	0
  2568  1815  3400               	retlw	0
  2569  1816  3400               	retlw	0
  2570  1817  3400               	retlw	0
  2571  1818  3400               	retlw	0
  2572  1819  3400               	retlw	0
  2573  181A  3400               	retlw	0
  2574  181B  3400               	retlw	0
  2575  181C  3400               	retlw	0
  2576  181D  3400               	retlw	0
  2577  181E  3464               	retlw	100
  2578  181F  3401               	retlw	1
  2579  1820  3402               	retlw	2
  2580  1821  3401               	retlw	1
  2581  1822  3400               	retlw	0
  2582  1823  3400               	retlw	0
  2583  1824  3400               	retlw	0
  2584  1825  3400               	retlw	0
  2585  1826  3400               	retlw	0
  2586  1827  3400               	retlw	0
  2587  1828  3400               	retlw	0
  2588  1829  3400               	retlw	0
  2589  182A  3400               	retlw	0
  2590  182B  3400               	retlw	0
  2591  182C  3400               	retlw	0
  2592  182D  3400               	retlw	0
  2593  182E  3464               	retlw	100
  2594  182F  3401               	retlw	1
  2595  1830                     __end_of_mtouch_button_init:	
  2596                           
  2597                           	psect	nvBANK1
  2598  00D0                     __pnvBANK1:	
  2599  00D0                     _TMR0_InterruptHandler:	
  2600  00D0                     	ds	2
  2601  00D2                     _INT_InterruptHandler:	
  2602  00D2                     	ds	2
  2603  00D4                     _EUSART_ErrorHandler:	
  2604  00D4                     	ds	2
  2605  00D6                     _EUSART_OverrunErrorHandler:	
  2606  00D6                     	ds	2
  2607  00D8                     _EUSART_FramingErrorHandler:	
  2608  00D8                     	ds	2
  2609  00DA                     _EUSART_RxDefaultInterruptHandler:	
  2610  00DA                     	ds	2
  2611  00DC                     _timer0ReloadVal:	
  2612  00DC                     	ds	1
  2613  0015                     _TMR0	set	21
  2614  001C                     _T2CON	set	28
  2615  001A                     _TMR2	set	26
  2616  001B                     _PR2	set	27
  2617  000B                     _INTCONbits	set	11
  2618  0012                     _PIR2bits	set	18
  2619  0011                     _PIR1bits	set	17
  2620  001C                     _T2CONbits	set	28
  2621  005F                     _GIE	set	95
  2622  0095                     _OPTION_REG	set	149
  2623  008E                     _TRISC	set	142
  2624  008D                     _TRISB	set	141
  2625  008C                     _TRISA	set	140
  2626  0097                     _WDTCON	set	151
  2627  0099                     _OSCCON	set	153
  2628  0095                     _OPTION_REGbits	set	149
  2629  0091                     _PIE1bits	set	145
  2630  010C                     _LATAbits	set	268
  2631  010E                     _LATCbits	set	270
  2632  011D                     _APFCON	set	285
  2633  010E                     _LATC	set	270
  2634  010D                     _LATB	set	269
  2635  010C                     _LATA	set	268
  2636  0116                     _BORCON	set	278
  2637  011D                     _APFCONbits	set	285
  2638  018C                     _ANSELA	set	396
  2639  018D                     _ANSELB	set	397
  2640  018E                     _ANSELC	set	398
  2641  0199                     _RCREG	set	409
  2642  019D                     _RCSTAbits	set	413
  2643  019A                     _TXREG	set	410
  2644  019E                     _TXSTAbits	set	414
  2645  019C                     _SPBRGH	set	412
  2646  019B                     _SPBRGL	set	411
  2647  019E                     _TXSTA	set	414
  2648  019D                     _RCSTA	set	413
  2649  019F                     _BAUDCON	set	415
  2650  020C                     _WPUA	set	524
  2651  020D                     _WPUB	set	525
  2652  071A                     _AAD1RES0	set	1818
  2653  0711                     _AD1CON0bits	set	1809
  2654  0714                     _AAD1CON3	set	1812
  2655  0713                     _AD1CON2	set	1811
  2656  0717                     _AD1ACQCON	set	1815
  2657  0716                     _AD1PRECON	set	1814
  2658  0718                     _AAD1GRD	set	1816
  2659  0713                     _AAD1CON2	set	1811
  2660  0719                     _AAD1CAP	set	1817
  2661  0714                     _AD1CON3	set	1812
  2662  0712                     _ADCOMCON	set	1810
  2663  0711                     _AD1CON0	set	1809
  2664  079A                     _AAD2RES0	set	1946
  2665  0791                     _AD2CON0bits	set	1937
  2666  0797                     _AD2ACQCON	set	1943
  2667  0796                     _AD2PRECON	set	1942
  2668  0794                     _AAD2CON3	set	1940
  2669  0798                     _AAD2GRD	set	1944
  2670  0793                     _AD2CON2	set	1939
  2671  0794                     _AD2CON3	set	1940
  2672  0791                     _AD2CON0	set	1937
  2673                           
  2674                           	psect	stringtext4
  2675  1830                     __pstringtext4:	
  2676  1830                     STR_1:	
  2677  1830  3450               	retlw	80	;'P'
  2678  1831  3449               	retlw	73	;'I'
  2679  1832  3443               	retlw	67	;'C'
  2680  1833  3453               	retlw	83	;'S'
  2681  1834  344D               	retlw	77	;'M'
  2682  1835  3441               	retlw	65	;'A'
  2683  1836  3452               	retlw	82	;'R'
  2684  1837  3454               	retlw	84	;'T'
  2685  1838  3400               	retlw	0
  2686                           
  2687                           	psect	stringtext5
  2688  183E                     __pstringtext5:	
  2689  183E                     STR_2:	
  2690  183E  3444               	retlw	68	;'D'
  2691  183F  3449               	retlw	73	;'I'
  2692  1840  344D               	retlw	77	;'M'
  2693  1841  3430               	retlw	48	;'0'
  2694  1842  3400               	retlw	0
  2695                           
  2696                           	psect	stringtext6
  2697  1843                     __pstringtext6:	
  2698  1843                     STR_3:	
  2699  1843  3444               	retlw	68	;'D'
  2700  1844  3449               	retlw	73	;'I'
  2701  1845  344D               	retlw	77	;'M'
  2702  1846  3431               	retlw	49	;'1'
  2703  1847  3400               	retlw	0
  2704                           
  2705                           	psect	stringtext7
  2706  1848                     __pstringtext7:	
  2707  1848                     STR_4:	
  2708  1848  3444               	retlw	68	;'D'
  2709  1849  3449               	retlw	73	;'I'
  2710  184A  344D               	retlw	77	;'M'
  2711  184B  3432               	retlw	50	;'2'
  2712  184C  3400               	retlw	0
  2713                           
  2714                           	psect	stringtext8
  2715  184D                     __pstringtext8:	
  2716  184D                     STR_5:	
  2717  184D  3444               	retlw	68	;'D'
  2718  184E  3449               	retlw	73	;'I'
  2719  184F  344D               	retlw	77	;'M'
  2720  1850  3433               	retlw	51	;'3'
  2721  1851  3400               	retlw	0
  2722                           
  2723                           	psect	stringtext9
  2724  1852                     __pstringtext9:	
  2725  1852                     STR_6:	
  2726  1852  3444               	retlw	68	;'D'
  2727  1853  3449               	retlw	73	;'I'
  2728  1854  344D               	retlw	77	;'M'
  2729  1855  3434               	retlw	52	;'4'
  2730  1856  3400               	retlw	0
  2731                           
  2732                           	psect	stringtext10
  2733  1857                     __pstringtext10:	
  2734  1857                     STR_7:	
  2735  1857  3444               	retlw	68	;'D'
  2736  1858  3449               	retlw	73	;'I'
  2737  1859  344D               	retlw	77	;'M'
  2738  185A  3435               	retlw	53	;'5'
  2739  185B  3400               	retlw	0
  2740                           
  2741                           	psect	stringtext11
  2742  185C                     __pstringtext11:	
  2743  185C                     STR_8:	
  2744  185C  3444               	retlw	68	;'D'
  2745  185D  3449               	retlw	73	;'I'
  2746  185E  344D               	retlw	77	;'M'
  2747  185F  3436               	retlw	54	;'6'
  2748  1860  3400               	retlw	0
  2749                           
  2750                           	psect	stringtext12
  2751  1861                     __pstringtext12:	
  2752  1861                     STR_9:	
  2753  1861  3444               	retlw	68	;'D'
  2754  1862  3449               	retlw	73	;'I'
  2755  1863  344D               	retlw	77	;'M'
  2756  1864  3437               	retlw	55	;'7'
  2757  1865  3400               	retlw	0
  2758                           
  2759                           	psect	stringtext13
  2760  1866                     __pstringtext13:	
  2761  1866                     STR_10:	
  2762  1866  3444               	retlw	68	;'D'
  2763  1867  3449               	retlw	73	;'I'
  2764  1868  344D               	retlw	77	;'M'
  2765  1869  3438               	retlw	56	;'8'
  2766  186A  3400               	retlw	0
  2767                           
  2768                           	psect	stringtext14
  2769  186B                     __pstringtext14:	
  2770  186B                     STR_11:	
  2771  186B  3444               	retlw	68	;'D'
  2772  186C  3449               	retlw	73	;'I'
  2773  186D  344D               	retlw	77	;'M'
  2774  186E  3439               	retlw	57	;'9'
  2775  186F  3400               	retlw	0
  2776                           
  2777                           	psect	stringtext15
  2778  1870                     __pstringtext15:	
  2779  1870                     STR_12:	
  2780  1870  3444               	retlw	68	;'D'
  2781  1871  3449               	retlw	73	;'I'
  2782  1872  344D               	retlw	77	;'M'
  2783  1873  3441               	retlw	65	;'A'
  2784  1874  3400               	retlw	0
  2785                           
  2786                           	psect	stringtext16
  2787  1875                     __pstringtext16:	
  2788  1875                     STR_13:	
  2789  1875  3444               	retlw	68	;'D'
  2790  1876  3449               	retlw	73	;'I'
  2791  1877  344D               	retlw	77	;'M'
  2792  1878  3442               	retlw	66	;'B'
  2793  1879  3400               	retlw	0
  2794                           
  2795                           	psect	stringtext17
  2796  187A                     __pstringtext17:	
  2797  187A                     STR_14:	
  2798  187A  3444               	retlw	68	;'D'
  2799  187B  3449               	retlw	73	;'I'
  2800  187C  344D               	retlw	77	;'M'
  2801  187D  3443               	retlw	67	;'C'
  2802  187E  3400               	retlw	0
  2803                           
  2804                           	psect	stringtext18
  2805  187F                     __pstringtext18:	
  2806  187F                     STR_15:	
  2807  187F  3444               	retlw	68	;'D'
  2808  1880  3449               	retlw	73	;'I'
  2809  1881  344D               	retlw	77	;'M'
  2810  1882  3444               	retlw	68	;'D'
  2811  1883  3400               	retlw	0
  2812                           
  2813                           	psect	stringtext19
  2814  1884                     __pstringtext19:	
  2815  1884                     STR_16:	
  2816  1884  3444               	retlw	68	;'D'
  2817  1885  3449               	retlw	73	;'I'
  2818  1886  344D               	retlw	77	;'M'
  2819  1887  3445               	retlw	69	;'E'
  2820  1888  3400               	retlw	0
  2821                           
  2822                           	psect	stringtext20
  2823  1889                     __pstringtext20:	
  2824  1889                     STR_17:	
  2825  1889  3444               	retlw	68	;'D'
  2826  188A  3449               	retlw	73	;'I'
  2827  188B  344D               	retlw	77	;'M'
  2828  188C  3447               	retlw	71	;'G'
  2829  188D  3400               	retlw	0
  2830                           
  2831                           	psect	stringtext21
  2832  1892                     __pstringtext21:	
  2833  1892                     STR_18:	
  2834  1892  3425               	retlw	37	;'%'
  2835  1893  3463               	retlw	99	;'c'
  2836  1894  3400               	retlw	0
  2837                           
  2838                           	psect	stringtext22
  2839  0000                     __pstringtext22:	
  2840                           
  2841                           ; #config settings
  2842  0000                     
  2843                           	psect	cinit
  2844  0026                     start_initialization:	
  2845  0026                     __initialization:	
  2846                           
  2847                           ; Initialize objects allocated to BANK0
  2848  0026  3188  2000  3180   	fcall	__pidataBANK0	;fetch initializer
  2849  0029  00EF               	movwf	__pdataBANK0& (0+127)
  2850                           
  2851                           ; Initialize objects allocated to BANK1
  2852  002A  3060               	movlw	low __pidataBANK1
  2853  002B  0084               	movwf	4
  2854  002C  3093               	movlw	(high __pidataBANK1)| (0+128)
  2855  002D  0085               	movwf	5
  2856  002E  30DD               	movlw	low __pdataBANK1
  2857  002F  0086               	movwf	6
  2858  0030  3000               	movlw	high __pdataBANK1
  2859  0031  0087               	movwf	7
  2860  0032  300C               	movlw	12
  2861  0033  3192  229D  3180   	fcall	init_ram
  2862                           
  2863                           ; Initialize objects allocated to BANK2
  2864  0036  3082               	movlw	low __pidataBANK2
  2865  0037  0084               	movwf	4
  2866  0038  3095               	movlw	(high __pidataBANK2)| (0+128)
  2867  0039  0085               	movwf	5
  2868  003A  3050               	movlw	low __pdataBANK2
  2869  003B  0086               	movwf	6
  2870  003C  3001               	movlw	high __pdataBANK2
  2871  003D  0087               	movwf	7
  2872  003E  301B               	movlw	27
  2873  003F  3192  229D  3180   	fcall	init_ram
  2874                           
  2875                           ; Clear objects allocated to COMMON
  2876  0042  01F0               	clrf	__pbssCOMMON& (0+127)
  2877  0043  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2878  0044  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2879  0045  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2880  0046  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2881  0047  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2882  0048  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  2883                           
  2884                           ; Clear objects allocated to BANK0
  2885  0049  305F               	movlw	low __pbssBANK0
  2886  004A  0084               	movwf	4
  2887  004B  3000               	movlw	high __pbssBANK0
  2888  004C  0085               	movwf	5
  2889  004D  3010               	movlw	16
  2890  004E  3192  2297  3180   	fcall	clear_ram0
  2891                           
  2892                           ; Clear objects allocated to BANK1
  2893  0051  30A0               	movlw	low __pbssBANK1
  2894  0052  0084               	movwf	4
  2895  0053  3000               	movlw	high __pbssBANK1
  2896  0054  0085               	movwf	5
  2897  0055  3030               	movlw	48
  2898  0056  3192  2297  3180   	fcall	clear_ram0
  2899                           
  2900                           ; Clear objects allocated to BANK2
  2901  0059  3020               	movlw	low __pbssBANK2
  2902  005A  0084               	movwf	4
  2903  005B  3001               	movlw	high __pbssBANK2
  2904  005C  0085               	movwf	5
  2905  005D  3030               	movlw	48
  2906  005E  3192  2297  3180   	fcall	clear_ram0
  2907                           
  2908                           ; Clear objects allocated to BANK3
  2909  0061  30A0               	movlw	low __pbssBANK3
  2910  0062  0084               	movwf	4
  2911  0063  3001               	movlw	high __pbssBANK3
  2912  0064  0085               	movwf	5
  2913  0065  3020               	movlw	32
  2914  0066  3192  2297         	fcall	clear_ram0
  2915  0068                     end_of_initialization:	
  2916                           ;End of C runtime variable initialization code
  2917                           
  2918  0068                     __end_of__initialization:	
  2919  0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2920  0069  0020               	movlb	0
  2921  006A  3180  286C         	ljmp	_main	;jump to C main() function
  2922                           
  2923                           	psect	bssCOMMON
  2924  0070                     __pbssCOMMON:	
  2925  0070                     _packet_sample:	
  2926  0070                     	ds	4
  2927  0074                     _config_status:	
  2928  0074                     	ds	1
  2929  0075                     _counter_PRESS:	
  2930  0075                     	ds	1
  2931  0076                     _counter_ON_OFF:	
  2932  0076                     	ds	1
  2933                           
  2934                           	psect	bssBANK0
  2935  005F                     __pbssBANK0:	
  2936  005F                     _triac_level:	
  2937  005F                     	ds	2
  2938  0061                     _counter_1s:	
  2939  0061                     	ds	2
  2940  0063                     _counter_led:	
  2941  0063                     	ds	1
  2942  0064                     _check_request:	
  2943  0064                     	ds	1
  2944  0065                     _rxData:	
  2945  0065                     	ds	1
  2946  0066                     _turn_down:	
  2947  0066                     	ds	1
  2948  0067                     _turn_up:	
  2949  0067                     	ds	1
  2950  0068                     _turn_on:	
  2951  0068                     	ds	1
  2952  0069                     _turn_off:	
  2953  0069                     	ds	1
  2954  006A                     _eusartRxCount:	
  2955  006A                     	ds	1
  2956  006B                     _eusartRxTail:	
  2957  006B                     	ds	1
  2958  006C                     _eusartRxHead:	
  2959  006C                     	ds	1
  2960  006D                     _sensor_globalFlags:	
  2961  006D                     	ds	1
  2962  006E                     _lowpowerActivated:	
  2963  006E                     	ds	1
  2964                           
  2965                           	psect	dataBANK0
  2966  006F                     __pdataBANK0:	
  2967  006F                     _sample_period:	
  2968  006F                     	ds	1
  2969                           
  2970                           	psect	bssBANK1
  2971  00A0                     __pbssBANK1:	
  2972  00A0                     _eusartRxStatusBuffer:	
  2973  00A0                     	ds	8
  2974  00A8                     _eusartRxBuffer:	
  2975  00A8                     	ds	8
  2976  00B0                     _nout:	
  2977  00B0                     	ds	2
  2978  00B2                     _width:	
  2979  00B2                     	ds	2
  2980  00B4                     _prec:	
  2981  00B4                     	ds	2
  2982  00B6                     _flags:	
  2983  00B6                     	ds	2
  2984  00B8                     _triac_c:	
  2985  00B8                     	ds	2
  2986  00BA                     _rc_level:	
  2987  00BA                     	ds	2
  2988  00BC                     _triac_level_now:	
  2989  00BC                     	ds	2
  2990  00BE                     _timeout_count:	
  2991  00BE                     	ds	2
  2992  00C0                     _count_conf:	
  2993  00C0                     	ds	2
  2994  00C2                     _last_touch_status:	
  2995  00C2                     	ds	2
  2996  00C4                     _packet_noise:	
  2997  00C4                     	ds	2
  2998  00C6                     TMR0_ISR@tick_count:	
  2999  00C6                     	ds	1
  3000  00C7                     _i:	
  3001  00C7                     	ds	1
  3002  00C8                     _ZCD_STATE:	
  3003  00C8                     	ds	1
  3004  00C9                     _update_state_flag:	
  3005  00C9                     	ds	1
  3006  00CA                     _blink_count:	
  3007  00CA                     	ds	1
  3008  00CB                     _blink:	
  3009  00CB                     	ds	1
  3010  00CC                     _prcData:	
  3011  00CC                     	ds	1
  3012  00CD                     _count_down_off:	
  3013  00CD                     	ds	1
  3014  00CE                     _eusartRxLastError:	
  3015  00CE                     	ds	1
  3016  00CF                     _mtouch_time_toScan:	
  3017  00CF                     	ds	1
  3018                           
  3019                           	psect	dataBANK1
  3020  00DD                     __pdataBANK1:	
  3021  00DD                     _Button_StateMachine:	
  3022  00DD                     	ds	6
  3023  00E3                     _callback_notPressed:	
  3024  00E3                     	ds	2
  3025  00E5                     _callback_pressed:	
  3026  00E5                     	ds	2
  3027  00E7                     _callback_sampled:	
  3028  00E7                     	ds	2
  3029                           
  3030                           	psect	bssBANK2
  3031  0120                     __pbssBANK2:	
  3032  0120                     _mtouch_button:	
  3033  0120                     	ds	48
  3034                           
  3035                           	psect	dataBANK2
  3036  0150                     __pdataBANK2:	
  3037  0150                     _mtouch_sensor:	
  3038  0150                     	ds	27
  3039                           
  3040                           	psect	bssBANK3
  3041  01A0                     __pbssBANK3:	
  3042  01A0                     _dbuf:	
  3043  01A0                     	ds	32
  3044                           
  3045                           	psect	inittext
  3046  129D                     init_ram:	
  3047  129D  00FE               	movwf	126
  3048  129E                     initloop:	
  3049  129E  0012               	moviw fsr0++
  3050  129F  001E               	movwi fsr1++
  3051  12A0  0BFE               	decfsz	126,f
  3052  12A1  2A9E               	goto	initloop
  3053  12A2  3400               	retlw	0
  3054                           
  3055                           	psect	clrtext
  3056  1297                     clear_ram0:	
  3057                           ;	Called with FSR0 containing the base address, and
  3058                           ;	WREG with the size to clear
  3059                           
  3060  1297  0064               	clrwdt	;clear the watchdog before getting into this loop
  3061  1298                     clrloop0:	
  3062  1298  0180               	clrf	0	;clear RAM location pointed to by FSR
  3063  1299  3101               	addfsr 0,1
  3064  129A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3065  129B  2A98               	goto	clrloop0	;have we reached the end yet?
  3066  129C  3400               	retlw	0	;all done for this memory range, return
  3067                           
  3068                           	psect	cstackCOMMON
  3069  0077                     __pcstackCOMMON:	
  3070  0077                     ?_MTOUCH_Service_Mainloop:	
  3071  0077                     ?_MTOUCH_Button_isPressed:	
  3072                           ; 1 bytes @ 0x0
  3073                           
  3074  0077                     ?_MTOUCH_Sensor_InitializeAll:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077  0077                     ?_MTOUCH_Button_InitializeAll:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080  0077                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083  0077                     ?_MTOUCH_Sensor_Scan_Initialize:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086  0077                     ?_MTOUCH_Sensor_SampleAll:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089  0077                     ?_MTOUCH_Button_ServiceAll:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0077                     ?_MTOUCH_needReburst:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095  0077                     ?_MTOUCH_Tick:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0077                     ?_MTOUCH_Button_Tick:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101  0077                     ?_MTOUCH_Sensor_Enable:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104  0077                     ?_MTOUCH_Sensor_Calibrate:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0077                     ?_Sensor_Sampled_Reset:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0077                     ?_Sensor_Service:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113  0077                     ?_Sensor_isEnabled:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0077                     ?_Sensor_RawSample_Update:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0077                     ?_Sensor_setSampled:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0077                     ?_Sensor_postAcquisitionProcess:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0077                     ?_Sensor_isActive:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0077                     ?_Sensor_isCalibrated:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0077                     ?_Sensor_setActive:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0077                     ?_Sensor_setInactive:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137  0077                     ?_Sensor_isCalibratingAcqTime:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0077                     ?_TMR2_LoadPeriodRegister:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0077                     ?_TMR2_StartTimer:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146  0077                     ?_TMR2_StopTimer:	
  3147                           ; 1 bytes @ 0x0
  3148                           
  3149  0077                     ?_Sensor_autoCalibration:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0077                     ?_Sensor_setCalibratAcqTime:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155  0077                     ?_Sensor_setCalibrated:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158  0077                     ?_Button_Service:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161  0077                     ?_Button_Reading_Update:	
  3162                           ; 1 bytes @ 0x0
  3163                           
  3164  0077                     ?_Button_Deviation_Update:	
  3165                           ; 1 bytes @ 0x0
  3166                           
  3167  0077                     ?_Button_Baseline_Initialize:	
  3168                           ; 1 bytes @ 0x0
  3169                           
  3170  0077                     ?_Button_Baseline_Update:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0077                     ?_Button_Tick_helper:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0077                     ?_Button_Reading_Update_Helper:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0077                     ?_EUSART_Receive_ISR:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0077                     ?_EUSART_DefaultFramingErrorHandler:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0077                     ??_EUSART_DefaultFramingErrorHandler:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0077                     ?_EUSART_DefaultOverrunErrorHandler:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0077                     ??_EUSART_DefaultOverrunErrorHandler:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0077                     ?_EUSART_DefaultErrorHandler:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0077                     ?_EUSART_RxDataHandler:	
  3198                           ; 1 bytes @ 0x0
  3199                           
  3200  0077                     ??_EUSART_RxDataHandler:	
  3201                           ; 1 bytes @ 0x0
  3202                           
  3203  0077                     ?_INT_CallBack:	
  3204                           ; 1 bytes @ 0x0
  3205                           
  3206  0077                     ??_INT_CallBack:	
  3207                           ; 1 bytes @ 0x0
  3208                           
  3209  0077                     ?_TMR0_ISR:	
  3210                           ; 1 bytes @ 0x0
  3211                           
  3212  0077                     ?_PIN_MANAGER_Initialize:	
  3213                           ; 1 bytes @ 0x0
  3214                           
  3215  0077                     ?_OSCILLATOR_Initialize:	
  3216                           ; 1 bytes @ 0x0
  3217                           
  3218  0077                     ?_WDT_Initialize:	
  3219                           ; 1 bytes @ 0x0
  3220                           
  3221  0077                     ?_TMR0_Initialize:	
  3222                           ; 1 bytes @ 0x0
  3223                           
  3224  0077                     ?_TMR0_DefaultInterruptHandler:	
  3225                           ; 1 bytes @ 0x0
  3226                           
  3227  0077                     ??_TMR0_DefaultInterruptHandler:	
  3228                           ; 1 bytes @ 0x0
  3229                           
  3230  0077                     ?_TMR0_CallBack:	
  3231                           ; 1 bytes @ 0x0
  3232                           
  3233  0077                     ??_TMR0_CallBack:	
  3234                           ; 1 bytes @ 0x0
  3235                           
  3236  0077                     ?_update_state:	
  3237                           ; 1 bytes @ 0x0
  3238                           
  3239  0077                     ?_check_data:	
  3240                           ; 1 bytes @ 0x0
  3241                           
  3242  0077                     ?_check_message:	
  3243                           ; 1 bytes @ 0x0
  3244                           
  3245  0077                     ?_DATA_PROCESS:	
  3246                           ; 1 bytes @ 0x0
  3247                           
  3248  0077                     ?_check_on_off:	
  3249                           ; 1 bytes @ 0x0
  3250                           
  3251  0077                     ?_check_up_down:	
  3252                           ; 1 bytes @ 0x0
  3253                           
  3254  0077                     ?_MTOUCH_Initialize:	
  3255                           ; 1 bytes @ 0x0
  3256                           
  3257  0077                     ?_MTOUCH_Sensor_Initialize:	
  3258                           ; 1 bytes @ 0x0
  3259                           
  3260  0077                     ?_Sensor_getScanGroupIndex:	
  3261                           ; 1 bytes @ 0x0
  3262                           
  3263  0077                     ?_MTOUCH_Sensor_isCalibrated:	
  3264                           ; 1 bytes @ 0x0
  3265                           
  3266  0077                     ?_MTOUCH_Sensor_wasSampled:	
  3267                           ; 1 bytes @ 0x0
  3268                           
  3269  0077                     ?_MTOUCH_Button_Initialize:	
  3270                           ; 1 bytes @ 0x0
  3271                           
  3272  0077                     ?_MTOUCH_Button_Buttonmask_Get:	
  3273                           ; 1 bytes @ 0x0
  3274                           
  3275  0077                     ?_EUSART_Initialize:	
  3276                           ; 1 bytes @ 0x0
  3277                           
  3278  0077                     ?_EUSART_is_rx_ready:	
  3279                           ; 1 bytes @ 0x0
  3280                           
  3281  0077                     ?_EUSART_Read:	
  3282                           ; 1 bytes @ 0x0
  3283                           
  3284  0077                     ?_EUSART_Write:	
  3285                           ; 1 bytes @ 0x0
  3286                           
  3287  0077                     ?_putch:	
  3288                           ; 1 bytes @ 0x0
  3289                           
  3290  0077                     ?_TMR2_Initialize:	
  3291                           ; 1 bytes @ 0x0
  3292                           
  3293  0077                     ?_INT_ISR:	
  3294                           ; 1 bytes @ 0x0
  3295                           
  3296  0077                     ??_INT_ISR:	
  3297                           ; 1 bytes @ 0x0
  3298                           
  3299  0077                     ?_INT_DefaultInterruptHandler:	
  3300                           ; 1 bytes @ 0x0
  3301                           
  3302  0077                     ??_INT_DefaultInterruptHandler:	
  3303                           ; 1 bytes @ 0x0
  3304                           
  3305  0077                     ?_EXT_INT_Initialize:	
  3306                           ; 1 bytes @ 0x0
  3307                           
  3308  0077                     ?_INTERRUPT_InterruptManager:	
  3309                           ; 1 bytes @ 0x0
  3310                           
  3311  0077                     ?_SYSTEM_Initialize:	
  3312                           ; 1 bytes @ 0x0
  3313                           
  3314  0077                     ?_LED_UP_ON:	
  3315                           ; 1 bytes @ 0x0
  3316                           
  3317  0077                     ?_LED_DOWN_ON:	
  3318                           ; 1 bytes @ 0x0
  3319                           
  3320  0077                     ?_LED_UP_OFF:	
  3321                           ; 1 bytes @ 0x0
  3322                           
  3323  0077                     ?_LED_DOWN_OFF:	
  3324                           ; 1 bytes @ 0x0
  3325                           
  3326  0077                     ?_LED_ON:	
  3327                           ; 1 bytes @ 0x0
  3328                           
  3329  0077                     ?_LED_OFF:	
  3330                           ; 1 bytes @ 0x0
  3331                           
  3332  0077                     ?_ALL_ON:	
  3333                           ; 1 bytes @ 0x0
  3334                           
  3335  0077                     ?_ALL_OFF:	
  3336                           ; 1 bytes @ 0x0
  3337                           
  3338  0077                     ?_main:	
  3339                           ; 1 bytes @ 0x0
  3340                           
  3341  0077                     ?_CHECK_DIR:	
  3342                           ; 1 bytes @ 0x0
  3343                           
  3344                           
  3345                           ; 1 bytes @ 0x0
  3346  0077                     	ds	1
  3347  0078                     ??_EUSART_Receive_ISR:	
  3348  0078                     ??_EUSART_DefaultErrorHandler:	
  3349                           ; 1 bytes @ 0x1
  3350                           
  3351  0078                     ??_TMR0_ISR:	
  3352                           ; 1 bytes @ 0x1
  3353                           
  3354                           
  3355                           ; 1 bytes @ 0x1
  3356  0078                     	ds	6
  3357  007E                     ??_INTERRUPT_InterruptManager:	
  3358                           
  3359                           	psect	cstackBANK0
  3360  0020                     __pcstackBANK0:	
  3361                           ; 1 bytes @ 0x7
  3362                           
  3363  0020                     ??_MTOUCH_Button_isPressed:	
  3364  0020                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3365                           ; 1 bytes @ 0x0
  3366                           
  3367  0020                     ??_MTOUCH_needReburst:	
  3368                           ; 1 bytes @ 0x0
  3369                           
  3370  0020                     ?_Sensor_DefaultCallback:	
  3371                           ; 1 bytes @ 0x0
  3372                           
  3373  0020                     ??_Sensor_Sampled_Reset:	
  3374                           ; 1 bytes @ 0x0
  3375                           
  3376  0020                     ??_Sensor_isEnabled:	
  3377                           ; 1 bytes @ 0x0
  3378                           
  3379  0020                     ??_Sensor_setSampled:	
  3380                           ; 1 bytes @ 0x0
  3381                           
  3382  0020                     ??_Sensor_isActive:	
  3383                           ; 1 bytes @ 0x0
  3384                           
  3385  0020                     ??_Sensor_isCalibrated:	
  3386                           ; 1 bytes @ 0x0
  3387                           
  3388  0020                     ??_Sensor_setActive:	
  3389                           ; 1 bytes @ 0x0
  3390                           
  3391  0020                     ??_Sensor_setInactive:	
  3392                           ; 1 bytes @ 0x0
  3393                           
  3394  0020                     ??_Sensor_isCalibratingAcqTime:	
  3395                           ; 1 bytes @ 0x0
  3396                           
  3397  0020                     ??_TMR2_LoadPeriodRegister:	
  3398                           ; 1 bytes @ 0x0
  3399                           
  3400  0020                     ??_TMR2_StartTimer:	
  3401                           ; 1 bytes @ 0x0
  3402                           
  3403  0020                     ??_TMR2_StopTimer:	
  3404                           ; 1 bytes @ 0x0
  3405                           
  3406  0020                     ??_Sensor_setCalibratAcqTime:	
  3407                           ; 1 bytes @ 0x0
  3408                           
  3409  0020                     ??_Sensor_setCalibrated:	
  3410                           ; 1 bytes @ 0x0
  3411                           
  3412  0020                     ?_memcpy:	
  3413                           ; 1 bytes @ 0x0
  3414                           
  3415  0020                     ??_Button_Deviation_Update:	
  3416                           ; 1 bytes @ 0x0
  3417                           
  3418  0020                     ??_Button_Baseline_Update:	
  3419                           ; 1 bytes @ 0x0
  3420                           
  3421  0020                     ??_Button_Tick_helper:	
  3422                           ; 1 bytes @ 0x0
  3423                           
  3424  0020                     ?_EUSART_SetRxInterruptHandler:	
  3425                           ; 1 bytes @ 0x0
  3426                           
  3427  0020                     ?_EUSART_SetFramingErrorHandler:	
  3428                           ; 1 bytes @ 0x0
  3429                           
  3430  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3431                           ; 1 bytes @ 0x0
  3432                           
  3433  0020                     ?_EUSART_SetErrorHandler:	
  3434                           ; 1 bytes @ 0x0
  3435                           
  3436  0020                     ??_PIN_MANAGER_Initialize:	
  3437                           ; 1 bytes @ 0x0
  3438                           
  3439  0020                     ??_OSCILLATOR_Initialize:	
  3440                           ; 1 bytes @ 0x0
  3441                           
  3442  0020                     ??_WDT_Initialize:	
  3443                           ; 1 bytes @ 0x0
  3444                           
  3445  0020                     ?_TMR0_SetInterruptHandler:	
  3446                           ; 1 bytes @ 0x0
  3447                           
  3448  0020                     ??_check_data:	
  3449                           ; 1 bytes @ 0x0
  3450                           
  3451  0020                     ??_Sensor_getScanGroupIndex:	
  3452                           ; 1 bytes @ 0x0
  3453                           
  3454  0020                     ?_MTOUCH_Button_SetPressedCallback:	
  3455                           ; 1 bytes @ 0x0
  3456                           
  3457  0020                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3458                           ; 1 bytes @ 0x0
  3459                           
  3460  0020                     ??_EUSART_is_rx_ready:	
  3461                           ; 1 bytes @ 0x0
  3462                           
  3463  0020                     ??_EUSART_Read:	
  3464                           ; 1 bytes @ 0x0
  3465                           
  3466  0020                     ??_EUSART_Write:	
  3467                           ; 1 bytes @ 0x0
  3468                           
  3469  0020                     ??_TMR2_Initialize:	
  3470                           ; 1 bytes @ 0x0
  3471                           
  3472  0020                     ?_INT_SetInterruptHandler:	
  3473                           ; 1 bytes @ 0x0
  3474                           
  3475  0020                     ??_LED_UP_ON:	
  3476                           ; 1 bytes @ 0x0
  3477                           
  3478  0020                     ??_LED_DOWN_ON:	
  3479                           ; 1 bytes @ 0x0
  3480                           
  3481  0020                     ??_LED_UP_OFF:	
  3482                           ; 1 bytes @ 0x0
  3483                           
  3484  0020                     ??_LED_DOWN_OFF:	
  3485                           ; 1 bytes @ 0x0
  3486                           
  3487  0020                     ??_LED_ON:	
  3488                           ; 1 bytes @ 0x0
  3489                           
  3490  0020                     ??_LED_OFF:	
  3491                           ; 1 bytes @ 0x0
  3492                           
  3493  0020                     ??_ALL_ON:	
  3494                           ; 1 bytes @ 0x0
  3495                           
  3496  0020                     ??_ALL_OFF:	
  3497                           ; 1 bytes @ 0x0
  3498                           
  3499  0020                     ?_LED_RUN:	
  3500                           ; 1 bytes @ 0x0
  3501                           
  3502  0020                     ??_CHECK_DIR:	
  3503                           ; 1 bytes @ 0x0
  3504                           
  3505  0020                     ?___bmul:	
  3506                           ; 1 bytes @ 0x0
  3507                           
  3508  0020                     ?_abs:	
  3509                           ; 1 bytes @ 0x0
  3510                           
  3511  0020                     ?_strlen:	
  3512                           ; 2 bytes @ 0x0
  3513                           
  3514  0020                     Sensor_DefaultCallback@sensor:	
  3515                           ; 2 bytes @ 0x0
  3516                           
  3517  0020                     Sensor_setActive@sensor:	
  3518                           ; 1 bytes @ 0x0
  3519                           
  3520  0020                     Sensor_setInactive@sensor:	
  3521                           ; 1 bytes @ 0x0
  3522                           
  3523  0020                     Sensor_isActive@sensor:	
  3524                           ; 1 bytes @ 0x0
  3525                           
  3526  0020                     Sensor_isCalibrated@sensor:	
  3527                           ; 1 bytes @ 0x0
  3528                           
  3529  0020                     Sensor_setCalibrated@sensor:	
  3530                           ; 1 bytes @ 0x0
  3531                           
  3532  0020                     Sensor_setCalibratAcqTime@sensor:	
  3533                           ; 1 bytes @ 0x0
  3534                           
  3535  0020                     Sensor_isCalibratingAcqTime@sensor:	
  3536                           ; 1 bytes @ 0x0
  3537                           
  3538  0020                     Sensor_Sampled_Reset@sensor:	
  3539                           ; 1 bytes @ 0x0
  3540                           
  3541  0020                     Sensor_setSampled@sensor:	
  3542                           ; 1 bytes @ 0x0
  3543                           
  3544  0020                     EUSART_Write@txData:	
  3545                           ; 1 bytes @ 0x0
  3546                           
  3547  0020                     TMR2_LoadPeriodRegister@periodVal:	
  3548                           ; 1 bytes @ 0x0
  3549                           
  3550  0020                     LED_RUN@LED_2:	
  3551                           ; 1 bytes @ 0x0
  3552                           
  3553  0020                     ___bmul@multiplicand:	
  3554                           ; 1 bytes @ 0x0
  3555                           
  3556  0020                     MTOUCH_Button_SetPressedCallback@callback:	
  3557                           ; 1 bytes @ 0x0
  3558                           
  3559  0020                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3560                           ; 2 bytes @ 0x0
  3561                           
  3562  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3563                           ; 2 bytes @ 0x0
  3564                           
  3565  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3566                           ; 2 bytes @ 0x0
  3567                           
  3568  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3569                           ; 2 bytes @ 0x0
  3570                           
  3571  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3572                           ; 2 bytes @ 0x0
  3573                           
  3574  0020                     INT_SetInterruptHandler@InterruptHandler:	
  3575                           ; 2 bytes @ 0x0
  3576                           
  3577  0020                     TMR0_SetInterruptHandler@InterruptHandler:	
  3578                           ; 2 bytes @ 0x0
  3579                           
  3580  0020                     abs@a:	
  3581                           ; 2 bytes @ 0x0
  3582                           
  3583  0020                     memcpy@s1:	
  3584                           ; 2 bytes @ 0x0
  3585                           
  3586                           
  3587                           ; 2 bytes @ 0x0
  3588  0020                     	ds	1
  3589  0021                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3590  0021                     ??_Sensor_DefaultCallback:	
  3591                           ; 1 bytes @ 0x1
  3592                           
  3593  0021                     ?_Sensor_loadADCSettings:	
  3594                           ; 1 bytes @ 0x1
  3595                           
  3596  0021                     ??_putch:	
  3597                           ; 1 bytes @ 0x1
  3598                           
  3599  0021                     ??___bmul:	
  3600                           ; 1 bytes @ 0x1
  3601                           
  3602  0021                     Sensor_loadADCSettings@adc_index:	
  3603                           ; 1 bytes @ 0x1
  3604                           
  3605  0021                     Sensor_isEnabled@sensor:	
  3606                           ; 1 bytes @ 0x1
  3607                           
  3608  0021                     MTOUCH_Button_isPressed@name:	
  3609                           ; 1 bytes @ 0x1
  3610                           
  3611  0021                     EUSART_Read@readValue:	
  3612                           ; 1 bytes @ 0x1
  3613                           
  3614  0021                     putch@txData:	
  3615                           ; 1 bytes @ 0x1
  3616                           
  3617  0021                     LED_RUN@LED_3:	
  3618                           ; 1 bytes @ 0x1
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x1
  3622  0021                     	ds	1
  3623  0022                     ??_abs:	
  3624  0022                     ??_EUSART_SetRxInterruptHandler:	
  3625                           ; 1 bytes @ 0x2
  3626                           
  3627  0022                     ??_EUSART_SetFramingErrorHandler:	
  3628                           ; 1 bytes @ 0x2
  3629                           
  3630  0022                     ??_EUSART_SetOverrunErrorHandler:	
  3631                           ; 1 bytes @ 0x2
  3632                           
  3633  0022                     ??_EUSART_SetErrorHandler:	
  3634                           ; 1 bytes @ 0x2
  3635                           
  3636  0022                     ??_TMR0_Initialize:	
  3637                           ; 1 bytes @ 0x2
  3638                           
  3639  0022                     ??_TMR0_SetInterruptHandler:	
  3640                           ; 1 bytes @ 0x2
  3641                           
  3642  0022                     ??_DATA_PROCESS:	
  3643                           ; 1 bytes @ 0x2
  3644                           
  3645  0022                     ??_strlen:	
  3646                           ; 1 bytes @ 0x2
  3647                           
  3648  0022                     ??_Sensor_loadADCSettings:	
  3649                           ; 1 bytes @ 0x2
  3650                           
  3651  0022                     ??_MTOUCH_Button_Buttonmask_Get:	
  3652                           ; 1 bytes @ 0x2
  3653                           
  3654  0022                     ??_MTOUCH_Button_SetPressedCallback:	
  3655                           ; 1 bytes @ 0x2
  3656                           
  3657  0022                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3658                           ; 1 bytes @ 0x2
  3659                           
  3660  0022                     ??_EUSART_Initialize:	
  3661                           ; 1 bytes @ 0x2
  3662                           
  3663  0022                     ??_INT_SetInterruptHandler:	
  3664                           ; 1 bytes @ 0x2
  3665                           
  3666  0022                     ??_EXT_INT_Initialize:	
  3667                           ; 1 bytes @ 0x2
  3668                           
  3669  0022                     ??_LED_RUN:	
  3670                           ; 1 bytes @ 0x2
  3671                           
  3672  0022                     ?_fputc:	
  3673                           ; 1 bytes @ 0x2
  3674                           
  3675  0022                     Sensor_getScanGroupIndex@sensor:	
  3676                           ; 2 bytes @ 0x2
  3677                           
  3678  0022                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3679                           ; 1 bytes @ 0x2
  3680                           
  3681  0022                     Button_Tick_helper@button:	
  3682                           ; 1 bytes @ 0x2
  3683                           
  3684  0022                     LED_RUN@LED_1:	
  3685                           ; 1 bytes @ 0x2
  3686                           
  3687  0022                     check_data@x:	
  3688                           ; 1 bytes @ 0x2
  3689                           
  3690  0022                     ___bmul@product:	
  3691                           ; 1 bytes @ 0x2
  3692                           
  3693  0022                     memcpy@n:	
  3694                           ; 1 bytes @ 0x2
  3695                           
  3696  0022                     fputc@c:	
  3697                           ; 2 bytes @ 0x2
  3698                           
  3699                           
  3700                           ; 2 bytes @ 0x2
  3701  0022                     	ds	1
  3702  0023                     ??_MTOUCH_Button_Tick:	
  3703  0023                     Sensor_getScanGroupIndex@sensorGroup:	
  3704                           ; 1 bytes @ 0x3
  3705                           
  3706  0023                     ___bmul@multiplier:	
  3707                           ; 1 bytes @ 0x3
  3708                           
  3709  0023                     strlen@a:	
  3710                           ; 1 bytes @ 0x3
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x3
  3714  0023                     	ds	1
  3715  0024                     ??_MTOUCH_Sensor_Enable:	
  3716  0024                     ??_MTOUCH_Sensor_Calibrate:	
  3717                           ; 1 bytes @ 0x4
  3718                           
  3719  0024                     ??_Sensor_RawSample_Update:	
  3720                           ; 1 bytes @ 0x4
  3721                           
  3722  0024                     ??_Sensor_postAcquisitionProcess:	
  3723                           ; 1 bytes @ 0x4
  3724                           
  3725  0024                     ??_Sensor_autoCalibration:	
  3726                           ; 1 bytes @ 0x4
  3727                           
  3728  0024                     ??_memcpy:	
  3729                           ; 1 bytes @ 0x4
  3730                           
  3731  0024                     ??_MTOUCH_Sensor_isCalibrated:	
  3732                           ; 1 bytes @ 0x4
  3733                           
  3734  0024                     ??_MTOUCH_Sensor_wasSampled:	
  3735                           ; 1 bytes @ 0x4
  3736                           
  3737  0024                     ?_MTOUCH_Sensor_RawSample_Get:	
  3738                           ; 1 bytes @ 0x4
  3739                           
  3740  0024                     MTOUCH_Button_Tick@i:	
  3741                           ; 2 bytes @ 0x4
  3742                           
  3743  0024                     MTOUCH_Button_Buttonmask_Get@output:	
  3744                           ; 1 bytes @ 0x4
  3745                           
  3746  0024                     DATA_PROCESS@x:	
  3747                           ; 1 bytes @ 0x4
  3748                           
  3749  0024                     fputc@fp:	
  3750                           ; 1 bytes @ 0x4
  3751                           
  3752  0024                     strlen@s:	
  3753                           ; 1 bytes @ 0x4
  3754                           
  3755                           
  3756                           ; 1 bytes @ 0x4
  3757  0024                     	ds	1
  3758  0025                     ??_MTOUCH_Tick:	
  3759  0025                     ??_fputc:	
  3760                           ; 1 bytes @ 0x5
  3761                           
  3762  0025                     Sensor_postAcquisitionProcess@adcIndex:	
  3763                           ; 1 bytes @ 0x5
  3764                           
  3765  0025                     Sensor_RawSample_Update@adcIndex:	
  3766                           ; 1 bytes @ 0x5
  3767                           
  3768  0025                     MTOUCH_Sensor_Enable@sensor:	
  3769                           ; 1 bytes @ 0x5
  3770                           
  3771  0025                     MTOUCH_Sensor_Calibrate@sensor:	
  3772                           ; 1 bytes @ 0x5
  3773                           
  3774  0025                     MTOUCH_Sensor_isCalibrated@sensor:	
  3775                           ; 1 bytes @ 0x5
  3776                           
  3777  0025                     MTOUCH_Sensor_wasSampled@sensor:	
  3778                           ; 1 bytes @ 0x5
  3779                           
  3780  0025                     MTOUCH_Button_Buttonmask_Get@i:	
  3781                           ; 1 bytes @ 0x5
  3782                           
  3783  0025                     _Sensor_loadADCSettings$558:	
  3784                           ; 1 bytes @ 0x5
  3785                           
  3786  0025                     memcpy@s:	
  3787                           ; 2 bytes @ 0x5
  3788                           
  3789                           
  3790                           ; 2 bytes @ 0x5
  3791  0025                     	ds	1
  3792  0026                     ??_check_on_off:	
  3793  0026                     ??_check_up_down:	
  3794                           ; 1 bytes @ 0x6
  3795                           
  3796  0026                     ??_MTOUCH_Sensor_Initialize:	
  3797                           ; 1 bytes @ 0x6
  3798                           
  3799  0026                     ??_MTOUCH_Sensor_RawSample_Get:	
  3800                           ; 1 bytes @ 0x6
  3801                           
  3802  0026                     ??_MTOUCH_Button_Initialize:	
  3803                           ; 1 bytes @ 0x6
  3804                           
  3805  0026                     Sensor_RawSample_Update@sensor:	
  3806                           ; 1 bytes @ 0x6
  3807                           
  3808  0026                     Button_Baseline_Update@button:	
  3809                           ; 1 bytes @ 0x6
  3810                           
  3811  0026                     Sensor_postAcquisitionProcess@deviation:	
  3812                           ; 1 bytes @ 0x6
  3813                           
  3814                           
  3815                           ; 2 bytes @ 0x6
  3816  0026                     	ds	1
  3817  0027                     ?_Button_DefaultCallback:	
  3818  0027                     ?_myButtonPressedCallback:	
  3819                           ; 1 bytes @ 0x7
  3820                           
  3821  0027                     ?_myButtonReleasedCallback:	
  3822                           ; 1 bytes @ 0x7
  3823                           
  3824  0027                     MTOUCH_Sensor_Initialize@sensor:	
  3825                           ; 1 bytes @ 0x7
  3826                           
  3827  0027                     Sensor_loadADCSettings@addressOffset:	
  3828                           ; 1 bytes @ 0x7
  3829                           
  3830  0027                     MTOUCH_Sensor_RawSample_Get@name:	
  3831                           ; 1 bytes @ 0x7
  3832                           
  3833  0027                     Button_DefaultCallback@button:	
  3834                           ; 1 bytes @ 0x7
  3835                           
  3836  0027                     myButtonPressedCallback@button:	
  3837                           ; 1 bytes @ 0x7
  3838                           
  3839  0027                     myButtonReleasedCallback@button:	
  3840                           ; 1 bytes @ 0x7
  3841                           
  3842  0027                     memcpy@tmp:	
  3843                           ; 1 bytes @ 0x7
  3844                           
  3845                           
  3846                           ; 1 bytes @ 0x7
  3847  0027                     	ds	1
  3848  0028                     ??_MTOUCH_Sensor_InitializeAll:	
  3849  0028                     ??_Button_DefaultCallback:	
  3850                           ; 1 bytes @ 0x8
  3851                           
  3852  0028                     ??_Button_Baseline_Initialize:	
  3853                           ; 1 bytes @ 0x8
  3854                           
  3855  0028                     ??_Button_Reading_Update_Helper:	
  3856                           ; 1 bytes @ 0x8
  3857                           
  3858  0028                     ??_myButtonPressedCallback:	
  3859                           ; 1 bytes @ 0x8
  3860                           
  3861  0028                     ??_myButtonReleasedCallback:	
  3862                           ; 1 bytes @ 0x8
  3863                           
  3864  0028                     Sensor_postAcquisitionProcess@sensor:	
  3865                           ; 1 bytes @ 0x8
  3866                           
  3867  0028                     Sensor_loadADCSettings@sensor:	
  3868                           ; 1 bytes @ 0x8
  3869                           
  3870  0028                     Sensor_autoCalibration@adcIndex:	
  3871                           ; 1 bytes @ 0x8
  3872                           
  3873  0028                     MTOUCH_Button_Initialize@name:	
  3874                           ; 1 bytes @ 0x8
  3875                           
  3876  0028                     memcpy@d1:	
  3877                           ; 1 bytes @ 0x8
  3878                           
  3879                           
  3880                           ; 1 bytes @ 0x8
  3881  0028                     	ds	1
  3882  0029                     MTOUCH_Sensor_InitializeAll@sensor:	
  3883  0029                     Sensor_autoCalibration@sensor:	
  3884                           ; 1 bytes @ 0x9
  3885                           
  3886  0029                     MTOUCH_Button_Initialize@button:	
  3887                           ; 1 bytes @ 0x9
  3888                           
  3889  0029                     memcpy@d:	
  3890                           ; 1 bytes @ 0x9
  3891                           
  3892                           
  3893                           ; 1 bytes @ 0x9
  3894  0029                     	ds	1
  3895  002A                     ??_MTOUCH_Button_InitializeAll:	
  3896  002A                     ?_Sensor_Acq_ExecutePacket:	
  3897                           ; 1 bytes @ 0xA
  3898                           
  3899  002A                     ?_fputs:	
  3900                           ; 1 bytes @ 0xA
  3901                           
  3902  002A                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3903                           ; 2 bytes @ 0xA
  3904                           
  3905  002A                     Button_Deviation_Update@button:	
  3906                           ; 1 bytes @ 0xA
  3907                           
  3908  002A                     Button_Reading_Update_Helper@button:	
  3909                           ; 1 bytes @ 0xA
  3910                           
  3911  002A                     fputs@fp:	
  3912                           ; 1 bytes @ 0xA
  3913                           
  3914                           
  3915                           ; 1 bytes @ 0xA
  3916  002A                     	ds	1
  3917  002B                     ??_Sensor_Acq_ExecutePacket:	
  3918  002B                     ??_Button_Reading_Update:	
  3919                           ; 1 bytes @ 0xB
  3920                           
  3921  002B                     ??_fputs:	
  3922                           ; 1 bytes @ 0xB
  3923                           
  3924  002B                     MTOUCH_Button_InitializeAll@button:	
  3925                           ; 1 bytes @ 0xB
  3926                           
  3927  002B                     Button_Reading_Update@button:	
  3928                           ; 1 bytes @ 0xB
  3929                           
  3930  002B                     Button_Deviation_Update@deviation:	
  3931                           ; 1 bytes @ 0xB
  3932                           
  3933                           
  3934                           ; 4 bytes @ 0xB
  3935  002B                     	ds	1
  3936  002C                     ??_MTOUCH_Initialize:	
  3937  002C                     ??_SYSTEM_Initialize:	
  3938                           ; 1 bytes @ 0xC
  3939                           
  3940  002C                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3941                           ; 1 bytes @ 0xC
  3942                           
  3943  002C                     Button_Baseline_Initialize@button:	
  3944                           ; 1 bytes @ 0xC
  3945                           
  3946                           
  3947                           ; 1 bytes @ 0xC
  3948  002C                     	ds	1
  3949  002D                     ?_Button_State_Initializing:	
  3950  002D                     ?_Button_State_NotPressed:	
  3951                           ; 1 bytes @ 0xD
  3952                           
  3953  002D                     ?_Button_State_Pressed:	
  3954                           ; 1 bytes @ 0xD
  3955                           
  3956  002D                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3957                           ; 1 bytes @ 0xD
  3958                           
  3959  002D                     Button_State_Initializing@button:	
  3960                           ; 1 bytes @ 0xD
  3961                           
  3962  002D                     Button_State_NotPressed@button:	
  3963                           ; 1 bytes @ 0xD
  3964                           
  3965  002D                     Button_State_Pressed@button:	
  3966                           ; 1 bytes @ 0xD
  3967                           
  3968                           
  3969                           ; 1 bytes @ 0xD
  3970  002D                     	ds	1
  3971  002E                     ??_Button_State_Initializing:	
  3972  002E                     ??_Button_State_NotPressed:	
  3973                           ; 1 bytes @ 0xE
  3974                           
  3975  002E                     ??_Button_State_Pressed:	
  3976                           ; 1 bytes @ 0xE
  3977                           
  3978  002E                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3979                           ; 1 bytes @ 0xE
  3980                           
  3981  002E                     fputs@c:	
  3982                           ; 1 bytes @ 0xE
  3983                           
  3984                           
  3985                           ; 1 bytes @ 0xE
  3986  002E                     	ds	1
  3987  002F                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3988  002F                     fputs@i:	
  3989                           ; 1 bytes @ 0xF
  3990                           
  3991                           
  3992                           ; 2 bytes @ 0xF
  3993  002F                     	ds	1
  3994  0030                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3995                           
  3996                           ; 1 bytes @ 0x10
  3997  0030                     	ds	1
  3998  0031                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3999  0031                     fputs@s:	
  4000                           ; 1 bytes @ 0x11
  4001                           
  4002                           
  4003                           ; 1 bytes @ 0x11
  4004  0031                     	ds	1
  4005  0032                     ??_Button_Service:	
  4006  0032                     ?_pad:	
  4007                           ; 1 bytes @ 0x12
  4008                           
  4009  0032                     Sensor_Acq_ExecutePacket@activeSensor:	
  4010                           ; 2 bytes @ 0x12
  4011                           
  4012  0032                     pad@buf:	
  4013                           ; 1 bytes @ 0x12
  4014                           
  4015                           
  4016                           ; 1 bytes @ 0x12
  4017  0032                     	ds	1
  4018  0033                     Sensor_Acq_ExecutePacket@last_a:	
  4019  0033                     pad@p:	
  4020                           ; 2 bytes @ 0x13
  4021                           
  4022                           
  4023                           ; 2 bytes @ 0x13
  4024  0033                     	ds	1
  4025  0034                     Button_Service@name:	
  4026                           
  4027                           ; 1 bytes @ 0x14
  4028  0034                     	ds	1
  4029  0035                     ??_pad:	
  4030  0035                     Button_Service@button:	
  4031                           ; 1 bytes @ 0x15
  4032                           
  4033  0035                     Sensor_Acq_ExecutePacket@last_b:	
  4034                           ; 1 bytes @ 0x15
  4035                           
  4036                           
  4037                           ; 2 bytes @ 0x15
  4038  0035                     	ds	1
  4039  0036                     ??_MTOUCH_Button_ServiceAll:	
  4040  0036                     pad@i:	
  4041                           ; 1 bytes @ 0x16
  4042                           
  4043                           
  4044                           ; 2 bytes @ 0x16
  4045  0036                     	ds	1
  4046  0037                     Sensor_Acq_ExecutePacket@packet_counter:	
  4047  0037                     MTOUCH_Button_ServiceAll@button:	
  4048                           ; 1 bytes @ 0x17
  4049                           
  4050                           
  4051                           ; 1 bytes @ 0x17
  4052  0037                     	ds	1
  4053  0038                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  4054  0038                     pad@w:	
  4055                           ; 1 bytes @ 0x18
  4056                           
  4057                           
  4058                           ; 2 bytes @ 0x18
  4059  0038                     	ds	1
  4060  0039                     ?_Sensor_Scanfrequency_Evaluation:	
  4061  0039                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  4062                           ; 1 bytes @ 0x19
  4063                           
  4064                           
  4065                           ; 1 bytes @ 0x19
  4066  0039                     	ds	1
  4067  003A                     ??_Sensor_Scanfrequency_Evaluation:	
  4068  003A                     pad@fp:	
  4069                           ; 1 bytes @ 0x1A
  4070                           
  4071                           
  4072                           ; 1 bytes @ 0x1A
  4073  003A                     	ds	1
  4074  003B                     ?_ctoa:	
  4075  003B                     ctoa@c:	
  4076                           ; 2 bytes @ 0x1B
  4077                           
  4078                           
  4079                           ; 1 bytes @ 0x1B
  4080  003B                     	ds	1
  4081  003C                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  4082                           
  4083                           ; 1 bytes @ 0x1C
  4084  003C                     	ds	1
  4085  003D                     ??_ctoa:	
  4086  003D                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  4087                           ; 1 bytes @ 0x1D
  4088                           
  4089                           
  4090                           ; 2 bytes @ 0x1D
  4091  003D                     	ds	1
  4092  003E                     ctoa@w:	
  4093                           
  4094                           ; 2 bytes @ 0x1E
  4095  003E                     	ds	1
  4096  003F                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  4097                           
  4098                           ; 1 bytes @ 0x1F
  4099  003F                     	ds	1
  4100  0040                     Sensor_Scanfrequency_Evaluation@retry:	
  4101  0040                     ctoa@fp:	
  4102                           ; 1 bytes @ 0x20
  4103                           
  4104                           
  4105                           ; 1 bytes @ 0x20
  4106  0040                     	ds	1
  4107  0041                     ?_vfpfcnvrt:	
  4108  0041                     vfpfcnvrt@fmt:	
  4109                           ; 2 bytes @ 0x21
  4110                           
  4111  0041                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  4112                           ; 1 bytes @ 0x21
  4113                           
  4114                           
  4115                           ; 4 bytes @ 0x21
  4116  0041                     	ds	1
  4117  0042                     vfpfcnvrt@ap:	
  4118                           
  4119                           ; 1 bytes @ 0x22
  4120  0042                     	ds	1
  4121  0043                     ??_vfpfcnvrt:	
  4122                           
  4123                           ; 1 bytes @ 0x23
  4124  0043                     	ds	2
  4125  0045                     Sensor_Scanfrequency_Evaluation@i:	
  4126                           
  4127                           ; 1 bytes @ 0x25
  4128  0045                     	ds	1
  4129  0046                     ?_Sensor_Acquisition:	
  4130  0046                     Sensor_Acquisition@sensor_adc2:	
  4131                           ; 1 bytes @ 0x26
  4132                           
  4133                           
  4134                           ; 1 bytes @ 0x26
  4135  0046                     	ds	1
  4136  0047                     ??_Sensor_Acquisition:	
  4137                           
  4138                           ; 1 bytes @ 0x27
  4139  0047                     	ds	1
  4140  0048                     Sensor_Acquisition@retry:	
  4141  0048                     vfpfcnvrt@c:	
  4142                           ; 1 bytes @ 0x28
  4143                           
  4144                           
  4145                           ; 1 bytes @ 0x28
  4146  0048                     	ds	1
  4147  0049                     Sensor_Acquisition@sensor_adc1:	
  4148  0049                     vfpfcnvrt@fp:	
  4149                           ; 1 bytes @ 0x29
  4150                           
  4151                           
  4152                           ; 1 bytes @ 0x29
  4153  0049                     	ds	1
  4154  004A                     ??_Sensor_Service:	
  4155  004A                     ?_vfprintf:	
  4156                           ; 1 bytes @ 0x2A
  4157                           
  4158  004A                     vfprintf@fmt:	
  4159                           ; 2 bytes @ 0x2A
  4160                           
  4161                           
  4162                           ; 2 bytes @ 0x2A
  4163  004A                     	ds	2
  4164  004C                     vfprintf@ap:	
  4165                           
  4166                           ; 1 bytes @ 0x2C
  4167  004C                     	ds	1
  4168  004D                     ??_vfprintf:	
  4169  004D                     Sensor_Service@scanGroup:	
  4170                           ; 1 bytes @ 0x2D
  4171                           
  4172                           
  4173                           ; 1 bytes @ 0x2D
  4174  004D                     	ds	1
  4175  004E                     Sensor_Service@error:	
  4176                           
  4177                           ; 1 bytes @ 0x2E
  4178  004E                     	ds	1
  4179  004F                     Sensor_Service@sensor_adc1:	
  4180  004F                     vfprintf@fp:	
  4181                           ; 1 bytes @ 0x2F
  4182                           
  4183                           
  4184                           ; 1 bytes @ 0x2F
  4185  004F                     	ds	1
  4186  0050                     Sensor_Service@sensor_adc2:	
  4187  0050                     vfprintf@cfmt:	
  4188                           ; 1 bytes @ 0x30
  4189                           
  4190                           
  4191                           ; 2 bytes @ 0x30
  4192  0050                     	ds	1
  4193  0051                     ??_MTOUCH_Sensor_SampleAll:	
  4194                           
  4195                           ; 1 bytes @ 0x31
  4196  0051                     	ds	1
  4197  0052                     ?_printf:	
  4198  0052                     MTOUCH_Sensor_SampleAll@group:	
  4199                           ; 2 bytes @ 0x32
  4200                           
  4201  0052                     printf@fmt:	
  4202                           ; 1 bytes @ 0x32
  4203                           
  4204                           
  4205                           ; 2 bytes @ 0x32
  4206  0052                     	ds	1
  4207  0053                     ??_MTOUCH_Service_Mainloop:	
  4208                           
  4209                           ; 1 bytes @ 0x33
  4210  0053                     	ds	3
  4211  0056                     ??_printf:	
  4212                           
  4213                           ; 1 bytes @ 0x36
  4214  0056                     	ds	3
  4215  0059                     printf@ap:	
  4216                           
  4217                           ; 1 bytes @ 0x39
  4218  0059                     	ds	1
  4219  005A                     ??_update_state:	
  4220  005A                     ??_check_message:	
  4221                           ; 1 bytes @ 0x3A
  4222                           
  4223                           
  4224                           ; 1 bytes @ 0x3A
  4225  005A                     	ds	2
  4226  005C                     check_message@x:	
  4227                           
  4228                           ; 1 bytes @ 0x3C
  4229  005C                     	ds	1
  4230  005D                     ??_main:	
  4231                           
  4232                           ; 1 bytes @ 0x3D
  4233  005D                     	ds	2
  4234                           
  4235                           	psect	maintext
  4236  006C                     __pmaintext:	
  4237 ;;
  4238 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4239 ;;
  4240 ;; *************** function _main *****************
  4241 ;; Defined at:
  4242 ;;		line 20 in file "main.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : B1F/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4256 ;;      Params:         0       0       0       0       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0       0       0       0
  4258 ;;      Temps:          0       2       0       0       0       0       0       0
  4259 ;;      Totals:         0       2       0       0       0       0       0       0
  4260 ;;Total ram usage:        2 bytes
  4261 ;; Hardware stack levels required when called:   14
  4262 ;; This function calls:
  4263 ;;		_ALL_OFF
  4264 ;;		_ALL_ON
  4265 ;;		_DATA_PROCESS
  4266 ;;		_EUSART_Read
  4267 ;;		_EUSART_is_rx_ready
  4268 ;;		_LED_DOWN_ON
  4269 ;;		_LED_OFF
  4270 ;;		_LED_ON
  4271 ;;		_LED_RUN
  4272 ;;		_MTOUCH_Button_Buttonmask_Get
  4273 ;;		_MTOUCH_Button_InitializeAll
  4274 ;;		_MTOUCH_Button_SetNotPressedCallback
  4275 ;;		_MTOUCH_Button_SetPressedCallback
  4276 ;;		_MTOUCH_Button_isPressed
  4277 ;;		_MTOUCH_Service_Mainloop
  4278 ;;		_SYSTEM_Initialize
  4279 ;;		_check_data
  4280 ;;		_check_message
  4281 ;;		_printf
  4282 ;;		_update_state
  4283 ;; This function is called by:
  4284 ;;		Startup code after reset
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _main
  4290  006C                     _main:	
  4291                           
  4292                           ;main.c: 22:     SYSTEM_Initialize();
  4293                           
  4294                           ;incstack = 0
  4295                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4296  006C  3195  2505  3180   	fcall	_SYSTEM_Initialize
  4297                           
  4298                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4299  006F  178B               	bsf	11,7	;volatile
  4300                           
  4301                           ;main.c: 24:     (INTCONbits.PEIE = 1);
  4302  0070  170B               	bsf	11,6	;volatile
  4303                           
  4304                           ;main.c: 25:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  4305  0071  3085               	movlw	low _myButtonPressedCallback
  4306  0072  0020               	movlb	0	; select bank0
  4307  0073  00A0               	movwf	MTOUCH_Button_SetPressedCallback@callback
  4308  0074  3012               	movlw	high _myButtonPressedCallback
  4309  0075  00A1               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  4310  0076  3192  22C4  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  4311                           
  4312                           ;main.c: 26:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  4313  0079  301B               	movlw	low _myButtonReleasedCallback
  4314  007A  0020               	movlb	0	; select bank0
  4315  007B  00A0               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  4316  007C  3014               	movlw	high _myButtonReleasedCallback
  4317  007D  00A1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  4318  007E  3192  22BB  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  4319                           
  4320                           ;main.c: 27:     triac_level.full = 0x00;
  4321  0081  0020               	movlb	0	; select bank0
  4322  0082  01DF               	clrf	_triac_level
  4323  0083  01E0               	clrf	_triac_level+1
  4324                           
  4325                           ;main.c: 28:     last_touch_status.full_status = 0x00;
  4326  0084  0021               	movlb	1	; select bank1
  4327  0085  01C2               	clrf	_last_touch_status^(0+128)
  4328  0086  01C3               	clrf	(_last_touch_status+1)^(0+128)
  4329                           
  4330                           ;main.c: 29:     LED_OFF();
  4331  0087  3192  22A3  3180   	fcall	_LED_OFF
  4332                           
  4333                           ;main.c: 30:     config_status = 0;
  4334  008A  01F4               	clrf	_config_status
  4335  008B                     l7404:	
  4336                           
  4337                           ;main.c: 32:     {;main.c: 33:         if(update_state_flag == 1)
  4338  008B  0021               	movlb	1	; select bank1
  4339  008C  0349               	decf	_update_state_flag^(0+128),w
  4340  008D  1D03               	btfss	3,2
  4341  008E  2893               	goto	l7410
  4342                           
  4343                           ;main.c: 34:         {;main.c: 35:             update_state_flag = 0;
  4344  008F  01C9               	clrf	_update_state_flag^(0+128)
  4345                           
  4346                           ;main.c: 36:             update_state();
  4347  0090  3187  2723  3180   	fcall	_update_state
  4348  0093                     l7410:	
  4349                           
  4350                           ;main.c: 39:         if(EUSART_is_rx_ready())
  4351  0093  3192  225A  3180   	fcall	_EUSART_is_rx_ready
  4352  0096  3A00               	xorlw	0
  4353  0097  1903               	skipnz
  4354  0098  2978               	goto	l7472
  4355                           
  4356                           ;main.c: 40:         {;main.c: 41:             rxData = EUSART_Read();
  4357  0099  3196  2698  3180   	fcall	_EUSART_Read
  4358  009C  0020               	movlb	0	; select bank0
  4359  009D  00DD               	movwf	??_main
  4360  009E  085D               	movf	??_main,w
  4361  009F  00E5               	movwf	_rxData
  4362                           
  4363                           ;main.c: 42:             if(check_data(rxData))
  4364  00A0  0865               	movf	_rxData,w
  4365  00A1  318A  2220  3180   	fcall	_check_data
  4366  00A4  3A00               	xorlw	0
  4367  00A5  1903               	skipnz
  4368  00A6  2978               	goto	l7472
  4369                           
  4370                           ;main.c: 43:             {;main.c: 44:                 if(check_request == 0)
  4371  00A7  0020               	movlb	0	; select bank0
  4372  00A8  0864               	movf	_check_request,w
  4373  00A9  1D03               	btfss	3,2
  4374  00AA  28B6               	goto	l7422
  4375                           
  4376                           ;main.c: 45:                 {;main.c: 46:                     prcData = rxData;
  4377  00AB  0865               	movf	_rxData,w
  4378  00AC  00DD               	movwf	??_main
  4379  00AD  085D               	movf	??_main,w
  4380  00AE  0021               	movlb	1	; select bank1
  4381  00AF  00CC               	movwf	_prcData^(0+128)
  4382                           
  4383                           ;main.c: 47:                     check_message(rxData);
  4384  00B0  0020               	movlb	0	; select bank0
  4385  00B1  0865               	movf	_rxData,w
  4386  00B2  3196  2671  3180   	fcall	_check_message
  4387                           
  4388                           ;main.c: 48:                 }
  4389  00B5  2978               	goto	l7472
  4390  00B6                     l7422:	
  4391                           
  4392                           ;main.c: 50:                 {;main.c: 51:                     if(config_status == 1)
  4393  00B6  0374               	decf	_config_status,w
  4394  00B7  1D03               	btfss	3,2
  4395  00B8  2968               	goto	l7464
  4396                           
  4397                           ;main.c: 52:                     {;main.c: 53:                         if(rxData == 'T')
  4398  00B9  3054               	movlw	84
  4399  00BA  0665               	xorwf	_rxData,w
  4400  00BB  1D03               	btfss	3,2
  4401  00BC  2911               	goto	l7444
  4402                           
  4403                           ;main.c: 54:                         {;main.c: 56:                             ALL_ON();
  4404  00BD  3192  227B  3180   	fcall	_ALL_ON
  4405                           
  4406                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4407  00C0  3015               	movlw	21
  4408  00C1  0020               	movlb	0	; select bank0
  4409  00C2  00DE               	movwf	??_main+1
  4410  00C3  304B               	movlw	75
  4411  00C4  00DD               	movwf	??_main
  4412  00C5  30BE               	movlw	190
  4413  00C6                     u7107:	
  4414  00C6  0B89               	decfsz	9,f
  4415  00C7  28C6               	goto	u7107
  4416  00C8  0BDD               	decfsz	??_main,f
  4417  00C9  28C6               	goto	u7107
  4418  00CA  0BDE               	decfsz	??_main+1,f
  4419  00CB  28C6               	goto	u7107
  4420  00CC  0000               	nop
  4421                           
  4422                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4423  00CD  3015               	movlw	21
  4424  00CE  0020               	movlb	0	; select bank0
  4425  00CF  00DE               	movwf	??_main+1
  4426  00D0  304B               	movlw	75
  4427  00D1  00DD               	movwf	??_main
  4428  00D2  30BE               	movlw	190
  4429  00D3                     u7117:	
  4430  00D3  0B89               	decfsz	9,f
  4431  00D4  28D3               	goto	u7117
  4432  00D5  0BDD               	decfsz	??_main,f
  4433  00D6  28D3               	goto	u7117
  4434  00D7  0BDE               	decfsz	??_main+1,f
  4435  00D8  28D3               	goto	u7117
  4436  00D9  0000               	nop
  4437                           
  4438                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4439  00DA  3015               	movlw	21
  4440  00DB  0020               	movlb	0	; select bank0
  4441  00DC  00DE               	movwf	??_main+1
  4442  00DD  304B               	movlw	75
  4443  00DE  00DD               	movwf	??_main
  4444  00DF  30BE               	movlw	190
  4445  00E0                     u7127:	
  4446  00E0  0B89               	decfsz	9,f
  4447  00E1  28E0               	goto	u7127
  4448  00E2  0BDD               	decfsz	??_main,f
  4449  00E3  28E0               	goto	u7127
  4450  00E4  0BDE               	decfsz	??_main+1,f
  4451  00E5  28E0               	goto	u7127
  4452  00E6  0000               	nop
  4453                           
  4454                           ;main.c: 60:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4455  00E7  3015               	movlw	21
  4456  00E8  0020               	movlb	0	; select bank0
  4457  00E9  00DE               	movwf	??_main+1
  4458  00EA  304B               	movlw	75
  4459  00EB  00DD               	movwf	??_main
  4460  00EC  30BE               	movlw	190
  4461  00ED                     u7137:	
  4462  00ED  0B89               	decfsz	9,f
  4463  00EE  28ED               	goto	u7137
  4464  00EF  0BDD               	decfsz	??_main,f
  4465  00F0  28ED               	goto	u7137
  4466  00F1  0BDE               	decfsz	??_main+1,f
  4467  00F2  28ED               	goto	u7137
  4468  00F3  0000               	nop
  4469                           
  4470                           ;main.c: 61:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4471  00F4  3015               	movlw	21
  4472  00F5  0020               	movlb	0	; select bank0
  4473  00F6  00DE               	movwf	??_main+1
  4474  00F7  304B               	movlw	75
  4475  00F8  00DD               	movwf	??_main
  4476  00F9  30BE               	movlw	190
  4477  00FA                     u7147:	
  4478  00FA  0B89               	decfsz	9,f
  4479  00FB  28FA               	goto	u7147
  4480  00FC  0BDD               	decfsz	??_main,f
  4481  00FD  28FA               	goto	u7147
  4482  00FE  0BDE               	decfsz	??_main+1,f
  4483  00FF  28FA               	goto	u7147
  4484  0100  0000               	nop
  4485                           
  4486                           ;main.c: 62:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4487  0101  3015               	movlw	21
  4488  0102  0020               	movlb	0	; select bank0
  4489  0103  00DE               	movwf	??_main+1
  4490  0104  304B               	movlw	75
  4491  0105  00DD               	movwf	??_main
  4492  0106  30BE               	movlw	190
  4493  0107                     u7157:	
  4494  0107  0B89               	decfsz	9,f
  4495  0108  2907               	goto	u7157
  4496  0109  0BDD               	decfsz	??_main,f
  4497  010A  2907               	goto	u7157
  4498  010B  0BDE               	decfsz	??_main+1,f
  4499  010C  2907               	goto	u7157
  4500  010D  0000               	nop
  4501                           
  4502                           ;main.c: 63:                             config_status = 0;
  4503  010E  01F4               	clrf	_config_status
  4504                           
  4505                           ;main.c: 64:                             check_request = 0;
  4506  010F  0020               	movlb	0	; select bank0
  4507  0110  01E4               	clrf	_check_request
  4508  0111                     l7444:	
  4509                           
  4510                           ;main.c: 66:                         if(rxData == 'F')
  4511  0111  3046               	movlw	70
  4512  0112  0665               	xorwf	_rxData,w
  4513  0113  1D03               	btfss	3,2
  4514  0114  2978               	goto	l7472
  4515                           
  4516                           ;main.c: 67:                         {;main.c: 69:                             ALL_OFF()
      +                          ;
  4517  0115  3192  2257  3180   	fcall	_ALL_OFF
  4518                           
  4519                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4520  0118  3015               	movlw	21
  4521  0119  0020               	movlb	0	; select bank0
  4522  011A  00DE               	movwf	??_main+1
  4523  011B  304B               	movlw	75
  4524  011C  00DD               	movwf	??_main
  4525  011D  30BE               	movlw	190
  4526  011E                     u7167:	
  4527  011E  0B89               	decfsz	9,f
  4528  011F  291E               	goto	u7167
  4529  0120  0BDD               	decfsz	??_main,f
  4530  0121  291E               	goto	u7167
  4531  0122  0BDE               	decfsz	??_main+1,f
  4532  0123  291E               	goto	u7167
  4533  0124  0000               	nop
  4534                           
  4535                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4536  0125  3015               	movlw	21
  4537  0126  0020               	movlb	0	; select bank0
  4538  0127  00DE               	movwf	??_main+1
  4539  0128  304B               	movlw	75
  4540  0129  00DD               	movwf	??_main
  4541  012A  30BE               	movlw	190
  4542  012B                     u7177:	
  4543  012B  0B89               	decfsz	9,f
  4544  012C  292B               	goto	u7177
  4545  012D  0BDD               	decfsz	??_main,f
  4546  012E  292B               	goto	u7177
  4547  012F  0BDE               	decfsz	??_main+1,f
  4548  0130  292B               	goto	u7177
  4549  0131  0000               	nop
  4550                           
  4551                           ;main.c: 72:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4552  0132  3015               	movlw	21
  4553  0133  0020               	movlb	0	; select bank0
  4554  0134  00DE               	movwf	??_main+1
  4555  0135  304B               	movlw	75
  4556  0136  00DD               	movwf	??_main
  4557  0137  30BE               	movlw	190
  4558  0138                     u7187:	
  4559  0138  0B89               	decfsz	9,f
  4560  0139  2938               	goto	u7187
  4561  013A  0BDD               	decfsz	??_main,f
  4562  013B  2938               	goto	u7187
  4563  013C  0BDE               	decfsz	??_main+1,f
  4564  013D  2938               	goto	u7187
  4565  013E  0000               	nop
  4566                           
  4567                           ;main.c: 73:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4568  013F  3015               	movlw	21
  4569  0140  0020               	movlb	0	; select bank0
  4570  0141  00DE               	movwf	??_main+1
  4571  0142  304B               	movlw	75
  4572  0143  00DD               	movwf	??_main
  4573  0144  30BE               	movlw	190
  4574  0145                     u7197:	
  4575  0145  0B89               	decfsz	9,f
  4576  0146  2945               	goto	u7197
  4577  0147  0BDD               	decfsz	??_main,f
  4578  0148  2945               	goto	u7197
  4579  0149  0BDE               	decfsz	??_main+1,f
  4580  014A  2945               	goto	u7197
  4581  014B  0000               	nop
  4582                           
  4583                           ;main.c: 74:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4584  014C  3015               	movlw	21
  4585  014D  0020               	movlb	0	; select bank0
  4586  014E  00DE               	movwf	??_main+1
  4587  014F  304B               	movlw	75
  4588  0150  00DD               	movwf	??_main
  4589  0151  30BE               	movlw	190
  4590  0152                     u7207:	
  4591  0152  0B89               	decfsz	9,f
  4592  0153  2952               	goto	u7207
  4593  0154  0BDD               	decfsz	??_main,f
  4594  0155  2952               	goto	u7207
  4595  0156  0BDE               	decfsz	??_main+1,f
  4596  0157  2952               	goto	u7207
  4597  0158  0000               	nop
  4598                           
  4599                           ;main.c: 75:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4600  0159  3015               	movlw	21
  4601  015A  0020               	movlb	0	; select bank0
  4602  015B  00DE               	movwf	??_main+1
  4603  015C  304B               	movlw	75
  4604  015D  00DD               	movwf	??_main
  4605  015E  30BE               	movlw	190
  4606  015F                     u7217:	
  4607  015F  0B89               	decfsz	9,f
  4608  0160  295F               	goto	u7217
  4609  0161  0BDD               	decfsz	??_main,f
  4610  0162  295F               	goto	u7217
  4611  0163  0BDE               	decfsz	??_main+1,f
  4612  0164  295F               	goto	u7217
  4613  0165  0000               	nop
  4614                           
  4615                           ;main.c: 76:                             config_status = 0;
  4616  0166  01F4               	clrf	_config_status
  4617  0167  2976               	goto	l7462
  4618  0168                     l7464:	
  4619                           
  4620                           ;main.c: 81:                     {;main.c: 82:                         if(rxData == 'T')
  4621  0168  3054               	movlw	84
  4622  0169  0665               	xorwf	_rxData,w
  4623  016A  1D03               	btfss	3,2
  4624  016B  2971               	goto	l7468
  4625                           
  4626                           ;main.c: 83:                         {;main.c: 84:                             DATA_PROC
      +                          ESS(prcData);
  4627  016C  0021               	movlb	1	; select bank1
  4628  016D  084C               	movf	_prcData^(0+128),w
  4629  016E  3185  25A7  3180   	fcall	_DATA_PROCESS
  4630  0171                     l7468:	
  4631                           
  4632                           ;main.c: 86:                         if(rxData == 'F')
  4633  0171  3046               	movlw	70
  4634  0172  0020               	movlb	0	; select bank0
  4635  0173  0665               	xorwf	_rxData,w
  4636  0174  1D03               	btfss	3,2
  4637  0175  2978               	goto	l7472
  4638  0176                     l7462:	
  4639                           
  4640                           ;main.c: 77:                             check_request = 0;
  4641  0176  0020               	movlb	0	; select bank0
  4642  0177  01E4               	clrf	_check_request
  4643  0178                     l7472:	
  4644                           ;main.c: 92:             }
  4645                           
  4646                           
  4647                           ;main.c: 94:         if(MTOUCH_Service_Mainloop())
  4648  0178  3195  25F2  3180   	fcall	_MTOUCH_Service_Mainloop
  4649  017B  3A00               	xorlw	0
  4650  017C  1903               	skipnz
  4651  017D  288B               	goto	l7404
  4652                           
  4653                           ;main.c: 95:         {;main.c: 96:             if(config_status == 0)
  4654  017E  0874               	movf	_config_status,w
  4655  017F  1D03               	btfss	3,2
  4656  0180  29BF               	goto	l7506
  4657                           
  4658                           ;main.c: 97:             {;main.c: 98:                 if(check_request == 1)
  4659  0181  0020               	movlb	0	; select bank0
  4660  0182  0364               	decf	_check_request,w
  4661  0183  1D03               	btfss	3,2
  4662  0184  2993               	goto	l7484
  4663                           
  4664                           ;main.c: 99:                 {;main.c: 100:                     timeout_count++;
  4665  0185  3001               	movlw	1
  4666  0186  0021               	movlb	1	; select bank1
  4667  0187  07BE               	addwf	_timeout_count^(0+128),f
  4668  0188  3000               	movlw	0
  4669  0189  3DBF               	addwfc	(_timeout_count+1)^(0+128),f
  4670                           
  4671                           ;main.c: 101:                     if(timeout_count == 20)
  4672  018A  3014               	movlw	20
  4673  018B  063E               	xorwf	_timeout_count^(0+128),w
  4674  018C  043F               	iorwf	(_timeout_count+1)^(0+128),w
  4675  018D  1D03               	btfss	3,2
  4676  018E  2993               	goto	l7484
  4677                           
  4678                           ;main.c: 102:                     {;main.c: 103:                         timeout_count =
      +                           0;
  4679  018F  01BE               	clrf	_timeout_count^(0+128)
  4680  0190  01BF               	clrf	(_timeout_count+1)^(0+128)
  4681                           
  4682                           ;main.c: 104:                         check_request = 0;
  4683  0191  0020               	movlb	0	; select bank0
  4684  0192  01E4               	clrf	_check_request
  4685  0193                     l7484:	
  4686                           
  4687                           ;main.c: 107:                 if(MTOUCH_Button_isPressed(1) == 1&& last_touch_status.CS1
      +                           == 0)
  4688  0193  3001               	movlw	1
  4689  0194  3195  259D  3180   	fcall	_MTOUCH_Button_isPressed
  4690  0197  3A01               	xorlw	1
  4691  0198  1D03               	skipz
  4692  0199  29BB               	goto	l7504
  4693  019A  0021               	movlb	1	; select bank1
  4694  019B  18C2               	btfsc	_last_touch_status^(0+128),1
  4695  019C  29BB               	goto	l7504
  4696                           
  4697                           ;main.c: 108:                 {;main.c: 109:                     count_conf++;
  4698  019D  3001               	movlw	1
  4699  019E  07C0               	addwf	_count_conf^(0+128),f
  4700  019F  3000               	movlw	0
  4701  01A0  3DC1               	addwfc	(_count_conf+1)^(0+128),f
  4702                           
  4703                           ;main.c: 111:                     if(count_conf == 1000)
  4704  01A1  30E8               	movlw	232
  4705  01A2  0640               	xorwf	_count_conf^(0+128),w
  4706  01A3  3003               	movlw	3
  4707  01A4  1903               	skipnz
  4708  01A5  0641               	xorwf	(_count_conf+1)^(0+128),w
  4709  01A6  1D03               	btfss	3,2
  4710  01A7  29FF               	goto	l7536
  4711                           
  4712                           ;main.c: 112:                     {;main.c: 113:                         count_conf = 0;
  4713  01A8  01C0               	clrf	_count_conf^(0+128)
  4714  01A9  01C1               	clrf	(_count_conf+1)^(0+128)
  4715                           
  4716                           ;main.c: 114:                         printf("PICSMART");
  4717  01AA  3030               	movlw	low (STR_1| (0+32768))
  4718  01AB  0020               	movlb	0	; select bank0
  4719  01AC  00D2               	movwf	printf@fmt
  4720  01AD  3098               	movlw	high (STR_1| (0+32768))
  4721  01AE  00D3               	movwf	printf@fmt+1
  4722  01AF  3193  23F8  3180   	fcall	_printf
  4723                           
  4724                           ;main.c: 115:                         config_status = 1;
  4725  01B2  01F4               	clrf	_config_status
  4726  01B3  0AF4               	incf	_config_status,f
  4727                           
  4728                           ;main.c: 116:                         check_request = 1;
  4729  01B4  0020               	movlb	0	; select bank0
  4730  01B5  01E4               	clrf	_check_request
  4731  01B6  0AE4               	incf	_check_request,f
  4732                           
  4733                           ;main.c: 117:                         timeout_count = 0;
  4734  01B7  0021               	movlb	1	; select bank1
  4735  01B8  01BE               	clrf	_timeout_count^(0+128)
  4736  01B9  01BF               	clrf	(_timeout_count+1)^(0+128)
  4737  01BA  29FE               	goto	L1
  4738  01BB                     l7504:	
  4739                           ;main.c: 119:                         blink = 0;
  4740                           
  4741                           
  4742                           ;main.c: 123:                 {;main.c: 124:                     count_conf = 0;
  4743  01BB  0021               	movlb	1	; select bank1
  4744  01BC  01C0               	clrf	_count_conf^(0+128)
  4745  01BD  01C1               	clrf	(_count_conf+1)^(0+128)
  4746  01BE  29FF               	goto	l7536
  4747  01BF                     l7506:	
  4748                           
  4749                           ;main.c: 128:             {;main.c: 129:                 if(check_request == 1)
  4750  01BF  0020               	movlb	0	; select bank0
  4751  01C0  0364               	decf	_check_request,w
  4752  01C1  1D03               	btfss	3,2
  4753  01C2  29E0               	goto	l7518
  4754                           
  4755                           ;main.c: 130:                 {;main.c: 131:                     timeout_count++;
  4756  01C3  3001               	movlw	1
  4757  01C4  0021               	movlb	1	; select bank1
  4758  01C5  07BE               	addwf	_timeout_count^(0+128),f
  4759  01C6  3000               	movlw	0
  4760  01C7  3DBF               	addwfc	(_timeout_count+1)^(0+128),f
  4761                           
  4762                           ;main.c: 132:                     if(timeout_count > 30000)
  4763  01C8  3075               	movlw	117
  4764  01C9  023F               	subwf	(_timeout_count+1)^(0+128),w
  4765  01CA  3031               	movlw	49
  4766  01CB  1903               	skipnz
  4767  01CC  023E               	subwf	_timeout_count^(0+128),w
  4768  01CD  1C03               	skipc
  4769  01CE  29E0               	goto	l7518
  4770                           
  4771                           ;main.c: 133:                     {;main.c: 136:                         timeout_count++
      +                          ;
  4772  01CF  3001               	movlw	1
  4773  01D0  07BE               	addwf	_timeout_count^(0+128),f
  4774  01D1  3000               	movlw	0
  4775  01D2  3DBF               	addwfc	(_timeout_count+1)^(0+128),f
  4776                           
  4777                           ;main.c: 137:                         if(timeout_count == 32000)
  4778  01D3  307D               	movlw	125
  4779  01D4  063F               	xorwf	(_timeout_count+1)^(0+128),w
  4780  01D5  043E               	iorwf	_timeout_count^(0+128),w
  4781  01D6  1D03               	btfss	3,2
  4782  01D7  29E0               	goto	l7518
  4783                           
  4784                           ;main.c: 138:                         {;main.c: 139:                             timeout
      +                          _count = 0;
  4785  01D8  01BE               	clrf	_timeout_count^(0+128)
  4786  01D9  01BF               	clrf	(_timeout_count+1)^(0+128)
  4787                           
  4788                           ;main.c: 141:                             check_request = 0;
  4789  01DA  0020               	movlb	0	; select bank0
  4790  01DB  01E4               	clrf	_check_request
  4791                           
  4792                           ;main.c: 142:                             config_status = 0;
  4793  01DC  01F4               	clrf	_config_status
  4794                           
  4795                           ;main.c: 143:                             MTOUCH_Button_InitializeAll();
  4796  01DD  3196  260F  3180   	fcall	_MTOUCH_Button_InitializeAll
  4797  01E0                     l7518:	
  4798                           
  4799                           ;main.c: 148:                 blink_count++;
  4800  01E0  3001               	movlw	1
  4801  01E1  0020               	movlb	0	; select bank0
  4802  01E2  00DD               	movwf	??_main
  4803  01E3  085D               	movf	??_main,w
  4804  01E4  0021               	movlb	1	; select bank1
  4805  01E5  07CA               	addwf	_blink_count^(0+128),f
  4806                           
  4807                           ;main.c: 149:                 if(blink == 0)
  4808  01E6  084B               	movf	_blink^(0+128),w
  4809  01E7  1D03               	btfss	3,2
  4810  01E8  29F5               	goto	l7530
  4811                           
  4812                           ;main.c: 150:                 {;main.c: 151:                     ALL_ON();
  4813  01E9  3192  227B  3180   	fcall	_ALL_ON
  4814                           
  4815                           ;main.c: 152:                     if(blink_count == 200)
  4816  01EC  30C8               	movlw	200
  4817  01ED  0021               	movlb	1	; select bank1
  4818  01EE  064A               	xorwf	_blink_count^(0+128),w
  4819  01EF  1D03               	btfss	3,2
  4820  01F0  29FF               	goto	l7536
  4821                           
  4822                           ;main.c: 153:                     {;main.c: 154:                         blink_count = 0
      +                          ;
  4823  01F1  01CA               	clrf	_blink_count^(0+128)
  4824                           
  4825                           ;main.c: 155:                         blink = 1;
  4826  01F2  01CB               	clrf	_blink^(0+128)
  4827  01F3  0ACB               	incf	_blink^(0+128),f
  4828  01F4  29FF               	goto	l7536
  4829  01F5                     l7530:	
  4830                           
  4831                           ;main.c: 159:                 {;main.c: 160:                     ALL_OFF();
  4832  01F5  3192  2257  3180   	fcall	_ALL_OFF
  4833                           
  4834                           ;main.c: 161:                     if(blink_count == 200)
  4835  01F8  30C8               	movlw	200
  4836  01F9  0021               	movlb	1	; select bank1
  4837  01FA  064A               	xorwf	_blink_count^(0+128),w
  4838  01FB  1D03               	btfss	3,2
  4839  01FC  29FF               	goto	l7536
  4840                           
  4841                           ;main.c: 162:                     {;main.c: 163:                         blink_count = 0
      +                          ;
  4842  01FD  01CA               	clrf	_blink_count^(0+128)
  4843  01FE                     L1:	
  4844                           
  4845                           ;main.c: 164:                         blink = 0;
  4846  01FE  01CB               	clrf	_blink^(0+128)
  4847  01FF                     l7536:	
  4848                           
  4849                           ;main.c: 169:             if(counter_ON_OFF == 2)
  4850  01FF  3002               	movlw	2
  4851  0200  0676               	xorwf	_counter_ON_OFF,w
  4852  0201  1D03               	btfss	3,2
  4853  0202  2A2A               	goto	l7564
  4854                           
  4855                           ;main.c: 170:             {;main.c: 171:                 counter_ON_OFF = 0;
  4856  0203  01F6               	clrf	_counter_ON_OFF
  4857                           
  4858                           ;main.c: 172:                 counter_1s = 0;
  4859  0204  0020               	movlb	0	; select bank0
  4860  0205  01E1               	clrf	_counter_1s
  4861  0206  01E2               	clrf	_counter_1s+1
  4862                           
  4863                           ;main.c: 173:                 last_touch_status.full_status ^= 0b00000010;
  4864  0207  3002               	movlw	2
  4865  0208  0021               	movlb	1	; select bank1
  4866  0209  06C2               	xorwf	_last_touch_status^(0+128),f
  4867  020A  3000               	movlw	0
  4868  020B  06C3               	xorwf	(_last_touch_status+1)^(0+128),f
  4869                           
  4870                           ;main.c: 174:                 if(last_touch_status.CS1)
  4871  020C  1CC2               	btfss	_last_touch_status^(0+128),1
  4872  020D  2A1F               	goto	l7556
  4873                           
  4874                           ;main.c: 175:                 {;main.c: 176:                     LED_ON();
  4875  020E  3192  225D  3180   	fcall	_LED_ON
  4876                           
  4877                           ;main.c: 177:                     if(triac_level.last_level == 0)
  4878  0211  0020               	movlb	0	; select bank0
  4879  0212  0E5F               	swapf	_triac_level,w
  4880  0213  390F               	andlw	15
  4881  0214  3A00               	xorlw	0
  4882  0215  1D03               	skipz
  4883  0216  2A1A               	goto	l7550
  4884                           
  4885                           ;main.c: 178:                     {;main.c: 179:                         LED_DOWN_ON();
  4886  0217  3192  2260  3180   	fcall	_LED_DOWN_ON
  4887  021A                     l7550:	
  4888                           
  4889                           ;main.c: 181:                     turn_on = 1;
  4890  021A  0020               	movlb	0	; select bank0
  4891  021B  01E8               	clrf	_turn_on
  4892  021C  0AE8               	incf	_turn_on,f
  4893                           
  4894                           ;main.c: 182:                     turn_off = 0;
  4895  021D  01E9               	clrf	_turn_off
  4896                           
  4897                           ;main.c: 184:                 }
  4898  021E  2A26               	goto	l7554
  4899  021F                     l7556:	
  4900                           
  4901                           ;main.c: 186:                 {;main.c: 187:                     LED_OFF();
  4902  021F  3192  22A3  3180   	fcall	_LED_OFF
  4903                           
  4904                           ;main.c: 188:                     turn_off = 1;
  4905  0222  0020               	movlb	0	; select bank0
  4906  0223  01E9               	clrf	_turn_off
  4907  0224  0AE9               	incf	_turn_off,f
  4908                           
  4909                           ;main.c: 189:                     turn_on = 0;
  4910  0225  01E8               	clrf	_turn_on
  4911  0226                     l7554:	
  4912                           
  4913                           ;main.c: 183:                     counter_led = 3;
  4914  0226  3003               	movlw	3
  4915  0227  00DD               	movwf	??_main
  4916  0228  085D               	movf	??_main,w
  4917  0229  00E3               	movwf	_counter_led
  4918  022A                     l7564:	
  4919                           
  4920                           ;main.c: 193:             if(counter_ON_OFF == 1)
  4921  022A  0376               	decf	_counter_ON_OFF,w
  4922  022B  1D03               	btfss	3,2
  4923  022C  2A3C               	goto	l7570
  4924                           
  4925                           ;main.c: 194:             {;main.c: 195:                 counter_1s++;
  4926  022D  3001               	movlw	1
  4927  022E  0020               	movlb	0	; select bank0
  4928  022F  07E1               	addwf	_counter_1s,f
  4929  0230  3000               	movlw	0
  4930  0231  3DE2               	addwfc	_counter_1s+1,f
  4931                           
  4932                           ;main.c: 196:                 if(counter_1s >= 200)
  4933  0232  3000               	movlw	0
  4934  0233  0262               	subwf	_counter_1s+1,w
  4935  0234  30C8               	movlw	200
  4936  0235  1903               	skipnz
  4937  0236  0261               	subwf	_counter_1s,w
  4938  0237  1C03               	skipc
  4939  0238  2A3C               	goto	l7570
  4940                           
  4941                           ;main.c: 197:                 {;main.c: 198:                     counter_1s = 0;
  4942  0239  01E1               	clrf	_counter_1s
  4943  023A  01E2               	clrf	_counter_1s+1
  4944                           
  4945                           ;main.c: 199:                     counter_ON_OFF = 0;
  4946  023B  01F6               	clrf	_counter_ON_OFF
  4947  023C                     l7570:	
  4948                           
  4949                           ;main.c: 202:             if(last_touch_status.CS1 == 1)
  4950  023C  0021               	movlb	1	; select bank1
  4951  023D  1CC2               	btfss	_last_touch_status^(0+128),1
  4952  023E  2A81               	goto	l7596
  4953                           
  4954                           ;main.c: 203:             {;main.c: 204:                 if(MTOUCH_Button_Buttonmask_Get
      +                          () == 1 && triac_level.full!=0xEE)
  4955  023F  3188  2001  3180   	fcall	_MTOUCH_Button_Buttonmask_Get
  4956  0242  3A01               	xorlw	1
  4957  0243  1D03               	skipz
  4958  0244  2A58               	goto	l7584
  4959  0245  30EE               	movlw	238
  4960  0246  0020               	movlb	0	; select bank0
  4961  0247  065F               	xorwf	_triac_level,w
  4962  0248  0460               	iorwf	_triac_level+1,w
  4963  0249  1903               	btfsc	3,2
  4964  024A  2A58               	goto	l7584
  4965                           
  4966                           ;main.c: 205:                 {;main.c: 206:                     counter_PRESS++;
  4967  024B  3001               	movlw	1
  4968  024C  00DD               	movwf	??_main
  4969  024D  085D               	movf	??_main,w
  4970  024E  07F5               	addwf	_counter_PRESS,f
  4971                           
  4972                           ;main.c: 207:                     if(counter_PRESS == 50)
  4973  024F  3032               	movlw	50
  4974  0250  0675               	xorwf	_counter_PRESS,w
  4975  0251  1D03               	btfss	3,2
  4976  0252  2A81               	goto	l7596
  4977                           
  4978                           ;main.c: 208:                     {;main.c: 209:                             triac_level
      +                          .level++;
  4979  0253  085F               	movf	_triac_level,w
  4980  0254  390F               	andlw	15
  4981  0255  00DD               	movwf	??_main
  4982  0256  0ADD               	incf	??_main,f
  4983  0257  2A6F               	goto	L2
  4984  0258                     l7584:	
  4985                           ;main.c: 210:                             triac_level.last_level = triac_level.level;
  4986                           
  4987  0258  3188  2001  3180   	fcall	_MTOUCH_Button_Buttonmask_Get
  4988  025B  3A04               	xorlw	4
  4989  025C  1D03               	skipz
  4990  025D  2A81               	goto	l7596
  4991  025E  0020               	movlb	0	; select bank0
  4992  025F  085F               	movf	_triac_level,w
  4993  0260  0460               	iorwf	_triac_level+1,w
  4994  0261  1903               	btfsc	3,2
  4995  0262  2A81               	goto	l7596
  4996                           
  4997                           ;main.c: 217:                 {;main.c: 218:                     counter_PRESS++;
  4998  0263  3001               	movlw	1
  4999  0264  00DD               	movwf	??_main
  5000  0265  085D               	movf	??_main,w
  5001  0266  07F5               	addwf	_counter_PRESS,f
  5002                           
  5003                           ;main.c: 219:                     if(counter_PRESS == 50)
  5004  0267  3032               	movlw	50
  5005  0268  0675               	xorwf	_counter_PRESS,w
  5006  0269  1D03               	btfss	3,2
  5007  026A  2A81               	goto	l7596
  5008                           
  5009                           ;main.c: 220:                     {;main.c: 221:                         triac_level.lev
      +                          el--;
  5010  026B  085F               	movf	_triac_level,w
  5011  026C  390F               	andlw	15
  5012  026D  00DD               	movwf	??_main
  5013  026E  03DD               	decf	??_main,f
  5014  026F                     L2:	
  5015  026F  085F               	movf	_triac_level,w
  5016  0270  065D               	xorwf	??_main,w
  5017  0271  39F0               	andlw	-16
  5018  0272  065D               	xorwf	??_main,w
  5019  0273  00DF               	movwf	_triac_level
  5020                           
  5021                           ;main.c: 222:                         triac_level.last_level = triac_level.level;
  5022  0274  085F               	movf	_triac_level,w
  5023  0275  390F               	andlw	15
  5024  0276  00DD               	movwf	??_main
  5025  0277  0EDD               	swapf	??_main,f
  5026  0278  085F               	movf	_triac_level,w
  5027  0279  065D               	xorwf	??_main,w
  5028  027A  390F               	andlw	-241
  5029  027B  065D               	xorwf	??_main,w
  5030  027C  00DF               	movwf	_triac_level
  5031                           
  5032                           ;main.c: 211:                             counter_PRESS = 0;
  5033  027D  01F5               	clrf	_counter_PRESS
  5034                           
  5035                           ;main.c: 212:                             update_state_flag = 1;
  5036  027E  0021               	movlb	1	; select bank1
  5037  027F  01C9               	clrf	_update_state_flag^(0+128)
  5038  0280  0AC9               	incf	_update_state_flag^(0+128),f
  5039  0281                     l7596:	
  5040                           
  5041                           ;main.c: 230:             if(turn_off == 1 && turn_on == 0 && turn_up == 0 && turn_down 
      +                          == 0)
  5042  0281  0020               	movlb	0	; select bank0
  5043  0282  0369               	decf	_turn_off,w
  5044  0283  1D03               	btfss	3,2
  5045  0284  2AEC               	goto	l7640
  5046  0285  0868               	movf	_turn_on,w
  5047  0286  1D03               	btfss	3,2
  5048  0287  2AEC               	goto	l7640
  5049  0288  0867               	movf	_turn_up,w
  5050  0289  1D03               	btfss	3,2
  5051  028A  2AEC               	goto	l7640
  5052  028B  0866               	movf	_turn_down,w
  5053  028C  1D03               	btfss	3,2
  5054  028D  2AEC               	goto	l7640
  5055                           
  5056                           ;main.c: 231:             {;main.c: 232:                 counter_1s++;
  5057  028E  3001               	movlw	1
  5058  028F  07E1               	addwf	_counter_1s,f
  5059  0290  3000               	movlw	0
  5060  0291  3DE2               	addwfc	_counter_1s+1,f
  5061                           
  5062                           ;main.c: 233:                 if(counter_1s >= 30)
  5063  0292  3000               	movlw	0
  5064  0293  0262               	subwf	_counter_1s+1,w
  5065  0294  301E               	movlw	30
  5066  0295  1903               	skipnz
  5067  0296  0261               	subwf	_counter_1s,w
  5068  0297  1C03               	skipc
  5069  0298  2AE0               	goto	l7634
  5070                           
  5071                           ;main.c: 234:                 {;main.c: 235:                     counter_1s = 0;
  5072  0299  01E1               	clrf	_counter_1s
  5073  029A  01E2               	clrf	_counter_1s+1
  5074                           
  5075                           ;main.c: 236:                     triac_level.level--;
  5076  029B  085F               	movf	_triac_level,w
  5077  029C  390F               	andlw	15
  5078  029D  00DD               	movwf	??_main
  5079  029E  03DD               	decf	??_main,f
  5080  029F  085F               	movf	_triac_level,w
  5081  02A0  065D               	xorwf	??_main,w
  5082  02A1  39F0               	andlw	-16
  5083  02A2  065D               	xorwf	??_main,w
  5084  02A3  00DF               	movwf	_triac_level
  5085                           
  5086                           ;main.c: 237:                     if(counter_led < 0 || counter_led>=3)
  5087  02A4  3003               	movlw	3
  5088  02A5  0263               	subwf	_counter_led,w
  5089  02A6  1C03               	skipc
  5090  02A7  2AAC               	goto	l7614
  5091                           
  5092                           ;main.c: 238:                     {;main.c: 239:                         counter_led = 3
      +                          ;
  5093  02A8  3003               	movlw	3
  5094  02A9  00DD               	movwf	??_main
  5095  02AA  085D               	movf	??_main,w
  5096  02AB  00E3               	movwf	_counter_led
  5097  02AC                     l7614:	
  5098                           
  5099                           ;main.c: 241:                     if( counter_led == 3)
  5100  02AC  3003               	movlw	3
  5101  02AD  0663               	xorwf	_counter_led,w
  5102  02AE  1D03               	btfss	3,2
  5103  02AF  2AB8               	goto	l7618
  5104                           
  5105                           ;main.c: 242:                     {;main.c: 243:                         LED_RUN(1,1,1);
  5106  02B0  01A0               	clrf	LED_RUN@LED_2
  5107  02B1  0AA0               	incf	LED_RUN@LED_2,f
  5108  02B2  01A1               	clrf	LED_RUN@LED_3
  5109  02B3  0AA1               	incf	LED_RUN@LED_3,f
  5110  02B4  3001               	movlw	1
  5111  02B5  3196  262C  3180   	fcall	_LED_RUN
  5112  02B8                     l7618:	
  5113                           
  5114                           ;main.c: 245:                     if(counter_led == 2)
  5115  02B8  3002               	movlw	2
  5116  02B9  0020               	movlb	0	; select bank0
  5117  02BA  0663               	xorwf	_counter_led,w
  5118  02BB  1D03               	btfss	3,2
  5119  02BC  2AC5               	goto	l7622
  5120                           
  5121                           ;main.c: 246:                     {;main.c: 247:                         LED_RUN(0,1,1);
  5122  02BD  01A0               	clrf	LED_RUN@LED_2
  5123  02BE  0AA0               	incf	LED_RUN@LED_2,f
  5124  02BF  01A1               	clrf	LED_RUN@LED_3
  5125  02C0  0AA1               	incf	LED_RUN@LED_3,f
  5126  02C1  3000               	movlw	0
  5127  02C2  3196  262C  3180   	fcall	_LED_RUN
  5128  02C5                     l7622:	
  5129                           
  5130                           ;main.c: 249:                     if(counter_led == 1)
  5131  02C5  0020               	movlb	0	; select bank0
  5132  02C6  0363               	decf	_counter_led,w
  5133  02C7  1D03               	btfss	3,2
  5134  02C8  2AD0               	goto	l7626
  5135                           
  5136                           ;main.c: 250:                     {;main.c: 251:                         LED_RUN(0,0,1);
  5137  02C9  01A0               	clrf	LED_RUN@LED_2
  5138  02CA  01A1               	clrf	LED_RUN@LED_3
  5139  02CB  0AA1               	incf	LED_RUN@LED_3,f
  5140  02CC  3000               	movlw	0
  5141  02CD  3196  262C  3180   	fcall	_LED_RUN
  5142  02D0                     l7626:	
  5143                           
  5144                           ;main.c: 253:                     if(counter_led == 0)
  5145  02D0  0020               	movlb	0	; select bank0
  5146  02D1  0863               	movf	_counter_led,w
  5147  02D2  1D03               	btfss	3,2
  5148  02D3  2ADA               	goto	l7630
  5149                           
  5150                           ;main.c: 254:                     {;main.c: 255:                         LED_RUN(0,0,0);
  5151  02D4  01A0               	clrf	LED_RUN@LED_2
  5152  02D5  01A1               	clrf	LED_RUN@LED_3
  5153  02D6  3000               	movlw	0
  5154  02D7  3196  262C  3180   	fcall	_LED_RUN
  5155  02DA                     l7630:	
  5156                           
  5157                           ;main.c: 257:                     update_state_flag = 1;
  5158  02DA  0021               	movlb	1	; select bank1
  5159  02DB  01C9               	clrf	_update_state_flag^(0+128)
  5160  02DC  0AC9               	incf	_update_state_flag^(0+128),f
  5161                           
  5162                           ;main.c: 258:                     counter_led--;
  5163  02DD  3001               	movlw	1
  5164  02DE  0020               	movlb	0	; select bank0
  5165  02DF  02E3               	subwf	_counter_led,f
  5166  02E0                     l7634:	
  5167                           
  5168                           ;main.c: 261:                 if(triac_level.level == 0)
  5169  02E0  085F               	movf	_triac_level,w
  5170  02E1  390F               	andlw	15
  5171  02E2  3A00               	xorlw	0
  5172  02E3  1D03               	skipz
  5173  02E4  2AEC               	goto	l7640
  5174                           
  5175                           ;main.c: 262:                 {;main.c: 263:                     turn_off = 0;
  5176  02E5  01E9               	clrf	_turn_off
  5177                           
  5178                           ;main.c: 264:                     LED_RUN(0,0,0);
  5179  02E6  01A0               	clrf	LED_RUN@LED_2
  5180  02E7  01A1               	clrf	LED_RUN@LED_3
  5181  02E8  3000               	movlw	0
  5182  02E9  3196  262C  3180   	fcall	_LED_RUN
  5183  02EC                     l7640:	
  5184                           
  5185                           ;main.c: 268:             if(turn_on == 1 &&turn_off == 0 && turn_up == 0 && turn_down =
      +                          = 0)
  5186  02EC  0020               	movlb	0	; select bank0
  5187  02ED  0368               	decf	_turn_on,w
  5188  02EE  1D03               	btfss	3,2
  5189  02EF  2B59               	goto	l7684
  5190  02F0  0869               	movf	_turn_off,w
  5191  02F1  1D03               	btfss	3,2
  5192  02F2  2B59               	goto	l7684
  5193  02F3  0867               	movf	_turn_up,w
  5194  02F4  1D03               	btfss	3,2
  5195  02F5  2B59               	goto	l7684
  5196  02F6  0866               	movf	_turn_down,w
  5197  02F7  1D03               	btfss	3,2
  5198  02F8  2B59               	goto	l7684
  5199                           
  5200                           ;main.c: 269:             {;main.c: 270:                 counter_1s++;
  5201  02F9  3001               	movlw	1
  5202  02FA  07E1               	addwf	_counter_1s,f
  5203  02FB  3000               	movlw	0
  5204  02FC  3DE2               	addwfc	_counter_1s+1,f
  5205                           
  5206                           ;main.c: 271:                 if(counter_1s >= 30)
  5207  02FD  3000               	movlw	0
  5208  02FE  0262               	subwf	_counter_1s+1,w
  5209  02FF  301E               	movlw	30
  5210  0300  1903               	skipnz
  5211  0301  0261               	subwf	_counter_1s,w
  5212  0302  1C03               	skipc
  5213  0303  2B49               	goto	l7678
  5214                           
  5215                           ;main.c: 272:                 {;main.c: 273:                     counter_1s = 0;
  5216  0304  01E1               	clrf	_counter_1s
  5217  0305  01E2               	clrf	_counter_1s+1
  5218                           
  5219                           ;main.c: 274:                     triac_level.level++;
  5220  0306  085F               	movf	_triac_level,w
  5221  0307  390F               	andlw	15
  5222  0308  00DD               	movwf	??_main
  5223  0309  0ADD               	incf	??_main,f
  5224  030A  085F               	movf	_triac_level,w
  5225  030B  065D               	xorwf	??_main,w
  5226  030C  39F0               	andlw	-16
  5227  030D  065D               	xorwf	??_main,w
  5228  030E  00DF               	movwf	_triac_level
  5229                           
  5230                           ;main.c: 275:                     if(counter_led < 0 || counter_led>=4)
  5231  030F  3004               	movlw	4
  5232  0310  0263               	subwf	_counter_led,w
  5233  0311  1803               	btfsc	3,0
  5234                           
  5235                           ;main.c: 276:                     {;main.c: 277:                         counter_led = 0
      +                          ;
  5236  0312  01E3               	clrf	_counter_led
  5237                           
  5238                           ;main.c: 279:                     if( counter_led == 3)
  5239  0313  3003               	movlw	3
  5240  0314  0663               	xorwf	_counter_led,w
  5241  0315  1D03               	btfss	3,2
  5242  0316  2B1F               	goto	l7662
  5243                           
  5244                           ;main.c: 280:                     {;main.c: 281:                         LED_RUN(1,1,1);
  5245  0317  01A0               	clrf	LED_RUN@LED_2
  5246  0318  0AA0               	incf	LED_RUN@LED_2,f
  5247  0319  01A1               	clrf	LED_RUN@LED_3
  5248  031A  0AA1               	incf	LED_RUN@LED_3,f
  5249  031B  3001               	movlw	1
  5250  031C  3196  262C  3180   	fcall	_LED_RUN
  5251  031F                     l7662:	
  5252                           
  5253                           ;main.c: 283:                     if(counter_led == 2)
  5254  031F  3002               	movlw	2
  5255  0320  0020               	movlb	0	; select bank0
  5256  0321  0663               	xorwf	_counter_led,w
  5257  0322  1D03               	btfss	3,2
  5258  0323  2B2C               	goto	l7666
  5259                           
  5260                           ;main.c: 284:                     {;main.c: 285:                         LED_RUN(0,1,1);
  5261  0324  01A0               	clrf	LED_RUN@LED_2
  5262  0325  0AA0               	incf	LED_RUN@LED_2,f
  5263  0326  01A1               	clrf	LED_RUN@LED_3
  5264  0327  0AA1               	incf	LED_RUN@LED_3,f
  5265  0328  3000               	movlw	0
  5266  0329  3196  262C  3180   	fcall	_LED_RUN
  5267  032C                     l7666:	
  5268                           
  5269                           ;main.c: 287:                     if(counter_led == 1)
  5270  032C  0020               	movlb	0	; select bank0
  5271  032D  0363               	decf	_counter_led,w
  5272  032E  1D03               	btfss	3,2
  5273  032F  2B37               	goto	l7670
  5274                           
  5275                           ;main.c: 288:                     {;main.c: 289:                         LED_RUN(0,0,1);
  5276  0330  01A0               	clrf	LED_RUN@LED_2
  5277  0331  01A1               	clrf	LED_RUN@LED_3
  5278  0332  0AA1               	incf	LED_RUN@LED_3,f
  5279  0333  3000               	movlw	0
  5280  0334  3196  262C  3180   	fcall	_LED_RUN
  5281  0337                     l7670:	
  5282                           
  5283                           ;main.c: 291:                     if(counter_led == 0)
  5284  0337  0020               	movlb	0	; select bank0
  5285  0338  0863               	movf	_counter_led,w
  5286  0339  1D03               	btfss	3,2
  5287  033A  2B41               	goto	l7674
  5288                           
  5289                           ;main.c: 292:                     {;main.c: 293:                         LED_RUN(0,0,0);
  5290  033B  01A0               	clrf	LED_RUN@LED_2
  5291  033C  01A1               	clrf	LED_RUN@LED_3
  5292  033D  3000               	movlw	0
  5293  033E  3196  262C  3180   	fcall	_LED_RUN
  5294  0341                     l7674:	
  5295                           
  5296                           ;main.c: 295:                     update_state_flag = 1;
  5297  0341  0021               	movlb	1	; select bank1
  5298  0342  01C9               	clrf	_update_state_flag^(0+128)
  5299  0343  0AC9               	incf	_update_state_flag^(0+128),f
  5300                           
  5301                           ;main.c: 296:                     counter_led++;
  5302  0344  3001               	movlw	1
  5303  0345  0020               	movlb	0	; select bank0
  5304  0346  00DD               	movwf	??_main
  5305  0347  085D               	movf	??_main,w
  5306  0348  07E3               	addwf	_counter_led,f
  5307  0349                     l7678:	
  5308                           
  5309                           ;main.c: 298:                 if(triac_level.level == triac_level.last_level)
  5310  0349  0E5F               	swapf	_triac_level,w
  5311  034A  390F               	andlw	15
  5312  034B  00DD               	movwf	??_main
  5313  034C  085F               	movf	_triac_level,w
  5314  034D  390F               	andlw	15
  5315  034E  065D               	xorwf	??_main,w
  5316  034F  1D03               	skipz
  5317  0350  2B59               	goto	l7684
  5318                           
  5319                           ;main.c: 299:                 {;main.c: 300:                     turn_on = 0;
  5320  0351  01E8               	clrf	_turn_on
  5321                           
  5322                           ;main.c: 301:                     LED_RUN(0,1,0);
  5323  0352  01A0               	clrf	LED_RUN@LED_2
  5324  0353  0AA0               	incf	LED_RUN@LED_2,f
  5325  0354  01A1               	clrf	LED_RUN@LED_3
  5326  0355  3000               	movlw	0
  5327  0356  3196  262C  3180   	fcall	_LED_RUN
  5328  0359                     l7684:	
  5329                           
  5330                           ;main.c: 304:             if(turn_off == 0 && turn_on == 0 && turn_up == 1 && turn_down 
      +                          == 0)
  5331  0359  0020               	movlb	0	; select bank0
  5332  035A  0869               	movf	_turn_off,w
  5333  035B  1D03               	btfss	3,2
  5334  035C  2B99               	goto	l7706
  5335  035D  0868               	movf	_turn_on,w
  5336  035E  1D03               	btfss	3,2
  5337  035F  2B99               	goto	l7706
  5338  0360  0367               	decf	_turn_up,w
  5339  0361  1D03               	btfss	3,2
  5340  0362  2B99               	goto	l7706
  5341  0363  0866               	movf	_turn_down,w
  5342  0364  1D03               	btfss	3,2
  5343  0365  2B99               	goto	l7706
  5344                           
  5345                           ;main.c: 305:             {;main.c: 306:                 counter_1s++;
  5346  0366  3001               	movlw	1
  5347  0367  07E1               	addwf	_counter_1s,f
  5348  0368  3000               	movlw	0
  5349  0369  3DE2               	addwfc	_counter_1s+1,f
  5350                           
  5351                           ;main.c: 307:                 if(counter_1s >= 30)
  5352  036A  3000               	movlw	0
  5353  036B  0262               	subwf	_counter_1s+1,w
  5354  036C  301E               	movlw	30
  5355  036D  1903               	skipnz
  5356  036E  0261               	subwf	_counter_1s,w
  5357  036F  1C03               	skipc
  5358  0370  2B85               	goto	l7700
  5359                           
  5360                           ;main.c: 308:                 {;main.c: 309:                     counter_1s = 0;
  5361  0371  01E1               	clrf	_counter_1s
  5362  0372  01E2               	clrf	_counter_1s+1
  5363                           
  5364                           ;main.c: 310:                     triac_level.level++;
  5365  0373  085F               	movf	_triac_level,w
  5366  0374  390F               	andlw	15
  5367  0375  00DD               	movwf	??_main
  5368  0376  0ADD               	incf	??_main,f
  5369  0377  085F               	movf	_triac_level,w
  5370  0378  065D               	xorwf	??_main,w
  5371  0379  39F0               	andlw	-16
  5372  037A  065D               	xorwf	??_main,w
  5373  037B  00DF               	movwf	_triac_level
  5374                           
  5375                           ;main.c: 311:                     triac_level.last_level = triac_level.level;
  5376  037C  085F               	movf	_triac_level,w
  5377  037D  390F               	andlw	15
  5378  037E  00DD               	movwf	??_main
  5379  037F  0EDD               	swapf	??_main,f
  5380  0380  085F               	movf	_triac_level,w
  5381  0381  065D               	xorwf	??_main,w
  5382  0382  390F               	andlw	-241
  5383  0383  065D               	xorwf	??_main,w
  5384  0384  00DF               	movwf	_triac_level
  5385  0385                     l7700:	
  5386                           
  5387                           ;main.c: 313:                 if(triac_level.level == rc_level.level)
  5388  0385  0021               	movlb	1	; select bank1
  5389  0386  083A               	movf	_rc_level^(0+128),w
  5390  0387  390F               	andlw	15
  5391  0388  0020               	movlb	0	; select bank0
  5392  0389  00DD               	movwf	??_main
  5393  038A  085F               	movf	_triac_level,w
  5394  038B  390F               	andlw	15
  5395  038C  065D               	xorwf	??_main,w
  5396  038D  1D03               	skipz
  5397  038E  2B99               	goto	l7706
  5398                           
  5399                           ;main.c: 314:                 {;main.c: 315:                     triac_level.last_level 
      +                          = triac_level.level;
  5400  038F  085F               	movf	_triac_level,w
  5401  0390  390F               	andlw	15
  5402  0391  00DD               	movwf	??_main
  5403  0392  0EDD               	swapf	??_main,f
  5404  0393  085F               	movf	_triac_level,w
  5405  0394  065D               	xorwf	??_main,w
  5406  0395  390F               	andlw	-241
  5407  0396  065D               	xorwf	??_main,w
  5408  0397  00DF               	movwf	_triac_level
  5409                           
  5410                           ;main.c: 316:                     turn_up = 0;
  5411  0398  01E7               	clrf	_turn_up
  5412  0399                     l7706:	
  5413                           
  5414                           ;main.c: 319:             if(turn_off == 0 && turn_on == 0 && turn_up == 0 && turn_down 
      +                          == 1)
  5415  0399  0869               	movf	_turn_off,w
  5416  039A  1D03               	btfss	3,2
  5417  039B  288B               	goto	l7404
  5418  039C  0868               	movf	_turn_on,w
  5419  039D  1D03               	btfss	3,2
  5420  039E  288B               	goto	l7404
  5421  039F  0867               	movf	_turn_up,w
  5422  03A0  1D03               	btfss	3,2
  5423  03A1  288B               	goto	l7404
  5424  03A2  0366               	decf	_turn_down,w
  5425  03A3  1D03               	btfss	3,2
  5426  03A4  288B               	goto	l7404
  5427                           
  5428                           ;main.c: 320:             {;main.c: 321:                 counter_1s++;
  5429  03A5  3001               	movlw	1
  5430  03A6  07E1               	addwf	_counter_1s,f
  5431  03A7  3000               	movlw	0
  5432  03A8  3DE2               	addwfc	_counter_1s+1,f
  5433                           
  5434                           ;main.c: 322:                 if(counter_1s >= 30)
  5435  03A9  3000               	movlw	0
  5436  03AA  0262               	subwf	_counter_1s+1,w
  5437  03AB  301E               	movlw	30
  5438  03AC  1903               	skipnz
  5439  03AD  0261               	subwf	_counter_1s,w
  5440  03AE  1C03               	skipc
  5441  03AF  2BC4               	goto	l7722
  5442                           
  5443                           ;main.c: 323:                 {;main.c: 324:                     counter_1s = 0;
  5444  03B0  01E1               	clrf	_counter_1s
  5445  03B1  01E2               	clrf	_counter_1s+1
  5446                           
  5447                           ;main.c: 325:                     triac_level.level--;
  5448  03B2  085F               	movf	_triac_level,w
  5449  03B3  390F               	andlw	15
  5450  03B4  00DD               	movwf	??_main
  5451  03B5  03DD               	decf	??_main,f
  5452  03B6  085F               	movf	_triac_level,w
  5453  03B7  065D               	xorwf	??_main,w
  5454  03B8  39F0               	andlw	-16
  5455  03B9  065D               	xorwf	??_main,w
  5456  03BA  00DF               	movwf	_triac_level
  5457                           
  5458                           ;main.c: 326:                     triac_level.last_level = triac_level.level;
  5459  03BB  085F               	movf	_triac_level,w
  5460  03BC  390F               	andlw	15
  5461  03BD  00DD               	movwf	??_main
  5462  03BE  0EDD               	swapf	??_main,f
  5463  03BF  085F               	movf	_triac_level,w
  5464  03C0  065D               	xorwf	??_main,w
  5465  03C1  390F               	andlw	-241
  5466  03C2  065D               	xorwf	??_main,w
  5467  03C3  00DF               	movwf	_triac_level
  5468  03C4                     l7722:	
  5469                           
  5470                           ;main.c: 328:                 if(triac_level.level == rc_level.level)
  5471  03C4  0021               	movlb	1	; select bank1
  5472  03C5  083A               	movf	_rc_level^(0+128),w
  5473  03C6  390F               	andlw	15
  5474  03C7  0020               	movlb	0	; select bank0
  5475  03C8  00DD               	movwf	??_main
  5476  03C9  085F               	movf	_triac_level,w
  5477  03CA  390F               	andlw	15
  5478  03CB  065D               	xorwf	??_main,w
  5479  03CC  1D03               	skipz
  5480  03CD  288B               	goto	l7404
  5481                           
  5482                           ;main.c: 329:                 {;main.c: 330:                     triac_level.last_level 
      +                          = triac_level.level;
  5483  03CE  085F               	movf	_triac_level,w
  5484  03CF  390F               	andlw	15
  5485  03D0  00DD               	movwf	??_main
  5486  03D1  0EDD               	swapf	??_main,f
  5487  03D2  085F               	movf	_triac_level,w
  5488  03D3  065D               	xorwf	??_main,w
  5489  03D4  390F               	andlw	-241
  5490  03D5  065D               	xorwf	??_main,w
  5491  03D6  00DF               	movwf	_triac_level
  5492                           
  5493                           ;main.c: 331:                     turn_down = 0;
  5494  03D7  01E6               	clrf	_turn_down
  5495                           
  5496                           ;main.c: 334:         }
  5497  03D8  288B               	goto	l7404
  5498  03D9                     __end_of_main:	
  5499                           
  5500                           	psect	text1
  5501  0723                     __ptext1:	
  5502 ;; *************** function _update_state *****************
  5503 ;; Defined at:
  5504 ;;		line 388 in file "main.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5518 ;;      Params:         0       0       0       0       0       0       0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0
  5520 ;;      Temps:          0       2       0       0       0       0       0       0
  5521 ;;      Totals:         0       2       0       0       0       0       0       0
  5522 ;;Total ram usage:        2 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:   13
  5525 ;; This function calls:
  5526 ;;		_printf
  5527 ;; This function is called by:
  5528 ;;		_main
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _update_state
  5534  0723                     _update_state:	
  5535                           
  5536                           ;main.c: 390:     switch(triac_level.level)
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5540  0723  2F94               	goto	l7354
  5541  0724                     l7320:	
  5542  0724  303E               	movlw	low (STR_2| (0+32768))
  5543  0725  00D2               	movwf	printf@fmt
  5544  0726  3098               	movlw	high (STR_2| (0+32768))
  5545  0727  00D3               	movwf	printf@fmt+1
  5546  0728  3193  23F8         	fcall	_printf
  5547  072A  0008               	return
  5548  072B                     l7322:	
  5549  072B  3043               	movlw	low (STR_3| (0+32768))
  5550  072C  00D2               	movwf	printf@fmt
  5551  072D  3098               	movlw	high (STR_3| (0+32768))
  5552  072E  00D3               	movwf	printf@fmt+1
  5553  072F  3193  23F8         	fcall	_printf
  5554  0731  0008               	return
  5555  0732                     l7324:	
  5556  0732  3048               	movlw	low (STR_4| (0+32768))
  5557  0733  00D2               	movwf	printf@fmt
  5558  0734  3098               	movlw	high (STR_4| (0+32768))
  5559  0735  00D3               	movwf	printf@fmt+1
  5560  0736  3193  23F8         	fcall	_printf
  5561  0738  0008               	return
  5562  0739                     l7326:	
  5563  0739  304D               	movlw	low (STR_5| (0+32768))
  5564  073A  00D2               	movwf	printf@fmt
  5565  073B  3098               	movlw	high (STR_5| (0+32768))
  5566  073C  00D3               	movwf	printf@fmt+1
  5567  073D  3193  23F8         	fcall	_printf
  5568  073F  0008               	return
  5569  0740                     l7328:	
  5570  0740  3052               	movlw	low (STR_6| (0+32768))
  5571  0741  00D2               	movwf	printf@fmt
  5572  0742  3098               	movlw	high (STR_6| (0+32768))
  5573  0743  00D3               	movwf	printf@fmt+1
  5574  0744  3193  23F8         	fcall	_printf
  5575  0746  0008               	return
  5576  0747                     l7330:	
  5577  0747  3057               	movlw	low (STR_7| (0+32768))
  5578  0748  00D2               	movwf	printf@fmt
  5579  0749  3098               	movlw	high (STR_7| (0+32768))
  5580  074A  00D3               	movwf	printf@fmt+1
  5581  074B  3193  23F8         	fcall	_printf
  5582  074D  0008               	return
  5583  074E                     l7332:	
  5584  074E  305C               	movlw	low (STR_8| (0+32768))
  5585  074F  00D2               	movwf	printf@fmt
  5586  0750  3098               	movlw	high (STR_8| (0+32768))
  5587  0751  00D3               	movwf	printf@fmt+1
  5588  0752  3193  23F8         	fcall	_printf
  5589  0754  0008               	return
  5590  0755                     l7334:	
  5591  0755  3061               	movlw	low (STR_9| (0+32768))
  5592  0756  00D2               	movwf	printf@fmt
  5593  0757  3098               	movlw	high (STR_9| (0+32768))
  5594  0758  00D3               	movwf	printf@fmt+1
  5595  0759  3193  23F8         	fcall	_printf
  5596  075B  0008               	return
  5597  075C                     l7336:	
  5598  075C  3066               	movlw	low (STR_10| (0+32768))
  5599  075D  00D2               	movwf	printf@fmt
  5600  075E  3098               	movlw	high (STR_10| (0+32768))
  5601  075F  00D3               	movwf	printf@fmt+1
  5602  0760  3193  23F8         	fcall	_printf
  5603  0762  0008               	return
  5604  0763                     l7338:	
  5605  0763  306B               	movlw	low (STR_11| (0+32768))
  5606  0764  00D2               	movwf	printf@fmt
  5607  0765  3098               	movlw	high (STR_11| (0+32768))
  5608  0766  00D3               	movwf	printf@fmt+1
  5609  0767  3193  23F8         	fcall	_printf
  5610  0769  0008               	return
  5611  076A                     l7340:	
  5612  076A  3070               	movlw	low (STR_12| (0+32768))
  5613  076B  00D2               	movwf	printf@fmt
  5614  076C  3098               	movlw	high (STR_12| (0+32768))
  5615  076D  00D3               	movwf	printf@fmt+1
  5616  076E  3193  23F8         	fcall	_printf
  5617  0770  0008               	return
  5618  0771                     l7342:	
  5619  0771  3075               	movlw	low (STR_13| (0+32768))
  5620  0772  00D2               	movwf	printf@fmt
  5621  0773  3098               	movlw	high (STR_13| (0+32768))
  5622  0774  00D3               	movwf	printf@fmt+1
  5623  0775  3193  23F8         	fcall	_printf
  5624  0777  0008               	return
  5625  0778                     l7344:	
  5626  0778  307A               	movlw	low (STR_14| (0+32768))
  5627  0779  00D2               	movwf	printf@fmt
  5628  077A  3098               	movlw	high (STR_14| (0+32768))
  5629  077B  00D3               	movwf	printf@fmt+1
  5630  077C  3193  23F8         	fcall	_printf
  5631  077E  0008               	return
  5632  077F                     l7346:	
  5633  077F  307F               	movlw	low (STR_15| (0+32768))
  5634  0780  00D2               	movwf	printf@fmt
  5635  0781  3098               	movlw	high (STR_15| (0+32768))
  5636  0782  00D3               	movwf	printf@fmt+1
  5637  0783  3193  23F8         	fcall	_printf
  5638  0785  0008               	return
  5639  0786                     l7348:	
  5640  0786  3084               	movlw	low (STR_16| (0+32768))
  5641  0787  00D2               	movwf	printf@fmt
  5642  0788  3098               	movlw	high (STR_16| (0+32768))
  5643  0789  00D3               	movwf	printf@fmt+1
  5644  078A  3193  23F8         	fcall	_printf
  5645  078C  0008               	return
  5646  078D                     l7350:	
  5647  078D  3089               	movlw	low (STR_17| (0+32768))
  5648  078E  00D2               	movwf	printf@fmt
  5649  078F  3098               	movlw	high (STR_17| (0+32768))
  5650  0790  00D3               	movwf	printf@fmt+1
  5651  0791  3193  23F8         	fcall	_printf
  5652  0793  0008               	return
  5653  0794                     l7354:	
  5654  0794  0020               	movlb	0	; select bank0
  5655  0795  085F               	movf	_triac_level,w
  5656  0796  390F               	andlw	15
  5657  0797  00DA               	movwf	??_update_state
  5658  0798  01DB               	clrf	??_update_state+1
  5659                           
  5660                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5661                           ; Switch size 1, requested type "simple"
  5662                           ; Number of cases is 1, Range of values is 0 to 0
  5663                           ; switch strategies available:
  5664                           ; Name         Instructions Cycles
  5665                           ; simple_byte            4     3 (average)
  5666                           ; direct_byte            8     6 (fixed)
  5667                           ; jumptable            260     6 (fixed)
  5668                           ;	Chosen strategy is simple_byte
  5669  0799  085B               	movf	??_update_state+1,w
  5670  079A  3A00               	xorlw	0	; case 0
  5671  079B  1903               	skipnz
  5672  079C  2F9E               	goto	l7878
  5673  079D  2FD0               	goto	l1286
  5674  079E                     l7878:	
  5675                           
  5676                           ; Switch size 1, requested type "simple"
  5677                           ; Number of cases is 16, Range of values is 0 to 15
  5678                           ; switch strategies available:
  5679                           ; Name         Instructions Cycles
  5680                           ; direct_byte           38     6 (fixed)
  5681                           ; simple_byte           49    25 (average)
  5682                           ; jumptable            260     6 (fixed)
  5683                           ;	Chosen strategy is simple_byte
  5684  079E  085A               	movf	??_update_state,w
  5685  079F  3A00               	xorlw	0	; case 0
  5686  07A0  1903               	skipnz
  5687  07A1  2F24               	goto	l7320
  5688  07A2  3A01               	xorlw	1	; case 1
  5689  07A3  1903               	skipnz
  5690  07A4  2F2B               	goto	l7322
  5691  07A5  3A03               	xorlw	3	; case 2
  5692  07A6  1903               	skipnz
  5693  07A7  2F32               	goto	l7324
  5694  07A8  3A01               	xorlw	1	; case 3
  5695  07A9  1903               	skipnz
  5696  07AA  2F39               	goto	l7326
  5697  07AB  3A07               	xorlw	7	; case 4
  5698  07AC  1903               	skipnz
  5699  07AD  2F40               	goto	l7328
  5700  07AE  3A01               	xorlw	1	; case 5
  5701  07AF  1903               	skipnz
  5702  07B0  2F47               	goto	l7330
  5703  07B1  3A03               	xorlw	3	; case 6
  5704  07B2  1903               	skipnz
  5705  07B3  2F4E               	goto	l7332
  5706  07B4  3A01               	xorlw	1	; case 7
  5707  07B5  1903               	skipnz
  5708  07B6  2F55               	goto	l7334
  5709  07B7  3A0F               	xorlw	15	; case 8
  5710  07B8  1903               	skipnz
  5711  07B9  2F5C               	goto	l7336
  5712  07BA  3A01               	xorlw	1	; case 9
  5713  07BB  1903               	skipnz
  5714  07BC  2F63               	goto	l7338
  5715  07BD  3A03               	xorlw	3	; case 10
  5716  07BE  1903               	skipnz
  5717  07BF  2F6A               	goto	l7340
  5718  07C0  3A01               	xorlw	1	; case 11
  5719  07C1  1903               	skipnz
  5720  07C2  2F71               	goto	l7342
  5721  07C3  3A07               	xorlw	7	; case 12
  5722  07C4  1903               	skipnz
  5723  07C5  2F78               	goto	l7344
  5724  07C6  3A01               	xorlw	1	; case 13
  5725  07C7  1903               	skipnz
  5726  07C8  2F7F               	goto	l7346
  5727  07C9  3A03               	xorlw	3	; case 14
  5728  07CA  1903               	skipnz
  5729  07CB  2F86               	goto	l7348
  5730  07CC  3A01               	xorlw	1	; case 15
  5731  07CD  1903               	skipnz
  5732  07CE  2F8D               	goto	l7350
  5733  07CF  2FD0               	goto	l1286
  5734  07D0                     l1286:	
  5735  07D0  0008               	return
  5736  07D1                     __end_of_update_state:	
  5737                           
  5738                           	psect	text2
  5739  1671                     __ptext2:	
  5740 ;; *************** function _check_message *****************
  5741 ;; Defined at:
  5742 ;;		line 591 in file "main.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  x               1    wreg     unsigned char 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  x               1   60[BANK0 ] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      void 
  5749 ;; Registers used:
  5750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5756 ;;      Params:         0       0       0       0       0       0       0       0
  5757 ;;      Locals:         0       1       0       0       0       0       0       0
  5758 ;;      Temps:          0       2       0       0       0       0       0       0
  5759 ;;      Totals:         0       3       0       0       0       0       0       0
  5760 ;;Total ram usage:        3 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:   13
  5763 ;; This function calls:
  5764 ;;		_printf
  5765 ;; This function is called by:
  5766 ;;		_main
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           
  5771                           ;psect for function _check_message
  5772  1671                     _check_message:	
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5776                           ;check_message@x stored from wreg
  5777  1671  0020               	movlb	0	; select bank0
  5778  1672  00DC               	movwf	check_message@x
  5779                           
  5780                           ;main.c: 591: void check_message(uint8_t x);main.c: 592: {;main.c: 593:     switch (x)
  5781  1673  2E87               	goto	l7372
  5782  1674                     l7362:	
  5783                           
  5784                           ;main.c: 596:         {;main.c: 597:             check_request = 0;
  5785  1674  01E4               	clrf	_check_request
  5786                           
  5787                           ;main.c: 598:             break;
  5788  1675  0008               	return
  5789  1676                     l7366:	
  5790                           
  5791                           ;main.c: 606:         {;main.c: 607:             printf("%c",x);
  5792  1676  3092               	movlw	low (STR_18| (0+32768))
  5793  1677  00D2               	movwf	printf@fmt
  5794  1678  3098               	movlw	high (STR_18| (0+32768))
  5795  1679  00D3               	movwf	printf@fmt+1
  5796  167A  085C               	movf	check_message@x,w
  5797  167B  00DA               	movwf	??_check_message
  5798  167C  01DB               	clrf	??_check_message+1
  5799  167D  085A               	movf	??_check_message,w
  5800  167E  00D4               	movwf	?_printf+2
  5801  167F  085B               	movf	??_check_message+1,w
  5802  1680  00D5               	movwf	?_printf+3
  5803  1681  3193  23F8         	fcall	_printf
  5804                           
  5805                           ;main.c: 608:             check_request = 1;
  5806  1683  0020               	movlb	0	; select bank0
  5807  1684  01E4               	clrf	_check_request
  5808  1685  0AE4               	incf	_check_request,f
  5809                           
  5810                           ;main.c: 609:             break;
  5811  1686  0008               	return
  5812  1687                     l7372:	
  5813  1687  085C               	movf	check_message@x,w
  5814  1688  00DA               	movwf	??_check_message
  5815  1689  01DB               	clrf	??_check_message+1
  5816                           
  5817                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5818                           ; Switch size 1, requested type "simple"
  5819                           ; Number of cases is 1, Range of values is 0 to 0
  5820                           ; switch strategies available:
  5821                           ; Name         Instructions Cycles
  5822                           ; simple_byte            4     3 (average)
  5823                           ; direct_byte            8     6 (fixed)
  5824                           ; jumptable            260     6 (fixed)
  5825                           ;	Chosen strategy is simple_byte
  5826  168A  085B               	movf	??_check_message+1,w
  5827  168B  3A00               	xorlw	0	; case 0
  5828  168C  1903               	skipnz
  5829  168D  2E8F               	goto	l7880
  5830  168E  2E76               	goto	l7366
  5831  168F                     l7880:	
  5832                           
  5833                           ; Switch size 1, requested type "simple"
  5834                           ; Number of cases is 2, Range of values is 70 to 84
  5835                           ; switch strategies available:
  5836                           ; Name         Instructions Cycles
  5837                           ; simple_byte            7     4 (average)
  5838                           ; direct_byte           39     9 (fixed)
  5839                           ; jumptable            263     9 (fixed)
  5840                           ;	Chosen strategy is simple_byte
  5841  168F  085A               	movf	??_check_message,w
  5842  1690  3A46               	xorlw	70	; case 70
  5843  1691  1903               	skipnz
  5844  1692  2E74               	goto	l7362
  5845  1693  3A12               	xorlw	18	; case 84
  5846  1694  1903               	skipnz
  5847  1695  2E74               	goto	l7362
  5848  1696  2E76               	goto	l7366
  5849  1697  0008               	return
  5850  1698                     __end_of_check_message:	
  5851                           
  5852                           	psect	text3
  5853  13F8                     __ptext3:	
  5854 ;; *************** function _printf *****************
  5855 ;; Defined at:
  5856 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  fmt             2   50[BANK0 ] PTR const unsigned char 
  5859 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
  5860 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  5861 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
  5862 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
  5863 ;;		 -> STR_2(5), STR_1(9), 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  ret             2    0        int 
  5866 ;;  ap              1   57[BANK0 ] PTR void [1]
  5867 ;;		 -> ?_printf(2), 
  5868 ;; Return value:  Size  Location     Type
  5869 ;;                  2   50[BANK0 ] int 
  5870 ;; Registers used:
  5871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5872 ;; Tracked objects:
  5873 ;;		On entry : 0/0
  5874 ;;		On exit  : 0/0
  5875 ;;		Unchanged: 0/0
  5876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5877 ;;      Params:         0       4       0       0       0       0       0       0
  5878 ;;      Locals:         0       3       0       0       0       0       0       0
  5879 ;;      Temps:          0       1       0       0       0       0       0       0
  5880 ;;      Totals:         0       8       0       0       0       0       0       0
  5881 ;;Total ram usage:        8 bytes
  5882 ;; Hardware stack levels used:    1
  5883 ;; Hardware stack levels required when called:   12
  5884 ;; This function calls:
  5885 ;;		_vfprintf
  5886 ;; This function is called by:
  5887 ;;		_main
  5888 ;;		_update_state
  5889 ;;		_check_message
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           
  5894                           ;psect for function _printf
  5895  13F8                     _printf:	
  5896                           
  5897                           ;incstack = 0
  5898                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5899  13F8  3054               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5900  13F9  0020               	movlb	0	; select bank0
  5901  13FA  00D6               	movwf	??_printf
  5902  13FB  0856               	movf	??_printf,w
  5903  13FC  00D9               	movwf	printf@ap
  5904  13FD  0853               	movf	printf@fmt+1,w
  5905  13FE  00CB               	movwf	vfprintf@fmt+1
  5906  13FF  0852               	movf	printf@fmt,w
  5907  1400  00CA               	movwf	vfprintf@fmt
  5908  1401  3059               	movlw	(low (printf@ap| 0))& (0+255)
  5909  1402  00D6               	movwf	??_printf
  5910  1403  0856               	movf	??_printf,w
  5911  1404  00CC               	movwf	vfprintf@ap
  5912  1405  3000               	movlw	0
  5913  1406  3187  27D1         	fcall	_vfprintf
  5914  1408  0008               	return
  5915  1409                     __end_of_printf:	
  5916                           
  5917                           	psect	text4
  5918  07D1                     __ptext4:	
  5919 ;; *************** function _vfprintf *****************
  5920 ;; Defined at:
  5921 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  fp              1    wreg     PTR struct _IO_FILE
  5924 ;;		 -> NULL(0), 
  5925 ;;  fmt             2   42[BANK0 ] PTR const unsigned char 
  5926 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
  5927 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  5928 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
  5929 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
  5930 ;;		 -> STR_2(5), STR_1(9), 
  5931 ;;  ap              1   44[BANK0 ] PTR PTR void 
  5932 ;;		 -> printf@ap(1), 
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;  fp              1   47[BANK0 ] PTR struct _IO_FILE
  5935 ;;		 -> NULL(0), 
  5936 ;;  cfmt            2   48[BANK0 ] PTR unsigned char 
  5937 ;;		 -> STR_18(3), STR_17(5), STR_16(5), STR_15(5), 
  5938 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  5939 ;;		 -> STR_10(5), STR_9(5), STR_8(5), STR_7(5), 
  5940 ;;		 -> STR_6(5), STR_5(5), STR_4(5), STR_3(5), 
  5941 ;;		 -> STR_2(5), STR_1(9), 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  2   42[BANK0 ] int 
  5944 ;; Registers used:
  5945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5951 ;;      Params:         0       3       0       0       0       0       0       0
  5952 ;;      Locals:         0       3       0       0       0       0       0       0
  5953 ;;      Temps:          0       2       0       0       0       0       0       0
  5954 ;;      Totals:         0       8       0       0       0       0       0       0
  5955 ;;Total ram usage:        8 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:   11
  5958 ;; This function calls:
  5959 ;;		_vfpfcnvrt
  5960 ;; This function is called by:
  5961 ;;		_printf
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           
  5966                           ;psect for function _vfprintf
  5967  07D1                     _vfprintf:	
  5968                           
  5969                           ;incstack = 0
  5970                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5971                           ;vfprintf@fp stored from wreg
  5972  07D1  0020               	movlb	0	; select bank0
  5973  07D2  00CF               	movwf	vfprintf@fp
  5974                           
  5975                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  5976  07D3  084B               	movf	vfprintf@fmt+1,w
  5977  07D4  00D1               	movwf	vfprintf@cfmt+1
  5978  07D5  084A               	movf	vfprintf@fmt,w
  5979  07D6  00D0               	movwf	vfprintf@cfmt
  5980                           
  5981                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  5982  07D7  0021               	movlb	1	; select bank1
  5983  07D8  01B0               	clrf	_nout^(0+128)
  5984  07D9  01B1               	clrf	(_nout+1)^(0+128)
  5985  07DA                     l7118:	
  5986                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5987                           
  5988                           
  5989                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5990  07DA  0020               	movlb	0	; select bank0
  5991  07DB  0850               	movf	vfprintf@cfmt,w
  5992  07DC  0084               	movwf	4
  5993  07DD  0851               	movf	vfprintf@cfmt+1,w
  5994  07DE  0085               	movwf	5
  5995  07DF  0012               	moviw fsr0++
  5996  07E0  1903               	btfsc	3,2
  5997  07E1  2FF7               	goto	l7120
  5998                           
  5999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  6000  07E2  3050               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  6001  07E3  00CD               	movwf	??_vfprintf
  6002  07E4  084D               	movf	??_vfprintf,w
  6003  07E5  00C1               	movwf	vfpfcnvrt@fmt
  6004  07E6  084C               	movf	vfprintf@ap,w
  6005  07E7  00CE               	movwf	??_vfprintf+1
  6006  07E8  084E               	movf	??_vfprintf+1,w
  6007  07E9  00C2               	movwf	vfpfcnvrt@ap
  6008  07EA  084F               	movf	vfprintf@fp,w
  6009  07EB  318F  2758  3187   	fcall	_vfpfcnvrt
  6010  07EE  0020               	movlb	0	; select bank0
  6011  07EF  0841               	movf	?_vfpfcnvrt,w
  6012  07F0  0021               	movlb	1	; select bank1
  6013  07F1  07B0               	addwf	_nout^(0+128),f
  6014  07F2  0020               	movlb	0	; select bank0
  6015  07F3  0842               	movf	?_vfpfcnvrt+1,w
  6016  07F4  0021               	movlb	1	; select bank1
  6017  07F5  3DB1               	addwfc	(_nout+1)^(0+128),f
  6018  07F6  2FDA               	goto	l7118
  6019  07F7                     l7120:	
  6020                           
  6021                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  6022  07F7  0021               	movlb	1	; select bank1
  6023  07F8  0831               	movf	(_nout+1)^(0+128),w
  6024  07F9  0020               	movlb	0	; select bank0
  6025  07FA  00CB               	movwf	?_vfprintf+1
  6026  07FB  0021               	movlb	1	; select bank1
  6027  07FC  0830               	movf	_nout^(0+128),w
  6028  07FD  0020               	movlb	0	; select bank0
  6029  07FE  00CA               	movwf	?_vfprintf
  6030  07FF  0008               	return
  6031  0800                     __end_of_vfprintf:	
  6032                           
  6033                           	psect	text5
  6034  0F58                     __ptext5:	
  6035 ;; *************** function _vfpfcnvrt *****************
  6036 ;; Defined at:
  6037 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  fp              1    wreg     PTR struct _IO_FILE
  6040 ;;		 -> NULL(0), 
  6041 ;;  fmt             1   33[BANK0 ] PTR PTR unsigned char 
  6042 ;;		 -> vfprintf@cfmt(2), 
  6043 ;;  ap              1   34[BANK0 ] PTR PTR void 
  6044 ;;		 -> printf@ap(1), 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;  fp              1   41[BANK0 ] PTR struct _IO_FILE
  6047 ;;		 -> NULL(0), 
  6048 ;;  llu             8    0        unsigned long long 
  6049 ;;  ll              8    0        long long 
  6050 ;;  f               4    0        long long 
  6051 ;;  ct              3    0        unsigned char [3]
  6052 ;;  vp              2    0        PTR void 
  6053 ;;  i               2    0        int 
  6054 ;;  done            2    0        int 
  6055 ;;  cp              2    0        PTR unsigned char 
  6056 ;;  c               1   40[BANK0 ] unsigned char 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  2   33[BANK0 ] int 
  6059 ;; Registers used:
  6060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6066 ;;      Params:         0       2       0       0       0       0       0       0
  6067 ;;      Locals:         0       2       0       0       0       0       0       0
  6068 ;;      Temps:          0       5       0       0       0       0       0       0
  6069 ;;      Totals:         0       9       0       0       0       0       0       0
  6070 ;;Total ram usage:        9 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:   10
  6073 ;; This function calls:
  6074 ;;		_ctoa
  6075 ;;		_fputc
  6076 ;; This function is called by:
  6077 ;;		_vfprintf
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           
  6082                           ;psect for function _vfpfcnvrt
  6083  0F58                     _vfpfcnvrt:	
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6087                           ;vfpfcnvrt@fp stored from wreg
  6088  0F58  0020               	movlb	0	; select bank0
  6089  0F59  00C9               	movwf	vfpfcnvrt@fp
  6090                           
  6091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  6092  0F5A  0841               	movf	vfpfcnvrt@fmt,w
  6093  0F5B  0086               	movwf	6
  6094  0F5C  0187               	clrf	7
  6095  0F5D  3F40               	moviw [0]fsr1
  6096  0F5E  00C3               	movwf	??_vfpfcnvrt
  6097  0F5F  3F41               	moviw [1]fsr1
  6098  0F60  00C4               	movwf	??_vfpfcnvrt+1
  6099  0F61  0843               	movf	??_vfpfcnvrt,w
  6100  0F62  0084               	movwf	4
  6101  0F63  0844               	movf	??_vfpfcnvrt+1,w
  6102  0F64  0085               	movwf	5
  6103  0F65  0012               	moviw fsr0++
  6104  0F66  3A25               	xorlw	37
  6105  0F67  1D03               	btfss	3,2
  6106  0F68  2FDD               	goto	l7016
  6107                           
  6108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  6109  0F69  0841               	movf	vfpfcnvrt@fmt,w
  6110  0F6A  0086               	movwf	6
  6111  0F6B  0187               	clrf	7
  6112  0F6C  3001               	movlw	1
  6113  0F6D  0781               	addwf	1,f
  6114  0F6E  3141               	addfsr 1,1
  6115  0F6F  1803               	skipnc
  6116  0F70  0A81               	incf	1,f
  6117                           
  6118                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  6119  0F71  0021               	movlb	1	; select bank1
  6120  0F72  01B2               	clrf	_width^(0+128)
  6121  0F73  01B3               	clrf	(_width+1)^(0+128)
  6122  0F74  01B6               	clrf	_flags^(0+128)
  6123  0F75  01B7               	clrf	(_flags+1)^(0+128)
  6124                           
  6125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  6126  0F76  30FF               	movlw	255
  6127  0F77  00B4               	movwf	_prec^(0+128)
  6128  0F78  30FF               	movlw	255
  6129  0F79  00B5               	movwf	(_prec^(0+128)+1)
  6130                           
  6131                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  6132  0F7A  0020               	movlb	0	; select bank0
  6133  0F7B  0841               	movf	vfpfcnvrt@fmt,w
  6134  0F7C  0086               	movwf	6
  6135  0F7D  0187               	clrf	7
  6136  0F7E  3F40               	moviw [0]fsr1
  6137  0F7F  00C3               	movwf	??_vfpfcnvrt
  6138  0F80  3F41               	moviw [1]fsr1
  6139  0F81  00C4               	movwf	??_vfpfcnvrt+1
  6140  0F82  0843               	movf	??_vfpfcnvrt,w
  6141  0F83  0084               	movwf	4
  6142  0F84  0844               	movf	??_vfpfcnvrt+1,w
  6143  0F85  0085               	movwf	5
  6144  0F86  0012               	moviw fsr0++
  6145  0F87  3A63               	xorlw	99
  6146  0F88  1D03               	btfss	3,2
  6147  0F89  2FAB               	goto	l7000
  6148                           
  6149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  6150  0F8A  0841               	movf	vfpfcnvrt@fmt,w
  6151  0F8B  0086               	movwf	6
  6152  0F8C  0187               	clrf	7
  6153  0F8D  3001               	movlw	1
  6154  0F8E  0781               	addwf	1,f
  6155  0F8F  3141               	addfsr 1,1
  6156  0F90  1803               	skipnc
  6157  0F91  0A81               	incf	1,f
  6158                           
  6159                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  6160  0F92  0842               	movf	vfpfcnvrt@ap,w
  6161  0F93  0086               	movwf	6
  6162  0F94  0187               	clrf	7
  6163  0F95  0801               	movf	1,w
  6164  0F96  0084               	movwf	4
  6165  0F97  0185               	clrf	5
  6166  0F98  3002               	movlw	2
  6167  0F99  0781               	addwf	1,f
  6168  0F9A  0800               	movf	0,w
  6169  0F9B  00C3               	movwf	??_vfpfcnvrt
  6170  0F9C  0843               	movf	??_vfpfcnvrt,w
  6171  0F9D  00C8               	movwf	vfpfcnvrt@c
  6172                           
  6173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  6174  0F9E  0848               	movf	vfpfcnvrt@c,w
  6175  0F9F  00C3               	movwf	??_vfpfcnvrt
  6176  0FA0  0843               	movf	??_vfpfcnvrt,w
  6177  0FA1  00BB               	movwf	ctoa@c
  6178  0FA2  0849               	movf	vfpfcnvrt@fp,w
  6179  0FA3  3197  279B         	fcall	_ctoa
  6180  0FA5  0020               	movlb	0	; select bank0
  6181  0FA6  083C               	movf	?_ctoa+1,w
  6182  0FA7  00C2               	movwf	?_vfpfcnvrt+1
  6183  0FA8  083B               	movf	?_ctoa,w
  6184  0FA9  00C1               	movwf	?_vfpfcnvrt
  6185  0FAA  0008               	return
  6186  0FAB                     l7000:	
  6187                           
  6188                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  6189  0FAB  0841               	movf	vfpfcnvrt@fmt,w
  6190  0FAC  0086               	movwf	6
  6191  0FAD  0187               	clrf	7
  6192  0FAE  3F40               	moviw [0]fsr1
  6193  0FAF  00C3               	movwf	??_vfpfcnvrt
  6194  0FB0  3F41               	moviw [1]fsr1
  6195  0FB1  00C4               	movwf	??_vfpfcnvrt+1
  6196  0FB2  0843               	movf	??_vfpfcnvrt,w
  6197  0FB3  0084               	movwf	4
  6198  0FB4  0844               	movf	??_vfpfcnvrt+1,w
  6199  0FB5  0085               	movwf	5
  6200  0FB6  0012               	moviw fsr0++
  6201  0FB7  3A25               	xorlw	37
  6202  0FB8  1D03               	btfss	3,2
  6203  0FB9  2FD2               	goto	l7010
  6204                           
  6205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  6206  0FBA  0841               	movf	vfpfcnvrt@fmt,w
  6207  0FBB  0086               	movwf	6
  6208  0FBC  0187               	clrf	7
  6209  0FBD  3001               	movlw	1
  6210  0FBE  0781               	addwf	1,f
  6211  0FBF  3141               	addfsr 1,1
  6212  0FC0  1803               	skipnc
  6213  0FC1  0A81               	incf	1,f
  6214                           
  6215                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  6216  0FC2  3025               	movlw	37
  6217  0FC3  00A2               	movwf	fputc@c
  6218  0FC4  3000               	movlw	0
  6219  0FC5  00A3               	movwf	fputc@c+1
  6220  0FC6  0849               	movf	vfpfcnvrt@fp,w
  6221  0FC7  00C3               	movwf	??_vfpfcnvrt
  6222  0FC8  0843               	movf	??_vfpfcnvrt,w
  6223  0FC9  00A4               	movwf	fputc@fp
  6224  0FCA  3188  208F         	fcall	_fputc
  6225  0FCC                     l7006:	
  6226                           
  6227                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  6228  0FCC  3001               	movlw	1
  6229  0FCD  0020               	movlb	0	; select bank0
  6230  0FCE  00C1               	movwf	?_vfpfcnvrt
  6231  0FCF  3000               	movlw	0
  6232  0FD0  00C2               	movwf	?_vfpfcnvrt+1
  6233  0FD1  0008               	return
  6234  0FD2                     l7010:	
  6235                           
  6236                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  6237  0FD2  0841               	movf	vfpfcnvrt@fmt,w
  6238  0FD3  0086               	movwf	6
  6239  0FD4  0187               	clrf	7
  6240  0FD5  3001               	movlw	1
  6241  0FD6  0781               	addwf	1,f
  6242  0FD7  3141               	addfsr 1,1
  6243  0FD8  1803               	skipnc
  6244  0FD9  0A81               	incf	1,f
  6245                           
  6246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  6247  0FDA  01C1               	clrf	?_vfpfcnvrt
  6248  0FDB  01C2               	clrf	?_vfpfcnvrt+1
  6249  0FDC  0008               	return
  6250  0FDD                     l7016:	
  6251                           
  6252                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  6253  0FDD  0841               	movf	vfpfcnvrt@fmt,w
  6254  0FDE  0086               	movwf	6
  6255  0FDF  0187               	clrf	7
  6256  0FE0  3F40               	moviw [0]fsr1
  6257  0FE1  00C3               	movwf	??_vfpfcnvrt
  6258  0FE2  3F41               	moviw [1]fsr1
  6259  0FE3  00C4               	movwf	??_vfpfcnvrt+1
  6260  0FE4  0843               	movf	??_vfpfcnvrt,w
  6261  0FE5  0084               	movwf	4
  6262  0FE6  0844               	movf	??_vfpfcnvrt+1,w
  6263  0FE7  0085               	movwf	5
  6264  0FE8  0800               	movf	0,w	;code access
  6265  0FE9  00C5               	movwf	??_vfpfcnvrt+2
  6266  0FEA  01C6               	clrf	??_vfpfcnvrt+3
  6267  0FEB  0845               	movf	??_vfpfcnvrt+2,w
  6268  0FEC  00A2               	movwf	fputc@c
  6269  0FED  0846               	movf	??_vfpfcnvrt+3,w
  6270  0FEE  00A3               	movwf	fputc@c+1
  6271  0FEF  0849               	movf	vfpfcnvrt@fp,w
  6272  0FF0  00C7               	movwf	??_vfpfcnvrt+4
  6273  0FF1  0847               	movf	??_vfpfcnvrt+4,w
  6274  0FF2  00A4               	movwf	fputc@fp
  6275  0FF3  3188  208F  318F   	fcall	_fputc
  6276                           
  6277                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  6278  0FF6  0020               	movlb	0	; select bank0
  6279  0FF7  0841               	movf	vfpfcnvrt@fmt,w
  6280  0FF8  0086               	movwf	6
  6281  0FF9  0187               	clrf	7
  6282  0FFA  3001               	movlw	1
  6283  0FFB  0781               	addwf	1,f
  6284  0FFC  3141               	addfsr 1,1
  6285  0FFD  1803               	skipnc
  6286  0FFE  0A81               	incf	1,f
  6287  0FFF  2FCC               	goto	l7006
  6288  1000                     __end_of_vfpfcnvrt:	
  6289                           
  6290                           	psect	text6
  6291  179B                     __ptext6:	
  6292 ;; *************** function _ctoa *****************
  6293 ;; Defined at:
  6294 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;  fp              1    wreg     PTR struct _IO_FILE
  6297 ;;		 -> NULL(0), 
  6298 ;;  c               1   27[BANK0 ] unsigned char 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  fp              1   32[BANK0 ] PTR struct _IO_FILE
  6301 ;;		 -> NULL(0), 
  6302 ;;  w               2   30[BANK0 ] int 
  6303 ;;  l               2    0        int 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  2   27[BANK0 ] int 
  6306 ;; Registers used:
  6307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6313 ;;      Params:         0       2       0       0       0       0       0       0
  6314 ;;      Locals:         0       3       0       0       0       0       0       0
  6315 ;;      Temps:          0       1       0       0       0       0       0       0
  6316 ;;      Totals:         0       6       0       0       0       0       0       0
  6317 ;;Total ram usage:        6 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    9
  6320 ;; This function calls:
  6321 ;;		_pad
  6322 ;; This function is called by:
  6323 ;;		_vfpfcnvrt
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           
  6328                           ;psect for function _ctoa
  6329  179B                     _ctoa:	
  6330                           
  6331                           ;incstack = 0
  6332                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6333                           ;ctoa@fp stored from wreg
  6334  179B  0020               	movlb	0	; select bank0
  6335  179C  00C0               	movwf	ctoa@fp
  6336                           
  6337                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  6338  179D  0021               	movlb	1	; select bank1
  6339  179E  0832               	movf	_width^(0+128),w
  6340  179F  0433               	iorwf	(_width+1)^(0+128),w
  6341  17A0  1D03               	btfss	3,2
  6342  17A1  2FAA               	goto	l6884
  6343  17A2  0833               	movf	(_width+1)^(0+128),w
  6344  17A3  0020               	movlb	0	; select bank0
  6345  17A4  00BF               	movwf	ctoa@w+1
  6346  17A5  0021               	movlb	1	; select bank1
  6347  17A6  0832               	movf	_width^(0+128),w
  6348  17A7  0020               	movlb	0	; select bank0
  6349  17A8  00BE               	movwf	ctoa@w
  6350  17A9  2FB3               	goto	l6886
  6351  17AA                     l6884:	
  6352  17AA  0832               	movf	_width^(0+128),w
  6353  17AB  3EFF               	addlw	255
  6354  17AC  0020               	movlb	0	; select bank0
  6355  17AD  00BE               	movwf	ctoa@w
  6356  17AE  30FF               	movlw	255
  6357  17AF  0021               	movlb	1	; select bank1
  6358  17B0  3D33               	addwfc	(_width+1)^(0+128),w
  6359  17B1  0020               	movlb	0	; select bank0
  6360  17B2  00BF               	movwf	ctoa@w+1
  6361  17B3                     l6886:	
  6362                           
  6363                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  6364  17B3  083B               	movf	ctoa@c,w
  6365  17B4  00BD               	movwf	??_ctoa
  6366  17B5  083D               	movf	??_ctoa,w
  6367  17B6  0023               	movlb	3	; select bank3
  6368  17B7  00A0               	movwf	_dbuf^(0+384)
  6369                           
  6370                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  6371  17B8  01A1               	clrf	(_dbuf^(0+384)+1)
  6372                           
  6373                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  6374  17B9  30A0               	movlw	(low (_dbuf| (0+256)))& (0+255)
  6375  17BA  0020               	movlb	0	; select bank0
  6376  17BB  00BD               	movwf	??_ctoa
  6377  17BC  083D               	movf	??_ctoa,w
  6378  17BD  00B2               	movwf	pad@buf
  6379  17BE  083F               	movf	ctoa@w+1,w
  6380  17BF  00B4               	movwf	pad@p+1
  6381  17C0  083E               	movf	ctoa@w,w
  6382  17C1  00B3               	movwf	pad@p
  6383  17C2  0840               	movf	ctoa@fp,w
  6384  17C3  3189  21D0         	fcall	_pad
  6385  17C5  0020               	movlb	0	; select bank0
  6386  17C6  0833               	movf	?_pad+1,w
  6387  17C7  00BC               	movwf	?_ctoa+1
  6388  17C8  0832               	movf	?_pad,w
  6389  17C9  00BB               	movwf	?_ctoa
  6390  17CA  0008               	return
  6391  17CB                     __end_of_ctoa:	
  6392                           
  6393                           	psect	text7
  6394  09D0                     __ptext7:	
  6395 ;; *************** function _pad *****************
  6396 ;; Defined at:
  6397 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  fp              1    wreg     PTR struct _IO_FILE
  6400 ;;		 -> NULL(0), 
  6401 ;;  buf             1   18[BANK0 ] PTR unsigned char 
  6402 ;;		 -> dbuf(32), 
  6403 ;;  p               2   19[BANK0 ] int 
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;  fp              1   26[BANK0 ] PTR struct _IO_FILE
  6406 ;;		 -> NULL(0), 
  6407 ;;  w               2   24[BANK0 ] int 
  6408 ;;  i               2   22[BANK0 ] int 
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  2   18[BANK0 ] int 
  6411 ;; Registers used:
  6412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6418 ;;      Params:         0       3       0       0       0       0       0       0
  6419 ;;      Locals:         0       5       0       0       0       0       0       0
  6420 ;;      Temps:          0       1       0       0       0       0       0       0
  6421 ;;      Totals:         0       9       0       0       0       0       0       0
  6422 ;;Total ram usage:        9 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    8
  6425 ;; This function calls:
  6426 ;;		_fputc
  6427 ;;		_fputs
  6428 ;;		_strlen
  6429 ;; This function is called by:
  6430 ;;		_ctoa
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _pad
  6436  09D0                     _pad:	
  6437                           
  6438                           ;incstack = 0
  6439                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6440                           ;pad@fp stored from wreg
  6441  09D0  0020               	movlb	0	; select bank0
  6442  09D1  00BA               	movwf	pad@fp
  6443                           
  6444                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  6445  09D2  0021               	movlb	1	; select bank1
  6446  09D3  1C36               	btfss	_flags^(0+128),0
  6447  09D4  29DE               	goto	l6792
  6448                           
  6449                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  6450  09D5  0020               	movlb	0	; select bank0
  6451  09D6  083A               	movf	pad@fp,w
  6452  09D7  00B5               	movwf	??_pad
  6453  09D8  0835               	movf	??_pad,w
  6454  09D9  00AA               	movwf	fputs@fp
  6455  09DA  0832               	movf	pad@buf,w
  6456  09DB  3196  264B  3189   	fcall	_fputs
  6457  09DE                     l6792:	
  6458                           
  6459                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  6460  09DE  0020               	movlb	0	; select bank0
  6461  09DF  1BB4               	btfsc	pad@p+1,7
  6462  09E0  29E6               	goto	l6796
  6463  09E1  0834               	movf	pad@p+1,w
  6464  09E2  00B9               	movwf	pad@w+1
  6465  09E3  0833               	movf	pad@p,w
  6466  09E4  00B8               	movwf	pad@w
  6467  09E5  29E8               	goto	l1450
  6468  09E6                     l6796:	
  6469  09E6  01B8               	clrf	pad@w
  6470  09E7  01B9               	clrf	pad@w+1
  6471  09E8                     l1450:	
  6472                           
  6473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  6474  09E8  01B6               	clrf	pad@i
  6475  09E9  01B7               	clrf	pad@i+1
  6476  09EA                     l6802:	
  6477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  6478                           
  6479                           
  6480                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  6481  09EA  0837               	movf	pad@i+1,w
  6482  09EB  3A80               	xorlw	128
  6483  09EC  00B5               	movwf	??_pad
  6484  09ED  0839               	movf	pad@w+1,w
  6485  09EE  3A80               	xorlw	128
  6486  09EF  0235               	subwf	??_pad,w
  6487  09F0  1D03               	skipz
  6488  09F1  29F4               	goto	u5905
  6489  09F2  0838               	movf	pad@w,w
  6490  09F3  0236               	subwf	pad@i,w
  6491  09F4                     u5905:	
  6492  09F4  1803               	btfsc	3,0
  6493  09F5  2A08               	goto	l1453
  6494                           
  6495                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  6496  09F6  3020               	movlw	32
  6497  09F7  0020               	movlb	0	; select bank0
  6498  09F8  00A2               	movwf	fputc@c
  6499  09F9  3000               	movlw	0
  6500  09FA  00A3               	movwf	fputc@c+1
  6501  09FB  083A               	movf	pad@fp,w
  6502  09FC  00B5               	movwf	??_pad
  6503  09FD  0835               	movf	??_pad,w
  6504  09FE  00A4               	movwf	fputc@fp
  6505  09FF  3188  208F  3189   	fcall	_fputc
  6506                           
  6507                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  6508  0A02  3001               	movlw	1
  6509  0A03  0020               	movlb	0	; select bank0
  6510  0A04  07B6               	addwf	pad@i,f
  6511  0A05  3000               	movlw	0
  6512  0A06  3DB7               	addwfc	pad@i+1,f
  6513  0A07  29EA               	goto	l6802
  6514  0A08                     l1453:	
  6515                           
  6516                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  6517  0A08  0021               	movlb	1	; select bank1
  6518  0A09  1836               	btfsc	_flags^(0+128),0
  6519  0A0A  2A14               	goto	l1454
  6520                           
  6521                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  6522  0A0B  0020               	movlb	0	; select bank0
  6523  0A0C  083A               	movf	pad@fp,w
  6524  0A0D  00B5               	movwf	??_pad
  6525  0A0E  0835               	movf	??_pad,w
  6526  0A0F  00AA               	movwf	fputs@fp
  6527  0A10  0832               	movf	pad@buf,w
  6528  0A11  3196  264B  3189   	fcall	_fputs
  6529  0A14                     l1454:	
  6530                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  6531                           
  6532                           
  6533                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  6534  0A14  0020               	movlb	0	; select bank0
  6535  0A15  0832               	movf	pad@buf,w
  6536  0A16  3195  254F         	fcall	_strlen
  6537  0A18  0020               	movlb	0	; select bank0
  6538  0A19  0838               	movf	pad@w,w
  6539  0A1A  0720               	addwf	?_strlen,w
  6540  0A1B  00B2               	movwf	?_pad
  6541  0A1C  0839               	movf	pad@w+1,w
  6542  0A1D  3D21               	addwfc	?_strlen+1,w
  6543  0A1E  00B3               	movwf	?_pad+1
  6544  0A1F  0008               	return
  6545  0A20                     __end_of_pad:	
  6546                           
  6547                           	psect	text8
  6548  154F                     __ptext8:	
  6549 ;; *************** function _strlen *****************
  6550 ;; Defined at:
  6551 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;  s               1    wreg     PTR const unsigned char 
  6554 ;;		 -> dbuf(32), 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  6557 ;;		 -> dbuf(32), 
  6558 ;;  a               1    3[BANK0 ] PTR const unsigned char 
  6559 ;;		 -> dbuf(32), 
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  2    0[BANK0 ] unsigned int 
  6562 ;; Registers used:
  6563 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6569 ;;      Params:         0       2       0       0       0       0       0       0
  6570 ;;      Locals:         0       2       0       0       0       0       0       0
  6571 ;;      Temps:          0       1       0       0       0       0       0       0
  6572 ;;      Totals:         0       5       0       0       0       0       0       0
  6573 ;;Total ram usage:        5 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    4
  6576 ;; This function calls:
  6577 ;;		Nothing
  6578 ;; This function is called by:
  6579 ;;		_pad
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           
  6584                           ;psect for function _strlen
  6585  154F                     _strlen:	
  6586                           
  6587                           ;incstack = 0
  6588                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  6589                           ;strlen@s stored from wreg
  6590  154F  0020               	movlb	0	; select bank0
  6591  1550  00A4               	movwf	strlen@s
  6592  1551  0824               	movf	strlen@s,w
  6593  1552  00A2               	movwf	??_strlen
  6594  1553  0822               	movf	??_strlen,w
  6595  1554  00A3               	movwf	strlen@a
  6596  1555                     l4418:	
  6597  1555  0824               	movf	strlen@s,w
  6598  1556  0086               	movwf	6
  6599  1557  3001               	movlw	1	; select bank2/3
  6600  1558  0087               	movwf	7
  6601  1559  0801               	movf	1,w
  6602  155A  1903               	btfsc	3,2
  6603  155B  2D61               	goto	l4420
  6604  155C  3001               	movlw	1
  6605  155D  00A2               	movwf	??_strlen
  6606  155E  0822               	movf	??_strlen,w
  6607  155F  07A4               	addwf	strlen@s,f
  6608  1560  2D55               	goto	l4418
  6609  1561                     l4420:	
  6610  1561  0823               	movf	strlen@a,w
  6611  1562  0224               	subwf	strlen@s,w
  6612  1563  00A0               	movwf	?_strlen
  6613  1564  01A1               	clrf	?_strlen+1
  6614  1565  1BA0               	btfsc	?_strlen,7
  6615  1566  03A1               	decf	?_strlen+1,f
  6616  1567  0008               	return
  6617  1568                     __end_of_strlen:	
  6618                           
  6619                           	psect	text9
  6620  164B                     __ptext9:	
  6621 ;; *************** function _fputs *****************
  6622 ;; Defined at:
  6623 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  s               1    wreg     PTR const unsigned char 
  6626 ;;		 -> dbuf(32), 
  6627 ;;  fp              1   10[BANK0 ] PTR struct _IO_FILE
  6628 ;;		 -> NULL(0), 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  s               1   17[BANK0 ] PTR const unsigned char 
  6631 ;;		 -> dbuf(32), 
  6632 ;;  i               2   15[BANK0 ] int 
  6633 ;;  c               1   14[BANK0 ] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  2   10[BANK0 ] int 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6643 ;;      Params:         0       1       0       0       0       0       0       0
  6644 ;;      Locals:         0       4       0       0       0       0       0       0
  6645 ;;      Temps:          0       3       0       0       0       0       0       0
  6646 ;;      Totals:         0       8       0       0       0       0       0       0
  6647 ;;Total ram usage:        8 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    7
  6650 ;; This function calls:
  6651 ;;		_fputc
  6652 ;; This function is called by:
  6653 ;;		_pad
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           
  6658                           ;psect for function _fputs
  6659  164B                     _fputs:	
  6660                           
  6661                           ;incstack = 0
  6662                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6663                           ;fputs@s stored from wreg
  6664  164B  0020               	movlb	0	; select bank0
  6665  164C  00B1               	movwf	fputs@s
  6666  164D  01AF               	clrf	fputs@i
  6667  164E  01B0               	clrf	fputs@i+1
  6668  164F                     l6548:	
  6669  164F  082F               	movf	fputs@i,w
  6670  1650  0731               	addwf	fputs@s,w
  6671  1651  00AB               	movwf	??_fputs
  6672  1652  082B               	movf	??_fputs,w
  6673  1653  0086               	movwf	6
  6674  1654  3001               	movlw	1	; select bank2/3
  6675  1655  0087               	movwf	7
  6676  1656  0801               	movf	1,w
  6677  1657  00AC               	movwf	??_fputs+1
  6678  1658  082C               	movf	??_fputs+1,w
  6679  1659  00AE               	movwf	fputs@c
  6680  165A  082E               	movf	fputs@c,w
  6681  165B  1903               	btfsc	3,2
  6682  165C  0008               	return
  6683  165D  082E               	movf	fputs@c,w
  6684  165E  00AB               	movwf	??_fputs
  6685  165F  01AC               	clrf	??_fputs+1
  6686  1660  082B               	movf	??_fputs,w
  6687  1661  00A2               	movwf	fputc@c
  6688  1662  082C               	movf	??_fputs+1,w
  6689  1663  00A3               	movwf	fputc@c+1
  6690  1664  082A               	movf	fputs@fp,w
  6691  1665  00AD               	movwf	??_fputs+2
  6692  1666  082D               	movf	??_fputs+2,w
  6693  1667  00A4               	movwf	fputc@fp
  6694  1668  3188  208F  3196   	fcall	_fputc
  6695  166B  3001               	movlw	1
  6696  166C  0020               	movlb	0	; select bank0
  6697  166D  07AF               	addwf	fputs@i,f
  6698  166E  3000               	movlw	0
  6699  166F  3DB0               	addwfc	fputs@i+1,f
  6700  1670  2E4F               	goto	l6548
  6701  1671                     __end_of_fputs:	
  6702                           
  6703                           	psect	text10
  6704  088F                     __ptext10:	
  6705 ;; *************** function _fputc *****************
  6706 ;; Defined at:
  6707 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  c               2    2[BANK0 ] int 
  6710 ;;  fp              1    4[BANK0 ] PTR struct _IO_FILE
  6711 ;;		 -> NULL(0), 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  2    2[BANK0 ] int 
  6716 ;; Registers used:
  6717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6723 ;;      Params:         0       3       0       0       0       0       0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0
  6725 ;;      Temps:          0       5       0       0       0       0       0       0
  6726 ;;      Totals:         0       8       0       0       0       0       0       0
  6727 ;;Total ram usage:        8 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    6
  6730 ;; This function calls:
  6731 ;;		_putch
  6732 ;; This function is called by:
  6733 ;;		_pad
  6734 ;;		_vfpfcnvrt
  6735 ;;		_fputs
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           
  6740                           ;psect for function _fputc
  6741  088F                     _fputc:	
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6745  088F  0020               	movlb	0	; select bank0
  6746  0890  0824               	movf	fputc@fp,w
  6747  0891  1D03               	btfss	3,2
  6748  0892  0824               	movf	fputc@fp,w
  6749  0893  1D03               	btfss	3,2
  6750  0894  2899               	goto	l6452
  6751  0895  0822               	movf	fputc@c,w
  6752  0896  3192  2291         	fcall	_putch
  6753  0898  0008               	return
  6754  0899                     l6452:	
  6755  0899  0824               	movf	fputc@fp,w
  6756  089A  3E03               	addlw	3
  6757  089B  0086               	movwf	6
  6758  089C  0187               	clrf	7
  6759  089D  0016               	moviw fsr1++
  6760  089E  0401               	iorwf	1,w
  6761  089F  1903               	btfsc	3,2
  6762  08A0  28BC               	goto	l6456
  6763  08A1  0824               	movf	fputc@fp,w
  6764  08A2  3E03               	addlw	3
  6765  08A3  0086               	movwf	6
  6766  08A4  0187               	clrf	7
  6767  08A5  3F40               	moviw [0]fsr1
  6768  08A6  00A5               	movwf	??_fputc
  6769  08A7  3F41               	moviw [1]fsr1
  6770  08A8  00A6               	movwf	??_fputc+1
  6771  08A9  0A24               	incf	fputc@fp,w
  6772  08AA  0086               	movwf	6
  6773  08AB  0187               	clrf	7
  6774  08AC  3F40               	moviw [0]fsr1
  6775  08AD  00A7               	movwf	??_fputc+2
  6776  08AE  3F41               	moviw [1]fsr1
  6777  08AF  00A8               	movwf	??_fputc+3
  6778  08B0  0828               	movf	??_fputc+3,w
  6779  08B1  3A80               	xorlw	128
  6780  08B2  00A9               	movwf	??_fputc+4
  6781  08B3  0826               	movf	??_fputc+1,w
  6782  08B4  3A80               	xorlw	128
  6783  08B5  0229               	subwf	??_fputc+4,w
  6784  08B6  1D03               	skipz
  6785  08B7  28BA               	goto	u5345
  6786  08B8  0825               	movf	??_fputc,w
  6787  08B9  0227               	subwf	??_fputc+2,w
  6788  08BA                     u5345:	
  6789  08BA  1803               	skipnc
  6790  08BB  0008               	return
  6791  08BC                     l6456:	
  6792  08BC  0020               	movlb	0	; select bank0
  6793  08BD  0A24               	incf	fputc@fp,w
  6794  08BE  0086               	movwf	6
  6795  08BF  0187               	clrf	7
  6796  08C0  3001               	movlw	1
  6797  08C1  0781               	addwf	1,f
  6798  08C2  3141               	addfsr 1,1
  6799  08C3  1803               	skipnc
  6800  08C4  0A81               	incf	1,f
  6801  08C5  0008               	return
  6802  08C6                     __end_of_fputc:	
  6803                           
  6804                           	psect	text11
  6805  1291                     __ptext11:	
  6806 ;; *************** function _putch *****************
  6807 ;; Defined at:
  6808 ;;		line 174 in file "mcc_generated_files/eusart.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  txData          1    wreg     unsigned char 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  txData          1    1[BANK0 ] unsigned char 
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      void 
  6815 ;; Registers used:
  6816 ;;		wreg, status,2, status,0, pclath, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6822 ;;      Params:         0       0       0       0       0       0       0       0
  6823 ;;      Locals:         0       1       0       0       0       0       0       0
  6824 ;;      Temps:          0       0       0       0       0       0       0       0
  6825 ;;      Totals:         0       1       0       0       0       0       0       0
  6826 ;;Total ram usage:        1 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    5
  6829 ;; This function calls:
  6830 ;;		_EUSART_Write
  6831 ;; This function is called by:
  6832 ;;		_fputc
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function _putch
  6838  1291                     _putch:	
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  6842                           ;putch@txData stored from wreg
  6843  1291  0020               	movlb	0	; select bank0
  6844  1292  00A1               	movwf	putch@txData
  6845                           
  6846                           ;mcc_generated_files/eusart.c: 174: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 175: {;mcc_generated_files/eusart.c: 176:     EUSART_Write(txData);
  6847  1293  0821               	movf	putch@txData,w
  6848  1294  3192  22B3         	fcall	_EUSART_Write
  6849  1296  0008               	return
  6850  1297                     __end_of_putch:	
  6851                           
  6852                           	psect	text12
  6853  12B3                     __ptext12:	
  6854 ;; *************** function _EUSART_Write *****************
  6855 ;; Defined at:
  6856 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  txData          1    wreg     unsigned char 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  txData          1    0[BANK0 ] unsigned char 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6870 ;;      Params:         0       0       0       0       0       0       0       0
  6871 ;;      Locals:         0       1       0       0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0       0
  6873 ;;      Totals:         0       1       0       0       0       0       0       0
  6874 ;;Total ram usage:        1 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    4
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_putch
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           
  6885                           ;psect for function _EUSART_Write
  6886  12B3                     _EUSART_Write:	
  6887                           
  6888                           ;incstack = 0
  6889                           ; Regs used in _EUSART_Write: [wreg]
  6890                           ;EUSART_Write@txData stored from wreg
  6891  12B3  0020               	movlb	0	; select bank0
  6892  12B4  00A0               	movwf	EUSART_Write@txData
  6893  12B5                     l725:	
  6894                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:     }
  6895                           
  6896                           
  6897                           ;mcc_generated_files/eusart.c: 162:     while(0 == PIR1bits.TXIF)
  6898  12B5  1E11               	btfss	17,4	;volatile
  6899  12B6  2AB5               	goto	l725
  6900                           
  6901                           ;mcc_generated_files/eusart.c: 166:     TXREG = txData;
  6902  12B7  0820               	movf	EUSART_Write@txData,w
  6903  12B8  0023               	movlb	3	; select bank3
  6904  12B9  009A               	movwf	26	;volatile
  6905  12BA  0008               	return
  6906  12BB                     __end_of_EUSART_Write:	
  6907                           
  6908                           	psect	text13
  6909  0A20                     __ptext13:	
  6910 ;; *************** function _check_data *****************
  6911 ;; Defined at:
  6912 ;;		line 613 in file "main.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  x               1    wreg     unsigned char 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  x               1    2[BANK0 ] unsigned char 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      _Bool 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6926 ;;      Params:         0       0       0       0       0       0       0       0
  6927 ;;      Locals:         0       1       0       0       0       0       0       0
  6928 ;;      Temps:          0       2       0       0       0       0       0       0
  6929 ;;      Totals:         0       3       0       0       0       0       0       0
  6930 ;;Total ram usage:        3 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    4
  6933 ;; This function calls:
  6934 ;;		Nothing
  6935 ;; This function is called by:
  6936 ;;		_main
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           
  6941                           ;psect for function _check_data
  6942  0A20                     _check_data:	
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  6946                           ;check_data@x stored from wreg
  6947  0A20  0020               	movlb	0	; select bank0
  6948  0A21  00A2               	movwf	check_data@x
  6949                           
  6950                           ;main.c: 613: _Bool check_data(uint8_t x);main.c: 614: {;main.c: 615:     switch(x)
  6951  0A22  2A27               	goto	l5630
  6952  0A23                     l5540:	
  6953  0A23  3001               	movlw	1
  6954  0A24  0008               	return
  6955  0A25                     l5624:	
  6956  0A25  3000               	movlw	0
  6957  0A26  0008               	return
  6958  0A27                     l5630:	
  6959  0A27  0822               	movf	check_data@x,w
  6960  0A28  00A0               	movwf	??_check_data
  6961  0A29  01A1               	clrf	??_check_data+1
  6962                           
  6963                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6964                           ; Switch size 1, requested type "simple"
  6965                           ; Number of cases is 1, Range of values is 0 to 0
  6966                           ; switch strategies available:
  6967                           ; Name         Instructions Cycles
  6968                           ; simple_byte            4     3 (average)
  6969                           ; direct_byte            8     6 (fixed)
  6970                           ; jumptable            260     6 (fixed)
  6971                           ;	Chosen strategy is simple_byte
  6972  0A2A  0821               	movf	??_check_data+1,w
  6973  0A2B  3A00               	xorlw	0	; case 0
  6974  0A2C  1903               	skipnz
  6975  0A2D  2A2F               	goto	l7882
  6976  0A2E  2A25               	goto	l5624
  6977  0A2F                     l7882:	
  6978                           
  6979                           ; Switch size 1, requested type "simple"
  6980                           ; Number of cases is 21, Range of values is 48 to 90
  6981                           ; switch strategies available:
  6982                           ; Name         Instructions Cycles
  6983                           ; simple_byte           64    33 (average)
  6984                           ; direct_byte           95     9 (fixed)
  6985                           ; jumptable            263     9 (fixed)
  6986                           ;	Chosen strategy is simple_byte
  6987  0A2F  0820               	movf	??_check_data,w
  6988  0A30  3A30               	xorlw	48	; case 48
  6989  0A31  1903               	skipnz
  6990  0A32  2A23               	goto	l5540
  6991  0A33  3A01               	xorlw	1	; case 49
  6992  0A34  1903               	skipnz
  6993  0A35  2A23               	goto	l5540
  6994  0A36  3A03               	xorlw	3	; case 50
  6995  0A37  1903               	skipnz
  6996  0A38  2A23               	goto	l5540
  6997  0A39  3A01               	xorlw	1	; case 51
  6998  0A3A  1903               	skipnz
  6999  0A3B  2A23               	goto	l5540
  7000  0A3C  3A07               	xorlw	7	; case 52
  7001  0A3D  1903               	skipnz
  7002  0A3E  2A23               	goto	l5540
  7003  0A3F  3A01               	xorlw	1	; case 53
  7004  0A40  1903               	skipnz
  7005  0A41  2A23               	goto	l5540
  7006  0A42  3A03               	xorlw	3	; case 54
  7007  0A43  1903               	skipnz
  7008  0A44  2A23               	goto	l5540
  7009  0A45  3A01               	xorlw	1	; case 55
  7010  0A46  1903               	skipnz
  7011  0A47  2A23               	goto	l5540
  7012  0A48  3A0F               	xorlw	15	; case 56
  7013  0A49  1903               	skipnz
  7014  0A4A  2A23               	goto	l5540
  7015  0A4B  3A01               	xorlw	1	; case 57
  7016  0A4C  1903               	skipnz
  7017  0A4D  2A23               	goto	l5540
  7018  0A4E  3A78               	xorlw	120	; case 65
  7019  0A4F  1903               	skipnz
  7020  0A50  2A23               	goto	l5540
  7021  0A51  3A03               	xorlw	3	; case 66
  7022  0A52  1903               	skipnz
  7023  0A53  2A23               	goto	l5540
  7024  0A54  3A01               	xorlw	1	; case 67
  7025  0A55  1903               	skipnz
  7026  0A56  2A23               	goto	l5540
  7027  0A57  3A07               	xorlw	7	; case 68
  7028  0A58  1903               	skipnz
  7029  0A59  2A23               	goto	l5540
  7030  0A5A  3A01               	xorlw	1	; case 69
  7031  0A5B  1903               	skipnz
  7032  0A5C  2A23               	goto	l5540
  7033  0A5D  3A03               	xorlw	3	; case 70
  7034  0A5E  1903               	skipnz
  7035  0A5F  2A23               	goto	l5540
  7036  0A60  3A01               	xorlw	1	; case 71
  7037  0A61  1903               	skipnz
  7038  0A62  2A23               	goto	l5540
  7039  0A63  3A13               	xorlw	19	; case 84
  7040  0A64  1903               	skipnz
  7041  0A65  2A23               	goto	l5540
  7042  0A66  3A01               	xorlw	1	; case 85
  7043  0A67  1903               	skipnz
  7044  0A68  2A23               	goto	l5540
  7045  0A69  3A0D               	xorlw	13	; case 88
  7046  0A6A  1903               	skipnz
  7047  0A6B  2A23               	goto	l5540
  7048  0A6C  3A02               	xorlw	2	; case 90
  7049  0A6D  1903               	skipnz
  7050  0A6E  2A23               	goto	l5540
  7051  0A6F  2A25               	goto	l5624
  7052  0A70  0008               	return
  7053  0A71                     __end_of_check_data:	
  7054                           
  7055                           	psect	text14
  7056  1505                     __ptext14:	
  7057 ;; *************** function _SYSTEM_Initialize *****************
  7058 ;; Defined at:
  7059 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;		None
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      void 
  7066 ;; Registers used:
  7067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7073 ;;      Params:         0       0       0       0       0       0       0       0
  7074 ;;      Locals:         0       0       0       0       0       0       0       0
  7075 ;;      Temps:          0       0       0       0       0       0       0       0
  7076 ;;      Totals:         0       0       0       0       0       0       0       0
  7077 ;;Total ram usage:        0 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    9
  7080 ;; This function calls:
  7081 ;;		_EUSART_Initialize
  7082 ;;		_EXT_INT_Initialize
  7083 ;;		_MTOUCH_Initialize
  7084 ;;		_OSCILLATOR_Initialize
  7085 ;;		_PIN_MANAGER_Initialize
  7086 ;;		_TMR0_Initialize
  7087 ;;		_TMR2_Initialize
  7088 ;;		_WDT_Initialize
  7089 ;; This function is called by:
  7090 ;;		_main
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           
  7095                           ;psect for function _SYSTEM_Initialize
  7096  1505                     _SYSTEM_Initialize:	
  7097                           
  7098                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7102  1505  3195  25B9  3195   	fcall	_PIN_MANAGER_Initialize
  7103                           
  7104                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  7105  1508  3192  228B  3195   	fcall	_OSCILLATOR_Initialize
  7106                           
  7107                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  7108  150B  3192  2277  3195   	fcall	_WDT_Initialize
  7109                           
  7110                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  7111  150E  3192  22AB  3195   	fcall	_TMR2_Initialize
  7112                           
  7113                           ;mcc_generated_files/mcc.c: 57:     EXT_INT_Initialize();
  7114  1511  3193  2348  3195   	fcall	_EXT_INT_Initialize
  7115                           
  7116                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  7117  1514  3194  24BE  3195   	fcall	_TMR0_Initialize
  7118                           
  7119                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
  7120  1517  3197  27CB  3195   	fcall	_EUSART_Initialize
  7121                           
  7122                           ;mcc_generated_files/mcc.c: 60:     MTOUCH_Initialize();
  7123  151A  3193  2354         	fcall	_MTOUCH_Initialize
  7124  151C  0008               	return
  7125  151D                     __end_of_SYSTEM_Initialize:	
  7126                           
  7127                           	psect	text15
  7128  1277                     __ptext15:	
  7129 ;; *************** function _WDT_Initialize *****************
  7130 ;; Defined at:
  7131 ;;		line 71 in file "mcc_generated_files/mcc.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      void 
  7138 ;; Registers used:
  7139 ;;		wreg
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7145 ;;      Params:         0       0       0       0       0       0       0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0       0
  7147 ;;      Temps:          0       0       0       0       0       0       0       0
  7148 ;;      Totals:         0       0       0       0       0       0       0       0
  7149 ;;Total ram usage:        0 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    4
  7152 ;; This function calls:
  7153 ;;		Nothing
  7154 ;; This function is called by:
  7155 ;;		_SYSTEM_Initialize
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           
  7160                           ;psect for function _WDT_Initialize
  7161  1277                     _WDT_Initialize:	
  7162                           
  7163                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x19;
  7164                           
  7165                           ;incstack = 0
  7166                           ; Regs used in _WDT_Initialize: [wreg]
  7167  1277  3019               	movlw	25
  7168  1278  0021               	movlb	1	; select bank1
  7169  1279  0097               	movwf	23	;volatile
  7170  127A  0008               	return
  7171  127B                     __end_of_WDT_Initialize:	
  7172                           
  7173                           	psect	text16
  7174  12AB                     __ptext16:	
  7175 ;; *************** function _TMR2_Initialize *****************
  7176 ;; Defined at:
  7177 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;		None
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7191 ;;      Params:         0       0       0       0       0       0       0       0
  7192 ;;      Locals:         0       0       0       0       0       0       0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0
  7194 ;;      Totals:         0       0       0       0       0       0       0       0
  7195 ;;Total ram usage:        0 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    4
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_SYSTEM_Initialize
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           
  7206                           ;psect for function _TMR2_Initialize
  7207  12AB                     _TMR2_Initialize:	
  7208                           
  7209                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  7210                           
  7211                           ;incstack = 0
  7212                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  7213  12AB  30FF               	movlw	255
  7214  12AC  0020               	movlb	0	; select bank0
  7215  12AD  009B               	movwf	27	;volatile
  7216                           
  7217                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  7218  12AE  019A               	clrf	26	;volatile
  7219                           
  7220                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  7221  12AF  1091               	bcf	17,1	;volatile
  7222                           
  7223                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  7224  12B0  3004               	movlw	4
  7225  12B1  009C               	movwf	28	;volatile
  7226  12B2  0008               	return
  7227  12B3                     __end_of_TMR2_Initialize:	
  7228                           
  7229                           	psect	text17
  7230  14BE                     __ptext17:	
  7231 ;; *************** function _TMR0_Initialize *****************
  7232 ;; Defined at:
  7233 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;		None
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7247 ;;      Params:         0       0       0       0       0       0       0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0       0
  7249 ;;      Temps:          0       1       0       0       0       0       0       0
  7250 ;;      Totals:         0       1       0       0       0       0       0       0
  7251 ;;Total ram usage:        1 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    5
  7254 ;; This function calls:
  7255 ;;		_TMR0_SetInterruptHandler
  7256 ;; This function is called by:
  7257 ;;		_SYSTEM_Initialize
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function _TMR0_Initialize
  7263  14BE                     _TMR0_Initialize:	
  7264                           
  7265                           ;mcc_generated_files/tmr0.c: 71:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7269  14BE  0021               	movlb	1	; select bank1
  7270  14BF  0815               	movf	21,w	;volatile
  7271  14C0  39C0               	andlw	192
  7272  14C1  3817               	iorlw	23
  7273  14C2  0095               	movwf	21	;volatile
  7274                           
  7275                           ;mcc_generated_files/tmr0.c: 74:     TMR0 = 0xF0;
  7276  14C3  30F0               	movlw	240
  7277  14C4  0020               	movlb	0	; select bank0
  7278  14C5  0095               	movwf	21	;volatile
  7279                           
  7280                           ;mcc_generated_files/tmr0.c: 77:     timer0ReloadVal= 240;
  7281  14C6  30F0               	movlw	240
  7282  14C7  00A2               	movwf	??_TMR0_Initialize
  7283  14C8  0822               	movf	??_TMR0_Initialize,w
  7284  14C9  0021               	movlb	1	; select bank1
  7285  14CA  00DC               	movwf	_timer0ReloadVal^(0+128)	;volatile
  7286                           
  7287                           ;mcc_generated_files/tmr0.c: 80:     INTCONbits.TMR0IF = 0;
  7288  14CB  110B               	bcf	11,2	;volatile
  7289                           
  7290                           ;mcc_generated_files/tmr0.c: 83:     INTCONbits.TMR0IE = 1;
  7291  14CC  168B               	bsf	11,5	;volatile
  7292                           
  7293                           ;mcc_generated_files/tmr0.c: 86:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  7294  14CD  304B               	movlw	low _TMR0_DefaultInterruptHandler
  7295  14CE  0020               	movlb	0	; select bank0
  7296  14CF  00A0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7297  14D0  3012               	movlw	high _TMR0_DefaultInterruptHandler
  7298  14D1  00A1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7299  14D2  3193  231E         	fcall	_TMR0_SetInterruptHandler
  7300  14D4  0008               	return
  7301  14D5                     __end_of_TMR0_Initialize:	
  7302                           
  7303                           	psect	text18
  7304  131E                     __ptext18:	
  7305 ;; *************** function _TMR0_SetInterruptHandler *****************
  7306 ;; Defined at:
  7307 ;;		line 154 in file "mcc_generated_files/tmr0.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7310 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;		None
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7322 ;;      Params:         0       2       0       0       0       0       0       0
  7323 ;;      Locals:         0       0       0       0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0
  7325 ;;      Totals:         0       2       0       0       0       0       0       0
  7326 ;;Total ram usage:        2 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    4
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_TMR0_Initialize
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           
  7337                           ;psect for function _TMR0_SetInterruptHandler
  7338  131E                     _TMR0_SetInterruptHandler:	
  7339                           
  7340                           ;mcc_generated_files/tmr0.c: 155:     TMR0_InterruptHandler = InterruptHandler;
  7341                           
  7342                           ;incstack = 0
  7343                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7344  131E  0020               	movlb	0	; select bank0
  7345  131F  0821               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  7346  1320  0021               	movlb	1	; select bank1
  7347  1321  00D1               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  7348  1322  0020               	movlb	0	; select bank0
  7349  1323  0820               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  7350  1324  0021               	movlb	1	; select bank1
  7351  1325  00D0               	movwf	_TMR0_InterruptHandler^(0+128)
  7352  1326  0008               	return
  7353  1327                     __end_of_TMR0_SetInterruptHandler:	
  7354                           
  7355                           	psect	text19
  7356  15B9                     __ptext19:	
  7357 ;; *************** function _PIN_MANAGER_Initialize *****************
  7358 ;; Defined at:
  7359 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;		None
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7373 ;;      Params:         0       0       0       0       0       0       0       0
  7374 ;;      Locals:         0       0       0       0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0
  7376 ;;      Totals:         0       0       0       0       0       0       0       0
  7377 ;;Total ram usage:        0 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    4
  7380 ;; This function calls:
  7381 ;;		Nothing
  7382 ;; This function is called by:
  7383 ;;		_SYSTEM_Initialize
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           
  7388                           ;psect for function _PIN_MANAGER_Initialize
  7389  15B9                     _PIN_MANAGER_Initialize:	
  7390                           
  7391                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x30;
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7395  15B9  3030               	movlw	48
  7396  15BA  0022               	movlb	2	; select bank2
  7397  15BB  008C               	movwf	12	;volatile
  7398                           
  7399                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  7400  15BC  018D               	clrf	13	;volatile
  7401                           
  7402                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x40;
  7403  15BD  3040               	movlw	64
  7404  15BE  008E               	movwf	14	;volatile
  7405                           
  7406                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x0F;
  7407  15BF  300F               	movlw	15
  7408  15C0  0021               	movlb	1	; select bank1
  7409  15C1  008C               	movwf	12	;volatile
  7410                           
  7411                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  7412  15C2  3060               	movlw	96
  7413  15C3  008D               	movwf	13	;volatile
  7414                           
  7415                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x13;
  7416  15C4  3013               	movlw	19
  7417  15C5  008E               	movwf	14	;volatile
  7418                           
  7419                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  7420  15C6  30FF               	movlw	255
  7421  15C7  0023               	movlb	3	; select bank3
  7422  15C8  008E               	movwf	14	;volatile
  7423                           
  7424                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  7425  15C9  3050               	movlw	80
  7426  15CA  008D               	movwf	13	;volatile
  7427                           
  7428                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x33;
  7429  15CB  3033               	movlw	51
  7430  15CC  008C               	movwf	12	;volatile
  7431                           
  7432                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  7433  15CD  0024               	movlb	4	; select bank4
  7434  15CE  018D               	clrf	13	;volatile
  7435                           
  7436                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  7437  15CF  018C               	clrf	12	;volatile
  7438                           
  7439                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  7440  15D0  0021               	movlb	1	; select bank1
  7441  15D1  1795               	bsf	21,7	;volatile
  7442                           
  7443                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  7444  15D2  0022               	movlb	2	; select bank2
  7445  15D3  019D               	clrf	29	;volatile
  7446  15D4  0008               	return
  7447  15D5                     __end_of_PIN_MANAGER_Initialize:	
  7448                           
  7449                           	psect	text20
  7450  128B                     __ptext20:	
  7451 ;; *************** function _OSCILLATOR_Initialize *****************
  7452 ;; Defined at:
  7453 ;;		line 63 in file "mcc_generated_files/mcc.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;		None
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, status,2
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7467 ;;      Params:         0       0       0       0       0       0       0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0
  7469 ;;      Temps:          0       0       0       0       0       0       0       0
  7470 ;;      Totals:         0       0       0       0       0       0       0       0
  7471 ;;Total ram usage:        0 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    4
  7474 ;; This function calls:
  7475 ;;		Nothing
  7476 ;; This function is called by:
  7477 ;;		_SYSTEM_Initialize
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           
  7482                           ;psect for function _OSCILLATOR_Initialize
  7483  128B                     _OSCILLATOR_Initialize:	
  7484                           
  7485                           ;mcc_generated_files/mcc.c: 66:     OSCCON = 0xF0;
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7489  128B  30F0               	movlw	240
  7490  128C  0021               	movlb	1	; select bank1
  7491  128D  0099               	movwf	25	;volatile
  7492                           
  7493                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  7494  128E  0022               	movlb	2	; select bank2
  7495  128F  0196               	clrf	22	;volatile
  7496  1290  0008               	return
  7497  1291                     __end_of_OSCILLATOR_Initialize:	
  7498                           
  7499                           	psect	text21
  7500  1354                     __ptext21:	
  7501 ;; *************** function _MTOUCH_Initialize *****************
  7502 ;; Defined at:
  7503 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;                  1    wreg      void 
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7517 ;;      Params:         0       0       0       0       0       0       0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    8
  7524 ;; This function calls:
  7525 ;;		_MTOUCH_Button_InitializeAll
  7526 ;;		_MTOUCH_Sensor_InitializeAll
  7527 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7528 ;;		_MTOUCH_Sensor_Scan_Initialize
  7529 ;; This function is called by:
  7530 ;;		_SYSTEM_Initialize
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _MTOUCH_Initialize
  7536  1354                     _MTOUCH_Initialize:	
  7537                           
  7538                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  7539                           
  7540                           ;incstack = 0
  7541                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7542  1354  3193  23E8  3193   	fcall	_MTOUCH_Sensor_InitializeAll
  7543                           
  7544                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  7545  1357  3196  260F  3193   	fcall	_MTOUCH_Button_InitializeAll
  7546                           
  7547                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  7548  135A  3194  2465  3193   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7549                           
  7550                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  7551  135D  3193  23C8         	fcall	_MTOUCH_Sensor_Scan_Initialize
  7552  135F  0008               	return
  7553  1360                     __end_of_MTOUCH_Initialize:	
  7554                           
  7555                           	psect	text22
  7556  13E8                     __ptext22:	
  7557 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  7558 ;; Defined at:
  7559 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;		None
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;  sensor          1    9[BANK0 ] enum E2878
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7573 ;;      Params:         0       0       0       0       0       0       0       0
  7574 ;;      Locals:         0       1       0       0       0       0       0       0
  7575 ;;      Temps:          0       1       0       0       0       0       0       0
  7576 ;;      Totals:         0       2       0       0       0       0       0       0
  7577 ;;Total ram usage:        2 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    7
  7580 ;; This function calls:
  7581 ;;		_MTOUCH_Sensor_Initialize
  7582 ;; This function is called by:
  7583 ;;		_MTOUCH_Initialize
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           
  7588                           ;psect for function _MTOUCH_Sensor_InitializeAll
  7589  13E8                     _MTOUCH_Sensor_InitializeAll:	
  7590                           
  7591                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  7592                           
  7593                           ;incstack = 0
  7594                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7595  13E8  0020               	movlb	0	; select bank0
  7596  13E9  01A9               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  7597  13EA                     l7030:	
  7598                           
  7599                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  7600  13EA  0829               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  7601  13EB  3194  24ED  3193   	fcall	_MTOUCH_Sensor_Initialize
  7602                           
  7603                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  7604  13EE  3001               	movlw	1
  7605  13EF  0020               	movlb	0	; select bank0
  7606  13F0  00A8               	movwf	??_MTOUCH_Sensor_InitializeAll
  7607  13F1  0828               	movf	??_MTOUCH_Sensor_InitializeAll,w
  7608  13F2  07A9               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  7609  13F3  3003               	movlw	3
  7610  13F4  0229               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  7611  13F5  1803               	btfsc	3,0
  7612  13F6  0008               	return
  7613  13F7  2BEA               	goto	l7030
  7614  13F8                     __end_of_MTOUCH_Sensor_InitializeAll:	
  7615                           
  7616                           	psect	text23
  7617  14ED                     __ptext23:	
  7618 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  7619 ;; Defined at:
  7620 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  sensor          1    wreg     enum E2878
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;  sensor          1    7[BANK0 ] enum E2878
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  1    wreg      enum E2882
  7627 ;; Registers used:
  7628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7634 ;;      Params:         0       0       0       0       0       0       0       0
  7635 ;;      Locals:         0       1       0       0       0       0       0       0
  7636 ;;      Temps:          0       1       0       0       0       0       0       0
  7637 ;;      Totals:         0       2       0       0       0       0       0       0
  7638 ;;Total ram usage:        2 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    6
  7641 ;; This function calls:
  7642 ;;		_MTOUCH_Sensor_Calibrate
  7643 ;;		_MTOUCH_Sensor_Enable
  7644 ;;		_Sensor_Sampled_Reset
  7645 ;;		___bmul
  7646 ;; This function is called by:
  7647 ;;		_MTOUCH_Sensor_InitializeAll
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function _MTOUCH_Sensor_Initialize
  7653  14ED                     _MTOUCH_Sensor_Initialize:	
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7657                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  7658  14ED  0020               	movlb	0	; select bank0
  7659  14EE  00A7               	movwf	MTOUCH_Sensor_Initialize@sensor
  7660                           
  7661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  7662  14EF  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7663  14F0  3194  2452  3194   	fcall	_MTOUCH_Sensor_Enable
  7664                           
  7665                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  7666  14F3  0020               	movlb	0	; select bank0
  7667  14F4  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7668  14F5  3194  243F  3194   	fcall	_MTOUCH_Sensor_Calibrate
  7669                           
  7670                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  7671  14F8  3009               	movlw	9
  7672  14F9  0020               	movlb	0	; select bank0
  7673  14FA  00A6               	movwf	??_MTOUCH_Sensor_Initialize
  7674  14FB  0826               	movf	??_MTOUCH_Sensor_Initialize,w
  7675  14FC  00A0               	movwf	___bmul@multiplicand
  7676  14FD  0827               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7677  14FE  3194  2409  3194   	fcall	___bmul
  7678  1501  3E50               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7679  1502  3192  22E8         	fcall	_Sensor_Sampled_Reset
  7680  1504  0008               	return
  7681  1505                     __end_of_MTOUCH_Sensor_Initialize:	
  7682                           
  7683                           	psect	text24
  7684  1452                     __ptext24:	
  7685 ;; *************** function _MTOUCH_Sensor_Enable *****************
  7686 ;; Defined at:
  7687 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;  sensor          1    wreg     enum E2878
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  sensor          1    5[BANK0 ] enum E2878
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7701 ;;      Params:         0       0       0       0       0       0       0       0
  7702 ;;      Locals:         0       1       0       0       0       0       0       0
  7703 ;;      Temps:          0       1       0       0       0       0       0       0
  7704 ;;      Totals:         0       2       0       0       0       0       0       0
  7705 ;;Total ram usage:        2 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    5
  7708 ;; This function calls:
  7709 ;;		___bmul
  7710 ;; This function is called by:
  7711 ;;		_MTOUCH_Sensor_Initialize
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           
  7716                           ;psect for function _MTOUCH_Sensor_Enable
  7717  1452                     _MTOUCH_Sensor_Enable:	
  7718                           
  7719                           ;incstack = 0
  7720                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7721                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  7722  1452  0020               	movlb	0	; select bank0
  7723  1453  00A5               	movwf	MTOUCH_Sensor_Enable@sensor
  7724                           
  7725                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  7726  1454  3003               	movlw	3
  7727  1455  0225               	subwf	MTOUCH_Sensor_Enable@sensor,w
  7728  1456  1803               	skipnc
  7729  1457  0008               	return
  7730                           
  7731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  7732  1458  3009               	movlw	9
  7733  1459  00A4               	movwf	??_MTOUCH_Sensor_Enable
  7734  145A  0824               	movf	??_MTOUCH_Sensor_Enable,w
  7735  145B  00A0               	movwf	___bmul@multiplicand
  7736  145C  0825               	movf	MTOUCH_Sensor_Enable@sensor,w
  7737  145D  3194  2409         	fcall	___bmul
  7738  145F  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  7739  1460  0086               	movwf	6
  7740  1461  3001               	movlw	1	; select bank2/3
  7741  1462  0087               	movwf	7
  7742  1463  1581               	bsf	1,3
  7743  1464  0008               	return
  7744  1465                     __end_of_MTOUCH_Sensor_Enable:	
  7745                           
  7746                           	psect	text25
  7747  160F                     __ptext25:	
  7748 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  7749 ;; Defined at:
  7750 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;		None
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  button          1   11[BANK0 ] enum E3069
  7755 ;; Return value:  Size  Location     Type
  7756 ;;                  1    wreg      void 
  7757 ;; Registers used:
  7758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7764 ;;      Params:         0       0       0       0       0       0       0       0
  7765 ;;      Locals:         0       1       0       0       0       0       0       0
  7766 ;;      Temps:          0       1       0       0       0       0       0       0
  7767 ;;      Totals:         0       2       0       0       0       0       0       0
  7768 ;;Total ram usage:        2 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    7
  7771 ;; This function calls:
  7772 ;;		_MTOUCH_Button_Initialize
  7773 ;;		_memcpy
  7774 ;; This function is called by:
  7775 ;;		_MTOUCH_Initialize
  7776 ;;		_main
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           
  7781                           ;psect for function _MTOUCH_Button_InitializeAll
  7782  160F                     _MTOUCH_Button_InitializeAll:	
  7783                           
  7784                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  7785                           
  7786                           ;incstack = 0
  7787                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7788  160F  3000               	movlw	low (_mtouch_button_init| (0+32768))
  7789  1610  0020               	movlb	0	; select bank0
  7790  1611  00A0               	movwf	memcpy@s1
  7791  1612  3098               	movlw	high (_mtouch_button_init| (0+32768))
  7792  1613  00A1               	movwf	memcpy@s1+1
  7793  1614  3030               	movlw	48
  7794  1615  00A2               	movwf	memcpy@n
  7795  1616  3000               	movlw	0
  7796  1617  00A3               	movwf	memcpy@n+1
  7797  1618  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  7798  1619  3197  2712  3196   	fcall	_memcpy
  7799                           
  7800                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  7801  161C  0020               	movlb	0	; select bank0
  7802  161D  01AB               	clrf	MTOUCH_Button_InitializeAll@button
  7803  161E                     l5062:	
  7804                           
  7805                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  7806  161E  082B               	movf	MTOUCH_Button_InitializeAll@button,w
  7807  161F  3188  2058  3196   	fcall	_MTOUCH_Button_Initialize
  7808                           
  7809                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  7810  1622  3001               	movlw	1
  7811  1623  0020               	movlb	0	; select bank0
  7812  1624  00AA               	movwf	??_MTOUCH_Button_InitializeAll
  7813  1625  082A               	movf	??_MTOUCH_Button_InitializeAll,w
  7814  1626  07AB               	addwf	MTOUCH_Button_InitializeAll@button,f
  7815  1627  3003               	movlw	3
  7816  1628  022B               	subwf	MTOUCH_Button_InitializeAll@button,w
  7817  1629  1803               	btfsc	3,0
  7818  162A  0008               	return
  7819  162B  2E1E               	goto	l5062
  7820  162C                     __end_of_MTOUCH_Button_InitializeAll:	
  7821                           
  7822                           	psect	text26
  7823  1712                     __ptext26:	
  7824 ;; *************** function _memcpy *****************
  7825 ;; Defined at:
  7826 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  d1              1    wreg     PTR void 
  7829 ;;		 -> mtouch_button(48), 
  7830 ;;  s1              2    0[BANK0 ] PTR const void 
  7831 ;;		 -> mtouch_button_init(48), 
  7832 ;;  n               2    2[BANK0 ] unsigned int 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;  d1              1    8[BANK0 ] PTR void 
  7835 ;;		 -> mtouch_button(48), 
  7836 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  7837 ;;		 -> mtouch_button_init(48), 
  7838 ;;  d               1    9[BANK0 ] PTR unsigned char 
  7839 ;;		 -> mtouch_button(48), 
  7840 ;;  tmp             1    7[BANK0 ] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      PTR void 
  7843 ;; Registers used:
  7844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7850 ;;      Params:         0       4       0       0       0       0       0       0
  7851 ;;      Locals:         0       5       0       0       0       0       0       0
  7852 ;;      Temps:          0       1       0       0       0       0       0       0
  7853 ;;      Totals:         0      10       0       0       0       0       0       0
  7854 ;;Total ram usage:       10 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    4
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		_MTOUCH_Button_InitializeAll
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           
  7865                           ;psect for function _memcpy
  7866  1712                     _memcpy:	
  7867                           
  7868                           ;incstack = 0
  7869                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  7870                           ;memcpy@d1 stored from wreg
  7871  1712  0020               	movlb	0	; select bank0
  7872  1713  00A8               	movwf	memcpy@d1
  7873  1714  0821               	movf	memcpy@s1+1,w
  7874  1715  00A6               	movwf	memcpy@s+1
  7875  1716  0820               	movf	memcpy@s1,w
  7876  1717  00A5               	movwf	memcpy@s
  7877  1718  0828               	movf	memcpy@d1,w
  7878  1719  00A4               	movwf	??_memcpy
  7879  171A  0824               	movf	??_memcpy,w
  7880  171B  00A9               	movwf	memcpy@d
  7881  171C                     l4928:	
  7882  171C  3001               	movlw	1
  7883  171D  02A2               	subwf	memcpy@n,f
  7884  171E  3000               	movlw	0
  7885  171F  3BA3               	subwfb	memcpy@n+1,f
  7886  1720  0A22               	incf	memcpy@n,w
  7887  1721  1903               	btfsc	3,2
  7888  1722  0A23               	incf	memcpy@n+1,w
  7889  1723  1903               	btfsc	3,2
  7890  1724  0008               	return
  7891  1725  0825               	movf	memcpy@s,w
  7892  1726  0084               	movwf	4
  7893  1727  0826               	movf	memcpy@s+1,w
  7894  1728  0085               	movwf	5
  7895  1729  0800               	movf	0,w	;code access
  7896  172A  00A4               	movwf	??_memcpy
  7897  172B  0824               	movf	??_memcpy,w
  7898  172C  00A7               	movwf	memcpy@tmp
  7899  172D  3001               	movlw	1
  7900  172E  07A5               	addwf	memcpy@s,f
  7901  172F  3000               	movlw	0
  7902  1730  3DA6               	addwfc	memcpy@s+1,f
  7903  1731  0827               	movf	memcpy@tmp,w
  7904  1732  00A4               	movwf	??_memcpy
  7905  1733  0829               	movf	memcpy@d,w
  7906  1734  0086               	movwf	6
  7907  1735  3001               	movlw	1	; select bank2/3
  7908  1736  0087               	movwf	7
  7909  1737  0824               	movf	??_memcpy,w
  7910  1738  0081               	movwf	1
  7911  1739  3001               	movlw	1
  7912  173A  00A4               	movwf	??_memcpy
  7913  173B  0824               	movf	??_memcpy,w
  7914  173C  07A9               	addwf	memcpy@d,f
  7915  173D  2F1C               	goto	l4928
  7916  173E                     __end_of_memcpy:	
  7917                           
  7918                           	psect	text27
  7919  1348                     __ptext27:	
  7920 ;; *************** function _EXT_INT_Initialize *****************
  7921 ;; Defined at:
  7922 ;;		line 78 in file "mcc_generated_files/ext_int.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;		None
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0, pclath, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7936 ;;      Params:         0       0       0       0       0       0       0       0
  7937 ;;      Locals:         0       0       0       0       0       0       0       0
  7938 ;;      Temps:          0       0       0       0       0       0       0       0
  7939 ;;      Totals:         0       0       0       0       0       0       0       0
  7940 ;;Total ram usage:        0 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    5
  7943 ;; This function calls:
  7944 ;;		_INT_SetInterruptHandler
  7945 ;; This function is called by:
  7946 ;;		_SYSTEM_Initialize
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           
  7951                           ;psect for function _EXT_INT_Initialize
  7952  1348                     _EXT_INT_Initialize:	
  7953                           
  7954                           ;mcc_generated_files/ext_int.c: 83:     (INTCONbits.INTF = 0);
  7955                           
  7956                           ;incstack = 0
  7957                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7958  1348  108B               	bcf	11,1	;volatile
  7959                           
  7960                           ;mcc_generated_files/ext_int.c: 84:     (OPTION_REGbits.INTEDG = 0);
  7961  1349  0021               	movlb	1	; select bank1
  7962  134A  1315               	bcf	21,6	;volatile
  7963                           
  7964                           ;mcc_generated_files/ext_int.c: 86:     INT_SetInterruptHandler(INT_DefaultInterruptHand
      +                          ler);
  7965  134B  304A               	movlw	low _INT_DefaultInterruptHandler
  7966  134C  0020               	movlb	0	; select bank0
  7967  134D  00A0               	movwf	INT_SetInterruptHandler@InterruptHandler
  7968  134E  3012               	movlw	high _INT_DefaultInterruptHandler
  7969  134F  00A1               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  7970  1350  3193  2315         	fcall	_INT_SetInterruptHandler
  7971                           
  7972                           ;mcc_generated_files/ext_int.c: 87:     (INTCONbits.INTE = 1);
  7973  1352  160B               	bsf	11,4	;volatile
  7974  1353  0008               	return
  7975  1354                     __end_of_EXT_INT_Initialize:	
  7976                           
  7977                           	psect	text28
  7978  1315                     __ptext28:	
  7979 ;; *************** function _INT_SetInterruptHandler *****************
  7980 ;; Defined at:
  7981 ;;		line 69 in file "mcc_generated_files/ext_int.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7984 ;;		 -> INT_DefaultInterruptHandler(1), 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;		None
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7996 ;;      Params:         0       2       0       0       0       0       0       0
  7997 ;;      Locals:         0       0       0       0       0       0       0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0       0
  7999 ;;      Totals:         0       2       0       0       0       0       0       0
  8000 ;;Total ram usage:        2 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    4
  8003 ;; This function calls:
  8004 ;;		Nothing
  8005 ;; This function is called by:
  8006 ;;		_EXT_INT_Initialize
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           
  8011                           ;psect for function _INT_SetInterruptHandler
  8012  1315                     _INT_SetInterruptHandler:	
  8013                           
  8014                           ;mcc_generated_files/ext_int.c: 70:     INT_InterruptHandler = InterruptHandler;
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  8018  1315  0020               	movlb	0	; select bank0
  8019  1316  0821               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  8020  1317  0021               	movlb	1	; select bank1
  8021  1318  00D3               	movwf	(_INT_InterruptHandler+1)^(0+128)
  8022  1319  0020               	movlb	0	; select bank0
  8023  131A  0820               	movf	INT_SetInterruptHandler@InterruptHandler,w
  8024  131B  0021               	movlb	1	; select bank1
  8025  131C  00D2               	movwf	_INT_InterruptHandler^(0+128)
  8026  131D  0008               	return
  8027  131E                     __end_of_INT_SetInterruptHandler:	
  8028                           
  8029                           	psect	text29
  8030  17CB                     __ptext29:	
  8031 ;; *************** function _EUSART_Initialize *****************
  8032 ;; Defined at:
  8033 ;;		line 81 in file "mcc_generated_files/eusart.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;		None
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;		None
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  1    wreg      void 
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0, pclath, cstack
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8047 ;;      Params:         0       0       0       0       0       0       0       0
  8048 ;;      Locals:         0       0       0       0       0       0       0       0
  8049 ;;      Temps:          0       0       0       0       0       0       0       0
  8050 ;;      Totals:         0       0       0       0       0       0       0       0
  8051 ;;Total ram usage:        0 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    5
  8054 ;; This function calls:
  8055 ;;		_EUSART_SetErrorHandler
  8056 ;;		_EUSART_SetFramingErrorHandler
  8057 ;;		_EUSART_SetOverrunErrorHandler
  8058 ;;		_EUSART_SetRxInterruptHandler
  8059 ;; This function is called by:
  8060 ;;		_SYSTEM_Initialize
  8061 ;; This function uses a non-reentrant model
  8062 ;;
  8063                           
  8064                           
  8065                           ;psect for function _EUSART_Initialize
  8066  17CB                     _EUSART_Initialize:	
  8067                           
  8068                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  8069                           
  8070                           ;incstack = 0
  8071                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8072  17CB  0021               	movlb	1	; select bank1
  8073  17CC  1291               	bcf	17,5	;volatile
  8074                           
  8075                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  8076  17CD  3022               	movlw	low _EUSART_Receive_ISR
  8077  17CE  0020               	movlb	0	; select bank0
  8078  17CF  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  8079  17D0  3008               	movlw	high _EUSART_Receive_ISR
  8080  17D1  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  8081  17D2  3193  230C  3197   	fcall	_EUSART_SetRxInterruptHandler
  8082                           
  8083                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  8084  17D5  3008               	movlw	8
  8085  17D6  0023               	movlb	3	; select bank3
  8086  17D7  009F               	movwf	31	;volatile
  8087                           
  8088                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  8089  17D8  3090               	movlw	144
  8090  17D9  009D               	movwf	29	;volatile
  8091                           
  8092                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  8093  17DA  3024               	movlw	36
  8094  17DB  009E               	movwf	30	;volatile
  8095                           
  8096                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  8097  17DC  3040               	movlw	64
  8098  17DD  009B               	movwf	27	;volatile
  8099                           
  8100                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  8101  17DE  3003               	movlw	3
  8102  17DF  009C               	movwf	28	;volatile
  8103                           
  8104                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  8105  17E0  3049               	movlw	low _EUSART_DefaultFramingErrorHandler
  8106  17E1  0020               	movlb	0	; select bank0
  8107  17E2  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  8108  17E3  3012               	movlw	high _EUSART_DefaultFramingErrorHandler
  8109  17E4  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  8110  17E5  3192  22FA  3197   	fcall	_EUSART_SetFramingErrorHandler
  8111                           
  8112                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  8113  17E8  306F               	movlw	low _EUSART_DefaultOverrunErrorHandler
  8114  17E9  0020               	movlb	0	; select bank0
  8115  17EA  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  8116  17EB  3012               	movlw	high _EUSART_DefaultOverrunErrorHandler
  8117  17EC  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  8118  17ED  3193  2303  3197   	fcall	_EUSART_SetOverrunErrorHandler
  8119                           
  8120                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  8121  17F0  304E               	movlw	low _EUSART_DefaultErrorHandler
  8122  17F1  0020               	movlb	0	; select bank0
  8123  17F2  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  8124  17F3  3012               	movlw	high _EUSART_DefaultErrorHandler
  8125  17F4  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  8126  17F5  3192  22F1         	fcall	_EUSART_SetErrorHandler
  8127                           
  8128                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  8129  17F7  0021               	movlb	1	; select bank1
  8130  17F8  01CE               	clrf	_eusartRxLastError^(0+128)	;volatile
  8131                           
  8132                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  8133  17F9  0020               	movlb	0	; select bank0
  8134  17FA  01EC               	clrf	_eusartRxHead	;volatile
  8135                           
  8136                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  8137  17FB  01EB               	clrf	_eusartRxTail	;volatile
  8138                           
  8139                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  8140  17FC  01EA               	clrf	_eusartRxCount	;volatile
  8141                           
  8142                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  8143  17FD  0021               	movlb	1	; select bank1
  8144  17FE  1691               	bsf	17,5	;volatile
  8145  17FF  0008               	return
  8146  1800                     __end_of_EUSART_Initialize:	
  8147                           
  8148                           	psect	text30
  8149  130C                     __ptext30:	
  8150 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  8151 ;; Defined at:
  8152 ;;		line 241 in file "mcc_generated_files/eusart.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8155 ;;		 -> EUSART_Receive_ISR(1), 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		wreg
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8167 ;;      Params:         0       2       0       0       0       0       0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0
  8170 ;;      Totals:         0       2       0       0       0       0       0       0
  8171 ;;Total ram usage:        2 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    4
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_EUSART_Initialize
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _EUSART_SetRxInterruptHandler
  8183  130C                     _EUSART_SetRxInterruptHandler:	
  8184                           
  8185                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  8186                           
  8187                           ;incstack = 0
  8188                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  8189  130C  0020               	movlb	0	; select bank0
  8190  130D  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  8191  130E  0021               	movlb	1	; select bank1
  8192  130F  00DB               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  8193  1310  0020               	movlb	0	; select bank0
  8194  1311  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  8195  1312  0021               	movlb	1	; select bank1
  8196  1313  00DA               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  8197  1314  0008               	return
  8198  1315                     __end_of_EUSART_SetRxInterruptHandler:	
  8199                           
  8200                           	psect	text31
  8201  1303                     __ptext31:	
  8202 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  8203 ;; Defined at:
  8204 ;;		line 232 in file "mcc_generated_files/eusart.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8207 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;		None
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  1    wreg      void 
  8212 ;; Registers used:
  8213 ;;		wreg
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8219 ;;      Params:         0       2       0       0       0       0       0       0
  8220 ;;      Locals:         0       0       0       0       0       0       0       0
  8221 ;;      Temps:          0       0       0       0       0       0       0       0
  8222 ;;      Totals:         0       2       0       0       0       0       0       0
  8223 ;;Total ram usage:        2 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    4
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		_EUSART_Initialize
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           
  8234                           ;psect for function _EUSART_SetOverrunErrorHandler
  8235  1303                     _EUSART_SetOverrunErrorHandler:	
  8236                           
  8237                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  8238                           
  8239                           ;incstack = 0
  8240                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  8241  1303  0020               	movlb	0	; select bank0
  8242  1304  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  8243  1305  0021               	movlb	1	; select bank1
  8244  1306  00D7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  8245  1307  0020               	movlb	0	; select bank0
  8246  1308  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  8247  1309  0021               	movlb	1	; select bank1
  8248  130A  00D6               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  8249  130B  0008               	return
  8250  130C                     __end_of_EUSART_SetOverrunErrorHandler:	
  8251                           
  8252                           	psect	text32
  8253  12FA                     __ptext32:	
  8254 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  8255 ;; Defined at:
  8256 ;;		line 228 in file "mcc_generated_files/eusart.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8259 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  8260 ;; Auto vars:     Size  Location     Type
  8261 ;;		None
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  1    wreg      void 
  8264 ;; Registers used:
  8265 ;;		wreg
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8271 ;;      Params:         0       2       0       0       0       0       0       0
  8272 ;;      Locals:         0       0       0       0       0       0       0       0
  8273 ;;      Temps:          0       0       0       0       0       0       0       0
  8274 ;;      Totals:         0       2       0       0       0       0       0       0
  8275 ;;Total ram usage:        2 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; Hardware stack levels required when called:    4
  8278 ;; This function calls:
  8279 ;;		Nothing
  8280 ;; This function is called by:
  8281 ;;		_EUSART_Initialize
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _EUSART_SetFramingErrorHandler
  8287  12FA                     _EUSART_SetFramingErrorHandler:	
  8288                           
  8289                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  8293  12FA  0020               	movlb	0	; select bank0
  8294  12FB  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  8295  12FC  0021               	movlb	1	; select bank1
  8296  12FD  00D9               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  8297  12FE  0020               	movlb	0	; select bank0
  8298  12FF  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  8299  1300  0021               	movlb	1	; select bank1
  8300  1301  00D8               	movwf	_EUSART_FramingErrorHandler^(0+128)
  8301  1302  0008               	return
  8302  1303                     __end_of_EUSART_SetFramingErrorHandler:	
  8303                           
  8304                           	psect	text33
  8305  12F1                     __ptext33:	
  8306 ;; *************** function _EUSART_SetErrorHandler *****************
  8307 ;; Defined at:
  8308 ;;		line 236 in file "mcc_generated_files/eusart.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8311 ;;		 -> EUSART_DefaultErrorHandler(1), 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;		None
  8314 ;; Return value:  Size  Location     Type
  8315 ;;                  1    wreg      void 
  8316 ;; Registers used:
  8317 ;;		wreg
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8323 ;;      Params:         0       2       0       0       0       0       0       0
  8324 ;;      Locals:         0       0       0       0       0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0
  8326 ;;      Totals:         0       2       0       0       0       0       0       0
  8327 ;;Total ram usage:        2 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    4
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_EUSART_Initialize
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           
  8338                           ;psect for function _EUSART_SetErrorHandler
  8339  12F1                     _EUSART_SetErrorHandler:	
  8340                           
  8341                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  8342                           
  8343                           ;incstack = 0
  8344                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  8345  12F1  0020               	movlb	0	; select bank0
  8346  12F2  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  8347  12F3  0021               	movlb	1	; select bank1
  8348  12F4  00D5               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  8349  12F5  0020               	movlb	0	; select bank0
  8350  12F6  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  8351  12F7  0021               	movlb	1	; select bank1
  8352  12F8  00D4               	movwf	_EUSART_ErrorHandler^(0+128)
  8353  12F9  0008               	return
  8354  12FA                     __end_of_EUSART_SetErrorHandler:	
  8355                           
  8356                           	psect	text34
  8357  15F2                     __ptext34:	
  8358 ;; *************** function _MTOUCH_Service_Mainloop *****************
  8359 ;; Defined at:
  8360 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;		None
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;		None
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      _Bool 
  8367 ;; Registers used:
  8368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8374 ;;      Params:         0       0       0       0       0       0       0       0
  8375 ;;      Locals:         0       0       0       0       0       0       0       0
  8376 ;;      Temps:          0       1       0       0       0       0       0       0
  8377 ;;      Totals:         0       1       0       0       0       0       0       0
  8378 ;;Total ram usage:        1 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:   11
  8381 ;; This function calls:
  8382 ;;		_MTOUCH_Button_ServiceAll
  8383 ;;		_MTOUCH_Sensor_SampleAll
  8384 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  8385 ;;		_MTOUCH_Tick
  8386 ;;		_MTOUCH_needReburst
  8387 ;; This function is called by:
  8388 ;;		_main
  8389 ;;		_touch_example
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           
  8394                           ;psect for function _MTOUCH_Service_Mainloop
  8395  15F2                     _MTOUCH_Service_Mainloop:	
  8396                           
  8397                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  8398                           
  8399                           ;incstack = 0
  8400                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8401  15F2  0021               	movlb	1	; select bank1
  8402  15F3  01CF               	clrf	_mtouch_time_toScan^(0+128)
  8403  15F4  0ACF               	incf	_mtouch_time_toScan^(0+128),f
  8404                           
  8405                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  8406                           
  8407                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  8408  15F5  3194  247A  3195   	fcall	_MTOUCH_Sensor_SampleAll
  8409  15F8  3A00               	xorlw	0
  8410  15F9  1D03               	skipz
  8411  15FA  2DFD               	goto	l7272
  8412                           
  8413                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  8414  15FB  3000               	movlw	0
  8415  15FC  0008               	return
  8416  15FD                     l7272:	
  8417                           
  8418                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  8419  15FD  3193  23B8  3195   	fcall	_MTOUCH_Button_ServiceAll
  8420                           
  8421                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  8422  1600  3180  2002  3195   	fcall	_MTOUCH_needReburst
  8423  1603  0020               	movlb	0	; select bank0
  8424  1604  00D3               	movwf	??_MTOUCH_Service_Mainloop
  8425  1605  0853               	movf	??_MTOUCH_Service_Mainloop,w
  8426  1606  0021               	movlb	1	; select bank1
  8427  1607  00CF               	movwf	_mtouch_time_toScan^(0+128)
  8428                           
  8429                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  8430  1608  3194  2465  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  8431                           
  8432                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  8433  160B  3192  226C         	fcall	_MTOUCH_Tick
  8434                           
  8435                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  8436  160D  3001               	movlw	1
  8437  160E  0008               	return
  8438  160F                     __end_of_MTOUCH_Service_Mainloop:	
  8439                           
  8440                           	psect	text35
  8441  0002                     __ptext35:	
  8442 ;; *************** function _MTOUCH_needReburst *****************
  8443 ;; Defined at:
  8444 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  needReburst     1    0        _Bool 
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      _Bool 
  8451 ;; Registers used:
  8452 ;;		wreg, status,2
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8458 ;;      Params:         0       0       0       0       0       0       0       0
  8459 ;;      Locals:         0       1       0       0       0       0       0       0
  8460 ;;      Temps:          0       0       0       0       0       0       0       0
  8461 ;;      Totals:         0       1       0       0       0       0       0       0
  8462 ;;Total ram usage:        1 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    4
  8465 ;; This function calls:
  8466 ;;		Nothing
  8467 ;; This function is called by:
  8468 ;;		_MTOUCH_Service_Mainloop
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           
  8473                           ;psect for function _MTOUCH_needReburst
  8474  0002                     _MTOUCH_needReburst:	
  8475                           
  8476                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  8477                           
  8478                           ;incstack = 0
  8479                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  8480  0002  3000               	movlw	0
  8481  0003  0008               	return
  8482  0004                     __end_of_MTOUCH_needReburst:	
  8483                           
  8484                           	psect	text36
  8485  126C                     __ptext36:	
  8486 ;; *************** function _MTOUCH_Tick *****************
  8487 ;; Defined at:
  8488 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;		None
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;		None
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  1    wreg      void 
  8495 ;; Registers used:
  8496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8502 ;;      Params:         0       0       0       0       0       0       0       0
  8503 ;;      Locals:         0       0       0       0       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0       0       0       0
  8505 ;;      Totals:         0       0       0       0       0       0       0       0
  8506 ;;Total ram usage:        0 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    6
  8509 ;; This function calls:
  8510 ;;		_MTOUCH_Button_Tick
  8511 ;; This function is called by:
  8512 ;;		_MTOUCH_Service_Mainloop
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           
  8517                           ;psect for function _MTOUCH_Tick
  8518  126C                     _MTOUCH_Tick:	
  8519                           
  8520                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  8521                           
  8522                           ;incstack = 0
  8523                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8524  126C  3194  24D5         	fcall	_MTOUCH_Button_Tick
  8525  126E  0008               	return
  8526  126F                     __end_of_MTOUCH_Tick:	
  8527                           
  8528                           	psect	text37
  8529  14D5                     __ptext37:	
  8530 ;; *************** function _MTOUCH_Button_Tick *****************
  8531 ;; Defined at:
  8532 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;		None
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  i               1    4[BANK0 ] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  1    wreg      void 
  8539 ;; Registers used:
  8540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8546 ;;      Params:         0       0       0       0       0       0       0       0
  8547 ;;      Locals:         0       1       0       0       0       0       0       0
  8548 ;;      Temps:          0       1       0       0       0       0       0       0
  8549 ;;      Totals:         0       2       0       0       0       0       0       0
  8550 ;;Total ram usage:        2 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    5
  8553 ;; This function calls:
  8554 ;;		_Button_Tick_helper
  8555 ;; This function is called by:
  8556 ;;		_MTOUCH_Tick
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           
  8561                           ;psect for function _MTOUCH_Button_Tick
  8562  14D5                     _MTOUCH_Button_Tick:	
  8563                           
  8564                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  8565                           
  8566                           ;incstack = 0
  8567                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8568  14D5  0020               	movlb	0	; select bank0
  8569  14D6  01A4               	clrf	MTOUCH_Button_Tick@i
  8570  14D7                     l5084:	
  8571                           
  8572                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  8573  14D7  0824               	movf	MTOUCH_Button_Tick@i,w
  8574  14D8  00A3               	movwf	??_MTOUCH_Button_Tick
  8575  14D9  3003               	movlw	3
  8576  14DA                     u4005:	
  8577  14DA  35A3               	lslf	??_MTOUCH_Button_Tick,f
  8578  14DB  3EFF               	addlw	-1
  8579  14DC  1D03               	skipz
  8580  14DD  2CDA               	goto	u4005
  8581  14DE  3523               	lslf	??_MTOUCH_Button_Tick,w
  8582  14DF  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  8583  14E0  3196  26C0  3194   	fcall	_Button_Tick_helper
  8584                           
  8585                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  8586  14E3  3001               	movlw	1
  8587  14E4  0020               	movlb	0	; select bank0
  8588  14E5  00A3               	movwf	??_MTOUCH_Button_Tick
  8589  14E6  0823               	movf	??_MTOUCH_Button_Tick,w
  8590  14E7  07A4               	addwf	MTOUCH_Button_Tick@i,f
  8591  14E8  3003               	movlw	3
  8592  14E9  0224               	subwf	MTOUCH_Button_Tick@i,w
  8593  14EA  1803               	btfsc	3,0
  8594  14EB  0008               	return
  8595  14EC  2CD7               	goto	l5084
  8596  14ED                     __end_of_MTOUCH_Button_Tick:	
  8597                           
  8598                           	psect	text38
  8599  16C0                     __ptext38:	
  8600 ;; *************** function _Button_Tick_helper *****************
  8601 ;; Defined at:
  8602 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;  button          1    wreg     PTR struct .
  8605 ;;		 -> mtouch_button(48), 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  button          1    2[BANK0 ] PTR struct .
  8608 ;;		 -> mtouch_button(48), 
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      void 
  8611 ;; Registers used:
  8612 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8618 ;;      Params:         0       0       0       0       0       0       0       0
  8619 ;;      Locals:         0       1       0       0       0       0       0       0
  8620 ;;      Temps:          0       2       0       0       0       0       0       0
  8621 ;;      Totals:         0       3       0       0       0       0       0       0
  8622 ;;Total ram usage:        3 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    4
  8625 ;; This function calls:
  8626 ;;		Nothing
  8627 ;; This function is called by:
  8628 ;;		_MTOUCH_Button_Tick
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           
  8633                           ;psect for function _Button_Tick_helper
  8634  16C0                     _Button_Tick_helper:	
  8635                           
  8636                           ;incstack = 0
  8637                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  8638                           ;Button_Tick_helper@button stored from wreg
  8639  16C0  0020               	movlb	0	; select bank0
  8640  16C1  00A2               	movwf	Button_Tick_helper@button
  8641                           
  8642                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  8643  16C2  0822               	movf	Button_Tick_helper@button,w
  8644  16C3  3E02               	addlw	2
  8645  16C4  0086               	movwf	6
  8646  16C5  3001               	movlw	1	; select bank2/3
  8647  16C6  0087               	movwf	7
  8648  16C7  3002               	movlw	2
  8649  16C8  0601               	xorwf	1,w
  8650  16C9  1D03               	btfss	3,2
  8651  16CA  0008               	return
  8652                           
  8653                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  8654  16CB  0822               	movf	Button_Tick_helper@button,w
  8655  16CC  3E0A               	addlw	10
  8656  16CD  0086               	movwf	6
  8657  16CE  3001               	movlw	1	; select bank2/3
  8658  16CF  0087               	movwf	7
  8659  16D0  3001               	movlw	1
  8660  16D1  0781               	addwf	1,f
  8661  16D2  3141               	addfsr 1,1
  8662  16D3  1803               	skipnc
  8663  16D4  0A81               	incf	1,f
  8664                           
  8665                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  8666  16D5  0822               	movf	Button_Tick_helper@button,w
  8667  16D6  3E0A               	addlw	10
  8668  16D7  0086               	movwf	6
  8669  16D8  3001               	movlw	1	; select bank2/3
  8670  16D9  0087               	movwf	7
  8671  16DA  0016               	moviw fsr1++
  8672  16DB  0401               	iorwf	1,w
  8673  16DC  1D03               	btfss	3,2
  8674  16DD  0008               	return
  8675                           
  8676                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  8677  16DE  0822               	movf	Button_Tick_helper@button,w
  8678  16DF  3E0A               	addlw	10
  8679  16E0  0086               	movwf	6
  8680  16E1  3001               	movlw	1	; select bank2/3
  8681  16E2  0087               	movwf	7
  8682  16E3  30FF               	movlw	255
  8683  16E4  3FC0               	movwi [0]fsr1
  8684  16E5  30FF               	movlw	255
  8685  16E6  3FC1               	movwi [1]fsr1
  8686  16E7  0008               	return
  8687  16E8                     __end_of_Button_Tick_helper:	
  8688                           
  8689                           	psect	text39
  8690  1465                     __ptext39:	
  8691 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  8692 ;; Defined at:
  8693 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;		None
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  sensor          1    2[BANK0 ] PTR struct .
  8698 ;;		 -> mtouch_sensor(27), 
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  1    wreg      void 
  8701 ;; Registers used:
  8702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8708 ;;      Params:         0       0       0       0       0       0       0       0
  8709 ;;      Locals:         0       1       0       0       0       0       0       0
  8710 ;;      Temps:          0       1       0       0       0       0       0       0
  8711 ;;      Totals:         0       2       0       0       0       0       0       0
  8712 ;;Total ram usage:        2 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    5
  8715 ;; This function calls:
  8716 ;;		_Sensor_Sampled_Reset
  8717 ;; This function is called by:
  8718 ;;		_MTOUCH_Initialize
  8719 ;;		_MTOUCH_Service_Mainloop
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           
  8724                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  8725  1465                     _MTOUCH_Sensor_Sampled_ResetAll:	
  8726                           
  8727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  8728                           
  8729                           ;incstack = 0
  8730                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  8731  1465  3050               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  8732  1466  0020               	movlb	0	; select bank0
  8733  1467  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  8734  1468  0821               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  8735  1469  00A2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  8736  146A                     L3:	
  8737  146A  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  8738  146B  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  8739  146C  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  8740  146D  0221               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  8741  146E  1C03               	btfss	3,0
  8742  146F  0008               	return
  8743                           
  8744                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  8745  1470  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  8746  1471  3192  22E8  3194   	fcall	_Sensor_Sampled_Reset
  8747                           
  8748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  8749  1474  3009               	movlw	9
  8750  1475  0020               	movlb	0	; select bank0
  8751  1476  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  8752  1477  0821               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  8753  1478  07A2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  8754  1479  2C6A               	goto	L3
  8755  147A                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  8756                           
  8757                           	psect	text40
  8758  12E8                     __ptext40:	
  8759 ;; *************** function _Sensor_Sampled_Reset *****************
  8760 ;; Defined at:
  8761 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;  sensor          1    wreg     PTR struct .
  8764 ;;		 -> mtouch_sensor(27), 
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  sensor          1    0[BANK0 ] PTR struct .
  8767 ;;		 -> mtouch_sensor(27), 
  8768 ;; Return value:  Size  Location     Type
  8769 ;;                  1    wreg      void 
  8770 ;; Registers used:
  8771 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8772 ;; Tracked objects:
  8773 ;;		On entry : 0/0
  8774 ;;		On exit  : 0/0
  8775 ;;		Unchanged: 0/0
  8776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8777 ;;      Params:         0       0       0       0       0       0       0       0
  8778 ;;      Locals:         0       1       0       0       0       0       0       0
  8779 ;;      Temps:          0       0       0       0       0       0       0       0
  8780 ;;      Totals:         0       1       0       0       0       0       0       0
  8781 ;;Total ram usage:        1 bytes
  8782 ;; Hardware stack levels used:    1
  8783 ;; Hardware stack levels required when called:    4
  8784 ;; This function calls:
  8785 ;;		Nothing
  8786 ;; This function is called by:
  8787 ;;		_MTOUCH_Sensor_Initialize
  8788 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           
  8793                           ;psect for function _Sensor_Sampled_Reset
  8794  12E8                     _Sensor_Sampled_Reset:	
  8795                           
  8796                           ;incstack = 0
  8797                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8798                           ;Sensor_Sampled_Reset@sensor stored from wreg
  8799  12E8  0020               	movlb	0	; select bank0
  8800  12E9  00A0               	movwf	Sensor_Sampled_Reset@sensor
  8801                           
  8802                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  8803  12EA  0820               	movf	Sensor_Sampled_Reset@sensor,w
  8804  12EB  3E08               	addlw	8
  8805  12EC  0086               	movwf	6
  8806  12ED  3001               	movlw	1	; select bank2/3
  8807  12EE  0087               	movwf	7
  8808  12EF  1001               	bcf	1,0
  8809  12F0  0008               	return
  8810  12F1                     __end_of_Sensor_Sampled_Reset:	
  8811                           
  8812                           	psect	text41
  8813  147A                     __ptext41:	
  8814 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  8815 ;; Defined at:
  8816 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8817 ;; Parameters:    Size  Location     Type
  8818 ;;		None
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;  group           1   50[BANK0 ] unsigned char 
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  1    wreg      _Bool 
  8823 ;; Registers used:
  8824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8830 ;;      Params:         0       0       0       0       0       0       0       0
  8831 ;;      Locals:         0       1       0       0       0       0       0       0
  8832 ;;      Temps:          0       1       0       0       0       0       0       0
  8833 ;;      Totals:         0       2       0       0       0       0       0       0
  8834 ;;Total ram usage:        2 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:   10
  8837 ;; This function calls:
  8838 ;;		_Sensor_Service
  8839 ;; This function is called by:
  8840 ;;		_MTOUCH_Service_Mainloop
  8841 ;; This function uses a non-reentrant model
  8842 ;;
  8843                           
  8844                           
  8845                           ;psect for function _MTOUCH_Sensor_SampleAll
  8846  147A                     _MTOUCH_Sensor_SampleAll:	
  8847                           
  8848                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  8849                           
  8850                           ;incstack = 0
  8851                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8852  147A  0020               	movlb	0	; select bank0
  8853  147B  01D2               	clrf	MTOUCH_Sensor_SampleAll@group
  8854  147C                     l7138:	
  8855                           
  8856                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  8857  147C  0852               	movf	MTOUCH_Sensor_SampleAll@group,w
  8858  147D  318D  2588  3194   	fcall	_Sensor_Service
  8859  1480  3A00               	xorlw	0
  8860  1481  1903               	skipnz
  8861  1482  2C85               	goto	l7144
  8862                           
  8863                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  8864  1483  3000               	movlw	0
  8865  1484  0008               	return
  8866  1485                     l7144:	
  8867                           
  8868                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  8869  1485  3001               	movlw	1
  8870  1486  0020               	movlb	0	; select bank0
  8871  1487  00D1               	movwf	??_MTOUCH_Sensor_SampleAll
  8872  1488  0851               	movf	??_MTOUCH_Sensor_SampleAll,w
  8873  1489  07D2               	addwf	MTOUCH_Sensor_SampleAll@group,f
  8874  148A  3002               	movlw	2
  8875  148B  0252               	subwf	MTOUCH_Sensor_SampleAll@group,w
  8876  148C  1C03               	skipc
  8877  148D  2C7C               	goto	l7138
  8878                           
  8879                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  8880  148E  3001               	movlw	1
  8881  148F  0008               	return
  8882  1490                     __end_of_MTOUCH_Sensor_SampleAll:	
  8883                           
  8884                           	psect	text42
  8885  0D88                     __ptext42:	
  8886 ;; *************** function _Sensor_Service *****************
  8887 ;; Defined at:
  8888 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8889 ;; Parameters:    Size  Location     Type
  8890 ;;  scanGroup       1    wreg     unsigned char 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  scanGroup       1   45[BANK0 ] unsigned char 
  8893 ;;  sensor_adc2     1   48[BANK0 ] PTR struct .
  8894 ;;		 -> mtouch_sensor(27), 
  8895 ;;  sensor_adc1     1   47[BANK0 ] PTR struct .
  8896 ;;		 -> NULL(0), mtouch_sensor(27), 
  8897 ;;  error           1   46[BANK0 ] enum E2882
  8898 ;; Return value:  Size  Location     Type
  8899 ;;                  1    wreg      enum E2882
  8900 ;; Registers used:
  8901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8907 ;;      Params:         0       0       0       0       0       0       0       0
  8908 ;;      Locals:         0       4       0       0       0       0       0       0
  8909 ;;      Temps:          0       3       0       0       0       0       0       0
  8910 ;;      Totals:         0       7       0       0       0       0       0       0
  8911 ;;Total ram usage:        7 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    9
  8914 ;; This function calls:
  8915 ;;		_Sensor_Acquisition
  8916 ;;		_Sensor_DefaultCallback
  8917 ;;		_Sensor_RawSample_Update
  8918 ;;		_Sensor_isEnabled
  8919 ;;		_Sensor_setSampled
  8920 ;; This function is called by:
  8921 ;;		_MTOUCH_Sensor_SampleAll
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function _Sensor_Service
  8927  0D88                     _Sensor_Service:	
  8928                           
  8929                           ;incstack = 0
  8930                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8931                           ;Sensor_Service@scanGroup stored from wreg
  8932  0D88  0020               	movlb	0	; select bank0
  8933  0D89  00CD               	movwf	Sensor_Service@scanGroup
  8934                           
  8935                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  8936  0D8A  084D               	movf	Sensor_Service@scanGroup,w
  8937  0D8B  00CA               	movwf	??_Sensor_Service
  8938  0D8C  01CB               	clrf	??_Sensor_Service+1
  8939  0D8D  35CA               	lslf	??_Sensor_Service,f
  8940  0D8E  0DCB               	rlf	??_Sensor_Service+1,f
  8941  0D8F  308E               	movlw	low (_sensor_scan_group| (0+32768))
  8942  0D90  074A               	addwf	??_Sensor_Service,w
  8943  0D91  0084               	movwf	4
  8944  0D92  3098               	movlw	high (_sensor_scan_group| (0+32768))
  8945  0D93  3D4B               	addwfc	??_Sensor_Service+1,w
  8946  0D94  0085               	movwf	5
  8947  0D95  0800               	movf	0,w	;code access
  8948  0D96  00CC               	movwf	??_Sensor_Service+2
  8949  0D97  084C               	movf	??_Sensor_Service+2,w
  8950  0D98  00CF               	movwf	Sensor_Service@sensor_adc1
  8951                           
  8952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  8953  0D99  084D               	movf	Sensor_Service@scanGroup,w
  8954  0D9A  00CA               	movwf	??_Sensor_Service
  8955  0D9B  01CB               	clrf	??_Sensor_Service+1
  8956  0D9C  35CA               	lslf	??_Sensor_Service,f
  8957  0D9D  0DCB               	rlf	??_Sensor_Service+1,f
  8958  0D9E  308F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  8959  0D9F  074A               	addwf	??_Sensor_Service,w
  8960  0DA0  0084               	movwf	4
  8961  0DA1  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  8962  0DA2  3D4B               	addwfc	??_Sensor_Service+1,w
  8963  0DA3  0085               	movwf	5
  8964  0DA4  0800               	movf	0,w	;code access
  8965  0DA5  00CC               	movwf	??_Sensor_Service+2
  8966  0DA6  084C               	movf	??_Sensor_Service+2,w
  8967  0DA7  00D0               	movwf	Sensor_Service@sensor_adc2
  8968                           
  8969                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  8970  0DA8  0850               	movf	Sensor_Service@sensor_adc2,w
  8971  0DA9  00CA               	movwf	??_Sensor_Service
  8972  0DAA  084A               	movf	??_Sensor_Service,w
  8973  0DAB  00C6               	movwf	Sensor_Acquisition@sensor_adc2
  8974  0DAC  084F               	movf	Sensor_Service@sensor_adc1,w
  8975  0DAD  318A  22C6  318D   	fcall	_Sensor_Acquisition
  8976  0DB0  0020               	movlb	0	; select bank0
  8977  0DB1  00CB               	movwf	??_Sensor_Service+1
  8978  0DB2  084B               	movf	??_Sensor_Service+1,w
  8979  0DB3  00CE               	movwf	Sensor_Service@error
  8980                           
  8981                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  8982  0DB4  2DF7               	goto	l7072
  8983  0DB5                     l7050:	
  8984                           
  8985                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  8986  0DB5  084F               	movf	Sensor_Service@sensor_adc1,w
  8987  0DB6  3194  242D  318D   	fcall	_Sensor_isEnabled
  8988  0DB9  3A00               	xorlw	0
  8989  0DBA  1903               	skipnz
  8990  0DBB  2DD5               	goto	l7060
  8991                           
  8992                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  8993  0DBC  0020               	movlb	0	; select bank0
  8994  0DBD  086E               	movf	_lowpowerActivated,w
  8995  0DBE  1D03               	btfss	3,2
  8996  0DBF  2DC4               	goto	l7056
  8997                           
  8998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  8999  0DC0  084F               	movf	Sensor_Service@sensor_adc1,w
  9000  0DC1  3196  26E8  318D   	fcall	_Sensor_RawSample_Update
  9001  0DC4                     l7056:	
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  9004  0DC4  0020               	movlb	0	; select bank0
  9005  0DC5  084F               	movf	Sensor_Service@sensor_adc1,w
  9006  0DC6  3192  22DF  318D   	fcall	_Sensor_setSampled
  9007                           
  9008                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  9009  0DC9  0020               	movlb	0	; select bank0
  9010  0DCA  084F               	movf	Sensor_Service@sensor_adc1,w
  9011  0DCB  0086               	movwf	6
  9012  0DCC  3001               	movlw	1	; select bank2/3
  9013  0DCD  0087               	movwf	7
  9014  0DCE  0801               	movf	1,w
  9015  0DCF  00CA               	movwf	??_Sensor_Service
  9016  0DD0  084A               	movf	??_Sensor_Service,w
  9017  0DD1  00A0               	movwf	Sensor_DefaultCallback@sensor
  9018  0DD2  3192  224D  318D   	fcall	_Sensor_DefaultCallback
  9019  0DD5                     l7060:	
  9020                           
  9021                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  9022  0DD5  0020               	movlb	0	; select bank0
  9023  0DD6  0850               	movf	Sensor_Service@sensor_adc2,w
  9024  0DD7  3194  242D  318D   	fcall	_Sensor_isEnabled
  9025  0DDA  3A00               	xorlw	0
  9026  0DDB  1903               	skipnz
  9027  0DDC  2E1A               	goto	l7074
  9028                           
  9029                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  9030  0DDD  0020               	movlb	0	; select bank0
  9031  0DDE  086E               	movf	_lowpowerActivated,w
  9032  0DDF  1D03               	btfss	3,2
  9033  0DE0  2DE5               	goto	l7066
  9034                           
  9035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  9036  0DE1  0850               	movf	Sensor_Service@sensor_adc2,w
  9037  0DE2  3196  26E8  318D   	fcall	_Sensor_RawSample_Update
  9038  0DE5                     l7066:	
  9039                           
  9040                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  9041  0DE5  0020               	movlb	0	; select bank0
  9042  0DE6  0850               	movf	Sensor_Service@sensor_adc2,w
  9043  0DE7  3192  22DF  318D   	fcall	_Sensor_setSampled
  9044                           
  9045                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  9046  0DEA  0020               	movlb	0	; select bank0
  9047  0DEB  0850               	movf	Sensor_Service@sensor_adc2,w
  9048  0DEC  0086               	movwf	6
  9049  0DED  3001               	movlw	1	; select bank2/3
  9050  0DEE  0087               	movwf	7
  9051  0DEF  0801               	movf	1,w
  9052  0DF0  00CA               	movwf	??_Sensor_Service
  9053  0DF1  084A               	movf	??_Sensor_Service,w
  9054  0DF2  00A0               	movwf	Sensor_DefaultCallback@sensor
  9055  0DF3  3192  224D  318D   	fcall	_Sensor_DefaultCallback
  9056  0DF6  2E1A               	goto	l7074
  9057  0DF7                     l7072:	
  9058  0DF7  084E               	movf	Sensor_Service@error,w
  9059  0DF8  00CA               	movwf	??_Sensor_Service
  9060  0DF9  01CB               	clrf	??_Sensor_Service+1
  9061  0DFA  1BCA               	btfsc	??_Sensor_Service,7
  9062  0DFB  03CB               	decf	??_Sensor_Service+1,f
  9063                           
  9064                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  9065                           ; Switch size 1, requested type "simple"
  9066                           ; Number of cases is 2, Range of values is 0 to 255
  9067                           ; switch strategies available:
  9068                           ; Name         Instructions Cycles
  9069                           ; simple_byte            7     4 (average)
  9070                           ; jumptable            260     6 (fixed)
  9071                           ;	Chosen strategy is simple_byte
  9072  0DFC  084B               	movf	??_Sensor_Service+1,w
  9073  0DFD  3A00               	xorlw	0	; case 0
  9074  0DFE  1903               	skipnz
  9075  0DFF  2E04               	goto	l7884
  9076  0E00  3AFF               	xorlw	255	; case 255
  9077  0E01  1903               	skipnz
  9078  0E02  2E09               	goto	l7886
  9079  0E03  2E1A               	goto	l7074
  9080  0E04                     l7884:	
  9081                           
  9082                           ; Switch size 1, requested type "simple"
  9083                           ; Number of cases is 1, Range of values is 0 to 0
  9084                           ; switch strategies available:
  9085                           ; Name         Instructions Cycles
  9086                           ; simple_byte            4     3 (average)
  9087                           ; direct_byte            8     6 (fixed)
  9088                           ; jumptable            260     6 (fixed)
  9089                           ;	Chosen strategy is simple_byte
  9090  0E04  084A               	movf	??_Sensor_Service,w
  9091  0E05  3A00               	xorlw	0	; case 0
  9092  0E06  1903               	skipnz
  9093  0E07  2DB5               	goto	l7050
  9094  0E08  2E1A               	goto	l7074
  9095  0E09                     l7886:	
  9096                           
  9097                           ; Switch size 1, requested type "simple"
  9098                           ; Number of cases is 5, Range of values is 251 to 255
  9099                           ; switch strategies available:
  9100                           ; Name         Instructions Cycles
  9101                           ; direct_byte           15     5 (fixed)
  9102                           ; simple_byte           16     9 (average)
  9103                           ; jumptable            263     9 (fixed)
  9104                           ;	Chosen strategy is simple_byte
  9105  0E09  084A               	movf	??_Sensor_Service,w
  9106  0E0A  3AFB               	xorlw	251	; case 251
  9107  0E0B  1903               	skipnz
  9108  0E0C  2E1A               	goto	l7074
  9109  0E0D  3A07               	xorlw	7	; case 252
  9110  0E0E  1903               	skipnz
  9111  0E0F  2E1A               	goto	l7074
  9112  0E10  3A01               	xorlw	1	; case 253
  9113  0E11  1903               	skipnz
  9114  0E12  2E1A               	goto	l7074
  9115  0E13  3A03               	xorlw	3	; case 254
  9116  0E14  1903               	skipnz
  9117  0E15  2E1A               	goto	l7074
  9118  0E16  3A01               	xorlw	1	; case 255
  9119  0E17  1903               	skipnz
  9120  0E18  2E1A               	goto	l7074
  9121  0E19  2E1A               	goto	l7074
  9122  0E1A                     l7074:	
  9123                           
  9124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  9125  0E1A  0020               	movlb	0	; select bank0
  9126  0E1B  084E               	movf	Sensor_Service@error,w
  9127  0E1C  0008               	return
  9128  0E1D                     __end_of_Sensor_Service:	
  9129                           
  9130                           	psect	text43
  9131  12DF                     __ptext43:	
  9132 ;; *************** function _Sensor_setSampled *****************
  9133 ;; Defined at:
  9134 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9135 ;; Parameters:    Size  Location     Type
  9136 ;;  sensor          1    wreg     PTR struct .
  9137 ;;		 -> NULL(0), mtouch_sensor(27), 
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  sensor          1    0[BANK0 ] PTR struct .
  9140 ;;		 -> NULL(0), mtouch_sensor(27), 
  9141 ;; Return value:  Size  Location     Type
  9142 ;;                  1    wreg      void 
  9143 ;; Registers used:
  9144 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9150 ;;      Params:         0       0       0       0       0       0       0       0
  9151 ;;      Locals:         0       1       0       0       0       0       0       0
  9152 ;;      Temps:          0       0       0       0       0       0       0       0
  9153 ;;      Totals:         0       1       0       0       0       0       0       0
  9154 ;;Total ram usage:        1 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    4
  9157 ;; This function calls:
  9158 ;;		Nothing
  9159 ;; This function is called by:
  9160 ;;		_Sensor_Service
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           
  9165                           ;psect for function _Sensor_setSampled
  9166  12DF                     _Sensor_setSampled:	
  9167                           
  9168                           ;incstack = 0
  9169                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  9170                           ;Sensor_setSampled@sensor stored from wreg
  9171  12DF  0020               	movlb	0	; select bank0
  9172  12E0  00A0               	movwf	Sensor_setSampled@sensor
  9173                           
  9174                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  9175  12E1  0820               	movf	Sensor_setSampled@sensor,w
  9176  12E2  3E08               	addlw	8
  9177  12E3  0086               	movwf	6
  9178  12E4  3001               	movlw	1	; select bank2/3
  9179  12E5  0087               	movwf	7
  9180  12E6  1401               	bsf	1,0
  9181  12E7  0008               	return
  9182  12E8                     __end_of_Sensor_setSampled:	
  9183                           
  9184                           	psect	text44
  9185  16E8                     __ptext44:	
  9186 ;; *************** function _Sensor_RawSample_Update *****************
  9187 ;; Defined at:
  9188 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;  sensor          1    wreg     PTR struct .
  9191 ;;		 -> NULL(0), mtouch_sensor(27), 
  9192 ;; Auto vars:     Size  Location     Type
  9193 ;;  sensor          1    6[BANK0 ] PTR struct .
  9194 ;;		 -> NULL(0), mtouch_sensor(27), 
  9195 ;;  adcIndex        1    5[BANK0 ] unsigned char 
  9196 ;; Return value:  Size  Location     Type
  9197 ;;                  1    wreg      void 
  9198 ;; Registers used:
  9199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9205 ;;      Params:         0       0       0       0       0       0       0       0
  9206 ;;      Locals:         0       2       0       0       0       0       0       0
  9207 ;;      Temps:          0       1       0       0       0       0       0       0
  9208 ;;      Totals:         0       3       0       0       0       0       0       0
  9209 ;;Total ram usage:        3 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:    5
  9212 ;; This function calls:
  9213 ;;		_Sensor_getScanGroupIndex
  9214 ;; This function is called by:
  9215 ;;		_Sensor_Service
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           
  9220                           ;psect for function _Sensor_RawSample_Update
  9221  16E8                     _Sensor_RawSample_Update:	
  9222                           
  9223                           ;incstack = 0
  9224                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9225                           ;Sensor_RawSample_Update@sensor stored from wreg
  9226  16E8  0020               	movlb	0	; select bank0
  9227  16E9  00A6               	movwf	Sensor_RawSample_Update@sensor
  9228                           
  9229                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  9230  16EA  0826               	movf	Sensor_RawSample_Update@sensor,w
  9231  16EB  3197  273E  3196   	fcall	_Sensor_getScanGroupIndex
  9232  16EE  0020               	movlb	0	; select bank0
  9233  16EF  00A4               	movwf	??_Sensor_RawSample_Update
  9234  16F0  0824               	movf	??_Sensor_RawSample_Update,w
  9235  16F1  00A5               	movwf	Sensor_RawSample_Update@adcIndex
  9236                           
  9237                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  9238  16F2  1F8B               	btfss	11,7	;volatile
  9239  16F3  2F04               	goto	l4898
  9240                           
  9241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  9242  16F4  138B               	bcf	11,7	;volatile
  9243                           
  9244                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  9245  16F5  3525               	lslf	Sensor_RawSample_Update@adcIndex,w
  9246  16F6  3E70               	addlw	(low (_packet_sample| 0))& (0+255)
  9247  16F7  0086               	movwf	6
  9248  16F8  0187               	clrf	7
  9249  16F9  0826               	movf	Sensor_RawSample_Update@sensor,w
  9250  16FA  3E06               	addlw	6
  9251  16FB  0084               	movwf	4
  9252  16FC  3001               	movlw	1	; select bank2/3
  9253  16FD  0085               	movwf	5
  9254  16FE  3F40               	moviw [0]fsr1
  9255  16FF  3F80               	movwi [0]fsr0
  9256  1700  3F41               	moviw [1]fsr1
  9257  1701  3F81               	movwi [1]fsr0
  9258                           
  9259                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  9260  1702  178B               	bsf	11,7	;volatile
  9261                           
  9262                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  9263  1703  0008               	return
  9264  1704                     l4898:	
  9265                           
  9266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  9267  1704  3525               	lslf	Sensor_RawSample_Update@adcIndex,w
  9268  1705  3E70               	addlw	(low (_packet_sample| 0))& (0+255)
  9269  1706  0086               	movwf	6
  9270  1707  0187               	clrf	7
  9271  1708  0826               	movf	Sensor_RawSample_Update@sensor,w
  9272  1709  3E06               	addlw	6
  9273  170A  0084               	movwf	4
  9274  170B  3001               	movlw	1	; select bank2/3
  9275  170C  0085               	movwf	5
  9276  170D  3F40               	moviw [0]fsr1
  9277  170E  3F80               	movwi [0]fsr0
  9278  170F  3F41               	moviw [1]fsr1
  9279  1710  3F81               	movwi [1]fsr0
  9280  1711  0008               	return
  9281  1712                     __end_of_Sensor_RawSample_Update:	
  9282                           
  9283                           	psect	text45
  9284  124D                     __ptext45:	
  9285 ;; *************** function _Sensor_DefaultCallback *****************
  9286 ;; Defined at:
  9287 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;  sensor          1    0[BANK0 ] enum E2878
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  1    wreg      void 
  9294 ;; Registers used:
  9295 ;;		None
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9301 ;;      Params:         0       1       0       0       0       0       0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0       0
  9304 ;;      Totals:         0       1       0       0       0       0       0       0
  9305 ;;Total ram usage:        1 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    4
  9308 ;; This function calls:
  9309 ;;		Nothing
  9310 ;; This function is called by:
  9311 ;;		_Sensor_Service
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           
  9316                           ;psect for function _Sensor_DefaultCallback
  9317  124D                     _Sensor_DefaultCallback:	
  9318                           
  9319                           ;incstack = 0
  9320                           ; Regs used in _Sensor_DefaultCallback: []
  9321  124D  0008               	return
  9322  124E                     __end_of_Sensor_DefaultCallback:	
  9323                           
  9324                           	psect	text46
  9325  0AC6                     __ptext46:	
  9326 ;; *************** function _Sensor_Acquisition *****************
  9327 ;; Defined at:
  9328 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  sensor_adc1     1    wreg     PTR struct .
  9331 ;;		 -> NULL(0), mtouch_sensor(27), 
  9332 ;;  sensor_adc2     1   38[BANK0 ] PTR struct .
  9333 ;;		 -> mtouch_sensor(27), 
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;  sensor_adc1     1   41[BANK0 ] PTR struct .
  9336 ;;		 -> NULL(0), mtouch_sensor(27), 
  9337 ;;  retry           1   40[BANK0 ] unsigned char 
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      enum E2882
  9340 ;; Registers used:
  9341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9347 ;;      Params:         0       1       0       0       0       0       0       0
  9348 ;;      Locals:         0       2       0       0       0       0       0       0
  9349 ;;      Temps:          0       1       0       0       0       0       0       0
  9350 ;;      Totals:         0       4       0       0       0       0       0       0
  9351 ;;Total ram usage:        4 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    8
  9354 ;; This function calls:
  9355 ;;		_Sensor_Acq_ExecutePacket
  9356 ;;		_Sensor_Scanfrequency_Evaluation
  9357 ;;		_Sensor_isActive
  9358 ;;		_Sensor_isCalibrated
  9359 ;;		_Sensor_postAcquisitionProcess
  9360 ;; This function is called by:
  9361 ;;		_Sensor_Service
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           
  9366                           ;psect for function _Sensor_Acquisition
  9367  0AC6                     _Sensor_Acquisition:	
  9368                           
  9369                           ;incstack = 0
  9370                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9371                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  9372  0AC6  0020               	movlb	0	; select bank0
  9373  0AC7  00C9               	movwf	Sensor_Acquisition@sensor_adc1
  9374                           
  9375                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  9376  0AC8  3005               	movlw	5
  9377  0AC9  00C7               	movwf	??_Sensor_Acquisition
  9378  0ACA  0847               	movf	??_Sensor_Acquisition,w
  9379  0ACB  00C8               	movwf	Sensor_Acquisition@retry
  9380                           
  9381                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  9382  0ACC  0849               	movf	Sensor_Acquisition@sensor_adc1,w
  9383  0ACD  1D03               	btfss	3,2
  9384  0ACE  2ADC               	goto	l6914
  9385  0ACF  0846               	movf	Sensor_Acquisition@sensor_adc2,w
  9386  0AD0  1D03               	btfss	3,2
  9387  0AD1  2ADC               	goto	l6914
  9388                           
  9389                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  9390  0AD2  30FF               	movlw	255
  9391  0AD3  0008               	return
  9392  0AD4                     l6908:	
  9393                           
  9394                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  9395  0AD4  3001               	movlw	1
  9396  0AD5  0020               	movlb	0	; select bank0
  9397  0AD6  02C8               	subwf	Sensor_Acquisition@retry,f
  9398                           
  9399                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  9400  0AD7  0848               	movf	Sensor_Acquisition@retry,w
  9401  0AD8  1D03               	btfss	3,2
  9402  0AD9  2ADC               	goto	l6914
  9403                           
  9404                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  9405  0ADA  30FC               	movlw	252
  9406  0ADB  0008               	return
  9407  0ADC                     l6914:	
  9408                           
  9409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  9410  0ADC  0846               	movf	Sensor_Acquisition@sensor_adc2,w
  9411  0ADD  00C7               	movwf	??_Sensor_Acquisition
  9412  0ADE  0847               	movf	??_Sensor_Acquisition,w
  9413  0ADF  00AA               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  9414  0AE0  0849               	movf	Sensor_Acquisition@sensor_adc1,w
  9415  0AE1  3183  23D9  318A   	fcall	_Sensor_Acq_ExecutePacket
  9416  0AE4  3A00               	xorlw	0
  9417  0AE5  1D03               	skipz
  9418  0AE6  2AD4               	goto	l6908
  9419                           
  9420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  9421  0AE7  0020               	movlb	0	; select bank0
  9422  0AE8  0849               	movf	Sensor_Acquisition@sensor_adc1,w
  9423  0AE9  1903               	btfsc	3,2
  9424  0AEA  2AEF               	goto	l6920
  9425                           
  9426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  9427  0AEB  0849               	movf	Sensor_Acquisition@sensor_adc1,w
  9428  0AEC  3189  2103  318A   	fcall	_Sensor_postAcquisitionProcess
  9429  0AEF                     l6920:	
  9430                           
  9431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  9432  0AEF  0020               	movlb	0	; select bank0
  9433  0AF0  0846               	movf	Sensor_Acquisition@sensor_adc2,w
  9434  0AF1  1903               	btfsc	3,2
  9435  0AF2  2AF7               	goto	l6924
  9436                           
  9437                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  9438  0AF3  0846               	movf	Sensor_Acquisition@sensor_adc2,w
  9439  0AF4  3189  2103  318A   	fcall	_Sensor_postAcquisitionProcess
  9440  0AF7                     l6924:	
  9441                           
  9442                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  9443  0AF7  0020               	movlb	0	; select bank0
  9444  0AF8  0849               	movf	Sensor_Acquisition@sensor_adc1,w
  9445  0AF9  3193  2389  318A   	fcall	_Sensor_isActive
  9446  0AFC  3A00               	xorlw	0
  9447  0AFD  1903               	skipnz
  9448  0AFE  2B07               	goto	l6928
  9449  0AFF  0020               	movlb	0	; select bank0
  9450  0B00  0849               	movf	Sensor_Acquisition@sensor_adc1,w
  9451  0B01  3193  2331  318A   	fcall	_Sensor_isCalibrated
  9452  0B04  3A00               	xorlw	0
  9453  0B05  1D03               	skipz
  9454  0B06  2B17               	goto	l6932
  9455  0B07                     l6928:	
  9456  0B07  0020               	movlb	0	; select bank0
  9457  0B08  0846               	movf	Sensor_Acquisition@sensor_adc2,w
  9458  0B09  3193  2389  318A   	fcall	_Sensor_isActive
  9459  0B0C  3A00               	xorlw	0
  9460  0B0D  1903               	skipnz
  9461  0B0E  2B20               	goto	l6936
  9462  0B0F  0020               	movlb	0	; select bank0
  9463  0B10  0846               	movf	Sensor_Acquisition@sensor_adc2,w
  9464  0B11  3193  2331  318A   	fcall	_Sensor_isCalibrated
  9465  0B14  3A00               	xorlw	0
  9466  0B15  1903               	skipnz
  9467  0B16  2B20               	goto	l6936
  9468  0B17                     l6932:	
  9469                           
  9470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  9471  0B17  0020               	movlb	0	; select bank0
  9472  0B18  0846               	movf	Sensor_Acquisition@sensor_adc2,w
  9473  0B19  00C7               	movwf	??_Sensor_Acquisition
  9474  0B1A  0847               	movf	??_Sensor_Acquisition,w
  9475  0B1B  00B9               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  9476  0B1C  0849               	movf	Sensor_Acquisition@sensor_adc1,w
  9477  0B1D  318B  23EC         	fcall	_Sensor_Scanfrequency_Evaluation
  9478  0B1F  0008               	return
  9479  0B20                     l6936:	
  9480                           
  9481                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  9482  0B20  3000               	movlw	0
  9483  0B21  0008               	return
  9484  0B22                     __end_of_Sensor_Acquisition:	
  9485                           
  9486                           	psect	text47
  9487  0903                     __ptext47:	
  9488 ;; *************** function _Sensor_postAcquisitionProcess *****************
  9489 ;; Defined at:
  9490 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  sensor          1    wreg     PTR struct .
  9493 ;;		 -> NULL(0), mtouch_sensor(27), 
  9494 ;; Auto vars:     Size  Location     Type
  9495 ;;  sensor          1    8[BANK0 ] PTR struct .
  9496 ;;		 -> NULL(0), mtouch_sensor(27), 
  9497 ;;  deviation       2    6[BANK0 ] unsigned short 
  9498 ;;  adcIndex        1    5[BANK0 ] unsigned char 
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9508 ;;      Params:         0       0       0       0       0       0       0       0
  9509 ;;      Locals:         0       4       0       0       0       0       0       0
  9510 ;;      Temps:          0       1       0       0       0       0       0       0
  9511 ;;      Totals:         0       5       0       0       0       0       0       0
  9512 ;;Total ram usage:        5 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    5
  9515 ;; This function calls:
  9516 ;;		_Sensor_getScanGroupIndex
  9517 ;;		_Sensor_isEnabled
  9518 ;;		_Sensor_setActive
  9519 ;;		_Sensor_setInactive
  9520 ;;		_abs
  9521 ;; This function is called by:
  9522 ;;		_Sensor_Acquisition
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _Sensor_postAcquisitionProcess
  9528  0903                     _Sensor_postAcquisitionProcess:	
  9529                           
  9530                           ;incstack = 0
  9531                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9532                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  9533  0903  0020               	movlb	0	; select bank0
  9534  0904  00A8               	movwf	Sensor_postAcquisitionProcess@sensor
  9535                           
  9536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  9537  0905  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
  9538  0906  3197  273E  3189   	fcall	_Sensor_getScanGroupIndex
  9539  0909  0020               	movlb	0	; select bank0
  9540  090A  00A4               	movwf	??_Sensor_postAcquisitionProcess
  9541  090B  0824               	movf	??_Sensor_postAcquisitionProcess,w
  9542  090C  00A5               	movwf	Sensor_postAcquisitionProcess@adcIndex
  9543                           
  9544                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  9545  090D  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
  9546  090E  3194  242D  3189   	fcall	_Sensor_isEnabled
  9547  0911  3A00               	xorlw	0
  9548  0912  1903               	skipnz
  9549  0913  292E               	goto	l6816
  9550                           
  9551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  9552  0914  0020               	movlb	0	; select bank0
  9553  0915  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
  9554  0916  3E06               	addlw	6
  9555  0917  0086               	movwf	6
  9556  0918  3001               	movlw	1	; select bank2/3
  9557  0919  0087               	movwf	7
  9558  091A  3525               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  9559  091B  3E70               	addlw	(low (_packet_sample| 0))& (0+255)
  9560  091C  0084               	movwf	4
  9561  091D  0185               	clrf	5
  9562  091E  3F40               	moviw [0]fsr1
  9563  091F  0200               	subwf	0,w
  9564  0920  00A0               	movwf	abs@a
  9565  0921  3101               	addfsr 0,1
  9566  0922  3F41               	moviw [1]fsr1
  9567  0923  3B00               	subwfb	0,w
  9568  0924  00A1               	movwf	abs@a+1
  9569  0925  3195  2536  3189   	fcall	_abs
  9570  0928  0020               	movlb	0	; select bank0
  9571  0929  0821               	movf	?_abs+1,w
  9572  092A  00A7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  9573  092B  0820               	movf	?_abs,w
  9574  092C  00A6               	movwf	Sensor_postAcquisitionProcess@deviation
  9575  092D  2931               	goto	l6818
  9576  092E                     l6816:	
  9577                           
  9578                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  9579  092E  0020               	movlb	0	; select bank0
  9580  092F  01A6               	clrf	Sensor_postAcquisitionProcess@deviation
  9581  0930  01A7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  9582  0931                     l6818:	
  9583                           
  9584                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  9585  0931  3000               	movlw	0
  9586  0932  0227               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  9587  0933  3065               	movlw	101
  9588  0934  1903               	skipnz
  9589  0935  0226               	subwf	Sensor_postAcquisitionProcess@deviation,w
  9590  0936  1C03               	skipc
  9591  0937  293C               	goto	l6822
  9592                           
  9593                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  9594  0938  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
  9595  0939  3192  22CD         	fcall	_Sensor_setActive
  9596  093B  0008               	return
  9597  093C                     l6822:	
  9598                           
  9599                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  9600  093C  0828               	movf	Sensor_postAcquisitionProcess@sensor,w
  9601  093D  3192  22D6         	fcall	_Sensor_setInactive
  9602  093F  0008               	return
  9603  0940                     __end_of_Sensor_postAcquisitionProcess:	
  9604                           
  9605                           	psect	text48
  9606  12D6                     __ptext48:	
  9607 ;; *************** function _Sensor_setInactive *****************
  9608 ;; Defined at:
  9609 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  sensor          1    wreg     PTR struct .
  9612 ;;		 -> NULL(0), mtouch_sensor(27), 
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  sensor          1    0[BANK0 ] PTR struct .
  9615 ;;		 -> NULL(0), mtouch_sensor(27), 
  9616 ;; Return value:  Size  Location     Type
  9617 ;;                  1    wreg      void 
  9618 ;; Registers used:
  9619 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9625 ;;      Params:         0       0       0       0       0       0       0       0
  9626 ;;      Locals:         0       1       0       0       0       0       0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0
  9628 ;;      Totals:         0       1       0       0       0       0       0       0
  9629 ;;Total ram usage:        1 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    4
  9632 ;; This function calls:
  9633 ;;		Nothing
  9634 ;; This function is called by:
  9635 ;;		_Sensor_postAcquisitionProcess
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           
  9640                           ;psect for function _Sensor_setInactive
  9641  12D6                     _Sensor_setInactive:	
  9642                           
  9643                           ;incstack = 0
  9644                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9645                           ;Sensor_setInactive@sensor stored from wreg
  9646  12D6  0020               	movlb	0	; select bank0
  9647  12D7  00A0               	movwf	Sensor_setInactive@sensor
  9648                           
  9649                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  9650  12D8  0820               	movf	Sensor_setInactive@sensor,w
  9651  12D9  3E08               	addlw	8
  9652  12DA  0086               	movwf	6
  9653  12DB  3001               	movlw	1	; select bank2/3
  9654  12DC  0087               	movwf	7
  9655  12DD  1081               	bcf	1,1
  9656  12DE  0008               	return
  9657  12DF                     __end_of_Sensor_setInactive:	
  9658                           
  9659                           	psect	text49
  9660  12CD                     __ptext49:	
  9661 ;; *************** function _Sensor_setActive *****************
  9662 ;; Defined at:
  9663 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9664 ;; Parameters:    Size  Location     Type
  9665 ;;  sensor          1    wreg     PTR struct .
  9666 ;;		 -> NULL(0), mtouch_sensor(27), 
  9667 ;; Auto vars:     Size  Location     Type
  9668 ;;  sensor          1    0[BANK0 ] PTR struct .
  9669 ;;		 -> NULL(0), mtouch_sensor(27), 
  9670 ;; Return value:  Size  Location     Type
  9671 ;;                  1    wreg      void 
  9672 ;; Registers used:
  9673 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9674 ;; Tracked objects:
  9675 ;;		On entry : 0/0
  9676 ;;		On exit  : 0/0
  9677 ;;		Unchanged: 0/0
  9678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9679 ;;      Params:         0       0       0       0       0       0       0       0
  9680 ;;      Locals:         0       1       0       0       0       0       0       0
  9681 ;;      Temps:          0       0       0       0       0       0       0       0
  9682 ;;      Totals:         0       1       0       0       0       0       0       0
  9683 ;;Total ram usage:        1 bytes
  9684 ;; Hardware stack levels used:    1
  9685 ;; Hardware stack levels required when called:    4
  9686 ;; This function calls:
  9687 ;;		Nothing
  9688 ;; This function is called by:
  9689 ;;		_Sensor_postAcquisitionProcess
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function _Sensor_setActive
  9695  12CD                     _Sensor_setActive:	
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9699                           ;Sensor_setActive@sensor stored from wreg
  9700  12CD  0020               	movlb	0	; select bank0
  9701  12CE  00A0               	movwf	Sensor_setActive@sensor
  9702                           
  9703                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  9704  12CF  0820               	movf	Sensor_setActive@sensor,w
  9705  12D0  3E08               	addlw	8
  9706  12D1  0086               	movwf	6
  9707  12D2  3001               	movlw	1	; select bank2/3
  9708  12D3  0087               	movwf	7
  9709  12D4  1481               	bsf	1,1
  9710  12D5  0008               	return
  9711  12D6                     __end_of_Sensor_setActive:	
  9712                           
  9713                           	psect	text50
  9714  0BEC                     __ptext50:	
  9715 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  9716 ;; Defined at:
  9717 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9718 ;; Parameters:    Size  Location     Type
  9719 ;;  sensor_adc1     1    wreg     PTR struct .
  9720 ;;		 -> NULL(0), mtouch_sensor(27), 
  9721 ;;  sensor_adc2     1   25[BANK0 ] PTR struct .
  9722 ;;		 -> mtouch_sensor(27), 
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;  sensor_adc1     1   28[BANK0 ] PTR struct .
  9725 ;;		 -> NULL(0), mtouch_sensor(27), 
  9726 ;;  best_packet_    4   33[BANK0 ] unsigned short [2]
  9727 ;;  packet_noise    2   29[BANK0 ] unsigned short 
  9728 ;;  i               1   37[BANK0 ] unsigned char 
  9729 ;;  retry           1   32[BANK0 ] unsigned char 
  9730 ;;  best_sample_    1   31[BANK0 ] unsigned char 
  9731 ;; Return value:  Size  Location     Type
  9732 ;;                  1    wreg      enum E2882
  9733 ;; Registers used:
  9734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9735 ;; Tracked objects:
  9736 ;;		On entry : 0/0
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9740 ;;      Params:         0       1       0       0       0       0       0       0
  9741 ;;      Locals:         0      10       0       0       0       0       0       0
  9742 ;;      Temps:          0       2       0       0       0       0       0       0
  9743 ;;      Totals:         0      13       0       0       0       0       0       0
  9744 ;;Total ram usage:       13 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; Hardware stack levels required when called:    7
  9747 ;; This function calls:
  9748 ;;		_Sensor_Acq_ExecutePacket
  9749 ;; This function is called by:
  9750 ;;		_Sensor_Acquisition
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           
  9755                           ;psect for function _Sensor_Scanfrequency_Evaluation
  9756  0BEC                     _Sensor_Scanfrequency_Evaluation:	
  9757                           
  9758                           ;incstack = 0
  9759                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9760                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  9761  0BEC  0020               	movlb	0	; select bank0
  9762  0BED  00BC               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  9763                           
  9764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  9765  0BEE  0021               	movlb	1	; select bank1
  9766  0BEF  0845               	movf	(_packet_noise+1)^(0+128),w
  9767  0BF0  0020               	movlb	0	; select bank0
  9768  0BF1  00BB               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  9769  0BF2  0021               	movlb	1	; select bank1
  9770  0BF3  0844               	movf	_packet_noise^(0+128),w
  9771  0BF4  0020               	movlb	0	; select bank0
  9772  0BF5  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9773  0BF6  36BB               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  9774  0BF7  0CBA               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  9775  0BF8  36BB               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  9776  0BF9  0CBA               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  9777  0BFA  0021               	movlb	1	; select bank1
  9778  0BFB  0844               	movf	_packet_noise^(0+128),w
  9779  0BFC  0020               	movlb	0	; select bank0
  9780  0BFD  073A               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  9781  0BFE  00BD               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  9782  0BFF  0021               	movlb	1	; select bank1
  9783  0C00  0845               	movf	(_packet_noise+1)^(0+128),w
  9784  0C01  0020               	movlb	0	; select bank0
  9785  0C02  3D3B               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  9786  0C03  00BE               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  9787                           
  9788                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  9789  0C04  086F               	movf	_sample_period,w
  9790  0C05  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9791  0C06  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9792  0C07  00BF               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  9793                           
  9794                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  9795  0C08  0871               	movf	_packet_sample+1,w
  9796  0C09  00C2               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9797  0C0A  0870               	movf	_packet_sample,w
  9798  0C0B  00C1               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9799                           
  9800                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  9801  0C0C  0873               	movf	_packet_sample+3,w
  9802  0C0D  00C4               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  9803  0C0E  0872               	movf	_packet_sample+2,w
  9804  0C0F  00C3               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  9805                           
  9806                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  9807  0C10  01C5               	clrf	Sensor_Scanfrequency_Evaluation@i
  9808  0C11                     l6838:	
  9809                           
  9810                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  9811  0C11  0845               	movf	Sensor_Scanfrequency_Evaluation@i,w
  9812  0C12  3E39               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9813  0C13  0084               	movwf	4
  9814  0C14  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9815  0C15  1803               	skipnc
  9816  0C16  3E01               	addlw	1
  9817  0C17  0085               	movwf	5
  9818  0C18  0800               	movf	0,w	;code access
  9819  0C19  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9820  0C1A  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9821  0C1B  07EF               	addwf	_sample_period,f
  9822                           
  9823                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  9824  0C1C  30AE               	movlw	174
  9825  0C1D  026F               	subwf	_sample_period,w
  9826  0C1E  1803               	skipnc
  9827  0C1F  2C24               	goto	l6846
  9828                           
  9829                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  9830  0C20  30AE               	movlw	174
  9831  0C21  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9832  0C22  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9833  0C23  07EF               	addwf	_sample_period,f
  9834  0C24                     l6846:	
  9835                           
  9836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  9837  0C24  3005               	movlw	5
  9838  0C25  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9839  0C26  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9840  0C27  00C0               	movwf	Sensor_Scanfrequency_Evaluation@retry
  9841  0C28                     l6854:	
  9842                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  9843                           
  9844                           
  9845                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  9846  0C28  0839               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  9847  0C29  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9848  0C2A  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9849  0C2B  00AA               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  9850  0C2C  083C               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  9851  0C2D  3183  23D9  318B   	fcall	_Sensor_Acq_ExecutePacket
  9852  0C30  3A00               	xorlw	0
  9853  0C31  1903               	btfsc	3,2
  9854  0C32  2C3B               	goto	l6856
  9855                           
  9856                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  9857  0C33  3001               	movlw	1
  9858  0C34  0020               	movlb	0	; select bank0
  9859  0C35  02C0               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  9860                           
  9861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  9862  0C36  0840               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  9863  0C37  1D03               	btfss	3,2
  9864  0C38  2C28               	goto	l6854
  9865                           
  9866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  9867  0C39  30FC               	movlw	252
  9868  0C3A  0008               	return
  9869  0C3B                     l6856:	
  9870                           
  9871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  9872  0C3B  0021               	movlb	1	; select bank1
  9873  0C3C  0845               	movf	(_packet_noise+1)^(0+128),w
  9874  0C3D  0020               	movlb	0	; select bank0
  9875  0C3E  023E               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  9876  0C3F  1D03               	skipz
  9877  0C40  2C45               	goto	u5975
  9878  0C41  0021               	movlb	1	; select bank1
  9879  0C42  0844               	movf	_packet_noise^(0+128),w
  9880  0C43  0020               	movlb	0	; select bank0
  9881  0C44  023D               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  9882  0C45                     u5975:	
  9883  0C45  1803               	skipnc
  9884  0C46  2C5B               	goto	l6860
  9885                           
  9886                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  9887  0C47  0021               	movlb	1	; select bank1
  9888  0C48  0845               	movf	(_packet_noise+1)^(0+128),w
  9889  0C49  0020               	movlb	0	; select bank0
  9890  0C4A  00BE               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  9891  0C4B  0021               	movlb	1	; select bank1
  9892  0C4C  0844               	movf	_packet_noise^(0+128),w
  9893  0C4D  0020               	movlb	0	; select bank0
  9894  0C4E  00BD               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  9895                           
  9896                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  9897  0C4F  086F               	movf	_sample_period,w
  9898  0C50  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9899  0C51  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9900  0C52  00BF               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  9901                           
  9902                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  9903  0C53  0871               	movf	_packet_sample+1,w
  9904  0C54  00C2               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9905  0C55  0870               	movf	_packet_sample,w
  9906  0C56  00C1               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9907                           
  9908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  9909  0C57  0873               	movf	_packet_sample+3,w
  9910  0C58  00C4               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  9911  0C59  0872               	movf	_packet_sample+2,w
  9912  0C5A  00C3               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  9913  0C5B                     l6860:	
  9914                           
  9915                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  9916  0C5B  3001               	movlw	1
  9917  0C5C  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9918  0C5D  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9919  0C5E  07C5               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  9920  0C5F  3005               	movlw	5
  9921  0C60  0245               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  9922  0C61  1C03               	skipc
  9923  0C62  2C11               	goto	l6838
  9924                           
  9925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  9926  0C63  083F               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  9927  0C64  00BA               	movwf	??_Sensor_Scanfrequency_Evaluation
  9928  0C65  083A               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9929  0C66  00EF               	movwf	_sample_period
  9930                           
  9931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  9932  0C67  0842               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  9933  0C68  00F1               	movwf	_packet_sample+1
  9934  0C69  0841               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  9935  0C6A  00F0               	movwf	_packet_sample
  9936                           
  9937                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  9938  0C6B  0844               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  9939  0C6C  00F3               	movwf	_packet_sample+3
  9940  0C6D  0843               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  9941  0C6E  00F2               	movwf	_packet_sample+2
  9942                           
  9943                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  9944  0C6F  3000               	movlw	0
  9945  0C70  0008               	return
  9946  0C71                     __end_of_Sensor_Scanfrequency_Evaluation:	
  9947                           
  9948                           	psect	text51
  9949  03D9                     __ptext51:	
  9950 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  9951 ;; Defined at:
  9952 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  sensor_adc1     1    wreg     PTR struct .
  9955 ;;		 -> NULL(0), mtouch_sensor(27), 
  9956 ;;  sensor_adc2     1   10[BANK0 ] PTR struct .
  9957 ;;		 -> mtouch_sensor(27), 
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  sensor_adc1     1   24[BANK0 ] PTR struct .
  9960 ;;		 -> NULL(0), mtouch_sensor(27), 
  9961 ;;  last_b          2   21[BANK0 ] unsigned short 
  9962 ;;  last_a          2   19[BANK0 ] unsigned short 
  9963 ;;  packet_count    1   23[BANK0 ] unsigned char 
  9964 ;;  activeSensor    1   18[BANK0 ] unsigned char 
  9965 ;;  ADxIF_flag      1   17[BANK0 ] unsigned char 
  9966 ;;  sensor2Force    1   16[BANK0 ] unsigned char 
  9967 ;;  sensor1Force    1   15[BANK0 ] unsigned char 
  9968 ;;  AD2CON2_temp    1   14[BANK0 ] unsigned char 
  9969 ;;  AD1CON2_temp    1   13[BANK0 ] unsigned char 
  9970 ;;  ADCOMCON_tem    1   12[BANK0 ] unsigned char 
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      enum E2882
  9973 ;; Registers used:
  9974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9980 ;;      Params:         0       1       0       0       0       0       0       0
  9981 ;;      Locals:         0      13       0       0       0       0       0       0
  9982 ;;      Temps:          0       1       0       0       0       0       0       0
  9983 ;;      Totals:         0      15       0       0       0       0       0       0
  9984 ;;Total ram usage:       15 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    6
  9987 ;; This function calls:
  9988 ;;		_MTOUCH_Sensor_Scan_Initialize
  9989 ;;		_Sensor_autoCalibration
  9990 ;;		_Sensor_isActive
  9991 ;;		_Sensor_isCalibrated
  9992 ;;		_Sensor_isEnabled
  9993 ;;		_Sensor_loadADCSettings
  9994 ;;		_TMR2_LoadPeriodRegister
  9995 ;;		_TMR2_StartTimer
  9996 ;;		_TMR2_StopTimer
  9997 ;;		_abs
  9998 ;; This function is called by:
  9999 ;;		_Sensor_Acquisition
 10000 ;;		_Sensor_Scanfrequency_Evaluation
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           
 10005                           ;psect for function _Sensor_Acq_ExecutePacket
 10006  03D9                     _Sensor_Acq_ExecutePacket:	
 10007                           
 10008                           ;incstack = 0
 10009                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10010                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
 10011  03D9  0020               	movlb	0	; select bank0
 10012  03DA  00B8               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
 10013                           
 10014                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
 10015  03DB  01B3               	clrf	Sensor_Acq_ExecutePacket@last_a
 10016  03DC  01B4               	clrf	Sensor_Acq_ExecutePacket@last_a+1
 10017                           
 10018                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
 10019  03DD  01B5               	clrf	Sensor_Acq_ExecutePacket@last_b
 10020  03DE  01B6               	clrf	Sensor_Acq_ExecutePacket@last_b+1
 10021                           
 10022                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
 10023  03DF  01B2               	clrf	Sensor_Acq_ExecutePacket@activeSensor
 10024                           
 10025                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
 10026  03E0  01AF               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
 10027  03E1  01B0               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
 10028                           
 10029                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
 10030  03E2  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10031  03E3  1903               	btfsc	3,2
 10032  03E4  2C1F               	goto	l6582
 10033  03E5  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10034  03E6  1903               	btfsc	3,2
 10035  03E7  2C1F               	goto	l6582
 10036                           
 10037                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
 10038  03E8  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10039  03E9  3E08               	addlw	8
 10040  03EA  0086               	movwf	6
 10041  03EB  3001               	movlw	1	; select bank2/3
 10042  03EC  0087               	movwf	7
 10043  03ED  1981               	btfsc	1,3
 10044  03EE  2BFF               	goto	l6564
 10045  03EF  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10046  03F0  3E08               	addlw	8
 10047  03F1  0086               	movwf	6
 10048  03F2  3001               	movlw	1	; select bank2/3
 10049  03F3  0087               	movwf	7
 10050  03F4  1D81               	btfss	1,3
 10051  03F5  2BFF               	goto	l6564
 10052                           
 10053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
 10054  03F6  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10055  03F7  3E08               	addlw	8
 10056  03F8  0086               	movwf	6
 10057  03F9  3001               	movlw	1	; select bank2/3
 10058  03FA  0087               	movwf	7
 10059  03FB  1581               	bsf	1,3
 10060                           
 10061                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
 10062  03FC  01AF               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
 10063  03FD  0AAF               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
 10064                           
 10065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
 10066  03FE  2C34               	goto	l6606
 10067  03FF                     l6564:	
 10068  03FF  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10069  0400  3E08               	addlw	8
 10070  0401  0086               	movwf	6
 10071  0402  3001               	movlw	1	; select bank2/3
 10072  0403  0087               	movwf	7
 10073  0404  1981               	btfsc	1,3
 10074  0405  2C16               	goto	l6572
 10075  0406  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10076  0407  3E08               	addlw	8
 10077  0408  0086               	movwf	6
 10078  0409  3001               	movlw	1	; select bank2/3
 10079  040A  0087               	movwf	7
 10080  040B  1D81               	btfss	1,3
 10081  040C  2C16               	goto	l6572
 10082                           
 10083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
 10084  040D  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10085  040E  3E08               	addlw	8
 10086  040F  0086               	movwf	6
 10087  0410  3001               	movlw	1	; select bank2/3
 10088  0411  0087               	movwf	7
 10089  0412  1581               	bsf	1,3
 10090                           
 10091                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
 10092  0413  01B0               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
 10093  0414  0AB0               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
 10094                           
 10095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
 10096  0415  2C34               	goto	l6606
 10097  0416                     l6572:	
 10098  0416  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10099  0417  3E08               	addlw	8
 10100  0418  0086               	movwf	6
 10101  0419  3001               	movlw	1	; select bank2/3
 10102  041A  0087               	movwf	7
 10103  041B  1981               	btfsc	1,3
 10104  041C  2C34               	goto	l6606
 10105  041D                     l6574:	
 10106  041D  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10107  041E  2C2C               	goto	L5
 10108  041F                     l6582:	
 10109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
 10110                           
 10111  041F  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10112  0420  1D03               	btfss	3,2
 10113  0421  2C25               	goto	l6594
 10114  0422  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10115  0423  1D03               	btfss	3,2
 10116  0424  2C1D               	goto	l6574
 10117  0425                     l6594:	
 10118                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
 10119                           
 10120  0425  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10121  0426  1903               	btfsc	3,2
 10122  0427  2C34               	goto	l6606
 10123  0428  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10124  0429  1D03               	btfss	3,2
 10125  042A  2C34               	goto	l6606
 10126                           
 10127                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
 10128  042B  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10129  042C                     L5:	
 10130  042C  3E08               	addlw	8
 10131  042D  0086               	movwf	6
 10132  042E  3001               	movlw	1	; select bank2/3
 10133  042F  0087               	movwf	7
 10134  0430  1981               	btfsc	1,3
 10135  0431  2C34               	goto	l6606
 10136  0432                     l6576:	
 10137                           
 10138                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
 10139  0432  3000               	movlw	0
 10140  0433  0008               	return
 10141  0434                     l6606:	
 10142                           
 10143                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
 10144  0434  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10145  0435  3193  2389  3183   	fcall	_Sensor_isActive
 10146  0438  3A00               	xorlw	0
 10147  0439  1903               	skipnz
 10148  043A  2C3E               	goto	l6610
 10149                           
 10150                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
 10151  043B  0020               	movlb	0	; select bank0
 10152  043C  01B2               	clrf	Sensor_Acq_ExecutePacket@activeSensor
 10153  043D  0AB2               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
 10154  043E                     l6610:	
 10155                           
 10156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
 10157  043E  002E               	movlb	14	; select bank14
 10158  043F  0812               	movf	18,w	;volatile
 10159  0440  0020               	movlb	0	; select bank0
 10160  0441  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10161  0442  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10162  0443  00AC               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
 10163                           
 10164                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
 10165  0444  002E               	movlb	14	; select bank14
 10166  0445  0813               	movf	19,w	;volatile
 10167  0446  0020               	movlb	0	; select bank0
 10168  0447  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10169  0448  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10170  0449  00AD               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
 10171                           
 10172                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
 10173  044A  002F               	movlb	15	; select bank15
 10174  044B  0813               	movf	19,w	;volatile
 10175  044C  0020               	movlb	0	; select bank0
 10176  044D  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10177  044E  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10178  044F  00AE               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
 10179                           
 10180                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
 10181  0450  3193  23C8  3183   	fcall	_MTOUCH_Sensor_Scan_Initialize
 10182                           
 10183                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
 10184  0453  0020               	movlb	0	; select bank0
 10185  0454  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10186  0455  1903               	btfsc	3,2
 10187  0456  2C6A               	goto	l6626
 10188                           
 10189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
 10190  0457  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10191  0458  3E04               	addlw	4
 10192  0459  0086               	movwf	6
 10193  045A  3001               	movlw	1	; select bank2/3
 10194  045B  0087               	movwf	7
 10195  045C  0801               	movf	1,w
 10196  045D  3EFF               	addlw	255
 10197  045E  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10198  045F  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10199  0460  00B7               	movwf	Sensor_Acq_ExecutePacket@packet_counter
 10200                           
 10201                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
 10202  0461  01B1               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
 10203                           
 10204                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
 10205  0462  3040               	movlw	64
 10206  0463  002E               	movlb	14	; select bank14
 10207  0464  0098               	movwf	24	;volatile
 10208                           
 10209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
 10210  0465  002F               	movlb	15	; select bank15
 10211  0466  0198               	clrf	24	;volatile
 10212                           
 10213                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x1;
 10214  0467  0022               	movlb	2	; select bank2
 10215  0468  141D               	bsf	29,0	;volatile
 10216                           
 10217                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
 10218  0469  2C7D               	goto	l6636
 10219  046A                     l6626:	
 10220                           
 10221                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
 10222  046A  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10223  046B  3E04               	addlw	4
 10224  046C  0086               	movwf	6
 10225  046D  3001               	movlw	1	; select bank2/3
 10226  046E  0087               	movwf	7
 10227  046F  0801               	movf	1,w
 10228  0470  3EFF               	addlw	255
 10229  0471  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10230  0472  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10231  0473  00B7               	movwf	Sensor_Acq_ExecutePacket@packet_counter
 10232                           
 10233                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
 10234  0474  01B1               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
 10235  0475  0AB1               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
 10236                           
 10237                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
 10238  0476  002E               	movlb	14	; select bank14
 10239  0477  0198               	clrf	24	;volatile
 10240                           
 10241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
 10242  0478  3040               	movlw	64
 10243  0479  002F               	movlb	15	; select bank15
 10244  047A  0098               	movwf	24	;volatile
 10245                           
 10246                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
 10247  047B  0022               	movlb	2	; select bank2
 10248  047C  101D               	bcf	29,0	;volatile
 10249  047D                     l6636:	
 10250                           
 10251                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
 10252  047D  0020               	movlb	0	; select bank0
 10253  047E  01A1               	clrf	Sensor_loadADCSettings@adc_index
 10254  047F  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10255  0480  3186  266E  3183   	fcall	_Sensor_loadADCSettings
 10256                           
 10257                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
 10258  0483  0020               	movlb	0	; select bank0
 10259  0484  01A1               	clrf	Sensor_loadADCSettings@adc_index
 10260  0485  0AA1               	incf	Sensor_loadADCSettings@adc_index,f
 10261  0486  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10262  0487  3186  266E  3183   	fcall	_Sensor_loadADCSettings
 10263                           
 10264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
 10265  048A  0020               	movlb	0	; select bank0
 10266  048B  106D               	bcf	_sensor_globalFlags,0	;volatile
 10267                           
 10268                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
 10269  048C  116D               	bcf	_sensor_globalFlags,2	;volatile
 10270                           
 10271                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
 10272  048D  11ED               	bcf	_sensor_globalFlags,3	;volatile
 10273                           
 10274                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
 10275  048E  086F               	movf	_sample_period,w
 10276  048F  3192  2280  3183   	fcall	_TMR2_LoadPeriodRegister
 10277                           
 10278                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
 10279  0492  3192  2266  3183   	fcall	_TMR2_StartTimer
 10280                           
 10281                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
 10282  0495  0021               	movlb	1	; select bank1
 10283  0496  01C4               	clrf	_packet_noise^(0+128)
 10284  0497  01C5               	clrf	(_packet_noise+1)^(0+128)
 10285  0498                     l6652:	
 10286                           
 10287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
 10288  0498  0020               	movlb	0	; select bank0
 10289  0499  0831               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
 10290  049A  1D03               	btfss	3,2
 10291  049B  2CA2               	goto	l282
 10292                           
 10293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
 10294  049C  1F11               	btfss	17,6	;volatile
 10295  049D  10ED               	bcf	_sensor_globalFlags,1	;volatile
 10296  049E                     l284:	
 10297  049E  1F11               	btfss	17,6	;volatile
 10298  049F  2C9E               	goto	l284
 10299                           
 10300                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
 10301  04A0  1311               	bcf	17,6	;volatile
 10302                           
 10303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
 10304  04A1  2CA8               	goto	l6660
 10305  04A2                     l282:	
 10306                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
 10307                           
 10308                           
 10309                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
 10310  04A2  1B12               	btfsc	18,6	;volatile
 10311  04A3  2CA5               	goto	l289
 10312  04A4  10ED               	bcf	_sensor_globalFlags,1	;volatile
 10313  04A5                     l289:	
 10314  04A5  1F12               	btfss	18,6	;volatile
 10315  04A6  2CA5               	goto	l289
 10316                           
 10317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
 10318  04A7  1312               	bcf	18,6	;volatile
 10319  04A8                     l6660:	
 10320                           
 10321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
 10322  04A8  3021               	movlw	33
 10323  04A9  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10324  04AA  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10325  04AB  002E               	movlb	14	; select bank14
 10326  04AC  0698               	xorwf	24,f	;volatile
 10327                           
 10328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
 10329  04AD  3021               	movlw	33
 10330  04AE  0020               	movlb	0	; select bank0
 10331  04AF  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10332  04B0  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10333  04B1  002F               	movlb	15	; select bank15
 10334  04B2  0698               	xorwf	24,f	;volatile
 10335                           
 10336                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
 10337  04B3  30C0               	movlw	192
 10338  04B4  0020               	movlb	0	; select bank0
 10339  04B5  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10340  04B6  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10341  04B7  002E               	movlb	14	; select bank14
 10342  04B8  0694               	xorwf	20,f	;volatile
 10343                           
 10344                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
 10345  04B9  30C0               	movlw	192
 10346  04BA  0020               	movlb	0	; select bank0
 10347  04BB  00AB               	movwf	??_Sensor_Acq_ExecutePacket
 10348  04BC  082B               	movf	??_Sensor_Acq_ExecutePacket,w
 10349  04BD  002F               	movlb	15	; select bank15
 10350  04BE  0694               	xorwf	20,f	;volatile
 10351                           
 10352                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
 10353  04BF  0020               	movlb	0	; select bank0
 10354  04C0  1837               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
 10355  04C1  2D09               	goto	l6676
 10356                           
 10357                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
 10358  04C2  002E               	movlb	14	; select bank14
 10359  04C3  081A               	movf	26,w	;volatile
 10360  04C4  07F0               	addwf	_packet_sample,f
 10361  04C5  081B               	movf	27,w	;volatile
 10362  04C6  3DF1               	addwfc	_packet_sample+1,f
 10363                           
 10364                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
 10365  04C7  002F               	movlb	15	; select bank15
 10366  04C8  081A               	movf	26,w	;volatile
 10367  04C9  07F2               	addwf	_packet_sample+2,f
 10368  04CA  081B               	movf	27,w	;volatile
 10369  04CB  3DF3               	addwfc	_packet_sample+3,f
 10370                           
 10371                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
 10372  04CC  0020               	movlb	0	; select bank0
 10373  04CD  0832               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
 10374  04CE  1D03               	btfss	3,2
 10375  04CF  2CEB               	goto	l6672
 10376                           
 10377                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
 10378  04D0  002E               	movlb	14	; select bank14
 10379  04D1  081A               	movf	26,w	;volatile
 10380  04D2  0020               	movlb	0	; select bank0
 10381  04D3  0235               	subwf	Sensor_Acq_ExecutePacket@last_b,w
 10382  04D4  00A0               	movwf	abs@a
 10383  04D5  002E               	movlb	14	; select bank14
 10384  04D6  081B               	movf	27,w	;volatile
 10385  04D7  0020               	movlb	0	; select bank0
 10386  04D8  3B36               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
 10387  04D9  00A1               	movwf	abs@a+1
 10388  04DA  3195  2536  3183   	fcall	_abs
 10389  04DD  0020               	movlb	0	; select bank0
 10390  04DE  0820               	movf	?_abs,w
 10391  04DF  0021               	movlb	1	; select bank1
 10392  04E0  07C4               	addwf	_packet_noise^(0+128),f
 10393  04E1  0020               	movlb	0	; select bank0
 10394  04E2  0821               	movf	?_abs+1,w
 10395  04E3  0021               	movlb	1	; select bank1
 10396  04E4  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
 10397                           
 10398                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
 10399  04E5  002E               	movlb	14	; select bank14
 10400  04E6  081B               	movf	27,w	;volatile
 10401  04E7  0020               	movlb	0	; select bank0
 10402  04E8  00B6               	movwf	Sensor_Acq_ExecutePacket@last_b+1
 10403  04E9  002E               	movlb	14	; select bank14
 10404  04EA  2D05               	goto	L4
 10405  04EB                     l6672:	
 10406                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
 10407                           
 10408                           
 10409                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
 10410  04EB  002F               	movlb	15	; select bank15
 10411  04EC  081A               	movf	26,w	;volatile
 10412  04ED  0020               	movlb	0	; select bank0
 10413  04EE  0235               	subwf	Sensor_Acq_ExecutePacket@last_b,w
 10414  04EF  00A0               	movwf	abs@a
 10415  04F0  002F               	movlb	15	; select bank15
 10416  04F1  081B               	movf	27,w	;volatile
 10417  04F2  0020               	movlb	0	; select bank0
 10418  04F3  3B36               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
 10419  04F4  00A1               	movwf	abs@a+1
 10420  04F5  3195  2536  3183   	fcall	_abs
 10421  04F8  0020               	movlb	0	; select bank0
 10422  04F9  0820               	movf	?_abs,w
 10423  04FA  0021               	movlb	1	; select bank1
 10424  04FB  07C4               	addwf	_packet_noise^(0+128),f
 10425  04FC  0020               	movlb	0	; select bank0
 10426  04FD  0821               	movf	?_abs+1,w
 10427  04FE  0021               	movlb	1	; select bank1
 10428  04FF  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
 10429                           
 10430                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
 10431  0500  002F               	movlb	15	; select bank15
 10432  0501  081B               	movf	27,w	;volatile
 10433  0502  0020               	movlb	0	; select bank0
 10434  0503  00B6               	movwf	Sensor_Acq_ExecutePacket@last_b+1
 10435  0504  002F               	movlb	15	; select bank15
 10436  0505                     L4:	
 10437  0505  081A               	movf	26,w	;volatile
 10438  0506  0020               	movlb	0	; select bank0
 10439  0507  00B5               	movwf	Sensor_Acq_ExecutePacket@last_b
 10440  0508  2D3B               	goto	l6688
 10441  0509                     l6676:	
 10442                           
 10443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
 10444  0509  002E               	movlb	14	; select bank14
 10445  050A  081A               	movf	26,w	;volatile
 10446  050B  02F0               	subwf	_packet_sample,f
 10447  050C  081B               	movf	27,w	;volatile
 10448  050D  3BF1               	subwfb	_packet_sample+1,f
 10449                           
 10450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
 10451  050E  002F               	movlb	15	; select bank15
 10452  050F  081A               	movf	26,w	;volatile
 10453  0510  02F2               	subwf	_packet_sample+2,f
 10454  0511  081B               	movf	27,w	;volatile
 10455  0512  3BF3               	subwfb	_packet_sample+3,f
 10456                           
 10457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
 10458  0513  0020               	movlb	0	; select bank0
 10459  0514  0832               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
 10460  0515  1D03               	btfss	3,2
 10461  0516  2D1E               	goto	l6684
 10462                           
 10463                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
 10464  0517  002E               	movlb	14	; select bank14
 10465  0518  081A               	movf	26,w	;volatile
 10466  0519  0020               	movlb	0	; select bank0
 10467  051A  0233               	subwf	Sensor_Acq_ExecutePacket@last_a,w
 10468  051B  00A0               	movwf	abs@a
 10469  051C  002E               	movlb	14	; select bank14
 10470  051D  2D24               	goto	L7
 10471  051E                     l6684:	
 10472                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
 10473                           
 10474                           
 10475                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
 10476  051E  002F               	movlb	15	; select bank15
 10477  051F  081A               	movf	26,w	;volatile
 10478  0520  0020               	movlb	0	; select bank0
 10479  0521  0233               	subwf	Sensor_Acq_ExecutePacket@last_a,w
 10480  0522  00A0               	movwf	abs@a
 10481  0523  002F               	movlb	15	; select bank15
 10482  0524                     L7:	
 10483  0524  081B               	movf	27,w	;volatile
 10484  0525  0020               	movlb	0	; select bank0
 10485  0526  3B34               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
 10486  0527  00A1               	movwf	abs@a+1
 10487  0528  3195  2536  3183   	fcall	_abs
 10488  052B  0020               	movlb	0	; select bank0
 10489  052C  0820               	movf	?_abs,w
 10490  052D  0021               	movlb	1	; select bank1
 10491  052E  07C4               	addwf	_packet_noise^(0+128),f
 10492  052F  0020               	movlb	0	; select bank0
 10493  0530  0821               	movf	?_abs+1,w
 10494  0531  0021               	movlb	1	; select bank1
 10495  0532  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
 10496                           
 10497                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
 10498  0533  002E               	movlb	14	; select bank14
 10499  0534  081B               	movf	27,w	;volatile
 10500  0535  0020               	movlb	0	; select bank0
 10501  0536  00B4               	movwf	Sensor_Acq_ExecutePacket@last_a+1
 10502  0537  002E               	movlb	14	; select bank14
 10503  0538  081A               	movf	26,w	;volatile
 10504  0539  0020               	movlb	0	; select bank0
 10505  053A  00B3               	movwf	Sensor_Acq_ExecutePacket@last_a
 10506  053B                     l6688:	
 10507                           
 10508                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
 10509  053B  0837               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
 10510  053C  1903               	btfsc	3,2
 10511                           
 10512                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
 10513  053D  146D               	bsf	_sensor_globalFlags,0	;volatile
 10514                           
 10515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
 10516  053E  3001               	movlw	1
 10517  053F  02B7               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
 10518                           
 10519                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
 10520  0540  1CED               	btfss	_sensor_globalFlags,1	;volatile
 10521  0541  2D44               	goto	l299
 10522                           
 10523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
 10524  0542  156D               	bsf	_sensor_globalFlags,2	;volatile
 10525                           
 10526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
 10527  0543  146D               	bsf	_sensor_globalFlags,0	;volatile
 10528  0544                     l299:	
 10529                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
 10530                           
 10531                           
 10532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
 10533  0544  14ED               	bsf	_sensor_globalFlags,1	;volatile
 10534                           
 10535                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
 10536  0545  1C6D               	btfss	_sensor_globalFlags,0	;volatile
 10537  0546  2C98               	goto	l6652
 10538                           
 10539                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
 10540  0547  3192  2269  3183   	fcall	_TMR2_StopTimer
 10541                           
 10542                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
 10543  054A  0020               	movlb	0	; select bank0
 10544  054B  082C               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
 10545  054C  002E               	movlb	14	; select bank14
 10546  054D  0092               	movwf	18	;volatile
 10547                           
 10548                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
 10549  054E  0020               	movlb	0	; select bank0
 10550  054F  082D               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
 10551  0550  002E               	movlb	14	; select bank14
 10552  0551  0093               	movwf	19	;volatile
 10553                           
 10554                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
 10555  0552  0020               	movlb	0	; select bank0
 10556  0553  082E               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
 10557  0554  002F               	movlb	15	; select bank15
 10558  0555  0093               	movwf	19	;volatile
 10559                           
 10560                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
 10561  0556  0020               	movlb	0	; select bank0
 10562  0557  1D6D               	btfss	_sensor_globalFlags,2	;volatile
 10563  0558  2D5B               	goto	l301
 10564                           
 10565                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
 10566  0559  30FB               	movlw	251
 10567  055A  0008               	return
 10568  055B                     l301:	
 10569                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
 10570                           
 10571                           
 10572                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
 10573  055B  1DED               	btfss	_sensor_globalFlags,3	;volatile
 10574  055C  2D5F               	goto	l6716
 10575                           
 10576                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
 10577  055D  30FA               	movlw	250
 10578  055E  0008               	return
 10579  055F                     l6716:	
 10580                           
 10581                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
 10582  055F  082F               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
 10583  0560  1903               	btfsc	3,2
 10584  0561  2D68               	goto	l6720
 10585                           
 10586                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
 10587  0562  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10588  0563  3E08               	addlw	8
 10589  0564  0086               	movwf	6
 10590  0565  3001               	movlw	1	; select bank2/3
 10591  0566  0087               	movwf	7
 10592  0567  1181               	bcf	1,3
 10593  0568                     l6720:	
 10594                           
 10595                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
 10596  0568  0830               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
 10597  0569  1903               	btfsc	3,2
 10598  056A  2D71               	goto	l6724
 10599                           
 10600                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
 10601  056B  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10602  056C  3E08               	addlw	8
 10603  056D  0086               	movwf	6
 10604  056E  3001               	movlw	1	; select bank2/3
 10605  056F  0087               	movwf	7
 10606  0570  1181               	bcf	1,3
 10607  0571                     l6724:	
 10608                           
 10609                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
 10610  0571  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10611  0572  3194  242D  3183   	fcall	_Sensor_isEnabled
 10612  0575  3A00               	xorlw	0
 10613  0576  1903               	skipnz
 10614  0577  2D85               	goto	l6730
 10615  0578  0020               	movlb	0	; select bank0
 10616  0579  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10617  057A  3193  2331  3183   	fcall	_Sensor_isCalibrated
 10618  057D  3A00               	xorlw	0
 10619  057E  1D03               	skipz
 10620  057F  2D85               	goto	l6730
 10621                           
 10622                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
 10623  0580  0020               	movlb	0	; select bank0
 10624  0581  0838               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
 10625  0582  318E  261D  3183   	fcall	_Sensor_autoCalibration
 10626  0585                     l6730:	
 10627                           
 10628                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
 10629  0585  0020               	movlb	0	; select bank0
 10630  0586  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10631  0587  3194  242D  3183   	fcall	_Sensor_isEnabled
 10632  058A  3A00               	xorlw	0
 10633  058B  1903               	skipnz
 10634  058C  2D9A               	goto	l6736
 10635  058D  0020               	movlb	0	; select bank0
 10636  058E  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10637  058F  3193  2331  3183   	fcall	_Sensor_isCalibrated
 10638  0592  3A00               	xorlw	0
 10639  0593  1D03               	skipz
 10640  0594  2D9A               	goto	l6736
 10641                           
 10642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
 10643  0595  0020               	movlb	0	; select bank0
 10644  0596  082A               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
 10645  0597  318E  261D  3183   	fcall	_Sensor_autoCalibration
 10646  059A                     l6736:	
 10647                           
 10648                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
 10649  059A  002E               	movlb	14	; select bank14
 10650  059B  0196               	clrf	22	;volatile
 10651                           
 10652                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
 10653  059C  002F               	movlb	15	; select bank15
 10654  059D  0196               	clrf	22	;volatile
 10655                           
 10656                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
 10657  059E  002E               	movlb	14	; select bank14
 10658  059F  0197               	clrf	23	;volatile
 10659                           
 10660                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
 10661  05A0  002F               	movlb	15	; select bank15
 10662  05A1  0197               	clrf	23	;volatile
 10663                           
 10664                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
 10665  05A2  002E               	movlb	14	; select bank14
 10666  05A3  1011               	bcf	17,0	;volatile
 10667                           
 10668                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
 10669  05A4  002F               	movlb	15	; select bank15
 10670  05A5  1011               	bcf	17,0	;volatile
 10671  05A6  2C32               	goto	l6576
 10672  05A7                     __end_of_Sensor_Acq_ExecutePacket:	
 10673                           
 10674                           	psect	text52
 10675  1269                     __ptext52:	
 10676 ;; *************** function _TMR2_StopTimer *****************
 10677 ;; Defined at:
 10678 ;;		line 85 in file "mcc_generated_files/tmr2.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;		None
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;		None
 10683 ;; Return value:  Size  Location     Type
 10684 ;;                  1    wreg      void 
 10685 ;; Registers used:
 10686 ;;		None
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10692 ;;      Params:         0       0       0       0       0       0       0       0
 10693 ;;      Locals:         0       0       0       0       0       0       0       0
 10694 ;;      Temps:          0       0       0       0       0       0       0       0
 10695 ;;      Totals:         0       0       0       0       0       0       0       0
 10696 ;;Total ram usage:        0 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    4
 10699 ;; This function calls:
 10700 ;;		Nothing
 10701 ;; This function is called by:
 10702 ;;		_Sensor_Acq_ExecutePacket
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           
 10707                           ;psect for function _TMR2_StopTimer
 10708  1269                     _TMR2_StopTimer:	
 10709                           
 10710                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
 10711                           
 10712                           ;incstack = 0
 10713                           ; Regs used in _TMR2_StopTimer: []
 10714  1269  0020               	movlb	0	; select bank0
 10715  126A  111C               	bcf	28,2	;volatile
 10716  126B  0008               	return
 10717  126C                     __end_of_TMR2_StopTimer:	
 10718                           
 10719                           	psect	text53
 10720  1266                     __ptext53:	
 10721 ;; *************** function _TMR2_StartTimer *****************
 10722 ;; Defined at:
 10723 ;;		line 79 in file "mcc_generated_files/tmr2.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;		None
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;		None
 10728 ;; Return value:  Size  Location     Type
 10729 ;;                  1    wreg      void 
 10730 ;; Registers used:
 10731 ;;		None
 10732 ;; Tracked objects:
 10733 ;;		On entry : 0/0
 10734 ;;		On exit  : 0/0
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10737 ;;      Params:         0       0       0       0       0       0       0       0
 10738 ;;      Locals:         0       0       0       0       0       0       0       0
 10739 ;;      Temps:          0       0       0       0       0       0       0       0
 10740 ;;      Totals:         0       0       0       0       0       0       0       0
 10741 ;;Total ram usage:        0 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:    4
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_Sensor_Acq_ExecutePacket
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           
 10752                           ;psect for function _TMR2_StartTimer
 10753  1266                     _TMR2_StartTimer:	
 10754                           
 10755                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
 10756                           
 10757                           ;incstack = 0
 10758                           ; Regs used in _TMR2_StartTimer: []
 10759  1266  0020               	movlb	0	; select bank0
 10760  1267  151C               	bsf	28,2	;volatile
 10761  1268  0008               	return
 10762  1269                     __end_of_TMR2_StartTimer:	
 10763                           
 10764                           	psect	text54
 10765  1280                     __ptext54:	
 10766 ;; *************** function _TMR2_LoadPeriodRegister *****************
 10767 ;; Defined at:
 10768 ;;		line 106 in file "mcc_generated_files/tmr2.c"
 10769 ;; Parameters:    Size  Location     Type
 10770 ;;  periodVal       1    wreg     unsigned char 
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;  periodVal       1    0[BANK0 ] unsigned char 
 10773 ;; Return value:  Size  Location     Type
 10774 ;;                  1    wreg      void 
 10775 ;; Registers used:
 10776 ;;		wreg
 10777 ;; Tracked objects:
 10778 ;;		On entry : 0/0
 10779 ;;		On exit  : 0/0
 10780 ;;		Unchanged: 0/0
 10781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10782 ;;      Params:         0       0       0       0       0       0       0       0
 10783 ;;      Locals:         0       1       0       0       0       0       0       0
 10784 ;;      Temps:          0       0       0       0       0       0       0       0
 10785 ;;      Totals:         0       1       0       0       0       0       0       0
 10786 ;;Total ram usage:        1 bytes
 10787 ;; Hardware stack levels used:    1
 10788 ;; Hardware stack levels required when called:    4
 10789 ;; This function calls:
 10790 ;;		Nothing
 10791 ;; This function is called by:
 10792 ;;		_Sensor_Acq_ExecutePacket
 10793 ;; This function uses a non-reentrant model
 10794 ;;
 10795                           
 10796                           
 10797                           ;psect for function _TMR2_LoadPeriodRegister
 10798  1280                     _TMR2_LoadPeriodRegister:	
 10799                           
 10800                           ;incstack = 0
 10801                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
 10802                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 10803  1280  0020               	movlb	0	; select bank0
 10804  1281  00A0               	movwf	TMR2_LoadPeriodRegister@periodVal
 10805                           
 10806                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
 10807  1282  0820               	movf	TMR2_LoadPeriodRegister@periodVal,w
 10808  1283  009B               	movwf	27	;volatile
 10809  1284  0008               	return
 10810  1285                     __end_of_TMR2_LoadPeriodRegister:	
 10811                           
 10812                           	psect	text55
 10813  066E                     __ptext55:	
 10814 ;; *************** function _Sensor_loadADCSettings *****************
 10815 ;; Defined at:
 10816 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;  sensor          1    wreg     PTR struct .
 10819 ;;		 -> NULL(0), mtouch_sensor(27), 
 10820 ;;  adc_index       1    1[BANK0 ] unsigned char 
 10821 ;; Auto vars:     Size  Location     Type
 10822 ;;  sensor          1    8[BANK0 ] PTR struct .
 10823 ;;		 -> NULL(0), mtouch_sensor(27), 
 10824 ;;  addressOffse    1    7[BANK0 ] unsigned char 
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  1    wreg      void 
 10827 ;; Registers used:
 10828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10834 ;;      Params:         0       1       0       0       0       0       0       0
 10835 ;;      Locals:         0       4       0       0       0       0       0       0
 10836 ;;      Temps:          0       3       0       0       0       0       0       0
 10837 ;;      Totals:         0       8       0       0       0       0       0       0
 10838 ;;Total ram usage:        8 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    5
 10841 ;; This function calls:
 10842 ;;		_Sensor_isCalibrated
 10843 ;;		_Sensor_isCalibratingAcqTime
 10844 ;; This function is called by:
 10845 ;;		_Sensor_Acq_ExecutePacket
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function _Sensor_loadADCSettings
 10851  066E                     _Sensor_loadADCSettings:	
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10855                           ;Sensor_loadADCSettings@sensor stored from wreg
 10856  066E  0020               	movlb	0	; select bank0
 10857  066F  00A8               	movwf	Sensor_loadADCSettings@sensor
 10858                           
 10859                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
 10860  0670  0828               	movf	Sensor_loadADCSettings@sensor,w
 10861  0671  1903               	btfsc	3,2
 10862  0672  0008               	return
 10863                           
 10864                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
 10865  0673  0821               	movf	Sensor_loadADCSettings@adc_index,w
 10866  0674  1D03               	btfss	3,2
 10867  0675  2E79               	goto	l6490
 10868  0676  01A5               	clrf	_Sensor_loadADCSettings$558
 10869  0677  01A6               	clrf	_Sensor_loadADCSettings$558+1
 10870  0678  2E7D               	goto	l253
 10871  0679                     l6490:	
 10872  0679  3080               	movlw	128
 10873  067A  00A5               	movwf	_Sensor_loadADCSettings$558
 10874  067B  3000               	movlw	0
 10875  067C  00A6               	movwf	_Sensor_loadADCSettings$558+1
 10876  067D                     l253:	
 10877  067D  0825               	movf	_Sensor_loadADCSettings$558,w
 10878  067E  00A2               	movwf	??_Sensor_loadADCSettings
 10879  067F  0822               	movf	??_Sensor_loadADCSettings,w
 10880  0680  00A7               	movwf	Sensor_loadADCSettings@addressOffset
 10881                           
 10882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
 10883  0681  0A28               	incf	Sensor_loadADCSettings@sensor,w
 10884  0682  0086               	movwf	6
 10885  0683  3001               	movlw	1	; select bank2/3
 10886  0684  0087               	movwf	7
 10887  0685  0801               	movf	1,w
 10888  0686  00A2               	movwf	??_Sensor_loadADCSettings
 10889  0687  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 10890  0688  3E11               	addlw	17
 10891  0689  00A3               	movwf	??_Sensor_loadADCSettings+1
 10892  068A  01A4               	clrf	??_Sensor_loadADCSettings+2
 10893  068B  3007               	movlw	7
 10894  068C  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 10895  068D  0823               	movf	??_Sensor_loadADCSettings+1,w
 10896  068E  0086               	movwf	6
 10897  068F  0824               	movf	??_Sensor_loadADCSettings+2,w
 10898  0690  0087               	movwf	7
 10899  0691  0822               	movf	??_Sensor_loadADCSettings,w
 10900  0692  0081               	movwf	1
 10901                           
 10902                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
 10903  0693  0828               	movf	Sensor_loadADCSettings@sensor,w
 10904  0694  3E05               	addlw	5
 10905  0695  0086               	movwf	6
 10906  0696  3001               	movlw	1	; select bank2/3
 10907  0697  0087               	movwf	7
 10908  0698  0801               	movf	1,w
 10909  0699  00A2               	movwf	??_Sensor_loadADCSettings
 10910  069A  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 10911  069B  3E19               	addlw	25
 10912  069C  00A3               	movwf	??_Sensor_loadADCSettings+1
 10913  069D  01A4               	clrf	??_Sensor_loadADCSettings+2
 10914  069E  3007               	movlw	7
 10915  069F  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 10916  06A0  0823               	movf	??_Sensor_loadADCSettings+1,w
 10917  06A1  0086               	movwf	6
 10918  06A2  0824               	movf	??_Sensor_loadADCSettings+2,w
 10919  06A3  0087               	movwf	7
 10920  06A4  0822               	movf	??_Sensor_loadADCSettings,w
 10921  06A5  0081               	movwf	1
 10922                           
 10923                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
 10924  06A6  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 10925  06A7  3E13               	addlw	19
 10926  06A8  00A2               	movwf	??_Sensor_loadADCSettings
 10927  06A9  01A3               	clrf	??_Sensor_loadADCSettings+1
 10928  06AA  3007               	movlw	7
 10929  06AB  3DA3               	addwfc	??_Sensor_loadADCSettings+1,f
 10930  06AC  0822               	movf	??_Sensor_loadADCSettings,w
 10931  06AD  0086               	movwf	6
 10932  06AE  0823               	movf	??_Sensor_loadADCSettings+1,w
 10933  06AF  0087               	movwf	7
 10934  06B0  3050               	movlw	80
 10935  06B1  0081               	movwf	1
 10936                           
 10937                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
 10938  06B2  30FE               	movlw	254
 10939  06B3  00A2               	movwf	??_Sensor_loadADCSettings
 10940  06B4  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 10941  06B5  3E18               	addlw	24
 10942  06B6  0086               	movwf	6
 10943  06B7  0187               	clrf	7
 10944  06B8  3007               	movlw	7
 10945  06B9  3D87               	addwfc	7,f
 10946  06BA  0822               	movf	??_Sensor_loadADCSettings,w
 10947  06BB  0581               	andwf	1,f
 10948                           
 10949                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
 10950  06BC  0828               	movf	Sensor_loadADCSettings@sensor,w
 10951  06BD  3193  2331  3186   	fcall	_Sensor_isCalibrated
 10952  06C0  3A00               	xorlw	0
 10953  06C1  1903               	skipnz
 10954  06C2  2ED8               	goto	l6504
 10955                           
 10956                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
 10957  06C3  0020               	movlb	0	; select bank0
 10958  06C4  0828               	movf	Sensor_loadADCSettings@sensor,w
 10959  06C5  3E02               	addlw	2
 10960  06C6  0086               	movwf	6
 10961  06C7  3001               	movlw	1	; select bank2/3
 10962  06C8  0087               	movwf	7
 10963  06C9  0801               	movf	1,w
 10964  06CA  00A2               	movwf	??_Sensor_loadADCSettings
 10965  06CB  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 10966  06CC  3E16               	addlw	22
 10967  06CD  00A3               	movwf	??_Sensor_loadADCSettings+1
 10968  06CE  01A4               	clrf	??_Sensor_loadADCSettings+2
 10969  06CF  3007               	movlw	7
 10970  06D0  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 10971  06D1  0823               	movf	??_Sensor_loadADCSettings+1,w
 10972  06D2  0086               	movwf	6
 10973  06D3  0824               	movf	??_Sensor_loadADCSettings+2,w
 10974  06D4  0087               	movwf	7
 10975  06D5  0822               	movf	??_Sensor_loadADCSettings,w
 10976  06D6  0081               	movwf	1
 10977  06D7  2EED               	goto	L9
 10978  06D8                     l6504:	
 10979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
 10980                           
 10981                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
 10982                           
 10983                           
 10984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
 10985  06D8  0020               	movlb	0	; select bank0
 10986  06D9  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 10987  06DA  3E16               	addlw	22
 10988  06DB  00A2               	movwf	??_Sensor_loadADCSettings
 10989  06DC  01A3               	clrf	??_Sensor_loadADCSettings+1
 10990  06DD  3007               	movlw	7
 10991  06DE  3DA3               	addwfc	??_Sensor_loadADCSettings+1,f
 10992  06DF  0822               	movf	??_Sensor_loadADCSettings,w
 10993  06E0  0086               	movwf	6
 10994  06E1  0823               	movf	??_Sensor_loadADCSettings+1,w
 10995  06E2  0087               	movwf	7
 10996  06E3  3020               	movlw	32
 10997  06E4  0081               	movwf	1
 10998                           
 10999                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
 11000  06E5  0828               	movf	Sensor_loadADCSettings@sensor,w
 11001  06E6  3193  2327  3186   	fcall	_Sensor_isCalibratingAcqTime
 11002  06E9  3A00               	xorlw	0
 11003  06EA  1903               	skipnz
 11004  06EB  2F00               	goto	l6510
 11005                           
 11006                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
 11007  06EC  0020               	movlb	0	; select bank0
 11008  06ED                     L9:	
 11009  06ED  0828               	movf	Sensor_loadADCSettings@sensor,w
 11010  06EE  3E03               	addlw	3
 11011  06EF  0086               	movwf	6
 11012  06F0  3001               	movlw	1	; select bank2/3
 11013  06F1  0087               	movwf	7
 11014  06F2  0801               	movf	1,w
 11015  06F3  00A2               	movwf	??_Sensor_loadADCSettings
 11016  06F4  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11017  06F5  3E17               	addlw	23
 11018  06F6  00A3               	movwf	??_Sensor_loadADCSettings+1
 11019  06F7  01A4               	clrf	??_Sensor_loadADCSettings+2
 11020  06F8  3007               	movlw	7
 11021  06F9  3DA4               	addwfc	??_Sensor_loadADCSettings+2,f
 11022  06FA  0823               	movf	??_Sensor_loadADCSettings+1,w
 11023  06FB  0086               	movwf	6
 11024  06FC  0824               	movf	??_Sensor_loadADCSettings+2,w
 11025  06FD  0087               	movwf	7
 11026  06FE  0822               	movf	??_Sensor_loadADCSettings,w
 11027  06FF  2F0C               	goto	L8
 11028  0700                     l6510:	
 11029                           
 11030                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
 11031  0700  0020               	movlb	0	; select bank0
 11032  0701  0827               	movf	Sensor_loadADCSettings@addressOffset,w
 11033  0702  3E17               	addlw	23
 11034  0703  00A2               	movwf	??_Sensor_loadADCSettings
 11035  0704  01A3               	clrf	??_Sensor_loadADCSettings+1
 11036  0705  3007               	movlw	7
 11037  0706  3DA3               	addwfc	??_Sensor_loadADCSettings+1,f
 11038  0707  0822               	movf	??_Sensor_loadADCSettings,w
 11039  0708  0086               	movwf	6
 11040  0709  0823               	movf	??_Sensor_loadADCSettings+1,w
 11041  070A  0087               	movwf	7
 11042  070B  3020               	movlw	32
 11043  070C                     L8:	
 11044  070C  0081               	movwf	1
 11045                           
 11046                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
 11047                           
 11048                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
 11049  070D  0828               	movf	Sensor_loadADCSettings@sensor,w
 11050  070E  3E04               	addlw	4
 11051  070F  0086               	movwf	6
 11052  0710  3001               	movlw	1	; select bank2/3
 11053  0711  0087               	movwf	7
 11054  0712  0801               	movf	1,w
 11055  0713  00A2               	movwf	??_Sensor_loadADCSettings
 11056  0714  01A3               	clrf	??_Sensor_loadADCSettings+1
 11057  0715  3009               	movlw	9
 11058  0716                     u5405:	
 11059  0716  35A2               	lslf	??_Sensor_loadADCSettings,f
 11060  0717  0DA3               	rlf	??_Sensor_loadADCSettings+1,f
 11061  0718  0B89               	decfsz	9,f
 11062  0719  2F16               	goto	u5405
 11063  071A  3521               	lslf	Sensor_loadADCSettings@adc_index,w
 11064  071B  3E70               	addlw	(low (_packet_sample| 0))& (0+255)
 11065  071C  0086               	movwf	6
 11066  071D  0187               	clrf	7
 11067  071E  0822               	movf	??_Sensor_loadADCSettings,w
 11068  071F  3FC0               	movwi [0]fsr1
 11069  0720  0823               	movf	??_Sensor_loadADCSettings+1,w
 11070  0721  3FC1               	movwi [1]fsr1
 11071  0722  0008               	return
 11072  0723                     __end_of_Sensor_loadADCSettings:	
 11073                           
 11074                           	psect	text56
 11075  1331                     __ptext56:	
 11076 ;; *************** function _Sensor_isCalibrated *****************
 11077 ;; Defined at:
 11078 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11079 ;; Parameters:    Size  Location     Type
 11080 ;;  sensor          1    wreg     PTR struct .
 11081 ;;		 -> NULL(0), mtouch_sensor(27), 
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;  sensor          1    0[BANK0 ] PTR struct .
 11084 ;;		 -> NULL(0), mtouch_sensor(27), 
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      _Bool 
 11087 ;; Registers used:
 11088 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11094 ;;      Params:         0       0       0       0       0       0       0       0
 11095 ;;      Locals:         0       1       0       0       0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0
 11097 ;;      Totals:         0       1       0       0       0       0       0       0
 11098 ;;Total ram usage:        1 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    4
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_Sensor_Acquisition
 11105 ;;		_Sensor_loadADCSettings
 11106 ;;		_Sensor_Acq_ExecutePacket
 11107 ;; This function uses a non-reentrant model
 11108 ;;
 11109                           
 11110                           
 11111                           ;psect for function _Sensor_isCalibrated
 11112  1331                     _Sensor_isCalibrated:	
 11113                           
 11114                           ;incstack = 0
 11115                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 11116                           ;Sensor_isCalibrated@sensor stored from wreg
 11117  1331  0020               	movlb	0	; select bank0
 11118  1332  00A0               	movwf	Sensor_isCalibrated@sensor
 11119                           
 11120                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
 11121  1333  0820               	movf	Sensor_isCalibrated@sensor,w
 11122  1334  3E08               	addlw	8
 11123  1335  0086               	movwf	6
 11124  1336  3001               	movlw	1	; select bank2/3
 11125  1337  0087               	movwf	7
 11126  1338  0C01               	rrf	1,w
 11127  1339  0C89               	rrf	9,f
 11128  133A  3901               	andlw	1
 11129  133B  0008               	return
 11130  133C                     __end_of_Sensor_isCalibrated:	
 11131                           
 11132                           	psect	text57
 11133  142D                     __ptext57:	
 11134 ;; *************** function _Sensor_isEnabled *****************
 11135 ;; Defined at:
 11136 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11137 ;; Parameters:    Size  Location     Type
 11138 ;;  sensor          1    wreg     PTR struct .
 11139 ;;		 -> NULL(0), mtouch_sensor(27), 
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;  sensor          1    1[BANK0 ] PTR struct .
 11142 ;;		 -> NULL(0), mtouch_sensor(27), 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  1    wreg      _Bool 
 11145 ;; Registers used:
 11146 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11147 ;; Tracked objects:
 11148 ;;		On entry : 0/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11152 ;;      Params:         0       0       0       0       0       0       0       0
 11153 ;;      Locals:         0       1       0       0       0       0       0       0
 11154 ;;      Temps:          0       1       0       0       0       0       0       0
 11155 ;;      Totals:         0       2       0       0       0       0       0       0
 11156 ;;Total ram usage:        2 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    4
 11159 ;; This function calls:
 11160 ;;		Nothing
 11161 ;; This function is called by:
 11162 ;;		_Sensor_Service
 11163 ;;		_Sensor_postAcquisitionProcess
 11164 ;;		_Sensor_Acq_ExecutePacket
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           
 11169                           ;psect for function _Sensor_isEnabled
 11170  142D                     _Sensor_isEnabled:	
 11171                           
 11172                           ;incstack = 0
 11173                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 11174                           ;Sensor_isEnabled@sensor stored from wreg
 11175  142D  0020               	movlb	0	; select bank0
 11176  142E  00A1               	movwf	Sensor_isEnabled@sensor
 11177                           
 11178                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
 11179  142F  0821               	movf	Sensor_isEnabled@sensor,w
 11180  1430  1903               	btfsc	3,2
 11181  1431  2C3D               	goto	l4316
 11182                           
 11183                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
 11184  1432  0821               	movf	Sensor_isEnabled@sensor,w
 11185  1433  3E08               	addlw	8
 11186  1434  0086               	movwf	6
 11187  1435  3001               	movlw	1	; select bank2/3
 11188  1436  0087               	movwf	7
 11189  1437  0C01               	rrf	1,w
 11190  1438  00A0               	movwf	??_Sensor_isEnabled
 11191  1439  0CA0               	rrf	??_Sensor_isEnabled,f
 11192  143A  0C20               	rrf	??_Sensor_isEnabled,w
 11193  143B  3901               	andlw	1
 11194  143C  0008               	return
 11195  143D                     l4316:	
 11196                           
 11197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
 11198  143D  3000               	movlw	0
 11199  143E  0008               	return
 11200  143F                     __end_of_Sensor_isEnabled:	
 11201                           
 11202                           	psect	text58
 11203  1389                     __ptext58:	
 11204 ;; *************** function _Sensor_isActive *****************
 11205 ;; Defined at:
 11206 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11207 ;; Parameters:    Size  Location     Type
 11208 ;;  sensor          1    wreg     PTR struct .
 11209 ;;		 -> NULL(0), mtouch_sensor(27), 
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;  sensor          1    0[BANK0 ] PTR struct .
 11212 ;;		 -> NULL(0), mtouch_sensor(27), 
 11213 ;; Return value:  Size  Location     Type
 11214 ;;                  1    wreg      _Bool 
 11215 ;; Registers used:
 11216 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11217 ;; Tracked objects:
 11218 ;;		On entry : 0/0
 11219 ;;		On exit  : 0/0
 11220 ;;		Unchanged: 0/0
 11221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11222 ;;      Params:         0       0       0       0       0       0       0       0
 11223 ;;      Locals:         0       1       0       0       0       0       0       0
 11224 ;;      Temps:          0       0       0       0       0       0       0       0
 11225 ;;      Totals:         0       1       0       0       0       0       0       0
 11226 ;;Total ram usage:        1 bytes
 11227 ;; Hardware stack levels used:    1
 11228 ;; Hardware stack levels required when called:    4
 11229 ;; This function calls:
 11230 ;;		Nothing
 11231 ;; This function is called by:
 11232 ;;		_Sensor_Acquisition
 11233 ;;		_Sensor_Acq_ExecutePacket
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _Sensor_isActive
 11239  1389                     _Sensor_isActive:	
 11240                           
 11241                           ;incstack = 0
 11242                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 11243                           ;Sensor_isActive@sensor stored from wreg
 11244  1389  0020               	movlb	0	; select bank0
 11245  138A  00A0               	movwf	Sensor_isActive@sensor
 11246                           
 11247                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
 11248  138B  0820               	movf	Sensor_isActive@sensor,w
 11249  138C  1D03               	btfss	3,2
 11250  138D  2B90               	goto	l6478
 11251                           
 11252                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
 11253  138E  3000               	movlw	0
 11254  138F  0008               	return
 11255  1390                     l6478:	
 11256                           
 11257                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
 11258  1390  0820               	movf	Sensor_isActive@sensor,w
 11259  1391  3E08               	addlw	8
 11260  1392  0086               	movwf	6
 11261  1393  3001               	movlw	1	; select bank2/3
 11262  1394  0087               	movwf	7
 11263  1395  0C01               	rrf	1,w
 11264  1396  3901               	andlw	1
 11265  1397  0008               	return
 11266  1398                     __end_of_Sensor_isActive:	
 11267                           
 11268                           	psect	text59
 11269  0E1D                     __ptext59:	
 11270 ;; *************** function _Sensor_autoCalibration *****************
 11271 ;; Defined at:
 11272 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;  sensor          1    wreg     PTR struct .
 11275 ;;		 -> NULL(0), mtouch_sensor(27), 
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;  sensor          1    9[BANK0 ] PTR struct .
 11278 ;;		 -> NULL(0), mtouch_sensor(27), 
 11279 ;;  adcIndex        1    8[BANK0 ] unsigned char 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  1    wreg      void 
 11282 ;; Registers used:
 11283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11289 ;;      Params:         0       0       0       0       0       0       0       0
 11290 ;;      Locals:         0       2       0       0       0       0       0       0
 11291 ;;      Temps:          0       4       0       0       0       0       0       0
 11292 ;;      Totals:         0       6       0       0       0       0       0       0
 11293 ;;Total ram usage:        6 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    5
 11296 ;; This function calls:
 11297 ;;		_Sensor_getScanGroupIndex
 11298 ;;		_Sensor_isCalibratingAcqTime
 11299 ;;		_Sensor_setCalibratAcqTime
 11300 ;;		_Sensor_setCalibrated
 11301 ;;		_abs
 11302 ;; This function is called by:
 11303 ;;		_Sensor_Acq_ExecutePacket
 11304 ;; This function uses a non-reentrant model
 11305 ;;
 11306                           
 11307                           
 11308                           ;psect for function _Sensor_autoCalibration
 11309  0E1D                     _Sensor_autoCalibration:	
 11310                           
 11311                           ;incstack = 0
 11312                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11313                           ;Sensor_autoCalibration@sensor stored from wreg
 11314  0E1D  0020               	movlb	0	; select bank0
 11315  0E1E  00A9               	movwf	Sensor_autoCalibration@sensor
 11316                           
 11317                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 11318  0E1F  0829               	movf	Sensor_autoCalibration@sensor,w
 11319  0E20  3197  273E  318E   	fcall	_Sensor_getScanGroupIndex
 11320  0E23  0020               	movlb	0	; select bank0
 11321  0E24  00A4               	movwf	??_Sensor_autoCalibration
 11322  0E25  0824               	movf	??_Sensor_autoCalibration,w
 11323  0E26  00A8               	movwf	Sensor_autoCalibration@adcIndex
 11324                           
 11325                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 11326  0E27  0829               	movf	Sensor_autoCalibration@sensor,w
 11327  0E28  3193  2327  318E   	fcall	_Sensor_isCalibratingAcqTime
 11328  0E2B  3A00               	xorlw	0
 11329  0E2C  1D03               	skipz
 11330  0E2D  2E61               	goto	l6530
 11331                           
 11332                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 11333  0E2E  0020               	movlb	0	; select bank0
 11334  0E2F  3528               	lslf	Sensor_autoCalibration@adcIndex,w
 11335  0E30  3E70               	addlw	(low (_packet_sample| 0))& (0+255)
 11336  0E31  0086               	movwf	6
 11337  0E32  0187               	clrf	7
 11338  0E33  3F40               	moviw [0]fsr1
 11339  0E34  00A4               	movwf	??_Sensor_autoCalibration
 11340  0E35  3F41               	moviw [1]fsr1
 11341  0E36  00A5               	movwf	??_Sensor_autoCalibration+1
 11342  0E37  0829               	movf	Sensor_autoCalibration@sensor,w
 11343  0E38  3E04               	addlw	4
 11344  0E39  0086               	movwf	6
 11345  0E3A  3001               	movlw	1	; select bank2/3
 11346  0E3B  0087               	movwf	7
 11347  0E3C  0801               	movf	1,w
 11348  0E3D  00A6               	movwf	??_Sensor_autoCalibration+2
 11349  0E3E  01A7               	clrf	??_Sensor_autoCalibration+3
 11350  0E3F  3009               	movlw	9
 11351  0E40                     u5425:	
 11352  0E40  35A6               	lslf	??_Sensor_autoCalibration+2,f
 11353  0E41  0DA7               	rlf	??_Sensor_autoCalibration+3,f
 11354  0E42  0B89               	decfsz	9,f
 11355  0E43  2E40               	goto	u5425
 11356  0E44  0825               	movf	??_Sensor_autoCalibration+1,w
 11357  0E45  0227               	subwf	??_Sensor_autoCalibration+3,w
 11358  0E46  1D03               	skipz
 11359  0E47  2E4A               	goto	u5435
 11360  0E48  0824               	movf	??_Sensor_autoCalibration,w
 11361  0E49  0226               	subwf	??_Sensor_autoCalibration+2,w
 11362  0E4A                     u5435:	
 11363  0E4A  1803               	skipnc
 11364  0E4B  2E5D               	goto	l6528
 11365                           
 11366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 11367  0E4C  3001               	movlw	1
 11368  0E4D  00A4               	movwf	??_Sensor_autoCalibration
 11369  0E4E  0829               	movf	Sensor_autoCalibration@sensor,w
 11370  0E4F  3E05               	addlw	5
 11371  0E50  0086               	movwf	6
 11372  0E51  3001               	movlw	1	; select bank2/3
 11373  0E52  0087               	movwf	7
 11374  0E53  0824               	movf	??_Sensor_autoCalibration,w
 11375  0E54  0781               	addwf	1,f
 11376  0E55  300F               	movlw	15
 11377  0E56  0201               	subwf	1,w
 11378  0E57  1C03               	skipc
 11379  0E58  0008               	return
 11380                           
 11381                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 11382  0E59  0829               	movf	Sensor_autoCalibration@sensor,w
 11383  0E5A  3193  23D8         	fcall	_Sensor_setCalibratAcqTime
 11384  0E5C  0008               	return
 11385  0E5D                     l6528:	
 11386                           
 11387                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
 11388  0E5D  0829               	movf	Sensor_autoCalibration@sensor,w
 11389  0E5E  3193  23D8         	fcall	_Sensor_setCalibratAcqTime
 11390  0E60  0008               	return
 11391  0E61                     l6530:	
 11392                           
 11393                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 11394  0E61  0020               	movlb	0	; select bank0
 11395  0E62  0829               	movf	Sensor_autoCalibration@sensor,w
 11396  0E63  3E04               	addlw	4
 11397  0E64  0086               	movwf	6
 11398  0E65  3001               	movlw	1	; select bank2/3
 11399  0E66  0087               	movwf	7
 11400  0E67  0801               	movf	1,w
 11401  0E68  00A4               	movwf	??_Sensor_autoCalibration
 11402  0E69  01A5               	clrf	??_Sensor_autoCalibration+1
 11403  0E6A  35A4               	lslf	??_Sensor_autoCalibration,f
 11404  0E6B  0DA5               	rlf	??_Sensor_autoCalibration+1,f
 11405  0E6C  0829               	movf	Sensor_autoCalibration@sensor,w
 11406  0E6D  3E06               	addlw	6
 11407  0E6E  0086               	movwf	6
 11408  0E6F  3001               	movlw	1	; select bank2/3
 11409  0E70  0087               	movwf	7
 11410  0E71  3528               	lslf	Sensor_autoCalibration@adcIndex,w
 11411  0E72  3E70               	addlw	(low (_packet_sample| 0))& (0+255)
 11412  0E73  0084               	movwf	4
 11413  0E74  0185               	clrf	5
 11414  0E75  3F40               	moviw [0]fsr1
 11415  0E76  0200               	subwf	0,w
 11416  0E77  00A0               	movwf	abs@a
 11417  0E78  3101               	addfsr 0,1
 11418  0E79  3F41               	moviw [1]fsr1
 11419  0E7A  3B00               	subwfb	0,w
 11420  0E7B  00A1               	movwf	abs@a+1
 11421  0E7C  3195  2536  318E   	fcall	_abs
 11422  0E7F  0020               	movlb	0	; select bank0
 11423  0E80  0825               	movf	??_Sensor_autoCalibration+1,w
 11424  0E81  0221               	subwf	?_abs+1,w
 11425  0E82  1D03               	skipz
 11426  0E83  2E86               	goto	u5455
 11427  0E84  0824               	movf	??_Sensor_autoCalibration,w
 11428  0E85  0220               	subwf	?_abs,w
 11429  0E86                     u5455:	
 11430  0E86  1803               	skipnc
 11431  0E87  2E95               	goto	l6536
 11432                           
 11433                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 11434  0E88  3020               	movlw	32
 11435  0E89  00A4               	movwf	??_Sensor_autoCalibration
 11436  0E8A  0829               	movf	Sensor_autoCalibration@sensor,w
 11437  0E8B  3E02               	addlw	2
 11438  0E8C  0086               	movwf	6
 11439  0E8D  3001               	movlw	1	; select bank2/3
 11440  0E8E  0087               	movwf	7
 11441  0E8F  0824               	movf	??_Sensor_autoCalibration,w
 11442  0E90  0081               	movwf	1
 11443                           
 11444                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
 11445  0E91  0829               	movf	Sensor_autoCalibration@sensor,w
 11446  0E92  3193  237A         	fcall	_Sensor_setCalibrated
 11447                           
 11448                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
 11449  0E94  0008               	return
 11450  0E95                     l6536:	
 11451                           
 11452                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
 11453  0E95  3002               	movlw	2
 11454  0E96  00A4               	movwf	??_Sensor_autoCalibration
 11455  0E97  0829               	movf	Sensor_autoCalibration@sensor,w
 11456  0E98  3E03               	addlw	3
 11457  0E99  0086               	movwf	6
 11458  0E9A  3001               	movlw	1	; select bank2/3
 11459  0E9B  0087               	movwf	7
 11460  0E9C  0824               	movf	??_Sensor_autoCalibration,w
 11461  0E9D  0781               	addwf	1,f
 11462                           
 11463                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 11464  0E9E  0829               	movf	Sensor_autoCalibration@sensor,w
 11465  0E9F  3E03               	addlw	3
 11466  0EA0  0086               	movwf	6
 11467  0EA1  3001               	movlw	1	; select bank2/3
 11468  0EA2  0087               	movwf	7
 11469  0EA3  3020               	movlw	32
 11470  0EA4  0201               	subwf	1,w
 11471  0EA5  1C03               	skipc
 11472  0EA6  0008               	return
 11473                           
 11474                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 11475  0EA7  3020               	movlw	32
 11476  0EA8  00A4               	movwf	??_Sensor_autoCalibration
 11477  0EA9  0829               	movf	Sensor_autoCalibration@sensor,w
 11478  0EAA  3E02               	addlw	2
 11479  0EAB  0086               	movwf	6
 11480  0EAC  3001               	movlw	1	; select bank2/3
 11481  0EAD  0087               	movwf	7
 11482  0EAE  0824               	movf	??_Sensor_autoCalibration,w
 11483  0EAF  0081               	movwf	1
 11484                           
 11485                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
 11486  0EB0  0829               	movf	Sensor_autoCalibration@sensor,w
 11487  0EB1  3193  237A         	fcall	_Sensor_setCalibrated
 11488  0EB3  0008               	return
 11489  0EB4                     __end_of_Sensor_autoCalibration:	
 11490                           
 11491                           	psect	text60
 11492  1536                     __ptext60:	
 11493 ;; *************** function _abs *****************
 11494 ;; Defined at:
 11495 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;  a               2    0[BANK0 ] int 
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;		None
 11500 ;; Return value:  Size  Location     Type
 11501 ;;                  2    0[BANK0 ] int 
 11502 ;; Registers used:
 11503 ;;		wreg, status,2, status,0
 11504 ;; Tracked objects:
 11505 ;;		On entry : 0/0
 11506 ;;		On exit  : 0/0
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11509 ;;      Params:         0       2       0       0       0       0       0       0
 11510 ;;      Locals:         0       0       0       0       0       0       0       0
 11511 ;;      Temps:          0       2       0       0       0       0       0       0
 11512 ;;      Totals:         0       4       0       0       0       0       0       0
 11513 ;;Total ram usage:        4 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; Hardware stack levels required when called:    4
 11516 ;; This function calls:
 11517 ;;		Nothing
 11518 ;; This function is called by:
 11519 ;;		_Sensor_postAcquisitionProcess
 11520 ;;		_Sensor_Acq_ExecutePacket
 11521 ;;		_Sensor_autoCalibration
 11522 ;; This function uses a non-reentrant model
 11523 ;;
 11524                           
 11525                           
 11526                           ;psect for function _abs
 11527  1536                     _abs:	
 11528                           
 11529                           ;incstack = 0
 11530                           ; Regs used in _abs: [wreg+status,2+status,0]
 11531  1536  0020               	movlb	0	; select bank0
 11532  1537  0821               	movf	abs@a+1,w
 11533  1538  3A80               	xorlw	128
 11534  1539  00A2               	movwf	??_abs
 11535  153A  3080               	movlw	128
 11536  153B  0222               	subwf	??_abs,w
 11537  153C  1D03               	skipz
 11538  153D  2D40               	goto	u2755
 11539  153E  3001               	movlw	1
 11540  153F  0220               	subwf	abs@a,w
 11541  1540                     u2755:	
 11542  1540  1803               	skipnc
 11543  1541  0008               	return
 11544  1542  0020               	movlb	0	; select bank0
 11545  1543  0920               	comf	abs@a,w
 11546  1544  00A2               	movwf	??_abs
 11547  1545  0921               	comf	abs@a+1,w
 11548  1546  00A3               	movwf	??_abs+1
 11549  1547  0AA2               	incf	??_abs,f
 11550  1548  1903               	skipnz
 11551  1549  0AA3               	incf	??_abs+1,f
 11552  154A  0822               	movf	??_abs,w
 11553  154B  00A0               	movwf	?_abs
 11554  154C  0823               	movf	??_abs+1,w
 11555  154D  00A1               	movwf	?_abs+1
 11556  154E  0008               	return
 11557  154F                     __end_of_abs:	
 11558                           
 11559                           	psect	text61
 11560  137A                     __ptext61:	
 11561 ;; *************** function _Sensor_setCalibrated *****************
 11562 ;; Defined at:
 11563 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11564 ;; Parameters:    Size  Location     Type
 11565 ;;  sensor          1    wreg     PTR struct .
 11566 ;;		 -> NULL(0), mtouch_sensor(27), 
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;  sensor          1    0[BANK0 ] PTR struct .
 11569 ;;		 -> NULL(0), mtouch_sensor(27), 
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  1    wreg      void 
 11572 ;; Registers used:
 11573 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11579 ;;      Params:         0       0       0       0       0       0       0       0
 11580 ;;      Locals:         0       1       0       0       0       0       0       0
 11581 ;;      Temps:          0       0       0       0       0       0       0       0
 11582 ;;      Totals:         0       1       0       0       0       0       0       0
 11583 ;;Total ram usage:        1 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; Hardware stack levels required when called:    4
 11586 ;; This function calls:
 11587 ;;		Nothing
 11588 ;; This function is called by:
 11589 ;;		_Sensor_autoCalibration
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           
 11594                           ;psect for function _Sensor_setCalibrated
 11595  137A                     _Sensor_setCalibrated:	
 11596                           
 11597                           ;incstack = 0
 11598                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 11599                           ;Sensor_setCalibrated@sensor stored from wreg
 11600  137A  0020               	movlb	0	; select bank0
 11601  137B  00A0               	movwf	Sensor_setCalibrated@sensor
 11602                           
 11603                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
 11604  137C  0820               	movf	Sensor_setCalibrated@sensor,w
 11605  137D  3E08               	addlw	8
 11606  137E  0086               	movwf	6
 11607  137F  3001               	movlw	1	; select bank2/3
 11608  1380  0087               	movwf	7
 11609  1381  1501               	bsf	1,2
 11610                           
 11611                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
 11612  1382  0820               	movf	Sensor_setCalibrated@sensor,w
 11613  1383  3E08               	addlw	8
 11614  1384  0086               	movwf	6
 11615  1385  3001               	movlw	1	; select bank2/3
 11616  1386  0087               	movwf	7
 11617  1387  1201               	bcf	1,4
 11618  1388  0008               	return
 11619  1389                     __end_of_Sensor_setCalibrated:	
 11620                           
 11621                           	psect	text62
 11622  13D8                     __ptext62:	
 11623 ;; *************** function _Sensor_setCalibratAcqTime *****************
 11624 ;; Defined at:
 11625 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;  sensor          1    wreg     PTR struct .
 11628 ;;		 -> NULL(0), mtouch_sensor(27), 
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;  sensor          1    0[BANK0 ] PTR struct .
 11631 ;;		 -> NULL(0), mtouch_sensor(27), 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  1    wreg      void 
 11634 ;; Registers used:
 11635 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11641 ;;      Params:         0       0       0       0       0       0       0       0
 11642 ;;      Locals:         0       1       0       0       0       0       0       0
 11643 ;;      Temps:          0       0       0       0       0       0       0       0
 11644 ;;      Totals:         0       1       0       0       0       0       0       0
 11645 ;;Total ram usage:        1 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    4
 11648 ;; This function calls:
 11649 ;;		Nothing
 11650 ;; This function is called by:
 11651 ;;		_Sensor_autoCalibration
 11652 ;; This function uses a non-reentrant model
 11653 ;;
 11654                           
 11655                           
 11656                           ;psect for function _Sensor_setCalibratAcqTime
 11657  13D8                     _Sensor_setCalibratAcqTime:	
 11658                           
 11659                           ;incstack = 0
 11660                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 11661                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 11662  13D8  0020               	movlb	0	; select bank0
 11663  13D9  00A0               	movwf	Sensor_setCalibratAcqTime@sensor
 11664                           
 11665                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
 11666  13DA  0820               	movf	Sensor_setCalibratAcqTime@sensor,w
 11667  13DB  3E08               	addlw	8
 11668  13DC  0086               	movwf	6
 11669  13DD  3001               	movlw	1	; select bank2/3
 11670  13DE  0087               	movwf	7
 11671  13DF  1601               	bsf	1,4
 11672                           
 11673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 11674  13E0  0820               	movf	Sensor_setCalibratAcqTime@sensor,w
 11675  13E1  3E03               	addlw	3
 11676  13E2  0086               	movwf	6
 11677  13E3  3001               	movlw	1	; select bank2/3
 11678  13E4  0087               	movwf	7
 11679  13E5  0181               	clrf	1
 11680  13E6  0A81               	incf	1,f
 11681  13E7  0008               	return
 11682  13E8                     __end_of_Sensor_setCalibratAcqTime:	
 11683                           
 11684                           	psect	text63
 11685  1327                     __ptext63:	
 11686 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 11687 ;; Defined at:
 11688 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11689 ;; Parameters:    Size  Location     Type
 11690 ;;  sensor          1    wreg     PTR struct .
 11691 ;;		 -> NULL(0), mtouch_sensor(27), 
 11692 ;; Auto vars:     Size  Location     Type
 11693 ;;  sensor          1    0[BANK0 ] PTR struct .
 11694 ;;		 -> NULL(0), mtouch_sensor(27), 
 11695 ;; Return value:  Size  Location     Type
 11696 ;;                  1    wreg      _Bool 
 11697 ;; Registers used:
 11698 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11699 ;; Tracked objects:
 11700 ;;		On entry : 0/0
 11701 ;;		On exit  : 0/0
 11702 ;;		Unchanged: 0/0
 11703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11704 ;;      Params:         0       0       0       0       0       0       0       0
 11705 ;;      Locals:         0       1       0       0       0       0       0       0
 11706 ;;      Temps:          0       0       0       0       0       0       0       0
 11707 ;;      Totals:         0       1       0       0       0       0       0       0
 11708 ;;Total ram usage:        1 bytes
 11709 ;; Hardware stack levels used:    1
 11710 ;; Hardware stack levels required when called:    4
 11711 ;; This function calls:
 11712 ;;		Nothing
 11713 ;; This function is called by:
 11714 ;;		_Sensor_loadADCSettings
 11715 ;;		_Sensor_autoCalibration
 11716 ;; This function uses a non-reentrant model
 11717 ;;
 11718                           
 11719                           
 11720                           ;psect for function _Sensor_isCalibratingAcqTime
 11721  1327                     _Sensor_isCalibratingAcqTime:	
 11722                           
 11723                           ;incstack = 0
 11724                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 11725                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 11726  1327  0020               	movlb	0	; select bank0
 11727  1328  00A0               	movwf	Sensor_isCalibratingAcqTime@sensor
 11728                           
 11729                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
 11730  1329  0820               	movf	Sensor_isCalibratingAcqTime@sensor,w
 11731  132A  3E08               	addlw	8
 11732  132B  0086               	movwf	6
 11733  132C  3001               	movlw	1	; select bank2/3
 11734  132D  0087               	movwf	7
 11735  132E  0E01               	swapf	1,w
 11736  132F  3901               	andlw	1
 11737  1330  0008               	return
 11738  1331                     __end_of_Sensor_isCalibratingAcqTime:	
 11739                           
 11740                           	psect	text64
 11741  173E                     __ptext64:	
 11742 ;; *************** function _Sensor_getScanGroupIndex *****************
 11743 ;; Defined at:
 11744 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  sensor          1    wreg     PTR struct .
 11747 ;;		 -> NULL(0), mtouch_sensor(27), 
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;  sensor          1    2[BANK0 ] PTR struct .
 11750 ;;		 -> NULL(0), mtouch_sensor(27), 
 11751 ;;  sensorGroup     1    3[BANK0 ] unsigned char 
 11752 ;; Return value:  Size  Location     Type
 11753 ;;                  1    wreg      unsigned char 
 11754 ;; Registers used:
 11755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11756 ;; Tracked objects:
 11757 ;;		On entry : 0/0
 11758 ;;		On exit  : 0/0
 11759 ;;		Unchanged: 0/0
 11760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11761 ;;      Params:         0       0       0       0       0       0       0       0
 11762 ;;      Locals:         0       2       0       0       0       0       0       0
 11763 ;;      Temps:          0       2       0       0       0       0       0       0
 11764 ;;      Totals:         0       4       0       0       0       0       0       0
 11765 ;;Total ram usage:        4 bytes
 11766 ;; Hardware stack levels used:    1
 11767 ;; Hardware stack levels required when called:    4
 11768 ;; This function calls:
 11769 ;;		Nothing
 11770 ;; This function is called by:
 11771 ;;		_Sensor_postAcquisitionProcess
 11772 ;;		_Sensor_autoCalibration
 11773 ;;		_Sensor_RawSample_Update
 11774 ;; This function uses a non-reentrant model
 11775 ;;
 11776                           
 11777                           
 11778                           ;psect for function _Sensor_getScanGroupIndex
 11779  173E                     _Sensor_getScanGroupIndex:	
 11780                           
 11781                           ;incstack = 0
 11782                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 11783                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 11784  173E  0020               	movlb	0	; select bank0
 11785  173F  00A2               	movwf	Sensor_getScanGroupIndex@sensor
 11786                           
 11787                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 11788  1740  01A3               	clrf	Sensor_getScanGroupIndex@sensorGroup
 11789  1741                     l4246:	
 11790                           
 11791                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 11792  1741  0823               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 11793  1742  00A0               	movwf	??_Sensor_getScanGroupIndex
 11794  1743  01A1               	clrf	??_Sensor_getScanGroupIndex+1
 11795  1744  35A0               	lslf	??_Sensor_getScanGroupIndex,f
 11796  1745  0DA1               	rlf	??_Sensor_getScanGroupIndex+1,f
 11797  1746  308E               	movlw	low (_sensor_scan_group| (0+32768))
 11798  1747  0720               	addwf	??_Sensor_getScanGroupIndex,w
 11799  1748  0084               	movwf	4
 11800  1749  3098               	movlw	high (_sensor_scan_group| (0+32768))
 11801  174A  3D21               	addwfc	??_Sensor_getScanGroupIndex+1,w
 11802  174B  0085               	movwf	5
 11803  174C  0800               	movf	0,w	;code access
 11804  174D  0622               	xorwf	Sensor_getScanGroupIndex@sensor,w
 11805  174E  1D03               	skipz
 11806  174F  2F52               	goto	l4252
 11807  1750                     l4248:	
 11808                           
 11809                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
 11810  1750  3000               	movlw	0
 11811  1751  0008               	return
 11812  1752                     l4252:	
 11813                           
 11814                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 11815  1752  0823               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 11816  1753  00A0               	movwf	??_Sensor_getScanGroupIndex
 11817  1754  01A1               	clrf	??_Sensor_getScanGroupIndex+1
 11818  1755  35A0               	lslf	??_Sensor_getScanGroupIndex,f
 11819  1756  0DA1               	rlf	??_Sensor_getScanGroupIndex+1,f
 11820  1757  308F               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 11821  1758  0720               	addwf	??_Sensor_getScanGroupIndex,w
 11822  1759  0084               	movwf	4
 11823  175A  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 11824  175B  3D21               	addwfc	??_Sensor_getScanGroupIndex+1,w
 11825  175C  0085               	movwf	5
 11826  175D  0800               	movf	0,w	;code access
 11827  175E  0622               	xorwf	Sensor_getScanGroupIndex@sensor,w
 11828  175F  1D03               	skipz
 11829  1760  2F63               	goto	l4258
 11830                           
 11831                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
 11832  1761  3001               	movlw	1
 11833  1762  0008               	return
 11834  1763                     l4258:	
 11835                           
 11836                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
 11837  1763  3001               	movlw	1
 11838  1764  00A0               	movwf	??_Sensor_getScanGroupIndex
 11839  1765  0820               	movf	??_Sensor_getScanGroupIndex,w
 11840  1766  07A3               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 11841  1767  3002               	movlw	2
 11842  1768  0223               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 11843  1769  1803               	btfsc	3,0
 11844  176A  2F50               	goto	l4248
 11845  176B  2F41               	goto	l4246
 11846  176C                     __end_of_Sensor_getScanGroupIndex:	
 11847                           
 11848                           	psect	text65
 11849  13C8                     __ptext65:	
 11850 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 11851 ;; Defined at:
 11852 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11853 ;; Parameters:    Size  Location     Type
 11854 ;;		None
 11855 ;; Auto vars:     Size  Location     Type
 11856 ;;		None
 11857 ;; Return value:  Size  Location     Type
 11858 ;;                  1    wreg      void 
 11859 ;; Registers used:
 11860 ;;		wreg, status,2, status,0
 11861 ;; Tracked objects:
 11862 ;;		On entry : 0/0
 11863 ;;		On exit  : 0/0
 11864 ;;		Unchanged: 0/0
 11865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11866 ;;      Params:         0       0       0       0       0       0       0       0
 11867 ;;      Locals:         0       0       0       0       0       0       0       0
 11868 ;;      Temps:          0       0       0       0       0       0       0       0
 11869 ;;      Totals:         0       0       0       0       0       0       0       0
 11870 ;;Total ram usage:        0 bytes
 11871 ;; Hardware stack levels used:    1
 11872 ;; Hardware stack levels required when called:    4
 11873 ;; This function calls:
 11874 ;;		Nothing
 11875 ;; This function is called by:
 11876 ;;		_MTOUCH_Initialize
 11877 ;;		_Sensor_Acq_ExecutePacket
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           
 11882                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 11883  13C8                     _MTOUCH_Sensor_Scan_Initialize:	
 11884                           
 11885                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 11889  13C8  30FC               	movlw	-4
 11890  13C9  0020               	movlb	0	; select bank0
 11891  13CA  059C               	andwf	28,f	;volatile
 11892                           
 11893                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
 11894  13CB  002E               	movlb	14	; select bank14
 11895  13CC  0191               	clrf	17	;volatile
 11896                           
 11897                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
 11898  13CD  002F               	movlb	15	; select bank15
 11899  13CE  0191               	clrf	17	;volatile
 11900                           
 11901                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 11902  13CF  3090               	movlw	144
 11903  13D0  002E               	movlb	14	; select bank14
 11904  13D1  0092               	movwf	18	;volatile
 11905                           
 11906                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
 11907  13D2  3040               	movlw	64
 11908  13D3  0094               	movwf	20	;volatile
 11909                           
 11910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
 11911  13D4  3040               	movlw	64
 11912  13D5  002F               	movlb	15	; select bank15
 11913  13D6  0094               	movwf	20	;volatile
 11914  13D7  0008               	return
 11915  13D8                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 11916                           
 11917                           	psect	text66
 11918  13B8                     __ptext66:	
 11919 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 11920 ;; Defined at:
 11921 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;		None
 11924 ;; Auto vars:     Size  Location     Type
 11925 ;;  button          1   23[BANK0 ] enum E3069
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  1    wreg      void 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11935 ;;      Params:         0       0       0       0       0       0       0       0
 11936 ;;      Locals:         0       1       0       0       0       0       0       0
 11937 ;;      Temps:          0       1       0       0       0       0       0       0
 11938 ;;      Totals:         0       2       0       0       0       0       0       0
 11939 ;;Total ram usage:        2 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:   10
 11942 ;; This function calls:
 11943 ;;		_Button_Service
 11944 ;; This function is called by:
 11945 ;;		_MTOUCH_Service_Mainloop
 11946 ;; This function uses a non-reentrant model
 11947 ;;
 11948                           
 11949                           
 11950                           ;psect for function _MTOUCH_Button_ServiceAll
 11951  13B8                     _MTOUCH_Button_ServiceAll:	
 11952                           
 11953                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
 11954                           
 11955                           ;incstack = 0
 11956                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11957  13B8  0020               	movlb	0	; select bank0
 11958  13B9  01B7               	clrf	MTOUCH_Button_ServiceAll@button
 11959  13BA                     l7158:	
 11960                           
 11961                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
 11962  13BA  0837               	movf	MTOUCH_Button_ServiceAll@button,w
 11963  13BB  318A  2271  3193   	fcall	_Button_Service
 11964                           
 11965                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
 11966  13BE  3001               	movlw	1
 11967  13BF  0020               	movlb	0	; select bank0
 11968  13C0  00B6               	movwf	??_MTOUCH_Button_ServiceAll
 11969  13C1  0836               	movf	??_MTOUCH_Button_ServiceAll,w
 11970  13C2  07B7               	addwf	MTOUCH_Button_ServiceAll@button,f
 11971  13C3  3003               	movlw	3
 11972  13C4  0237               	subwf	MTOUCH_Button_ServiceAll@button,w
 11973  13C5  1803               	btfsc	3,0
 11974  13C6  0008               	return
 11975  13C7  2BBA               	goto	l7158
 11976  13C8                     __end_of_MTOUCH_Button_ServiceAll:	
 11977                           
 11978                           	psect	text67
 11979  0A71                     __ptext67:	
 11980 ;; *************** function _Button_Service *****************
 11981 ;; Defined at:
 11982 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11983 ;; Parameters:    Size  Location     Type
 11984 ;;  name            1    wreg     enum E3069
 11985 ;; Auto vars:     Size  Location     Type
 11986 ;;  name            1   20[BANK0 ] enum E3069
 11987 ;;  button          1   21[BANK0 ] PTR struct .
 11988 ;;		 -> mtouch_button(48), 
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11998 ;;      Params:         0       0       0       0       0       0       0       0
 11999 ;;      Locals:         0       2       0       0       0       0       0       0
 12000 ;;      Temps:          0       2       0       0       0       0       0       0
 12001 ;;      Totals:         0       4       0       0       0       0       0       0
 12002 ;;Total ram usage:        4 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    9
 12005 ;; This function calls:
 12006 ;;		_Button_Deviation_Update
 12007 ;;		_Button_Reading_Update
 12008 ;;		_Button_State_Initializing
 12009 ;;		_Button_State_NotPressed
 12010 ;;		_Button_State_Pressed
 12011 ;;		_MTOUCH_Button_Initialize
 12012 ;;		_MTOUCH_Sensor_isCalibrated
 12013 ;;		_MTOUCH_Sensor_wasSampled
 12014 ;; This function is called by:
 12015 ;;		_MTOUCH_Button_ServiceAll
 12016 ;; This function uses a non-reentrant model
 12017 ;;
 12018                           
 12019                           
 12020                           ;psect for function _Button_Service
 12021  0A71                     _Button_Service:	
 12022                           
 12023                           ;incstack = 0
 12024                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12025                           ;Button_Service@name stored from wreg
 12026  0A71  0020               	movlb	0	; select bank0
 12027  0A72  00B4               	movwf	Button_Service@name
 12028                           
 12029                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
 12030  0A73  0834               	movf	Button_Service@name,w
 12031  0A74  00B2               	movwf	??_Button_Service
 12032  0A75  3003               	movlw	3
 12033  0A76                     u6295:	
 12034  0A76  35B2               	lslf	??_Button_Service,f
 12035  0A77  3EFF               	addlw	-1
 12036  0A78  1D03               	skipz
 12037  0A79  2A76               	goto	u6295
 12038  0A7A  3532               	lslf	??_Button_Service,w
 12039  0A7B  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12040  0A7C  00B3               	movwf	??_Button_Service+1
 12041  0A7D  0833               	movf	??_Button_Service+1,w
 12042  0A7E  00B5               	movwf	Button_Service@button
 12043                           
 12044                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 12045  0A7F  0A35               	incf	Button_Service@button,w
 12046  0A80  0086               	movwf	6
 12047  0A81  3001               	movlw	1	; select bank2/3
 12048  0A82  0087               	movwf	7
 12049  0A83  0801               	movf	1,w
 12050  0A84  3193  23A8  318A   	fcall	_MTOUCH_Sensor_wasSampled
 12051  0A87  3A00               	xorlw	0
 12052  0A88  1903               	skipnz
 12053  0A89  0008               	return
 12054  0A8A  0020               	movlb	0	; select bank0
 12055  0A8B  0A35               	incf	Button_Service@button,w
 12056  0A8C  0086               	movwf	6
 12057  0A8D  3001               	movlw	1	; select bank2/3
 12058  0A8E  0087               	movwf	7
 12059  0A8F  0801               	movf	1,w
 12060  0A90  3194  24A7  318A   	fcall	_MTOUCH_Sensor_isCalibrated
 12061  0A93  3A00               	xorlw	0
 12062  0A94  1903               	skipnz
 12063  0A95  0008               	return
 12064                           
 12065                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
 12066  0A96  0020               	movlb	0	; select bank0
 12067  0A97  0835               	movf	Button_Service@button,w
 12068  0A98  3193  236C  318A   	fcall	_Button_Reading_Update
 12069                           
 12070                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
 12071  0A9B  0020               	movlb	0	; select bank0
 12072  0A9C  0835               	movf	Button_Service@button,w
 12073  0A9D  318C  2471  318A   	fcall	_Button_Deviation_Update
 12074                           
 12075                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 12076  0AA0  0020               	movlb	0	; select bank0
 12077  0AA1  0835               	movf	Button_Service@button,w
 12078  0AA2  3E02               	addlw	2
 12079  0AA3  0086               	movwf	6
 12080  0AA4  3001               	movlw	1	; select bank2/3
 12081  0AA5  0087               	movwf	7
 12082  0AA6  3003               	movlw	3
 12083  0AA7  0201               	subwf	1,w
 12084  0AA8  1C03               	skipc
 12085  0AA9  2AB2               	goto	l7098
 12086                           
 12087                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
 12088  0AAA  0835               	movf	Button_Service@button,w
 12089  0AAB  0086               	movwf	6
 12090  0AAC  3001               	movlw	1	; select bank2/3
 12091  0AAD  0087               	movwf	7
 12092  0AAE  0801               	movf	1,w
 12093  0AAF  3188  2058  318A   	fcall	_MTOUCH_Button_Initialize
 12094  0AB2                     l7098:	
 12095                           
 12096                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 12097  0AB2  0020               	movlb	0	; select bank0
 12098  0AB3  0835               	movf	Button_Service@button,w
 12099  0AB4  00B2               	movwf	??_Button_Service
 12100  0AB5  0832               	movf	??_Button_Service,w
 12101  0AB6  00AD               	movwf	Button_State_Pressed@button
 12102  0AB7  0835               	movf	Button_Service@button,w
 12103  0AB8  3E02               	addlw	2
 12104  0AB9  0086               	movwf	6
 12105  0ABA  3001               	movlw	1	; select bank2/3
 12106  0ABB  0087               	movwf	7
 12107  0ABC  3501               	lslf	1,w
 12108  0ABD  3EDD               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 12109  0ABE  0086               	movwf	6
 12110  0ABF  0187               	clrf	7
 12111  0AC0  3F41               	moviw [1]fsr1
 12112  0AC1  008A               	movwf	10
 12113  0AC2  3F40               	moviw [0]fsr1
 12114  0AC3  000A               	callw
 12115  0AC4  318A               	pagesel	$
 12116  0AC5  0008               	return
 12117  0AC6                     __end_of_Button_Service:	
 12118                           
 12119                           	psect	text68
 12120  13A8                     __ptext68:	
 12121 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 12122 ;; Defined at:
 12123 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;  sensor          1    wreg     enum E2878
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;  sensor          1    5[BANK0 ] enum E2878
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  1    wreg      _Bool 
 12130 ;; Registers used:
 12131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12137 ;;      Params:         0       0       0       0       0       0       0       0
 12138 ;;      Locals:         0       1       0       0       0       0       0       0
 12139 ;;      Temps:          0       1       0       0       0       0       0       0
 12140 ;;      Totals:         0       2       0       0       0       0       0       0
 12141 ;;Total ram usage:        2 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    5
 12144 ;; This function calls:
 12145 ;;		___bmul
 12146 ;; This function is called by:
 12147 ;;		_Button_Service
 12148 ;; This function uses a non-reentrant model
 12149 ;;
 12150                           
 12151                           
 12152                           ;psect for function _MTOUCH_Sensor_wasSampled
 12153  13A8                     _MTOUCH_Sensor_wasSampled:	
 12154                           
 12155                           ;incstack = 0
 12156                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12157                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 12158  13A8  0020               	movlb	0	; select bank0
 12159  13A9  00A5               	movwf	MTOUCH_Sensor_wasSampled@sensor
 12160                           
 12161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
 12162  13AA  3009               	movlw	9
 12163  13AB  00A4               	movwf	??_MTOUCH_Sensor_wasSampled
 12164  13AC  0824               	movf	??_MTOUCH_Sensor_wasSampled,w
 12165  13AD  00A0               	movwf	___bmul@multiplicand
 12166  13AE  0825               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 12167  13AF  3194  2409         	fcall	___bmul
 12168  13B1  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12169  13B2  0086               	movwf	6
 12170  13B3  3001               	movlw	1	; select bank2/3
 12171  13B4  0087               	movwf	7
 12172  13B5  0801               	movf	1,w
 12173  13B6  3901               	andlw	1
 12174  13B7  0008               	return
 12175  13B8                     __end_of_MTOUCH_Sensor_wasSampled:	
 12176                           
 12177                           	psect	text69
 12178  14A7                     __ptext69:	
 12179 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 12180 ;; Defined at:
 12181 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;  sensor          1    wreg     enum E2878
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;  sensor          1    5[BANK0 ] enum E2878
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  1    wreg      _Bool 
 12188 ;; Registers used:
 12189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12195 ;;      Params:         0       0       0       0       0       0       0       0
 12196 ;;      Locals:         0       1       0       0       0       0       0       0
 12197 ;;      Temps:          0       1       0       0       0       0       0       0
 12198 ;;      Totals:         0       2       0       0       0       0       0       0
 12199 ;;Total ram usage:        2 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    5
 12202 ;; This function calls:
 12203 ;;		___bmul
 12204 ;; This function is called by:
 12205 ;;		_Button_Service
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           
 12210                           ;psect for function _MTOUCH_Sensor_isCalibrated
 12211  14A7                     _MTOUCH_Sensor_isCalibrated:	
 12212                           
 12213                           ;incstack = 0
 12214                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12215                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 12216  14A7  0020               	movlb	0	; select bank0
 12217  14A8  00A5               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 12218                           
 12219                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
 12220  14A9  3003               	movlw	3
 12221  14AA  0225               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 12222  14AB  1803               	skipnc
 12223  14AC  2CBC               	goto	l4910
 12224                           
 12225                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 12226  14AD  3009               	movlw	9
 12227  14AE  00A4               	movwf	??_MTOUCH_Sensor_isCalibrated
 12228  14AF  0824               	movf	??_MTOUCH_Sensor_isCalibrated,w
 12229  14B0  00A0               	movwf	___bmul@multiplicand
 12230  14B1  0825               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 12231  14B2  3194  2409         	fcall	___bmul
 12232  14B4  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12233  14B5  0086               	movwf	6
 12234  14B6  3001               	movlw	1	; select bank2/3
 12235  14B7  0087               	movwf	7
 12236  14B8  0C01               	rrf	1,w
 12237  14B9  0C89               	rrf	9,f
 12238  14BA  3901               	andlw	1
 12239  14BB  0008               	return
 12240  14BC                     l4910:	
 12241                           
 12242                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
 12243  14BC  3000               	movlw	0
 12244  14BD  0008               	return
 12245  14BE                     __end_of_MTOUCH_Sensor_isCalibrated:	
 12246                           
 12247                           	psect	text70
 12248  0EB4                     __ptext70:	
 12249 ;; *************** function _Button_State_NotPressed *****************
 12250 ;; Defined at:
 12251 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;  button          1   13[BANK0 ] PTR struct .
 12254 ;;		 -> mtouch_button(48), 
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;		None
 12257 ;; Return value:  Size  Location     Type
 12258 ;;                  1    wreg      void 
 12259 ;; Registers used:
 12260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12266 ;;      Params:         0       1       0       0       0       0       0       0
 12267 ;;      Locals:         0       0       0       0       0       0       0       0
 12268 ;;      Temps:          0       2       0       0       0       0       0       0
 12269 ;;      Totals:         0       3       0       0       0       0       0       0
 12270 ;;Total ram usage:        3 bytes
 12271 ;; Hardware stack levels used:    1
 12272 ;; Hardware stack levels required when called:    8
 12273 ;; This function calls:
 12274 ;;		_Button_Baseline_Update
 12275 ;;		_Button_DefaultCallback
 12276 ;;		_MTOUCH_Button_Initialize
 12277 ;;		_myButtonPressedCallback
 12278 ;; This function is called by:
 12279 ;;		_Button_Service
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function _Button_State_NotPressed
 12285  0EB4                     _Button_State_NotPressed:	
 12286                           
 12287                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 12288                           
 12289                           ;incstack = 0
 12290                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12291  0EB4  0020               	movlb	0	; select bank0
 12292  0EB5  082D               	movf	Button_State_NotPressed@button,w
 12293  0EB6  3E09               	addlw	9
 12294  0EB7  0086               	movwf	6
 12295  0EB8  3001               	movlw	1	; select bank2/3
 12296  0EB9  0087               	movwf	7
 12297  0EBA  0801               	movf	1,w
 12298  0EBB  3A80               	xorlw	128
 12299  0EBC  00AE               	movwf	??_Button_State_NotPressed
 12300  0EBD  082D               	movf	Button_State_NotPressed@button,w
 12301  0EBE  3E0E               	addlw	14
 12302  0EBF  0086               	movwf	6
 12303  0EC0  3001               	movlw	1	; select bank2/3
 12304  0EC1  0087               	movwf	7
 12305  0EC2  0301               	decf	1,w
 12306  0EC3  3AFF               	xorlw	255
 12307  0EC4  3A80               	xorlw	128
 12308  0EC5  02AE               	subwf	??_Button_State_NotPressed,f
 12309  0EC6  1803               	skipnc
 12310  0EC7  2EF3               	goto	l6960
 12311                           
 12312                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
 12313  0EC8  082D               	movf	Button_State_NotPressed@button,w
 12314  0EC9  3E0A               	addlw	10
 12315  0ECA  0086               	movwf	6
 12316  0ECB  3001               	movlw	1	; select bank2/3
 12317  0ECC  0087               	movwf	7
 12318  0ECD  3001               	movlw	1
 12319  0ECE  0781               	addwf	1,f
 12320  0ECF  3141               	addfsr 1,1
 12321  0ED0  1803               	skipnc
 12322  0ED1  0A81               	incf	1,f
 12323                           
 12324                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 12325  0ED2  082D               	movf	Button_State_NotPressed@button,w
 12326  0ED3  3E0A               	addlw	10
 12327  0ED4  0086               	movwf	6
 12328  0ED5  3001               	movlw	1	; select bank2/3
 12329  0ED6  0087               	movwf	7
 12330  0ED7  3F40               	moviw [0]fsr1
 12331  0ED8  00AE               	movwf	??_Button_State_NotPressed
 12332  0ED9  3F41               	moviw [1]fsr1
 12333  0EDA  00AF               	movwf	??_Button_State_NotPressed+1
 12334  0EDB  3000               	movlw	0
 12335  0EDC  022F               	subwf	??_Button_State_NotPressed+1,w
 12336  0EDD  3041               	movlw	65
 12337  0EDE  1903               	skipnz
 12338  0EDF  022E               	subwf	??_Button_State_NotPressed,w
 12339  0EE0  1C03               	skipc
 12340  0EE1  2F35               	goto	l518
 12341                           
 12342                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
 12343  0EE2  082D               	movf	Button_State_NotPressed@button,w
 12344  0EE3  3E0A               	addlw	10
 12345  0EE4  0086               	movwf	6
 12346  0EE5  3001               	movlw	1	; select bank2/3
 12347  0EE6  0087               	movwf	7
 12348  0EE7  3000               	movlw	0
 12349  0EE8  3FC0               	movwi [0]fsr1
 12350  0EE9  3FC1               	movwi [1]fsr1
 12351                           
 12352                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 12353  0EEA  082D               	movf	Button_State_NotPressed@button,w
 12354  0EEB  0086               	movwf	6
 12355  0EEC  3001               	movlw	1	; select bank2/3
 12356  0EED  0087               	movwf	7
 12357  0EEE  0801               	movf	1,w
 12358  0EEF  3188  2058  318E   	fcall	_MTOUCH_Button_Initialize
 12359  0EF2  2F35               	goto	l518
 12360  0EF3                     l6960:	
 12361  0EF3  082D               	movf	Button_State_NotPressed@button,w
 12362  0EF4  3E09               	addlw	9
 12363  0EF5  0086               	movwf	6
 12364  0EF6  3001               	movlw	1	; select bank2/3
 12365  0EF7  0087               	movwf	7
 12366  0EF8  0801               	movf	1,w
 12367  0EF9  00AE               	movwf	??_Button_State_NotPressed
 12368  0EFA  01AF               	clrf	??_Button_State_NotPressed+1
 12369  0EFB  1BAE               	btfsc	??_Button_State_NotPressed,7
 12370  0EFC  03AF               	decf	??_Button_State_NotPressed+1,f
 12371  0EFD  082D               	movf	Button_State_NotPressed@button,w
 12372  0EFE  3E0E               	addlw	14
 12373  0EFF  0086               	movwf	6
 12374  0F00  3001               	movlw	1	; select bank2/3
 12375  0F01  0087               	movwf	7
 12376  0F02  082F               	movf	??_Button_State_NotPressed+1,w
 12377  0F03  3A80               	xorlw	128
 12378  0F04  3C80               	sublw	128
 12379  0F05  1D03               	skipz
 12380  0F06  2F09               	goto	u6155
 12381  0F07  082E               	movf	??_Button_State_NotPressed,w
 12382  0F08  0201               	subwf	1,w
 12383  0F09                     u6155:	
 12384  0F09  1803               	skipnc
 12385  0F0A  2F2C               	goto	l6966
 12386                           
 12387                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
 12388  0F0B  3002               	movlw	2
 12389  0F0C  0020               	movlb	0	; select bank0
 12390  0F0D  00AE               	movwf	??_Button_State_NotPressed
 12391  0F0E  082D               	movf	Button_State_NotPressed@button,w
 12392  0F0F  3E02               	addlw	2
 12393  0F10  0086               	movwf	6
 12394  0F11  3001               	movlw	1	; select bank2/3
 12395  0F12  0087               	movwf	7
 12396  0F13  082E               	movf	??_Button_State_NotPressed,w
 12397  0F14  0081               	movwf	1
 12398                           
 12399                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 12400  0F15  082D               	movf	Button_State_NotPressed@button,w
 12401  0F16  3E0A               	addlw	10
 12402  0F17  0086               	movwf	6
 12403  0F18  3001               	movlw	1	; select bank2/3
 12404  0F19  0087               	movwf	7
 12405  0F1A  3000               	movlw	0
 12406  0F1B  3FC0               	movwi [0]fsr1
 12407  0F1C  3FC1               	movwi [1]fsr1
 12408                           
 12409                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
 12410  0F1D  082D               	movf	Button_State_NotPressed@button,w
 12411  0F1E  0086               	movwf	6
 12412  0F1F  3001               	movlw	1	; select bank2/3
 12413  0F20  0087               	movwf	7
 12414  0F21  0801               	movf	1,w
 12415  0F22  00AE               	movwf	??_Button_State_NotPressed
 12416  0F23  082E               	movf	??_Button_State_NotPressed,w
 12417  0F24  00A7               	movwf	myButtonPressedCallback@button
 12418  0F25  0021               	movlb	1	; select bank1
 12419  0F26  0866               	movf	(_callback_pressed+1)^(0+128),w
 12420  0F27  008A               	movwf	10
 12421  0F28  0865               	movf	_callback_pressed^(0+128),w
 12422  0F29  000A               	callw
 12423  0F2A  318E               	pagesel	$
 12424                           
 12425                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
 12426  0F2B  2F35               	goto	l518
 12427  0F2C                     l6966:	
 12428                           
 12429                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
 12430  0F2C  0020               	movlb	0	; select bank0
 12431  0F2D  082D               	movf	Button_State_NotPressed@button,w
 12432  0F2E  3E0A               	addlw	10
 12433  0F2F  0086               	movwf	6
 12434  0F30  3001               	movlw	1	; select bank2/3
 12435  0F31  0087               	movwf	7
 12436  0F32  3000               	movlw	0
 12437  0F33  3FC0               	movwi [0]fsr1
 12438  0F34  3FC1               	movwi [1]fsr1
 12439  0F35                     l518:	
 12440                           
 12441                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
 12442  0F35  0020               	movlb	0	; select bank0
 12443  0F36  082D               	movf	Button_State_NotPressed@button,w
 12444  0F37  3E0C               	addlw	12
 12445  0F38  0086               	movwf	6
 12446  0F39  3001               	movlw	1	; select bank2/3
 12447  0F3A  0087               	movwf	7
 12448  0F3B  3001               	movlw	1
 12449  0F3C  0781               	addwf	1,f
 12450  0F3D  3141               	addfsr 1,1
 12451  0F3E  1803               	skipnc
 12452  0F3F  0A81               	incf	1,f
 12453                           
 12454                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 12455  0F40  082D               	movf	Button_State_NotPressed@button,w
 12456  0F41  3E0C               	addlw	12
 12457  0F42  0086               	movwf	6
 12458  0F43  3001               	movlw	1	; select bank2/3
 12459  0F44  0087               	movwf	7
 12460  0F45  0016               	moviw fsr1++
 12461  0F46  3A40               	xorlw	64
 12462  0F47  00AE               	movwf	??_Button_State_NotPressed
 12463  0F48  0016               	moviw fsr1++
 12464  0F49  04AE               	iorwf	??_Button_State_NotPressed,f
 12465  0F4A  1D03               	btfss	3,2
 12466  0F4B  0008               	return
 12467                           
 12468                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 12469  0F4C  082D               	movf	Button_State_NotPressed@button,w
 12470  0F4D  3E0C               	addlw	12
 12471  0F4E  0086               	movwf	6
 12472  0F4F  3001               	movlw	1	; select bank2/3
 12473  0F50  0087               	movwf	7
 12474  0F51  3000               	movlw	0
 12475  0F52  3FC0               	movwi [0]fsr1
 12476  0F53  3FC1               	movwi [1]fsr1
 12477                           
 12478                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
 12479  0F54  082D               	movf	Button_State_NotPressed@button,w
 12480  0F55  318C  24F8         	fcall	_Button_Baseline_Update
 12481  0F57  0008               	return
 12482  0F58                     __end_of_Button_State_NotPressed:	
 12483                           
 12484                           	psect	text71
 12485  0B22                     __ptext71:	
 12486 ;; *************** function _Button_State_Initializing *****************
 12487 ;; Defined at:
 12488 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  button          1   13[BANK0 ] PTR struct .
 12491 ;;		 -> mtouch_button(48), 
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;		None
 12494 ;; Return value:  Size  Location     Type
 12495 ;;                  1    wreg      void 
 12496 ;; Registers used:
 12497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12498 ;; Tracked objects:
 12499 ;;		On entry : 0/0
 12500 ;;		On exit  : 0/0
 12501 ;;		Unchanged: 0/0
 12502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12503 ;;      Params:         0       1       0       0       0       0       0       0
 12504 ;;      Locals:         0       0       0       0       0       0       0       0
 12505 ;;      Temps:          0       4       0       0       0       0       0       0
 12506 ;;      Totals:         0       5       0       0       0       0       0       0
 12507 ;;Total ram usage:        5 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; Hardware stack levels required when called:    7
 12510 ;; This function calls:
 12511 ;;		_Button_Baseline_Initialize
 12512 ;;		_Button_Baseline_Update
 12513 ;; This function is called by:
 12514 ;;		_Button_Service
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518                           
 12519                           ;psect for function _Button_State_Initializing
 12520  0B22                     _Button_State_Initializing:	
 12521                           
 12522                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12526  0B22  0020               	movlb	0	; select bank0
 12527  0B23  082D               	movf	Button_State_Initializing@button,w
 12528  0B24  3E0A               	addlw	10
 12529  0B25  0086               	movwf	6
 12530  0B26  3001               	movlw	1	; select bank2/3
 12531  0B27  0087               	movwf	7
 12532  0B28  3F40               	moviw [0]fsr1
 12533  0B29  00AE               	movwf	??_Button_State_Initializing
 12534  0B2A  3F41               	moviw [1]fsr1
 12535  0B2B  00AF               	movwf	??_Button_State_Initializing+1
 12536  0B2C  3000               	movlw	0
 12537  0B2D  022F               	subwf	??_Button_State_Initializing+1,w
 12538  0B2E  3009               	movlw	9
 12539  0B2F  1903               	skipnz
 12540  0B30  022E               	subwf	??_Button_State_Initializing,w
 12541  0B31  1803               	skipnc
 12542  0B32  2B38               	goto	l4956
 12543                           
 12544                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
 12545  0B33  082D               	movf	Button_State_Initializing@button,w
 12546  0B34  3197  276C  318B   	fcall	_Button_Baseline_Initialize
 12547                           
 12548                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
 12549  0B37  2B3C               	goto	l4958
 12550  0B38                     l4956:	
 12551                           
 12552                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
 12553  0B38  082D               	movf	Button_State_Initializing@button,w
 12554  0B39  318C  24F8  318B   	fcall	_Button_Baseline_Update
 12555  0B3C                     l4958:	
 12556                           
 12557                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
 12558  0B3C  0020               	movlb	0	; select bank0
 12559  0B3D  082D               	movf	Button_State_Initializing@button,w
 12560  0B3E  3E0A               	addlw	10
 12561  0B3F  0086               	movwf	6
 12562  0B40  3001               	movlw	1	; select bank2/3
 12563  0B41  0087               	movwf	7
 12564  0B42  3001               	movlw	1
 12565  0B43  0781               	addwf	1,f
 12566  0B44  3141               	addfsr 1,1
 12567  0B45  1803               	skipnc
 12568  0B46  0A81               	incf	1,f
 12569                           
 12570                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 12571  0B47  082D               	movf	Button_State_Initializing@button,w
 12572  0B48  3E0A               	addlw	10
 12573  0B49  0086               	movwf	6
 12574  0B4A  3001               	movlw	1	; select bank2/3
 12575  0B4B  0087               	movwf	7
 12576  0B4C  3F40               	moviw [0]fsr1
 12577  0B4D  00AE               	movwf	??_Button_State_Initializing
 12578  0B4E  3F41               	moviw [1]fsr1
 12579  0B4F  00AF               	movwf	??_Button_State_Initializing+1
 12580  0B50  3000               	movlw	0
 12581  0B51  022F               	subwf	??_Button_State_Initializing+1,w
 12582  0B52  3010               	movlw	16
 12583  0B53  1903               	skipnz
 12584  0B54  022E               	subwf	??_Button_State_Initializing,w
 12585  0B55  1C03               	skipc
 12586  0B56  0008               	return
 12587                           
 12588                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 12589  0B57  082D               	movf	Button_State_Initializing@button,w
 12590  0B58  3E05               	addlw	5
 12591  0B59  0086               	movwf	6
 12592  0B5A  3001               	movlw	1	; select bank2/3
 12593  0B5B  0087               	movwf	7
 12594  0B5C  3F40               	moviw [0]fsr1
 12595  0B5D  00AE               	movwf	??_Button_State_Initializing
 12596  0B5E  3F41               	moviw [1]fsr1
 12597  0B5F  00AF               	movwf	??_Button_State_Initializing+1
 12598  0B60  3F42               	moviw [2]fsr1
 12599  0B61  00B0               	movwf	??_Button_State_Initializing+2
 12600  0B62  3F43               	moviw [3]fsr1
 12601  0B63  00B1               	movwf	??_Button_State_Initializing+3
 12602  0B64  3004               	movlw	4
 12603  0B65                     u3845:	
 12604  0B65  36B1               	lsrf	??_Button_State_Initializing+3,f
 12605  0B66  0CB0               	rrf	??_Button_State_Initializing+2,f
 12606  0B67  0CAF               	rrf	??_Button_State_Initializing+1,f
 12607  0B68  0CAE               	rrf	??_Button_State_Initializing,f
 12608  0B69  0B89               	decfsz	9,f
 12609  0B6A  2B65               	goto	u3845
 12610  0B6B  082D               	movf	Button_State_Initializing@button,w
 12611  0B6C  3E03               	addlw	3
 12612  0B6D  0086               	movwf	6
 12613  0B6E  3001               	movlw	1	; select bank2/3
 12614  0B6F  0087               	movwf	7
 12615  0B70  082E               	movf	??_Button_State_Initializing,w
 12616  0B71  3FC0               	movwi [0]fsr1
 12617  0B72  082F               	movf	??_Button_State_Initializing+1,w
 12618  0B73  3FC1               	movwi [1]fsr1
 12619                           
 12620                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 12621  0B74  082D               	movf	Button_State_Initializing@button,w
 12622  0B75  3E02               	addlw	2
 12623  0B76  0086               	movwf	6
 12624  0B77  3001               	movlw	1	; select bank2/3
 12625  0B78  0087               	movwf	7
 12626  0B79  0181               	clrf	1
 12627  0B7A  0A81               	incf	1,f
 12628                           
 12629                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 12630  0B7B  082D               	movf	Button_State_Initializing@button,w
 12631  0B7C  3E0A               	addlw	10
 12632  0B7D  0086               	movwf	6
 12633  0B7E  3001               	movlw	1	; select bank2/3
 12634  0B7F  0087               	movwf	7
 12635  0B80  3000               	movlw	0
 12636  0B81  3FC0               	movwi [0]fsr1
 12637  0B82  3FC1               	movwi [1]fsr1
 12638  0B83  0008               	return
 12639  0B84                     __end_of_Button_State_Initializing:	
 12640                           
 12641                           	psect	text72
 12642  0B84                     __ptext72:	
 12643 ;; *************** function _Button_State_Pressed *****************
 12644 ;; Defined at:
 12645 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12646 ;; Parameters:    Size  Location     Type
 12647 ;;  button          1   13[BANK0 ] PTR struct .
 12648 ;;		 -> mtouch_button(48), 
 12649 ;; Auto vars:     Size  Location     Type
 12650 ;;		None
 12651 ;; Return value:  Size  Location     Type
 12652 ;;                  1    wreg      void 
 12653 ;; Registers used:
 12654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12655 ;; Tracked objects:
 12656 ;;		On entry : 0/0
 12657 ;;		On exit  : 0/0
 12658 ;;		Unchanged: 0/0
 12659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12660 ;;      Params:         0       1       0       0       0       0       0       0
 12661 ;;      Locals:         0       0       0       0       0       0       0       0
 12662 ;;      Temps:          0       2       0       0       0       0       0       0
 12663 ;;      Totals:         0       3       0       0       0       0       0       0
 12664 ;;Total ram usage:        3 bytes
 12665 ;; Hardware stack levels used:    1
 12666 ;; Hardware stack levels required when called:    7
 12667 ;; This function calls:
 12668 ;;		_Button_DefaultCallback
 12669 ;;		_MTOUCH_Button_Initialize
 12670 ;;		_myButtonReleasedCallback
 12671 ;; This function is called by:
 12672 ;;		_Button_Service
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           
 12677                           ;psect for function _Button_State_Pressed
 12678  0B84                     _Button_State_Pressed:	
 12679                           
 12680                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 12681                           
 12682                           ;incstack = 0
 12683                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12684  0B84  0020               	movlb	0	; select bank0
 12685  0B85  082D               	movf	Button_State_Pressed@button,w
 12686  0B86  3E0A               	addlw	10
 12687  0B87  0086               	movwf	6
 12688  0B88  3001               	movlw	1	; select bank2/3
 12689  0B89  0087               	movwf	7
 12690  0B8A  3F40               	moviw [0]fsr1
 12691  0B8B  00AE               	movwf	??_Button_State_Pressed
 12692  0B8C  3F41               	moviw [1]fsr1
 12693  0B8D  00AF               	movwf	??_Button_State_Pressed+1
 12694  0B8E  3007               	movlw	7
 12695  0B8F  022F               	subwf	??_Button_State_Pressed+1,w
 12696  0B90  30D0               	movlw	208
 12697  0B91  1903               	skipnz
 12698  0B92  022E               	subwf	??_Button_State_Pressed,w
 12699  0B93  1C03               	skipc
 12700  0B94  2BAD               	goto	l6976
 12701                           
 12702                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 12703  0B95  082D               	movf	Button_State_Pressed@button,w
 12704  0B96  0086               	movwf	6
 12705  0B97  3001               	movlw	1	; select bank2/3
 12706  0B98  0087               	movwf	7
 12707  0B99  0801               	movf	1,w
 12708  0B9A  3188  2058  318B   	fcall	_MTOUCH_Button_Initialize
 12709                           
 12710                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 12711  0B9D  0020               	movlb	0	; select bank0
 12712  0B9E  082D               	movf	Button_State_Pressed@button,w
 12713  0B9F  0086               	movwf	6
 12714  0BA0  3001               	movlw	1	; select bank2/3
 12715  0BA1  0087               	movwf	7
 12716  0BA2  0801               	movf	1,w
 12717  0BA3  00AE               	movwf	??_Button_State_Pressed
 12718  0BA4  082E               	movf	??_Button_State_Pressed,w
 12719  0BA5  00A7               	movwf	myButtonReleasedCallback@button
 12720  0BA6  0021               	movlb	1	; select bank1
 12721  0BA7  0864               	movf	(_callback_notPressed+1)^(0+128),w
 12722  0BA8  008A               	movwf	10
 12723  0BA9  0863               	movf	_callback_notPressed^(0+128),w
 12724  0BAA  000A               	callw
 12725  0BAB  318B               	pagesel	$
 12726                           
 12727                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 12728  0BAC  0008               	return
 12729  0BAD                     l6976:	
 12730  0BAD  082D               	movf	Button_State_Pressed@button,w
 12731  0BAE  3E09               	addlw	9
 12732  0BAF  0086               	movwf	6
 12733  0BB0  3001               	movlw	1	; select bank2/3
 12734  0BB1  0087               	movwf	7
 12735  0BB2  0801               	movf	1,w
 12736  0BB3  3A80               	xorlw	128
 12737  0BB4  00AE               	movwf	??_Button_State_Pressed
 12738  0BB5  082D               	movf	Button_State_Pressed@button,w
 12739  0BB6  3E0E               	addlw	14
 12740  0BB7  0086               	movwf	6
 12741  0BB8  3001               	movlw	1	; select bank2/3
 12742  0BB9  0087               	movwf	7
 12743  0BBA  082D               	movf	Button_State_Pressed@button,w
 12744  0BBB  3E0E               	addlw	14
 12745  0BBC  0084               	movwf	4
 12746  0BBD  3001               	movlw	1	; select bank2/3
 12747  0BBE  0085               	movwf	5
 12748  0BBF  3600               	lsrf	0,w
 12749  0BC0  0201               	subwf	1,w
 12750  0BC1  3A80               	xorlw	128
 12751  0BC2  02AE               	subwf	??_Button_State_Pressed,f
 12752  0BC3  1803               	skipnc
 12753  0BC4  0008               	return
 12754                           
 12755                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 12756  0BC5  082D               	movf	Button_State_Pressed@button,w
 12757  0BC6  3E02               	addlw	2
 12758  0BC7  0086               	movwf	6
 12759  0BC8  3001               	movlw	1	; select bank2/3
 12760  0BC9  0087               	movwf	7
 12761  0BCA  0181               	clrf	1
 12762  0BCB  0A81               	incf	1,f
 12763                           
 12764                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 12765  0BCC  082D               	movf	Button_State_Pressed@button,w
 12766  0BCD  3E0A               	addlw	10
 12767  0BCE  0086               	movwf	6
 12768  0BCF  3001               	movlw	1	; select bank2/3
 12769  0BD0  0087               	movwf	7
 12770  0BD1  3000               	movlw	0
 12771  0BD2  3FC0               	movwi [0]fsr1
 12772  0BD3  3FC1               	movwi [1]fsr1
 12773                           
 12774                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 12775  0BD4  082D               	movf	Button_State_Pressed@button,w
 12776  0BD5  3E0C               	addlw	12
 12777  0BD6  0086               	movwf	6
 12778  0BD7  3001               	movlw	1	; select bank2/3
 12779  0BD8  0087               	movwf	7
 12780  0BD9  30FF               	movlw	255
 12781  0BDA  3FC0               	movwi [0]fsr1
 12782  0BDB  30FB               	movlw	251
 12783  0BDC  3FC1               	movwi [1]fsr1
 12784                           
 12785                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 12786  0BDD  082D               	movf	Button_State_Pressed@button,w
 12787  0BDE  0086               	movwf	6
 12788  0BDF  3001               	movlw	1	; select bank2/3
 12789  0BE0  0087               	movwf	7
 12790  0BE1  0801               	movf	1,w
 12791  0BE2  00AE               	movwf	??_Button_State_Pressed
 12792  0BE3  082E               	movf	??_Button_State_Pressed,w
 12793  0BE4  00A7               	movwf	myButtonReleasedCallback@button
 12794  0BE5  0021               	movlb	1	; select bank1
 12795  0BE6  0864               	movf	(_callback_notPressed+1)^(0+128),w
 12796  0BE7  008A               	movwf	10
 12797  0BE8  0863               	movf	_callback_notPressed^(0+128),w
 12798  0BE9  000A               	callw
 12799  0BEA  318B               	pagesel	$
 12800  0BEB  0008               	return
 12801  0BEC                     __end_of_Button_State_Pressed:	
 12802                           
 12803                           	psect	text73
 12804  1285                     __ptext73:	
 12805 ;; *************** function _myButtonPressedCallback *****************
 12806 ;; Defined at:
 12807 ;;		line 340 in file "main.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;  button          1    7[BANK0 ] enum E2937
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;		None
 12812 ;; Return value:  Size  Location     Type
 12813 ;;                  1    wreg      void 
 12814 ;; Registers used:
 12815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12816 ;; Tracked objects:
 12817 ;;		On entry : 0/0
 12818 ;;		On exit  : 0/0
 12819 ;;		Unchanged: 0/0
 12820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12821 ;;      Params:         0       1       0       0       0       0       0       0
 12822 ;;      Locals:         0       0       0       0       0       0       0       0
 12823 ;;      Temps:          0       0       0       0       0       0       0       0
 12824 ;;      Totals:         0       1       0       0       0       0       0       0
 12825 ;;Total ram usage:        1 bytes
 12826 ;; Hardware stack levels used:    1
 12827 ;; Hardware stack levels required when called:    7
 12828 ;; This function calls:
 12829 ;;		_check_on_off
 12830 ;;		_check_up_down
 12831 ;; This function is called by:
 12832 ;;		_main
 12833 ;;		_Button_State_NotPressed
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           
 12838                           ;psect for function _myButtonPressedCallback
 12839  1285                     _myButtonPressedCallback:	
 12840                           
 12841                           ;main.c: 340: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 341:
      +                           {;main.c: 342:     check_on_off();
 12842                           
 12843                           ;incstack = 0
 12844                           ; Regs used in _myButtonPressedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12845  1285  3193  233C  3192   	fcall	_check_on_off
 12846                           
 12847                           ;main.c: 343:     check_up_down();
 12848  1288  3188  20C6         	fcall	_check_up_down
 12849  128A  0008               	return
 12850  128B                     __end_of_myButtonPressedCallback:	
 12851                           
 12852                           	psect	text74
 12853  124C                     __ptext74:	
 12854 ;; *************** function _Button_DefaultCallback *****************
 12855 ;; Defined at:
 12856 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12857 ;; Parameters:    Size  Location     Type
 12858 ;;  button          1    7[BANK0 ] enum E3069
 12859 ;; Auto vars:     Size  Location     Type
 12860 ;;		None
 12861 ;; Return value:  Size  Location     Type
 12862 ;;                  1    wreg      void 
 12863 ;; Registers used:
 12864 ;;		None
 12865 ;; Tracked objects:
 12866 ;;		On entry : 0/0
 12867 ;;		On exit  : 0/0
 12868 ;;		Unchanged: 0/0
 12869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12870 ;;      Params:         0       1       0       0       0       0       0       0
 12871 ;;      Locals:         0       0       0       0       0       0       0       0
 12872 ;;      Temps:          0       0       0       0       0       0       0       0
 12873 ;;      Totals:         0       1       0       0       0       0       0       0
 12874 ;;Total ram usage:        1 bytes
 12875 ;; Hardware stack levels used:    1
 12876 ;; Hardware stack levels required when called:    4
 12877 ;; This function calls:
 12878 ;;		Nothing
 12879 ;; This function is called by:
 12880 ;;		_Button_State_NotPressed
 12881 ;;		_Button_State_Pressed
 12882 ;; This function uses a non-reentrant model
 12883 ;;
 12884                           
 12885                           
 12886                           ;psect for function _Button_DefaultCallback
 12887  124C                     _Button_DefaultCallback:	
 12888                           
 12889                           ;incstack = 0
 12890                           ; Regs used in _Button_DefaultCallback: []
 12891  124C  0008               	return
 12892  124D                     __end_of_Button_DefaultCallback:	
 12893                           
 12894                           	psect	text75
 12895  141B                     __ptext75:	
 12896 ;; *************** function _myButtonReleasedCallback *****************
 12897 ;; Defined at:
 12898 ;;		line 345 in file "main.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;  button          1    7[BANK0 ] enum E2937
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;		None
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  1    wreg      void 
 12905 ;; Registers used:
 12906 ;;		wreg, status,2, status,0, pclath, cstack
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12912 ;;      Params:         0       1       0       0       0       0       0       0
 12913 ;;      Locals:         0       0       0       0       0       0       0       0
 12914 ;;      Temps:          0       0       0       0       0       0       0       0
 12915 ;;      Totals:         0       1       0       0       0       0       0       0
 12916 ;;Total ram usage:        1 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    5
 12919 ;; This function calls:
 12920 ;;		_LED_DOWN_OFF
 12921 ;;		_LED_UP_OFF
 12922 ;; This function is called by:
 12923 ;;		_main
 12924 ;;		_Button_State_Pressed
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           
 12929                           ;psect for function _myButtonReleasedCallback
 12930  141B                     _myButtonReleasedCallback:	
 12931                           
 12932                           ;main.c: 345: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 346
      +                          : {;main.c: 347:     if(triac_level.full!=0xEE)
 12933                           
 12934                           ;incstack = 0
 12935                           ; Regs used in _myButtonReleasedCallback: [wreg+status,2+status,0+pclath+cstack]
 12936  141B  30EE               	movlw	238
 12937  141C  0020               	movlb	0	; select bank0
 12938  141D  065F               	xorwf	_triac_level,w
 12939  141E  0460               	iorwf	_triac_level+1,w
 12940  141F  1903               	btfsc	3,2
 12941  1420  2C24               	goto	l6874
 12942                           
 12943                           ;main.c: 348:     {;main.c: 349:         LED_UP_OFF();
 12944  1421  3192  2254  3194   	fcall	_LED_UP_OFF
 12945  1424                     l6874:	
 12946                           
 12947                           ;main.c: 351:     if(triac_level.full!=0x00)
 12948  1424  0020               	movlb	0	; select bank0
 12949  1425  085F               	movf	_triac_level,w
 12950  1426  0460               	iorwf	_triac_level+1,w
 12951  1427  1903               	btfsc	3,2
 12952  1428  2C2B               	goto	l6878
 12953                           
 12954                           ;main.c: 352:     {;main.c: 353:         LED_DOWN_OFF();
 12955  1429  3192  2251         	fcall	_LED_DOWN_OFF
 12956  142B                     l6878:	
 12957                           
 12958                           ;main.c: 355:     counter_PRESS = 0;
 12959  142B  01F5               	clrf	_counter_PRESS
 12960  142C  0008               	return
 12961  142D                     __end_of_myButtonReleasedCallback:	
 12962                           
 12963                           	psect	text76
 12964  08C6                     __ptext76:	
 12965 ;; *************** function _check_up_down *****************
 12966 ;; Defined at:
 12967 ;;		line 365 in file "main.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;		None
 12970 ;; Auto vars:     Size  Location     Type
 12971 ;;		None
 12972 ;; Return value:  Size  Location     Type
 12973 ;;                  1    wreg      void 
 12974 ;; Registers used:
 12975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12976 ;; Tracked objects:
 12977 ;;		On entry : 0/0
 12978 ;;		On exit  : 0/0
 12979 ;;		Unchanged: 0/0
 12980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12981 ;;      Params:         0       0       0       0       0       0       0       0
 12982 ;;      Locals:         0       0       0       0       0       0       0       0
 12983 ;;      Temps:          0       1       0       0       0       0       0       0
 12984 ;;      Totals:         0       1       0       0       0       0       0       0
 12985 ;;Total ram usage:        1 bytes
 12986 ;; Hardware stack levels used:    1
 12987 ;; Hardware stack levels required when called:    6
 12988 ;; This function calls:
 12989 ;;		_LED_DOWN_ON
 12990 ;;		_LED_UP_ON
 12991 ;;		_MTOUCH_Button_Buttonmask_Get
 12992 ;; This function is called by:
 12993 ;;		_myButtonPressedCallback
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           
 12998                           ;psect for function _check_up_down
 12999  08C6                     _check_up_down:	
 13000                           
 13001                           ;main.c: 367:     if(last_touch_status.CS1 == 1)
 13002                           
 13003                           ;incstack = 0
 13004                           ; Regs used in _check_up_down: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13005  08C6  0021               	movlb	1	; select bank1
 13006  08C7  1CC2               	btfss	_last_touch_status^(0+128),1
 13007  08C8  0008               	return
 13008                           
 13009                           ;main.c: 368:     {;main.c: 369:         if(MTOUCH_Button_Buttonmask_Get() == 1 && triac
      +                          _level.full!=0xEE)
 13010  08C9  3188  2001  3188   	fcall	_MTOUCH_Button_Buttonmask_Get
 13011  08CC  3A01               	xorlw	1
 13012  08CD  1D03               	skipz
 13013  08CE  28EF               	goto	l6772
 13014  08CF  30EE               	movlw	238
 13015  08D0  0020               	movlb	0	; select bank0
 13016  08D1  065F               	xorwf	_triac_level,w
 13017  08D2  0460               	iorwf	_triac_level+1,w
 13018  08D3  1903               	btfsc	3,2
 13019  08D4  28EF               	goto	l6772
 13020                           
 13021                           ;main.c: 370:         {;main.c: 371:             LED_UP_ON();
 13022  08D5  3192  2263         	fcall	_LED_UP_ON
 13023                           
 13024                           ;main.c: 372:             triac_level.level++;
 13025  08D7  0020               	movlb	0	; select bank0
 13026  08D8  085F               	movf	_triac_level,w
 13027  08D9  390F               	andlw	15
 13028  08DA  00A6               	movwf	??_check_up_down
 13029  08DB  0AA6               	incf	??_check_up_down,f
 13030  08DC                     L10:	
 13031  08DC  085F               	movf	_triac_level,w
 13032  08DD  0626               	xorwf	??_check_up_down,w
 13033  08DE  39F0               	andlw	-16
 13034  08DF  0626               	xorwf	??_check_up_down,w
 13035  08E0  00DF               	movwf	_triac_level
 13036                           
 13037                           ;main.c: 373:             triac_level.last_level = triac_level.level;
 13038  08E1  085F               	movf	_triac_level,w
 13039  08E2  390F               	andlw	15
 13040  08E3  00A6               	movwf	??_check_up_down
 13041  08E4  0EA6               	swapf	??_check_up_down,f
 13042  08E5  085F               	movf	_triac_level,w
 13043  08E6  0626               	xorwf	??_check_up_down,w
 13044  08E7  390F               	andlw	-241
 13045  08E8  0626               	xorwf	??_check_up_down,w
 13046  08E9  00DF               	movwf	_triac_level
 13047                           
 13048                           ;main.c: 374:             counter_PRESS = 0;
 13049  08EA  01F5               	clrf	_counter_PRESS
 13050                           
 13051                           ;main.c: 375:             update_state_flag = 1;
 13052  08EB  0021               	movlb	1	; select bank1
 13053  08EC  01C9               	clrf	_update_state_flag^(0+128)
 13054  08ED  0AC9               	incf	_update_state_flag^(0+128),f
 13055                           
 13056                           ;main.c: 376:         }
 13057  08EE  0008               	return
 13058  08EF                     l6772:	
 13059  08EF  3188  2001  3188   	fcall	_MTOUCH_Button_Buttonmask_Get
 13060  08F2  3A04               	xorlw	4
 13061  08F3  1D03               	skipz
 13062  08F4  0008               	return
 13063  08F5  0020               	movlb	0	; select bank0
 13064  08F6  085F               	movf	_triac_level,w
 13065  08F7  0460               	iorwf	_triac_level+1,w
 13066  08F8  1903               	btfsc	3,2
 13067  08F9  0008               	return
 13068                           
 13069                           ;main.c: 378:         {;main.c: 379:             LED_DOWN_ON();
 13070  08FA  3192  2260  3188   	fcall	_LED_DOWN_ON
 13071                           
 13072                           ;main.c: 380:             triac_level.level--;
 13073  08FD  0020               	movlb	0	; select bank0
 13074  08FE  085F               	movf	_triac_level,w
 13075  08FF  390F               	andlw	15
 13076  0900  00A6               	movwf	??_check_up_down
 13077  0901  03A6               	decf	??_check_up_down,f
 13078  0902  28DC               	goto	L10
 13079  0903                     __end_of_check_up_down:	
 13080                           ;main.c: 385:     }
 13081                           
 13082                           
 13083                           	psect	text77
 13084  133C                     __ptext77:	
 13085 ;; *************** function _check_on_off *****************
 13086 ;; Defined at:
 13087 ;;		line 357 in file "main.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;		None
 13090 ;; Auto vars:     Size  Location     Type
 13091 ;;		None
 13092 ;; Return value:  Size  Location     Type
 13093 ;;                  1    wreg      void 
 13094 ;; Registers used:
 13095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13096 ;; Tracked objects:
 13097 ;;		On entry : 0/0
 13098 ;;		On exit  : 0/0
 13099 ;;		Unchanged: 0/0
 13100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13101 ;;      Params:         0       0       0       0       0       0       0       0
 13102 ;;      Locals:         0       0       0       0       0       0       0       0
 13103 ;;      Temps:          0       1       0       0       0       0       0       0
 13104 ;;      Totals:         0       1       0       0       0       0       0       0
 13105 ;;Total ram usage:        1 bytes
 13106 ;; Hardware stack levels used:    1
 13107 ;; Hardware stack levels required when called:    6
 13108 ;; This function calls:
 13109 ;;		_MTOUCH_Button_Buttonmask_Get
 13110 ;; This function is called by:
 13111 ;;		_myButtonPressedCallback
 13112 ;; This function uses a non-reentrant model
 13113 ;;
 13114                           
 13115                           
 13116                           ;psect for function _check_on_off
 13117  133C                     _check_on_off:	
 13118                           
 13119                           ;main.c: 359:     if(MTOUCH_Button_Buttonmask_Get() == 2)
 13120                           
 13121                           ;incstack = 0
 13122                           ; Regs used in _check_on_off: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13123  133C  3188  2001  3193   	fcall	_MTOUCH_Button_Buttonmask_Get
 13124  133F  3A02               	xorlw	2
 13125  1340  1D03               	skipz
 13126  1341  0008               	return
 13127                           
 13128                           ;main.c: 360:     {;main.c: 361:         counter_ON_OFF++;
 13129  1342  3001               	movlw	1
 13130  1343  0020               	movlb	0	; select bank0
 13131  1344  00A6               	movwf	??_check_on_off
 13132  1345  0826               	movf	??_check_on_off,w
 13133  1346  07F6               	addwf	_counter_ON_OFF,f
 13134  1347  0008               	return
 13135  1348                     __end_of_check_on_off:	
 13136                           
 13137                           	psect	text78
 13138  0801                     __ptext78:	
 13139 ;; *************** function _MTOUCH_Button_Buttonmask_Get *****************
 13140 ;; Defined at:
 13141 ;;		line 421 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;		None
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;  i               1    5[BANK0 ] unsigned char 
 13146 ;;  output          1    4[BANK0 ] unsigned char 
 13147 ;; Return value:  Size  Location     Type
 13148 ;;                  1    wreg      unsigned char 
 13149 ;; Registers used:
 13150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13151 ;; Tracked objects:
 13152 ;;		On entry : 0/0
 13153 ;;		On exit  : 0/0
 13154 ;;		Unchanged: 0/0
 13155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13156 ;;      Params:         0       0       0       0       0       0       0       0
 13157 ;;      Locals:         0       2       0       0       0       0       0       0
 13158 ;;      Temps:          0       2       0       0       0       0       0       0
 13159 ;;      Totals:         0       4       0       0       0       0       0       0
 13160 ;;Total ram usage:        4 bytes
 13161 ;; Hardware stack levels used:    1
 13162 ;; Hardware stack levels required when called:    5
 13163 ;; This function calls:
 13164 ;;		_MTOUCH_Button_isPressed
 13165 ;; This function is called by:
 13166 ;;		_main
 13167 ;;		_check_on_off
 13168 ;;		_check_up_down
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           
 13173                           ;psect for function _MTOUCH_Button_Buttonmask_Get
 13174  0801                     _MTOUCH_Button_Buttonmask_Get:	
 13175                           
 13176                           ;mcc_generated_files/mtouch/mtouch_button.c: 423:     mtouch_buttonmask_t output = 0;
 13177                           
 13178                           ;incstack = 0
 13179                           ; Regs used in _MTOUCH_Button_Buttonmask_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13180  0801  0020               	movlb	0	; select bank0
 13181  0802  01A4               	clrf	MTOUCH_Button_Buttonmask_Get@output
 13182                           
 13183                           ;mcc_generated_files/mtouch/mtouch_button.c: 425:     for (uint8_t i = 0; i < 3u; i++)
 13184  0803  01A5               	clrf	MTOUCH_Button_Buttonmask_Get@i
 13185  0804                     l4396:	
 13186                           
 13187                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 427:         if (MTOUCH_Button_isPressed(i) == 1)
 13188  0804  0825               	movf	MTOUCH_Button_Buttonmask_Get@i,w
 13189  0805  3195  259D  3188   	fcall	_MTOUCH_Button_isPressed
 13190  0808  3A01               	xorlw	1
 13191  0809  1D03               	skipz
 13192  080A  2817               	goto	l592
 13193                           
 13194                           ;mcc_generated_files/mtouch/mtouch_button.c: 428:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 429:             output |= (mtouch_buttonmask_t)0x01 << i;
 13195  080B  3001               	movlw	1
 13196  080C  0020               	movlb	0	; select bank0
 13197  080D  00A2               	movwf	??_MTOUCH_Button_Buttonmask_Get
 13198  080E  0A25               	incf	MTOUCH_Button_Buttonmask_Get@i,w
 13199  080F  2811               	goto	u2944
 13200  0810                     u2945:	
 13201  0810  35A2               	lslf	??_MTOUCH_Button_Buttonmask_Get,f
 13202  0811                     u2944:	
 13203  0811  0B89               	decfsz	9,f
 13204  0812  2810               	goto	u2945
 13205  0813  0822               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 13206  0814  00A3               	movwf	??_MTOUCH_Button_Buttonmask_Get+1
 13207  0815  0823               	movf	??_MTOUCH_Button_Buttonmask_Get+1,w
 13208  0816  04A4               	iorwf	MTOUCH_Button_Buttonmask_Get@output,f
 13209  0817                     l592:	
 13210                           ;mcc_generated_files/mtouch/mtouch_button.c: 430:         }
 13211                           
 13212                           
 13213                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     }
 13214  0817  3001               	movlw	1
 13215  0818  0020               	movlb	0	; select bank0
 13216  0819  00A2               	movwf	??_MTOUCH_Button_Buttonmask_Get
 13217  081A  0822               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 13218  081B  07A5               	addwf	MTOUCH_Button_Buttonmask_Get@i,f
 13219  081C  3003               	movlw	3
 13220  081D  0225               	subwf	MTOUCH_Button_Buttonmask_Get@i,w
 13221  081E  1C03               	skipc
 13222  081F  2804               	goto	l4396
 13223                           
 13224                           ;mcc_generated_files/mtouch/mtouch_button.c: 432:     return output;
 13225  0820  0824               	movf	MTOUCH_Button_Buttonmask_Get@output,w
 13226  0821  0008               	return
 13227  0822                     __end_of_MTOUCH_Button_Buttonmask_Get:	
 13228                           
 13229                           	psect	text79
 13230  159D                     __ptext79:	
 13231 ;; *************** function _MTOUCH_Button_isPressed *****************
 13232 ;; Defined at:
 13233 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;  name            1    wreg     enum E3069
 13236 ;; Auto vars:     Size  Location     Type
 13237 ;;  name            1    1[BANK0 ] enum E3069
 13238 ;; Return value:  Size  Location     Type
 13239 ;;                  1    wreg      _Bool 
 13240 ;; Registers used:
 13241 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13242 ;; Tracked objects:
 13243 ;;		On entry : 0/0
 13244 ;;		On exit  : 0/0
 13245 ;;		Unchanged: 0/0
 13246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13247 ;;      Params:         0       0       0       0       0       0       0       0
 13248 ;;      Locals:         0       1       0       0       0       0       0       0
 13249 ;;      Temps:          0       1       0       0       0       0       0       0
 13250 ;;      Totals:         0       2       0       0       0       0       0       0
 13251 ;;Total ram usage:        2 bytes
 13252 ;; Hardware stack levels used:    1
 13253 ;; Hardware stack levels required when called:    4
 13254 ;; This function calls:
 13255 ;;		Nothing
 13256 ;; This function is called by:
 13257 ;;		_MTOUCH_Button_Buttonmask_Get
 13258 ;;		_main
 13259 ;;		_touch_example
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           
 13264                           ;psect for function _MTOUCH_Button_isPressed
 13265  159D                     _MTOUCH_Button_isPressed:	
 13266                           
 13267                           ;incstack = 0
 13268                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 13269                           ;MTOUCH_Button_isPressed@name stored from wreg
 13270  159D  0020               	movlb	0	; select bank0
 13271  159E  00A1               	movwf	MTOUCH_Button_isPressed@name
 13272                           
 13273                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 13274  159F  3003               	movlw	3
 13275  15A0  0221               	subwf	MTOUCH_Button_isPressed@name,w
 13276  15A1  1803               	skipnc
 13277  15A2  2DB7               	goto	l4236
 13278                           
 13279                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 13280  15A3  0821               	movf	MTOUCH_Button_isPressed@name,w
 13281  15A4  00A0               	movwf	??_MTOUCH_Button_isPressed
 13282  15A5  3003               	movlw	3
 13283  15A6                     u2695:	
 13284  15A6  35A0               	lslf	??_MTOUCH_Button_isPressed,f
 13285  15A7  3EFF               	addlw	-1
 13286  15A8  1D03               	skipz
 13287  15A9  2DA6               	goto	u2695
 13288  15AA  3520               	lslf	??_MTOUCH_Button_isPressed,w
 13289  15AB  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 13290  15AC  0086               	movwf	6
 13291  15AD  3001               	movlw	1	; select bank2/3
 13292  15AE  0087               	movwf	7
 13293  15AF  3002               	movlw	2
 13294  15B0  0601               	xorwf	1,w
 13295  15B1  1D03               	btfss	3,2
 13296  15B2  2DB5               	goto	u2700
 13297  15B3  3001               	movlw	1
 13298  15B4  0008               	return
 13299  15B5                     u2700:	
 13300  15B5  3000               	movlw	0
 13301  15B6  0008               	return
 13302  15B7                     l4236:	
 13303                           
 13304                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 13305  15B7  3000               	movlw	0
 13306  15B8  0008               	return
 13307  15B9                     __end_of_MTOUCH_Button_isPressed:	
 13308                           
 13309                           	psect	text80
 13310  0858                     __ptext80:	
 13311 ;; *************** function _MTOUCH_Button_Initialize *****************
 13312 ;; Defined at:
 13313 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;  name            1    wreg     enum E3069
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;  name            1    8[BANK0 ] enum E3069
 13318 ;;  button          1    9[BANK0 ] PTR struct .
 13319 ;;		 -> mtouch_button(48), 
 13320 ;; Return value:  Size  Location     Type
 13321 ;;                  1    wreg      void 
 13322 ;; Registers used:
 13323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13324 ;; Tracked objects:
 13325 ;;		On entry : 0/0
 13326 ;;		On exit  : 0/0
 13327 ;;		Unchanged: 0/0
 13328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13329 ;;      Params:         0       0       0       0       0       0       0       0
 13330 ;;      Locals:         0       2       0       0       0       0       0       0
 13331 ;;      Temps:          0       2       0       0       0       0       0       0
 13332 ;;      Totals:         0       4       0       0       0       0       0       0
 13333 ;;Total ram usage:        4 bytes
 13334 ;; Hardware stack levels used:    1
 13335 ;; Hardware stack levels required when called:    6
 13336 ;; This function calls:
 13337 ;;		_MTOUCH_Sensor_Calibrate
 13338 ;; This function is called by:
 13339 ;;		_MTOUCH_Button_InitializeAll
 13340 ;;		_Button_Service
 13341 ;;		_Button_State_NotPressed
 13342 ;;		_Button_State_Pressed
 13343 ;; This function uses a non-reentrant model
 13344 ;;
 13345                           
 13346                           
 13347                           ;psect for function _MTOUCH_Button_Initialize
 13348  0858                     _MTOUCH_Button_Initialize:	
 13349                           
 13350                           ;incstack = 0
 13351                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13352                           ;MTOUCH_Button_Initialize@name stored from wreg
 13353  0858  0020               	movlb	0	; select bank0
 13354  0859  00A8               	movwf	MTOUCH_Button_Initialize@name
 13355                           
 13356                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 13357  085A  0828               	movf	MTOUCH_Button_Initialize@name,w
 13358  085B  00A6               	movwf	??_MTOUCH_Button_Initialize
 13359  085C  3003               	movlw	3
 13360  085D                     u3555:	
 13361  085D  35A6               	lslf	??_MTOUCH_Button_Initialize,f
 13362  085E  3EFF               	addlw	-1
 13363  085F  1D03               	skipz
 13364  0860  285D               	goto	u3555
 13365  0861  3526               	lslf	??_MTOUCH_Button_Initialize,w
 13366  0862  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 13367  0863  00A7               	movwf	??_MTOUCH_Button_Initialize+1
 13368  0864  0827               	movf	??_MTOUCH_Button_Initialize+1,w
 13369  0865  00A9               	movwf	MTOUCH_Button_Initialize@button
 13370                           
 13371                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 13372  0866  0829               	movf	MTOUCH_Button_Initialize@button,w
 13373  0867  3E02               	addlw	2
 13374  0868  0086               	movwf	6
 13375  0869  3001               	movlw	1	; select bank2/3
 13376  086A  0087               	movwf	7
 13377  086B  0181               	clrf	1
 13378                           
 13379                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 13380  086C  0829               	movf	MTOUCH_Button_Initialize@button,w
 13381  086D  3E05               	addlw	5
 13382  086E  0086               	movwf	6
 13383  086F  3001               	movlw	1	; select bank2/3
 13384  0870  0087               	movwf	7
 13385  0871  3000               	movlw	0
 13386  0872  3FC0               	movwi [0]fsr1
 13387  0873  3000               	movlw	0
 13388  0874  3FC1               	movwi [1]fsr1
 13389  0875  3FC2               	movwi [2]fsr1
 13390  0876  3FC3               	movwi [3]fsr1
 13391                           
 13392                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 13393  0877  0829               	movf	MTOUCH_Button_Initialize@button,w
 13394  0878  3E0A               	addlw	10
 13395  0879  0086               	movwf	6
 13396  087A  3001               	movlw	1	; select bank2/3
 13397  087B  0087               	movwf	7
 13398  087C  3000               	movlw	0
 13399  087D  3FC0               	movwi [0]fsr1
 13400  087E  3FC1               	movwi [1]fsr1
 13401                           
 13402                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 13403  087F  0829               	movf	MTOUCH_Button_Initialize@button,w
 13404  0880  3E0C               	addlw	12
 13405  0881  0086               	movwf	6
 13406  0882  3001               	movlw	1	; select bank2/3
 13407  0883  0087               	movwf	7
 13408  0884  3000               	movlw	0
 13409  0885  3FC0               	movwi [0]fsr1
 13410  0886  3FC1               	movwi [1]fsr1
 13411                           
 13412                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 13413  0887  0A29               	incf	MTOUCH_Button_Initialize@button,w
 13414  0888  0086               	movwf	6
 13415  0889  3001               	movlw	1	; select bank2/3
 13416  088A  0087               	movwf	7
 13417  088B  0801               	movf	1,w
 13418  088C  3194  243F         	fcall	_MTOUCH_Sensor_Calibrate
 13419  088E  0008               	return
 13420  088F                     __end_of_MTOUCH_Button_Initialize:	
 13421                           
 13422                           	psect	text81
 13423  143F                     __ptext81:	
 13424 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 13425 ;; Defined at:
 13426 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13427 ;; Parameters:    Size  Location     Type
 13428 ;;  sensor          1    wreg     enum E2878
 13429 ;; Auto vars:     Size  Location     Type
 13430 ;;  sensor          1    5[BANK0 ] enum E2878
 13431 ;; Return value:  Size  Location     Type
 13432 ;;                  1    wreg      void 
 13433 ;; Registers used:
 13434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13435 ;; Tracked objects:
 13436 ;;		On entry : 0/0
 13437 ;;		On exit  : 0/0
 13438 ;;		Unchanged: 0/0
 13439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13440 ;;      Params:         0       0       0       0       0       0       0       0
 13441 ;;      Locals:         0       1       0       0       0       0       0       0
 13442 ;;      Temps:          0       1       0       0       0       0       0       0
 13443 ;;      Totals:         0       2       0       0       0       0       0       0
 13444 ;;Total ram usage:        2 bytes
 13445 ;; Hardware stack levels used:    1
 13446 ;; Hardware stack levels required when called:    5
 13447 ;; This function calls:
 13448 ;;		___bmul
 13449 ;; This function is called by:
 13450 ;;		_MTOUCH_Sensor_Initialize
 13451 ;;		_MTOUCH_Button_Initialize
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           
 13456                           ;psect for function _MTOUCH_Sensor_Calibrate
 13457  143F                     _MTOUCH_Sensor_Calibrate:	
 13458                           
 13459                           ;incstack = 0
 13460                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13461                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 13462  143F  0020               	movlb	0	; select bank0
 13463  1440  00A5               	movwf	MTOUCH_Sensor_Calibrate@sensor
 13464                           
 13465                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 13466  1441  3003               	movlw	3
 13467  1442  0225               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 13468  1443  1803               	skipnc
 13469  1444  0008               	return
 13470                           
 13471                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 13472  1445  3009               	movlw	9
 13473  1446  00A4               	movwf	??_MTOUCH_Sensor_Calibrate
 13474  1447  0824               	movf	??_MTOUCH_Sensor_Calibrate,w
 13475  1448  00A0               	movwf	___bmul@multiplicand
 13476  1449  0825               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 13477  144A  3194  2409         	fcall	___bmul
 13478  144C  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 13479  144D  0086               	movwf	6
 13480  144E  3001               	movlw	1	; select bank2/3
 13481  144F  0087               	movwf	7
 13482  1450  1101               	bcf	1,2
 13483  1451  0008               	return
 13484  1452                     __end_of_MTOUCH_Sensor_Calibrate:	
 13485                           
 13486                           	psect	text82
 13487  0CF8                     __ptext82:	
 13488 ;; *************** function _Button_Baseline_Update *****************
 13489 ;; Defined at:
 13490 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13491 ;; Parameters:    Size  Location     Type
 13492 ;;  button          1    wreg     PTR struct .
 13493 ;;		 -> mtouch_button(48), 
 13494 ;; Auto vars:     Size  Location     Type
 13495 ;;  button          1    6[BANK0 ] PTR struct .
 13496 ;;		 -> mtouch_button(48), 
 13497 ;; Return value:  Size  Location     Type
 13498 ;;                  1    wreg      void 
 13499 ;; Registers used:
 13500 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13501 ;; Tracked objects:
 13502 ;;		On entry : 0/0
 13503 ;;		On exit  : 0/0
 13504 ;;		Unchanged: 0/0
 13505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13506 ;;      Params:         0       0       0       0       0       0       0       0
 13507 ;;      Locals:         0       1       0       0       0       0       0       0
 13508 ;;      Temps:          0       6       0       0       0       0       0       0
 13509 ;;      Totals:         0       7       0       0       0       0       0       0
 13510 ;;Total ram usage:        7 bytes
 13511 ;; Hardware stack levels used:    1
 13512 ;; Hardware stack levels required when called:    4
 13513 ;; This function calls:
 13514 ;;		Nothing
 13515 ;; This function is called by:
 13516 ;;		_Button_State_Initializing
 13517 ;;		_Button_State_NotPressed
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           
 13522                           ;psect for function _Button_Baseline_Update
 13523  0CF8                     _Button_Baseline_Update:	
 13524                           
 13525                           ;incstack = 0
 13526                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13527                           ;Button_Baseline_Update@button stored from wreg
 13528  0CF8  0020               	movlb	0	; select bank0
 13529  0CF9  00A6               	movwf	Button_Baseline_Update@button
 13530                           
 13531                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 13532  0CFA  1F8B               	btfss	11,7	;volatile
 13533  0CFB  2D43               	goto	l4806
 13534                           
 13535                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 13536  0CFC  138B               	bcf	11,7	;volatile
 13537                           
 13538                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 13539  0CFD  0826               	movf	Button_Baseline_Update@button,w
 13540  0CFE  3E05               	addlw	5
 13541  0CFF  0086               	movwf	6
 13542  0D00  3001               	movlw	1	; select bank2/3
 13543  0D01  0087               	movwf	7
 13544  0D02  3F40               	moviw [0]fsr1
 13545  0D03  00A0               	movwf	??_Button_Baseline_Update
 13546  0D04  3F41               	moviw [1]fsr1
 13547  0D05  00A1               	movwf	??_Button_Baseline_Update+1
 13548  0D06  3F42               	moviw [2]fsr1
 13549  0D07  00A2               	movwf	??_Button_Baseline_Update+2
 13550  0D08  3F43               	moviw [3]fsr1
 13551  0D09  00A3               	movwf	??_Button_Baseline_Update+3
 13552  0D0A  3004               	movlw	4
 13553  0D0B                     u3585:	
 13554  0D0B  36A3               	lsrf	??_Button_Baseline_Update+3,f
 13555  0D0C  0CA2               	rrf	??_Button_Baseline_Update+2,f
 13556  0D0D  0CA1               	rrf	??_Button_Baseline_Update+1,f
 13557  0D0E  0CA0               	rrf	??_Button_Baseline_Update,f
 13558  0D0F  0B89               	decfsz	9,f
 13559  0D10  2D0B               	goto	u3585
 13560  0D11  0826               	movf	Button_Baseline_Update@button,w
 13561  0D12  3E05               	addlw	5
 13562  0D13  0086               	movwf	6
 13563  0D14  3001               	movlw	1	; select bank2/3
 13564  0D15  0087               	movwf	7
 13565  0D16  0820               	movf	??_Button_Baseline_Update,w
 13566  0D17  0281               	subwf	1,f
 13567  0D18  3141               	addfsr 1,1
 13568  0D19  0821               	movf	??_Button_Baseline_Update+1,w
 13569  0D1A  3B81               	subwfb	1,f
 13570  0D1B  3141               	addfsr 1,1
 13571  0D1C  0822               	movf	??_Button_Baseline_Update+2,w
 13572  0D1D  3B81               	subwfb	1,f
 13573  0D1E  3141               	addfsr 1,1
 13574  0D1F  0823               	movf	??_Button_Baseline_Update+3,w
 13575  0D20  3B81               	subwfb	1,f
 13576  0D21  317D               	addfsr 1,-3
 13577                           
 13578                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 13579  0D22  0826               	movf	Button_Baseline_Update@button,w
 13580  0D23  3E03               	addlw	3
 13581  0D24  0086               	movwf	6
 13582  0D25  3001               	movlw	1	; select bank2/3
 13583  0D26  0087               	movwf	7
 13584  0D27  3F40               	moviw [0]fsr1
 13585  0D28  00A0               	movwf	??_Button_Baseline_Update
 13586  0D29  3F41               	moviw [1]fsr1
 13587  0D2A  00A1               	movwf	??_Button_Baseline_Update+1
 13588  0D2B  0820               	movf	??_Button_Baseline_Update,w
 13589  0D2C  00A2               	movwf	??_Button_Baseline_Update+2
 13590  0D2D  0821               	movf	??_Button_Baseline_Update+1,w
 13591  0D2E  00A3               	movwf	??_Button_Baseline_Update+3
 13592  0D2F  01A4               	clrf	??_Button_Baseline_Update+4
 13593  0D30  01A5               	clrf	??_Button_Baseline_Update+5
 13594  0D31  0826               	movf	Button_Baseline_Update@button,w
 13595  0D32  3E05               	addlw	5
 13596  0D33  0086               	movwf	6
 13597  0D34  3001               	movlw	1	; select bank2/3
 13598  0D35  0087               	movwf	7
 13599  0D36  0822               	movf	??_Button_Baseline_Update+2,w
 13600  0D37  0781               	addwf	1,f
 13601  0D38  3141               	addfsr 1,1
 13602  0D39  0823               	movf	??_Button_Baseline_Update+3,w
 13603  0D3A  3D81               	addwfc	1,f
 13604  0D3B  3141               	addfsr 1,1
 13605  0D3C  0824               	movf	??_Button_Baseline_Update+4,w
 13606  0D3D  3D81               	addwfc	1,f
 13607  0D3E  3141               	addfsr 1,1
 13608  0D3F  0825               	movf	??_Button_Baseline_Update+5,w
 13609  0D40  3D81               	addwfc	1,f
 13610                           
 13611                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 13612  0D41  178B               	bsf	11,7	;volatile
 13613                           
 13614                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 13615  0D42  0008               	return
 13616  0D43                     l4806:	
 13617                           
 13618                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 13619  0D43  0826               	movf	Button_Baseline_Update@button,w
 13620  0D44  3E05               	addlw	5
 13621  0D45  0086               	movwf	6
 13622  0D46  3001               	movlw	1	; select bank2/3
 13623  0D47  0087               	movwf	7
 13624  0D48  3F40               	moviw [0]fsr1
 13625  0D49  00A0               	movwf	??_Button_Baseline_Update
 13626  0D4A  3F41               	moviw [1]fsr1
 13627  0D4B  00A1               	movwf	??_Button_Baseline_Update+1
 13628  0D4C  3F42               	moviw [2]fsr1
 13629  0D4D  00A2               	movwf	??_Button_Baseline_Update+2
 13630  0D4E  3F43               	moviw [3]fsr1
 13631  0D4F  00A3               	movwf	??_Button_Baseline_Update+3
 13632  0D50  3004               	movlw	4
 13633  0D51                     u3595:	
 13634  0D51  36A3               	lsrf	??_Button_Baseline_Update+3,f
 13635  0D52  0CA2               	rrf	??_Button_Baseline_Update+2,f
 13636  0D53  0CA1               	rrf	??_Button_Baseline_Update+1,f
 13637  0D54  0CA0               	rrf	??_Button_Baseline_Update,f
 13638  0D55  0B89               	decfsz	9,f
 13639  0D56  2D51               	goto	u3595
 13640  0D57  0826               	movf	Button_Baseline_Update@button,w
 13641  0D58  3E05               	addlw	5
 13642  0D59  0086               	movwf	6
 13643  0D5A  3001               	movlw	1	; select bank2/3
 13644  0D5B  0087               	movwf	7
 13645  0D5C  0820               	movf	??_Button_Baseline_Update,w
 13646  0D5D  0281               	subwf	1,f
 13647  0D5E  3141               	addfsr 1,1
 13648  0D5F  0821               	movf	??_Button_Baseline_Update+1,w
 13649  0D60  3B81               	subwfb	1,f
 13650  0D61  3141               	addfsr 1,1
 13651  0D62  0822               	movf	??_Button_Baseline_Update+2,w
 13652  0D63  3B81               	subwfb	1,f
 13653  0D64  3141               	addfsr 1,1
 13654  0D65  0823               	movf	??_Button_Baseline_Update+3,w
 13655  0D66  3B81               	subwfb	1,f
 13656  0D67  317D               	addfsr 1,-3
 13657                           
 13658                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 13659  0D68  0826               	movf	Button_Baseline_Update@button,w
 13660  0D69  3E03               	addlw	3
 13661  0D6A  0086               	movwf	6
 13662  0D6B  3001               	movlw	1	; select bank2/3
 13663  0D6C  0087               	movwf	7
 13664  0D6D  3F40               	moviw [0]fsr1
 13665  0D6E  00A0               	movwf	??_Button_Baseline_Update
 13666  0D6F  3F41               	moviw [1]fsr1
 13667  0D70  00A1               	movwf	??_Button_Baseline_Update+1
 13668  0D71  0820               	movf	??_Button_Baseline_Update,w
 13669  0D72  00A2               	movwf	??_Button_Baseline_Update+2
 13670  0D73  0821               	movf	??_Button_Baseline_Update+1,w
 13671  0D74  00A3               	movwf	??_Button_Baseline_Update+3
 13672  0D75  01A4               	clrf	??_Button_Baseline_Update+4
 13673  0D76  01A5               	clrf	??_Button_Baseline_Update+5
 13674  0D77  0826               	movf	Button_Baseline_Update@button,w
 13675  0D78  3E05               	addlw	5
 13676  0D79  0086               	movwf	6
 13677  0D7A  3001               	movlw	1	; select bank2/3
 13678  0D7B  0087               	movwf	7
 13679  0D7C  0822               	movf	??_Button_Baseline_Update+2,w
 13680  0D7D  0781               	addwf	1,f
 13681  0D7E  3141               	addfsr 1,1
 13682  0D7F  0823               	movf	??_Button_Baseline_Update+3,w
 13683  0D80  3D81               	addwfc	1,f
 13684  0D81  3141               	addfsr 1,1
 13685  0D82  0824               	movf	??_Button_Baseline_Update+4,w
 13686  0D83  3D81               	addwfc	1,f
 13687  0D84  3141               	addfsr 1,1
 13688  0D85  0825               	movf	??_Button_Baseline_Update+5,w
 13689  0D86  3D81               	addwfc	1,f
 13690  0D87  0008               	return
 13691  0D88                     __end_of_Button_Baseline_Update:	
 13692                           
 13693                           	psect	text83
 13694  176C                     __ptext83:	
 13695 ;; *************** function _Button_Baseline_Initialize *****************
 13696 ;; Defined at:
 13697 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;  button          1    wreg     PTR struct .
 13700 ;;		 -> mtouch_button(48), 
 13701 ;; Auto vars:     Size  Location     Type
 13702 ;;  button          1   12[BANK0 ] PTR struct .
 13703 ;;		 -> mtouch_button(48), 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;                  1    wreg      void 
 13706 ;; Registers used:
 13707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13713 ;;      Params:         0       0       0       0       0       0       0       0
 13714 ;;      Locals:         0       1       0       0       0       0       0       0
 13715 ;;      Temps:          0       4       0       0       0       0       0       0
 13716 ;;      Totals:         0       5       0       0       0       0       0       0
 13717 ;;Total ram usage:        5 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    6
 13720 ;; This function calls:
 13721 ;;		_MTOUCH_Sensor_RawSample_Get
 13722 ;; This function is called by:
 13723 ;;		_Button_State_Initializing
 13724 ;; This function uses a non-reentrant model
 13725 ;;
 13726                           
 13727                           
 13728                           ;psect for function _Button_Baseline_Initialize
 13729  176C                     _Button_Baseline_Initialize:	
 13730                           
 13731                           ;incstack = 0
 13732                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13733                           ;Button_Baseline_Initialize@button stored from wreg
 13734  176C  0020               	movlb	0	; select bank0
 13735  176D  00AC               	movwf	Button_Baseline_Initialize@button
 13736                           
 13737                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 13738  176E  0A2C               	incf	Button_Baseline_Initialize@button,w
 13739  176F  0086               	movwf	6
 13740  1770  3001               	movlw	1	; select bank2/3
 13741  1771  0087               	movwf	7
 13742  1772  0801               	movf	1,w
 13743  1773  3195  2568  3197   	fcall	_MTOUCH_Sensor_RawSample_Get
 13744  1776  0020               	movlb	0	; select bank0
 13745  1777  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 13746  1778  00A8               	movwf	??_Button_Baseline_Initialize
 13747  1779  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 13748  177A  00A9               	movwf	??_Button_Baseline_Initialize+1
 13749  177B  01AA               	clrf	??_Button_Baseline_Initialize+2
 13750  177C  01AB               	clrf	??_Button_Baseline_Initialize+3
 13751  177D  082C               	movf	Button_Baseline_Initialize@button,w
 13752  177E  3E05               	addlw	5
 13753  177F  0086               	movwf	6
 13754  1780  3001               	movlw	1	; select bank2/3
 13755  1781  0087               	movwf	7
 13756  1782  0828               	movf	??_Button_Baseline_Initialize,w
 13757  1783  3FC0               	movwi [0]fsr1
 13758  1784  0829               	movf	??_Button_Baseline_Initialize+1,w
 13759  1785  3FC1               	movwi [1]fsr1
 13760  1786  082A               	movf	??_Button_Baseline_Initialize+2,w
 13761  1787  3FC2               	movwi [2]fsr1
 13762  1788  082B               	movf	??_Button_Baseline_Initialize+3,w
 13763  1789  3FC3               	movwi [3]fsr1
 13764                           
 13765                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 13766  178A  082C               	movf	Button_Baseline_Initialize@button,w
 13767  178B  3E05               	addlw	5
 13768  178C  0086               	movwf	6
 13769  178D  3001               	movlw	1	; select bank2/3
 13770  178E  0087               	movwf	7
 13771  178F  3004               	movlw	4
 13772  1790                     u3565:	
 13773  1790  3581               	lslf	1,f
 13774  1791  3141               	addfsr 1,1
 13775  1792  0D81               	rlf	1,f
 13776  1793  3141               	addfsr 1,1
 13777  1794  0D81               	rlf	1,f
 13778  1795  3141               	addfsr 1,1
 13779  1796  0D81               	rlf	1,f
 13780  1797  317D               	addfsr 1,-3
 13781  1798  0B89               	decfsz	9,f
 13782  1799  2F90               	goto	u3565
 13783  179A  0008               	return
 13784  179B                     __end_of_Button_Baseline_Initialize:	
 13785                           
 13786                           	psect	text84
 13787  136C                     __ptext84:	
 13788 ;; *************** function _Button_Reading_Update *****************
 13789 ;; Defined at:
 13790 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13791 ;; Parameters:    Size  Location     Type
 13792 ;;  button          1    wreg     PTR struct .
 13793 ;;		 -> mtouch_button(48), 
 13794 ;; Auto vars:     Size  Location     Type
 13795 ;;  button          1   11[BANK0 ] PTR struct .
 13796 ;;		 -> mtouch_button(48), 
 13797 ;; Return value:  Size  Location     Type
 13798 ;;                  1    wreg      void 
 13799 ;; Registers used:
 13800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13801 ;; Tracked objects:
 13802 ;;		On entry : 0/0
 13803 ;;		On exit  : 0/0
 13804 ;;		Unchanged: 0/0
 13805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13806 ;;      Params:         0       0       0       0       0       0       0       0
 13807 ;;      Locals:         0       1       0       0       0       0       0       0
 13808 ;;      Temps:          0       0       0       0       0       0       0       0
 13809 ;;      Totals:         0       1       0       0       0       0       0       0
 13810 ;;Total ram usage:        1 bytes
 13811 ;; Hardware stack levels used:    1
 13812 ;; Hardware stack levels required when called:    7
 13813 ;; This function calls:
 13814 ;;		_Button_Reading_Update_Helper
 13815 ;; This function is called by:
 13816 ;;		_Button_Service
 13817 ;; This function uses a non-reentrant model
 13818 ;;
 13819                           
 13820                           
 13821                           ;psect for function _Button_Reading_Update
 13822  136C                     _Button_Reading_Update:	
 13823                           
 13824                           ;incstack = 0
 13825                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13826                           ;Button_Reading_Update@button stored from wreg
 13827  136C  0020               	movlb	0	; select bank0
 13828  136D  00AB               	movwf	Button_Reading_Update@button
 13829                           
 13830                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 13831  136E  1F8B               	btfss	11,7	;volatile
 13832  136F  2B76               	goto	l6950
 13833                           
 13834                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 13835  1370  138B               	bcf	11,7	;volatile
 13836                           
 13837                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 13838  1371  082B               	movf	Button_Reading_Update@button,w
 13839  1372  3189  2180         	fcall	_Button_Reading_Update_Helper
 13840                           
 13841                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 13842  1374  178B               	bsf	11,7	;volatile
 13843                           
 13844                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 13845  1375  0008               	return
 13846  1376                     l6950:	
 13847                           
 13848                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 13849  1376  082B               	movf	Button_Reading_Update@button,w
 13850  1377  3189  2180         	fcall	_Button_Reading_Update_Helper
 13851  1379  0008               	return
 13852  137A                     __end_of_Button_Reading_Update:	
 13853                           
 13854                           	psect	text85
 13855  0980                     __ptext85:	
 13856 ;; *************** function _Button_Reading_Update_Helper *****************
 13857 ;; Defined at:
 13858 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13859 ;; Parameters:    Size  Location     Type
 13860 ;;  button          1    wreg     PTR struct .
 13861 ;;		 -> mtouch_button(48), 
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;  button          1   10[BANK0 ] PTR struct .
 13864 ;;		 -> mtouch_button(48), 
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  1    wreg      void 
 13867 ;; Registers used:
 13868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13874 ;;      Params:         0       0       0       0       0       0       0       0
 13875 ;;      Locals:         0       1       0       0       0       0       0       0
 13876 ;;      Temps:          0       2       0       0       0       0       0       0
 13877 ;;      Totals:         0       3       0       0       0       0       0       0
 13878 ;;Total ram usage:        3 bytes
 13879 ;; Hardware stack levels used:    1
 13880 ;; Hardware stack levels required when called:    6
 13881 ;; This function calls:
 13882 ;;		_MTOUCH_Sensor_RawSample_Get
 13883 ;; This function is called by:
 13884 ;;		_Button_Reading_Update
 13885 ;; This function uses a non-reentrant model
 13886 ;;
 13887                           
 13888                           
 13889                           ;psect for function _Button_Reading_Update_Helper
 13890  0980                     _Button_Reading_Update_Helper:	
 13891                           
 13892                           ;incstack = 0
 13893                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 13894                           ;Button_Reading_Update_Helper@button stored from wreg
 13895  0980  0020               	movlb	0	; select bank0
 13896  0981  00AA               	movwf	Button_Reading_Update_Helper@button
 13897                           
 13898                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 13899  0982  082A               	movf	Button_Reading_Update_Helper@button,w
 13900  0983  3E02               	addlw	2
 13901  0984  0086               	movwf	6
 13902  0985  3001               	movlw	1	; select bank2/3
 13903  0986  0087               	movwf	7
 13904  0987  0801               	movf	1,w
 13905  0988  1903               	btfsc	3,2
 13906  0989  29BE               	goto	l4814
 13907                           
 13908                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 13909  098A  082A               	movf	Button_Reading_Update_Helper@button,w
 13910  098B  3E03               	addlw	3
 13911  098C  0086               	movwf	6
 13912  098D  3001               	movlw	1	; select bank2/3
 13913  098E  0087               	movwf	7
 13914  098F  3F40               	moviw [0]fsr1
 13915  0990  00A8               	movwf	??_Button_Reading_Update_Helper
 13916  0991  3F41               	moviw [1]fsr1
 13917  0992  00A9               	movwf	??_Button_Reading_Update_Helper+1
 13918  0993  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 13919  0994  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 13920  0995  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 13921  0996  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 13922  0997  082A               	movf	Button_Reading_Update_Helper@button,w
 13923  0998  3E03               	addlw	3
 13924  0999  0086               	movwf	6
 13925  099A  3001               	movlw	1	; select bank2/3
 13926  099B  0087               	movwf	7
 13927  099C  0828               	movf	??_Button_Reading_Update_Helper,w
 13928  099D  0281               	subwf	1,f
 13929  099E  3141               	addfsr 1,1
 13930  099F  0829               	movf	??_Button_Reading_Update_Helper+1,w
 13931  09A0  3B81               	subwfb	1,f
 13932  09A1  317F               	addfsr 1,-1
 13933                           
 13934                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 13935  09A2  0A2A               	incf	Button_Reading_Update_Helper@button,w
 13936  09A3  0086               	movwf	6
 13937  09A4  3001               	movlw	1	; select bank2/3
 13938  09A5  0087               	movwf	7
 13939  09A6  0801               	movf	1,w
 13940  09A7  3195  2568         	fcall	_MTOUCH_Sensor_RawSample_Get
 13941  09A9  0020               	movlb	0	; select bank0
 13942  09AA  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 13943  09AB  00A8               	movwf	??_Button_Reading_Update_Helper
 13944  09AC  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 13945  09AD  00A9               	movwf	??_Button_Reading_Update_Helper+1
 13946  09AE  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 13947  09AF  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 13948  09B0  36A9               	lsrf	??_Button_Reading_Update_Helper+1,f
 13949  09B1  0CA8               	rrf	??_Button_Reading_Update_Helper,f
 13950  09B2  082A               	movf	Button_Reading_Update_Helper@button,w
 13951  09B3  3E03               	addlw	3
 13952  09B4  0086               	movwf	6
 13953  09B5  3001               	movlw	1	; select bank2/3
 13954  09B6  0087               	movwf	7
 13955  09B7  0828               	movf	??_Button_Reading_Update_Helper,w
 13956  09B8  0781               	addwf	1,f
 13957  09B9  3141               	addfsr 1,1
 13958  09BA  0829               	movf	??_Button_Reading_Update_Helper+1,w
 13959  09BB  3D81               	addwfc	1,f
 13960  09BC  317F               	addfsr 1,-1
 13961                           
 13962                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 13963  09BD  0008               	return
 13964  09BE                     l4814:	
 13965                           
 13966                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 13967  09BE  0A2A               	incf	Button_Reading_Update_Helper@button,w
 13968  09BF  0086               	movwf	6
 13969  09C0  3001               	movlw	1	; select bank2/3
 13970  09C1  0087               	movwf	7
 13971  09C2  0801               	movf	1,w
 13972  09C3  3195  2568         	fcall	_MTOUCH_Sensor_RawSample_Get
 13973  09C5  0020               	movlb	0	; select bank0
 13974  09C6  082A               	movf	Button_Reading_Update_Helper@button,w
 13975  09C7  3E03               	addlw	3
 13976  09C8  0086               	movwf	6
 13977  09C9  3001               	movlw	1	; select bank2/3
 13978  09CA  0087               	movwf	7
 13979  09CB  0824               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 13980  09CC  3FC0               	movwi [0]fsr1
 13981  09CD  0825               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 13982  09CE  3FC1               	movwi [1]fsr1
 13983  09CF  0008               	return
 13984  09D0                     __end_of_Button_Reading_Update_Helper:	
 13985                           
 13986                           	psect	text86
 13987  1568                     __ptext86:	
 13988 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 13989 ;; Defined at:
 13990 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13991 ;; Parameters:    Size  Location     Type
 13992 ;;  name            1    wreg     enum E2878
 13993 ;; Auto vars:     Size  Location     Type
 13994 ;;  name            1    7[BANK0 ] enum E2878
 13995 ;; Return value:  Size  Location     Type
 13996 ;;                  2    4[BANK0 ] unsigned short 
 13997 ;; Registers used:
 13998 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14004 ;;      Params:         0       2       0       0       0       0       0       0
 14005 ;;      Locals:         0       1       0       0       0       0       0       0
 14006 ;;      Temps:          0       1       0       0       0       0       0       0
 14007 ;;      Totals:         0       4       0       0       0       0       0       0
 14008 ;;Total ram usage:        4 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    5
 14011 ;; This function calls:
 14012 ;;		___bmul
 14013 ;; This function is called by:
 14014 ;;		_Button_Reading_Update_Helper
 14015 ;;		_Button_Baseline_Initialize
 14016 ;; This function uses a non-reentrant model
 14017 ;;
 14018                           
 14019                           
 14020                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 14021  1568                     _MTOUCH_Sensor_RawSample_Get:	
 14022                           
 14023                           ;incstack = 0
 14024                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14025                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 14026  1568  0020               	movlb	0	; select bank0
 14027  1569  00A7               	movwf	MTOUCH_Sensor_RawSample_Get@name
 14028                           
 14029                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 14030  156A  3003               	movlw	3
 14031  156B  0227               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 14032  156C  1803               	skipnc
 14033  156D  2D7F               	goto	l4656
 14034                           
 14035                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 14036  156E  3009               	movlw	9
 14037  156F  00A6               	movwf	??_MTOUCH_Sensor_RawSample_Get
 14038  1570  0826               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 14039  1571  00A0               	movwf	___bmul@multiplicand
 14040  1572  0827               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 14041  1573  3194  2409         	fcall	___bmul
 14042  1575  3E56               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 14043  1576  0086               	movwf	6
 14044  1577  3001               	movlw	1	; select bank2/3
 14045  1578  0087               	movwf	7
 14046  1579  3F40               	moviw [0]fsr1
 14047  157A  0020               	movlb	0	; select bank0
 14048  157B  00A4               	movwf	?_MTOUCH_Sensor_RawSample_Get
 14049  157C  3F41               	moviw [1]fsr1
 14050  157D  00A5               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 14051  157E  0008               	return
 14052  157F                     l4656:	
 14053                           
 14054                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 14055  157F  01A4               	clrf	?_MTOUCH_Sensor_RawSample_Get
 14056  1580  01A5               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 14057  1581  0008               	return
 14058  1582                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 14059                           
 14060                           	psect	text87
 14061  1409                     __ptext87:	
 14062 ;; *************** function ___bmul *****************
 14063 ;; Defined at:
 14064 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 14065 ;; Parameters:    Size  Location     Type
 14066 ;;  multiplier      1    wreg     unsigned char 
 14067 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14068 ;; Auto vars:     Size  Location     Type
 14069 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14070 ;;  product         1    2[BANK0 ] unsigned char 
 14071 ;; Return value:  Size  Location     Type
 14072 ;;                  1    wreg      unsigned char 
 14073 ;; Registers used:
 14074 ;;		wreg, status,2, status,0
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14080 ;;      Params:         0       1       0       0       0       0       0       0
 14081 ;;      Locals:         0       2       0       0       0       0       0       0
 14082 ;;      Temps:          0       1       0       0       0       0       0       0
 14083 ;;      Totals:         0       4       0       0       0       0       0       0
 14084 ;;Total ram usage:        4 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:    4
 14087 ;; This function calls:
 14088 ;;		Nothing
 14089 ;; This function is called by:
 14090 ;;		_MTOUCH_Sensor_Initialize
 14091 ;;		_MTOUCH_Sensor_RawSample_Get
 14092 ;;		_MTOUCH_Sensor_Enable
 14093 ;;		_MTOUCH_Sensor_Calibrate
 14094 ;;		_MTOUCH_Sensor_isCalibrated
 14095 ;;		_MTOUCH_Sensor_wasSampled
 14096 ;;		_MTOUCH_Sensor_isAnySensorActive
 14097 ;;		_MTOUCH_Sensor_Disable
 14098 ;;		_MTOUCH_Sensor_isEnabled
 14099 ;;		_MTOUCH_Sensor_isActive
 14100 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 14101 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 14102 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 14103 ;;		_MTOUCH_Sensor_Oversampling_Get
 14104 ;;		_MTOUCH_Sensor_Oversampling_Set
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           
 14109                           ;psect for function ___bmul
 14110  1409                     ___bmul:	
 14111                           
 14112                           ;incstack = 0
 14113                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14114                           ;___bmul@multiplier stored from wreg
 14115  1409  0020               	movlb	0	; select bank0
 14116  140A  00A3               	movwf	___bmul@multiplier
 14117  140B  01A2               	clrf	___bmul@product
 14118  140C                     l4426:	
 14119  140C  1C23               	btfss	___bmul@multiplier,0
 14120  140D  2C12               	goto	l4430
 14121  140E  0820               	movf	___bmul@multiplicand,w
 14122  140F  00A1               	movwf	??___bmul
 14123  1410  0821               	movf	??___bmul,w
 14124  1411  07A2               	addwf	___bmul@product,f
 14125  1412                     l4430:	
 14126  1412  1003               	clrc
 14127  1413  0DA0               	rlf	___bmul@multiplicand,f
 14128  1414  1003               	clrc
 14129  1415  0CA3               	rrf	___bmul@multiplier,f
 14130  1416  0823               	movf	___bmul@multiplier,w
 14131  1417  1D03               	btfss	3,2
 14132  1418  2C0C               	goto	l4426
 14133  1419  0822               	movf	___bmul@product,w
 14134  141A  0008               	return
 14135  141B                     __end_of___bmul:	
 14136                           
 14137                           	psect	text88
 14138  0C71                     __ptext88:	
 14139 ;; *************** function _Button_Deviation_Update *****************
 14140 ;; Defined at:
 14141 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14142 ;; Parameters:    Size  Location     Type
 14143 ;;  button          1    wreg     PTR struct .
 14144 ;;		 -> mtouch_button(48), 
 14145 ;; Auto vars:     Size  Location     Type
 14146 ;;  button          1   10[BANK0 ] PTR struct .
 14147 ;;		 -> mtouch_button(48), 
 14148 ;;  deviation       4   11[BANK0 ] long 
 14149 ;; Return value:  Size  Location     Type
 14150 ;;                  1    wreg      void 
 14151 ;; Registers used:
 14152 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14153 ;; Tracked objects:
 14154 ;;		On entry : 0/0
 14155 ;;		On exit  : 0/0
 14156 ;;		Unchanged: 0/0
 14157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14158 ;;      Params:         0       0       0       0       0       0       0       0
 14159 ;;      Locals:         0       5       0       0       0       0       0       0
 14160 ;;      Temps:          0      10       0       0       0       0       0       0
 14161 ;;      Totals:         0      15       0       0       0       0       0       0
 14162 ;;Total ram usage:       15 bytes
 14163 ;; Hardware stack levels used:    1
 14164 ;; Hardware stack levels required when called:    4
 14165 ;; This function calls:
 14166 ;;		Nothing
 14167 ;; This function is called by:
 14168 ;;		_Button_Service
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           
 14173                           ;psect for function _Button_Deviation_Update
 14174  0C71                     _Button_Deviation_Update:	
 14175                           
 14176                           ;incstack = 0
 14177                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 14178                           ;Button_Deviation_Update@button stored from wreg
 14179  0C71  0020               	movlb	0	; select bank0
 14180  0C72  00AA               	movwf	Button_Deviation_Update@button
 14181                           
 14182                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 14183  0C73  082A               	movf	Button_Deviation_Update@button,w
 14184  0C74  3E05               	addlw	5
 14185  0C75  0086               	movwf	6
 14186  0C76  3001               	movlw	1	; select bank2/3
 14187  0C77  0087               	movwf	7
 14188  0C78  3F40               	moviw [0]fsr1
 14189  0C79  00A0               	movwf	??_Button_Deviation_Update
 14190  0C7A  3F41               	moviw [1]fsr1
 14191  0C7B  00A1               	movwf	??_Button_Deviation_Update+1
 14192  0C7C  3F42               	moviw [2]fsr1
 14193  0C7D  00A2               	movwf	??_Button_Deviation_Update+2
 14194  0C7E  3F43               	moviw [3]fsr1
 14195  0C7F  00A3               	movwf	??_Button_Deviation_Update+3
 14196  0C80  3004               	movlw	4
 14197  0C81                     u3785:	
 14198  0C81  36A3               	lsrf	??_Button_Deviation_Update+3,f
 14199  0C82  0CA2               	rrf	??_Button_Deviation_Update+2,f
 14200  0C83  0CA1               	rrf	??_Button_Deviation_Update+1,f
 14201  0C84  0CA0               	rrf	??_Button_Deviation_Update,f
 14202  0C85  0B89               	decfsz	9,f
 14203  0C86  2C81               	goto	u3785
 14204  0C87  082A               	movf	Button_Deviation_Update@button,w
 14205  0C88  3E03               	addlw	3
 14206  0C89  0086               	movwf	6
 14207  0C8A  3001               	movlw	1	; select bank2/3
 14208  0C8B  0087               	movwf	7
 14209  0C8C  3F40               	moviw [0]fsr1
 14210  0C8D  00A4               	movwf	??_Button_Deviation_Update+4
 14211  0C8E  3F41               	moviw [1]fsr1
 14212  0C8F  00A5               	movwf	??_Button_Deviation_Update+5
 14213  0C90  0824               	movf	??_Button_Deviation_Update+4,w
 14214  0C91  00A6               	movwf	??_Button_Deviation_Update+6
 14215  0C92  0825               	movf	??_Button_Deviation_Update+5,w
 14216  0C93  00A7               	movwf	??_Button_Deviation_Update+7
 14217  0C94  01A8               	clrf	??_Button_Deviation_Update+8
 14218  0C95  01A9               	clrf	??_Button_Deviation_Update+9
 14219  0C96  0820               	movf	??_Button_Deviation_Update,w
 14220  0C97  02A6               	subwf	??_Button_Deviation_Update+6,f
 14221  0C98  0821               	movf	??_Button_Deviation_Update+1,w
 14222  0C99  3BA7               	subwfb	??_Button_Deviation_Update+7,f
 14223  0C9A  0822               	movf	??_Button_Deviation_Update+2,w
 14224  0C9B  3BA8               	subwfb	??_Button_Deviation_Update+8,f
 14225  0C9C  0823               	movf	??_Button_Deviation_Update+3,w
 14226  0C9D  3BA9               	subwfb	??_Button_Deviation_Update+9,f
 14227  0C9E  0829               	movf	??_Button_Deviation_Update+9,w
 14228  0C9F  00AE               	movwf	Button_Deviation_Update@deviation+3
 14229  0CA0  0828               	movf	??_Button_Deviation_Update+8,w
 14230  0CA1  00AD               	movwf	Button_Deviation_Update@deviation+2
 14231  0CA2  0827               	movf	??_Button_Deviation_Update+7,w
 14232  0CA3  00AC               	movwf	Button_Deviation_Update@deviation+1
 14233  0CA4  0826               	movf	??_Button_Deviation_Update+6,w
 14234  0CA5  00AB               	movwf	Button_Deviation_Update@deviation
 14235                           
 14236                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 14237  0CA6  082B               	movf	Button_Deviation_Update@deviation,w
 14238  0CA7  00A0               	movwf	??_Button_Deviation_Update
 14239  0CA8  082C               	movf	Button_Deviation_Update@deviation+1,w
 14240  0CA9  00A1               	movwf	??_Button_Deviation_Update+1
 14241  0CAA  082D               	movf	Button_Deviation_Update@deviation+2,w
 14242  0CAB  00A2               	movwf	??_Button_Deviation_Update+2
 14243  0CAC  082E               	movf	Button_Deviation_Update@deviation+3,w
 14244  0CAD  00A3               	movwf	??_Button_Deviation_Update+3
 14245  0CAE  082A               	movf	Button_Deviation_Update@button,w
 14246  0CAF  3E0F               	addlw	15
 14247  0CB0  0086               	movwf	6
 14248  0CB1  3001               	movlw	1	; select bank2/3
 14249  0CB2  0087               	movwf	7
 14250  0CB3  0A01               	incf	1,w
 14251  0CB4  2CB9               	goto	u3790
 14252  0CB5                     u3795:	
 14253  0CB5  37A3               	asrf	??_Button_Deviation_Update+3,f
 14254  0CB6  0CA2               	rrf	??_Button_Deviation_Update+2,f
 14255  0CB7  0CA1               	rrf	??_Button_Deviation_Update+1,f
 14256  0CB8  0CA0               	rrf	??_Button_Deviation_Update,f
 14257  0CB9                     u3790:	
 14258  0CB9  0B89               	decfsz	9,f
 14259  0CBA  2CB5               	goto	u3795
 14260  0CBB  0823               	movf	??_Button_Deviation_Update+3,w
 14261  0CBC  00AE               	movwf	Button_Deviation_Update@deviation+3
 14262  0CBD  0822               	movf	??_Button_Deviation_Update+2,w
 14263  0CBE  00AD               	movwf	Button_Deviation_Update@deviation+2
 14264  0CBF  0821               	movf	??_Button_Deviation_Update+1,w
 14265  0CC0  00AC               	movwf	Button_Deviation_Update@deviation+1
 14266  0CC1  0820               	movf	??_Button_Deviation_Update,w
 14267  0CC2  00AB               	movwf	Button_Deviation_Update@deviation
 14268                           
 14269                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 14270  0CC3  1BAE               	btfsc	Button_Deviation_Update@deviation+3,7
 14271  0CC4  2CDA               	goto	l4946
 14272  0CC5  082E               	movf	Button_Deviation_Update@deviation+3,w
 14273  0CC6  1D03               	btfss	3,2
 14274  0CC7  2CD2               	goto	l4944
 14275  0CC8  082D               	movf	Button_Deviation_Update@deviation+2,w
 14276  0CC9  1D03               	btfss	3,2
 14277  0CCA  2CD2               	goto	l4944
 14278  0CCB  082C               	movf	Button_Deviation_Update@deviation+1,w
 14279  0CCC  1D03               	btfss	3,2
 14280  0CCD  2CD2               	goto	l4944
 14281  0CCE  3080               	movlw	128
 14282  0CCF  022B               	subwf	Button_Deviation_Update@deviation,w
 14283  0CD0  1C03               	btfss	3,0
 14284  0CD1  2CDA               	goto	l4946
 14285  0CD2                     l4944:	
 14286                           
 14287                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 14288  0CD2  3000               	movlw	0
 14289  0CD3  00AE               	movwf	Button_Deviation_Update@deviation+3
 14290  0CD4  3000               	movlw	0
 14291  0CD5  00AD               	movwf	Button_Deviation_Update@deviation+2
 14292  0CD6  3000               	movlw	0
 14293  0CD7  00AC               	movwf	Button_Deviation_Update@deviation+1
 14294  0CD8  307F               	movlw	127
 14295  0CD9  00AB               	movwf	Button_Deviation_Update@deviation
 14296  0CDA                     l4946:	
 14297                           
 14298                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 14299  0CDA  1FAE               	btfss	Button_Deviation_Update@deviation+3,7
 14300  0CDB  2CEE               	goto	l4950
 14301  0CDC  3080               	movlw	128
 14302  0CDD  022B               	subwf	Button_Deviation_Update@deviation,w
 14303  0CDE  30FF               	movlw	255
 14304  0CDF  3B2C               	subwfb	Button_Deviation_Update@deviation+1,w
 14305  0CE0  30FF               	movlw	255
 14306  0CE1  3B2D               	subwfb	Button_Deviation_Update@deviation+2,w
 14307  0CE2  30FF               	movlw	255
 14308  0CE3  3B2E               	subwfb	Button_Deviation_Update@deviation+3,w
 14309  0CE4  1803               	btfsc	3,0
 14310  0CE5  2CEE               	goto	l4950
 14311                           
 14312                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 14313  0CE6  30FF               	movlw	255
 14314  0CE7  00AE               	movwf	Button_Deviation_Update@deviation+3
 14315  0CE8  30FF               	movlw	255
 14316  0CE9  00AD               	movwf	Button_Deviation_Update@deviation+2
 14317  0CEA  30FF               	movlw	255
 14318  0CEB  00AC               	movwf	Button_Deviation_Update@deviation+1
 14319  0CEC  3080               	movlw	128
 14320  0CED  00AB               	movwf	Button_Deviation_Update@deviation
 14321  0CEE                     l4950:	
 14322                           
 14323                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 14324  0CEE  082B               	movf	Button_Deviation_Update@deviation,w
 14325  0CEF  00A0               	movwf	??_Button_Deviation_Update
 14326  0CF0  082A               	movf	Button_Deviation_Update@button,w
 14327  0CF1  3E09               	addlw	9
 14328  0CF2  0086               	movwf	6
 14329  0CF3  3001               	movlw	1	; select bank2/3
 14330  0CF4  0087               	movwf	7
 14331  0CF5  0820               	movf	??_Button_Deviation_Update,w
 14332  0CF6  0081               	movwf	1
 14333  0CF7  0008               	return
 14334  0CF8                     __end_of_Button_Deviation_Update:	
 14335                           
 14336                           	psect	text89
 14337  12C4                     __ptext89:	
 14338 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 14339 ;; Defined at:
 14340 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14341 ;; Parameters:    Size  Location     Type
 14342 ;;  callback        2    0[BANK0 ] PTR FTN(enum E3069,)void
 14343 ;;		 -> myButtonPressedCallback(1), 
 14344 ;; Auto vars:     Size  Location     Type
 14345 ;;		None
 14346 ;; Return value:  Size  Location     Type
 14347 ;;                  1    wreg      void 
 14348 ;; Registers used:
 14349 ;;		wreg
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14355 ;;      Params:         0       2       0       0       0       0       0       0
 14356 ;;      Locals:         0       0       0       0       0       0       0       0
 14357 ;;      Temps:          0       0       0       0       0       0       0       0
 14358 ;;      Totals:         0       2       0       0       0       0       0       0
 14359 ;;Total ram usage:        2 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    4
 14362 ;; This function calls:
 14363 ;;		Nothing
 14364 ;; This function is called by:
 14365 ;;		_main
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369                           
 14370                           ;psect for function _MTOUCH_Button_SetPressedCallback
 14371  12C4                     _MTOUCH_Button_SetPressedCallback:	
 14372                           
 14373                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 14374                           
 14375                           ;incstack = 0
 14376                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 14377  12C4  0020               	movlb	0	; select bank0
 14378  12C5  0821               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 14379  12C6  0021               	movlb	1	; select bank1
 14380  12C7  00E6               	movwf	(_callback_pressed+1)^(0+128)
 14381  12C8  0020               	movlb	0	; select bank0
 14382  12C9  0820               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 14383  12CA  0021               	movlb	1	; select bank1
 14384  12CB  00E5               	movwf	_callback_pressed^(0+128)
 14385  12CC  0008               	return
 14386  12CD                     __end_of_MTOUCH_Button_SetPressedCallback:	
 14387                           
 14388                           	psect	text90
 14389  12BB                     __ptext90:	
 14390 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 14391 ;; Defined at:
 14392 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14393 ;; Parameters:    Size  Location     Type
 14394 ;;  callback        2    0[BANK0 ] PTR FTN(enum E3069,)void
 14395 ;;		 -> myButtonReleasedCallback(1), 
 14396 ;; Auto vars:     Size  Location     Type
 14397 ;;		None
 14398 ;; Return value:  Size  Location     Type
 14399 ;;                  1    wreg      void 
 14400 ;; Registers used:
 14401 ;;		wreg
 14402 ;; Tracked objects:
 14403 ;;		On entry : 0/0
 14404 ;;		On exit  : 0/0
 14405 ;;		Unchanged: 0/0
 14406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14407 ;;      Params:         0       2       0       0       0       0       0       0
 14408 ;;      Locals:         0       0       0       0       0       0       0       0
 14409 ;;      Temps:          0       0       0       0       0       0       0       0
 14410 ;;      Totals:         0       2       0       0       0       0       0       0
 14411 ;;Total ram usage:        2 bytes
 14412 ;; Hardware stack levels used:    1
 14413 ;; Hardware stack levels required when called:    4
 14414 ;; This function calls:
 14415 ;;		Nothing
 14416 ;; This function is called by:
 14417 ;;		_main
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           
 14422                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 14423  12BB                     _MTOUCH_Button_SetNotPressedCallback:	
 14424                           
 14425                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 14426                           
 14427                           ;incstack = 0
 14428                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 14429  12BB  0020               	movlb	0	; select bank0
 14430  12BC  0821               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 14431  12BD  0021               	movlb	1	; select bank1
 14432  12BE  00E4               	movwf	(_callback_notPressed+1)^(0+128)
 14433  12BF  0020               	movlb	0	; select bank0
 14434  12C0  0820               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 14435  12C1  0021               	movlb	1	; select bank1
 14436  12C2  00E3               	movwf	_callback_notPressed^(0+128)
 14437  12C3  0008               	return
 14438  12C4                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 14439                           
 14440                           	psect	text91
 14441  162C                     __ptext91:	
 14442 ;; *************** function _LED_RUN *****************
 14443 ;; Defined at:
 14444 ;;		line 40 in file "./LED.h"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;  LED_1           1    wreg     _Bool 
 14447 ;;  LED_2           1    0[BANK0 ] _Bool 
 14448 ;;  LED_3           1    1[BANK0 ] _Bool 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  LED_1           1    2[BANK0 ] _Bool 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  1    wreg      void 
 14453 ;; Registers used:
 14454 ;;		wreg, status,2, status,0, pclath, cstack
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14460 ;;      Params:         0       2       0       0       0       0       0       0
 14461 ;;      Locals:         0       1       0       0       0       0       0       0
 14462 ;;      Temps:          0       0       0       0       0       0       0       0
 14463 ;;      Totals:         0       3       0       0       0       0       0       0
 14464 ;;Total ram usage:        3 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    5
 14467 ;; This function calls:
 14468 ;;		_LED_DOWN_OFF
 14469 ;;		_LED_DOWN_ON
 14470 ;;		_LED_UP_OFF
 14471 ;;		_LED_UP_ON
 14472 ;; This function is called by:
 14473 ;;		_main
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           
 14478                           ;psect for function _LED_RUN
 14479  162C                     _LED_RUN:	
 14480                           
 14481                           ;incstack = 0
 14482                           ; Regs used in _LED_RUN: [wreg+status,2+status,0+pclath+cstack]
 14483                           ;LED_RUN@LED_1 stored from wreg
 14484  162C  0020               	movlb	0	; select bank0
 14485  162D  00A2               	movwf	LED_RUN@LED_1
 14486                           
 14487                           ;./LED.h: 40: void LED_RUN(_Bool LED_1,_Bool LED_2,_Bool LED_3);./LED.h: 41: {;./LED.h: 
      +                          42:     if(LED_1)
 14488  162E  0822               	movf	LED_RUN@LED_1,w
 14489  162F  1903               	btfsc	3,2
 14490  1630  2E35               	goto	l7308
 14491                           
 14492                           ;./LED.h: 43:     {;./LED.h: 44:         LED_UP_ON();
 14493  1631  3192  2263  3196   	fcall	_LED_UP_ON
 14494                           
 14495                           ;./LED.h: 45:     }
 14496  1634  2E38               	goto	l7310
 14497  1635                     l7308:	
 14498                           
 14499                           ;./LED.h: 47:     {;./LED.h: 48:         LED_UP_OFF();
 14500  1635  3192  2254  3196   	fcall	_LED_UP_OFF
 14501  1638                     l7310:	
 14502                           
 14503                           ;./LED.h: 51:     if(LED_2)
 14504  1638  0020               	movlb	0	; select bank0
 14505  1639  0820               	movf	LED_RUN@LED_2,w
 14506  163A  1903               	btfsc	3,2
 14507  163B  2E3F               	goto	l1174
 14508                           
 14509                           ;./LED.h: 52:     {;./LED.h: 53:         do { LATAbits.LATA4 = 0; } while(0);
 14510  163C  0022               	movlb	2	; select bank2
 14511  163D  120C               	bcf	12,4	;volatile
 14512  163E  2E41               	goto	l7312
 14513  163F                     l1174:	
 14514                           ;./LED.h: 56:     {;./LED.h: 57:         do { LATAbits.LATA4 = 1; } while(0);
 14515                           
 14516  163F  0022               	movlb	2	; select bank2
 14517  1640  160C               	bsf	12,4	;volatile
 14518  1641                     l7312:	
 14519                           
 14520                           ;./LED.h: 60:     if(LED_3)
 14521  1641  0020               	movlb	0	; select bank0
 14522  1642  0821               	movf	LED_RUN@LED_3,w
 14523  1643  1903               	btfsc	3,2
 14524  1644  2E48               	goto	l7316
 14525                           
 14526                           ;./LED.h: 61:     {;./LED.h: 62:         LED_DOWN_ON();
 14527  1645  3192  2260         	fcall	_LED_DOWN_ON
 14528                           
 14529                           ;./LED.h: 63:     }
 14530  1647  0008               	return
 14531  1648                     l7316:	
 14532                           
 14533                           ;./LED.h: 65:     {;./LED.h: 66:         LED_DOWN_OFF();
 14534  1648  3192  2251         	fcall	_LED_DOWN_OFF
 14535  164A  0008               	return
 14536  164B                     __end_of_LED_RUN:	
 14537                           
 14538                           	psect	text92
 14539  1263                     __ptext92:	
 14540 ;; *************** function _LED_UP_ON *****************
 14541 ;; Defined at:
 14542 ;;		line 4 in file "./LED.h"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;		None
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;		None
 14547 ;; Return value:  Size  Location     Type
 14548 ;;                  1    wreg      void 
 14549 ;; Registers used:
 14550 ;;		None
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14556 ;;      Params:         0       0       0       0       0       0       0       0
 14557 ;;      Locals:         0       0       0       0       0       0       0       0
 14558 ;;      Temps:          0       0       0       0       0       0       0       0
 14559 ;;      Totals:         0       0       0       0       0       0       0       0
 14560 ;;Total ram usage:        0 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    4
 14563 ;; This function calls:
 14564 ;;		Nothing
 14565 ;; This function is called by:
 14566 ;;		_LED_RUN
 14567 ;;		_check_up_down
 14568 ;; This function uses a non-reentrant model
 14569 ;;
 14570                           
 14571                           
 14572                           ;psect for function _LED_UP_ON
 14573  1263                     _LED_UP_ON:	
 14574                           
 14575                           ;incstack = 0
 14576                           ; Regs used in _LED_UP_ON: []
 14577                           ;./LED.h: 6:     do { LATCbits.LATC6 = 1; } while(0);
 14578  1263  0022               	movlb	2	; select bank2
 14579  1264  170E               	bsf	14,6	;volatile
 14580  1265  0008               	return
 14581  1266                     __end_of_LED_UP_ON:	
 14582                           
 14583                           	psect	text93
 14584  1260                     __ptext93:	
 14585 ;; *************** function _LED_DOWN_ON *****************
 14586 ;; Defined at:
 14587 ;;		line 8 in file "./LED.h"
 14588 ;; Parameters:    Size  Location     Type
 14589 ;;		None
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;		None
 14592 ;; Return value:  Size  Location     Type
 14593 ;;                  1    wreg      void 
 14594 ;; Registers used:
 14595 ;;		None
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14601 ;;      Params:         0       0       0       0       0       0       0       0
 14602 ;;      Locals:         0       0       0       0       0       0       0       0
 14603 ;;      Temps:          0       0       0       0       0       0       0       0
 14604 ;;      Totals:         0       0       0       0       0       0       0       0
 14605 ;;Total ram usage:        0 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    4
 14608 ;; This function calls:
 14609 ;;		Nothing
 14610 ;; This function is called by:
 14611 ;;		_LED_RUN
 14612 ;;		_main
 14613 ;;		_check_up_down
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _LED_DOWN_ON
 14619  1260                     _LED_DOWN_ON:	
 14620                           
 14621                           ;incstack = 0
 14622                           ; Regs used in _LED_DOWN_ON: []
 14623                           ;./LED.h: 10:     do { LATAbits.LATA5 = 1; } while(0);
 14624  1260  0022               	movlb	2	; select bank2
 14625  1261  168C               	bsf	12,5	;volatile
 14626  1262  0008               	return
 14627  1263                     __end_of_LED_DOWN_ON:	
 14628                           
 14629                           	psect	text94
 14630  125D                     __ptext94:	
 14631 ;; *************** function _LED_ON *****************
 14632 ;; Defined at:
 14633 ;;		line 20 in file "./LED.h"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;		None
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;		None
 14638 ;; Return value:  Size  Location     Type
 14639 ;;                  1    wreg      void 
 14640 ;; Registers used:
 14641 ;;		None
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14647 ;;      Params:         0       0       0       0       0       0       0       0
 14648 ;;      Locals:         0       0       0       0       0       0       0       0
 14649 ;;      Temps:          0       0       0       0       0       0       0       0
 14650 ;;      Totals:         0       0       0       0       0       0       0       0
 14651 ;;Total ram usage:        0 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    4
 14654 ;; This function calls:
 14655 ;;		Nothing
 14656 ;; This function is called by:
 14657 ;;		_main
 14658 ;; This function uses a non-reentrant model
 14659 ;;
 14660                           
 14661                           
 14662                           ;psect for function _LED_ON
 14663  125D                     _LED_ON:	
 14664                           
 14665                           ;incstack = 0
 14666                           ; Regs used in _LED_ON: []
 14667                           ;./LED.h: 22:     do { LATAbits.LATA4 = 0; } while(0);
 14668  125D  0022               	movlb	2	; select bank2
 14669  125E  120C               	bcf	12,4	;volatile
 14670  125F  0008               	return
 14671  1260                     __end_of_LED_ON:	
 14672                           
 14673                           	psect	text95
 14674  125A                     __ptext95:	
 14675 ;; *************** function _EUSART_is_rx_ready *****************
 14676 ;; Defined at:
 14677 ;;		line 124 in file "mcc_generated_files/eusart.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;		None
 14680 ;; Auto vars:     Size  Location     Type
 14681 ;;		None
 14682 ;; Return value:  Size  Location     Type
 14683 ;;                  1    wreg      unsigned char 
 14684 ;; Registers used:
 14685 ;;		wreg
 14686 ;; Tracked objects:
 14687 ;;		On entry : 0/0
 14688 ;;		On exit  : 0/0
 14689 ;;		Unchanged: 0/0
 14690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14691 ;;      Params:         0       0       0       0       0       0       0       0
 14692 ;;      Locals:         0       0       0       0       0       0       0       0
 14693 ;;      Temps:          0       0       0       0       0       0       0       0
 14694 ;;      Totals:         0       0       0       0       0       0       0       0
 14695 ;;Total ram usage:        0 bytes
 14696 ;; Hardware stack levels used:    1
 14697 ;; Hardware stack levels required when called:    4
 14698 ;; This function calls:
 14699 ;;		Nothing
 14700 ;; This function is called by:
 14701 ;;		_main
 14702 ;; This function uses a non-reentrant model
 14703 ;;
 14704                           
 14705                           
 14706                           ;psect for function _EUSART_is_rx_ready
 14707  125A                     _EUSART_is_rx_ready:	
 14708                           
 14709                           ;mcc_generated_files/eusart.c: 126:     return eusartRxCount;
 14710                           
 14711                           ;incstack = 0
 14712                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 14713  125A  0020               	movlb	0	; select bank0
 14714  125B  086A               	movf	_eusartRxCount,w	;volatile
 14715  125C  0008               	return
 14716  125D                     __end_of_EUSART_is_rx_ready:	
 14717                           
 14718                           	psect	text96
 14719  1698                     __ptext96:	
 14720 ;; *************** function _EUSART_Read *****************
 14721 ;; Defined at:
 14722 ;;		line 138 in file "mcc_generated_files/eusart.c"
 14723 ;; Parameters:    Size  Location     Type
 14724 ;;		None
 14725 ;; Auto vars:     Size  Location     Type
 14726 ;;  readValue       1    1[BANK0 ] unsigned char 
 14727 ;; Return value:  Size  Location     Type
 14728 ;;                  1    wreg      unsigned char 
 14729 ;; Registers used:
 14730 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14731 ;; Tracked objects:
 14732 ;;		On entry : 0/0
 14733 ;;		On exit  : 0/0
 14734 ;;		Unchanged: 0/0
 14735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14736 ;;      Params:         0       0       0       0       0       0       0       0
 14737 ;;      Locals:         0       1       0       0       0       0       0       0
 14738 ;;      Temps:          0       1       0       0       0       0       0       0
 14739 ;;      Totals:         0       2       0       0       0       0       0       0
 14740 ;;Total ram usage:        2 bytes
 14741 ;; Hardware stack levels used:    1
 14742 ;; Hardware stack levels required when called:    4
 14743 ;; This function calls:
 14744 ;;		Nothing
 14745 ;; This function is called by:
 14746 ;;		_main
 14747 ;;		_getch
 14748 ;; This function uses a non-reentrant model
 14749 ;;
 14750                           
 14751                           
 14752                           ;psect for function _EUSART_Read
 14753  1698                     _EUSART_Read:	
 14754  1698                     l5408:	
 14755                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 14756                           
 14757                           ;incstack = 0
 14758                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 14759                           
 14760                           
 14761                           ;mcc_generated_files/eusart.c: 142:     while(0 == eusartRxCount)
 14762  1698  0020               	movlb	0	; select bank0
 14763  1699  086A               	movf	_eusartRxCount,w	;volatile
 14764  169A  1903               	btfsc	3,2
 14765  169B  2E98               	goto	l5408
 14766                           
 14767                           ;mcc_generated_files/eusart.c: 146:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 14768  169C  086B               	movf	_eusartRxTail,w	;volatile
 14769  169D  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14770  169E  0086               	movwf	6
 14771  169F  0187               	clrf	7
 14772  16A0  0801               	movf	1,w
 14773  16A1  00A0               	movwf	??_EUSART_Read
 14774  16A2  0820               	movf	??_EUSART_Read,w
 14775  16A3  0021               	movlb	1	; select bank1
 14776  16A4  00CE               	movwf	_eusartRxLastError^(0+128)	;volatile
 14777                           
 14778                           ;mcc_generated_files/eusart.c: 148:     readValue = eusartRxBuffer[eusartRxTail++];
 14779  16A5  0020               	movlb	0	; select bank0
 14780  16A6  086B               	movf	_eusartRxTail,w
 14781  16A7  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14782  16A8  0086               	movwf	6
 14783  16A9  0187               	clrf	7
 14784  16AA  0801               	movf	1,w
 14785  16AB  00A0               	movwf	??_EUSART_Read
 14786  16AC  0820               	movf	??_EUSART_Read,w
 14787  16AD  00A1               	movwf	EUSART_Read@readValue
 14788  16AE  3001               	movlw	1
 14789  16AF  00A0               	movwf	??_EUSART_Read
 14790  16B0  0820               	movf	??_EUSART_Read,w
 14791  16B1  07EB               	addwf	_eusartRxTail,f	;volatile
 14792                           
 14793                           ;mcc_generated_files/eusart.c: 149:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 14794  16B2  3008               	movlw	8
 14795  16B3  026B               	subwf	_eusartRxTail,w	;volatile
 14796  16B4  1803               	btfsc	3,0
 14797                           
 14798                           ;mcc_generated_files/eusart.c: 150:     {;mcc_generated_files/eusart.c: 151:         eus
      +                          artRxTail = 0;
 14799  16B5  01EB               	clrf	_eusartRxTail	;volatile
 14800                           
 14801                           ;mcc_generated_files/eusart.c: 153:     PIE1bits.RCIE = 0;
 14802  16B6  0021               	movlb	1	; select bank1
 14803  16B7  1291               	bcf	17,5	;volatile
 14804                           
 14805                           ;mcc_generated_files/eusart.c: 154:     eusartRxCount--;
 14806  16B8  3001               	movlw	1
 14807  16B9  0020               	movlb	0	; select bank0
 14808  16BA  02EA               	subwf	_eusartRxCount,f	;volatile
 14809                           
 14810                           ;mcc_generated_files/eusart.c: 155:     PIE1bits.RCIE = 1;
 14811  16BB  0021               	movlb	1	; select bank1
 14812  16BC  1691               	bsf	17,5	;volatile
 14813                           
 14814                           ;mcc_generated_files/eusart.c: 157:     return readValue;
 14815  16BD  0020               	movlb	0	; select bank0
 14816  16BE  0821               	movf	EUSART_Read@readValue,w
 14817  16BF  0008               	return
 14818  16C0                     __end_of_EUSART_Read:	
 14819                           
 14820                           	psect	text97
 14821  05A7                     __ptext97:	
 14822 ;; *************** function _DATA_PROCESS *****************
 14823 ;; Defined at:
 14824 ;;		line 429 in file "main.c"
 14825 ;; Parameters:    Size  Location     Type
 14826 ;;  x               1    wreg     unsigned char 
 14827 ;; Auto vars:     Size  Location     Type
 14828 ;;  x               1    4[BANK0 ] unsigned char 
 14829 ;; Return value:  Size  Location     Type
 14830 ;;                  1    wreg      void 
 14831 ;; Registers used:
 14832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14833 ;; Tracked objects:
 14834 ;;		On entry : 0/0
 14835 ;;		On exit  : 0/0
 14836 ;;		Unchanged: 0/0
 14837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14838 ;;      Params:         0       0       0       0       0       0       0       0
 14839 ;;      Locals:         0       1       0       0       0       0       0       0
 14840 ;;      Temps:          0       2       0       0       0       0       0       0
 14841 ;;      Totals:         0       3       0       0       0       0       0       0
 14842 ;;Total ram usage:        3 bytes
 14843 ;; Hardware stack levels used:    1
 14844 ;; Hardware stack levels required when called:    5
 14845 ;; This function calls:
 14846 ;;		_CHECK_DIR
 14847 ;; This function is called by:
 14848 ;;		_main
 14849 ;; This function uses a non-reentrant model
 14850 ;;
 14851                           
 14852                           
 14853                           ;psect for function _DATA_PROCESS
 14854  05A7                     _DATA_PROCESS:	
 14855                           
 14856                           ;incstack = 0
 14857                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14858                           ;DATA_PROCESS@x stored from wreg
 14859  05A7  0020               	movlb	0	; select bank0
 14860  05A8  00A4               	movwf	DATA_PROCESS@x
 14861                           
 14862                           ;main.c: 429: void DATA_PROCESS(char x);main.c: 430: {;main.c: 431:     switch(x)
 14863  05A9  2E2A               	goto	l5798
 14864  05AA                     l5660:	
 14865                           
 14866                           ;main.c: 434:         {;main.c: 435:             check_request = 0;
 14867  05AA  01E4               	clrf	_check_request
 14868                           
 14869                           ;main.c: 437:             last_touch_status.CS1 = 0;
 14870  05AB  0021               	movlb	1	; select bank1
 14871  05AC  10C2               	bcf	_last_touch_status^(0+128),1
 14872                           
 14873                           ;main.c: 438:             turn_off = 1;
 14874  05AD  0020               	movlb	0	; select bank0
 14875  05AE  01E9               	clrf	_turn_off
 14876  05AF  0AE9               	incf	_turn_off,f
 14877                           
 14878                           ;main.c: 439:             counter_1s = 0;
 14879  05B0  01E1               	clrf	_counter_1s
 14880  05B1  01E2               	clrf	_counter_1s+1
 14881                           
 14882                           ;main.c: 440:             break;
 14883  05B2  0008               	return
 14884  05B3                     l5666:	
 14885                           
 14886                           ;main.c: 443:         {;main.c: 444:             check_request = 0;
 14887  05B3  01E4               	clrf	_check_request
 14888                           
 14889                           ;main.c: 445:             last_touch_status.CS1 = 1;
 14890  05B4  0021               	movlb	1	; select bank1
 14891  05B5  14C2               	bsf	_last_touch_status^(0+128),1
 14892                           
 14893                           ;main.c: 446:             rc_level.level = 1;
 14894  05B6  083A               	movf	_rc_level^(0+128),w
 14895  05B7  39F0               	andlw	-16
 14896  05B8  3801               	iorlw	1
 14897  05B9                     L11:	
 14898  05B9  00BA               	movwf	_rc_level^(0+128)
 14899                           
 14900                           ;main.c: 447:             CHECK_DIR();
 14901  05BA  3195  251D         	fcall	_CHECK_DIR
 14902                           
 14903                           ;main.c: 448:             break;
 14904  05BC  0008               	return
 14905  05BD                     l5674:	
 14906                           
 14907                           ;main.c: 451:         {;main.c: 452:             check_request = 0;
 14908  05BD  01E4               	clrf	_check_request
 14909                           
 14910                           ;main.c: 453:             last_touch_status.CS1 = 1;
 14911  05BE  0021               	movlb	1	; select bank1
 14912  05BF  14C2               	bsf	_last_touch_status^(0+128),1
 14913                           
 14914                           ;main.c: 454:             rc_level.level = 2;
 14915  05C0  083A               	movf	_rc_level^(0+128),w
 14916  05C1  39F0               	andlw	-16
 14917  05C2  3802               	iorlw	2
 14918  05C3  2DB9               	goto	L11
 14919  05C4                     l5682:	
 14920                           
 14921                           ;main.c: 459:         {;main.c: 460:             check_request = 0;
 14922  05C4  01E4               	clrf	_check_request
 14923                           
 14924                           ;main.c: 461:             last_touch_status.CS1 = 1;
 14925  05C5  0021               	movlb	1	; select bank1
 14926  05C6  14C2               	bsf	_last_touch_status^(0+128),1
 14927                           
 14928                           ;main.c: 462:             rc_level.level = 3;
 14929  05C7  083A               	movf	_rc_level^(0+128),w
 14930  05C8  39F0               	andlw	-16
 14931  05C9  3803               	iorlw	3
 14932  05CA  2DB9               	goto	L11
 14933  05CB                     l5690:	
 14934                           
 14935                           ;main.c: 467:         {;main.c: 468:             check_request = 0;
 14936  05CB  01E4               	clrf	_check_request
 14937                           
 14938                           ;main.c: 469:             last_touch_status.CS1 = 1;
 14939  05CC  0021               	movlb	1	; select bank1
 14940  05CD  14C2               	bsf	_last_touch_status^(0+128),1
 14941                           
 14942                           ;main.c: 470:             rc_level.level = 4;
 14943  05CE  083A               	movf	_rc_level^(0+128),w
 14944  05CF  39F0               	andlw	-16
 14945  05D0  3804               	iorlw	4
 14946  05D1  2DB9               	goto	L11
 14947  05D2                     l5698:	
 14948                           
 14949                           ;main.c: 475:         {;main.c: 476:             check_request = 0;
 14950  05D2  01E4               	clrf	_check_request
 14951                           
 14952                           ;main.c: 477:             last_touch_status.CS1 = 1;
 14953  05D3  0021               	movlb	1	; select bank1
 14954  05D4  14C2               	bsf	_last_touch_status^(0+128),1
 14955                           
 14956                           ;main.c: 478:             rc_level.level = 5;
 14957  05D5  083A               	movf	_rc_level^(0+128),w
 14958  05D6  39F0               	andlw	-16
 14959  05D7  3805               	iorlw	5
 14960  05D8  2DB9               	goto	L11
 14961  05D9                     l5706:	
 14962                           
 14963                           ;main.c: 483:         {;main.c: 484:             check_request = 0;
 14964  05D9  01E4               	clrf	_check_request
 14965                           
 14966                           ;main.c: 485:             last_touch_status.CS1 = 1;
 14967  05DA  0021               	movlb	1	; select bank1
 14968  05DB  14C2               	bsf	_last_touch_status^(0+128),1
 14969                           
 14970                           ;main.c: 486:             rc_level.level = 6;
 14971  05DC  083A               	movf	_rc_level^(0+128),w
 14972  05DD  39F0               	andlw	-16
 14973  05DE  3806               	iorlw	6
 14974  05DF  2DB9               	goto	L11
 14975  05E0                     l5714:	
 14976                           
 14977                           ;main.c: 491:         {;main.c: 492:             check_request = 0;
 14978  05E0  01E4               	clrf	_check_request
 14979                           
 14980                           ;main.c: 493:             last_touch_status.CS1 = 1;
 14981  05E1  0021               	movlb	1	; select bank1
 14982  05E2  14C2               	bsf	_last_touch_status^(0+128),1
 14983                           
 14984                           ;main.c: 494:             rc_level.level = 7;
 14985  05E3  083A               	movf	_rc_level^(0+128),w
 14986  05E4  39F0               	andlw	-16
 14987  05E5  3807               	iorlw	7
 14988  05E6  2DB9               	goto	L11
 14989  05E7                     l5722:	
 14990                           
 14991                           ;main.c: 499:         {;main.c: 500:             check_request = 0;
 14992  05E7  01E4               	clrf	_check_request
 14993                           
 14994                           ;main.c: 501:             last_touch_status.CS1 = 1;
 14995  05E8  0021               	movlb	1	; select bank1
 14996  05E9  14C2               	bsf	_last_touch_status^(0+128),1
 14997                           
 14998                           ;main.c: 502:             rc_level.level = 8;
 14999  05EA  083A               	movf	_rc_level^(0+128),w
 15000  05EB  39F0               	andlw	-16
 15001  05EC  3808               	iorlw	8
 15002  05ED  2DB9               	goto	L11
 15003  05EE                     l5730:	
 15004                           
 15005                           ;main.c: 507:         {;main.c: 508:             check_request = 0;
 15006  05EE  01E4               	clrf	_check_request
 15007                           
 15008                           ;main.c: 509:             last_touch_status.CS1 = 1;
 15009  05EF  0021               	movlb	1	; select bank1
 15010  05F0  14C2               	bsf	_last_touch_status^(0+128),1
 15011                           
 15012                           ;main.c: 510:             rc_level.level = 9;
 15013  05F1  083A               	movf	_rc_level^(0+128),w
 15014  05F2  39F0               	andlw	-16
 15015  05F3  3809               	iorlw	9
 15016  05F4  2DB9               	goto	L11
 15017  05F5                     l5738:	
 15018                           
 15019                           ;main.c: 515:         {;main.c: 516:             check_request = 0;
 15020  05F5  01E4               	clrf	_check_request
 15021                           
 15022                           ;main.c: 517:             last_touch_status.CS1 = 1;
 15023  05F6  0021               	movlb	1	; select bank1
 15024  05F7  14C2               	bsf	_last_touch_status^(0+128),1
 15025                           
 15026                           ;main.c: 518:             rc_level.level = 10;
 15027  05F8  083A               	movf	_rc_level^(0+128),w
 15028  05F9  39F0               	andlw	-16
 15029  05FA  380A               	iorlw	10
 15030  05FB  2DB9               	goto	L11
 15031  05FC                     l5746:	
 15032                           
 15033                           ;main.c: 523:         {;main.c: 524:             check_request = 0;
 15034  05FC  01E4               	clrf	_check_request
 15035                           
 15036                           ;main.c: 525:             last_touch_status.CS1 = 1;
 15037  05FD  0021               	movlb	1	; select bank1
 15038  05FE  14C2               	bsf	_last_touch_status^(0+128),1
 15039                           
 15040                           ;main.c: 526:             rc_level.level = 11;
 15041  05FF  083A               	movf	_rc_level^(0+128),w
 15042  0600  39F0               	andlw	-16
 15043  0601  380B               	iorlw	11
 15044  0602  2DB9               	goto	L11
 15045  0603                     l5754:	
 15046                           
 15047                           ;main.c: 531:         {;main.c: 532:             check_request = 0;
 15048  0603  01E4               	clrf	_check_request
 15049                           
 15050                           ;main.c: 533:             last_touch_status.CS1 = 1;
 15051  0604  0021               	movlb	1	; select bank1
 15052  0605  14C2               	bsf	_last_touch_status^(0+128),1
 15053                           
 15054                           ;main.c: 534:             rc_level.level = 12;
 15055  0606  083A               	movf	_rc_level^(0+128),w
 15056  0607  39F0               	andlw	-16
 15057  0608  380C               	iorlw	12
 15058  0609  2DB9               	goto	L11
 15059  060A                     l5762:	
 15060                           
 15061                           ;main.c: 539:         {;main.c: 540:             check_request = 0;
 15062  060A  01E4               	clrf	_check_request
 15063                           
 15064                           ;main.c: 541:             last_touch_status.CS1 = 1;
 15065  060B  0021               	movlb	1	; select bank1
 15066  060C  14C2               	bsf	_last_touch_status^(0+128),1
 15067                           
 15068                           ;main.c: 542:             rc_level.level = 13;
 15069  060D  083A               	movf	_rc_level^(0+128),w
 15070  060E  39F0               	andlw	-16
 15071  060F  380D               	iorlw	13
 15072  0610  2DB9               	goto	L11
 15073  0611                     l5770:	
 15074                           
 15075                           ;main.c: 547:         {;main.c: 548:             check_request = 0;
 15076  0611  01E4               	clrf	_check_request
 15077                           
 15078                           ;main.c: 549:             last_touch_status.CS1 = 1;
 15079  0612  0021               	movlb	1	; select bank1
 15080  0613  14C2               	bsf	_last_touch_status^(0+128),1
 15081                           
 15082                           ;main.c: 550:             rc_level.level = 14;
 15083  0614  083A               	movf	_rc_level^(0+128),w
 15084  0615  39F0               	andlw	-16
 15085  0616  380E               	iorlw	14
 15086  0617  2DB9               	goto	L11
 15087  0618                     l1312:	
 15088                           ;main.c: 561:         };main.c: 562:         case 'Z':
 15089                           
 15090                           
 15091                           ;main.c: 563:         {;main.c: 564:             last_touch_status.CS1 = 0;
 15092  0618  0021               	movlb	1	; select bank1
 15093  0619  10C2               	bcf	_last_touch_status^(0+128),1
 15094                           
 15095                           ;main.c: 565:             turn_off = 1;
 15096  061A  0020               	movlb	0	; select bank0
 15097  061B  01E9               	clrf	_turn_off
 15098  061C  0AE9               	incf	_turn_off,f
 15099  061D                     l5786:	
 15100                           
 15101                           ;main.c: 566:             check_request = 0;
 15102  061D  01E4               	clrf	_check_request
 15103  061E                     l5788:	
 15104                           
 15105                           ;main.c: 567:             update_state_flag = 1;
 15106  061E  0021               	movlb	1	; select bank1
 15107  061F  01C9               	clrf	_update_state_flag^(0+128)
 15108  0620  0AC9               	incf	_update_state_flag^(0+128),f
 15109                           
 15110                           ;main.c: 568:             break;
 15111  0621  0008               	return
 15112  0622                     l1313:	
 15113                           ;main.c: 569:         };main.c: 570:         case 'X':
 15114                           
 15115                           
 15116                           ;main.c: 571:         {;main.c: 573:             last_touch_status.CS1 = 1;
 15117  0622  0021               	movlb	1	; select bank1
 15118  0623  14C2               	bsf	_last_touch_status^(0+128),1
 15119                           
 15120                           ;main.c: 574:             turn_on = 1;
 15121  0624  0020               	movlb	0	; select bank0
 15122  0625  01E8               	clrf	_turn_on
 15123  0626  0AE8               	incf	_turn_on,f
 15124  0627  2E1D               	goto	l5786
 15125  0628                     l5794:	
 15126                           
 15127                           ;main.c: 585:         {;main.c: 586:             check_request = 0;
 15128  0628  01E4               	clrf	_check_request
 15129                           
 15130                           ;main.c: 587:             break;
 15131  0629  0008               	return
 15132  062A                     l5798:	
 15133  062A  0824               	movf	DATA_PROCESS@x,w
 15134  062B  00A2               	movwf	??_DATA_PROCESS
 15135  062C  01A3               	clrf	??_DATA_PROCESS+1
 15136                           
 15137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15138                           ; Switch size 1, requested type "simple"
 15139                           ; Number of cases is 1, Range of values is 0 to 0
 15140                           ; switch strategies available:
 15141                           ; Name         Instructions Cycles
 15142                           ; simple_byte            4     3 (average)
 15143                           ; direct_byte            8     6 (fixed)
 15144                           ; jumptable            260     6 (fixed)
 15145                           ;	Chosen strategy is simple_byte
 15146  062D  0823               	movf	??_DATA_PROCESS+1,w
 15147  062E  3A00               	xorlw	0	; case 0
 15148  062F  1903               	skipnz
 15149  0630  2E32               	goto	l7888
 15150  0631  2E28               	goto	l5794
 15151  0632                     l7888:	
 15152                           
 15153                           ; Switch size 1, requested type "simple"
 15154                           ; Number of cases is 19, Range of values is 48 to 90
 15155                           ; switch strategies available:
 15156                           ; Name         Instructions Cycles
 15157                           ; simple_byte           58    30 (average)
 15158                           ; direct_byte           95     9 (fixed)
 15159                           ; jumptable            263     9 (fixed)
 15160                           ;	Chosen strategy is simple_byte
 15161  0632  0822               	movf	??_DATA_PROCESS,w
 15162  0633  3A30               	xorlw	48	; case 48
 15163  0634  1903               	skipnz
 15164  0635  2DAA               	goto	l5660
 15165  0636  3A01               	xorlw	1	; case 49
 15166  0637  1903               	skipnz
 15167  0638  2DB3               	goto	l5666
 15168  0639  3A03               	xorlw	3	; case 50
 15169  063A  1903               	skipnz
 15170  063B  2DBD               	goto	l5674
 15171  063C  3A01               	xorlw	1	; case 51
 15172  063D  1903               	skipnz
 15173  063E  2DC4               	goto	l5682
 15174  063F  3A07               	xorlw	7	; case 52
 15175  0640  1903               	skipnz
 15176  0641  2DCB               	goto	l5690
 15177  0642  3A01               	xorlw	1	; case 53
 15178  0643  1903               	skipnz
 15179  0644  2DD2               	goto	l5698
 15180  0645  3A03               	xorlw	3	; case 54
 15181  0646  1903               	skipnz
 15182  0647  2DD9               	goto	l5706
 15183  0648  3A01               	xorlw	1	; case 55
 15184  0649  1903               	skipnz
 15185  064A  2DE0               	goto	l5714
 15186  064B  3A0F               	xorlw	15	; case 56
 15187  064C  1903               	skipnz
 15188  064D  2DE7               	goto	l5722
 15189  064E  3A01               	xorlw	1	; case 57
 15190  064F  1903               	skipnz
 15191  0650  2DEE               	goto	l5730
 15192  0651  3A78               	xorlw	120	; case 65
 15193  0652  1903               	skipnz
 15194  0653  2DF5               	goto	l5738
 15195  0654  3A03               	xorlw	3	; case 66
 15196  0655  1903               	skipnz
 15197  0656  2DFC               	goto	l5746
 15198  0657  3A01               	xorlw	1	; case 67
 15199  0658  1903               	skipnz
 15200  0659  2E03               	goto	l5754
 15201  065A  3A07               	xorlw	7	; case 68
 15202  065B  1903               	skipnz
 15203  065C  2E0A               	goto	l5762
 15204  065D  3A01               	xorlw	1	; case 69
 15205  065E  1903               	skipnz
 15206  065F  2E11               	goto	l5770
 15207  0660  3A02               	xorlw	2	; case 71
 15208  0661  1903               	skipnz
 15209  0662  2E11               	goto	l5770
 15210  0663  3A12               	xorlw	18	; case 85
 15211  0664  1903               	skipnz
 15212  0665  2E1E               	goto	l5788
 15213  0666  3A0D               	xorlw	13	; case 88
 15214  0667  1903               	skipnz
 15215  0668  2E22               	goto	l1313
 15216  0669  3A02               	xorlw	2	; case 90
 15217  066A  1903               	skipnz
 15218  066B  2E18               	goto	l1312
 15219  066C  2E28               	goto	l5794
 15220  066D  0008               	return
 15221  066E                     __end_of_DATA_PROCESS:	
 15222                           
 15223                           	psect	text98
 15224  151D                     __ptext98:	
 15225 ;; *************** function _CHECK_DIR *****************
 15226 ;; Defined at:
 15227 ;;		line 411 in file "main.c"
 15228 ;; Parameters:    Size  Location     Type
 15229 ;;		None
 15230 ;; Auto vars:     Size  Location     Type
 15231 ;;		None
 15232 ;; Return value:  Size  Location     Type
 15233 ;;                  1    wreg      void 
 15234 ;; Registers used:
 15235 ;;		wreg, status,2, status,0
 15236 ;; Tracked objects:
 15237 ;;		On entry : 0/0
 15238 ;;		On exit  : 0/0
 15239 ;;		Unchanged: 0/0
 15240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15241 ;;      Params:         0       0       0       0       0       0       0       0
 15242 ;;      Locals:         0       0       0       0       0       0       0       0
 15243 ;;      Temps:          0       2       0       0       0       0       0       0
 15244 ;;      Totals:         0       2       0       0       0       0       0       0
 15245 ;;Total ram usage:        2 bytes
 15246 ;; Hardware stack levels used:    1
 15247 ;; Hardware stack levels required when called:    4
 15248 ;; This function calls:
 15249 ;;		Nothing
 15250 ;; This function is called by:
 15251 ;;		_DATA_PROCESS
 15252 ;; This function uses a non-reentrant model
 15253 ;;
 15254                           
 15255                           
 15256                           ;psect for function _CHECK_DIR
 15257  151D                     _CHECK_DIR:	
 15258                           
 15259                           ;main.c: 413:     if(rc_level.level >= triac_level.level)
 15260                           
 15261                           ;incstack = 0
 15262                           ; Regs used in _CHECK_DIR: [wreg+status,2+status,0]
 15263  151D  0020               	movlb	0	; select bank0
 15264  151E  085F               	movf	_triac_level,w
 15265  151F  390F               	andlw	15
 15266  1520  00A0               	movwf	??_CHECK_DIR
 15267  1521  0021               	movlb	1	; select bank1
 15268  1522  083A               	movf	_rc_level^(0+128),w
 15269  1523  390F               	andlw	15
 15270  1524  0020               	movlb	0	; select bank0
 15271  1525  00A1               	movwf	??_CHECK_DIR+1
 15272  1526  0820               	movf	??_CHECK_DIR,w
 15273  1527  0221               	subwf	??_CHECK_DIR+1,w
 15274  1528  1C03               	skipc
 15275  1529  2D30               	goto	l5348
 15276                           
 15277                           ;main.c: 414:     {;main.c: 415:         turn_up= 1;
 15278  152A  01E7               	clrf	_turn_up
 15279  152B  0AE7               	incf	_turn_up,f
 15280                           
 15281                           ;main.c: 416:         turn_down = 0;
 15282  152C  01E6               	clrf	_turn_down
 15283                           
 15284                           ;main.c: 417:         turn_on = 0;
 15285  152D  01E8               	clrf	_turn_on
 15286                           
 15287                           ;main.c: 418:         turn_off = 0;
 15288  152E  01E9               	clrf	_turn_off
 15289                           
 15290                           ;main.c: 419:     }
 15291  152F  0008               	return
 15292  1530                     l5348:	
 15293                           
 15294                           ;main.c: 421:     {;main.c: 422:         turn_up = 0;
 15295  1530  01E7               	clrf	_turn_up
 15296                           
 15297                           ;main.c: 423:         turn_down = 1;
 15298  1531  01E6               	clrf	_turn_down
 15299  1532  0AE6               	incf	_turn_down,f
 15300                           
 15301                           ;main.c: 424:         turn_on = 0;
 15302  1533  01E8               	clrf	_turn_on
 15303                           
 15304                           ;main.c: 425:         turn_off = 0;
 15305  1534  01E9               	clrf	_turn_off
 15306  1535  0008               	return
 15307  1536                     __end_of_CHECK_DIR:	
 15308                           
 15309                           	psect	text99
 15310  127B                     __ptext99:	
 15311 ;; *************** function _ALL_ON *****************
 15312 ;; Defined at:
 15313 ;;		line 30 in file "./LED.h"
 15314 ;; Parameters:    Size  Location     Type
 15315 ;;		None
 15316 ;; Auto vars:     Size  Location     Type
 15317 ;;		None
 15318 ;; Return value:  Size  Location     Type
 15319 ;;                  1    wreg      void 
 15320 ;; Registers used:
 15321 ;;		None
 15322 ;; Tracked objects:
 15323 ;;		On entry : 0/0
 15324 ;;		On exit  : 0/0
 15325 ;;		Unchanged: 0/0
 15326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15327 ;;      Params:         0       0       0       0       0       0       0       0
 15328 ;;      Locals:         0       0       0       0       0       0       0       0
 15329 ;;      Temps:          0       0       0       0       0       0       0       0
 15330 ;;      Totals:         0       0       0       0       0       0       0       0
 15331 ;;Total ram usage:        0 bytes
 15332 ;; Hardware stack levels used:    1
 15333 ;; Hardware stack levels required when called:    4
 15334 ;; This function calls:
 15335 ;;		Nothing
 15336 ;; This function is called by:
 15337 ;;		_main
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           
 15342                           ;psect for function _ALL_ON
 15343  127B                     _ALL_ON:	
 15344                           
 15345                           ;incstack = 0
 15346                           ; Regs used in _ALL_ON: []
 15347                           ;./LED.h: 32:     do { LATCbits.LATC6 = 1; } while(0);
 15348  127B  0022               	movlb	2	; select bank2
 15349  127C  170E               	bsf	14,6	;volatile
 15350                           
 15351                           ;./LED.h: 33:     do { LATAbits.LATA4 = 0; } while(0);
 15352  127D  120C               	bcf	12,4	;volatile
 15353                           
 15354                           ;./LED.h: 34:     do { LATAbits.LATA5 = 1; } while(0);
 15355  127E  168C               	bsf	12,5	;volatile
 15356  127F  0008               	return
 15357  1280                     __end_of_ALL_ON:	
 15358                           
 15359                           	psect	text100
 15360  1257                     __ptext100:	
 15361 ;; *************** function _ALL_OFF *****************
 15362 ;; Defined at:
 15363 ;;		line 36 in file "./LED.h"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;		None
 15366 ;; Auto vars:     Size  Location     Type
 15367 ;;		None
 15368 ;; Return value:  Size  Location     Type
 15369 ;;                  1    wreg      void 
 15370 ;; Registers used:
 15371 ;;		status,2, status,0, pclath, cstack
 15372 ;; Tracked objects:
 15373 ;;		On entry : 0/0
 15374 ;;		On exit  : 0/0
 15375 ;;		Unchanged: 0/0
 15376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15377 ;;      Params:         0       0       0       0       0       0       0       0
 15378 ;;      Locals:         0       0       0       0       0       0       0       0
 15379 ;;      Temps:          0       0       0       0       0       0       0       0
 15380 ;;      Totals:         0       0       0       0       0       0       0       0
 15381 ;;Total ram usage:        0 bytes
 15382 ;; Hardware stack levels used:    1
 15383 ;; Hardware stack levels required when called:    6
 15384 ;; This function calls:
 15385 ;;		_LED_OFF
 15386 ;; This function is called by:
 15387 ;;		_main
 15388 ;; This function uses a non-reentrant model
 15389 ;;
 15390                           
 15391                           
 15392                           ;psect for function _ALL_OFF
 15393  1257                     _ALL_OFF:	
 15394                           
 15395                           ;./LED.h: 38:     LED_OFF();
 15396                           
 15397                           ;incstack = 0
 15398                           ; Regs used in _ALL_OFF: [status,2+status,0+pclath+cstack]
 15399  1257  3192  22A3         	fcall	_LED_OFF
 15400  1259  0008               	return
 15401  125A                     __end_of_ALL_OFF:	
 15402                           
 15403                           	psect	text101
 15404  12A3                     __ptext101:	
 15405 ;; *************** function _LED_OFF *****************
 15406 ;; Defined at:
 15407 ;;		line 24 in file "./LED.h"
 15408 ;; Parameters:    Size  Location     Type
 15409 ;;		None
 15410 ;; Auto vars:     Size  Location     Type
 15411 ;;		None
 15412 ;; Return value:  Size  Location     Type
 15413 ;;                  1    wreg      void 
 15414 ;; Registers used:
 15415 ;;		status,2, status,0, pclath, cstack
 15416 ;; Tracked objects:
 15417 ;;		On entry : 0/0
 15418 ;;		On exit  : 0/0
 15419 ;;		Unchanged: 0/0
 15420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15421 ;;      Params:         0       0       0       0       0       0       0       0
 15422 ;;      Locals:         0       0       0       0       0       0       0       0
 15423 ;;      Temps:          0       0       0       0       0       0       0       0
 15424 ;;      Totals:         0       0       0       0       0       0       0       0
 15425 ;;Total ram usage:        0 bytes
 15426 ;; Hardware stack levels used:    1
 15427 ;; Hardware stack levels required when called:    5
 15428 ;; This function calls:
 15429 ;;		_LED_DOWN_OFF
 15430 ;;		_LED_UP_OFF
 15431 ;; This function is called by:
 15432 ;;		_ALL_OFF
 15433 ;;		_main
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437                           
 15438                           ;psect for function _LED_OFF
 15439  12A3                     _LED_OFF:	
 15440                           
 15441                           ;incstack = 0
 15442                           ; Regs used in _LED_OFF: [status,2+status,0+pclath+cstack]
 15443                           ;./LED.h: 26:     do { LATAbits.LATA4 = 1; } while(0);
 15444  12A3  0022               	movlb	2	; select bank2
 15445  12A4  160C               	bsf	12,4	;volatile
 15446                           
 15447                           ;./LED.h: 27:     LED_UP_OFF();
 15448  12A5  3192  2254  3192   	fcall	_LED_UP_OFF
 15449                           
 15450                           ;./LED.h: 28:     LED_DOWN_OFF();
 15451  12A8  3192  2251         	fcall	_LED_DOWN_OFF
 15452  12AA  0008               	return
 15453  12AB                     __end_of_LED_OFF:	
 15454                           
 15455                           	psect	text102
 15456  1254                     __ptext102:	
 15457 ;; *************** function _LED_UP_OFF *****************
 15458 ;; Defined at:
 15459 ;;		line 12 in file "./LED.h"
 15460 ;; Parameters:    Size  Location     Type
 15461 ;;		None
 15462 ;; Auto vars:     Size  Location     Type
 15463 ;;		None
 15464 ;; Return value:  Size  Location     Type
 15465 ;;                  1    wreg      void 
 15466 ;; Registers used:
 15467 ;;		None
 15468 ;; Tracked objects:
 15469 ;;		On entry : 0/0
 15470 ;;		On exit  : 0/0
 15471 ;;		Unchanged: 0/0
 15472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15473 ;;      Params:         0       0       0       0       0       0       0       0
 15474 ;;      Locals:         0       0       0       0       0       0       0       0
 15475 ;;      Temps:          0       0       0       0       0       0       0       0
 15476 ;;      Totals:         0       0       0       0       0       0       0       0
 15477 ;;Total ram usage:        0 bytes
 15478 ;; Hardware stack levels used:    1
 15479 ;; Hardware stack levels required when called:    4
 15480 ;; This function calls:
 15481 ;;		Nothing
 15482 ;; This function is called by:
 15483 ;;		_LED_OFF
 15484 ;;		_LED_RUN
 15485 ;;		_myButtonReleasedCallback
 15486 ;; This function uses a non-reentrant model
 15487 ;;
 15488                           
 15489                           
 15490                           ;psect for function _LED_UP_OFF
 15491  1254                     _LED_UP_OFF:	
 15492                           
 15493                           ;incstack = 0
 15494                           ; Regs used in _LED_UP_OFF: []
 15495                           ;./LED.h: 14:     do { LATCbits.LATC6 = 0; } while(0);
 15496  1254  0022               	movlb	2	; select bank2
 15497  1255  130E               	bcf	14,6	;volatile
 15498  1256  0008               	return
 15499  1257                     __end_of_LED_UP_OFF:	
 15500                           
 15501                           	psect	text103
 15502  1251                     __ptext103:	
 15503 ;; *************** function _LED_DOWN_OFF *****************
 15504 ;; Defined at:
 15505 ;;		line 16 in file "./LED.h"
 15506 ;; Parameters:    Size  Location     Type
 15507 ;;		None
 15508 ;; Auto vars:     Size  Location     Type
 15509 ;;		None
 15510 ;; Return value:  Size  Location     Type
 15511 ;;                  1    wreg      void 
 15512 ;; Registers used:
 15513 ;;		None
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15519 ;;      Params:         0       0       0       0       0       0       0       0
 15520 ;;      Locals:         0       0       0       0       0       0       0       0
 15521 ;;      Temps:          0       0       0       0       0       0       0       0
 15522 ;;      Totals:         0       0       0       0       0       0       0       0
 15523 ;;Total ram usage:        0 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    4
 15526 ;; This function calls:
 15527 ;;		Nothing
 15528 ;; This function is called by:
 15529 ;;		_LED_OFF
 15530 ;;		_LED_RUN
 15531 ;;		_myButtonReleasedCallback
 15532 ;; This function uses a non-reentrant model
 15533 ;;
 15534                           
 15535                           
 15536                           ;psect for function _LED_DOWN_OFF
 15537  1251                     _LED_DOWN_OFF:	
 15538                           
 15539                           ;incstack = 0
 15540                           ; Regs used in _LED_DOWN_OFF: []
 15541                           ;./LED.h: 18:     do { LATAbits.LATA5 = 0; } while(0);
 15542  1251  0022               	movlb	2	; select bank2
 15543  1252  128C               	bcf	12,5	;volatile
 15544  1253  0008               	return
 15545  1254                     __end_of_LED_DOWN_OFF:	
 15546                           
 15547                           	psect	intentry
 15548  0004                     __pintentry:	
 15549 ;; *************** function _INTERRUPT_InterruptManager *****************
 15550 ;; Defined at:
 15551 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 15552 ;; Parameters:    Size  Location     Type
 15553 ;;		None
 15554 ;; Auto vars:     Size  Location     Type
 15555 ;;		None
 15556 ;; Return value:  Size  Location     Type
 15557 ;;                  1    wreg      void 
 15558 ;; Registers used:
 15559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15560 ;; Tracked objects:
 15561 ;;		On entry : 0/0
 15562 ;;		On exit  : 0/0
 15563 ;;		Unchanged: 0/0
 15564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15565 ;;      Params:         0       0       0       0       0       0       0       0
 15566 ;;      Locals:         0       0       0       0       0       0       0       0
 15567 ;;      Temps:          0       0       0       0       0       0       0       0
 15568 ;;      Totals:         0       0       0       0       0       0       0       0
 15569 ;;Total ram usage:        0 bytes
 15570 ;; Hardware stack levels used:    1
 15571 ;; Hardware stack levels required when called:    3
 15572 ;; This function calls:
 15573 ;;		Absolute function
 15574 ;;		_EUSART_Receive_ISR
 15575 ;;		_INT_ISR
 15576 ;;		_TMR0_ISR
 15577 ;; This function is called by:
 15578 ;;		Interrupt level 1
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582  0004                     _INTERRUPT_InterruptManager:	
 15583                           
 15584                           ;incstack = 0
 15585  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15586                           
 15587                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15588  0005  3180               	pagesel	$
 15589                           
 15590                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 15591  0006  1A8B               	btfsc	11,5	;volatile
 15592  0007  1D0B               	btfss	11,2	;volatile
 15593  0008  280D               	goto	i1l889
 15594                           
 15595                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 15596  0009  3189  2140  3180   	fcall	_TMR0_ISR
 15597                           
 15598                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 15599  000C  2822               	goto	i1l897
 15600  000D                     i1l889:	
 15601                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.INTE == 1 && INTCON
      +                          bits.INTF == 1)
 15602                           
 15603  000D  1A0B               	btfsc	11,4	;volatile
 15604  000E  1C8B               	btfss	11,1	;volatile
 15605  000F  2814               	goto	i1l891
 15606                           
 15607                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         INT_ISR();
 15608  0010  3192  2273  3180   	fcall	_INT_ISR
 15609                           
 15610                           ;mcc_generated_files/interrupt_manager.c: 62:     }
 15611  0013  2822               	goto	i1l897
 15612  0014                     i1l891:	
 15613                           ;mcc_generated_files/interrupt_manager.c: 63:     else if(INTCONbits.PEIE == 1)
 15614                           
 15615  0014  1F0B               	btfss	11,6	;volatile
 15616  0015  2822               	goto	i1l897
 15617                           
 15618                           ;mcc_generated_files/interrupt_manager.c: 64:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 65:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 15619  0016  0021               	movlb	1	; select bank1
 15620  0017  1E91               	btfss	17,5	;volatile
 15621  0018  2822               	goto	i1l897
 15622  0019  0020               	movlb	0	; select bank0
 15623  001A  1E91               	btfss	17,5	;volatile
 15624  001B  2822               	goto	i1l897
 15625                           
 15626                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 15627  001C  0021               	movlb	1	; select bank1
 15628  001D  085B               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 15629  001E  008A               	movwf	10
 15630  001F  085A               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 15631  0020  000A               	callw
 15632  0021  3180               	pagesel	$
 15633  0022                     i1l897:	
 15634                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 15635                           
 15636  0022  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15637  0023  0009               	retfie
 15638  0024                     __end_of_INTERRUPT_InterruptManager:	
 15639                           
 15640                           	psect	text105
 15641  0940                     __ptext105:	
 15642 ;; *************** function _TMR0_ISR *****************
 15643 ;; Defined at:
 15644 ;;		line 110 in file "mcc_generated_files/tmr0.c"
 15645 ;; Parameters:    Size  Location     Type
 15646 ;;		None
 15647 ;; Auto vars:     Size  Location     Type
 15648 ;;		None
 15649 ;; Return value:  Size  Location     Type
 15650 ;;                  1    wreg      void 
 15651 ;; Registers used:
 15652 ;;		wreg, status,2, status,0, pclath, cstack
 15653 ;; Tracked objects:
 15654 ;;		On entry : 0/0
 15655 ;;		On exit  : 0/0
 15656 ;;		Unchanged: 0/0
 15657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15658 ;;      Params:         0       0       0       0       0       0       0       0
 15659 ;;      Locals:         0       0       0       0       0       0       0       0
 15660 ;;      Temps:          6       0       0       0       0       0       0       0
 15661 ;;      Totals:         6       0       0       0       0       0       0       0
 15662 ;;Total ram usage:        6 bytes
 15663 ;; Hardware stack levels used:    1
 15664 ;; Hardware stack levels required when called:    2
 15665 ;; This function calls:
 15666 ;;		Absolute function
 15667 ;;		_TMR0_CallBack
 15668 ;;		_TMR0_DefaultInterruptHandler
 15669 ;; This function is called by:
 15670 ;;		_INTERRUPT_InterruptManager
 15671 ;; This function uses a non-reentrant model
 15672 ;;
 15673                           
 15674                           
 15675                           ;psect for function _TMR0_ISR
 15676  0940                     _TMR0_ISR:	
 15677                           
 15678                           ;mcc_generated_files/tmr0.c: 114:     INTCONbits.TMR0IF = 0;
 15679                           
 15680                           ;incstack = 0
 15681                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 15682  0940  110B               	bcf	11,2	;volatile
 15683                           
 15684                           ;mcc_generated_files/tmr0.c: 116:     TMR0 = timer0ReloadVal;
 15685  0941  0021               	movlb	1	; select bank1
 15686  0942  085C               	movf	_timer0ReloadVal^(0+128),w	;volatile
 15687  0943  0020               	movlb	0	; select bank0
 15688  0944  0095               	movwf	21	;volatile
 15689                           
 15690                           ;mcc_generated_files/tmr0.c: 120:     static uint8_t tick_count = 0;;mcc_generated_files
      +                          /tmr0.c: 121:     if(triac_level_now.level == 0)
 15691  0945  0021               	movlb	1	; select bank1
 15692  0946  083C               	movf	_triac_level_now^(0+128),w
 15693  0947  390F               	andlw	15
 15694  0948  3A00               	xorlw	0
 15695  0949  1D03               	skipz
 15696  094A  2963               	goto	i1l5470
 15697                           
 15698                           ;mcc_generated_files/tmr0.c: 122:     {;mcc_generated_files/tmr0.c: 123:         tick_co
      +                          unt = 0;
 15699  094B  01C6               	clrf	TMR0_ISR@tick_count^(0+128)
 15700                           
 15701                           ;mcc_generated_files/tmr0.c: 124:         INTCONbits.TMR0IE = 0;
 15702  094C  128B               	bcf	11,5	;volatile
 15703  094D  0022               	movlb	2	; select bank2
 15704  094E  118E               	bcf	14,3	;volatile
 15705                           
 15706                           ;mcc_generated_files/tmr0.c: 126:         triac_level_now.level = triac_level.level;
 15707  094F  0020               	movlb	0	; select bank0
 15708  0950  085F               	movf	_triac_level,w
 15709  0951  390F               	andlw	15
 15710  0952  00F8               	movwf	??_TMR0_ISR
 15711  0953  0021               	movlb	1	; select bank1
 15712  0954  083C               	movf	_triac_level_now^(0+128),w
 15713  0955  0678               	xorwf	??_TMR0_ISR,w
 15714  0956  39F0               	andlw	-16
 15715  0957  0678               	xorwf	??_TMR0_ISR,w
 15716  0958  00BC               	movwf	_triac_level_now^(0+128)
 15717                           
 15718                           ;mcc_generated_files/tmr0.c: 127:         if(TMR0_InterruptHandler)
 15719  0959  0850               	movf	_TMR0_InterruptHandler^(0+128),w
 15720  095A  0451               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 15721  095B  1903               	btfsc	3,2
 15722  095C  0008               	return
 15723                           
 15724                           ;mcc_generated_files/tmr0.c: 128:         {;mcc_generated_files/tmr0.c: 129:            
      +                           TMR0_InterruptHandler();
 15725  095D  0851               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 15726  095E  008A               	movwf	10
 15727  095F  0850               	movf	_TMR0_InterruptHandler^(0+128),w
 15728  0960  000A               	callw
 15729  0961  3189               	pagesel	$
 15730  0962  0008               	return
 15731  0963                     i1l5470:	
 15732  0963  083C               	movf	_triac_level_now^(0+128),w
 15733  0964  390F               	andlw	15
 15734  0965  00F8               	movwf	??_TMR0_ISR
 15735  0966  3000               	movlw	0
 15736  0967  00FA               	movwf	??_TMR0_ISR+2
 15737  0968  0878               	movf	??_TMR0_ISR,w
 15738  0969  3C0F               	sublw	15
 15739  096A  00F9               	movwf	??_TMR0_ISR+1
 15740  096B  1C03               	skipc
 15741  096C  03FA               	decf	??_TMR0_ISR+2,f
 15742  096D  3001               	movlw	1
 15743  096E  00FB               	movwf	??_TMR0_ISR+3
 15744  096F  087B               	movf	??_TMR0_ISR+3,w
 15745  0970  07C6               	addwf	TMR0_ISR@tick_count^(0+128),f
 15746  0971  0846               	movf	TMR0_ISR@tick_count^(0+128),w
 15747  0972  00FC               	movwf	??_TMR0_ISR+4
 15748  0973  01FD               	clrf	??_TMR0_ISR+5
 15749  0974  087A               	movf	??_TMR0_ISR+2,w
 15750  0975  067D               	xorwf	??_TMR0_ISR+5,w
 15751  0976  1D03               	skipz
 15752  0977  297A               	goto	u428_25
 15753  0978  0879               	movf	??_TMR0_ISR+1,w
 15754  0979  067C               	xorwf	??_TMR0_ISR+4,w
 15755  097A                     u428_25:	
 15756  097A  1D03               	skipz
 15757  097B  0008               	return
 15758                           
 15759                           ;mcc_generated_files/tmr0.c: 133:     {;mcc_generated_files/tmr0.c: 134:         tick_co
      +                          unt = 0;
 15760  097C  01C6               	clrf	TMR0_ISR@tick_count^(0+128)
 15761                           
 15762                           ;mcc_generated_files/tmr0.c: 135:         TMR0_CallBack();
 15763  097D  3195  25D5         	fcall	_TMR0_CallBack
 15764  097F  0008               	return
 15765  0980                     __end_of_TMR0_ISR:	
 15766                           
 15767                           	psect	text106
 15768  15D5                     __ptext106:	
 15769 ;; *************** function _TMR0_CallBack *****************
 15770 ;; Defined at:
 15771 ;;		line 140 in file "mcc_generated_files/tmr0.c"
 15772 ;; Parameters:    Size  Location     Type
 15773 ;;		None
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;		None
 15776 ;; Return value:  Size  Location     Type
 15777 ;;                  1    wreg      void 
 15778 ;; Registers used:
 15779 ;;		wreg, status,2, status,0, pclath, cstack
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15785 ;;      Params:         0       0       0       0       0       0       0       0
 15786 ;;      Locals:         0       0       0       0       0       0       0       0
 15787 ;;      Temps:          1       0       0       0       0       0       0       0
 15788 ;;      Totals:         1       0       0       0       0       0       0       0
 15789 ;;Total ram usage:        1 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    1
 15792 ;; This function calls:
 15793 ;;		Absolute function
 15794 ;;		_TMR0_DefaultInterruptHandler
 15795 ;; This function is called by:
 15796 ;;		_TMR0_ISR
 15797 ;; This function uses a non-reentrant model
 15798 ;;
 15799                           
 15800                           
 15801                           ;psect for function _TMR0_CallBack
 15802  15D5                     _TMR0_CallBack:	
 15803                           
 15804                           ;mcc_generated_files/tmr0.c: 143:     INTCONbits.TMR0IE = 0;
 15805                           
 15806                           ;incstack = 0
 15807                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15808  15D5  128B               	bcf	11,5	;volatile
 15809                           
 15810                           ;mcc_generated_files/tmr0.c: 144:     do { LATCbits.LATC3 = 1; } while(0);
 15811  15D6  0022               	movlb	2	; select bank2
 15812  15D7  158E               	bsf	14,3	;volatile
 15813                           
 15814                           ;mcc_generated_files/tmr0.c: 145:     _delay((unsigned long)((100)*(32000000/4000000.0))
      +                          );
 15815  15D8  30A0               	movlw	160
 15816  15D9                     u722_27:	
 15817  15D9  3200               	nop2
 15818  15DA  0B89               	decfsz	9,f
 15819  15DB  2DD9               	goto	u722_27
 15820  15DC  0022               	movlb	2	; select bank2
 15821  15DD  118E               	bcf	14,3	;volatile
 15822                           
 15823                           ;mcc_generated_files/tmr0.c: 147:     triac_level_now.level = triac_level.level;
 15824  15DE  0020               	movlb	0	; select bank0
 15825  15DF  085F               	movf	_triac_level,w
 15826  15E0  390F               	andlw	15
 15827  15E1  00F7               	movwf	??_TMR0_CallBack
 15828  15E2  0021               	movlb	1	; select bank1
 15829  15E3  083C               	movf	_triac_level_now^(0+128),w
 15830  15E4  0677               	xorwf	??_TMR0_CallBack,w
 15831  15E5  39F0               	andlw	-16
 15832  15E6  0677               	xorwf	??_TMR0_CallBack,w
 15833  15E7  00BC               	movwf	_triac_level_now^(0+128)
 15834                           
 15835                           ;mcc_generated_files/tmr0.c: 148:     if(TMR0_InterruptHandler)
 15836  15E8  0850               	movf	_TMR0_InterruptHandler^(0+128),w
 15837  15E9  0451               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 15838  15EA  1903               	btfsc	3,2
 15839  15EB  0008               	return
 15840                           
 15841                           ;mcc_generated_files/tmr0.c: 149:     {;mcc_generated_files/tmr0.c: 150:         TMR0_In
      +                          terruptHandler();
 15842  15EC  0851               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 15843  15ED  008A               	movwf	10
 15844  15EE  0850               	movf	_TMR0_InterruptHandler^(0+128),w
 15845  15EF  000A               	callw
 15846  15F0  3195               	pagesel	$
 15847  15F1  0008               	return
 15848  15F2                     __end_of_TMR0_CallBack:	
 15849                           
 15850                           	psect	text107
 15851  124B                     __ptext107:	
 15852 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 15853 ;; Defined at:
 15854 ;;		line 158 in file "mcc_generated_files/tmr0.c"
 15855 ;; Parameters:    Size  Location     Type
 15856 ;;		None
 15857 ;; Auto vars:     Size  Location     Type
 15858 ;;		None
 15859 ;; Return value:  Size  Location     Type
 15860 ;;                  1    wreg      void 
 15861 ;; Registers used:
 15862 ;;		None
 15863 ;; Tracked objects:
 15864 ;;		On entry : 0/0
 15865 ;;		On exit  : 0/0
 15866 ;;		Unchanged: 0/0
 15867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15868 ;;      Params:         0       0       0       0       0       0       0       0
 15869 ;;      Locals:         0       0       0       0       0       0       0       0
 15870 ;;      Temps:          0       0       0       0       0       0       0       0
 15871 ;;      Totals:         0       0       0       0       0       0       0       0
 15872 ;;Total ram usage:        0 bytes
 15873 ;; Hardware stack levels used:    1
 15874 ;; This function calls:
 15875 ;;		Nothing
 15876 ;; This function is called by:
 15877 ;;		_TMR0_Initialize
 15878 ;;		_TMR0_CallBack
 15879 ;;		_TMR0_ISR
 15880 ;; This function uses a non-reentrant model
 15881 ;;
 15882                           
 15883                           
 15884                           ;psect for function _TMR0_DefaultInterruptHandler
 15885  124B                     _TMR0_DefaultInterruptHandler:	
 15886                           
 15887                           ;incstack = 0
 15888                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 15889  124B  0008               	return
 15890  124C                     __end_of_TMR0_DefaultInterruptHandler:	
 15891                           
 15892                           	psect	text108
 15893  1273                     __ptext108:	
 15894 ;; *************** function _INT_ISR *****************
 15895 ;; Defined at:
 15896 ;;		line 39 in file "mcc_generated_files/ext_int.c"
 15897 ;; Parameters:    Size  Location     Type
 15898 ;;		None
 15899 ;; Auto vars:     Size  Location     Type
 15900 ;;		None
 15901 ;; Return value:  Size  Location     Type
 15902 ;;                  1    wreg      void 
 15903 ;; Registers used:
 15904 ;;		wreg, status,2, status,0, pclath, cstack
 15905 ;; Tracked objects:
 15906 ;;		On entry : 0/0
 15907 ;;		On exit  : 0/0
 15908 ;;		Unchanged: 0/0
 15909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15910 ;;      Params:         0       0       0       0       0       0       0       0
 15911 ;;      Locals:         0       0       0       0       0       0       0       0
 15912 ;;      Temps:          0       0       0       0       0       0       0       0
 15913 ;;      Totals:         0       0       0       0       0       0       0       0
 15914 ;;Total ram usage:        0 bytes
 15915 ;; Hardware stack levels used:    1
 15916 ;; Hardware stack levels required when called:    2
 15917 ;; This function calls:
 15918 ;;		_INT_CallBack
 15919 ;; This function is called by:
 15920 ;;		_INTERRUPT_InterruptManager
 15921 ;; This function uses a non-reentrant model
 15922 ;;
 15923                           
 15924                           
 15925                           ;psect for function _INT_ISR
 15926  1273                     _INT_ISR:	
 15927                           
 15928                           ;mcc_generated_files/ext_int.c: 41:     (INTCONbits.INTF = 0);
 15929                           
 15930                           ;incstack = 0
 15931                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 15932  1273  108B               	bcf	11,1	;volatile
 15933                           
 15934                           ;mcc_generated_files/ext_int.c: 44:     INT_CallBack();
 15935  1274  3193  2398         	fcall	_INT_CallBack
 15936  1276  0008               	return
 15937  1277                     __end_of_INT_ISR:	
 15938                           
 15939                           	psect	text109
 15940  1398                     __ptext109:	
 15941 ;; *************** function _INT_CallBack *****************
 15942 ;; Defined at:
 15943 ;;		line 48 in file "mcc_generated_files/ext_int.c"
 15944 ;; Parameters:    Size  Location     Type
 15945 ;;		None
 15946 ;; Auto vars:     Size  Location     Type
 15947 ;;		None
 15948 ;; Return value:  Size  Location     Type
 15949 ;;                  1    wreg      void 
 15950 ;; Registers used:
 15951 ;;		wreg, status,2, status,0, pclath, cstack
 15952 ;; Tracked objects:
 15953 ;;		On entry : 0/0
 15954 ;;		On exit  : 0/0
 15955 ;;		Unchanged: 0/0
 15956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15957 ;;      Params:         0       0       0       0       0       0       0       0
 15958 ;;      Locals:         0       0       0       0       0       0       0       0
 15959 ;;      Temps:          0       0       0       0       0       0       0       0
 15960 ;;      Totals:         0       0       0       0       0       0       0       0
 15961 ;;Total ram usage:        0 bytes
 15962 ;; Hardware stack levels used:    1
 15963 ;; Hardware stack levels required when called:    1
 15964 ;; This function calls:
 15965 ;;		Absolute function
 15966 ;;		_INT_DefaultInterruptHandler
 15967 ;; This function is called by:
 15968 ;;		_INT_ISR
 15969 ;; This function uses a non-reentrant model
 15970 ;;
 15971                           
 15972                           
 15973                           ;psect for function _INT_CallBack
 15974  1398                     _INT_CallBack:	
 15975                           
 15976                           ;mcc_generated_files/ext_int.c: 60:     TMR0 = 0xF0;
 15977                           
 15978                           ;incstack = 0
 15979                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15980  1398  30F0               	movlw	240
 15981  1399  0020               	movlb	0	; select bank0
 15982  139A  0095               	movwf	21	;volatile
 15983                           
 15984                           ;mcc_generated_files/ext_int.c: 61:     INTCONbits.TMR0IF = 0;
 15985  139B  110B               	bcf	11,2	;volatile
 15986                           
 15987                           ;mcc_generated_files/ext_int.c: 62:     INTCONbits.TMR0IE = 1;
 15988  139C  168B               	bsf	11,5	;volatile
 15989                           
 15990                           ;mcc_generated_files/ext_int.c: 63:     if(INT_InterruptHandler)
 15991  139D  0021               	movlb	1	; select bank1
 15992  139E  0852               	movf	_INT_InterruptHandler^(0+128),w
 15993  139F  0453               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 15994  13A0  1903               	btfsc	3,2
 15995  13A1  0008               	return
 15996                           
 15997                           ;mcc_generated_files/ext_int.c: 64:     {;mcc_generated_files/ext_int.c: 65:         INT
      +                          _InterruptHandler();
 15998  13A2  0853               	movf	(_INT_InterruptHandler+1)^(0+128),w
 15999  13A3  008A               	movwf	10
 16000  13A4  0852               	movf	_INT_InterruptHandler^(0+128),w
 16001  13A5  000A               	callw
 16002  13A6  3193               	pagesel	$
 16003  13A7  0008               	return
 16004  13A8                     __end_of_INT_CallBack:	
 16005                           
 16006                           	psect	text110
 16007  124A                     __ptext110:	
 16008 ;; *************** function _INT_DefaultInterruptHandler *****************
 16009 ;; Defined at:
 16010 ;;		line 73 in file "mcc_generated_files/ext_int.c"
 16011 ;; Parameters:    Size  Location     Type
 16012 ;;		None
 16013 ;; Auto vars:     Size  Location     Type
 16014 ;;		None
 16015 ;; Return value:  Size  Location     Type
 16016 ;;                  1    wreg      void 
 16017 ;; Registers used:
 16018 ;;		None
 16019 ;; Tracked objects:
 16020 ;;		On entry : 0/0
 16021 ;;		On exit  : 0/0
 16022 ;;		Unchanged: 0/0
 16023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16024 ;;      Params:         0       0       0       0       0       0       0       0
 16025 ;;      Locals:         0       0       0       0       0       0       0       0
 16026 ;;      Temps:          0       0       0       0       0       0       0       0
 16027 ;;      Totals:         0       0       0       0       0       0       0       0
 16028 ;;Total ram usage:        0 bytes
 16029 ;; Hardware stack levels used:    1
 16030 ;; This function calls:
 16031 ;;		Nothing
 16032 ;; This function is called by:
 16033 ;;		_EXT_INT_Initialize
 16034 ;;		_INT_CallBack
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           
 16039                           ;psect for function _INT_DefaultInterruptHandler
 16040  124A                     _INT_DefaultInterruptHandler:	
 16041                           
 16042                           ;incstack = 0
 16043                           ; Regs used in _INT_DefaultInterruptHandler: []
 16044  124A  0008               	return
 16045  124B                     __end_of_INT_DefaultInterruptHandler:	
 16046                           
 16047                           	psect	text111
 16048  0822                     __ptext111:	
 16049 ;; *************** function _EUSART_Receive_ISR *****************
 16050 ;; Defined at:
 16051 ;;		line 180 in file "mcc_generated_files/eusart.c"
 16052 ;; Parameters:    Size  Location     Type
 16053 ;;		None
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;		None
 16056 ;; Return value:  Size  Location     Type
 16057 ;;                  1    wreg      void 
 16058 ;; Registers used:
 16059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16060 ;; Tracked objects:
 16061 ;;		On entry : 0/0
 16062 ;;		On exit  : 0/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16065 ;;      Params:         0       0       0       0       0       0       0       0
 16066 ;;      Locals:         0       0       0       0       0       0       0       0
 16067 ;;      Temps:          0       0       0       0       0       0       0       0
 16068 ;;      Totals:         0       0       0       0       0       0       0       0
 16069 ;;Total ram usage:        0 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; Hardware stack levels required when called:    2
 16072 ;; This function calls:
 16073 ;;		Absolute function
 16074 ;;		_EUSART_DefaultErrorHandler
 16075 ;;		_EUSART_DefaultFramingErrorHandler
 16076 ;;		_EUSART_DefaultOverrunErrorHandler
 16077 ;;		_EUSART_RxDataHandler
 16078 ;; This function is called by:
 16079 ;;		_EUSART_Initialize
 16080 ;;		_INTERRUPT_InterruptManager
 16081 ;; This function uses a non-reentrant model
 16082 ;;
 16083                           
 16084                           
 16085                           ;psect for function _EUSART_Receive_ISR
 16086  0822                     _EUSART_Receive_ISR:	
 16087                           
 16088                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16089                           
 16090                           ;incstack = 0
 16091                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16092  0822  0020               	movlb	0	; select bank0
 16093  0823  086C               	movf	_eusartRxHead,w	;volatile
 16094  0824  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16095  0825  0086               	movwf	6
 16096  0826  0187               	clrf	7
 16097  0827  0181               	clrf	1
 16098                           
 16099                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 16100  0828  0023               	movlb	3	; select bank3
 16101  0829  1D1D               	btfss	29,2	;volatile
 16102  082A  2837               	goto	i1l5436
 16103                           
 16104                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16105  082B  0020               	movlb	0	; select bank0
 16106  082C  086C               	movf	_eusartRxHead,w	;volatile
 16107  082D  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16108  082E  0086               	movwf	6
 16109  082F  0187               	clrf	7
 16110  0830  1481               	bsf	1,1
 16111                           
 16112                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 16113  0831  0021               	movlb	1	; select bank1
 16114  0832  0859               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 16115  0833  008A               	movwf	10
 16116  0834  0858               	movf	_EUSART_FramingErrorHandler^(0+128),w
 16117  0835  000A               	callw
 16118  0836  3188               	pagesel	$
 16119  0837                     i1l5436:	
 16120                           
 16121                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 16122  0837  0023               	movlb	3	; select bank3
 16123  0838  1C9D               	btfss	29,1	;volatile
 16124  0839  2846               	goto	i1l5442
 16125                           
 16126                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16127  083A  0020               	movlb	0	; select bank0
 16128  083B  086C               	movf	_eusartRxHead,w	;volatile
 16129  083C  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16130  083D  0086               	movwf	6
 16131  083E  0187               	clrf	7
 16132  083F  1501               	bsf	1,2
 16133                           
 16134                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 16135  0840  0021               	movlb	1	; select bank1
 16136  0841  0857               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 16137  0842  008A               	movwf	10
 16138  0843  0856               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 16139  0844  000A               	callw
 16140  0845  3188               	pagesel	$
 16141  0846                     i1l5442:	
 16142                           
 16143                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16144  0846  0020               	movlb	0	; select bank0
 16145  0847  086C               	movf	_eusartRxHead,w	;volatile
 16146  0848  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16147  0849  0086               	movwf	6
 16148  084A  0187               	clrf	7
 16149  084B  0801               	movf	1,w
 16150  084C  1903               	btfsc	3,2
 16151  084D  2855               	goto	i1l5446
 16152                           
 16153                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 16154  084E  0021               	movlb	1	; select bank1
 16155  084F  0855               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 16156  0850  008A               	movwf	10
 16157  0851  0854               	movf	_EUSART_ErrorHandler^(0+128),w
 16158  0852  000A               	callw
 16159  0853  3188               	pagesel	$
 16160                           
 16161                           ;mcc_generated_files/eusart.c: 197:     } else {
 16162  0854  0008               	return
 16163  0855                     i1l5446:	
 16164                           
 16165                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 16166  0855  3194  2490         	fcall	_EUSART_RxDataHandler
 16167  0857  0008               	return
 16168  0858                     __end_of_EUSART_Receive_ISR:	
 16169                           
 16170                           	psect	text112
 16171  126F                     __ptext112:	
 16172 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16173 ;; Defined at:
 16174 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16175 ;; Parameters:    Size  Location     Type
 16176 ;;		None
 16177 ;; Auto vars:     Size  Location     Type
 16178 ;;		None
 16179 ;; Return value:  Size  Location     Type
 16180 ;;                  1    wreg      void 
 16181 ;; Registers used:
 16182 ;;		None
 16183 ;; Tracked objects:
 16184 ;;		On entry : 0/0
 16185 ;;		On exit  : 0/0
 16186 ;;		Unchanged: 0/0
 16187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16188 ;;      Params:         0       0       0       0       0       0       0       0
 16189 ;;      Locals:         0       0       0       0       0       0       0       0
 16190 ;;      Temps:          0       0       0       0       0       0       0       0
 16191 ;;      Totals:         0       0       0       0       0       0       0       0
 16192 ;;Total ram usage:        0 bytes
 16193 ;; Hardware stack levels used:    1
 16194 ;; This function calls:
 16195 ;;		Nothing
 16196 ;; This function is called by:
 16197 ;;		_EUSART_Initialize
 16198 ;;		_EUSART_Receive_ISR
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           
 16203                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16204  126F                     _EUSART_DefaultOverrunErrorHandler:	
 16205                           
 16206                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 16207                           
 16208                           ;incstack = 0
 16209                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16210  126F  0023               	movlb	3	; select bank3
 16211  1270  121D               	bcf	29,4	;volatile
 16212                           
 16213                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 16214  1271  161D               	bsf	29,4	;volatile
 16215  1272  0008               	return
 16216  1273                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 16217                           
 16218                           	psect	text113
 16219  1249                     __ptext113:	
 16220 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16221 ;; Defined at:
 16222 ;;		line 214 in file "mcc_generated_files/eusart.c"
 16223 ;; Parameters:    Size  Location     Type
 16224 ;;		None
 16225 ;; Auto vars:     Size  Location     Type
 16226 ;;		None
 16227 ;; Return value:  Size  Location     Type
 16228 ;;                  1    wreg      void 
 16229 ;; Registers used:
 16230 ;;		None
 16231 ;; Tracked objects:
 16232 ;;		On entry : 0/0
 16233 ;;		On exit  : 0/0
 16234 ;;		Unchanged: 0/0
 16235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16236 ;;      Params:         0       0       0       0       0       0       0       0
 16237 ;;      Locals:         0       0       0       0       0       0       0       0
 16238 ;;      Temps:          0       0       0       0       0       0       0       0
 16239 ;;      Totals:         0       0       0       0       0       0       0       0
 16240 ;;Total ram usage:        0 bytes
 16241 ;; Hardware stack levels used:    1
 16242 ;; This function calls:
 16243 ;;		Nothing
 16244 ;; This function is called by:
 16245 ;;		_EUSART_Initialize
 16246 ;;		_EUSART_Receive_ISR
 16247 ;; This function uses a non-reentrant model
 16248 ;;
 16249                           
 16250                           
 16251                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16252  1249                     _EUSART_DefaultFramingErrorHandler:	
 16253                           
 16254                           ;incstack = 0
 16255                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16256  1249  0008               	return
 16257  124A                     __end_of_EUSART_DefaultFramingErrorHandler:	
 16258                           
 16259                           	psect	text114
 16260  124E                     __ptext114:	
 16261 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16262 ;; Defined at:
 16263 ;;		line 224 in file "mcc_generated_files/eusart.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;		None
 16266 ;; Auto vars:     Size  Location     Type
 16267 ;;		None
 16268 ;; Return value:  Size  Location     Type
 16269 ;;                  1    wreg      void 
 16270 ;; Registers used:
 16271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16272 ;; Tracked objects:
 16273 ;;		On entry : 0/0
 16274 ;;		On exit  : 0/0
 16275 ;;		Unchanged: 0/0
 16276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16277 ;;      Params:         0       0       0       0       0       0       0       0
 16278 ;;      Locals:         0       0       0       0       0       0       0       0
 16279 ;;      Temps:          0       0       0       0       0       0       0       0
 16280 ;;      Totals:         0       0       0       0       0       0       0       0
 16281 ;;Total ram usage:        0 bytes
 16282 ;; Hardware stack levels used:    1
 16283 ;; Hardware stack levels required when called:    1
 16284 ;; This function calls:
 16285 ;;		_EUSART_RxDataHandler
 16286 ;; This function is called by:
 16287 ;;		_EUSART_Initialize
 16288 ;;		_EUSART_Receive_ISR
 16289 ;; This function uses a non-reentrant model
 16290 ;;
 16291                           
 16292                           
 16293                           ;psect for function _EUSART_DefaultErrorHandler
 16294  124E                     _EUSART_DefaultErrorHandler:	
 16295                           
 16296                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 16297                           
 16298                           ;incstack = 0
 16299                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16300  124E  3194  2490         	fcall	_EUSART_RxDataHandler
 16301  1250  0008               	return
 16302  1251                     __end_of_EUSART_DefaultErrorHandler:	
 16303                           
 16304                           	psect	text115
 16305  1490                     __ptext115:	
 16306 ;; *************** function _EUSART_RxDataHandler *****************
 16307 ;; Defined at:
 16308 ;;		line 204 in file "mcc_generated_files/eusart.c"
 16309 ;; Parameters:    Size  Location     Type
 16310 ;;		None
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;		None
 16313 ;; Return value:  Size  Location     Type
 16314 ;;                  1    wreg      void 
 16315 ;; Registers used:
 16316 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16317 ;; Tracked objects:
 16318 ;;		On entry : 0/0
 16319 ;;		On exit  : 0/0
 16320 ;;		Unchanged: 0/0
 16321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16322 ;;      Params:         0       0       0       0       0       0       0       0
 16323 ;;      Locals:         0       0       0       0       0       0       0       0
 16324 ;;      Temps:          1       0       0       0       0       0       0       0
 16325 ;;      Totals:         1       0       0       0       0       0       0       0
 16326 ;;Total ram usage:        1 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; This function calls:
 16329 ;;		Nothing
 16330 ;; This function is called by:
 16331 ;;		_EUSART_Receive_ISR
 16332 ;;		_EUSART_DefaultErrorHandler
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function _EUSART_RxDataHandler
 16338  1490                     _EUSART_RxDataHandler:	
 16339                           
 16340                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16341                           
 16342                           ;incstack = 0
 16343                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16344  1490  0023               	movlb	3	; select bank3
 16345  1491  0819               	movf	25,w	;volatile
 16346  1492  00F7               	movwf	??_EUSART_RxDataHandler
 16347  1493  0020               	movlb	0	; select bank0
 16348  1494  086C               	movf	_eusartRxHead,w
 16349  1495  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 16350  1496  0086               	movwf	6
 16351  1497  0187               	clrf	7
 16352  1498  0877               	movf	??_EUSART_RxDataHandler,w
 16353  1499  0081               	movwf	1
 16354  149A  3001               	movlw	1
 16355  149B  00F7               	movwf	??_EUSART_RxDataHandler
 16356  149C  0877               	movf	??_EUSART_RxDataHandler,w
 16357  149D  07EC               	addwf	_eusartRxHead,f	;volatile
 16358                           
 16359                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16360  149E  3008               	movlw	8
 16361  149F  026C               	subwf	_eusartRxHead,w	;volatile
 16362  14A0  1803               	btfsc	3,0
 16363                           
 16364                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 16365  14A1  01EC               	clrf	_eusartRxHead	;volatile
 16366                           
 16367                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 16368  14A2  3001               	movlw	1
 16369  14A3  00F7               	movwf	??_EUSART_RxDataHandler
 16370  14A4  0877               	movf	??_EUSART_RxDataHandler,w
 16371  14A5  07EA               	addwf	_eusartRxCount,f	;volatile
 16372  14A6  0008               	return
 16373  14A7                     __end_of_EUSART_RxDataHandler:	
 16374  007E                     btemp	set	126	;btemp
 16375  007E                     int$flags	set	126
 16376  007E                     wtemp0	set	126


Data Sizes:
    Strings     92
    Constant    57
    Data        40
    BSS         151
    Persistent  45
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     63      80
    BANK1            80      0      73
    BANK2            80      0      75
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2889$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2889	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2546_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[5]), 
		 -> STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S110$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S110$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2878,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_TMR0_ISR
    _TMR0_ISR->_TMR0_CallBack
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _myButtonPressedCallback->_check_on_off
    _myButtonPressedCallback->_check_up_down
    _check_up_down->_MTOUCH_Button_Buttonmask_Get
    _check_on_off->_MTOUCH_Button_Buttonmask_Get
    _MTOUCH_Button_Buttonmask_Get->_MTOUCH_Button_isPressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_CHECK_DIR

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   52258
                                             61 BANK0      2     2      0
                            _ALL_OFF
                             _ALL_ON
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_DOWN_ON
                            _LED_OFF
                             _LED_ON
                            _LED_RUN
       _MTOUCH_Button_Buttonmask_Get
        _MTOUCH_Button_InitializeAll
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         2     2      0    7173
                                             58 BANK0      2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    7235
                                             58 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    7173
                                             50 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    5472
                                             42 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    5037
                                             33 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3359
                                             27 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    3115
                                             18 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1398
                                             10 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3    1006
                                              2 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      62
                                              1 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3812
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     121
                                              2 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3086
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    1829
                                              8 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    1730
                                              6 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     526
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1055
                                             10 BANK0      2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     328
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     121
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     484
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23405
                                             51 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              3 BANK0      2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     202
                                              1 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   15801
                                             49 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   15702
                                             42 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              4 BANK0      3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     130
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   14407
                                             38 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1396
                                              4 BANK0      5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6288
                                             25 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5745
                                             10 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1    1226
                                              1 BANK0      8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     211
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     170
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1697
                                              4 BANK0      6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     134
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     134
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0     103
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    7179
                                             22 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    7080
                                             18 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     504
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     526
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1164
                                             13 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     130
                                              7 BANK0      1     0      1
                       _LED_DOWN_OFF
                         _LED_UP_OFF
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1796
                                             13 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     381
                                              7 BANK0      1     0      1
                       _check_on_off
                      _check_up_down
 ---------------------------------------------------------------------------------
 (6) _check_up_down                                        1     1      0     158
                                              6 BANK0      1     1      0
                        _LED_DOWN_ON
                          _LED_UP_ON
       _MTOUCH_Button_Buttonmask_Get
 ---------------------------------------------------------------------------------
 (6) _check_on_off                                         1     1      0     158
                                              6 BANK0      1     1      0
       _MTOUCH_Button_Buttonmask_Get
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Button_Buttonmask_Get                         4     4      0     158
                                              2 BANK0      4     4      0
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (8) _MTOUCH_Button_isPressed                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     659
                                              6 BANK0      4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     526
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              7 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1092
                                             13 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     634
                                              8 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0     844
                                             11 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0     746
                                              8 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     526
                                              4 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     482
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              0 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LED_RUN                                              3     1      2    1893
                                              0 BANK0      3     1      2
                       _LED_DOWN_OFF
                        _LED_DOWN_ON
                         _LED_UP_OFF
                          _LED_UP_ON
 ---------------------------------------------------------------------------------
 (7) _LED_UP_ON                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_DOWN_ON                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_ON                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      22
                                              2 BANK0      3     3      0
                          _CHECK_DIR
 ---------------------------------------------------------------------------------
 (2) _CHECK_DIR                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ALL_ON                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ALL_OFF                                              0     0      0       0
                            _LED_OFF
 ---------------------------------------------------------------------------------
 (1) _LED_OFF                                              0     0      0       0
                       _LED_DOWN_OFF
                         _LED_UP_OFF
 ---------------------------------------------------------------------------------
 (6) _LED_UP_OFF                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _LED_DOWN_OFF                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                            _INT_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            6     6      0       0
                                              1 COMMON     6     6      0
                   Absolute function *
                      _TMR0_CallBack
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR0_CallBack                                       1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (13) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ALL_OFF
     _LED_OFF
       _LED_DOWN_OFF
       _LED_UP_OFF
   _ALL_ON
   _DATA_PROCESS
     _CHECK_DIR
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_DOWN_ON
   _LED_OFF
     _LED_DOWN_OFF
     _LED_UP_OFF
   _LED_ON
   _LED_RUN
     _LED_DOWN_OFF
     _LED_DOWN_ON
     _LED_UP_OFF
     _LED_UP_ON
   _MTOUCH_Button_Buttonmask_Get
     _MTOUCH_Button_isPressed
   _MTOUCH_Button_InitializeAll
     _MTOUCH_Button_Initialize
       _MTOUCH_Sensor_Calibrate
         ___bmul
     _memcpy
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _check_on_off
               _MTOUCH_Button_Buttonmask_Get
                 _MTOUCH_Button_isPressed
             _check_up_down
               _LED_DOWN_ON
               _LED_UP_ON
               _MTOUCH_Button_Buttonmask_Get
                 _MTOUCH_Button_isPressed
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _LED_DOWN_OFF
             _LED_UP_OFF
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _TMR0_ISR *
     Absolute function(Fake) *
     _TMR0_CallBack *
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
     _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     112       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3F      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      49       8       91.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     112      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Jul 19 14:59:02 2019

                       ?_EUSART_SetRxInterruptHandler 0020                       Sensor_loadADCSettings@adc_index 0021  
                        ?_MTOUCH_Sensor_RawSample_Get 0024                                           _triac_level 005F  
                                                   _i 00C7                                          _update_state 0723  
                                      ___bmul@product 0022                                    __size_of_CHECK_DIR 0019  
                                         ?_LED_UP_OFF 0077                                           __CFG_CP$OFF 0000  
                             ?_Sensor_autoCalibration 0077                            __end_of_Sensor_setInactive 12DF  
                                     _timer0ReloadVal 00DC                             _Sensor_setCalibratAcqTime 13D8  
                                         __CFG_LVP$ON 0000                                                   l301 055B  
                                                 l253 067D                                                   l282 04A2  
                                                 l284 049E                                                   l518 0F35  
                                                 l289 04A5                                                   l299 0544  
                                                 l725 12B5                                                   l592 0817  
                                                 _GIE 005F                                                   _PR2 001B  
                                __end_of_check_on_off 1348                                                   _abs 1536  
                              ??_EUSART_RxDataHandler 0077                                                   _pad 09D0  
                      ?_EUSART_SetFramingErrorHandler 0020                               ?_Sensor_loadADCSettings 0021  
                                     _TMR2_Initialize 12AB                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0024                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0021                       ?_MTOUCH_Sensor_Sampled_ResetAll 0077  
                                     __end_of_ALL_OFF 125A                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                      Sensor_getScanGroupIndex@sensor 0022                     __size_of_MTOUCH_Sensor_Initialize 0018  
                           ?_MTOUCH_Sensor_Initialize 0077                                          ?_EUSART_Read 0077  
                                     __end_of_LED_OFF 12AB                                       __end_of_LED_RUN 164B  
                                                ?_abs 0020                                                  l1312 0618  
                                                l1313 0622                                                  l1174 163F  
                                                l1450 09E8                                                  l1453 0A08  
                                                l1454 0A14                                                  l1286 07D0  
                                                l4236 15B7                                                  l4252 1752  
                                                l4316 143D                                                  l4420 1561  
                                                l4430 1412                                                  l4246 1741  
                                                l5062 161E                                                  l4248 1750  
                                                l7000 0FAB                                                  l4426 140C  
                                                l4258 1763                                                  l4418 1555  
                                                l7010 0FD2                                                  l5084 14D7  
                                                l7030 13EA                                                  l7006 0FCC  
                                                ?_pad 0032                                                  l5408 1698  
                                                l7016 0FDD                                                  l7120 07F7  
                                                l7050 0DB5                                                  l5348 1530  
                                                l4396 0804                                                  l7060 0DD5  
                                                l5540 0A23                                                  l7310 1638  
                                                l4814 09BE                                                  l4806 0D43  
                                                l4910 14BC                                                  l6510 0700  
                                                l5630 0A27                                                  l7118 07DA  
                                                l7312 1641                                                  l4656 157F  
                                                l6504 06D8                                                  l7056 0DC4  
                                                l7072 0DF7                                                  l7144 1485  
                                                l5624 0A25                                                  l7320 0724  
                                                l5730 05EE                                                  l5722 05E7  
                                                l5714 05E0                                                  l5706 05D9  
                                                l6530 0E61                                                  l6610 043E  
                                                l7066 0DE5                                                  l7074 0E1A  
                                                l7138 147C                                                  l7330 0747  
                                                l7322 072B                                                  l7410 0093  
                                                l5660 05AA                                                  l7316 1648  
                                                l7308 1635                                                  l6452 0899  
                                                l7340 076A                                                  l7332 074E  
                                                l7324 0732                                                  l7404 008B  
                                                l4950 0CEE                                                  l7158 13BA  
                                                l6606 0434                                                  l7350 078D  
                                                l7342 0771                                                  l7334 0755  
                                                l7326 0739                                                  l7422 00B6  
                                                l4944 0CD2                                                  l6536 0E95  
                                                l6528 0E5D                                                  l6720 0568  
                                                l7272 15FD                                                  l4928 171C  
                                                l6456 08BC                                                  l7344 0778  
                                                l7336 075C                                                  l7328 0740  
                                                l7504 01BB                                                  l5770 0611  
                                                l5762 060A                                                  l5754 0603  
                                                l5746 05FC                                                  l5738 05F5  
                                                l5690 05CB                                                  l5682 05C4  
                                                l5674 05BD                                                  l5666 05B3  
                                                l4946 0CDA                                                  l7098 0AB2  
                                                l6490 0679                                                  l6730 0585  
                                                l6626 046A                                                  l6802 09EA  
                                                l7362 1674                                                  l7346 077F  
                                                l7338 0763                                                  l7354 0794  
                                                l7530 01F5                                                  l7506 01BF  
                                                l4956 0B38                                                  l6724 0571  
                                                l6716 055F                                                  l6660 04A8  
                                                l6652 0498                                                  l6636 047D  
                                                l6572 0416                                                  l6564 03FF  
                                                l6548 164F                                                  l7372 1687  
                                                l7348 0786                                                  l7700 0385  
                                                l7444 0111                                                  l4958 0B3C  
                                                l6478 1390                                                  l6574 041D  
                                                l6582 041F                                                  l6822 093C  
                                                l7366 1676                                                  l7630 02DA  
                                                l7622 02C5                                                  l7614 02AC  
                                                l7550 021A                                                  l7518 01E0  
                                                l7462 0176                                                  l6736 059A  
                                                l6672 04EB                                                  l6576 0432  
                                                l6816 092E                                                  l6920 0AEF  
                                                l7640 02EC                                                  l7536 01FF  
                                                l7464 0168                                                  l7472 0178  
                                                l5794 0628                                                  l5786 061D  
                                                l5698 05D2                                                  l6594 0425  
                                                l6818 0931                                                  l6914 0ADC  
                                                l4898 1704                                                  l7722 03C4  
                                                l7706 0399                                                  l7626 02D0  
                                                l7618 02B8                                                  l7634 02E0  
                                                l7570 023C                                                  l7554 0226  
                                                l5788 061E                                                  l6772 08EF  
                                                l6684 051E                                                  l6676 0509  
                                                l6860 0C5B                                                  l6932 0B17  
                                                l6924 0AF7                                                  l6908 0AD4  
                                                l7556 021F                                                  l7564 022A  
                                                l7484 0193                                                  l7468 0171  
                                                l5798 062A                                                  l6950 1376  
                                                l6854 0C28                                                  l6846 0C24  
                                                l6838 0C11                                                  l7670 0337  
                                                l7662 031F                                                  l6960 0EF3  
                                                l6688 053B                                                  l6856 0C3B  
                                                l6936 0B20                                                  l6928 0B07  
                                                l6792 09DE                                                  l7584 0258  
                                                l6874 1424                                                  l7674 0341  
                                                l7666 032C                                                  l6796 09E6  
                                                l6884 17AA                                                  l7684 0359  
                                                l7596 0281                                                  l6878 142B  
                                                l6966 0F2C                                                  l6886 17B3  
                                                l7678 0349                                                  l6976 0BAD  
                                                l7880 168F                                                  l7882 0A2F  
                                                l7884 0E04                                                  l7886 0E09  
                                                l7878 079E                                                  l7888 0632  
                                                STR_1 1830                                                  STR_2 183E  
                                                STR_3 1843                                                  STR_4 1848  
                                                STR_5 184D                                                  STR_6 1852  
                                                STR_7 1857                                                  STR_8 185C  
                                                STR_9 1861                         ?_Button_Reading_Update_Helper 0077  
                                                _LATA 010C                                                  _LATB 010D  
                                     __end_of_INT_ISR 1277                                                  _LATC 010E  
                                                u4005 14DA                                                  u2700 15B5  
                                                u3555 085D                                                  u2755 1540  
                                                u3565 1790                                                  u5405 0716  
                                                u2695 15A6                                                  u2944 0811  
                                                u3585 0D0B                                                  u2945 0810  
                                                u5425 0E40                                                  u5345 08BA  
                                                u3595 0D51                                                  u6155 0F09  
                                                u5435 0E4A                                                  u7107 00C6  
                                                u3845 0B65                                                  u7117 00D3  
                                                u3790 0CB9                                                  u5455 0E86  
                                                u7207 0152                                                  u7127 00E0  
                                                u3785 0C81                                                  u7217 015F  
                                                u7137 00ED                                                  u3795 0CB5  
                                                u7147 00FA                                                  u7157 0107  
                                                u6295 0A76                                                  u7167 011E  
                                                u5905 09F4                                                  u7177 012B  
                                                u7187 0138                                                  u7197 0145  
                                                u5975 0C45                            Button_State_Pressed@button 002D  
                                                _TMR0 0015                                                  _TMR2 001A  
                               __end_of_check_message 1698                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01CE  
                            _Sensor_getScanGroupIndex 173E                             ?_Sensor_Acq_ExecutePacket 002A  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0020                                                  _dbuf 01A0  
                                                _ctoa 179B                                                  _main 006C  
                __size_of_MTOUCH_Button_InitializeAll 001D                                                  _prec 00B4  
                                                _nout 00B0                                                  pad@i 0036  
                                                pad@p 0033                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 0038  
                __size_of_MTOUCH_Sensor_InitializeAll 0010                                                  btemp 007E  
                               __end_of_check_up_down 0903                   __end_of_INT_DefaultInterruptHandler 124B  
                         _INT_DefaultInterruptHandler 124A                                    __size_of_LED_UP_ON 0003  
                                                start 0024                                        ??_LED_DOWN_OFF 0020  
                     __end_of_INT_SetInterruptHandler 131E                                     ___bmul@multiplier 0023  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0077  
                  MTOUCH_Button_Buttonmask_Get@output 0024                        __end_of_Sensor_autoCalibration 0EB4  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 183E          Sensor_Scanfrequency_Evaluation@frequency_hop 1839  
                                       __CFG_LPBOR$ON 0000                              _myButtonReleasedCallback 141B  
                            ?_MTOUCH_Service_Mainloop 0077                      __size_of_MTOUCH_Button_isPressed 001C  
                       __size_of_Button_State_Pressed 0068                                                 ??_abs 0022  
                                               ??_pad 0035                           ?_Button_Baseline_Initialize 0077  
               Sensor_postAcquisitionProcess@adcIndex 0025                               __end_of_TMR0_Initialize 14D5  
                       ??_MTOUCH_Sensor_RawSample_Get 0026                         Sensor_RawSample_Update@sensor 0026  
                       myButtonPressedCallback@button 0027                        ??_TMR0_DefaultInterruptHandler 0077  
                           __size_of_Sensor_isEnabled 0012                                         ?_EUSART_Write 0077  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 1291  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0041                   __end_of_Sensor_isCalibratingAcqTime 1331  
                         _Sensor_isCalibratingAcqTime 1327                                                 ?_ctoa 003B  
                                               ?_main 0077                                                 STR_10 1866  
                                               STR_11 186B                                                 STR_12 1870  
                                               STR_13 1875                                                 STR_14 187A  
                                               STR_15 187F                                                 STR_16 1884  
                                               STR_17 1889                                         __CFG_WDTE$OFF 0000  
                                               STR_18 1892                        __end_of_Sensor_loadADCSettings 0723  
                                               _T2CON 001C                               __size_of_Button_Service 0055  
                                               i1l891 0014                                                 i1l897 0022  
                                               i1l889 000D                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0041  
                                     _triac_level_now 00BC                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TXREG 019A                                                 _TXSTA 019E  
                   __size_of_TMR0_SetInterruptHandler 0009                       __size_of_Button_DefaultCallback 0001  
                           ?_TMR0_SetInterruptHandler 0020                                  ??_MTOUCH_needReburst 0020  
                                    __end_of_TMR0_ISR 0980                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 00CB                                                 _flags 00B6  
                             __size_of_Sensor_Service 0095                 __end_of_MTOUCH_Sensor_Scan_Initialize 13D8  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 13C8  
                                      _WDT_Initialize 1277                               Sensor_setSampled@sensor 0020  
                                               _fputc 088F                                                 _fputs 164B  
                                               pad@fp 003A                                                 _width 00B2  
                                               ctoa@c 003B                                                 _putch 1291  
                                               ctoa@w 003E                      __size_of_Button_State_NotPressed 00A4  
                                   __end_of_CHECK_DIR 1536                                                 pclath 000A  
                                 __size_of_LED_UP_OFF 0003                                  _Sensor_Sampled_Reset 12E8  
                                               status 0003                                          LED_RUN@LED_1 0022  
                                        LED_RUN@LED_2 0020                                          LED_RUN@LED_3 0021  
                                               wtemp0 007E                                       _TMR2_StartTimer 1266  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0009  
                              Sensor_isEnabled@sensor 0021                                       __initialization 0026  
                                        __end_of_ctoa 17CB                                          __end_of_main 03D9  
                                _Sensor_setCalibrated 137A                                 __size_of_DATA_PROCESS 00C7  
                                      ??_EUSART_Write 0020                               __end_of_TMR2_Initialize 12B3  
                         ?_INTERRUPT_InterruptManager 0077                        ??_EUSART_SetRxInterruptHandler 0022  
                    __end_of_MTOUCH_Button_Initialize 088F                                                ??_ctoa 003D  
                                           ??_ALL_OFF 0020                                                ??_main 005D  
                                       _counter_PRESS 0075                               _MTOUCH_Sensor_Calibrate 143F  
                           Sensor_Service@sensor_adc1 004F                             Sensor_Service@sensor_adc2 0050  
                                           ??_LED_OFF 0020                                     __end_of_LED_UP_ON 1266  
                                           ??_LED_RUN 0022                               ??_Button_Reading_Update 002B  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0022                              ?_Button_Deviation_Update 0077  
                              __end_of_WDT_Initialize 127B                                             ??_INT_ISR 0077  
                                        ?_MTOUCH_Tick 0077                          Button_Baseline_Update@button 0026  
           __end_of_EUSART_DefaultFramingErrorHandler 124A            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0077                    ?_EUSART_DefaultFramingErrorHandler 0077  
                   _EUSART_DefaultFramingErrorHandler 1249                            _EUSART_OverrunErrorHandler 00D6  
                __size_of_MTOUCH_Sensor_RawSample_Get 001A                                                ?_fputc 0022  
                                              ?_fputs 002A                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0077  
                                              _ANSELB 018D                                                _ANSELC 018E  
                                              _ALL_ON 127B                            __end_of_EUSART_is_rx_ready 125D  
                                              _BORCON 0116                                                _LED_ON 125D  
                                              i1l5442 0846                                                i1l5436 0837  
                                              i1l5446 0855                                                i1l5470 0963  
                               ?_Sensor_Sampled_Reset 0077                                                u428_25 097A  
                                              _OSCCON 0099                                                u722_27 15D9  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              _WDTCON 0097                     MTOUCH_Button_InitializeAll@button 002B  
                                        _DATA_PROCESS 05A7                        ??_Button_Reading_Update_Helper 0028  
                              _Button_DefaultCallback 124C                       __end_of_MTOUCH_Service_Mainloop 160F  
                                      __CFG_PWRTE$OFF 0000                                   _Sensor_isCalibrated 1331  
                              _Sensor_DefaultCallback 124D                                          vfprintf@cfmt 0050  
                                       _packet_sample 0070                                                ___bmul 1409  
                               ?_Sensor_setCalibrated 0077                          Sensor_DefaultCallback@sensor 0020  
                    __size_of_myButtonPressedCallback 0006                                  __size_of_LED_DOWN_ON 0003  
                               __size_of_check_on_off 000C                                                _memcpy 1712  
                                    ?_TMR0_Initialize 0077                                                _rxData 0065  
                    __end_of_MTOUCH_Button_ServiceAll 13C8                                                _printf 13F8  
                                              pad@buf 0032                                                ctoa@fp 0040  
                        Sensor_autoCalibration@sensor 0029                                         ?_INT_CallBack 0077  
                                              _strlen 154F                                                fputc@c 0022  
                                              fputs@c 002E                                                fputs@i 002F  
                                              fputs@s 0031                               _MTOUCH_Sensor_SampleAll 147A  
                        Button_DefaultCallback@button 0027                                  ?_Sensor_isCalibrated 0077  
                                     ?_WDT_Initialize 0077                                  __end_of_LED_DOWN_OFF 1254  
                            ?_Sensor_RawSample_Update 0077                            __end_of_Sensor_Acquisition 0B22  
                               __end_of_TMR0_CallBack 15F2                      __size_of_INT_SetInterruptHandler 0009  
                             ?_Button_Baseline_Update 0077                                      __end_of_vfprintf 0800  
                 Sensor_postAcquisitionProcess@sensor 0028                               __end_of_TMR2_StartTimer 1269  
            TMR0_SetInterruptHandler@InterruptHandler 0020               INT_SetInterruptHandler@InterruptHandler 0020  
                  __size_of_Sensor_setCalibratAcqTime 0010              __end_of_MTOUCH_Button_SetPressedCallback 12CD  
           __size_of_MTOUCH_Button_SetPressedCallback 0009                    ??_MTOUCH_Button_SetPressedCallback 0022  
                   ?_MTOUCH_Button_SetPressedCallback 0020                      _MTOUCH_Button_SetPressedCallback 12C4  
                            __size_of_Sensor_isActive 000F                       MTOUCH_Sensor_RawSample_Get@name 0027  
                 Sensor_getScanGroupIndex@sensorGroup 0023                                  __size_of_EUSART_Read 0028  
                                   _SYSTEM_Initialize 1505                               __end_of__initialization 0068  
                 __size_of_Button_Baseline_Initialize 002F                        ?_MTOUCH_Sensor_Scan_Initialize 0077  
                     ??_Sensor_postAcquisitionProcess 0024                                    ?_SYSTEM_Initialize 0077  
                                 _Button_StateMachine 00DD                            __end_of_Button_Tick_helper 16E8  
                                        _check_on_off 133C                                     _update_state_flag 00C9  
                       MTOUCH_Sensor_Calibrate@sensor 0025           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 002F  
                                 ___bmul@multiplicand 0020                                        __pcstackCOMMON 0077  
                             _MTOUCH_Button_isPressed 159D                                          __pidataBANK0 0800  
                                        __pidataBANK1 1360                                          __pidataBANK2 1582  
         __end_of_MTOUCH_Button_SetNotPressedCallback 12C4          __size_of_MTOUCH_Button_SetNotPressedCallback 0009  
               ??_MTOUCH_Button_SetNotPressedCallback 0022                  ?_MTOUCH_Button_SetNotPressedCallback 0020  
                 _MTOUCH_Button_SetNotPressedCallback 12BB                                   ??_SYSTEM_Initialize 002C  
                                           ?_TMR0_ISR 0077                            __end_of_MTOUCH_Button_Tick 14ED  
                                        ??_LED_UP_OFF 0020                                         __end_of_fputc 08C6  
                                       __end_of_fputs 1671                      __end_of_MTOUCH_Sensor_Initialize 1505  
                                       __end_of_putch 1297                             ??_MTOUCH_Sensor_Calibrate 0024  
                                    _Sensor_isEnabled 142D                                      ?_TMR2_Initialize 0077  
                     __end_of_Button_Deviation_Update 0CF8                                        ??_INT_CallBack 0077  
                            Sensor_setInactive@sensor 0020                                        _Button_Service 0A71  
                    __end_of_Sensor_Acq_ExecutePacket 05A7                            ?_Button_State_Initializing 002D  
                         __size_of_EXT_INT_Initialize 000C                                  Button_Service@button 0035  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0020  
                          ??_Sensor_getScanGroupIndex 0020                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0D88                   Sensor_Acq_ExecutePacket@sensor_adc1 0038  
                 Sensor_Acq_ExecutePacket@sensor_adc2 002A                              _MTOUCH_Button_Initialize 0858  
                     ??_EUSART_SetOverrunErrorHandler 0022                                        _Sensor_Service 0D88  
                             _Button_State_NotPressed 0EB4                         __size_of_MTOUCH_Sensor_Enable 0013  
                                  _Sensor_setInactive 12D6                                     _sensor_scan_group 188E  
                                             ??_fputc 0025                                        _count_down_off 00CD  
                           __end_of_SYSTEM_Initialize 151D                                     _lowpowerActivated 006E  
                                             ??_fputs 002B                      MTOUCH_Sensor_isCalibrated@sensor 0025  
                              ??_Sensor_Sampled_Reset 0020                                               ??_putch 0021  
                                             ?_ALL_ON 0077                                        _counter_ON_OFF 0076  
                                          __pbssBANK0 005F                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          _check_data 0A20                                               ?_LED_ON 0077  
                                __end_of_EUSART_Write 12BB                               _TMR2_LoadPeriodRegister 1280  
                                  __end_of_LED_UP_OFF 1257                            ??_myButtonReleasedCallback 0028  
                        Sensor_loadADCSettings@sensor 0028                                   ?_Sensor_setInactive 0077  
                                    _Sensor_setActive 12CD                           __size_of_EUSART_Receive_ISR 0036  
                          __end_of_mtouch_button_init 1830                                     _last_touch_status 00C2  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0030                                ??_Sensor_setCalibrated 0020  
                                          __pmaintext 006C                                               ?___bmul 0020  
                    __end_of_TMR0_SetInterruptHandler 1327                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                                          ??_TMR0_ISR 0078                        MTOUCH_Sensor_wasSampled@sensor 0025  
                                          __pintentry 0004                                __end_of_Button_Service 0AC6  
                                             ?_memcpy 0020                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 162C  
                         _MTOUCH_Button_InitializeAll 160F                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0078                   __end_of_MTOUCH_Sensor_InitializeAll 13F8  
                         _MTOUCH_Sensor_InitializeAll 13E8                             ??_MTOUCH_Sensor_SampleAll 0051  
                                             ?_printf 0052                                               _ALL_OFF 1257  
                     __end_of_Sensor_RawSample_Update 1712                                  ??_Sensor_setInactive 0020  
                                             ?_strlen 0020                     __size_of_MTOUCH_Sensor_wasSampled 0010  
                           ?_MTOUCH_Sensor_wasSampled 0077                                         _eusartRxCount 006A  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0020  
                                             _LED_OFF 12A3                                             _AD2PRECON 0796  
                                             _LED_RUN 162C                     __end_of_Button_State_Initializing 0B84  
                              __end_of_Sensor_Service 0E1D                               Sensor_Service@scanGroup 004D  
                            _MTOUCH_Button_ServiceAll 13B8                                               _INT_ISR 1273  
                           __end_of_sensor_scan_group 1892                                    __size_of_vfpfcnvrt 00A8  
                       __size_of_EUSART_RxDataHandler 0017                      __size_of_MTOUCH_Service_Mainloop 001D  
                        __end_of_Button_State_Pressed 0BEC                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0022                                      ?_TMR2_StartTimer 0077  
                    Button_Baseline_Initialize@button 002C                       Sensor_setCalibratAcqTime@sensor 0020  
                                __size_of_MTOUCH_Tick 0003                                       __size_of_ALL_ON 0005  
                 Sensor_loadADCSettings@addressOffset 0027                  __size_of_Sensor_isCalibratingAcqTime 000A  
                                     __size_of_LED_ON 0003                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 002C  
                                           _CHECK_DIR 151D                             ??_MTOUCH_Button_isPressed 0020  
                                          _count_conf 00C0                                            _counter_1s 0061  
                                   ??_Sensor_isActive 0020                   __size_of_EUSART_DefaultErrorHandler 0003  
                       MTOUCH_Button_Buttonmask_Get@i 0025                 __end_of_Sensor_postAcquisitionProcess 0940  
              __size_of_Sensor_postAcquisitionProcess 003D                         _Sensor_postAcquisitionProcess 0903  
                             _myButtonPressedCallback 1285                               Sensor_Acquisition@retry 0048  
                                     __size_of___bmul 0012                                           _AD1CON0bits 0711  
                      MTOUCH_Button_Initialize@button 0029                                           _AD2CON0bits 0791  
                                           ?_vfprintf 004A                                       ?_Button_Service 0077  
                                     __CFG_STVREN$OFF 0000            Sensor_Scanfrequency_Evaluation@sensor_adc1 003C  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 0039                                       __size_of_memcpy 002C  
                               __size_of_LED_DOWN_OFF 0003                                               __ptext1 0723  
                                             __ptext2 1671                                               __ptext3 13F8  
                                             __ptext4 07D1                                               __ptext5 0F58  
                                             __ptext6 179B                                               __ptext7 09D0  
                                             __ptext8 154F                                               __ptext9 164B  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 002B                                       __size_of_strlen 0019  
                            _MTOUCH_Sensor_Initialize 14ED                                 _OSCILLATOR_Initialize 128B  
                                           _T2CONbits 001C                                          __size_of_abs 0019  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 002E  
                              __size_of_check_up_down 003D                                               _prcData 00CC  
                                     ?_Sensor_Service 0077                              ??_PIN_MANAGER_Initialize 0020  
                             _INT_SetInterruptHandler 1315                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 137A  
                   MTOUCH_Sensor_InitializeAll@sensor 0029                              _Sensor_Acq_ExecutePacket 03D9  
                                             _triac_c 00B8                                      _callback_sampled 00E7  
                                           _LED_UP_ON 1263                             ??_TMR2_LoadPeriodRegister 0020  
                     Sensor_RawSample_Update@adcIndex 0025                            __size_of_SYSTEM_Initialize 0018  
                                             clrloop0 1298                                      _callback_pressed 00E5  
                      MTOUCH_Sensor_Initialize@sensor 0027                                  end_of_initialization 0068  
                                             _turn_on 0068                                               _turn_up 0067  
                                         ?_check_data 0077                               ?_Button_DefaultCallback 0027  
               __end_of_EUSART_SetOverrunErrorHandler 130C                __size_of_EUSART_SetOverrunErrorHandler 0009  
                       _EUSART_SetOverrunErrorHandler 1303                                               memcpy@d 0029  
                                             memcpy@n 0022                                               memcpy@s 0025  
                                             fputc@fp 0024                                               init_ram 129D  
                                             fputs@fp 002A                                               initloop 129E  
                                __end_of_INT_CallBack 13A8                               ?_Sensor_DefaultCallback 0020  
                       Sensor_Acquisition@sensor_adc1 0049                         Sensor_Acquisition@sensor_adc2 0046  
                                          ?_CHECK_DIR 0077                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 17CB                          ??_MTOUCH_Sensor_isCalibrated 0024  
                                  ?_EUSART_Initialize 0077                                          _LED_DOWN_OFF 1251  
                                   __end_of_vfpfcnvrt 1000                   __end_of_MTOUCH_Sensor_RawSample_Get 1582  
                         _MTOUCH_Sensor_RawSample_Get 1568                                             _RCSTAbits 019D  
                                  _EUSART_is_rx_ready 125A                                            ??_vfprintf 004D  
                                             strlen@a 0023                                               strlen@s 0024  
                                 ??_EUSART_Initialize 0022                                      ??_WDT_Initialize 0020  
                            _TMR0_SetInterruptHandler 131E                                   ?_EUSART_is_rx_ready 0077  
                              Sensor_setActive@sensor 0020                                             _ZCD_STATE 00C8  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 003F  
                       Button_Deviation_Update@button 002A                  Sensor_Acq_ExecutePacket@AD1CON2_temp 002D  
                               __size_of_EUSART_Write 0008              MTOUCH_Button_SetPressedCallback@callback 0020  
                          MTOUCH_Sensor_Enable@sensor 0025                                            ?_LED_UP_ON 0077  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 002E                                   _callback_notPressed 00E3  
                 __size_of_MTOUCH_Sensor_isCalibrated 0017                        __end_of_Button_DefaultCallback 124D  
                     __size_of_EUSART_SetErrorHandler 0009       Sensor_Scanfrequency_Evaluation@packet_noise_Max 003D  
                                  _sensor_globalFlags 006D                              __end_of_Sensor_isEnabled 143F  
                          Sensor_setCalibrated@sensor 0020                        __end_of_Sensor_DefaultCallback 124E  
                    __end_of_myButtonReleasedCallback 142D                                        __end_of_ALL_ON 1280  
                           __end_of_EUSART_Initialize 1800                                  ??_EUSART_is_rx_ready 0020  
                                       _check_message 1671                                        __end_of_LED_ON 1260  
                            ??_Sensor_autoCalibration 0024                            _Sensor_loadADCSettings$558 0025  
                                           _TXSTAbits 019E                                         _check_request 0064  
                                       _check_up_down 08C6                             ??_myButtonPressedCallback 0028  
                    __size_of_Sensor_RawSample_Update 002A                                    _Sensor_Acquisition 0AC6  
                                       ??_LED_DOWN_ON 0020                              ??_Sensor_loadADCSettings 0022  
                                       ?_update_state 0077                                  _Button_State_Pressed 0B84  
                                      __end_of___bmul 141B                    __end_of_EUSART_DefaultErrorHandler 1251  
                          _EUSART_DefaultErrorHandler 124E                                   ?_Sensor_Acquisition 0046  
                                         vfpfcnvrt@ap 0042                                           vfpfcnvrt@fp 0049  
                          ??_MTOUCH_Button_Initialize 0026           MTOUCH_Button_SetNotPressedCallback@callback 0020  
                     ??_MTOUCH_Sensor_Scan_Initialize 0020                        ?_Sensor_postAcquisitionProcess 0077  
                                        _EUSART_Write 12B3                                     __size_of_TMR0_ISR 0040  
                                 __size_of_check_data 0051                                    _Button_Tick_helper 16C0  
                                      __end_of_memcpy 173E                                ?_OSCILLATOR_Initialize 0077  
                           ??_INT_SetInterruptHandler 0022                                   MTOUCH_Button_Tick@i 0024  
                            __end_of_Sensor_setActive 12D6                      TMR2_LoadPeriodRegister@periodVal 0020  
                                      __end_of_printf 1409                           ??_Button_State_Initializing 002E  
                                      __end_of_strlen 1568                                   start_initialization 0026  
                             _MTOUCH_Service_Mainloop 15F2                              __size_of_TMR0_Initialize 0017  
                     __size_of_PIN_MANAGER_Initialize 001C                                    _MTOUCH_Button_Tick 14D5  
                                 ?_Button_Tick_helper 0077                                           __end_of_abs 154F  
                                         __end_of_pad 0A20                                        _TMR2_StopTimer 1269  
                                       ??_EUSART_Read 0020          EUSART_SetRxInterruptHandler@interruptHandler 0020  
                                         putch@txData 0021                                              ??_ALL_ON 0020  
                                ??_Sensor_Acquisition 0047                                              ??_LED_ON 0020  
                                      ?_check_message 0077                                   ?_MTOUCH_Button_Tick 0077  
                     Button_State_Initializing@button 002D                                        ?_check_up_down 0077  
                                         ??_CHECK_DIR 0020                        Sensor_autoCalibration@adcIndex 0028  
                        ?_INT_DefaultInterruptHandler 0077                        ?_EUSART_SetOverrunErrorHandler 0020  
                    __end_of_MTOUCH_Sensor_wasSampled 13B8                                  ??_Button_Tick_helper 0020  
                        __end_of_MTOUCH_Sensor_Enable 1465                                           vfprintf@fmt 004A  
                                        _packet_noise 00C4                                        ??_update_state 005A  
                          _EUSART_FramingErrorHandler 00D8                                              ??___bmul 0021  
                               ?_Button_State_Pressed 002D                                _EUSART_SetErrorHandler 12F1  
                              __size_of_TMR0_CallBack 001D                            ??_MTOUCH_Button_ServiceAll 0036  
                                         __pdataBANK0 006F                                           __pdataBANK1 00DD  
                                         __pdataBANK2 0150                                        check_message@x 005C  
                                            ??_memcpy 0024                           __end_of_Sensor_isCalibrated 133C  
                        ??_Button_Baseline_Initialize 0028                            __end_of_EXT_INT_Initialize 1354  
                                       _sample_period 006F                                  ??_MTOUCH_Button_Tick 0023  
                                 __end_of_LED_DOWN_ON 1263                                    _mtouch_button_init 1800  
                          Sensor_Sampled_Reset@sensor 0020                                              ??_printf 0056  
                                            ?_ALL_OFF 0077                                              ??_strlen 0022  
                        ?_Sensor_isCalibratingAcqTime 0077                                              ?_LED_OFF 0077  
                     __end_of_myButtonPressedCallback 128B                                              ?_LED_RUN 0020  
                              __end_of_TMR2_StopTimer 126C                                           __pbssCOMMON 0070  
                                           ___latbits 0002                                              ?_INT_ISR 0077  
                                       __pcstackBANK0 0020                              __size_of_TMR2_Initialize 0008  
                                  TMR0_ISR@tick_count 00C6                                           ??_LED_UP_ON 0020  
                                     _Sensor_isActive 1389                                 __size_of_INT_CallBack 0010  
                      MTOUCH_Button_ServiceAll@button 0037                                   Sensor_Service@error 004E  
                          __end_of_EUSART_Receive_ISR 0858                         __size_of_Sensor_Sampled_Reset 0009  
                          __size_of_EUSART_Initialize 0035                               _Button_Deviation_Update 0C71  
                          ?_Sensor_setCalibratAcqTime 0077                      _EUSART_RxDefaultInterruptHandler 00DA  
                                 __end_of_EUSART_Read 16C0                             _Button_State_Initializing 0B22  
                  __end_of_MTOUCH_Sensor_isCalibrated 14BE                            _MTOUCH_Sensor_isCalibrated 14A7  
                               _TMR0_InterruptHandler 00D0                                             __pnvBANK1 00D0  
                     __size_of_Sensor_autoCalibration 0097                     __size_of_Sensor_getScanGroupIndex 002E  
                                   _Sensor_setSampled 12DF                             ?_Sensor_getScanGroupIndex 0077  
                        __end_of_EUSART_RxDataHandler 14A7                                _PIN_MANAGER_Initialize 15B9  
                                    ??_Button_Service 0032                         ??_INT_DefaultInterruptHandler 0077  
                            ?_MTOUCH_Sensor_Calibrate 0077                                  EUSART_Read@readValue 0021  
                                  ?_Sensor_setSampled 0077                    Button_Reading_Update_Helper@button 002A  
                          ??_MTOUCH_Sensor_Initialize 0026                         __size_of_Sensor_setCalibrated 000F  
                                           __ptext100 1257                                             __ptext101 12A3  
                                           __ptext110 124A                                             __ptext102 1254  
                                           __ptext111 0822                                             __ptext103 1251  
                                           __ptext112 126F                                             __ptext113 1249  
                                           __ptext105 0940                                             __ptext114 124E  
                                           __ptext106 15D5                                             __ptext115 1490  
                                           __ptext107 124B                                             __ptext108 1273  
                                           __ptext109 1398                       __size_of_Sensor_loadADCSettings 00B5  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 006C                                              _AAD2RES0 079A  
                                        _eusartRxTail 006B                                      ??_Sensor_Service 004A  
                          ??_Sensor_Acq_ExecutePacket 002B                          ??_INTERRUPT_InterruptManager 007E  
                                 ??_Sensor_setSampled 0020                     __size_of_myButtonReleasedCallback 0012  
                                         _blink_count 00CA                             ?_myButtonReleasedCallback 0027  
                           ??_MTOUCH_Service_Mainloop 0053                                     __size_of_vfprintf 002F  
                                            _ADCOMCON 0712                                          _INT_CallBack 1398  
                         __size_of_Sensor_setInactive 0009                        Sensor_Acq_ExecutePacket@last_a 0033  
                      Sensor_Acq_ExecutePacket@last_b 0035                  __end_of_MTOUCH_Button_Buttonmask_Get 0822  
               __size_of_MTOUCH_Button_Buttonmask_Get 0021                          _MTOUCH_Button_Buttonmask_Get 0801  
                                     ?_TMR2_StopTimer 0077                         ??_Sensor_isCalibratingAcqTime 0020  
                                       ??_MTOUCH_Tick 0025                                       ??_check_message 005A  
                                       _TMR0_CallBack 15D5                                        __size_of_fputc 0037  
                                      __size_of_fputs 0026                                        __size_of_putch 0006  
                                        ??_check_data 0020                                        _eusartRxBuffer 00A8  
                                     ??_check_up_down 0026                                     ??_TMR0_Initialize 0022  
                           __end_of_Sensor_setSampled 12E8                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0020                                              _LATCbits 010E  
                                       ?_DATA_PROCESS 0077                               _Sensor_RawSample_Update 16E8  
                   __end_of_Sensor_setCalibratAcqTime 13E8                                             clear_ram0 1297  
                                            _PIE1bits 0091                                     _eusartRxLastError 00CE  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 0020  
                          ??_TMR0_SetInterruptHandler 0022                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0022                Sensor_Acq_ExecutePacket@packet_counter 0037  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 002E  
                                         _LED_DOWN_ON 1260                __end_of_MTOUCH_Sensor_Sampled_ResetAll 147A  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015                        _MTOUCH_Sensor_Sampled_ResetAll 1465  
                            ?_MTOUCH_Sensor_SampleAll 0077                                              _TMR0_ISR 0940  
           __end_of_EUSART_DefaultOverrunErrorHandler 1273            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0077                    ?_EUSART_DefaultOverrunErrorHandler 0077  
                   _EUSART_DefaultOverrunErrorHandler 126F                    Sensor_Acq_ExecutePacket@ADxIF_flag 0031  
                            _MTOUCH_Sensor_wasSampled 13A8                                    _mtouch_time_toScan 00CF  
                                           _vfpfcnvrt 0F58                              ??_Button_Baseline_Update 0020  
                                  __end_of_check_data 0A71                               __end_of_Sensor_isActive 1398  
                              _Sensor_autoCalibration 0E1D                                      __size_of_ALL_OFF 0003  
                          __end_of_MTOUCH_needReburst 0004                  __size_of_INT_DefaultInterruptHandler 0001  
                                    __size_of_LED_OFF 0008                                      __size_of_LED_RUN 001F  
                      myButtonReleasedCallback@button 0027                         ?_MTOUCH_Button_Buttonmask_Get 0077  
                                    __size_of_INT_ISR 0004                                        ?_TMR0_CallBack 0077  
                              _Sensor_loadADCSettings 066E                                  _MTOUCH_Sensor_Enable 1452  
                                         _EUSART_Read 1698                                  __end_of_update_state 07D1  
                                          vfpfcnvrt@c 0048                                             _turn_down 0066  
                            Button_Tick_helper@button 0022                             ??_Button_Deviation_Update 0020  
                               _Button_Reading_Update 136C                              ?_MTOUCH_Button_isPressed 0077  
                                   ?_Sensor_isEnabled 0077                                        ??_DATA_PROCESS 0022  
                                   ??_TMR2_Initialize 0020                                   __end_of_MTOUCH_Tick 126F  
                                   _MTOUCH_Initialize 1354                       __end_of_MTOUCH_Sensor_Calibrate 1452  
                                       ?_check_on_off 0077                                           _counter_led 0063  
                                  ??_Sensor_isEnabled 0020                                    ?_MTOUCH_Initialize 0077  
              Sensor_postAcquisitionProcess@deviation 0026                                             memcpy@tmp 0027  
                                          vfprintf@ap 004C                                            vfprintf@fp 004F  
                                          _APFCONbits 011D                               ??_OSCILLATOR_Initialize 0020  
                  __end_of_Button_Baseline_Initialize 179B                            _Button_Baseline_Initialize 176C  
                                 _EUSART_ErrorHandler 00D4                                   ??_MTOUCH_Initialize 002C  
                         ?_EUSART_DefaultErrorHandler 0077                                            ?_vfpfcnvrt 0041  
                            ?_Button_State_NotPressed 002D                                           check_data@x 0022  
                                  Button_Service@name 0034                                     ?_Sensor_setActive 0077  
                            ?_TMR2_LoadPeriodRegister 0077                                 Sensor_isActive@sensor 0020  
                Sensor_Scanfrequency_Evaluation@retry 0040                                    ??_Sensor_setActive 0020  
                                _EUSART_RxDataHandler 1490                                 ?_MTOUCH_Sensor_Enable 0077  
                                            __ptext10 088F                                              __ptext11 1291  
                                            __ptext20 128B                                              __ptext12 12B3  
                                            __ptext21 1354                                              __ptext13 0A20  
                                            __ptext30 130C                                              __ptext22 13E8  
                                            __ptext14 1505                                              __ptext31 1303  
                                            __ptext23 14ED                                              __ptext15 1277  
                                            __ptext40 12E8                                              __ptext32 12FA  
                                            __ptext24 1452                                              __ptext16 12AB  
                                            __ptext41 147A                                              __ptext33 12F1  
                                            __ptext25 160F                                              __ptext17 14BE  
                                            __ptext50 0BEC                                              __ptext42 0D88  
                                            __ptext34 15F2                                              __ptext26 1712  
                                            __ptext18 131E                                              __ptext51 03D9  
                                            __ptext43 12DF                                              __ptext35 0002  
                                            __ptext27 1348                                              __ptext19 15B9  
                                            __ptext60 1536                                              __ptext52 1269  
                                            __ptext44 16E8                                              __ptext36 126C  
                                            __ptext28 1315                                              __ptext61 137A  
                                            __ptext53 1266                                              __ptext45 124D  
                                            __ptext37 14D5                                              __ptext29 17CB  
                                            __ptext70 0EB4                                              __ptext62 13D8  
                                            __ptext54 1280                                              __ptext46 0AC6  
                                            __ptext38 16C0                                              __ptext71 0B22  
                                            __ptext63 1327                                              __ptext55 066E  
                                            __ptext47 0903                                              __ptext39 1465  
                                            __ptext80 0858                                              __ptext72 0B84  
                                            __ptext64 173E                                              __ptext56 1331  
                                            __ptext48 12D6                                              __ptext81 143F  
                                            __ptext73 1285                                              __ptext65 13C8  
                                            __ptext57 142D                                              __ptext49 12CD  
                                            __ptext90 12BB                                              __ptext82 0CF8  
                                            __ptext74 124C                                              __ptext66 13B8  
                                            __ptext58 1389                                              __ptext91 162C  
                                            __ptext83 176C                                              __ptext75 141B  
                                            __ptext67 0A71                                              __ptext59 0E1D  
                                            __ptext92 1263                                              __ptext84 136C  
                                            __ptext76 08C6                                              __ptext68 13A8  
                                            __ptext93 1260                                              __ptext85 0980  
                                            __ptext77 133C                                              __ptext69 14A7  
                                            __ptext94 125D                                              __ptext86 1568  
                                            __ptext78 0801                                              __ptext95 125A  
                                            __ptext87 1409                                              __ptext79 159D  
                                            __ptext96 1698                                              __ptext88 0C71  
                                            __ptext97 05A7                                              __ptext89 12C4  
                                            __ptext98 151D                                              __ptext99 127B  
                           __end_of_MTOUCH_Initialize 1360                             ??_Sensor_RawSample_Update 0024  
                          __size_of_Sensor_setSampled 0009                           __size_of_EUSART_is_rx_ready 0003  
                                       __size_of_ctoa 0030                                         __size_of_main 036D  
                                      ??_check_on_off 0026                                              _rc_level 00BA  
                     __end_of_MTOUCH_Sensor_SampleAll 1490                  __end_of_TMR0_DefaultInterruptHandler 124C  
               __size_of_TMR0_DefaultInterruptHandler 0001                          _TMR0_DefaultInterruptHandler 124B  
                    Sensor_Scanfrequency_Evaluation@i 0045                               ?_EUSART_SetErrorHandler 0020  
       EUSART_SetOverrunErrorHandler@interruptHandler 0020                                              int$flags 007E  
                                          _LED_UP_OFF 1254                                              _vfprintf 07D1  
                  __size_of_Button_State_Initializing 0062                                     ??_TMR2_StartTimer 0020  
                  __end_of_INTERRUPT_InterruptManager 0024                            _INTERRUPT_InterruptManager 0004  
                                           printf@fmt 0052                 __end_of_EUSART_SetFramingErrorHandler 1303  
              __size_of_EUSART_SetFramingErrorHandler 0009                         _EUSART_SetFramingErrorHandler 12FA  
                     __size_of_Button_Baseline_Update 0090                          ?_MTOUCH_Button_InitializeAll 0077  
                        MTOUCH_Sensor_SampleAll@group 0052                          ?_MTOUCH_Sensor_InitializeAll 0077  
                                            _turn_off 0069                                      ?_Sensor_isActive 0077  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                                     ??_TMR0_CallBack 0077                                 ?_EUSART_RxDataHandler 0077  
                                       _mtouch_sensor 0150                                              memcpy@d1 0028  
                                            memcpy@s1 0020                                  _INT_InterruptHandler 00D2  
                     __end_of_MTOUCH_Button_isPressed 15B9                      __end_of_Sensor_getScanGroupIndex 176C  
                                   __CFG_BOREN$NSLEEP 0000                                        __pstringtext10 1857  
                                      __pstringtext11 185C                                        __pstringtext20 1889  
                                      __pstringtext12 1861                                        __pstringtext21 1892  
                                      __pstringtext13 1866                                        __pstringtext22 0000  
                                      __pstringtext14 186B                                        __pstringtext15 1870  
                                      __pstringtext16 1875                                        __pstringtext17 187A  
                                      __pstringtext18 187F                                        __pstringtext19 1884  
                                         _MTOUCH_Tick 126C                                ?_Button_Reading_Update 0077  
                                  _EXT_INT_Initialize 1348                      Button_Deviation_Update@deviation 002B  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0028  
                   __size_of_MTOUCH_Button_Initialize 0037                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0077                           __size_of_Sensor_Acquisition 005C  
                      ??_MTOUCH_Button_Buttonmask_Get 0022                              ?_myButtonPressedCallback 0027  
             __end_of_Sensor_Scanfrequency_Evaluation 0C71              __size_of_Sensor_Scanfrequency_Evaluation 0085  
                   ??_Sensor_Scanfrequency_Evaluation 003A                      ?_Sensor_Scanfrequency_Evaluation 0039  
                     _Sensor_Scanfrequency_Evaluation 0BEC                               ?_PIN_MANAGER_Initialize 0077  
                                       _timeout_count 00BE                           ??_Sensor_setCalibratAcqTime 0020  
                      __end_of_EUSART_SetErrorHandler 12FA                                     __CFG_CLKOUTEN$OFF 0000  
                                 ?_EXT_INT_Initialize 0077                           ?_MTOUCH_Sensor_isCalibrated 0077  
                __end_of_EUSART_SetRxInterruptHandler 1315                 __size_of_EUSART_SetRxInterruptHandler 0009  
                        _EUSART_SetRxInterruptHandler 130C                         ?_TMR0_DefaultInterruptHandler 0077  
                                       _config_status 0074                           __size_of_Button_Tick_helper 0028  
                     __end_of_Button_State_NotPressed 0F58                                              printf@ap 0059  
                                  _EUSART_Receive_ISR 0822         EUSART_SetFramingErrorHandler@interruptHandler 0020  
                            ?_INT_SetInterruptHandler 0020                          __end_of_Sensor_Sampled_Reset 12F1  
                                         ??_vfpfcnvrt 0043                                      ??_TMR2_StopTimer 0020  
                     __end_of_TMR2_LoadPeriodRegister 1285                           __size_of_MTOUCH_Button_Tick 0018  
                                       __pstringtext1 1839                                         __pstringtext2 188E  
                                       __pstringtext3 1800                                         __pstringtext4 1830  
                                       __pstringtext5 183E                                         __pstringtext6 1843  
                                       __pstringtext7 1848                                         __pstringtext8 184D  
                                       __pstringtext9 1852                                  __end_of_DATA_PROCESS 066E  
                                ??_EXT_INT_Initialize 0022                                            _OPTION_REG 0095  
                                 ?_EUSART_Receive_ISR 0077                                 __size_of_update_state 00AE  
                       ??_MTOUCH_Button_InitializeAll 002A                              ??_Button_DefaultCallback 0028  
                       ??_MTOUCH_Sensor_InitializeAll 0028                  Sensor_Acq_ExecutePacket@activeSensor 0032  
                                     _TMR0_Initialize 14BE                      __size_of_MTOUCH_Sensor_Calibrate 0013  
                              ??_MTOUCH_Sensor_Enable 0024                     Sensor_isCalibratingAcqTime@sensor 0020  
                        __size_of_Sensor_isCalibrated 000B                              ??_Sensor_DefaultCallback 0021  
                        __end_of_Sensor_setCalibrated 1389                  __end_of_Button_Reading_Update_Helper 09D0  
               __size_of_Button_Reading_Update_Helper 0050                          _Button_Reading_Update_Helper 0980  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0077  
                       Button_State_NotPressed@button 002D                                    EUSART_Write@txData 0020  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 15D5  
                              _Button_Baseline_Update 0CF8                           MTOUCH_Button_isPressed@name 0021  
                                ??_EUSART_Receive_ISR 0078                            ??_MTOUCH_Sensor_wasSampled 0024  
                                       ?_LED_DOWN_OFF 0077                                          ?_LED_DOWN_ON 0077  
