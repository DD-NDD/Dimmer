

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Jul 06 21:18:11 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    27                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    28                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    29                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    30                           	psect	text1,local,class=CODE,merge=1,delta=2
    31                           	psect	text2,local,class=CODE,merge=1,delta=2
    32                           	psect	text3,local,class=CODE,merge=1,delta=2
    33                           	psect	text4,local,class=CODE,merge=1,delta=2
    34                           	psect	text5,local,class=CODE,merge=1,delta=2
    35                           	psect	text6,local,class=CODE,merge=1,delta=2
    36                           	psect	text7,local,class=CODE,merge=1,delta=2
    37                           	psect	text8,local,class=CODE,merge=1,delta=2
    38                           	psect	text9,local,class=CODE,merge=1,delta=2
    39                           	psect	text10,local,class=CODE,merge=1,delta=2
    40                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text12,local,class=CODE,merge=1,delta=2
    42                           	psect	text13,local,class=CODE,merge=1,delta=2
    43                           	psect	text14,local,class=CODE,merge=1,delta=2
    44                           	psect	text15,local,class=CODE,merge=1,delta=2
    45                           	psect	text16,local,class=CODE,merge=1,delta=2
    46                           	psect	text17,local,class=CODE,merge=1,delta=2
    47                           	psect	text18,local,class=CODE,merge=1,delta=2
    48                           	psect	text19,local,class=CODE,merge=1,delta=2
    49                           	psect	text20,local,class=CODE,merge=1,delta=2
    50                           	psect	text21,local,class=CODE,merge=1,delta=2
    51                           	psect	text22,local,class=CODE,merge=1,delta=2
    52                           	psect	text23,local,class=CODE,merge=1,delta=2
    53                           	psect	text24,local,class=CODE,merge=1,delta=2
    54                           	psect	text25,local,class=CODE,merge=1,delta=2
    55                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text27,local,class=CODE,merge=1,delta=2
    57                           	psect	text28,local,class=CODE,merge=1,delta=2
    58                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text30,local,class=CODE,merge=1,delta=2
    60                           	psect	text31,local,class=CODE,merge=1,delta=2
    61                           	psect	text32,local,class=CODE,merge=1,delta=2
    62                           	psect	text33,local,class=CODE,merge=1,delta=2
    63                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text36,local,class=CODE,merge=1,delta=2
    66                           	psect	text37,local,class=CODE,merge=1,delta=2
    67                           	psect	text38,local,class=CODE,merge=1,delta=2
    68                           	psect	text39,local,class=CODE,merge=1,delta=2
    69                           	psect	text40,local,class=CODE,merge=1,delta=2
    70                           	psect	text41,local,class=CODE,merge=1,delta=2
    71                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text43,local,class=CODE,merge=1,delta=2
    73                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text45,local,class=CODE,merge=1,delta=2
    75                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text49,local,class=CODE,merge=1,delta=2
    79                           	psect	text50,local,class=CODE,merge=1,delta=2
    80                           	psect	text51,local,class=CODE,merge=1,delta=2
    81                           	psect	text52,local,class=CODE,merge=1,delta=2
    82                           	psect	text53,local,class=CODE,merge=1,delta=2
    83                           	psect	text54,local,class=CODE,merge=1,delta=2
    84                           	psect	text55,local,class=CODE,merge=1,delta=2
    85                           	psect	text56,local,class=CODE,merge=1,delta=2
    86                           	psect	text57,local,class=CODE,merge=1,delta=2
    87                           	psect	text58,local,class=CODE,merge=1,delta=2
    88                           	psect	text59,local,class=CODE,merge=1,delta=2
    89                           	psect	text60,local,class=CODE,merge=1,delta=2
    90                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text62,local,class=CODE,merge=1,delta=2
    92                           	psect	text63,local,class=CODE,merge=1,delta=2
    93                           	psect	text64,local,class=CODE,merge=1,delta=2
    94                           	psect	text65,local,class=CODE,merge=1,delta=2
    95                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
    96                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text69,local,class=CODE,merge=1,delta=2
    99                           	psect	text70,local,class=CODE,merge=1,delta=2
   100                           	psect	text71,local,class=CODE,merge=1,delta=2,group=2
   101                           	psect	text72,local,class=CODE,merge=1,delta=2,group=1
   102                           	psect	text73,local,class=CODE,merge=1,delta=2,group=1
   103                           	psect	text74,local,class=CODE,merge=1,delta=2
   104                           	psect	text75,local,class=CODE,merge=1,delta=2
   105                           	psect	text76,local,class=CODE,merge=1,delta=2
   106                           	psect	text77,local,class=CODE,merge=1,delta=2
   107                           	psect	text78,local,class=CODE,merge=1,delta=2
   108                           	psect	text79,local,class=CODE,merge=1,delta=2
   109                           	psect	text80,local,class=CODE,merge=1,delta=2
   110                           	psect	text81,local,class=CODE,merge=1,delta=2
   111                           	psect	text82,local,class=CODE,merge=1,delta=2
   112                           	psect	text83,local,class=CODE,merge=1,delta=2,group=1
   113                           	psect	text84,local,class=CODE,merge=1,delta=2
   114                           	psect	text85,local,class=CODE,merge=1,delta=2
   115                           	psect	text86,local,class=CODE,merge=1,delta=2
   116                           	psect	intentry,global,class=CODE,delta=2
   117                           	psect	text88,local,class=CODE,merge=1,delta=2
   118                           	psect	text89,local,class=CODE,merge=1,delta=2
   119                           	psect	text90,local,class=CODE,merge=1,delta=2
   120                           	psect	text91,local,class=CODE,merge=1,delta=2
   121                           	psect	text92,local,class=CODE,merge=1,delta=2
   122                           	psect	text93,local,class=CODE,merge=1,delta=2
   123                           	psect	text94,local,class=CODE,merge=1,delta=2
   124                           	psect	text95,local,class=CODE,merge=1,delta=2
   125                           	psect	text96,local,class=CODE,merge=1,delta=2
   126                           	dabs	1,0x7E,2
   127  0000                     
   128                           ; Version 2.05
   129                           ; Generated 20/12/2018 GMT
   130                           ; 
   131                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   132                           ; All rights reserved.
   133                           ; 
   134                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   135                           ; 
   136                           ; Redistribution and use in source and binary forms, with or without modification, are
   137                           ; permitted provided that the following conditions are met:
   138                           ; 
   139                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   140                           ;        conditions and the following disclaimer.
   141                           ; 
   142                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   143                           ;        of conditions and the following disclaimer in the documentation and/or other
   144                           ;        materials provided with the distribution.
   145                           ; 
   146                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   147                           ;        software without specific prior written permission.
   148                           ; 
   149                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   150                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   151                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   152                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   153                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   154                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   155                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   156                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   157                           ; 
   158                           ; 
   159                           ; Code-generator required, PIC16LF1559 Definitions
   160                           ; 
   161                           ; SFR Addresses
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001C                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  0116                     	;# 
   208  0117                     	;# 
   209  011D                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  018E                     	;# 
   213  0191                     	;# 
   214  0191                     	;# 
   215  0192                     	;# 
   216  0193                     	;# 
   217  0193                     	;# 
   218  0194                     	;# 
   219  0195                     	;# 
   220  0196                     	;# 
   221  0199                     	;# 
   222  019A                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019C                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  020C                     	;# 
   230  020D                     	;# 
   231  0211                     	;# 
   232  0211                     	;# 
   233  0212                     	;# 
   234  0212                     	;# 
   235  0213                     	;# 
   236  0213                     	;# 
   237  0214                     	;# 
   238  0214                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0216                     	;# 
   243  0216                     	;# 
   244  0217                     	;# 
   245  0217                     	;# 
   246  0391                     	;# 
   247  0392                     	;# 
   248  0393                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0611                     	;# 
   253  0612                     	;# 
   254  0613                     	;# 
   255  0613                     	;# 
   256  0614                     	;# 
   257  0615                     	;# 
   258  0616                     	;# 
   259  0616                     	;# 
   260  0711                     	;# 
   261  0711                     	;# 
   262  0711                     	;# 
   263  0712                     	;# 
   264  0712                     	;# 
   265  0713                     	;# 
   266  0713                     	;# 
   267  0713                     	;# 
   268  0714                     	;# 
   269  0714                     	;# 
   270  0714                     	;# 
   271  0715                     	;# 
   272  0715                     	;# 
   273  0716                     	;# 
   274  0716                     	;# 
   275  0716                     	;# 
   276  0716                     	;# 
   277  0717                     	;# 
   278  0717                     	;# 
   279  0717                     	;# 
   280  0717                     	;# 
   281  0718                     	;# 
   282  0718                     	;# 
   283  0718                     	;# 
   284  0719                     	;# 
   285  0719                     	;# 
   286  0719                     	;# 
   287  0719                     	;# 
   288  071A                     	;# 
   289  071A                     	;# 
   290  071A                     	;# 
   291  071A                     	;# 
   292  071A                     	;# 
   293  071B                     	;# 
   294  071B                     	;# 
   295  071C                     	;# 
   296  071C                     	;# 
   297  071C                     	;# 
   298  071C                     	;# 
   299  071C                     	;# 
   300  071D                     	;# 
   301  071D                     	;# 
   302  071E                     	;# 
   303  071E                     	;# 
   304  0791                     	;# 
   305  0791                     	;# 
   306  0793                     	;# 
   307  0793                     	;# 
   308  0794                     	;# 
   309  0794                     	;# 
   310  0796                     	;# 
   311  0796                     	;# 
   312  0796                     	;# 
   313  0797                     	;# 
   314  0797                     	;# 
   315  0797                     	;# 
   316  0798                     	;# 
   317  0798                     	;# 
   318  0799                     	;# 
   319  0799                     	;# 
   320  0799                     	;# 
   321  079A                     	;# 
   322  079A                     	;# 
   323  079A                     	;# 
   324  079B                     	;# 
   325  079C                     	;# 
   326  079C                     	;# 
   327  079C                     	;# 
   328  079D                     	;# 
   329  079E                     	;# 
   330  079E                     	;# 
   331  0F8C                     	;# 
   332  0F8D                     	;# 
   333  0F91                     	;# 
   334  0F96                     	;# 
   335  0F97                     	;# 
   336  0F9C                     	;# 
   337  0F9D                     	;# 
   338  0F9E                     	;# 
   339  0FE3                     	;# 
   340  0FE4                     	;# 
   341  0FE5                     	;# 
   342  0FE6                     	;# 
   343  0FE7                     	;# 
   344  0FE8                     	;# 
   345  0FE9                     	;# 
   346  0FEA                     	;# 
   347  0FEB                     	;# 
   348  0FED                     	;# 
   349  0FEE                     	;# 
   350  0FEF                     	;# 
   351  0000                     	;# 
   352  0001                     	;# 
   353  0002                     	;# 
   354  0003                     	;# 
   355  0004                     	;# 
   356  0005                     	;# 
   357  0006                     	;# 
   358  0007                     	;# 
   359  0008                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000D                     	;# 
   365  000E                     	;# 
   366  0011                     	;# 
   367  0012                     	;# 
   368  0015                     	;# 
   369  0016                     	;# 
   370  0016                     	;# 
   371  0017                     	;# 
   372  0018                     	;# 
   373  0019                     	;# 
   374  001A                     	;# 
   375  001B                     	;# 
   376  001C                     	;# 
   377  008C                     	;# 
   378  008D                     	;# 
   379  008E                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0099                     	;# 
   386  009A                     	;# 
   387  009B                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  009F                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  0116                     	;# 
   397  0117                     	;# 
   398  011D                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401  018E                     	;# 
   402  0191                     	;# 
   403  0191                     	;# 
   404  0192                     	;# 
   405  0193                     	;# 
   406  0193                     	;# 
   407  0194                     	;# 
   408  0195                     	;# 
   409  0196                     	;# 
   410  0199                     	;# 
   411  019A                     	;# 
   412  019B                     	;# 
   413  019B                     	;# 
   414  019C                     	;# 
   415  019D                     	;# 
   416  019E                     	;# 
   417  019F                     	;# 
   418  020C                     	;# 
   419  020D                     	;# 
   420  0211                     	;# 
   421  0211                     	;# 
   422  0212                     	;# 
   423  0212                     	;# 
   424  0213                     	;# 
   425  0213                     	;# 
   426  0214                     	;# 
   427  0214                     	;# 
   428  0215                     	;# 
   429  0215                     	;# 
   430  0215                     	;# 
   431  0216                     	;# 
   432  0216                     	;# 
   433  0217                     	;# 
   434  0217                     	;# 
   435  0391                     	;# 
   436  0392                     	;# 
   437  0393                     	;# 
   438  0394                     	;# 
   439  0395                     	;# 
   440  0396                     	;# 
   441  0611                     	;# 
   442  0612                     	;# 
   443  0613                     	;# 
   444  0613                     	;# 
   445  0614                     	;# 
   446  0615                     	;# 
   447  0616                     	;# 
   448  0616                     	;# 
   449  0711                     	;# 
   450  0711                     	;# 
   451  0711                     	;# 
   452  0712                     	;# 
   453  0712                     	;# 
   454  0713                     	;# 
   455  0713                     	;# 
   456  0713                     	;# 
   457  0714                     	;# 
   458  0714                     	;# 
   459  0714                     	;# 
   460  0715                     	;# 
   461  0715                     	;# 
   462  0716                     	;# 
   463  0716                     	;# 
   464  0716                     	;# 
   465  0716                     	;# 
   466  0717                     	;# 
   467  0717                     	;# 
   468  0717                     	;# 
   469  0717                     	;# 
   470  0718                     	;# 
   471  0718                     	;# 
   472  0718                     	;# 
   473  0719                     	;# 
   474  0719                     	;# 
   475  0719                     	;# 
   476  0719                     	;# 
   477  071A                     	;# 
   478  071A                     	;# 
   479  071A                     	;# 
   480  071A                     	;# 
   481  071A                     	;# 
   482  071B                     	;# 
   483  071B                     	;# 
   484  071C                     	;# 
   485  071C                     	;# 
   486  071C                     	;# 
   487  071C                     	;# 
   488  071C                     	;# 
   489  071D                     	;# 
   490  071D                     	;# 
   491  071E                     	;# 
   492  071E                     	;# 
   493  0791                     	;# 
   494  0791                     	;# 
   495  0793                     	;# 
   496  0793                     	;# 
   497  0794                     	;# 
   498  0794                     	;# 
   499  0796                     	;# 
   500  0796                     	;# 
   501  0796                     	;# 
   502  0797                     	;# 
   503  0797                     	;# 
   504  0797                     	;# 
   505  0798                     	;# 
   506  0798                     	;# 
   507  0799                     	;# 
   508  0799                     	;# 
   509  0799                     	;# 
   510  079A                     	;# 
   511  079A                     	;# 
   512  079A                     	;# 
   513  079B                     	;# 
   514  079C                     	;# 
   515  079C                     	;# 
   516  079C                     	;# 
   517  079D                     	;# 
   518  079E                     	;# 
   519  079E                     	;# 
   520  0F8C                     	;# 
   521  0F8D                     	;# 
   522  0F91                     	;# 
   523  0F96                     	;# 
   524  0F97                     	;# 
   525  0F9C                     	;# 
   526  0F9D                     	;# 
   527  0F9E                     	;# 
   528  0FE3                     	;# 
   529  0FE4                     	;# 
   530  0FE5                     	;# 
   531  0FE6                     	;# 
   532  0FE7                     	;# 
   533  0FE8                     	;# 
   534  0FE9                     	;# 
   535  0FEA                     	;# 
   536  0FEB                     	;# 
   537  0FED                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540  0000                     	;# 
   541  0001                     	;# 
   542  0002                     	;# 
   543  0003                     	;# 
   544  0004                     	;# 
   545  0005                     	;# 
   546  0006                     	;# 
   547  0007                     	;# 
   548  0008                     	;# 
   549  0009                     	;# 
   550  000A                     	;# 
   551  000B                     	;# 
   552  000C                     	;# 
   553  000D                     	;# 
   554  000E                     	;# 
   555  0011                     	;# 
   556  0012                     	;# 
   557  0015                     	;# 
   558  0016                     	;# 
   559  0016                     	;# 
   560  0017                     	;# 
   561  0018                     	;# 
   562  0019                     	;# 
   563  001A                     	;# 
   564  001B                     	;# 
   565  001C                     	;# 
   566  008C                     	;# 
   567  008D                     	;# 
   568  008E                     	;# 
   569  0091                     	;# 
   570  0092                     	;# 
   571  0095                     	;# 
   572  0096                     	;# 
   573  0097                     	;# 
   574  0099                     	;# 
   575  009A                     	;# 
   576  009B                     	;# 
   577  009B                     	;# 
   578  009C                     	;# 
   579  009D                     	;# 
   580  009E                     	;# 
   581  009F                     	;# 
   582  010C                     	;# 
   583  010D                     	;# 
   584  010E                     	;# 
   585  0116                     	;# 
   586  0117                     	;# 
   587  011D                     	;# 
   588  018C                     	;# 
   589  018D                     	;# 
   590  018E                     	;# 
   591  0191                     	;# 
   592  0191                     	;# 
   593  0192                     	;# 
   594  0193                     	;# 
   595  0193                     	;# 
   596  0194                     	;# 
   597  0195                     	;# 
   598  0196                     	;# 
   599  0199                     	;# 
   600  019A                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019C                     	;# 
   604  019D                     	;# 
   605  019E                     	;# 
   606  019F                     	;# 
   607  020C                     	;# 
   608  020D                     	;# 
   609  0211                     	;# 
   610  0211                     	;# 
   611  0212                     	;# 
   612  0212                     	;# 
   613  0213                     	;# 
   614  0213                     	;# 
   615  0214                     	;# 
   616  0214                     	;# 
   617  0215                     	;# 
   618  0215                     	;# 
   619  0215                     	;# 
   620  0216                     	;# 
   621  0216                     	;# 
   622  0217                     	;# 
   623  0217                     	;# 
   624  0391                     	;# 
   625  0392                     	;# 
   626  0393                     	;# 
   627  0394                     	;# 
   628  0395                     	;# 
   629  0396                     	;# 
   630  0611                     	;# 
   631  0612                     	;# 
   632  0613                     	;# 
   633  0613                     	;# 
   634  0614                     	;# 
   635  0615                     	;# 
   636  0616                     	;# 
   637  0616                     	;# 
   638  0711                     	;# 
   639  0711                     	;# 
   640  0711                     	;# 
   641  0712                     	;# 
   642  0712                     	;# 
   643  0713                     	;# 
   644  0713                     	;# 
   645  0713                     	;# 
   646  0714                     	;# 
   647  0714                     	;# 
   648  0714                     	;# 
   649  0715                     	;# 
   650  0715                     	;# 
   651  0716                     	;# 
   652  0716                     	;# 
   653  0716                     	;# 
   654  0716                     	;# 
   655  0717                     	;# 
   656  0717                     	;# 
   657  0717                     	;# 
   658  0717                     	;# 
   659  0718                     	;# 
   660  0718                     	;# 
   661  0718                     	;# 
   662  0719                     	;# 
   663  0719                     	;# 
   664  0719                     	;# 
   665  0719                     	;# 
   666  071A                     	;# 
   667  071A                     	;# 
   668  071A                     	;# 
   669  071A                     	;# 
   670  071A                     	;# 
   671  071B                     	;# 
   672  071B                     	;# 
   673  071C                     	;# 
   674  071C                     	;# 
   675  071C                     	;# 
   676  071C                     	;# 
   677  071C                     	;# 
   678  071D                     	;# 
   679  071D                     	;# 
   680  071E                     	;# 
   681  071E                     	;# 
   682  0791                     	;# 
   683  0791                     	;# 
   684  0793                     	;# 
   685  0793                     	;# 
   686  0794                     	;# 
   687  0794                     	;# 
   688  0796                     	;# 
   689  0796                     	;# 
   690  0796                     	;# 
   691  0797                     	;# 
   692  0797                     	;# 
   693  0797                     	;# 
   694  0798                     	;# 
   695  0798                     	;# 
   696  0799                     	;# 
   697  0799                     	;# 
   698  0799                     	;# 
   699  079A                     	;# 
   700  079A                     	;# 
   701  079A                     	;# 
   702  079B                     	;# 
   703  079C                     	;# 
   704  079C                     	;# 
   705  079C                     	;# 
   706  079D                     	;# 
   707  079E                     	;# 
   708  079E                     	;# 
   709  0F8C                     	;# 
   710  0F8D                     	;# 
   711  0F91                     	;# 
   712  0F96                     	;# 
   713  0F97                     	;# 
   714  0F9C                     	;# 
   715  0F9D                     	;# 
   716  0F9E                     	;# 
   717  0FE3                     	;# 
   718  0FE4                     	;# 
   719  0FE5                     	;# 
   720  0FE6                     	;# 
   721  0FE7                     	;# 
   722  0FE8                     	;# 
   723  0FE9                     	;# 
   724  0FEA                     	;# 
   725  0FEB                     	;# 
   726  0FED                     	;# 
   727  0FEE                     	;# 
   728  0FEF                     	;# 
   729  0000                     	;# 
   730  0001                     	;# 
   731  0002                     	;# 
   732  0003                     	;# 
   733  0004                     	;# 
   734  0005                     	;# 
   735  0006                     	;# 
   736  0007                     	;# 
   737  0008                     	;# 
   738  0009                     	;# 
   739  000A                     	;# 
   740  000B                     	;# 
   741  000C                     	;# 
   742  000D                     	;# 
   743  000E                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  008E                     	;# 
   758  0091                     	;# 
   759  0092                     	;# 
   760  0095                     	;# 
   761  0096                     	;# 
   762  0097                     	;# 
   763  0099                     	;# 
   764  009A                     	;# 
   765  009B                     	;# 
   766  009B                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009E                     	;# 
   770  009F                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  010E                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018D                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0199                     	;# 
   789  019A                     	;# 
   790  019B                     	;# 
   791  019B                     	;# 
   792  019C                     	;# 
   793  019D                     	;# 
   794  019E                     	;# 
   795  019F                     	;# 
   796  020C                     	;# 
   797  020D                     	;# 
   798  0211                     	;# 
   799  0211                     	;# 
   800  0212                     	;# 
   801  0212                     	;# 
   802  0213                     	;# 
   803  0213                     	;# 
   804  0214                     	;# 
   805  0214                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0216                     	;# 
   810  0216                     	;# 
   811  0217                     	;# 
   812  0217                     	;# 
   813  0391                     	;# 
   814  0392                     	;# 
   815  0393                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0611                     	;# 
   820  0612                     	;# 
   821  0613                     	;# 
   822  0613                     	;# 
   823  0614                     	;# 
   824  0615                     	;# 
   825  0616                     	;# 
   826  0616                     	;# 
   827  0711                     	;# 
   828  0711                     	;# 
   829  0711                     	;# 
   830  0712                     	;# 
   831  0712                     	;# 
   832  0713                     	;# 
   833  0713                     	;# 
   834  0713                     	;# 
   835  0714                     	;# 
   836  0714                     	;# 
   837  0714                     	;# 
   838  0715                     	;# 
   839  0715                     	;# 
   840  0716                     	;# 
   841  0716                     	;# 
   842  0716                     	;# 
   843  0716                     	;# 
   844  0717                     	;# 
   845  0717                     	;# 
   846  0717                     	;# 
   847  0717                     	;# 
   848  0718                     	;# 
   849  0718                     	;# 
   850  0718                     	;# 
   851  0719                     	;# 
   852  0719                     	;# 
   853  0719                     	;# 
   854  0719                     	;# 
   855  071A                     	;# 
   856  071A                     	;# 
   857  071A                     	;# 
   858  071A                     	;# 
   859  071A                     	;# 
   860  071B                     	;# 
   861  071B                     	;# 
   862  071C                     	;# 
   863  071C                     	;# 
   864  071C                     	;# 
   865  071C                     	;# 
   866  071C                     	;# 
   867  071D                     	;# 
   868  071D                     	;# 
   869  071E                     	;# 
   870  071E                     	;# 
   871  0791                     	;# 
   872  0791                     	;# 
   873  0793                     	;# 
   874  0793                     	;# 
   875  0794                     	;# 
   876  0794                     	;# 
   877  0796                     	;# 
   878  0796                     	;# 
   879  0796                     	;# 
   880  0797                     	;# 
   881  0797                     	;# 
   882  0797                     	;# 
   883  0798                     	;# 
   884  0798                     	;# 
   885  0799                     	;# 
   886  0799                     	;# 
   887  0799                     	;# 
   888  079A                     	;# 
   889  079A                     	;# 
   890  079A                     	;# 
   891  079B                     	;# 
   892  079C                     	;# 
   893  079C                     	;# 
   894  079C                     	;# 
   895  079D                     	;# 
   896  079E                     	;# 
   897  079E                     	;# 
   898  0F8C                     	;# 
   899  0F8D                     	;# 
   900  0F91                     	;# 
   901  0F96                     	;# 
   902  0F97                     	;# 
   903  0F9C                     	;# 
   904  0F9D                     	;# 
   905  0F9E                     	;# 
   906  0FE3                     	;# 
   907  0FE4                     	;# 
   908  0FE5                     	;# 
   909  0FE6                     	;# 
   910  0FE7                     	;# 
   911  0FE8                     	;# 
   912  0FE9                     	;# 
   913  0FEA                     	;# 
   914  0FEB                     	;# 
   915  0FED                     	;# 
   916  0FEE                     	;# 
   917  0FEF                     	;# 
   918  0000                     	;# 
   919  0001                     	;# 
   920  0002                     	;# 
   921  0003                     	;# 
   922  0004                     	;# 
   923  0005                     	;# 
   924  0006                     	;# 
   925  0007                     	;# 
   926  0008                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  0011                     	;# 
   934  0012                     	;# 
   935  0015                     	;# 
   936  0016                     	;# 
   937  0016                     	;# 
   938  0017                     	;# 
   939  0018                     	;# 
   940  0019                     	;# 
   941  001A                     	;# 
   942  001B                     	;# 
   943  001C                     	;# 
   944  008C                     	;# 
   945  008D                     	;# 
   946  008E                     	;# 
   947  0091                     	;# 
   948  0092                     	;# 
   949  0095                     	;# 
   950  0096                     	;# 
   951  0097                     	;# 
   952  0099                     	;# 
   953  009A                     	;# 
   954  009B                     	;# 
   955  009B                     	;# 
   956  009C                     	;# 
   957  009D                     	;# 
   958  009E                     	;# 
   959  009F                     	;# 
   960  010C                     	;# 
   961  010D                     	;# 
   962  010E                     	;# 
   963  0116                     	;# 
   964  0117                     	;# 
   965  011D                     	;# 
   966  018C                     	;# 
   967  018D                     	;# 
   968  018E                     	;# 
   969  0191                     	;# 
   970  0191                     	;# 
   971  0192                     	;# 
   972  0193                     	;# 
   973  0193                     	;# 
   974  0194                     	;# 
   975  0195                     	;# 
   976  0196                     	;# 
   977  0199                     	;# 
   978  019A                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019C                     	;# 
   982  019D                     	;# 
   983  019E                     	;# 
   984  019F                     	;# 
   985  020C                     	;# 
   986  020D                     	;# 
   987  0211                     	;# 
   988  0211                     	;# 
   989  0212                     	;# 
   990  0212                     	;# 
   991  0213                     	;# 
   992  0213                     	;# 
   993  0214                     	;# 
   994  0214                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0216                     	;# 
   999  0216                     	;# 
  1000  0217                     	;# 
  1001  0217                     	;# 
  1002  0391                     	;# 
  1003  0392                     	;# 
  1004  0393                     	;# 
  1005  0394                     	;# 
  1006  0395                     	;# 
  1007  0396                     	;# 
  1008  0611                     	;# 
  1009  0612                     	;# 
  1010  0613                     	;# 
  1011  0613                     	;# 
  1012  0614                     	;# 
  1013  0615                     	;# 
  1014  0616                     	;# 
  1015  0616                     	;# 
  1016  0711                     	;# 
  1017  0711                     	;# 
  1018  0711                     	;# 
  1019  0712                     	;# 
  1020  0712                     	;# 
  1021  0713                     	;# 
  1022  0713                     	;# 
  1023  0713                     	;# 
  1024  0714                     	;# 
  1025  0714                     	;# 
  1026  0714                     	;# 
  1027  0715                     	;# 
  1028  0715                     	;# 
  1029  0716                     	;# 
  1030  0716                     	;# 
  1031  0716                     	;# 
  1032  0716                     	;# 
  1033  0717                     	;# 
  1034  0717                     	;# 
  1035  0717                     	;# 
  1036  0717                     	;# 
  1037  0718                     	;# 
  1038  0718                     	;# 
  1039  0718                     	;# 
  1040  0719                     	;# 
  1041  0719                     	;# 
  1042  0719                     	;# 
  1043  0719                     	;# 
  1044  071A                     	;# 
  1045  071A                     	;# 
  1046  071A                     	;# 
  1047  071A                     	;# 
  1048  071A                     	;# 
  1049  071B                     	;# 
  1050  071B                     	;# 
  1051  071C                     	;# 
  1052  071C                     	;# 
  1053  071C                     	;# 
  1054  071C                     	;# 
  1055  071C                     	;# 
  1056  071D                     	;# 
  1057  071D                     	;# 
  1058  071E                     	;# 
  1059  071E                     	;# 
  1060  0791                     	;# 
  1061  0791                     	;# 
  1062  0793                     	;# 
  1063  0793                     	;# 
  1064  0794                     	;# 
  1065  0794                     	;# 
  1066  0796                     	;# 
  1067  0796                     	;# 
  1068  0796                     	;# 
  1069  0797                     	;# 
  1070  0797                     	;# 
  1071  0797                     	;# 
  1072  0798                     	;# 
  1073  0798                     	;# 
  1074  0799                     	;# 
  1075  0799                     	;# 
  1076  0799                     	;# 
  1077  079A                     	;# 
  1078  079A                     	;# 
  1079  079A                     	;# 
  1080  079B                     	;# 
  1081  079C                     	;# 
  1082  079C                     	;# 
  1083  079C                     	;# 
  1084  079D                     	;# 
  1085  079E                     	;# 
  1086  079E                     	;# 
  1087  0F8C                     	;# 
  1088  0F8D                     	;# 
  1089  0F91                     	;# 
  1090  0F96                     	;# 
  1091  0F97                     	;# 
  1092  0F9C                     	;# 
  1093  0F9D                     	;# 
  1094  0F9E                     	;# 
  1095  0FE3                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000D                     	;# 
  1121  000E                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0015                     	;# 
  1125  0016                     	;# 
  1126  0016                     	;# 
  1127  0017                     	;# 
  1128  0018                     	;# 
  1129  0019                     	;# 
  1130  001A                     	;# 
  1131  001B                     	;# 
  1132  001C                     	;# 
  1133  008C                     	;# 
  1134  008D                     	;# 
  1135  008E                     	;# 
  1136  0091                     	;# 
  1137  0092                     	;# 
  1138  0095                     	;# 
  1139  0096                     	;# 
  1140  0097                     	;# 
  1141  0099                     	;# 
  1142  009A                     	;# 
  1143  009B                     	;# 
  1144  009B                     	;# 
  1145  009C                     	;# 
  1146  009D                     	;# 
  1147  009E                     	;# 
  1148  009F                     	;# 
  1149  010C                     	;# 
  1150  010D                     	;# 
  1151  010E                     	;# 
  1152  0116                     	;# 
  1153  0117                     	;# 
  1154  011D                     	;# 
  1155  018C                     	;# 
  1156  018D                     	;# 
  1157  018E                     	;# 
  1158  0191                     	;# 
  1159  0191                     	;# 
  1160  0192                     	;# 
  1161  0193                     	;# 
  1162  0193                     	;# 
  1163  0194                     	;# 
  1164  0195                     	;# 
  1165  0196                     	;# 
  1166  0199                     	;# 
  1167  019A                     	;# 
  1168  019B                     	;# 
  1169  019B                     	;# 
  1170  019C                     	;# 
  1171  019D                     	;# 
  1172  019E                     	;# 
  1173  019F                     	;# 
  1174  020C                     	;# 
  1175  020D                     	;# 
  1176  0211                     	;# 
  1177  0211                     	;# 
  1178  0212                     	;# 
  1179  0212                     	;# 
  1180  0213                     	;# 
  1181  0213                     	;# 
  1182  0214                     	;# 
  1183  0214                     	;# 
  1184  0215                     	;# 
  1185  0215                     	;# 
  1186  0215                     	;# 
  1187  0216                     	;# 
  1188  0216                     	;# 
  1189  0217                     	;# 
  1190  0217                     	;# 
  1191  0391                     	;# 
  1192  0392                     	;# 
  1193  0393                     	;# 
  1194  0394                     	;# 
  1195  0395                     	;# 
  1196  0396                     	;# 
  1197  0611                     	;# 
  1198  0612                     	;# 
  1199  0613                     	;# 
  1200  0613                     	;# 
  1201  0614                     	;# 
  1202  0615                     	;# 
  1203  0616                     	;# 
  1204  0616                     	;# 
  1205  0711                     	;# 
  1206  0711                     	;# 
  1207  0711                     	;# 
  1208  0712                     	;# 
  1209  0712                     	;# 
  1210  0713                     	;# 
  1211  0713                     	;# 
  1212  0713                     	;# 
  1213  0714                     	;# 
  1214  0714                     	;# 
  1215  0714                     	;# 
  1216  0715                     	;# 
  1217  0715                     	;# 
  1218  0716                     	;# 
  1219  0716                     	;# 
  1220  0716                     	;# 
  1221  0716                     	;# 
  1222  0717                     	;# 
  1223  0717                     	;# 
  1224  0717                     	;# 
  1225  0717                     	;# 
  1226  0718                     	;# 
  1227  0718                     	;# 
  1228  0718                     	;# 
  1229  0719                     	;# 
  1230  0719                     	;# 
  1231  0719                     	;# 
  1232  0719                     	;# 
  1233  071A                     	;# 
  1234  071A                     	;# 
  1235  071A                     	;# 
  1236  071A                     	;# 
  1237  071A                     	;# 
  1238  071B                     	;# 
  1239  071B                     	;# 
  1240  071C                     	;# 
  1241  071C                     	;# 
  1242  071C                     	;# 
  1243  071C                     	;# 
  1244  071C                     	;# 
  1245  071D                     	;# 
  1246  071D                     	;# 
  1247  071E                     	;# 
  1248  071E                     	;# 
  1249  0791                     	;# 
  1250  0791                     	;# 
  1251  0793                     	;# 
  1252  0793                     	;# 
  1253  0794                     	;# 
  1254  0794                     	;# 
  1255  0796                     	;# 
  1256  0796                     	;# 
  1257  0796                     	;# 
  1258  0797                     	;# 
  1259  0797                     	;# 
  1260  0797                     	;# 
  1261  0798                     	;# 
  1262  0798                     	;# 
  1263  0799                     	;# 
  1264  0799                     	;# 
  1265  0799                     	;# 
  1266  079A                     	;# 
  1267  079A                     	;# 
  1268  079A                     	;# 
  1269  079B                     	;# 
  1270  079C                     	;# 
  1271  079C                     	;# 
  1272  079C                     	;# 
  1273  079D                     	;# 
  1274  079E                     	;# 
  1275  079E                     	;# 
  1276  0F8C                     	;# 
  1277  0F8D                     	;# 
  1278  0F91                     	;# 
  1279  0F96                     	;# 
  1280  0F97                     	;# 
  1281  0F9C                     	;# 
  1282  0F9D                     	;# 
  1283  0F9E                     	;# 
  1284  0FE3                     	;# 
  1285  0FE4                     	;# 
  1286  0FE5                     	;# 
  1287  0FE6                     	;# 
  1288  0FE7                     	;# 
  1289  0FE8                     	;# 
  1290  0FE9                     	;# 
  1291  0FEA                     	;# 
  1292  0FEB                     	;# 
  1293  0FED                     	;# 
  1294  0FEE                     	;# 
  1295  0FEF                     	;# 
  1296  0000                     	;# 
  1297  0001                     	;# 
  1298  0002                     	;# 
  1299  0003                     	;# 
  1300  0004                     	;# 
  1301  0005                     	;# 
  1302  0006                     	;# 
  1303  0007                     	;# 
  1304  0008                     	;# 
  1305  0009                     	;# 
  1306  000A                     	;# 
  1307  000B                     	;# 
  1308  000C                     	;# 
  1309  000D                     	;# 
  1310  000E                     	;# 
  1311  0011                     	;# 
  1312  0012                     	;# 
  1313  0015                     	;# 
  1314  0016                     	;# 
  1315  0016                     	;# 
  1316  0017                     	;# 
  1317  0018                     	;# 
  1318  0019                     	;# 
  1319  001A                     	;# 
  1320  001B                     	;# 
  1321  001C                     	;# 
  1322  008C                     	;# 
  1323  008D                     	;# 
  1324  008E                     	;# 
  1325  0091                     	;# 
  1326  0092                     	;# 
  1327  0095                     	;# 
  1328  0096                     	;# 
  1329  0097                     	;# 
  1330  0099                     	;# 
  1331  009A                     	;# 
  1332  009B                     	;# 
  1333  009B                     	;# 
  1334  009C                     	;# 
  1335  009D                     	;# 
  1336  009E                     	;# 
  1337  009F                     	;# 
  1338  010C                     	;# 
  1339  010D                     	;# 
  1340  010E                     	;# 
  1341  0116                     	;# 
  1342  0117                     	;# 
  1343  011D                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0194                     	;# 
  1353  0195                     	;# 
  1354  0196                     	;# 
  1355  0199                     	;# 
  1356  019A                     	;# 
  1357  019B                     	;# 
  1358  019B                     	;# 
  1359  019C                     	;# 
  1360  019D                     	;# 
  1361  019E                     	;# 
  1362  019F                     	;# 
  1363  020C                     	;# 
  1364  020D                     	;# 
  1365  0211                     	;# 
  1366  0211                     	;# 
  1367  0212                     	;# 
  1368  0212                     	;# 
  1369  0213                     	;# 
  1370  0213                     	;# 
  1371  0214                     	;# 
  1372  0214                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0215                     	;# 
  1376  0216                     	;# 
  1377  0216                     	;# 
  1378  0217                     	;# 
  1379  0217                     	;# 
  1380  0391                     	;# 
  1381  0392                     	;# 
  1382  0393                     	;# 
  1383  0394                     	;# 
  1384  0395                     	;# 
  1385  0396                     	;# 
  1386  0611                     	;# 
  1387  0612                     	;# 
  1388  0613                     	;# 
  1389  0613                     	;# 
  1390  0614                     	;# 
  1391  0615                     	;# 
  1392  0616                     	;# 
  1393  0616                     	;# 
  1394  0711                     	;# 
  1395  0711                     	;# 
  1396  0711                     	;# 
  1397  0712                     	;# 
  1398  0712                     	;# 
  1399  0713                     	;# 
  1400  0713                     	;# 
  1401  0713                     	;# 
  1402  0714                     	;# 
  1403  0714                     	;# 
  1404  0714                     	;# 
  1405  0715                     	;# 
  1406  0715                     	;# 
  1407  0716                     	;# 
  1408  0716                     	;# 
  1409  0716                     	;# 
  1410  0716                     	;# 
  1411  0717                     	;# 
  1412  0717                     	;# 
  1413  0717                     	;# 
  1414  0717                     	;# 
  1415  0718                     	;# 
  1416  0718                     	;# 
  1417  0718                     	;# 
  1418  0719                     	;# 
  1419  0719                     	;# 
  1420  0719                     	;# 
  1421  0719                     	;# 
  1422  071A                     	;# 
  1423  071A                     	;# 
  1424  071A                     	;# 
  1425  071A                     	;# 
  1426  071A                     	;# 
  1427  071B                     	;# 
  1428  071B                     	;# 
  1429  071C                     	;# 
  1430  071C                     	;# 
  1431  071C                     	;# 
  1432  071C                     	;# 
  1433  071C                     	;# 
  1434  071D                     	;# 
  1435  071D                     	;# 
  1436  071E                     	;# 
  1437  071E                     	;# 
  1438  0791                     	;# 
  1439  0791                     	;# 
  1440  0793                     	;# 
  1441  0793                     	;# 
  1442  0794                     	;# 
  1443  0794                     	;# 
  1444  0796                     	;# 
  1445  0796                     	;# 
  1446  0796                     	;# 
  1447  0797                     	;# 
  1448  0797                     	;# 
  1449  0797                     	;# 
  1450  0798                     	;# 
  1451  0798                     	;# 
  1452  0799                     	;# 
  1453  0799                     	;# 
  1454  0799                     	;# 
  1455  079A                     	;# 
  1456  079A                     	;# 
  1457  079A                     	;# 
  1458  079B                     	;# 
  1459  079C                     	;# 
  1460  079C                     	;# 
  1461  079C                     	;# 
  1462  079D                     	;# 
  1463  079E                     	;# 
  1464  079E                     	;# 
  1465  0F8C                     	;# 
  1466  0F8D                     	;# 
  1467  0F91                     	;# 
  1468  0F96                     	;# 
  1469  0F97                     	;# 
  1470  0F9C                     	;# 
  1471  0F9D                     	;# 
  1472  0F9E                     	;# 
  1473  0FE3                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  0011                     	;# 
  1501  0012                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008D                     	;# 
  1513  008E                     	;# 
  1514  0091                     	;# 
  1515  0092                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0099                     	;# 
  1520  009A                     	;# 
  1521  009B                     	;# 
  1522  009B                     	;# 
  1523  009C                     	;# 
  1524  009D                     	;# 
  1525  009E                     	;# 
  1526  009F                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0116                     	;# 
  1531  0117                     	;# 
  1532  011D                     	;# 
  1533  018C                     	;# 
  1534  018D                     	;# 
  1535  018E                     	;# 
  1536  0191                     	;# 
  1537  0191                     	;# 
  1538  0192                     	;# 
  1539  0193                     	;# 
  1540  0193                     	;# 
  1541  0194                     	;# 
  1542  0195                     	;# 
  1543  0196                     	;# 
  1544  0199                     	;# 
  1545  019A                     	;# 
  1546  019B                     	;# 
  1547  019B                     	;# 
  1548  019C                     	;# 
  1549  019D                     	;# 
  1550  019E                     	;# 
  1551  019F                     	;# 
  1552  020C                     	;# 
  1553  020D                     	;# 
  1554  0211                     	;# 
  1555  0211                     	;# 
  1556  0212                     	;# 
  1557  0212                     	;# 
  1558  0213                     	;# 
  1559  0213                     	;# 
  1560  0214                     	;# 
  1561  0214                     	;# 
  1562  0215                     	;# 
  1563  0215                     	;# 
  1564  0215                     	;# 
  1565  0216                     	;# 
  1566  0216                     	;# 
  1567  0217                     	;# 
  1568  0217                     	;# 
  1569  0391                     	;# 
  1570  0392                     	;# 
  1571  0393                     	;# 
  1572  0394                     	;# 
  1573  0395                     	;# 
  1574  0396                     	;# 
  1575  0611                     	;# 
  1576  0612                     	;# 
  1577  0613                     	;# 
  1578  0613                     	;# 
  1579  0614                     	;# 
  1580  0615                     	;# 
  1581  0616                     	;# 
  1582  0616                     	;# 
  1583  0711                     	;# 
  1584  0711                     	;# 
  1585  0711                     	;# 
  1586  0712                     	;# 
  1587  0712                     	;# 
  1588  0713                     	;# 
  1589  0713                     	;# 
  1590  0713                     	;# 
  1591  0714                     	;# 
  1592  0714                     	;# 
  1593  0714                     	;# 
  1594  0715                     	;# 
  1595  0715                     	;# 
  1596  0716                     	;# 
  1597  0716                     	;# 
  1598  0716                     	;# 
  1599  0716                     	;# 
  1600  0717                     	;# 
  1601  0717                     	;# 
  1602  0717                     	;# 
  1603  0717                     	;# 
  1604  0718                     	;# 
  1605  0718                     	;# 
  1606  0718                     	;# 
  1607  0719                     	;# 
  1608  0719                     	;# 
  1609  0719                     	;# 
  1610  0719                     	;# 
  1611  071A                     	;# 
  1612  071A                     	;# 
  1613  071A                     	;# 
  1614  071A                     	;# 
  1615  071A                     	;# 
  1616  071B                     	;# 
  1617  071B                     	;# 
  1618  071C                     	;# 
  1619  071C                     	;# 
  1620  071C                     	;# 
  1621  071C                     	;# 
  1622  071C                     	;# 
  1623  071D                     	;# 
  1624  071D                     	;# 
  1625  071E                     	;# 
  1626  071E                     	;# 
  1627  0791                     	;# 
  1628  0791                     	;# 
  1629  0793                     	;# 
  1630  0793                     	;# 
  1631  0794                     	;# 
  1632  0794                     	;# 
  1633  0796                     	;# 
  1634  0796                     	;# 
  1635  0796                     	;# 
  1636  0797                     	;# 
  1637  0797                     	;# 
  1638  0797                     	;# 
  1639  0798                     	;# 
  1640  0798                     	;# 
  1641  0799                     	;# 
  1642  0799                     	;# 
  1643  0799                     	;# 
  1644  079A                     	;# 
  1645  079A                     	;# 
  1646  079A                     	;# 
  1647  079B                     	;# 
  1648  079C                     	;# 
  1649  079C                     	;# 
  1650  079C                     	;# 
  1651  079D                     	;# 
  1652  079E                     	;# 
  1653  079E                     	;# 
  1654  0F8C                     	;# 
  1655  0F8D                     	;# 
  1656  0F91                     	;# 
  1657  0F96                     	;# 
  1658  0F97                     	;# 
  1659  0F9C                     	;# 
  1660  0F9D                     	;# 
  1661  0F9E                     	;# 
  1662  0FE3                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674  0000                     	;# 
  1675  0001                     	;# 
  1676  0002                     	;# 
  1677  0003                     	;# 
  1678  0004                     	;# 
  1679  0005                     	;# 
  1680  0006                     	;# 
  1681  0007                     	;# 
  1682  0008                     	;# 
  1683  0009                     	;# 
  1684  000A                     	;# 
  1685  000B                     	;# 
  1686  000C                     	;# 
  1687  000D                     	;# 
  1688  000E                     	;# 
  1689  0011                     	;# 
  1690  0012                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  008C                     	;# 
  1701  008D                     	;# 
  1702  008E                     	;# 
  1703  0091                     	;# 
  1704  0092                     	;# 
  1705  0095                     	;# 
  1706  0096                     	;# 
  1707  0097                     	;# 
  1708  0099                     	;# 
  1709  009A                     	;# 
  1710  009B                     	;# 
  1711  009B                     	;# 
  1712  009C                     	;# 
  1713  009D                     	;# 
  1714  009E                     	;# 
  1715  009F                     	;# 
  1716  010C                     	;# 
  1717  010D                     	;# 
  1718  010E                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  011D                     	;# 
  1722  018C                     	;# 
  1723  018D                     	;# 
  1724  018E                     	;# 
  1725  0191                     	;# 
  1726  0191                     	;# 
  1727  0192                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0199                     	;# 
  1734  019A                     	;# 
  1735  019B                     	;# 
  1736  019B                     	;# 
  1737  019C                     	;# 
  1738  019D                     	;# 
  1739  019E                     	;# 
  1740  019F                     	;# 
  1741  020C                     	;# 
  1742  020D                     	;# 
  1743  0211                     	;# 
  1744  0211                     	;# 
  1745  0212                     	;# 
  1746  0212                     	;# 
  1747  0213                     	;# 
  1748  0213                     	;# 
  1749  0214                     	;# 
  1750  0214                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0215                     	;# 
  1754  0216                     	;# 
  1755  0216                     	;# 
  1756  0217                     	;# 
  1757  0217                     	;# 
  1758  0391                     	;# 
  1759  0392                     	;# 
  1760  0393                     	;# 
  1761  0394                     	;# 
  1762  0395                     	;# 
  1763  0396                     	;# 
  1764  0611                     	;# 
  1765  0612                     	;# 
  1766  0613                     	;# 
  1767  0613                     	;# 
  1768  0614                     	;# 
  1769  0615                     	;# 
  1770  0616                     	;# 
  1771  0616                     	;# 
  1772  0711                     	;# 
  1773  0711                     	;# 
  1774  0711                     	;# 
  1775  0712                     	;# 
  1776  0712                     	;# 
  1777  0713                     	;# 
  1778  0713                     	;# 
  1779  0713                     	;# 
  1780  0714                     	;# 
  1781  0714                     	;# 
  1782  0714                     	;# 
  1783  0715                     	;# 
  1784  0715                     	;# 
  1785  0716                     	;# 
  1786  0716                     	;# 
  1787  0716                     	;# 
  1788  0716                     	;# 
  1789  0717                     	;# 
  1790  0717                     	;# 
  1791  0717                     	;# 
  1792  0717                     	;# 
  1793  0718                     	;# 
  1794  0718                     	;# 
  1795  0718                     	;# 
  1796  0719                     	;# 
  1797  0719                     	;# 
  1798  0719                     	;# 
  1799  0719                     	;# 
  1800  071A                     	;# 
  1801  071A                     	;# 
  1802  071A                     	;# 
  1803  071A                     	;# 
  1804  071A                     	;# 
  1805  071B                     	;# 
  1806  071B                     	;# 
  1807  071C                     	;# 
  1808  071C                     	;# 
  1809  071C                     	;# 
  1810  071C                     	;# 
  1811  071C                     	;# 
  1812  071D                     	;# 
  1813  071D                     	;# 
  1814  071E                     	;# 
  1815  071E                     	;# 
  1816  0791                     	;# 
  1817  0791                     	;# 
  1818  0793                     	;# 
  1819  0793                     	;# 
  1820  0794                     	;# 
  1821  0794                     	;# 
  1822  0796                     	;# 
  1823  0796                     	;# 
  1824  0796                     	;# 
  1825  0797                     	;# 
  1826  0797                     	;# 
  1827  0797                     	;# 
  1828  0798                     	;# 
  1829  0798                     	;# 
  1830  0799                     	;# 
  1831  0799                     	;# 
  1832  0799                     	;# 
  1833  079A                     	;# 
  1834  079A                     	;# 
  1835  079A                     	;# 
  1836  079B                     	;# 
  1837  079C                     	;# 
  1838  079C                     	;# 
  1839  079C                     	;# 
  1840  079D                     	;# 
  1841  079E                     	;# 
  1842  079E                     	;# 
  1843  0F8C                     	;# 
  1844  0F8D                     	;# 
  1845  0F91                     	;# 
  1846  0F96                     	;# 
  1847  0F97                     	;# 
  1848  0F9C                     	;# 
  1849  0F9D                     	;# 
  1850  0F9E                     	;# 
  1851  0FE3                     	;# 
  1852  0FE4                     	;# 
  1853  0FE5                     	;# 
  1854  0FE6                     	;# 
  1855  0FE7                     	;# 
  1856  0FE8                     	;# 
  1857  0FE9                     	;# 
  1858  0FEA                     	;# 
  1859  0FEB                     	;# 
  1860  0FED                     	;# 
  1861  0FEE                     	;# 
  1862  0FEF                     	;# 
  1863  0000                     	;# 
  1864  0001                     	;# 
  1865  0002                     	;# 
  1866  0003                     	;# 
  1867  0004                     	;# 
  1868  0005                     	;# 
  1869  0006                     	;# 
  1870  0007                     	;# 
  1871  0008                     	;# 
  1872  0009                     	;# 
  1873  000A                     	;# 
  1874  000B                     	;# 
  1875  000C                     	;# 
  1876  000D                     	;# 
  1877  000E                     	;# 
  1878  0011                     	;# 
  1879  0012                     	;# 
  1880  0015                     	;# 
  1881  0016                     	;# 
  1882  0016                     	;# 
  1883  0017                     	;# 
  1884  0018                     	;# 
  1885  0019                     	;# 
  1886  001A                     	;# 
  1887  001B                     	;# 
  1888  001C                     	;# 
  1889  008C                     	;# 
  1890  008D                     	;# 
  1891  008E                     	;# 
  1892  0091                     	;# 
  1893  0092                     	;# 
  1894  0095                     	;# 
  1895  0096                     	;# 
  1896  0097                     	;# 
  1897  0099                     	;# 
  1898  009A                     	;# 
  1899  009B                     	;# 
  1900  009B                     	;# 
  1901  009C                     	;# 
  1902  009D                     	;# 
  1903  009E                     	;# 
  1904  009F                     	;# 
  1905  010C                     	;# 
  1906  010D                     	;# 
  1907  010E                     	;# 
  1908  0116                     	;# 
  1909  0117                     	;# 
  1910  011D                     	;# 
  1911  018C                     	;# 
  1912  018D                     	;# 
  1913  018E                     	;# 
  1914  0191                     	;# 
  1915  0191                     	;# 
  1916  0192                     	;# 
  1917  0193                     	;# 
  1918  0193                     	;# 
  1919  0194                     	;# 
  1920  0195                     	;# 
  1921  0196                     	;# 
  1922  0199                     	;# 
  1923  019A                     	;# 
  1924  019B                     	;# 
  1925  019B                     	;# 
  1926  019C                     	;# 
  1927  019D                     	;# 
  1928  019E                     	;# 
  1929  019F                     	;# 
  1930  020C                     	;# 
  1931  020D                     	;# 
  1932  0211                     	;# 
  1933  0211                     	;# 
  1934  0212                     	;# 
  1935  0212                     	;# 
  1936  0213                     	;# 
  1937  0213                     	;# 
  1938  0214                     	;# 
  1939  0214                     	;# 
  1940  0215                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0216                     	;# 
  1944  0216                     	;# 
  1945  0217                     	;# 
  1946  0217                     	;# 
  1947  0391                     	;# 
  1948  0392                     	;# 
  1949  0393                     	;# 
  1950  0394                     	;# 
  1951  0395                     	;# 
  1952  0396                     	;# 
  1953  0611                     	;# 
  1954  0612                     	;# 
  1955  0613                     	;# 
  1956  0613                     	;# 
  1957  0614                     	;# 
  1958  0615                     	;# 
  1959  0616                     	;# 
  1960  0616                     	;# 
  1961  0711                     	;# 
  1962  0711                     	;# 
  1963  0711                     	;# 
  1964  0712                     	;# 
  1965  0712                     	;# 
  1966  0713                     	;# 
  1967  0713                     	;# 
  1968  0713                     	;# 
  1969  0714                     	;# 
  1970  0714                     	;# 
  1971  0714                     	;# 
  1972  0715                     	;# 
  1973  0715                     	;# 
  1974  0716                     	;# 
  1975  0716                     	;# 
  1976  0716                     	;# 
  1977  0716                     	;# 
  1978  0717                     	;# 
  1979  0717                     	;# 
  1980  0717                     	;# 
  1981  0717                     	;# 
  1982  0718                     	;# 
  1983  0718                     	;# 
  1984  0718                     	;# 
  1985  0719                     	;# 
  1986  0719                     	;# 
  1987  0719                     	;# 
  1988  0719                     	;# 
  1989  071A                     	;# 
  1990  071A                     	;# 
  1991  071A                     	;# 
  1992  071A                     	;# 
  1993  071A                     	;# 
  1994  071B                     	;# 
  1995  071B                     	;# 
  1996  071C                     	;# 
  1997  071C                     	;# 
  1998  071C                     	;# 
  1999  071C                     	;# 
  2000  071C                     	;# 
  2001  071D                     	;# 
  2002  071D                     	;# 
  2003  071E                     	;# 
  2004  071E                     	;# 
  2005  0791                     	;# 
  2006  0791                     	;# 
  2007  0793                     	;# 
  2008  0793                     	;# 
  2009  0794                     	;# 
  2010  0794                     	;# 
  2011  0796                     	;# 
  2012  0796                     	;# 
  2013  0796                     	;# 
  2014  0797                     	;# 
  2015  0797                     	;# 
  2016  0797                     	;# 
  2017  0798                     	;# 
  2018  0798                     	;# 
  2019  0799                     	;# 
  2020  0799                     	;# 
  2021  0799                     	;# 
  2022  079A                     	;# 
  2023  079A                     	;# 
  2024  079A                     	;# 
  2025  079B                     	;# 
  2026  079C                     	;# 
  2027  079C                     	;# 
  2028  079C                     	;# 
  2029  079D                     	;# 
  2030  079E                     	;# 
  2031  079E                     	;# 
  2032  0F8C                     	;# 
  2033  0F8D                     	;# 
  2034  0F91                     	;# 
  2035  0F96                     	;# 
  2036  0F97                     	;# 
  2037  0F9C                     	;# 
  2038  0F9D                     	;# 
  2039  0F9E                     	;# 
  2040  0FE3                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052                           
  2053                           	psect	idataBANK1
  2054  14E9                     __pidataBANK1:	
  2055                           
  2056                           ;initializer for _Button_StateMachine
  2057  14E9  3423               	retlw	low _Button_State_Initializing
  2058  14EA  340B               	retlw	high _Button_State_Initializing
  2059  14EB  3448               	retlw	low _Button_State_NotPressed
  2060  14EC  3407               	retlw	high _Button_State_NotPressed
  2061  14ED  34F4               	retlw	low _Button_State_Pressed
  2062  14EE  340B               	retlw	high _Button_State_Pressed
  2063                           
  2064                           ;initializer for _callback_notPressed
  2065  14EF  342F               	retlw	low _Button_DefaultCallback
  2066  14F0  3414               	retlw	high _Button_DefaultCallback
  2067                           
  2068                           ;initializer for _callback_pressed
  2069  14F1  342F               	retlw	low _Button_DefaultCallback
  2070  14F2  3414               	retlw	high _Button_DefaultCallback
  2071                           
  2072                           ;initializer for _callback_sampled
  2073  14F3  3430               	retlw	low _Sensor_DefaultCallback
  2074  14F4  3414               	retlw	high _Sensor_DefaultCallback
  2075                           
  2076                           ;initializer for _sample_period
  2077  14F5  34AE               	retlw	174
  2078                           
  2079                           	psect	idataBANK2
  2080  16D8                     __pidataBANK2:	
  2081                           
  2082                           ;initializer for _mtouch_sensor
  2083  16D8  3400               	retlw	0
  2084  16D9  3469               	retlw	105
  2085  16DA  3430               	retlw	48
  2086  16DB  3410               	retlw	16
  2087  16DC  3420               	retlw	32
  2088  16DD  3400               	retlw	0
  2089  16DE  3400               	retlw	0
  2090  16DF  3400               	retlw	0
  2091  16E0  3400               	retlw	0
  2092  16E1  3401               	retlw	1
  2093  16E2  3431               	retlw	49
  2094  16E3  3430               	retlw	48
  2095  16E4  3410               	retlw	16
  2096  16E5  3420               	retlw	32
  2097  16E6  3400               	retlw	0
  2098  16E7  3400               	retlw	0
  2099  16E8  3400               	retlw	0
  2100  16E9  3400               	retlw	0
  2101  16EA  3402               	retlw	2
  2102  16EB  3461               	retlw	97
  2103  16EC  3430               	retlw	48
  2104  16ED  3410               	retlw	16
  2105  16EE  3420               	retlw	32
  2106  16EF  3400               	retlw	0
  2107  16F0  3400               	retlw	0
  2108  16F1  3400               	retlw	0
  2109  16F2  3400               	retlw	0
  2110                           
  2111                           	psect	stringtext1
  2112  184B                     __pstringtext1:	
  2113  184B                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2114  184B  3400               	retlw	0
  2115  184C  340D               	retlw	13
  2116  184D  341C               	retlw	28
  2117  184E  341E               	retlw	30
  2118  184F  3417               	retlw	23
  2119  1850                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2120                           
  2121                           	psect	stringtext2
  2122  1850                     __pstringtext2:	
  2123  1850                     _sensor_scan_group:	
  2124  1850  3429               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2125  1851  3420               	retlw	low (_mtouch_sensor| (0+256))
  2126  1852  3400               	retlw	0
  2127  1853  3432               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2128  1854                     __end_of_sensor_scan_group:	
  2129                           
  2130                           	psect	stringtext3
  2131  1000                     __pstringtext3:	
  2132  1000                     _mtouch_button_init:	
  2133  1000  3400               	retlw	0
  2134  1001  3402               	retlw	2
  2135  1002  3400               	retlw	0
  2136  1003  3400               	retlw	0
  2137  1004  3400               	retlw	0
  2138  1005  3400               	retlw	0
  2139  1006  3400               	retlw	0
  2140  1007  3400               	retlw	0
  2141  1008  3400               	retlw	0
  2142  1009  3400               	retlw	0
  2143  100A  3400               	retlw	0
  2144  100B  3400               	retlw	0
  2145  100C  3400               	retlw	0
  2146  100D  3400               	retlw	0
  2147  100E  3464               	retlw	100
  2148  100F  3401               	retlw	1
  2149  1010  3401               	retlw	1
  2150  1011  3400               	retlw	0
  2151  1012  3400               	retlw	0
  2152  1013  3400               	retlw	0
  2153  1014  3400               	retlw	0
  2154  1015  3400               	retlw	0
  2155  1016  3400               	retlw	0
  2156  1017  3400               	retlw	0
  2157  1018  3400               	retlw	0
  2158  1019  3400               	retlw	0
  2159  101A  3400               	retlw	0
  2160  101B  3400               	retlw	0
  2161  101C  3400               	retlw	0
  2162  101D  3400               	retlw	0
  2163  101E  3464               	retlw	100
  2164  101F  3401               	retlw	1
  2165  1020  3402               	retlw	2
  2166  1021  3401               	retlw	1
  2167  1022  3400               	retlw	0
  2168  1023  3400               	retlw	0
  2169  1024  3400               	retlw	0
  2170  1025  3400               	retlw	0
  2171  1026  3400               	retlw	0
  2172  1027  3400               	retlw	0
  2173  1028  3400               	retlw	0
  2174  1029  3400               	retlw	0
  2175  102A  3400               	retlw	0
  2176  102B  3400               	retlw	0
  2177  102C  3400               	retlw	0
  2178  102D  3400               	retlw	0
  2179  102E  3464               	retlw	100
  2180  102F  3401               	retlw	1
  2181  1030                     __end_of_mtouch_button_init:	
  2182                           
  2183                           	psect	nvBANK1
  2184  00E9                     __pnvBANK1:	
  2185  00E9                     _INT_InterruptHandler:	
  2186  00E9                     	ds	2
  2187  00EB                     _EUSART_RxDefaultInterruptHandler:	
  2188  00EB                     	ds	2
  2189  00ED                     _EUSART_TxDefaultInterruptHandler:	
  2190  00ED                     	ds	2
  2191  00EF                     _eusartTxBufferRemaining:	
  2192  00EF                     	ds	1
  2193                           
  2194                           	psect	nvBANK2
  2195  014B                     __pnvBANK2:	
  2196  014B                     _EUSART_ErrorHandler:	
  2197  014B                     	ds	2
  2198  014D                     _EUSART_OverrunErrorHandler:	
  2199  014D                     	ds	2
  2200  014F                     _EUSART_FramingErrorHandler:	
  2201  014F                     	ds	2
  2202  001C                     _T2CON	set	28
  2203  001A                     _TMR2	set	26
  2204  001B                     _PR2	set	27
  2205  000B                     _INTCONbits	set	11
  2206  0012                     _PIR2bits	set	18
  2207  0011                     _PIR1bits	set	17
  2208  001C                     _T2CONbits	set	28
  2209  005F                     _GIE	set	95
  2210  008E                     _TRISC	set	142
  2211  008D                     _TRISB	set	141
  2212  008C                     _TRISA	set	140
  2213  0097                     _WDTCON	set	151
  2214  0099                     _OSCCON	set	153
  2215  0095                     _OPTION_REGbits	set	149
  2216  0091                     _PIE1bits	set	145
  2217  011D                     _APFCON	set	285
  2218  010E                     _LATC	set	270
  2219  010D                     _LATB	set	269
  2220  010C                     _LATA	set	268
  2221  0116                     _BORCON	set	278
  2222  011D                     _APFCONbits	set	285
  2223  018C                     _ANSELA	set	396
  2224  018D                     _ANSELB	set	397
  2225  018E                     _ANSELC	set	398
  2226  0199                     _RCREG	set	409
  2227  019D                     _RCSTAbits	set	413
  2228  019A                     _TXREG	set	410
  2229  019E                     _TXSTAbits	set	414
  2230  019C                     _SPBRGH	set	412
  2231  019B                     _SPBRGL	set	411
  2232  019E                     _TXSTA	set	414
  2233  019D                     _RCSTA	set	413
  2234  019F                     _BAUDCON	set	415
  2235  020C                     _WPUA	set	524
  2236  020D                     _WPUB	set	525
  2237  071A                     _AAD1RES0	set	1818
  2238  0711                     _AD1CON0bits	set	1809
  2239  0714                     _AAD1CON3	set	1812
  2240  0713                     _AD1CON2	set	1811
  2241  0717                     _AD1ACQCON	set	1815
  2242  0716                     _AD1PRECON	set	1814
  2243  0718                     _AAD1GRD	set	1816
  2244  0713                     _AAD1CON2	set	1811
  2245  0719                     _AAD1CAP	set	1817
  2246  0714                     _AD1CON3	set	1812
  2247  0712                     _ADCOMCON	set	1810
  2248  0711                     _AD1CON0	set	1809
  2249  079A                     _AAD2RES0	set	1946
  2250  0791                     _AD2CON0bits	set	1937
  2251  0797                     _AD2ACQCON	set	1943
  2252  0796                     _AD2PRECON	set	1942
  2253  0794                     _AAD2CON3	set	1940
  2254  0798                     _AAD2GRD	set	1944
  2255  0793                     _AD2CON2	set	1939
  2256  0794                     _AD2CON3	set	1940
  2257  0791                     _AD2CON0	set	1937
  2258                           
  2259                           	psect	stringtext4
  2260  1800                     __pstringtext4:	
  2261  1800                     STR_7:	
  2262  1800  346C               	retlw	108	;'l'
  2263  1801  3461               	retlw	97	;'a'
  2264  1802  3473               	retlw	115	;'s'
  2265  1803  3474               	retlw	116	;'t'
  2266  1804  346C               	retlw	108	;'l'
  2267  1805  3465               	retlw	101	;'e'
  2268  1806  3476               	retlw	118	;'v'
  2269  1807  3465               	retlw	101	;'e'
  2270  1808  346C               	retlw	108	;'l'
  2271  1809  342D               	retlw	45	;'-'
  2272  180A  342D               	retlw	45	;'-'
  2273  180B  3425               	retlw	37	;'%'
  2274  180C  3464               	retlw	100	;'d'
  2275  180D  347C               	retlw	124	;'|'
  2276  180E  347C               	retlw	124	;'|'
  2277  180F  347C               	retlw	124	;'|'
  2278  1810  346C               	retlw	108	;'l'
  2279  1811  3465               	retlw	101	;'e'
  2280  1812  3476               	retlw	118	;'v'
  2281  1813  3465               	retlw	101	;'e'
  2282  1814  346C               	retlw	108	;'l'
  2283  1815  342D               	retlw	45	;'-'
  2284  1816  342D               	retlw	45	;'-'
  2285  1817  3425               	retlw	37	;'%'
  2286  1818  3464               	retlw	100	;'d'
  2287  1819  340D               	retlw	13
  2288  181A  340A               	retlw	10
  2289  181B  3400               	retlw	0
  2290                           
  2291                           	psect	stringtext5
  2292  181C                     __pstringtext5:	
  2293  181C                     STR_1:	
  2294  181C  342D               	retlw	45	;'-'
  2295  181D  342D               	retlw	45	;'-'
  2296  181E  342D               	retlw	45	;'-'
  2297  181F  342D               	retlw	45	;'-'
  2298  1820  342D               	retlw	45	;'-'
  2299  1821  342D               	retlw	45	;'-'
  2300  1822  3425               	retlw	37	;'%'
  2301  1823  3464               	retlw	100	;'d'
  2302  1824  342D               	retlw	45	;'-'
  2303  1825  342D               	retlw	45	;'-'
  2304  1826  342D               	retlw	45	;'-'
  2305  1827  342D               	retlw	45	;'-'
  2306  1828  342D               	retlw	45	;'-'
  2307  1829  342D               	retlw	45	;'-'
  2308  182A  342D               	retlw	45	;'-'
  2309  182B  342D               	retlw	45	;'-'
  2310  182C  342D               	retlw	45	;'-'
  2311  182D  340D               	retlw	13
  2312  182E  340A               	retlw	10
  2313  182F  3400               	retlw	0
  2314                           
  2315                           	psect	stringtext6
  2316  1830                     __pstringtext6:	
  2317  1830                     STR_4:	
  2318  1830  342D               	retlw	45	;'-'
  2319  1831  342D               	retlw	45	;'-'
  2320  1832  342D               	retlw	45	;'-'
  2321  1833  342D               	retlw	45	;'-'
  2322  1834  344F               	retlw	79	;'O'
  2323  1835  3446               	retlw	70	;'F'
  2324  1836  3446               	retlw	70	;'F'
  2325  1837  342D               	retlw	45	;'-'
  2326  1838  342D               	retlw	45	;'-'
  2327  1839  342D               	retlw	45	;'-'
  2328  183A  342D               	retlw	45	;'-'
  2329  183B  340D               	retlw	13
  2330  183C  340A               	retlw	10
  2331  183D  3400               	retlw	0
  2332                           
  2333                           	psect	stringtext7
  2334  183E                     __pstringtext7:	
  2335  183E                     STR_6:	
  2336  183E  342D               	retlw	45	;'-'
  2337  183F  342D               	retlw	45	;'-'
  2338  1840  342D               	retlw	45	;'-'
  2339  1841  342D               	retlw	45	;'-'
  2340  1842  344F               	retlw	79	;'O'
  2341  1843  344E               	retlw	78	;'N'
  2342  1844  342D               	retlw	45	;'-'
  2343  1845  342D               	retlw	45	;'-'
  2344  1846  342D               	retlw	45	;'-'
  2345  1847  342D               	retlw	45	;'-'
  2346  1848  340D               	retlw	13
  2347  1849  340A               	retlw	10
  2348  184A  3400               	retlw	0
  2349                           
  2350                           	psect	stringtext8
  2351  0000                     __pstringtext8:	
  2352  181C                     
  2353                           ; #config settings
  2354  0000                     
  2355                           	psect	cinit
  2356  002C                     start_initialization:	
  2357  002C                     __initialization:	
  2358                           
  2359                           ; Initialize objects allocated to BANK1
  2360  002C  30E9               	movlw	low __pidataBANK1
  2361  002D  0084               	movwf	4
  2362  002E  3094               	movlw	(high __pidataBANK1)| (0+128)
  2363  002F  0085               	movwf	5
  2364  0030  30DC               	movlw	low __pdataBANK1
  2365  0031  0086               	movwf	6
  2366  0032  3000               	movlw	high __pdataBANK1
  2367  0033  0087               	movwf	7
  2368  0034  300D               	movlw	13
  2369  0035  3194  248E  3180   	fcall	init_ram
  2370                           
  2371                           ; Initialize objects allocated to BANK2
  2372  0038  30D8               	movlw	low __pidataBANK2
  2373  0039  0084               	movwf	4
  2374  003A  3096               	movlw	(high __pidataBANK2)| (0+128)
  2375  003B  0085               	movwf	5
  2376  003C  3020               	movlw	low __pdataBANK2
  2377  003D  0086               	movwf	6
  2378  003E  3001               	movlw	high __pdataBANK2
  2379  003F  0087               	movwf	7
  2380  0040  301B               	movlw	27
  2381  0041  3194  248E  3180   	fcall	init_ram
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0044  01FC               	clrf	__pbssCOMMON& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK1
  2387  0045  30A0               	movlw	low __pbssBANK1
  2388  0046  0084               	movwf	4
  2389  0047  3000               	movlw	high __pbssBANK1
  2390  0048  0085               	movwf	5
  2391  0049  3029               	movlw	41
  2392  004A  3194  2488  3180   	fcall	clear_ram0
  2393                           
  2394                           ; Clear objects allocated to BANK2
  2395  004D  303B               	movlw	low __pbssBANK2
  2396  004E  0084               	movwf	4
  2397  004F  3001               	movlw	high __pbssBANK2
  2398  0050  0085               	movwf	5
  2399  0051  3010               	movlw	16
  2400  0052  3194  2488  3180   	fcall	clear_ram0
  2401                           
  2402                           ; Clear objects allocated to BANK3
  2403  0055  30A0               	movlw	low __pbssBANK3
  2404  0056  0084               	movwf	4
  2405  0057  3001               	movlw	high __pbssBANK3
  2406  0058  0085               	movwf	5
  2407  0059  3050               	movlw	80
  2408  005A  3194  2488         	fcall	clear_ram0
  2409  005C                     end_of_initialization:	
  2410                           ;End of C runtime variable initialization code
  2411                           
  2412  005C                     __end_of__initialization:	
  2413  005C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2414  005D  0020               	movlb	0
  2415  005E  3183  2B8C         	ljmp	_main	;jump to C main() function
  2416                           
  2417                           	psect	bssCOMMON
  2418  007C                     __pbssCOMMON:	
  2419  007C                     _eusartRxHead:	
  2420  007C                     	ds	1
  2421                           
  2422                           	psect	bssBANK1
  2423  00A0                     __pbssBANK1:	
  2424  00A0                     _eusartRxStatusBuffer:	
  2425  00A0                     	ds	8
  2426  00A8                     _packet_sample:	
  2427  00A8                     	ds	4
  2428  00AC                     _nout:	
  2429  00AC                     	ds	2
  2430  00AE                     _width:	
  2431  00AE                     	ds	2
  2432  00B0                     _prec:	
  2433  00B0                     	ds	2
  2434  00B2                     _flags:	
  2435  00B2                     	ds	2
  2436  00B4                     _counter_1s:	
  2437  00B4                     	ds	2
  2438  00B6                     _last_touch_status:	
  2439  00B6                     	ds	2
  2440  00B8                     _triac_level:	
  2441  00B8                     	ds	2
  2442  00BA                     _packet_noise:	
  2443  00BA                     	ds	2
  2444  00BC                     _turn_on:	
  2445  00BC                     	ds	1
  2446  00BD                     _turn_off:	
  2447  00BD                     	ds	1
  2448  00BE                     _count_down_off:	
  2449  00BE                     	ds	1
  2450  00BF                     _counter_PRESS:	
  2451  00BF                     	ds	1
  2452  00C0                     _counter_ON_OFF:	
  2453  00C0                     	ds	1
  2454  00C1                     _eusartRxLastError:	
  2455  00C1                     	ds	1
  2456  00C2                     _eusartRxCount:	
  2457  00C2                     	ds	1
  2458  00C3                     _eusartRxTail:	
  2459  00C3                     	ds	1
  2460  00C4                     _eusartTxTail:	
  2461  00C4                     	ds	1
  2462  00C5                     _eusartTxHead:	
  2463  00C5                     	ds	1
  2464  00C6                     _sensor_globalFlags:	
  2465  00C6                     	ds	1
  2466  00C7                     _lowpowerActivated:	
  2467  00C7                     	ds	1
  2468  00C8                     _mtouch_time_toScan:	
  2469  00C8                     	ds	1
  2470                           
  2471                           	psect	dataBANK1
  2472  00DC                     __pdataBANK1:	
  2473  00DC                     _Button_StateMachine:	
  2474  00DC                     	ds	6
  2475  00E2                     _callback_notPressed:	
  2476  00E2                     	ds	2
  2477  00E4                     _callback_pressed:	
  2478  00E4                     	ds	2
  2479  00E6                     _callback_sampled:	
  2480  00E6                     	ds	2
  2481  00E8                     _sample_period:	
  2482  00E8                     	ds	1
  2483                           
  2484                           	psect	bssBANK2
  2485  013B                     __pbssBANK2:	
  2486  013B                     _eusartRxBuffer:	
  2487  013B                     	ds	8
  2488  0143                     _eusartTxBuffer:	
  2489  0143                     	ds	8
  2490                           
  2491                           	psect	dataBANK2
  2492  0120                     __pdataBANK2:	
  2493  0120                     _mtouch_sensor:	
  2494  0120                     	ds	27
  2495                           
  2496                           	psect	bssBANK3
  2497  01A0                     __pbssBANK3:	
  2498  01A0                     _mtouch_button:	
  2499  01A0                     	ds	48
  2500  01D0                     _dbuf:	
  2501  01D0                     	ds	32
  2502                           
  2503                           	psect	inittext
  2504  148E                     init_ram:	
  2505  148E  00FE               	movwf	126
  2506  148F                     initloop:	
  2507  148F  0012               	moviw fsr0++
  2508  1490  001E               	movwi fsr1++
  2509  1491  0BFE               	decfsz	126,f
  2510  1492  2C8F               	goto	initloop
  2511  1493  3400               	retlw	0
  2512                           
  2513                           	psect	clrtext
  2514  1488                     clear_ram0:	
  2515                           ;	Called with FSR0 containing the base address, and
  2516                           ;	WREG with the size to clear
  2517                           
  2518  1488  0064               	clrwdt	;clear the watchdog before getting into this loop
  2519  1489                     clrloop0:	
  2520  1489  0180               	clrf	0	;clear RAM location pointed to by FSR
  2521  148A  3101               	addfsr 0,1
  2522  148B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2523  148C  2C89               	goto	clrloop0	;have we reached the end yet?
  2524  148D  3400               	retlw	0	;all done for this memory range, return
  2525                           
  2526                           	psect	cstackBANK2
  2527  0151                     __pcstackBANK2:	
  2528  0151                     ??_MTOUCH_Service_Mainloop:	
  2529                           
  2530                           ; 1 bytes @ 0x0
  2531  0151                     	ds	1
  2532  0152                     ??_main:	
  2533                           
  2534                           ; 1 bytes @ 0x1
  2535  0152                     	ds	2
  2536                           
  2537                           	psect	cstackBANK1
  2538  00C9                     __pcstackBANK1:	
  2539  00C9                     	ds	2
  2540  00CB                     printf@ap:	
  2541                           
  2542                           ; 1 bytes @ 0x2
  2543  00CB                     	ds	1
  2544  00CC                     ?_Button_DefaultCallback:	
  2545  00CC                     ?_myButtonPressedCallback:	
  2546                           ; 1 bytes @ 0x3
  2547                           
  2548  00CC                     ?_myButtonReleasedCallback:	
  2549                           ; 1 bytes @ 0x3
  2550                           
  2551  00CC                     Button_DefaultCallback@button:	
  2552                           ; 1 bytes @ 0x3
  2553                           
  2554  00CC                     myButtonPressedCallback@button:	
  2555                           ; 1 bytes @ 0x3
  2556                           
  2557  00CC                     myButtonReleasedCallback@button:	
  2558                           ; 1 bytes @ 0x3
  2559                           
  2560                           
  2561                           ; 1 bytes @ 0x3
  2562  00CC                     	ds	1
  2563  00CD                     ??_myButtonPressedCallback:	
  2564                           
  2565                           ; 1 bytes @ 0x4
  2566  00CD                     	ds	4
  2567  00D1                     ?_Button_State_Initializing:	
  2568  00D1                     ?_Button_State_NotPressed:	
  2569                           ; 1 bytes @ 0x8
  2570                           
  2571  00D1                     ?_Button_State_Pressed:	
  2572                           ; 1 bytes @ 0x8
  2573                           
  2574  00D1                     Button_State_Initializing@button:	
  2575                           ; 1 bytes @ 0x8
  2576                           
  2577  00D1                     Button_State_NotPressed@button:	
  2578                           ; 1 bytes @ 0x8
  2579                           
  2580  00D1                     Button_State_Pressed@button:	
  2581                           ; 1 bytes @ 0x8
  2582                           
  2583                           
  2584                           ; 1 bytes @ 0x8
  2585  00D1                     	ds	1
  2586  00D2                     ??_Button_State_Initializing:	
  2587                           
  2588                           ; 1 bytes @ 0x9
  2589  00D2                     	ds	4
  2590  00D6                     ??_Button_Service:	
  2591                           
  2592                           ; 1 bytes @ 0xD
  2593  00D6                     	ds	2
  2594  00D8                     Button_Service@name:	
  2595                           
  2596                           ; 1 bytes @ 0xF
  2597  00D8                     	ds	1
  2598  00D9                     Button_Service@button:	
  2599                           
  2600                           ; 1 bytes @ 0x10
  2601  00D9                     	ds	1
  2602  00DA                     ??_MTOUCH_Button_ServiceAll:	
  2603                           
  2604                           ; 1 bytes @ 0x11
  2605  00DA                     	ds	1
  2606  00DB                     MTOUCH_Button_ServiceAll@button:	
  2607                           
  2608                           ; 1 bytes @ 0x12
  2609  00DB                     	ds	1
  2610                           
  2611                           	psect	cstackCOMMON
  2612  0070                     __pcstackCOMMON:	
  2613  0070                     ?_MTOUCH_Service_Mainloop:	
  2614  0070                     ?_MTOUCH_Button_isPressed:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0070                     ?_MTOUCH_Button_InitializeAll:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0070                     ?_MTOUCH_Button_ServiceAll:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0070                     ?_MTOUCH_needReburst:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0070                     ?_MTOUCH_Tick:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0070                     ?_MTOUCH_Button_Tick:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0070                     ?_MTOUCH_Sensor_Enable:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0070                     ?_Sensor_Sampled_Reset:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653  0070                     ?_Sensor_Service:	
  2654                           ; 1 bytes @ 0x0
  2655                           
  2656  0070                     ?_Sensor_isEnabled:	
  2657                           ; 1 bytes @ 0x0
  2658                           
  2659  0070                     ?_Sensor_RawSample_Update:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662  0070                     ?_Sensor_setSampled:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665  0070                     ?_Sensor_postAcquisitionProcess:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668  0070                     ?_Sensor_isActive:	
  2669                           ; 1 bytes @ 0x0
  2670                           
  2671  0070                     ?_Sensor_isCalibrated:	
  2672                           ; 1 bytes @ 0x0
  2673                           
  2674  0070                     ?_Sensor_setActive:	
  2675                           ; 1 bytes @ 0x0
  2676                           
  2677  0070                     ?_Sensor_setInactive:	
  2678                           ; 1 bytes @ 0x0
  2679                           
  2680  0070                     ?_Sensor_isCalibratingAcqTime:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683  0070                     ?_TMR2_LoadPeriodRegister:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0070                     ?_TMR2_StartTimer:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0070                     ?_TMR2_StopTimer:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0070                     ?_Sensor_autoCalibration:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695  0070                     ?_Sensor_setCalibratAcqTime:	
  2696                           ; 1 bytes @ 0x0
  2697                           
  2698  0070                     ?_Sensor_setCalibrated:	
  2699                           ; 1 bytes @ 0x0
  2700                           
  2701  0070                     ?_Button_Service:	
  2702                           ; 1 bytes @ 0x0
  2703                           
  2704  0070                     ?_Button_Reading_Update:	
  2705                           ; 1 bytes @ 0x0
  2706                           
  2707  0070                     ?_Button_Deviation_Update:	
  2708                           ; 1 bytes @ 0x0
  2709                           
  2710  0070                     ?_Button_Baseline_Initialize:	
  2711                           ; 1 bytes @ 0x0
  2712                           
  2713  0070                     ?_Button_Baseline_Update:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0070                     ?_Button_Tick_helper:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0070                     ?_Button_Reading_Update_Helper:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722  0070                     ?_EUSART_Receive_ISR:	
  2723                           ; 1 bytes @ 0x0
  2724                           
  2725  0070                     ?_EUSART_Transmit_ISR:	
  2726                           ; 1 bytes @ 0x0
  2727                           
  2728  0070                     ??_EUSART_Transmit_ISR:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0070                     ?_EUSART_DefaultErrorHandler:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746  0070                     ?_EUSART_RxDataHandler:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0070                     ??_EUSART_RxDataHandler:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0070                     ?_INT_CallBack:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0070                     ??_INT_CallBack:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0070                     ?_PIN_MANAGER_Initialize:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0070                     ?_OSCILLATOR_Initialize:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764  0070                     ?_WDT_Initialize:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0070                     ?_MTOUCH_Initialize:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0070                     ?_MTOUCH_Sensor_Initialize:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_Sensor_getScanGroupIndex:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_MTOUCH_Button_Initialize:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_MTOUCH_Button_Buttonmask_Get:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_EUSART_Initialize:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_EUSART_Write:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ?_putch:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?_TMR2_Initialize:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ?_INT_ISR:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     ??_INT_ISR:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806  0070                     ?_INT_DefaultInterruptHandler:	
  2807                           ; 1 bytes @ 0x0
  2808                           
  2809  0070                     ??_INT_DefaultInterruptHandler:	
  2810                           ; 1 bytes @ 0x0
  2811                           
  2812  0070                     ?_EXT_INT_Initialize:	
  2813                           ; 1 bytes @ 0x0
  2814                           
  2815  0070                     ?_INTERRUPT_InterruptManager:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0070                     ?_SYSTEM_Initialize:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821  0070                     ?_main:	
  2822                           ; 1 bytes @ 0x0
  2823                           
  2824                           
  2825                           ; 1 bytes @ 0x0
  2826  0070                     	ds	1
  2827  0071                     ??_MTOUCH_Button_isPressed:	
  2828  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2829                           ; 1 bytes @ 0x1
  2830                           
  2831  0071                     ??_MTOUCH_needReburst:	
  2832                           ; 1 bytes @ 0x1
  2833                           
  2834  0071                     ?_Sensor_DefaultCallback:	
  2835                           ; 1 bytes @ 0x1
  2836                           
  2837  0071                     ??_Sensor_Sampled_Reset:	
  2838                           ; 1 bytes @ 0x1
  2839                           
  2840  0071                     ??_Sensor_isEnabled:	
  2841                           ; 1 bytes @ 0x1
  2842                           
  2843  0071                     ??_Sensor_setSampled:	
  2844                           ; 1 bytes @ 0x1
  2845                           
  2846  0071                     ??_Sensor_isActive:	
  2847                           ; 1 bytes @ 0x1
  2848                           
  2849  0071                     ??_Sensor_isCalibrated:	
  2850                           ; 1 bytes @ 0x1
  2851                           
  2852  0071                     ??_Sensor_setActive:	
  2853                           ; 1 bytes @ 0x1
  2854                           
  2855  0071                     ??_Sensor_setInactive:	
  2856                           ; 1 bytes @ 0x1
  2857                           
  2858  0071                     ??_Sensor_isCalibratingAcqTime:	
  2859                           ; 1 bytes @ 0x1
  2860                           
  2861  0071                     ??_TMR2_LoadPeriodRegister:	
  2862                           ; 1 bytes @ 0x1
  2863                           
  2864  0071                     ??_TMR2_StartTimer:	
  2865                           ; 1 bytes @ 0x1
  2866                           
  2867  0071                     ??_TMR2_StopTimer:	
  2868                           ; 1 bytes @ 0x1
  2869                           
  2870  0071                     ??_Sensor_setCalibratAcqTime:	
  2871                           ; 1 bytes @ 0x1
  2872                           
  2873  0071                     ??_Sensor_setCalibrated:	
  2874                           ; 1 bytes @ 0x1
  2875                           
  2876  0071                     ?_memcpy:	
  2877                           ; 1 bytes @ 0x1
  2878                           
  2879  0071                     ??_Button_Deviation_Update:	
  2880                           ; 1 bytes @ 0x1
  2881                           
  2882  0071                     ??_Button_Baseline_Update:	
  2883                           ; 1 bytes @ 0x1
  2884                           
  2885  0071                     ??_Button_Tick_helper:	
  2886                           ; 1 bytes @ 0x1
  2887                           
  2888  0071                     ?_EUSART_SetRxInterruptHandler:	
  2889                           ; 1 bytes @ 0x1
  2890                           
  2891  0071                     ??_EUSART_Receive_ISR:	
  2892                           ; 1 bytes @ 0x1
  2893                           
  2894  0071                     ?_EUSART_SetTxInterruptHandler:	
  2895                           ; 1 bytes @ 0x1
  2896                           
  2897  0071                     ?_EUSART_SetFramingErrorHandler:	
  2898                           ; 1 bytes @ 0x1
  2899                           
  2900  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2901                           ; 1 bytes @ 0x1
  2902                           
  2903  0071                     ?_EUSART_SetErrorHandler:	
  2904                           ; 1 bytes @ 0x1
  2905                           
  2906  0071                     ??_EUSART_DefaultErrorHandler:	
  2907                           ; 1 bytes @ 0x1
  2908                           
  2909  0071                     ??_PIN_MANAGER_Initialize:	
  2910                           ; 1 bytes @ 0x1
  2911                           
  2912  0071                     ??_OSCILLATOR_Initialize:	
  2913                           ; 1 bytes @ 0x1
  2914                           
  2915  0071                     ??_WDT_Initialize:	
  2916                           ; 1 bytes @ 0x1
  2917                           
  2918  0071                     ??_Sensor_getScanGroupIndex:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  2922                           ; 1 bytes @ 0x1
  2923                           
  2924  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2925                           ; 1 bytes @ 0x1
  2926                           
  2927  0071                     ??_EUSART_Write:	
  2928                           ; 1 bytes @ 0x1
  2929                           
  2930  0071                     ??_TMR2_Initialize:	
  2931                           ; 1 bytes @ 0x1
  2932                           
  2933  0071                     ?_INT_SetInterruptHandler:	
  2934                           ; 1 bytes @ 0x1
  2935                           
  2936  0071                     ??_INTERRUPT_InterruptManager:	
  2937                           ; 1 bytes @ 0x1
  2938                           
  2939  0071                     ?___bmul:	
  2940                           ; 1 bytes @ 0x1
  2941                           
  2942  0071                     ??___aodiv:	
  2943                           ; 1 bytes @ 0x1
  2944                           
  2945  0071                     ??___aomod:	
  2946                           ; 1 bytes @ 0x1
  2947                           
  2948  0071                     ?_strlen:	
  2949                           ; 1 bytes @ 0x1
  2950                           
  2951  0071                     Sensor_DefaultCallback@sensor:	
  2952                           ; 2 bytes @ 0x1
  2953                           
  2954  0071                     Sensor_setActive@sensor:	
  2955                           ; 1 bytes @ 0x1
  2956                           
  2957  0071                     Sensor_setInactive@sensor:	
  2958                           ; 1 bytes @ 0x1
  2959                           
  2960  0071                     Sensor_isActive@sensor:	
  2961                           ; 1 bytes @ 0x1
  2962                           
  2963  0071                     Sensor_isCalibrated@sensor:	
  2964                           ; 1 bytes @ 0x1
  2965                           
  2966  0071                     Sensor_setCalibrated@sensor:	
  2967                           ; 1 bytes @ 0x1
  2968                           
  2969  0071                     Sensor_setCalibratAcqTime@sensor:	
  2970                           ; 1 bytes @ 0x1
  2971                           
  2972  0071                     Sensor_isCalibratingAcqTime@sensor:	
  2973                           ; 1 bytes @ 0x1
  2974                           
  2975  0071                     Sensor_Sampled_Reset@sensor:	
  2976                           ; 1 bytes @ 0x1
  2977                           
  2978  0071                     Sensor_setSampled@sensor:	
  2979                           ; 1 bytes @ 0x1
  2980                           
  2981  0071                     TMR2_LoadPeriodRegister@periodVal:	
  2982                           ; 1 bytes @ 0x1
  2983                           
  2984  0071                     ___bmul@multiplicand:	
  2985                           ; 1 bytes @ 0x1
  2986                           
  2987  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  2988                           ; 1 bytes @ 0x1
  2989                           
  2990  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  2991                           ; 2 bytes @ 0x1
  2992                           
  2993  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2994                           ; 2 bytes @ 0x1
  2995                           
  2996  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2997                           ; 2 bytes @ 0x1
  2998                           
  2999  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3000                           ; 2 bytes @ 0x1
  3001                           
  3002  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3003                           ; 2 bytes @ 0x1
  3004                           
  3005  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3006                           ; 2 bytes @ 0x1
  3007                           
  3008  0071                     INT_SetInterruptHandler@InterruptHandler:	
  3009                           ; 2 bytes @ 0x1
  3010                           
  3011  0071                     memcpy@s1:	
  3012                           ; 2 bytes @ 0x1
  3013                           
  3014                           
  3015                           ; 2 bytes @ 0x1
  3016  0071                     	ds	1
  3017  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3018  0072                     ??_Sensor_DefaultCallback:	
  3019                           ; 1 bytes @ 0x2
  3020                           
  3021  0072                     ?_Sensor_loadADCSettings:	
  3022                           ; 1 bytes @ 0x2
  3023                           
  3024  0072                     ??___bmul:	
  3025                           ; 1 bytes @ 0x2
  3026                           
  3027  0072                     Sensor_loadADCSettings@adc_index:	
  3028                           ; 1 bytes @ 0x2
  3029                           
  3030  0072                     Sensor_isEnabled@sensor:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033  0072                     MTOUCH_Button_isPressed@name:	
  3034                           ; 1 bytes @ 0x2
  3035                           
  3036  0072                     EUSART_Write@txData:	
  3037                           ; 1 bytes @ 0x2
  3038                           
  3039  0072                     ___aodiv@counter:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0072                     ___aomod@counter:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045                           
  3046                           ; 1 bytes @ 0x2
  3047  0072                     	ds	1
  3048  0073                     ??_EUSART_SetRxInterruptHandler:	
  3049  0073                     ??_EUSART_SetTxInterruptHandler:	
  3050                           ; 1 bytes @ 0x3
  3051                           
  3052  0073                     ??_EUSART_SetFramingErrorHandler:	
  3053                           ; 1 bytes @ 0x3
  3054                           
  3055  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3056                           ; 1 bytes @ 0x3
  3057                           
  3058  0073                     ??_EUSART_SetErrorHandler:	
  3059                           ; 1 bytes @ 0x3
  3060                           
  3061  0073                     ??_strlen:	
  3062                           ; 1 bytes @ 0x3
  3063                           
  3064  0073                     ??_Sensor_loadADCSettings:	
  3065                           ; 1 bytes @ 0x3
  3066                           
  3067  0073                     ??_MTOUCH_Button_Buttonmask_Get:	
  3068                           ; 1 bytes @ 0x3
  3069                           
  3070  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3071                           ; 1 bytes @ 0x3
  3072                           
  3073  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3074                           ; 1 bytes @ 0x3
  3075                           
  3076  0073                     ??_EUSART_Initialize:	
  3077                           ; 1 bytes @ 0x3
  3078                           
  3079  0073                     ??_putch:	
  3080                           ; 1 bytes @ 0x3
  3081                           
  3082  0073                     ??_INT_SetInterruptHandler:	
  3083                           ; 1 bytes @ 0x3
  3084                           
  3085  0073                     ??_EXT_INT_Initialize:	
  3086                           ; 1 bytes @ 0x3
  3087                           
  3088  0073                     Sensor_getScanGroupIndex@sensor:	
  3089                           ; 1 bytes @ 0x3
  3090                           
  3091  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3092                           ; 1 bytes @ 0x3
  3093                           
  3094  0073                     Button_Tick_helper@button:	
  3095                           ; 1 bytes @ 0x3
  3096                           
  3097  0073                     putch@txData:	
  3098                           ; 1 bytes @ 0x3
  3099                           
  3100  0073                     ___bmul@product:	
  3101                           ; 1 bytes @ 0x3
  3102                           
  3103  0073                     ___aodiv@sign:	
  3104                           ; 1 bytes @ 0x3
  3105                           
  3106  0073                     ___aomod@sign:	
  3107                           ; 1 bytes @ 0x3
  3108                           
  3109  0073                     memcpy@n:	
  3110                           ; 1 bytes @ 0x3
  3111                           
  3112                           
  3113                           ; 2 bytes @ 0x3
  3114  0073                     	ds	1
  3115  0074                     ??_MTOUCH_Button_Tick:	
  3116  0074                     ?_abs:	
  3117                           ; 1 bytes @ 0x4
  3118                           
  3119  0074                     ?_fputc:	
  3120                           ; 2 bytes @ 0x4
  3121                           
  3122  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3123                           ; 2 bytes @ 0x4
  3124                           
  3125  0074                     ___bmul@multiplier:	
  3126                           ; 1 bytes @ 0x4
  3127                           
  3128  0074                     strlen@a:	
  3129                           ; 1 bytes @ 0x4
  3130                           
  3131  0074                     abs@a:	
  3132                           ; 1 bytes @ 0x4
  3133                           
  3134  0074                     fputc@c:	
  3135                           ; 2 bytes @ 0x4
  3136                           
  3137  0074                     ___aodiv@quotient:	
  3138                           ; 2 bytes @ 0x4
  3139                           
  3140                           
  3141                           ; 8 bytes @ 0x4
  3142  0074                     	ds	1
  3143  0075                     ??_MTOUCH_Sensor_Enable:	
  3144  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3145                           ; 1 bytes @ 0x5
  3146                           
  3147  0075                     ??_Sensor_RawSample_Update:	
  3148                           ; 1 bytes @ 0x5
  3149                           
  3150  0075                     ??_memcpy:	
  3151                           ; 1 bytes @ 0x5
  3152                           
  3153  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3154                           ; 1 bytes @ 0x5
  3155                           
  3156  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3157                           ; 1 bytes @ 0x5
  3158                           
  3159  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3160                           ; 1 bytes @ 0x5
  3161                           
  3162  0075                     MTOUCH_Button_Tick@i:	
  3163                           ; 2 bytes @ 0x5
  3164                           
  3165  0075                     MTOUCH_Button_Buttonmask_Get@output:	
  3166                           ; 1 bytes @ 0x5
  3167                           
  3168  0075                     strlen@s:	
  3169                           ; 1 bytes @ 0x5
  3170                           
  3171                           
  3172                           ; 1 bytes @ 0x5
  3173  0075                     	ds	1
  3174  0076                     ??_MTOUCH_Tick:	
  3175  0076                     ??_abs:	
  3176                           ; 1 bytes @ 0x6
  3177                           
  3178  0076                     Sensor_RawSample_Update@adcIndex:	
  3179                           ; 1 bytes @ 0x6
  3180                           
  3181  0076                     MTOUCH_Sensor_Enable@sensor:	
  3182                           ; 1 bytes @ 0x6
  3183                           
  3184  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3185                           ; 1 bytes @ 0x6
  3186                           
  3187  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3188                           ; 1 bytes @ 0x6
  3189                           
  3190  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3191                           ; 1 bytes @ 0x6
  3192                           
  3193  0076                     MTOUCH_Button_Buttonmask_Get@i:	
  3194                           ; 1 bytes @ 0x6
  3195                           
  3196  0076                     memcpy@tmp:	
  3197                           ; 1 bytes @ 0x6
  3198                           
  3199  0076                     fputc@fp:	
  3200                           ; 1 bytes @ 0x6
  3201                           
  3202  0076                     _Sensor_loadADCSettings$562:	
  3203                           ; 1 bytes @ 0x6
  3204                           
  3205                           
  3206                           ; 2 bytes @ 0x6
  3207  0076                     	ds	1
  3208  0077                     ??_fputc:	
  3209  0077                     ??_MTOUCH_Sensor_Initialize:	
  3210                           ; 1 bytes @ 0x7
  3211                           
  3212  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3213                           ; 1 bytes @ 0x7
  3214                           
  3215  0077                     ??_MTOUCH_Button_Initialize:	
  3216                           ; 1 bytes @ 0x7
  3217                           
  3218  0077                     Sensor_RawSample_Update@sensor:	
  3219                           ; 1 bytes @ 0x7
  3220                           
  3221  0077                     Button_Baseline_Update@button:	
  3222                           ; 1 bytes @ 0x7
  3223                           
  3224  0077                     memcpy@s:	
  3225                           ; 1 bytes @ 0x7
  3226                           
  3227                           
  3228                           ; 2 bytes @ 0x7
  3229  0077                     	ds	1
  3230  0078                     ??_Sensor_postAcquisitionProcess:	
  3231  0078                     ??_Sensor_autoCalibration:	
  3232                           ; 1 bytes @ 0x8
  3233                           
  3234  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3235                           ; 1 bytes @ 0x8
  3236                           
  3237  0078                     Sensor_loadADCSettings@addressOffset:	
  3238                           ; 1 bytes @ 0x8
  3239                           
  3240  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3241                           ; 1 bytes @ 0x8
  3242                           
  3243                           
  3244                           ; 1 bytes @ 0x8
  3245  0078                     	ds	1
  3246  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3247  0079                     ??_Button_Reading_Update_Helper:	
  3248                           ; 1 bytes @ 0x9
  3249                           
  3250  0079                     Sensor_loadADCSettings@sensor:	
  3251                           ; 1 bytes @ 0x9
  3252                           
  3253  0079                     MTOUCH_Button_Initialize@name:	
  3254                           ; 1 bytes @ 0x9
  3255                           
  3256  0079                     Button_Baseline_Initialize@button:	
  3257                           ; 1 bytes @ 0x9
  3258                           
  3259  0079                     memcpy@d1:	
  3260                           ; 1 bytes @ 0x9
  3261                           
  3262                           
  3263                           ; 1 bytes @ 0x9
  3264  0079                     	ds	1
  3265  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3266  007A                     MTOUCH_Button_Initialize@button:	
  3267                           ; 1 bytes @ 0xA
  3268                           
  3269  007A                     memcpy@d:	
  3270                           ; 1 bytes @ 0xA
  3271                           
  3272                           
  3273                           ; 1 bytes @ 0xA
  3274  007A                     	ds	1
  3275  007B                     ??_MTOUCH_Button_InitializeAll:	
  3276  007B                     Button_Reading_Update_Helper@button:	
  3277                           ; 1 bytes @ 0xB
  3278                           
  3279                           
  3280                           ; 1 bytes @ 0xB
  3281  007B                     	ds	1
  3282  007C                     ??_Button_DefaultCallback:	
  3283  007C                     ??_Button_Reading_Update:	
  3284                           ; 1 bytes @ 0xC
  3285                           
  3286  007C                     ??_myButtonReleasedCallback:	
  3287                           ; 1 bytes @ 0xC
  3288                           
  3289  007C                     ??_MTOUCH_Initialize:	
  3290                           ; 1 bytes @ 0xC
  3291                           
  3292  007C                     ??_SYSTEM_Initialize:	
  3293                           ; 1 bytes @ 0xC
  3294                           
  3295                           
  3296                           	psect	cstackBANK0
  3297  0020                     __pcstackBANK0:	
  3298                           ; 1 bytes @ 0xC
  3299                           
  3300  0020                     ??_Button_Baseline_Initialize:	
  3301  0020                     ?_fputs:	
  3302                           ; 1 bytes @ 0x0
  3303                           
  3304  0020                     ?___aodiv:	
  3305                           ; 2 bytes @ 0x0
  3306                           
  3307  0020                     ?___aomod:	
  3308                           ; 8 bytes @ 0x0
  3309                           
  3310  0020                     MTOUCH_Button_InitializeAll@button:	
  3311                           ; 8 bytes @ 0x0
  3312                           
  3313  0020                     Button_Deviation_Update@button:	
  3314                           ; 1 bytes @ 0x0
  3315                           
  3316  0020                     Button_Reading_Update@button:	
  3317                           ; 1 bytes @ 0x0
  3318                           
  3319  0020                     fputs@fp:	
  3320                           ; 1 bytes @ 0x0
  3321                           
  3322  0020                     ___aodiv@divisor:	
  3323                           ; 1 bytes @ 0x0
  3324                           
  3325  0020                     ___aomod@divisor:	
  3326                           ; 8 bytes @ 0x0
  3327                           
  3328                           
  3329                           ; 8 bytes @ 0x0
  3330  0020                     	ds	1
  3331  0021                     ??_fputs:	
  3332  0021                     Button_Deviation_Update@deviation:	
  3333                           ; 1 bytes @ 0x1
  3334                           
  3335                           
  3336                           ; 4 bytes @ 0x1
  3337  0021                     	ds	3
  3338  0024                     fputs@c:	
  3339                           
  3340                           ; 1 bytes @ 0x4
  3341  0024                     	ds	1
  3342  0025                     fputs@i:	
  3343                           
  3344                           ; 2 bytes @ 0x5
  3345  0025                     	ds	2
  3346  0027                     fputs@s:	
  3347                           
  3348                           ; 1 bytes @ 0x7
  3349  0027                     	ds	1
  3350  0028                     ?_pad:	
  3351  0028                     pad@buf:	
  3352                           ; 2 bytes @ 0x8
  3353                           
  3354  0028                     ___aodiv@dividend:	
  3355                           ; 1 bytes @ 0x8
  3356                           
  3357  0028                     ___aomod@dividend:	
  3358                           ; 8 bytes @ 0x8
  3359                           
  3360                           
  3361                           ; 8 bytes @ 0x8
  3362  0028                     	ds	1
  3363  0029                     pad@p:	
  3364                           
  3365                           ; 2 bytes @ 0x9
  3366  0029                     	ds	2
  3367  002B                     ??_pad:	
  3368                           
  3369                           ; 1 bytes @ 0xB
  3370  002B                     	ds	1
  3371  002C                     pad@i:	
  3372                           
  3373                           ; 2 bytes @ 0xC
  3374  002C                     	ds	2
  3375  002E                     pad@w:	
  3376                           
  3377                           ; 2 bytes @ 0xE
  3378  002E                     	ds	2
  3379  0030                     Sensor_postAcquisitionProcess@adcIndex:	
  3380  0030                     Sensor_autoCalibration@adcIndex:	
  3381                           ; 1 bytes @ 0x10
  3382                           
  3383  0030                     pad@fp:	
  3384                           ; 1 bytes @ 0x10
  3385                           
  3386                           
  3387                           ; 1 bytes @ 0x10
  3388  0030                     	ds	1
  3389  0031                     ?_dtoa:	
  3390  0031                     Sensor_autoCalibration@sensor:	
  3391                           ; 2 bytes @ 0x11
  3392                           
  3393  0031                     Sensor_postAcquisitionProcess@deviation:	
  3394                           ; 1 bytes @ 0x11
  3395                           
  3396  0031                     dtoa@d:	
  3397                           ; 2 bytes @ 0x11
  3398                           
  3399                           
  3400                           ; 8 bytes @ 0x11
  3401  0031                     	ds	1
  3402  0032                     ?_Sensor_Acq_ExecutePacket:	
  3403  0032                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3404                           ; 1 bytes @ 0x12
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0x12
  3408  0032                     	ds	1
  3409  0033                     ??_Sensor_Acq_ExecutePacket:	
  3410  0033                     Sensor_postAcquisitionProcess@sensor:	
  3411                           ; 1 bytes @ 0x13
  3412                           
  3413                           
  3414                           ; 1 bytes @ 0x13
  3415  0033                     	ds	1
  3416  0034                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3417                           
  3418                           ; 1 bytes @ 0x14
  3419  0034                     	ds	1
  3420  0035                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3421                           
  3422                           ; 1 bytes @ 0x15
  3423  0035                     	ds	1
  3424  0036                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3425                           
  3426                           ; 1 bytes @ 0x16
  3427  0036                     	ds	1
  3428  0037                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3429                           
  3430                           ; 1 bytes @ 0x17
  3431  0037                     	ds	1
  3432  0038                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3433                           
  3434                           ; 1 bytes @ 0x18
  3435  0038                     	ds	1
  3436  0039                     ??_dtoa:	
  3437  0039                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3438                           ; 1 bytes @ 0x19
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x19
  3442  0039                     	ds	1
  3443  003A                     Sensor_Acq_ExecutePacket@activeSensor:	
  3444                           
  3445                           ; 1 bytes @ 0x1A
  3446  003A                     	ds	1
  3447  003B                     Sensor_Acq_ExecutePacket@last_a:	
  3448                           
  3449                           ; 2 bytes @ 0x1B
  3450  003B                     	ds	1
  3451  003C                     _dtoa$1883:	
  3452                           
  3453                           ; 2 bytes @ 0x1C
  3454  003C                     	ds	1
  3455  003D                     Sensor_Acq_ExecutePacket@last_b:	
  3456                           
  3457                           ; 2 bytes @ 0x1D
  3458  003D                     	ds	1
  3459  003E                     dtoa@fp:	
  3460                           
  3461                           ; 1 bytes @ 0x1E
  3462  003E                     	ds	1
  3463  003F                     Sensor_Acq_ExecutePacket@packet_counter:	
  3464  003F                     dtoa@p:	
  3465                           ; 1 bytes @ 0x1F
  3466                           
  3467                           
  3468                           ; 2 bytes @ 0x1F
  3469  003F                     	ds	1
  3470  0040                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3471                           
  3472                           ; 1 bytes @ 0x20
  3473  0040                     	ds	1
  3474  0041                     ?_Sensor_Scanfrequency_Evaluation:	
  3475  0041                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3476                           ; 1 bytes @ 0x21
  3477                           
  3478  0041                     dtoa@w:	
  3479                           ; 1 bytes @ 0x21
  3480                           
  3481                           
  3482                           ; 2 bytes @ 0x21
  3483  0041                     	ds	1
  3484  0042                     ??_Sensor_Scanfrequency_Evaluation:	
  3485                           
  3486                           ; 1 bytes @ 0x22
  3487  0042                     	ds	1
  3488  0043                     dtoa@s:	
  3489                           
  3490                           ; 2 bytes @ 0x23
  3491  0043                     	ds	1
  3492  0044                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3493                           
  3494                           ; 1 bytes @ 0x24
  3495  0044                     	ds	1
  3496  0045                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3497  0045                     dtoa@n:	
  3498                           ; 2 bytes @ 0x25
  3499                           
  3500                           
  3501                           ; 8 bytes @ 0x25
  3502  0045                     	ds	2
  3503  0047                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3504                           
  3505                           ; 1 bytes @ 0x27
  3506  0047                     	ds	1
  3507  0048                     Sensor_Scanfrequency_Evaluation@retry:	
  3508                           
  3509                           ; 1 bytes @ 0x28
  3510  0048                     	ds	1
  3511  0049                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3512                           
  3513                           ; 4 bytes @ 0x29
  3514  0049                     	ds	4
  3515  004D                     Sensor_Scanfrequency_Evaluation@i:	
  3516  004D                     dtoa@i:	
  3517                           ; 1 bytes @ 0x2D
  3518                           
  3519                           
  3520                           ; 2 bytes @ 0x2D
  3521  004D                     	ds	1
  3522  004E                     ?_Sensor_Acquisition:	
  3523  004E                     Sensor_Acquisition@sensor_adc2:	
  3524                           ; 1 bytes @ 0x2E
  3525                           
  3526                           
  3527                           ; 1 bytes @ 0x2E
  3528  004E                     	ds	1
  3529  004F                     ??_Sensor_Acquisition:	
  3530  004F                     ?_vfpfcnvrt:	
  3531                           ; 1 bytes @ 0x2F
  3532                           
  3533  004F                     vfpfcnvrt@fmt:	
  3534                           ; 2 bytes @ 0x2F
  3535                           
  3536                           
  3537                           ; 1 bytes @ 0x2F
  3538  004F                     	ds	1
  3539  0050                     Sensor_Acquisition@retry:	
  3540  0050                     vfpfcnvrt@ap:	
  3541                           ; 1 bytes @ 0x30
  3542                           
  3543                           
  3544                           ; 1 bytes @ 0x30
  3545  0050                     	ds	1
  3546  0051                     ??_vfpfcnvrt:	
  3547  0051                     Sensor_Acquisition@sensor_adc1:	
  3548                           ; 1 bytes @ 0x31
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0x31
  3552  0051                     	ds	1
  3553  0052                     ??_Sensor_Service:	
  3554                           
  3555                           ; 1 bytes @ 0x32
  3556  0052                     	ds	3
  3557  0055                     Sensor_Service@scanGroup:	
  3558                           
  3559                           ; 1 bytes @ 0x35
  3560  0055                     	ds	1
  3561  0056                     Sensor_Service@error:	
  3562  0056                     vfpfcnvrt@ll:	
  3563                           ; 1 bytes @ 0x36
  3564                           
  3565                           
  3566                           ; 8 bytes @ 0x36
  3567  0056                     	ds	1
  3568  0057                     Sensor_Service@sensor_adc1:	
  3569                           
  3570                           ; 1 bytes @ 0x37
  3571  0057                     	ds	1
  3572  0058                     Sensor_Service@sensor_adc2:	
  3573                           
  3574                           ; 1 bytes @ 0x38
  3575  0058                     	ds	1
  3576  0059                     ??_MTOUCH_Sensor_SampleAll:	
  3577                           
  3578                           ; 1 bytes @ 0x39
  3579  0059                     	ds	1
  3580  005A                     MTOUCH_Sensor_SampleAll@group:	
  3581                           
  3582                           ; 1 bytes @ 0x3A
  3583  005A                     	ds	4
  3584  005E                     vfpfcnvrt@fp:	
  3585                           
  3586                           ; 1 bytes @ 0x3E
  3587  005E                     	ds	1
  3588  005F                     ?_vfprintf:	
  3589  005F                     vfprintf@fmt:	
  3590                           ; 2 bytes @ 0x3F
  3591                           
  3592                           
  3593                           ; 2 bytes @ 0x3F
  3594  005F                     	ds	2
  3595  0061                     vfprintf@ap:	
  3596                           
  3597                           ; 1 bytes @ 0x41
  3598  0061                     	ds	1
  3599  0062                     ??_vfprintf:	
  3600                           
  3601                           ; 1 bytes @ 0x42
  3602  0062                     	ds	2
  3603  0064                     vfprintf@fp:	
  3604                           
  3605                           ; 1 bytes @ 0x44
  3606  0064                     	ds	1
  3607  0065                     vfprintf@cfmt:	
  3608                           
  3609                           ; 2 bytes @ 0x45
  3610  0065                     	ds	2
  3611  0067                     ?_printf:	
  3612  0067                     printf@fmt:	
  3613                           ; 2 bytes @ 0x47
  3614                           
  3615                           
  3616                           ; 2 bytes @ 0x47
  3617  0067                     	ds	6
  3618  006D                     ??_printf:	
  3619                           
  3620                           ; 1 bytes @ 0x4D
  3621  006D                     	ds	1
  3622  006E                     ??_Button_State_NotPressed:	
  3623  006E                     ??_Button_State_Pressed:	
  3624                           ; 1 bytes @ 0x4E
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x4E
  3628  006E                     	ds	2
  3629                           
  3630                           	psect	maintext
  3631  038C                     __pmaintext:	
  3632 ;;
  3633 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3634 ;;
  3635 ;; *************** function _main *****************
  3636 ;; Defined at:
  3637 ;;		line 13 in file "main.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : B1F/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3651 ;;      Params:         0       0       0       0       0       0       0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0
  3653 ;;      Temps:          0       0       0       2       0       0       0       0
  3654 ;;      Totals:         0       0       0       2       0       0       0       0
  3655 ;;Total ram usage:        2 bytes
  3656 ;; Hardware stack levels required when called:   18
  3657 ;; This function calls:
  3658 ;;		_MTOUCH_Button_Buttonmask_Get
  3659 ;;		_MTOUCH_Button_SetNotPressedCallback
  3660 ;;		_MTOUCH_Button_SetPressedCallback
  3661 ;;		_MTOUCH_Service_Mainloop
  3662 ;;		_SYSTEM_Initialize
  3663 ;;		_printf
  3664 ;; This function is called by:
  3665 ;;		Startup code after reset
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _main
  3671  038C                     _main:	
  3672                           
  3673                           ;main.c: 15:     SYSTEM_Initialize();
  3674                           
  3675                           ;incstack = 0
  3676 ;; hardware stack exceeded
  3677                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3678  038C  3195  25ED  3183   	fcall	_SYSTEM_Initialize
  3679                           
  3680                           ;main.c: 16:     (INTCONbits.GIE = 1);
  3681  038F  178B               	bsf	11,7	;volatile
  3682                           
  3683                           ;main.c: 17:     (INTCONbits.PEIE = 1);
  3684  0390  170B               	bsf	11,6	;volatile
  3685                           
  3686                           ;main.c: 18:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3687  0391  3085               	movlw	low _myButtonPressedCallback
  3688  0392  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3689  0393  300B               	movlw	high _myButtonPressedCallback
  3690  0394  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3691  0395  3194  2458  3183   	fcall	_MTOUCH_Button_SetPressedCallback
  3692                           
  3693                           ;main.c: 19:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3694  0398  3034               	movlw	low _myButtonReleasedCallback
  3695  0399  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3696  039A  3014               	movlw	high _myButtonReleasedCallback
  3697  039B  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3698  039C  3194  2452  3183   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3699                           
  3700                           ;main.c: 20:     triac_level.full = 0x00;
  3701  039F  0021               	movlb	1	; select bank1
  3702  03A0  01B8               	clrf	_triac_level^(0+128)
  3703  03A1  01B9               	clrf	(_triac_level+1)^(0+128)
  3704  03A2                     l5929:	
  3705                           
  3706                           ;main.c: 22:     {;main.c: 23:         if(MTOUCH_Service_Mainloop())
  3707  03A2  3197  272C  3183   	fcall	_MTOUCH_Service_Mainloop
  3708  03A5  3A00               	xorlw	0
  3709  03A6  1903               	skipnz
  3710  03A7  2BA2               	goto	l5929
  3711                           
  3712                           ;main.c: 24:         {;main.c: 25:             if(counter_ON_OFF == 1)
  3713  03A8  0021               	movlb	1	; select bank1
  3714  03A9  0340               	decf	_counter_ON_OFF^(0+128),w
  3715  03AA  1D03               	btfss	3,2
  3716  03AB  2BBA               	goto	l5937
  3717                           
  3718                           ;main.c: 26:             {;main.c: 27:                 counter_1s++;
  3719  03AC  3001               	movlw	1
  3720  03AD  07B4               	addwf	_counter_1s^(0+128),f
  3721  03AE  3000               	movlw	0
  3722  03AF  3DB5               	addwfc	(_counter_1s+1)^(0+128),f
  3723                           
  3724                           ;main.c: 28:                 if(counter_1s >= 200)
  3725  03B0  3000               	movlw	0
  3726  03B1  0235               	subwf	(_counter_1s+1)^(0+128),w
  3727  03B2  30C8               	movlw	200
  3728  03B3  1903               	skipnz
  3729  03B4  0234               	subwf	_counter_1s^(0+128),w
  3730  03B5  1C03               	skipc
  3731  03B6  2BBA               	goto	l5937
  3732                           
  3733                           ;main.c: 29:                 {;main.c: 30:                     counter_1s = 0;
  3734  03B7  01B4               	clrf	_counter_1s^(0+128)
  3735  03B8  01B5               	clrf	(_counter_1s+1)^(0+128)
  3736                           
  3737                           ;main.c: 31:                     counter_ON_OFF = 0;
  3738  03B9  01C0               	clrf	_counter_ON_OFF^(0+128)
  3739  03BA                     l5937:	
  3740                           
  3741                           ;main.c: 34:             if(last_touch_status.CS1 == 1)
  3742  03BA  1CB6               	btfss	_last_touch_status^(0+128),1
  3743  03BB  2C1D               	goto	l5967
  3744                           
  3745                           ;main.c: 35:             {;main.c: 36:                 if(MTOUCH_Button_Buttonmask_Get()
      +                           == 1 && triac_level.full!=0xFF)
  3746  03BC  3197  2749  3183   	fcall	_MTOUCH_Button_Buttonmask_Get
  3747  03BF  3A01               	xorlw	1
  3748  03C0  1D03               	skipz
  3749  03C1  2BD7               	goto	l5953
  3750  03C2  0021               	movlb	1	; select bank1
  3751  03C3  0A38               	incf	_triac_level^(0+128),w
  3752  03C4  0439               	iorwf	(_triac_level+1)^(0+128),w
  3753  03C5  1903               	btfsc	3,2
  3754  03C6  2BD7               	goto	l5953
  3755                           
  3756                           ;main.c: 37:                 {;main.c: 38:                     counter_PRESS++;
  3757  03C7  3001               	movlw	1
  3758  03C8  0022               	movlb	2	; select bank2
  3759  03C9  00D2               	movwf	??_main^(0+256)
  3760  03CA  0852               	movf	??_main^(0+256),w
  3761  03CB  0021               	movlb	1	; select bank1
  3762  03CC  07BF               	addwf	_counter_PRESS^(0+128),f
  3763                           
  3764                           ;main.c: 39:                     if(counter_PRESS == 100)
  3765  03CD  3064               	movlw	100
  3766  03CE  063F               	xorwf	_counter_PRESS^(0+128),w
  3767  03CF  1D03               	btfss	3,2
  3768  03D0  2C1D               	goto	l5967
  3769                           
  3770                           ;main.c: 40:                     {;main.c: 41:                             triac_level.l
      +                          evel++;
  3771  03D1  0838               	movf	_triac_level^(0+128),w
  3772  03D2  390F               	andlw	15
  3773  03D3  0022               	movlb	2	; select bank2
  3774  03D4  00D2               	movwf	??_main^(0+256)
  3775  03D5  0AD2               	incf	??_main^(0+256),f
  3776  03D6  2BF1               	goto	L1
  3777  03D7                     l5953:	
  3778                           ;main.c: 42:                             printf("------%d---------\r\n",triac_level.leve
      +                          l);
  3779                           
  3780  03D7  3197  2749  3183   	fcall	_MTOUCH_Button_Buttonmask_Get
  3781  03DA  3A04               	xorlw	4
  3782  03DB  1D03               	skipz
  3783  03DC  2C1D               	goto	l5967
  3784  03DD  0021               	movlb	1	; select bank1
  3785  03DE  0838               	movf	_triac_level^(0+128),w
  3786  03DF  0439               	iorwf	(_triac_level+1)^(0+128),w
  3787  03E0  1903               	btfsc	3,2
  3788  03E1  2C1D               	goto	l5967
  3789                           
  3790                           ;main.c: 48:                 {;main.c: 49:                     counter_PRESS++;
  3791  03E2  3001               	movlw	1
  3792  03E3  0022               	movlb	2	; select bank2
  3793  03E4  00D2               	movwf	??_main^(0+256)
  3794  03E5  0852               	movf	??_main^(0+256),w
  3795  03E6  0021               	movlb	1	; select bank1
  3796  03E7  07BF               	addwf	_counter_PRESS^(0+128),f
  3797                           
  3798                           ;main.c: 50:                     if(counter_PRESS == 100)
  3799  03E8  3064               	movlw	100
  3800  03E9  063F               	xorwf	_counter_PRESS^(0+128),w
  3801  03EA  1D03               	btfss	3,2
  3802  03EB  2C1D               	goto	l5967
  3803                           
  3804                           ;main.c: 51:                     {;main.c: 52:                         triac_level.level
      +                          --;
  3805  03EC  0838               	movf	_triac_level^(0+128),w
  3806  03ED  390F               	andlw	15
  3807  03EE  0022               	movlb	2	; select bank2
  3808  03EF  00D2               	movwf	??_main^(0+256)
  3809  03F0  03D2               	decf	??_main^(0+256),f
  3810  03F1                     L1:	
  3811  03F1  0021               	movlb	1	; select bank1
  3812  03F2  0838               	movf	_triac_level^(0+128),w
  3813  03F3  0022               	movlb	2	; select bank2
  3814  03F4  0652               	xorwf	??_main^(0+256),w
  3815  03F5  39F0               	andlw	-16
  3816  03F6  0652               	xorwf	??_main^(0+256),w
  3817  03F7  0021               	movlb	1	; select bank1
  3818  03F8  00B8               	movwf	_triac_level^(0+128)
  3819                           
  3820                           ;main.c: 53:                         printf("------%d---------\r\n",triac_level.level);
  3821  03F9  301C               	movlw	low (STR_1| (0+32768))
  3822  03FA  0020               	movlb	0	; select bank0
  3823  03FB  00E7               	movwf	printf@fmt
  3824  03FC  3098               	movlw	high (STR_1| (0+32768))
  3825  03FD  00E8               	movwf	printf@fmt+1
  3826  03FE  0021               	movlb	1	; select bank1
  3827  03FF  0838               	movf	_triac_level^(0+128),w
  3828  0400  390F               	andlw	15
  3829  0401  0022               	movlb	2	; select bank2
  3830  0402  00D2               	movwf	??_main^(0+256)
  3831  0403  01D3               	clrf	(??_main^(0+256)+1)
  3832  0404  0852               	movf	??_main^(0+256),w
  3833  0405  0020               	movlb	0	; select bank0
  3834  0406  00E9               	movwf	?_printf+2
  3835  0407  0022               	movlb	2	; select bank2
  3836  0408  0853               	movf	(??_main+1)^(0+256),w
  3837  0409  0020               	movlb	0	; select bank0
  3838  040A  00EA               	movwf	?_printf+3
  3839  040B  3195  25B2  3183   	fcall	_printf
  3840                           
  3841                           ;main.c: 43:                             triac_level.last_level = triac_level.level;
  3842  040E  0021               	movlb	1	; select bank1
  3843  040F  0838               	movf	_triac_level^(0+128),w
  3844  0410  390F               	andlw	15
  3845  0411  0022               	movlb	2	; select bank2
  3846  0412  00D2               	movwf	??_main^(0+256)
  3847  0413  0ED2               	swapf	??_main^(0+256),f
  3848  0414  0021               	movlb	1	; select bank1
  3849  0415  0838               	movf	_triac_level^(0+128),w
  3850  0416  0022               	movlb	2	; select bank2
  3851  0417  0652               	xorwf	??_main^(0+256),w
  3852  0418  390F               	andlw	-241
  3853  0419  0652               	xorwf	??_main^(0+256),w
  3854  041A  0021               	movlb	1	; select bank1
  3855  041B  00B8               	movwf	_triac_level^(0+128)
  3856                           
  3857                           ;main.c: 44:                             counter_PRESS = 0;
  3858  041C  01BF               	clrf	_counter_PRESS^(0+128)
  3859  041D                     l5967:	
  3860                           
  3861                           ;main.c: 61:             if(turn_off == 1)
  3862  041D  0021               	movlb	1	; select bank1
  3863  041E  033D               	decf	_turn_off^(0+128),w
  3864  041F  1D03               	btfss	3,2
  3865  0420  2C5F               	goto	l5983
  3866                           
  3867                           ;main.c: 62:             {;main.c: 63:                 counter_1s++;
  3868  0421  3001               	movlw	1
  3869  0422  07B4               	addwf	_counter_1s^(0+128),f
  3870  0423  3000               	movlw	0
  3871  0424  3DB5               	addwfc	(_counter_1s+1)^(0+128),f
  3872                           
  3873                           ;main.c: 64:                 if(counter_1s >= 100)
  3874  0425  3000               	movlw	0
  3875  0426  0235               	subwf	(_counter_1s+1)^(0+128),w
  3876  0427  3064               	movlw	100
  3877  0428  1903               	skipnz
  3878  0429  0234               	subwf	_counter_1s^(0+128),w
  3879  042A  1C03               	skipc
  3880  042B  2C50               	goto	l5977
  3881                           
  3882                           ;main.c: 65:                 {;main.c: 66:                     counter_1s = 0;
  3883  042C  01B4               	clrf	_counter_1s^(0+128)
  3884  042D  01B5               	clrf	(_counter_1s+1)^(0+128)
  3885                           
  3886                           ;main.c: 67:                     triac_level.level--;
  3887  042E  0838               	movf	_triac_level^(0+128),w
  3888  042F  390F               	andlw	15
  3889  0430  0022               	movlb	2	; select bank2
  3890  0431  00D2               	movwf	??_main^(0+256)
  3891  0432  03D2               	decf	??_main^(0+256),f
  3892  0433  0021               	movlb	1	; select bank1
  3893  0434  0838               	movf	_triac_level^(0+128),w
  3894  0435  0022               	movlb	2	; select bank2
  3895  0436  0652               	xorwf	??_main^(0+256),w
  3896  0437  39F0               	andlw	-16
  3897  0438  0652               	xorwf	??_main^(0+256),w
  3898  0439  0021               	movlb	1	; select bank1
  3899  043A  00B8               	movwf	_triac_level^(0+128)
  3900                           
  3901                           ;main.c: 68:                     printf("------%d---------\r\n",triac_level.level);
  3902  043B  301C               	movlw	low (STR_1| (0+32768))
  3903  043C  0020               	movlb	0	; select bank0
  3904  043D  00E7               	movwf	printf@fmt
  3905  043E  3098               	movlw	high (STR_1| (0+32768))
  3906  043F  00E8               	movwf	printf@fmt+1
  3907  0440  0021               	movlb	1	; select bank1
  3908  0441  0838               	movf	_triac_level^(0+128),w
  3909  0442  390F               	andlw	15
  3910  0443  0022               	movlb	2	; select bank2
  3911  0444  00D2               	movwf	??_main^(0+256)
  3912  0445  01D3               	clrf	(??_main^(0+256)+1)
  3913  0446  0852               	movf	??_main^(0+256),w
  3914  0447  0020               	movlb	0	; select bank0
  3915  0448  00E9               	movwf	?_printf+2
  3916  0449  0022               	movlb	2	; select bank2
  3917  044A  0853               	movf	(??_main+1)^(0+256),w
  3918  044B  0020               	movlb	0	; select bank0
  3919  044C  00EA               	movwf	?_printf+3
  3920  044D  3195  25B2  3183   	fcall	_printf
  3921  0450                     l5977:	
  3922                           
  3923                           ;main.c: 70:                 if(triac_level.level == 0)
  3924  0450  0021               	movlb	1	; select bank1
  3925  0451  0838               	movf	_triac_level^(0+128),w
  3926  0452  390F               	andlw	15
  3927  0453  3A00               	xorlw	0
  3928  0454  1D03               	skipz
  3929  0455  2C5F               	goto	l5983
  3930                           
  3931                           ;main.c: 71:                 {;main.c: 72:                     turn_off = 0;
  3932  0456  01BD               	clrf	_turn_off^(0+128)
  3933                           
  3934                           ;main.c: 73:                     printf("----OFF----\r\n");
  3935  0457  3030               	movlw	low (STR_4| (0+32768))
  3936  0458  0020               	movlb	0	; select bank0
  3937  0459  00E7               	movwf	printf@fmt
  3938  045A  3098               	movlw	high (STR_4| (0+32768))
  3939  045B  00E8               	movwf	printf@fmt+1
  3940  045C  3195  25B2  3183   	fcall	_printf
  3941  045F                     l5983:	
  3942                           
  3943                           ;main.c: 77:             if(turn_on == 1)
  3944  045F  0021               	movlb	1	; select bank1
  3945  0460  033C               	decf	_turn_on^(0+128),w
  3946  0461  1D03               	btfss	3,2
  3947  0462  2BA2               	goto	l5929
  3948                           
  3949                           ;main.c: 78:             {;main.c: 79:                 counter_1s++;
  3950  0463  3001               	movlw	1
  3951  0464  07B4               	addwf	_counter_1s^(0+128),f
  3952  0465  3000               	movlw	0
  3953  0466  3DB5               	addwfc	(_counter_1s+1)^(0+128),f
  3954                           
  3955                           ;main.c: 80:                 if(counter_1s >= 100)
  3956  0467  3000               	movlw	0
  3957  0468  0235               	subwf	(_counter_1s+1)^(0+128),w
  3958  0469  3064               	movlw	100
  3959  046A  1903               	skipnz
  3960  046B  0234               	subwf	_counter_1s^(0+128),w
  3961  046C  1C03               	skipc
  3962  046D  2C92               	goto	l5993
  3963                           
  3964                           ;main.c: 81:                 {;main.c: 82:                     counter_1s = 0;
  3965  046E  01B4               	clrf	_counter_1s^(0+128)
  3966  046F  01B5               	clrf	(_counter_1s+1)^(0+128)
  3967                           
  3968                           ;main.c: 83:                     triac_level.level++;
  3969  0470  0838               	movf	_triac_level^(0+128),w
  3970  0471  390F               	andlw	15
  3971  0472  0022               	movlb	2	; select bank2
  3972  0473  00D2               	movwf	??_main^(0+256)
  3973  0474  0AD2               	incf	??_main^(0+256),f
  3974  0475  0021               	movlb	1	; select bank1
  3975  0476  0838               	movf	_triac_level^(0+128),w
  3976  0477  0022               	movlb	2	; select bank2
  3977  0478  0652               	xorwf	??_main^(0+256),w
  3978  0479  39F0               	andlw	-16
  3979  047A  0652               	xorwf	??_main^(0+256),w
  3980  047B  0021               	movlb	1	; select bank1
  3981  047C  00B8               	movwf	_triac_level^(0+128)
  3982                           
  3983                           ;main.c: 84:                     printf("------%d---------\r\n",triac_level.level);
  3984  047D  301C               	movlw	low (STR_1| (0+32768))
  3985  047E  0020               	movlb	0	; select bank0
  3986  047F  00E7               	movwf	printf@fmt
  3987  0480  3098               	movlw	high (STR_1| (0+32768))
  3988  0481  00E8               	movwf	printf@fmt+1
  3989  0482  0021               	movlb	1	; select bank1
  3990  0483  0838               	movf	_triac_level^(0+128),w
  3991  0484  390F               	andlw	15
  3992  0485  0022               	movlb	2	; select bank2
  3993  0486  00D2               	movwf	??_main^(0+256)
  3994  0487  01D3               	clrf	(??_main^(0+256)+1)
  3995  0488  0852               	movf	??_main^(0+256),w
  3996  0489  0020               	movlb	0	; select bank0
  3997  048A  00E9               	movwf	?_printf+2
  3998  048B  0022               	movlb	2	; select bank2
  3999  048C  0853               	movf	(??_main+1)^(0+256),w
  4000  048D  0020               	movlb	0	; select bank0
  4001  048E  00EA               	movwf	?_printf+3
  4002  048F  3195  25B2  3183   	fcall	_printf
  4003  0492                     l5993:	
  4004                           
  4005                           ;main.c: 86:                 if(triac_level.level == triac_level.last_level)
  4006  0492  0021               	movlb	1	; select bank1
  4007  0493  0E38               	swapf	_triac_level^(0+128),w
  4008  0494  390F               	andlw	15
  4009  0495  0022               	movlb	2	; select bank2
  4010  0496  00D2               	movwf	??_main^(0+256)
  4011  0497  0021               	movlb	1	; select bank1
  4012  0498  0838               	movf	_triac_level^(0+128),w
  4013  0499  390F               	andlw	15
  4014  049A  0022               	movlb	2	; select bank2
  4015  049B  0652               	xorwf	??_main^(0+256),w
  4016  049C  1D03               	skipz
  4017  049D  2BA2               	goto	l5929
  4018                           
  4019                           ;main.c: 87:                 {;main.c: 88:                     turn_on = 0;
  4020  049E  0021               	movlb	1	; select bank1
  4021  049F  01BC               	clrf	_turn_on^(0+128)
  4022                           
  4023                           ;main.c: 89:                     printf("----ON----\r\n");
  4024  04A0  303E               	movlw	low (STR_6| (0+32768))
  4025  04A1  0020               	movlb	0	; select bank0
  4026  04A2  00E7               	movwf	printf@fmt
  4027  04A3  3098               	movlw	high (STR_6| (0+32768))
  4028  04A4  00E8               	movwf	printf@fmt+1
  4029  04A5  3195  25B2  3183   	fcall	_printf
  4030                           
  4031                           ;main.c: 92:         }
  4032  04A8  2BA2               	goto	l5929
  4033  04A9                     __end_of_main:	
  4034                           
  4035                           	psect	text1
  4036  15ED                     __ptext1:	
  4037 ;; *************** function _SYSTEM_Initialize *****************
  4038 ;; Defined at:
  4039 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;		None
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;		None
  4044 ;; Return value:  Size  Location     Type
  4045 ;;                  1    wreg      void 
  4046 ;; Registers used:
  4047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4053 ;;      Params:         0       0       0       0       0       0       0       0
  4054 ;;      Locals:         0       0       0       0       0       0       0       0
  4055 ;;      Temps:          0       0       0       0       0       0       0       0
  4056 ;;      Totals:         0       0       0       0       0       0       0       0
  4057 ;;Total ram usage:        0 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    9
  4060 ;; This function calls:
  4061 ;;		_EUSART_Initialize
  4062 ;;		_EXT_INT_Initialize
  4063 ;;		_MTOUCH_Initialize
  4064 ;;		_OSCILLATOR_Initialize
  4065 ;;		_PIN_MANAGER_Initialize
  4066 ;;		_TMR2_Initialize
  4067 ;;		_WDT_Initialize
  4068 ;; This function is called by:
  4069 ;;		_main
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           
  4074                           ;psect for function _SYSTEM_Initialize
  4075  15ED                     _SYSTEM_Initialize:	
  4076                           
  4077                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  4078                           
  4079                           ;incstack = 0
  4080                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4081  15ED  3196  26A3  3195   	fcall	_PIN_MANAGER_Initialize
  4082                           
  4083                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  4084  15F0  3194  2482  3195   	fcall	_OSCILLATOR_Initialize
  4085                           
  4086                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  4087  15F3  3187  27FC  3195   	fcall	_WDT_Initialize
  4088                           
  4089                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  4090  15F6  3188  2000  3195   	fcall	_TMR2_Initialize
  4091                           
  4092                           ;mcc_generated_files/mcc.c: 57:     EXT_INT_Initialize();
  4093  15F9  3194  24D2  3195   	fcall	_EXT_INT_Initialize
  4094                           
  4095                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  4096  15FC  3189  2197  3195   	fcall	_EUSART_Initialize
  4097                           
  4098                           ;mcc_generated_files/mcc.c: 59:     MTOUCH_Initialize();
  4099  15FF  3194  24DD         	fcall	_MTOUCH_Initialize
  4100  1601  0008               	return
  4101  1602                     __end_of_SYSTEM_Initialize:	
  4102                           
  4103                           	psect	text2
  4104  07FC                     __ptext2:	
  4105 ;; *************** function _WDT_Initialize *****************
  4106 ;; Defined at:
  4107 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;		None
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		wreg
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4121 ;;      Params:         0       0       0       0       0       0       0       0
  4122 ;;      Locals:         0       0       0       0       0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0
  4124 ;;      Totals:         0       0       0       0       0       0       0       0
  4125 ;;Total ram usage:        0 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    4
  4128 ;; This function calls:
  4129 ;;		Nothing
  4130 ;; This function is called by:
  4131 ;;		_SYSTEM_Initialize
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           
  4136                           ;psect for function _WDT_Initialize
  4137  07FC                     _WDT_Initialize:	
  4138                           
  4139                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4140                           
  4141                           ;incstack = 0
  4142                           ; Regs used in _WDT_Initialize: [wreg]
  4143  07FC  3016               	movlw	22
  4144  07FD  0021               	movlb	1	; select bank1
  4145  07FE  0097               	movwf	23	;volatile
  4146  07FF  0008               	return
  4147  0800                     __end_of_WDT_Initialize:	
  4148                           
  4149                           	psect	text3
  4150  0800                     __ptext3:	
  4151 ;; *************** function _TMR2_Initialize *****************
  4152 ;; Defined at:
  4153 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  1    wreg      void 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4167 ;;      Params:         0       0       0       0       0       0       0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0
  4169 ;;      Temps:          0       0       0       0       0       0       0       0
  4170 ;;      Totals:         0       0       0       0       0       0       0       0
  4171 ;;Total ram usage:        0 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    4
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_SYSTEM_Initialize
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           
  4182                           ;psect for function _TMR2_Initialize
  4183  0800                     _TMR2_Initialize:	
  4184                           
  4185                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  4189  0800  30FF               	movlw	255
  4190  0801  0020               	movlb	0	; select bank0
  4191  0802  009B               	movwf	27	;volatile
  4192                           
  4193                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  4194  0803  019A               	clrf	26	;volatile
  4195                           
  4196                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  4197  0804  1091               	bcf	17,1	;volatile
  4198                           
  4199                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  4200  0805  3004               	movlw	4
  4201  0806  009C               	movwf	28	;volatile
  4202  0807  0008               	return
  4203  0808                     __end_of_TMR2_Initialize:	
  4204                           
  4205                           	psect	text4
  4206  16A3                     __ptext4:	
  4207 ;; *************** function _PIN_MANAGER_Initialize *****************
  4208 ;; Defined at:
  4209 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4223 ;;      Params:         0       0       0       0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0
  4226 ;;      Totals:         0       0       0       0       0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    4
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_SYSTEM_Initialize
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _PIN_MANAGER_Initialize
  4239  16A3                     _PIN_MANAGER_Initialize:	
  4240                           
  4241                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4242                           
  4243                           ;incstack = 0
  4244                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4245  16A3  0022               	movlb	2	; select bank2
  4246  16A4  018C               	clrf	12	;volatile
  4247                           
  4248                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4249  16A5  018D               	clrf	13	;volatile
  4250                           
  4251                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4252  16A6  018E               	clrf	14	;volatile
  4253                           
  4254                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  4255  16A7  303F               	movlw	63
  4256  16A8  0021               	movlb	1	; select bank1
  4257  16A9  008C               	movwf	12	;volatile
  4258                           
  4259                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  4260  16AA  3060               	movlw	96
  4261  16AB  008D               	movwf	13	;volatile
  4262                           
  4263                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x53;
  4264  16AC  3053               	movlw	83
  4265  16AD  008E               	movwf	14	;volatile
  4266                           
  4267                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x5B;
  4268  16AE  305B               	movlw	91
  4269  16AF  0023               	movlb	3	; select bank3
  4270  16B0  008E               	movwf	14	;volatile
  4271                           
  4272                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x40;
  4273  16B1  3040               	movlw	64
  4274  16B2  008D               	movwf	13	;volatile
  4275                           
  4276                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x33;
  4277  16B3  3033               	movlw	51
  4278  16B4  008C               	movwf	12	;volatile
  4279                           
  4280                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4281  16B5  0024               	movlb	4	; select bank4
  4282  16B6  018D               	clrf	13	;volatile
  4283                           
  4284                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4285  16B7  018C               	clrf	12	;volatile
  4286                           
  4287                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4288  16B8  0021               	movlb	1	; select bank1
  4289  16B9  1795               	bsf	21,7	;volatile
  4290                           
  4291                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  4292  16BA  0022               	movlb	2	; select bank2
  4293  16BB  019D               	clrf	29	;volatile
  4294  16BC  0008               	return
  4295  16BD                     __end_of_PIN_MANAGER_Initialize:	
  4296                           
  4297                           	psect	text5
  4298  1482                     __ptext5:	
  4299 ;; *************** function _OSCILLATOR_Initialize *****************
  4300 ;; Defined at:
  4301 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4315 ;;      Params:         0       0       0       0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    4
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_SYSTEM_Initialize
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _OSCILLATOR_Initialize
  4331  1482                     _OSCILLATOR_Initialize:	
  4332                           
  4333                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0xF0;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4337  1482  30F0               	movlw	240
  4338  1483  0021               	movlb	1	; select bank1
  4339  1484  0099               	movwf	25	;volatile
  4340                           
  4341                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4342  1485  0022               	movlb	2	; select bank2
  4343  1486  0196               	clrf	22	;volatile
  4344  1487  0008               	return
  4345  1488                     __end_of_OSCILLATOR_Initialize:	
  4346                           
  4347                           	psect	text6
  4348  14DD                     __ptext6:	
  4349 ;; *************** function _MTOUCH_Initialize *****************
  4350 ;; Defined at:
  4351 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;		None
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;		None
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4365 ;;      Params:         0       0       0       0       0       0       0       0
  4366 ;;      Locals:         0       0       0       0       0       0       0       0
  4367 ;;      Temps:          0       0       0       0       0       0       0       0
  4368 ;;      Totals:         0       0       0       0       0       0       0       0
  4369 ;;Total ram usage:        0 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    8
  4372 ;; This function calls:
  4373 ;;		_MTOUCH_Button_InitializeAll
  4374 ;;		_MTOUCH_Sensor_InitializeAll
  4375 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  4376 ;;		_MTOUCH_Sensor_Scan_Initialize
  4377 ;; This function is called by:
  4378 ;;		_SYSTEM_Initialize
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _MTOUCH_Initialize
  4384  14DD                     _MTOUCH_Initialize:	
  4385                           
  4386                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  4387                           
  4388                           ;incstack = 0
  4389                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4390  14DD  3195  2520  3194   	fcall	_MTOUCH_Sensor_InitializeAll
  4391                           
  4392                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  4393  14E0  3196  26F3  3194   	fcall	_MTOUCH_Button_InitializeAll
  4394                           
  4395                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  4396  14E3  3195  25C5  3194   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  4397                           
  4398                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  4399  14E6  3195  255C         	fcall	_MTOUCH_Sensor_Scan_Initialize
  4400  14E8  0008               	return
  4401  14E9                     __end_of_MTOUCH_Initialize:	
  4402                           
  4403                           	psect	text7
  4404  1520                     __ptext7:	
  4405 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  4406 ;; Defined at:
  4407 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  sensor          1   10[COMMON] enum E2864
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4421 ;;      Params:         0       0       0       0       0       0       0       0
  4422 ;;      Locals:         1       0       0       0       0       0       0       0
  4423 ;;      Temps:          1       0       0       0       0       0       0       0
  4424 ;;      Totals:         2       0       0       0       0       0       0       0
  4425 ;;Total ram usage:        2 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    7
  4428 ;; This function calls:
  4429 ;;		_MTOUCH_Sensor_Initialize
  4430 ;; This function is called by:
  4431 ;;		_MTOUCH_Initialize
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           
  4436                           ;psect for function _MTOUCH_Sensor_InitializeAll
  4437  1520                     _MTOUCH_Sensor_InitializeAll:	
  4438                           
  4439                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  4440                           
  4441                           ;incstack = 0
  4442                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  4443  1520  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  4444  1521                     l5681:	
  4445                           
  4446                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  4447  1521  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  4448  1522  3195  25D8  3195   	fcall	_MTOUCH_Sensor_Initialize
  4449                           
  4450                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  4451  1525  3001               	movlw	1
  4452  1526  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  4453  1527  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  4454  1528  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  4455  1529  3003               	movlw	3
  4456  152A  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  4457  152B  1803               	btfsc	3,0
  4458  152C  0008               	return
  4459  152D  2D21               	goto	l5681
  4460  152E                     __end_of_MTOUCH_Sensor_InitializeAll:	
  4461                           
  4462                           	psect	text8
  4463  15D8                     __ptext8:	
  4464 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  4465 ;; Defined at:
  4466 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  sensor          1    wreg     enum E2864
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  sensor          1    8[COMMON] enum E2864
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      enum E2868
  4473 ;; Registers used:
  4474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4480 ;;      Params:         0       0       0       0       0       0       0       0
  4481 ;;      Locals:         1       0       0       0       0       0       0       0
  4482 ;;      Temps:          1       0       0       0       0       0       0       0
  4483 ;;      Totals:         2       0       0       0       0       0       0       0
  4484 ;;Total ram usage:        2 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    6
  4487 ;; This function calls:
  4488 ;;		_MTOUCH_Sensor_Calibrate
  4489 ;;		_MTOUCH_Sensor_Enable
  4490 ;;		_Sensor_Sampled_Reset
  4491 ;;		___bmul
  4492 ;; This function is called by:
  4493 ;;		_MTOUCH_Sensor_InitializeAll
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           
  4498                           ;psect for function _MTOUCH_Sensor_Initialize
  4499  15D8                     _MTOUCH_Sensor_Initialize:	
  4500                           
  4501                           ;incstack = 0
  4502                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  4503                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  4504  15D8  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  4505                           
  4506                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  4507  15D9  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4508  15DA  3195  25A0  3195   	fcall	_MTOUCH_Sensor_Enable
  4509                           
  4510                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  4511  15DD  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4512  15DE  3195  258E  3195   	fcall	_MTOUCH_Sensor_Calibrate
  4513                           
  4514                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  4515  15E1  3009               	movlw	9
  4516  15E2  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  4517  15E3  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  4518  15E4  00F1               	movwf	___bmul@multiplicand
  4519  15E5  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  4520  15E6  3195  256C  3195   	fcall	___bmul
  4521  15E9  3E20               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  4522  15EA  3194  24AC         	fcall	_Sensor_Sampled_Reset
  4523  15EC  0008               	return
  4524  15ED                     __end_of_MTOUCH_Sensor_Initialize:	
  4525                           
  4526                           	psect	text9
  4527  15A0                     __ptext9:	
  4528 ;; *************** function _MTOUCH_Sensor_Enable *****************
  4529 ;; Defined at:
  4530 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  sensor          1    wreg     enum E2864
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  sensor          1    6[COMMON] enum E2864
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  1    wreg      void 
  4537 ;; Registers used:
  4538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4544 ;;      Params:         0       0       0       0       0       0       0       0
  4545 ;;      Locals:         1       0       0       0       0       0       0       0
  4546 ;;      Temps:          1       0       0       0       0       0       0       0
  4547 ;;      Totals:         2       0       0       0       0       0       0       0
  4548 ;;Total ram usage:        2 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:    5
  4551 ;; This function calls:
  4552 ;;		___bmul
  4553 ;; This function is called by:
  4554 ;;		_MTOUCH_Sensor_Initialize
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function _MTOUCH_Sensor_Enable
  4560  15A0                     _MTOUCH_Sensor_Enable:	
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4564                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  4565  15A0  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  4566                           
  4567                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  4568  15A1  3003               	movlw	3
  4569  15A2  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  4570  15A3  1803               	skipnc
  4571  15A4  0008               	return
  4572                           
  4573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  4574  15A5  3009               	movlw	9
  4575  15A6  00F5               	movwf	??_MTOUCH_Sensor_Enable
  4576  15A7  0875               	movf	??_MTOUCH_Sensor_Enable,w
  4577  15A8  00F1               	movwf	___bmul@multiplicand
  4578  15A9  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  4579  15AA  3195  256C         	fcall	___bmul
  4580  15AC  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  4581  15AD  0086               	movwf	6
  4582  15AE  3001               	movlw	1	; select bank2/3
  4583  15AF  0087               	movwf	7
  4584  15B0  1581               	bsf	1,3
  4585  15B1  0008               	return
  4586  15B2                     __end_of_MTOUCH_Sensor_Enable:	
  4587                           
  4588                           	psect	text10
  4589  16F3                     __ptext10:	
  4590 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  4591 ;; Defined at:
  4592 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;		None
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  button          1    0[BANK0 ] enum E3069
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      void 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4606 ;;      Params:         0       0       0       0       0       0       0       0
  4607 ;;      Locals:         0       1       0       0       0       0       0       0
  4608 ;;      Temps:          1       0       0       0       0       0       0       0
  4609 ;;      Totals:         1       1       0       0       0       0       0       0
  4610 ;;Total ram usage:        2 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    7
  4613 ;; This function calls:
  4614 ;;		_MTOUCH_Button_Initialize
  4615 ;;		_memcpy
  4616 ;; This function is called by:
  4617 ;;		_MTOUCH_Initialize
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _MTOUCH_Button_InitializeAll
  4623  16F3                     _MTOUCH_Button_InitializeAll:	
  4624                           
  4625                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4629  16F3  3000               	movlw	low (_mtouch_button_init| (0+32768))
  4630  16F4  00F1               	movwf	memcpy@s1
  4631  16F5  3090               	movlw	high (_mtouch_button_init| (0+32768))
  4632  16F6  00F2               	movwf	memcpy@s1+1
  4633  16F7  3030               	movlw	48
  4634  16F8  00F3               	movwf	memcpy@n
  4635  16F9  3000               	movlw	0
  4636  16FA  00F4               	movwf	memcpy@n+1
  4637  16FB  30A0               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  4638  16FC  3188  2008  3196   	fcall	_memcpy
  4639                           
  4640                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  4641  16FF  0020               	movlb	0	; select bank0
  4642  1700  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  4643  1701                     l5695:	
  4644                           
  4645                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  4646  1701  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  4647  1702  3189  2124  3196   	fcall	_MTOUCH_Button_Initialize
  4648                           
  4649                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  4650  1705  3001               	movlw	1
  4651  1706  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  4652  1707  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  4653  1708  0020               	movlb	0	; select bank0
  4654  1709  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  4655  170A  3003               	movlw	3
  4656  170B  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  4657  170C  1803               	btfsc	3,0
  4658  170D  0008               	return
  4659  170E  2F01               	goto	l5695
  4660  170F                     __end_of_MTOUCH_Button_InitializeAll:	
  4661                           
  4662                           	psect	text11
  4663  0808                     __ptext11:	
  4664 ;; *************** function _memcpy *****************
  4665 ;; Defined at:
  4666 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;  d1              1    wreg     PTR void 
  4669 ;;		 -> mtouch_button(48), 
  4670 ;;  s1              2    1[COMMON] PTR const void 
  4671 ;;		 -> mtouch_button_init(48), 
  4672 ;;  n               2    3[COMMON] unsigned int 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  d1              1    9[COMMON] PTR void 
  4675 ;;		 -> mtouch_button(48), 
  4676 ;;  s               2    7[COMMON] PTR const unsigned char 
  4677 ;;		 -> mtouch_button_init(48), 
  4678 ;;  d               1   10[COMMON] PTR unsigned char 
  4679 ;;		 -> mtouch_button(48), 
  4680 ;;  tmp             1    6[COMMON] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  1    wreg      PTR void 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4690 ;;      Params:         4       0       0       0       0       0       0       0
  4691 ;;      Locals:         5       0       0       0       0       0       0       0
  4692 ;;      Temps:          1       0       0       0       0       0       0       0
  4693 ;;      Totals:        10       0       0       0       0       0       0       0
  4694 ;;Total ram usage:       10 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    4
  4697 ;; This function calls:
  4698 ;;		Nothing
  4699 ;; This function is called by:
  4700 ;;		_MTOUCH_Button_InitializeAll
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _memcpy
  4706  0808                     _memcpy:	
  4707                           
  4708                           ;incstack = 0
  4709                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4710                           ;memcpy@d1 stored from wreg
  4711  0808  00F9               	movwf	memcpy@d1
  4712  0809  0872               	movf	memcpy@s1+1,w
  4713  080A  00F8               	movwf	memcpy@s+1
  4714  080B  0871               	movf	memcpy@s1,w
  4715  080C  00F7               	movwf	memcpy@s
  4716  080D  0879               	movf	memcpy@d1,w
  4717  080E  00F5               	movwf	??_memcpy
  4718  080F  0875               	movf	??_memcpy,w
  4719  0810  00FA               	movwf	memcpy@d
  4720  0811                     l5621:	
  4721  0811  3001               	movlw	1
  4722  0812  02F3               	subwf	memcpy@n,f
  4723  0813  3000               	movlw	0
  4724  0814  3BF4               	subwfb	memcpy@n+1,f
  4725  0815  0A73               	incf	memcpy@n,w
  4726  0816  1903               	btfsc	3,2
  4727  0817  0A74               	incf	memcpy@n+1,w
  4728  0818  1903               	btfsc	3,2
  4729  0819  0008               	return
  4730  081A  0877               	movf	memcpy@s,w
  4731  081B  0084               	movwf	4
  4732  081C  0878               	movf	memcpy@s+1,w
  4733  081D  0085               	movwf	5
  4734  081E  0800               	movf	0,w	;code access
  4735  081F  00F5               	movwf	??_memcpy
  4736  0820  0875               	movf	??_memcpy,w
  4737  0821  00F6               	movwf	memcpy@tmp
  4738  0822  3001               	movlw	1
  4739  0823  07F7               	addwf	memcpy@s,f
  4740  0824  3000               	movlw	0
  4741  0825  3DF8               	addwfc	memcpy@s+1,f
  4742  0826  0876               	movf	memcpy@tmp,w
  4743  0827  00F5               	movwf	??_memcpy
  4744  0828  087A               	movf	memcpy@d,w
  4745  0829  0086               	movwf	6
  4746  082A  3001               	movlw	1	; select bank2/3
  4747  082B  0087               	movwf	7
  4748  082C  0875               	movf	??_memcpy,w
  4749  082D  0081               	movwf	1
  4750  082E  3001               	movlw	1
  4751  082F  00F5               	movwf	??_memcpy
  4752  0830  0875               	movf	??_memcpy,w
  4753  0831  07FA               	addwf	memcpy@d,f
  4754  0832  2811               	goto	l5621
  4755  0833                     __end_of_memcpy:	
  4756                           
  4757                           	psect	text12
  4758  14D2                     __ptext12:	
  4759 ;; *************** function _EXT_INT_Initialize *****************
  4760 ;; Defined at:
  4761 ;;		line 59 in file "mcc_generated_files/ext_int.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;		None
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0, pclath, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4775 ;;      Params:         0       0       0       0       0       0       0       0
  4776 ;;      Locals:         0       0       0       0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0
  4778 ;;      Totals:         0       0       0       0       0       0       0       0
  4779 ;;Total ram usage:        0 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    5
  4782 ;; This function calls:
  4783 ;;		_INT_SetInterruptHandler
  4784 ;; This function is called by:
  4785 ;;		_SYSTEM_Initialize
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           
  4790                           ;psect for function _EXT_INT_Initialize
  4791  14D2                     _EXT_INT_Initialize:	
  4792                           
  4793                           ;mcc_generated_files/ext_int.c: 64:     (INTCONbits.INTF = 0);
  4794                           
  4795                           ;incstack = 0
  4796                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4797  14D2  108B               	bcf	11,1	;volatile
  4798                           
  4799                           ;mcc_generated_files/ext_int.c: 65:     (OPTION_REGbits.INTEDG = 0);
  4800  14D3  0021               	movlb	1	; select bank1
  4801  14D4  1315               	bcf	21,6	;volatile
  4802                           
  4803                           ;mcc_generated_files/ext_int.c: 67:     INT_SetInterruptHandler(INT_DefaultInterruptHand
      +                          ler);
  4804  14D5  302E               	movlw	low _INT_DefaultInterruptHandler
  4805  14D6  00F1               	movwf	INT_SetInterruptHandler@InterruptHandler
  4806  14D7  3014               	movlw	high _INT_DefaultInterruptHandler
  4807  14D8  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  4808  14D9  3194  247C         	fcall	_INT_SetInterruptHandler
  4809                           
  4810                           ;mcc_generated_files/ext_int.c: 68:     (INTCONbits.INTE = 1);
  4811  14DB  160B               	bsf	11,4	;volatile
  4812  14DC  0008               	return
  4813  14DD                     __end_of_EXT_INT_Initialize:	
  4814                           
  4815                           	psect	text13
  4816  147C                     __ptext13:	
  4817 ;; *************** function _INT_SetInterruptHandler *****************
  4818 ;; Defined at:
  4819 ;;		line 50 in file "mcc_generated_files/ext_int.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  4822 ;;		 -> INT_DefaultInterruptHandler(1), 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      void 
  4827 ;; Registers used:
  4828 ;;		wreg
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4834 ;;      Params:         2       0       0       0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0       0
  4836 ;;      Temps:          0       0       0       0       0       0       0       0
  4837 ;;      Totals:         2       0       0       0       0       0       0       0
  4838 ;;Total ram usage:        2 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    4
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_EXT_INT_Initialize
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function _INT_SetInterruptHandler
  4850  147C                     _INT_SetInterruptHandler:	
  4851                           
  4852                           ;mcc_generated_files/ext_int.c: 51:     INT_InterruptHandler = InterruptHandler;
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  4856  147C  0872               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  4857  147D  0021               	movlb	1	; select bank1
  4858  147E  00EA               	movwf	(_INT_InterruptHandler+1)^(0+128)
  4859  147F  0871               	movf	INT_SetInterruptHandler@InterruptHandler,w
  4860  1480  00E9               	movwf	_INT_InterruptHandler^(0+128)
  4861  1481  0008               	return
  4862  1482                     __end_of_INT_SetInterruptHandler:	
  4863                           
  4864                           	psect	text14
  4865  0997                     __ptext14:	
  4866 ;; *************** function _EUSART_Initialize *****************
  4867 ;; Defined at:
  4868 ;;		line 85 in file "mcc_generated_files/eusart.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, pclath, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4882 ;;      Params:         0       0       0       0       0       0       0       0
  4883 ;;      Locals:         0       0       0       0       0       0       0       0
  4884 ;;      Temps:          1       0       0       0       0       0       0       0
  4885 ;;      Totals:         1       0       0       0       0       0       0       0
  4886 ;;Total ram usage:        1 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    5
  4889 ;; This function calls:
  4890 ;;		_EUSART_SetErrorHandler
  4891 ;;		_EUSART_SetFramingErrorHandler
  4892 ;;		_EUSART_SetOverrunErrorHandler
  4893 ;;		_EUSART_SetRxInterruptHandler
  4894 ;;		_EUSART_SetTxInterruptHandler
  4895 ;; This function is called by:
  4896 ;;		_SYSTEM_Initialize
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _EUSART_Initialize
  4902  0997                     _EUSART_Initialize:	
  4903                           
  4904                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4908  0997  0021               	movlb	1	; select bank1
  4909  0998  1291               	bcf	17,5	;volatile
  4910                           
  4911                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  4912  0999  30BD               	movlw	low _EUSART_Receive_ISR
  4913  099A  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  4914  099B  3008               	movlw	high _EUSART_Receive_ISR
  4915  099C  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  4916  099D  3194  2470  3189   	fcall	_EUSART_SetRxInterruptHandler
  4917                           
  4918                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  4919  09A0  0021               	movlb	1	; select bank1
  4920  09A1  1211               	bcf	17,4	;volatile
  4921                           
  4922                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  4923  09A2  300F               	movlw	low _EUSART_Transmit_ISR
  4924  09A3  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  4925  09A4  3017               	movlw	high _EUSART_Transmit_ISR
  4926  09A5  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  4927  09A6  3194  2476  3189   	fcall	_EUSART_SetTxInterruptHandler
  4928                           
  4929                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x08;
  4930  09A9  3008               	movlw	8
  4931  09AA  0023               	movlb	3	; select bank3
  4932  09AB  009F               	movwf	31	;volatile
  4933                           
  4934                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  4935  09AC  3090               	movlw	144
  4936  09AD  009D               	movwf	29	;volatile
  4937                           
  4938                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  4939  09AE  3024               	movlw	36
  4940  09AF  009E               	movwf	30	;volatile
  4941                           
  4942                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  4943  09B0  3040               	movlw	64
  4944  09B1  009B               	movwf	27	;volatile
  4945                           
  4946                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  4947  09B2  3003               	movlw	3
  4948  09B3  009C               	movwf	28	;volatile
  4949                           
  4950                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  4951  09B4  302D               	movlw	low _EUSART_DefaultFramingErrorHandler
  4952  09B5  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  4953  09B6  3014               	movlw	high _EUSART_DefaultFramingErrorHandler
  4954  09B7  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  4955  09B8  3194  2464  3189   	fcall	_EUSART_SetFramingErrorHandler
  4956                           
  4957                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  4958  09BB  3040               	movlw	low _EUSART_DefaultOverrunErrorHandler
  4959  09BC  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  4960  09BD  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
  4961  09BE  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  4962  09BF  3194  246A  3189   	fcall	_EUSART_SetOverrunErrorHandler
  4963                           
  4964                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  4965  09C2  3031               	movlw	low _EUSART_DefaultErrorHandler
  4966  09C3  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  4967  09C4  3014               	movlw	high _EUSART_DefaultErrorHandler
  4968  09C5  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  4969  09C6  3194  245E         	fcall	_EUSART_SetErrorHandler
  4970                           
  4971                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  4972  09C8  0021               	movlb	1	; select bank1
  4973  09C9  01C1               	clrf	_eusartRxLastError^(0+128)	;volatile
  4974                           
  4975                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  4976  09CA  01C5               	clrf	_eusartTxHead^(0+128)	;volatile
  4977                           
  4978                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  4979  09CB  01C4               	clrf	_eusartTxTail^(0+128)	;volatile
  4980                           
  4981                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  4982  09CC  3008               	movlw	8
  4983  09CD  00F3               	movwf	??_EUSART_Initialize
  4984  09CE  0873               	movf	??_EUSART_Initialize,w
  4985  09CF  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  4986                           
  4987                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  4988  09D0  01FC               	clrf	_eusartRxHead	;volatile
  4989                           
  4990                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  4991  09D1  01C3               	clrf	_eusartRxTail^(0+128)	;volatile
  4992                           
  4993                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  4994  09D2  01C2               	clrf	_eusartRxCount^(0+128)	;volatile
  4995                           
  4996                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  4997  09D3  1691               	bsf	17,5	;volatile
  4998  09D4  0008               	return
  4999  09D5                     __end_of_EUSART_Initialize:	
  5000                           
  5001                           	psect	text15
  5002  1476                     __ptext15:	
  5003 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5004 ;; Defined at:
  5005 ;;		line 284 in file "mcc_generated_files/eusart.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5008 ;;		 -> EUSART_Transmit_ISR(1), 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5020 ;;      Params:         2       0       0       0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0
  5023 ;;      Totals:         2       0       0       0       0       0       0       0
  5024 ;;Total ram usage:        2 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    4
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_EUSART_Initialize
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _EUSART_SetTxInterruptHandler
  5036  1476                     _EUSART_SetTxInterruptHandler:	
  5037                           
  5038                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5042  1476  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  5043  1477  0021               	movlb	1	; select bank1
  5044  1478  00EE               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  5045  1479  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  5046  147A  00ED               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  5047  147B  0008               	return
  5048  147C                     __end_of_EUSART_SetTxInterruptHandler:	
  5049                           
  5050                           	psect	text16
  5051  1470                     __ptext16:	
  5052 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5053 ;; Defined at:
  5054 ;;		line 288 in file "mcc_generated_files/eusart.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5057 ;;		 -> EUSART_Receive_ISR(1), 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      void 
  5062 ;; Registers used:
  5063 ;;		wreg
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5069 ;;      Params:         2       0       0       0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0
  5072 ;;      Totals:         2       0       0       0       0       0       0       0
  5073 ;;Total ram usage:        2 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    4
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_EUSART_Initialize
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           
  5084                           ;psect for function _EUSART_SetRxInterruptHandler
  5085  1470                     _EUSART_SetRxInterruptHandler:	
  5086                           
  5087                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5091  1470  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  5092  1471  0021               	movlb	1	; select bank1
  5093  1472  00EC               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  5094  1473  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  5095  1474  00EB               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  5096  1475  0008               	return
  5097  1476                     __end_of_EUSART_SetRxInterruptHandler:	
  5098                           
  5099                           	psect	text17
  5100  146A                     __ptext17:	
  5101 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5102 ;; Defined at:
  5103 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5106 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      void 
  5111 ;; Registers used:
  5112 ;;		wreg
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5118 ;;      Params:         2       0       0       0       0       0       0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0       0
  5120 ;;      Temps:          0       0       0       0       0       0       0       0
  5121 ;;      Totals:         2       0       0       0       0       0       0       0
  5122 ;;Total ram usage:        2 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    4
  5125 ;; This function calls:
  5126 ;;		Nothing
  5127 ;; This function is called by:
  5128 ;;		_EUSART_Initialize
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           
  5133                           ;psect for function _EUSART_SetOverrunErrorHandler
  5134  146A                     _EUSART_SetOverrunErrorHandler:	
  5135                           
  5136                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
  5137                           
  5138                           ;incstack = 0
  5139                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5140  146A  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  5141  146B  0022               	movlb	2	; select bank2
  5142  146C  00CE               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5143  146D  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5144  146E  00CD               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5145  146F  0008               	return
  5146  1470                     __end_of_EUSART_SetOverrunErrorHandler:	
  5147                           
  5148                           	psect	text18
  5149  1464                     __ptext18:	
  5150 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5151 ;; Defined at:
  5152 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5155 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;		None
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      void 
  5160 ;; Registers used:
  5161 ;;		wreg
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5167 ;;      Params:         2       0       0       0       0       0       0       0
  5168 ;;      Locals:         0       0       0       0       0       0       0       0
  5169 ;;      Temps:          0       0       0       0       0       0       0       0
  5170 ;;      Totals:         2       0       0       0       0       0       0       0
  5171 ;;Total ram usage:        2 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    4
  5174 ;; This function calls:
  5175 ;;		Nothing
  5176 ;; This function is called by:
  5177 ;;		_EUSART_Initialize
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           
  5182                           ;psect for function _EUSART_SetFramingErrorHandler
  5183  1464                     _EUSART_SetFramingErrorHandler:	
  5184                           
  5185                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
  5186                           
  5187                           ;incstack = 0
  5188                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5189  1464  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  5190  1465  0022               	movlb	2	; select bank2
  5191  1466  00D0               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5192  1467  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5193  1468  00CF               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5194  1469  0008               	return
  5195  146A                     __end_of_EUSART_SetFramingErrorHandler:	
  5196                           
  5197                           	psect	text19
  5198  145E                     __ptext19:	
  5199 ;; *************** function _EUSART_SetErrorHandler *****************
  5200 ;; Defined at:
  5201 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  5204 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;		None
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  1    wreg      void 
  5209 ;; Registers used:
  5210 ;;		wreg
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5216 ;;      Params:         2       0       0       0       0       0       0       0
  5217 ;;      Locals:         0       0       0       0       0       0       0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0
  5219 ;;      Totals:         2       0       0       0       0       0       0       0
  5220 ;;Total ram usage:        2 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    4
  5223 ;; This function calls:
  5224 ;;		Nothing
  5225 ;; This function is called by:
  5226 ;;		_EUSART_Initialize
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           
  5231                           ;psect for function _EUSART_SetErrorHandler
  5232  145E                     _EUSART_SetErrorHandler:	
  5233                           
  5234                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
  5235                           
  5236                           ;incstack = 0
  5237                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5238  145E  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  5239  145F  0022               	movlb	2	; select bank2
  5240  1460  00CC               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5241  1461  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5242  1462  00CB               	movwf	_EUSART_ErrorHandler^(0+256)
  5243  1463  0008               	return
  5244  1464                     __end_of_EUSART_SetErrorHandler:	
  5245                           
  5246                           	psect	text20
  5247  172C                     __ptext20:	
  5248 ;; *************** function _MTOUCH_Service_Mainloop *****************
  5249 ;; Defined at:
  5250 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      _Bool 
  5257 ;; Registers used:
  5258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5264 ;;      Params:         0       0       0       0       0       0       0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0
  5266 ;;      Temps:          0       0       0       1       0       0       0       0
  5267 ;;      Totals:         0       0       0       1       0       0       0       0
  5268 ;;Total ram usage:        1 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:   17
  5271 ;; This function calls:
  5272 ;;		_MTOUCH_Button_ServiceAll
  5273 ;;		_MTOUCH_Sensor_SampleAll
  5274 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5275 ;;		_MTOUCH_Tick
  5276 ;;		_MTOUCH_needReburst
  5277 ;; This function is called by:
  5278 ;;		_main
  5279 ;;		_touch_example
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _MTOUCH_Service_Mainloop
  5285  172C                     _MTOUCH_Service_Mainloop:	
  5286                           
  5287                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  5288                           
  5289                           ;incstack = 0
  5290 ;; hardware stack exceeded
  5291                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5292  172C  0021               	movlb	1	; select bank1
  5293  172D  01C8               	clrf	_mtouch_time_toScan^(0+128)
  5294  172E  0AC8               	incf	_mtouch_time_toScan^(0+128),f
  5295                           
  5296                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  5297                           
  5298                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  5299  172F  3196  2618  3197   	fcall	_MTOUCH_Sensor_SampleAll
  5300  1732  3A00               	xorlw	0
  5301  1733  1D03               	skipz
  5302  1734  2F37               	goto	l5805
  5303                           
  5304                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  5305  1735  3000               	movlw	0
  5306  1736  0008               	return
  5307  1737                     l5805:	
  5308                           
  5309                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  5310  1737  3195  254C  3197   	fcall	_MTOUCH_Button_ServiceAll
  5311                           
  5312                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  5313  173A  3180  2002  3197   	fcall	_MTOUCH_needReburst
  5314  173D  0022               	movlb	2	; select bank2
  5315  173E  00D1               	movwf	??_MTOUCH_Service_Mainloop^(0+256)
  5316  173F  0851               	movf	??_MTOUCH_Service_Mainloop^(0+256),w
  5317  1740  0021               	movlb	1	; select bank1
  5318  1741  00C8               	movwf	_mtouch_time_toScan^(0+128)
  5319                           
  5320                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  5321  1742  3195  25C5  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  5322                           
  5323                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  5324  1745  3194  243D         	fcall	_MTOUCH_Tick
  5325                           
  5326                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  5327  1747  3001               	movlw	1
  5328  1748  0008               	return
  5329  1749                     __end_of_MTOUCH_Service_Mainloop:	
  5330                           
  5331                           	psect	text21
  5332  0002                     __ptext21:	
  5333 ;; *************** function _MTOUCH_needReburst *****************
  5334 ;; Defined at:
  5335 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  needReburst     1    0        _Bool 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      _Bool 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5349 ;;      Params:         0       0       0       0       0       0       0       0
  5350 ;;      Locals:         1       0       0       0       0       0       0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0
  5352 ;;      Totals:         1       0       0       0       0       0       0       0
  5353 ;;Total ram usage:        1 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    4
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_MTOUCH_Service_Mainloop
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function _MTOUCH_needReburst
  5365  0002                     _MTOUCH_needReburst:	
  5366                           
  5367                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  5371  0002  3000               	movlw	0
  5372  0003  0008               	return
  5373  0004                     __end_of_MTOUCH_needReburst:	
  5374                           
  5375                           	psect	text22
  5376  143D                     __ptext22:	
  5377 ;; *************** function _MTOUCH_Tick *****************
  5378 ;; Defined at:
  5379 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5393 ;;      Params:         0       0       0       0       0       0       0       0
  5394 ;;      Locals:         0       0       0       0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0       0
  5396 ;;      Totals:         0       0       0       0       0       0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    6
  5400 ;; This function calls:
  5401 ;;		_MTOUCH_Button_Tick
  5402 ;; This function is called by:
  5403 ;;		_MTOUCH_Service_Mainloop
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           
  5408                           ;psect for function _MTOUCH_Tick
  5409  143D                     _MTOUCH_Tick:	
  5410                           
  5411                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  5412                           
  5413                           ;incstack = 0
  5414                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5415  143D  3196  262E         	fcall	_MTOUCH_Button_Tick
  5416  143F  0008               	return
  5417  1440                     __end_of_MTOUCH_Tick:	
  5418                           
  5419                           	psect	text23
  5420  162E                     __ptext23:	
  5421 ;; *************** function _MTOUCH_Button_Tick *****************
  5422 ;; Defined at:
  5423 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;  i               1    5[COMMON] unsigned char 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5437 ;;      Params:         0       0       0       0       0       0       0       0
  5438 ;;      Locals:         1       0       0       0       0       0       0       0
  5439 ;;      Temps:          1       0       0       0       0       0       0       0
  5440 ;;      Totals:         2       0       0       0       0       0       0       0
  5441 ;;Total ram usage:        2 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    5
  5444 ;; This function calls:
  5445 ;;		_Button_Tick_helper
  5446 ;; This function is called by:
  5447 ;;		_MTOUCH_Tick
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           
  5452                           ;psect for function _MTOUCH_Button_Tick
  5453  162E                     _MTOUCH_Button_Tick:	
  5454                           
  5455                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5459  162E  01F5               	clrf	MTOUCH_Button_Tick@i
  5460  162F                     l4283:	
  5461                           
  5462                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  5463  162F  0875               	movf	MTOUCH_Button_Tick@i,w
  5464  1630  00F4               	movwf	??_MTOUCH_Button_Tick
  5465  1631  3003               	movlw	3
  5466  1632                     u4195:	
  5467  1632  35F4               	lslf	??_MTOUCH_Button_Tick,f
  5468  1633  3EFF               	addlw	-1
  5469  1634  1D03               	skipz
  5470  1635  2E32               	goto	u4195
  5471  1636  3574               	lslf	??_MTOUCH_Button_Tick,w
  5472  1637  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  5473  1638  3197  27B1  3196   	fcall	_Button_Tick_helper
  5474                           
  5475                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  5476  163B  3001               	movlw	1
  5477  163C  00F4               	movwf	??_MTOUCH_Button_Tick
  5478  163D  0874               	movf	??_MTOUCH_Button_Tick,w
  5479  163E  07F5               	addwf	MTOUCH_Button_Tick@i,f
  5480  163F  3003               	movlw	3
  5481  1640  0275               	subwf	MTOUCH_Button_Tick@i,w
  5482  1641  1803               	btfsc	3,0
  5483  1642  0008               	return
  5484  1643  2E2F               	goto	l4283
  5485  1644                     __end_of_MTOUCH_Button_Tick:	
  5486                           
  5487                           	psect	text24
  5488  17B1                     __ptext24:	
  5489 ;; *************** function _Button_Tick_helper *****************
  5490 ;; Defined at:
  5491 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  button          1    wreg     PTR struct .
  5494 ;;		 -> mtouch_button(48), 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  button          1    3[COMMON] PTR struct .
  5497 ;;		 -> mtouch_button(48), 
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      void 
  5500 ;; Registers used:
  5501 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5507 ;;      Params:         0       0       0       0       0       0       0       0
  5508 ;;      Locals:         1       0       0       0       0       0       0       0
  5509 ;;      Temps:          2       0       0       0       0       0       0       0
  5510 ;;      Totals:         3       0       0       0       0       0       0       0
  5511 ;;Total ram usage:        3 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    4
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_MTOUCH_Button_Tick
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           
  5522                           ;psect for function _Button_Tick_helper
  5523  17B1                     _Button_Tick_helper:	
  5524                           
  5525                           ;incstack = 0
  5526                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  5527                           ;Button_Tick_helper@button stored from wreg
  5528  17B1  00F3               	movwf	Button_Tick_helper@button
  5529                           
  5530                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  5531  17B2  0873               	movf	Button_Tick_helper@button,w
  5532  17B3  3E02               	addlw	2
  5533  17B4  0086               	movwf	6
  5534  17B5  3001               	movlw	1	; select bank2/3
  5535  17B6  0087               	movwf	7
  5536  17B7  3002               	movlw	2
  5537  17B8  0601               	xorwf	1,w
  5538  17B9  1D03               	btfss	3,2
  5539  17BA  0008               	return
  5540                           
  5541                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  5542  17BB  0873               	movf	Button_Tick_helper@button,w
  5543  17BC  3E0A               	addlw	10
  5544  17BD  0086               	movwf	6
  5545  17BE  3001               	movlw	1	; select bank2/3
  5546  17BF  0087               	movwf	7
  5547  17C0  3001               	movlw	1
  5548  17C1  0781               	addwf	1,f
  5549  17C2  3141               	addfsr 1,1
  5550  17C3  1803               	skipnc
  5551  17C4  0A81               	incf	1,f
  5552                           
  5553                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  5554  17C5  0873               	movf	Button_Tick_helper@button,w
  5555  17C6  3E0A               	addlw	10
  5556  17C7  0086               	movwf	6
  5557  17C8  3001               	movlw	1	; select bank2/3
  5558  17C9  0087               	movwf	7
  5559  17CA  0016               	moviw fsr1++
  5560  17CB  0401               	iorwf	1,w
  5561  17CC  1D03               	btfss	3,2
  5562  17CD  0008               	return
  5563                           
  5564                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  5565  17CE  0873               	movf	Button_Tick_helper@button,w
  5566  17CF  3E0A               	addlw	10
  5567  17D0  0086               	movwf	6
  5568  17D1  3001               	movlw	1	; select bank2/3
  5569  17D2  0087               	movwf	7
  5570  17D3  30FF               	movlw	255
  5571  17D4  3FC0               	movwi [0]fsr1
  5572  17D5  30FF               	movlw	255
  5573  17D6  3FC1               	movwi [1]fsr1
  5574  17D7  0008               	return
  5575  17D8                     __end_of_Button_Tick_helper:	
  5576                           
  5577                           	psect	text25
  5578  15C5                     __ptext25:	
  5579 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  5580 ;; Defined at:
  5581 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;		None
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  sensor          1    3[COMMON] PTR struct .
  5586 ;;		 -> mtouch_sensor(27), 
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      void 
  5589 ;; Registers used:
  5590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5596 ;;      Params:         0       0       0       0       0       0       0       0
  5597 ;;      Locals:         1       0       0       0       0       0       0       0
  5598 ;;      Temps:          1       0       0       0       0       0       0       0
  5599 ;;      Totals:         2       0       0       0       0       0       0       0
  5600 ;;Total ram usage:        2 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    5
  5603 ;; This function calls:
  5604 ;;		_Sensor_Sampled_Reset
  5605 ;; This function is called by:
  5606 ;;		_MTOUCH_Initialize
  5607 ;;		_MTOUCH_Service_Mainloop
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  5613  15C5                     _MTOUCH_Sensor_Sampled_ResetAll:	
  5614                           
  5615                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  5619  15C5  3020               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  5620  15C6  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5621  15C7  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5622  15C8  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  5623  15C9                     L2:	
  5624  15C9  3032               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  5625  15CA  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5626  15CB  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5627  15CC  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5628  15CD  1C03               	btfss	3,0
  5629  15CE  0008               	return
  5630                           
  5631                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  5632  15CF  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  5633  15D0  3194  24AC  3195   	fcall	_Sensor_Sampled_Reset
  5634                           
  5635                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  5636  15D3  3009               	movlw	9
  5637  15D4  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  5638  15D5  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  5639  15D6  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  5640  15D7  2DC9               	goto	L2
  5641  15D8                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  5642                           
  5643                           	psect	text26
  5644  14AC                     __ptext26:	
  5645 ;; *************** function _Sensor_Sampled_Reset *****************
  5646 ;; Defined at:
  5647 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  sensor          1    wreg     PTR struct .
  5650 ;;		 -> mtouch_sensor(27), 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  sensor          1    1[COMMON] PTR struct .
  5653 ;;		 -> mtouch_sensor(27), 
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  1    wreg      void 
  5656 ;; Registers used:
  5657 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5663 ;;      Params:         0       0       0       0       0       0       0       0
  5664 ;;      Locals:         1       0       0       0       0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0       0       0       0
  5666 ;;      Totals:         1       0       0       0       0       0       0       0
  5667 ;;Total ram usage:        1 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:    4
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_MTOUCH_Sensor_Initialize
  5674 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           
  5679                           ;psect for function _Sensor_Sampled_Reset
  5680  14AC                     _Sensor_Sampled_Reset:	
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5684                           ;Sensor_Sampled_Reset@sensor stored from wreg
  5685  14AC  00F1               	movwf	Sensor_Sampled_Reset@sensor
  5686                           
  5687                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  5688  14AD  0871               	movf	Sensor_Sampled_Reset@sensor,w
  5689  14AE  3E08               	addlw	8
  5690  14AF  0086               	movwf	6
  5691  14B0  3001               	movlw	1	; select bank2/3
  5692  14B1  0087               	movwf	7
  5693  14B2  1001               	bcf	1,0
  5694  14B3  0008               	return
  5695  14B4                     __end_of_Sensor_Sampled_Reset:	
  5696                           
  5697                           	psect	text27
  5698  1618                     __ptext27:	
  5699 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5700 ;; Defined at:
  5701 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;  group           1   58[BANK0 ] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      _Bool 
  5708 ;; Registers used:
  5709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5715 ;;      Params:         0       0       0       0       0       0       0       0
  5716 ;;      Locals:         0       1       0       0       0       0       0       0
  5717 ;;      Temps:          0       1       0       0       0       0       0       0
  5718 ;;      Totals:         0       2       0       0       0       0       0       0
  5719 ;;Total ram usage:        2 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:   10
  5722 ;; This function calls:
  5723 ;;		_Sensor_Service
  5724 ;; This function is called by:
  5725 ;;		_MTOUCH_Service_Mainloop
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           
  5730                           ;psect for function _MTOUCH_Sensor_SampleAll
  5731  1618                     _MTOUCH_Sensor_SampleAll:	
  5732                           
  5733                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5737  1618  0020               	movlb	0	; select bank0
  5738  1619  01DA               	clrf	MTOUCH_Sensor_SampleAll@group
  5739  161A                     l5769:	
  5740                           
  5741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  5742  161A  085A               	movf	MTOUCH_Sensor_SampleAll@group,w
  5743  161B  318D  257B  3196   	fcall	_Sensor_Service
  5744  161E  3A00               	xorlw	0
  5745  161F  1903               	skipnz
  5746  1620  2E23               	goto	l5775
  5747                           
  5748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  5749  1621  3000               	movlw	0
  5750  1622  0008               	return
  5751  1623                     l5775:	
  5752                           
  5753                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  5754  1623  3001               	movlw	1
  5755  1624  0020               	movlb	0	; select bank0
  5756  1625  00D9               	movwf	??_MTOUCH_Sensor_SampleAll
  5757  1626  0859               	movf	??_MTOUCH_Sensor_SampleAll,w
  5758  1627  07DA               	addwf	MTOUCH_Sensor_SampleAll@group,f
  5759  1628  3002               	movlw	2
  5760  1629  025A               	subwf	MTOUCH_Sensor_SampleAll@group,w
  5761  162A  1C03               	skipc
  5762  162B  2E1A               	goto	l5769
  5763                           
  5764                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  5765  162C  3001               	movlw	1
  5766  162D  0008               	return
  5767  162E                     __end_of_MTOUCH_Sensor_SampleAll:	
  5768                           
  5769                           	psect	text28
  5770  0D7B                     __ptext28:	
  5771 ;; *************** function _Sensor_Service *****************
  5772 ;; Defined at:
  5773 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  scanGroup       1    wreg     unsigned char 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  scanGroup       1   53[BANK0 ] unsigned char 
  5778 ;;  sensor_adc2     1   56[BANK0 ] PTR struct .
  5779 ;;		 -> mtouch_sensor(27), 
  5780 ;;  sensor_adc1     1   55[BANK0 ] PTR struct .
  5781 ;;		 -> NULL(0), mtouch_sensor(27), 
  5782 ;;  error           1   54[BANK0 ] enum E2868
  5783 ;; Return value:  Size  Location     Type
  5784 ;;                  1    wreg      enum E2868
  5785 ;; Registers used:
  5786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 0/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5792 ;;      Params:         0       0       0       0       0       0       0       0
  5793 ;;      Locals:         0       4       0       0       0       0       0       0
  5794 ;;      Temps:          0       3       0       0       0       0       0       0
  5795 ;;      Totals:         0       7       0       0       0       0       0       0
  5796 ;;Total ram usage:        7 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    9
  5799 ;; This function calls:
  5800 ;;		_Sensor_Acquisition
  5801 ;;		_Sensor_DefaultCallback
  5802 ;;		_Sensor_RawSample_Update
  5803 ;;		_Sensor_isEnabled
  5804 ;;		_Sensor_setSampled
  5805 ;; This function is called by:
  5806 ;;		_MTOUCH_Sensor_SampleAll
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           
  5811                           ;psect for function _Sensor_Service
  5812  0D7B                     _Sensor_Service:	
  5813                           
  5814                           ;incstack = 0
  5815                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5816                           ;Sensor_Service@scanGroup stored from wreg
  5817  0D7B  0020               	movlb	0	; select bank0
  5818  0D7C  00D5               	movwf	Sensor_Service@scanGroup
  5819                           
  5820                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  5821  0D7D  0855               	movf	Sensor_Service@scanGroup,w
  5822  0D7E  00D2               	movwf	??_Sensor_Service
  5823  0D7F  01D3               	clrf	??_Sensor_Service+1
  5824  0D80  35D2               	lslf	??_Sensor_Service,f
  5825  0D81  0DD3               	rlf	??_Sensor_Service+1,f
  5826  0D82  3050               	movlw	low (_sensor_scan_group| (0+32768))
  5827  0D83  0752               	addwf	??_Sensor_Service,w
  5828  0D84  0084               	movwf	4
  5829  0D85  3098               	movlw	high (_sensor_scan_group| (0+32768))
  5830  0D86  3D53               	addwfc	??_Sensor_Service+1,w
  5831  0D87  0085               	movwf	5
  5832  0D88  0800               	movf	0,w	;code access
  5833  0D89  00D4               	movwf	??_Sensor_Service+2
  5834  0D8A  0854               	movf	??_Sensor_Service+2,w
  5835  0D8B  00D7               	movwf	Sensor_Service@sensor_adc1
  5836                           
  5837                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  5838  0D8C  0855               	movf	Sensor_Service@scanGroup,w
  5839  0D8D  00D2               	movwf	??_Sensor_Service
  5840  0D8E  01D3               	clrf	??_Sensor_Service+1
  5841  0D8F  35D2               	lslf	??_Sensor_Service,f
  5842  0D90  0DD3               	rlf	??_Sensor_Service+1,f
  5843  0D91  3051               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  5844  0D92  0752               	addwf	??_Sensor_Service,w
  5845  0D93  0084               	movwf	4
  5846  0D94  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  5847  0D95  3D53               	addwfc	??_Sensor_Service+1,w
  5848  0D96  0085               	movwf	5
  5849  0D97  0800               	movf	0,w	;code access
  5850  0D98  00D4               	movwf	??_Sensor_Service+2
  5851  0D99  0854               	movf	??_Sensor_Service+2,w
  5852  0D9A  00D8               	movwf	Sensor_Service@sensor_adc2
  5853                           
  5854                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  5855  0D9B  0858               	movf	Sensor_Service@sensor_adc2,w
  5856  0D9C  00D2               	movwf	??_Sensor_Service
  5857  0D9D  0852               	movf	??_Sensor_Service,w
  5858  0D9E  00CE               	movwf	Sensor_Acquisition@sensor_adc2
  5859  0D9F  0857               	movf	Sensor_Service@sensor_adc1,w
  5860  0DA0  318A  22C7  318D   	fcall	_Sensor_Acquisition
  5861  0DA3  0020               	movlb	0	; select bank0
  5862  0DA4  00D3               	movwf	??_Sensor_Service+1
  5863  0DA5  0853               	movf	??_Sensor_Service+1,w
  5864  0DA6  00D6               	movwf	Sensor_Service@error
  5865                           
  5866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  5867  0DA7  2DEC               	goto	l5727
  5868  0DA8                     l5705:	
  5869                           
  5870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  5871  0DA8  0857               	movf	Sensor_Service@sensor_adc1,w
  5872  0DA9  3195  257D  318D   	fcall	_Sensor_isEnabled
  5873  0DAC  3A00               	xorlw	0
  5874  0DAD  1903               	skipnz
  5875  0DAE  2DC9               	goto	l5715
  5876                           
  5877                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  5878  0DAF  0021               	movlb	1	; select bank1
  5879  0DB0  0847               	movf	_lowpowerActivated^(0+128),w
  5880  0DB1  1D03               	btfss	3,2
  5881  0DB2  2DB8               	goto	l5711
  5882                           
  5883                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  5884  0DB3  0020               	movlb	0	; select bank0
  5885  0DB4  0857               	movf	Sensor_Service@sensor_adc1,w
  5886  0DB5  3197  27D8  318D   	fcall	_Sensor_RawSample_Update
  5887  0DB8                     l5711:	
  5888                           
  5889                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  5890  0DB8  0020               	movlb	0	; select bank0
  5891  0DB9  0857               	movf	Sensor_Service@sensor_adc1,w
  5892  0DBA  3194  24A4  318D   	fcall	_Sensor_setSampled
  5893                           
  5894                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  5895  0DBD  0020               	movlb	0	; select bank0
  5896  0DBE  0857               	movf	Sensor_Service@sensor_adc1,w
  5897  0DBF  0086               	movwf	6
  5898  0DC0  3001               	movlw	1	; select bank2/3
  5899  0DC1  0087               	movwf	7
  5900  0DC2  0801               	movf	1,w
  5901  0DC3  00D2               	movwf	??_Sensor_Service
  5902  0DC4  0852               	movf	??_Sensor_Service,w
  5903  0DC5  00F1               	movwf	Sensor_DefaultCallback@sensor
  5904  0DC6  3194  2430  318D   	fcall	_Sensor_DefaultCallback
  5905  0DC9                     l5715:	
  5906                           
  5907                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  5908  0DC9  0020               	movlb	0	; select bank0
  5909  0DCA  0858               	movf	Sensor_Service@sensor_adc2,w
  5910  0DCB  3195  257D  318D   	fcall	_Sensor_isEnabled
  5911  0DCE  3A00               	xorlw	0
  5912  0DCF  1903               	skipnz
  5913  0DD0  2E0F               	goto	l5729
  5914                           
  5915                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  5916  0DD1  0021               	movlb	1	; select bank1
  5917  0DD2  0847               	movf	_lowpowerActivated^(0+128),w
  5918  0DD3  1D03               	btfss	3,2
  5919  0DD4  2DDA               	goto	l5721
  5920                           
  5921                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  5922  0DD5  0020               	movlb	0	; select bank0
  5923  0DD6  0858               	movf	Sensor_Service@sensor_adc2,w
  5924  0DD7  3197  27D8  318D   	fcall	_Sensor_RawSample_Update
  5925  0DDA                     l5721:	
  5926                           
  5927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  5928  0DDA  0020               	movlb	0	; select bank0
  5929  0DDB  0858               	movf	Sensor_Service@sensor_adc2,w
  5930  0DDC  3194  24A4  318D   	fcall	_Sensor_setSampled
  5931                           
  5932                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  5933  0DDF  0020               	movlb	0	; select bank0
  5934  0DE0  0858               	movf	Sensor_Service@sensor_adc2,w
  5935  0DE1  0086               	movwf	6
  5936  0DE2  3001               	movlw	1	; select bank2/3
  5937  0DE3  0087               	movwf	7
  5938  0DE4  0801               	movf	1,w
  5939  0DE5  00D2               	movwf	??_Sensor_Service
  5940  0DE6  0852               	movf	??_Sensor_Service,w
  5941  0DE7  00F1               	movwf	Sensor_DefaultCallback@sensor
  5942  0DE8  3194  2430  318D   	fcall	_Sensor_DefaultCallback
  5943  0DEB  2E0F               	goto	l5729
  5944  0DEC                     l5727:	
  5945  0DEC  0856               	movf	Sensor_Service@error,w
  5946  0DED  00D2               	movwf	??_Sensor_Service
  5947  0DEE  01D3               	clrf	??_Sensor_Service+1
  5948  0DEF  1BD2               	btfsc	??_Sensor_Service,7
  5949  0DF0  03D3               	decf	??_Sensor_Service+1,f
  5950                           
  5951                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5952                           ; Switch size 1, requested type "simple"
  5953                           ; Number of cases is 2, Range of values is 0 to 255
  5954                           ; switch strategies available:
  5955                           ; Name         Instructions Cycles
  5956                           ; simple_byte            7     4 (average)
  5957                           ; jumptable            260     6 (fixed)
  5958                           ;	Chosen strategy is simple_byte
  5959  0DF1  0853               	movf	??_Sensor_Service+1,w
  5960  0DF2  3A00               	xorlw	0	; case 0
  5961  0DF3  1903               	skipnz
  5962  0DF4  2DF9               	goto	l6039
  5963  0DF5  3AFF               	xorlw	255	; case 255
  5964  0DF6  1903               	skipnz
  5965  0DF7  2DFE               	goto	l6041
  5966  0DF8  2E0F               	goto	l5729
  5967  0DF9                     l6039:	
  5968                           
  5969                           ; Switch size 1, requested type "simple"
  5970                           ; Number of cases is 1, Range of values is 0 to 0
  5971                           ; switch strategies available:
  5972                           ; Name         Instructions Cycles
  5973                           ; simple_byte            4     3 (average)
  5974                           ; direct_byte            8     6 (fixed)
  5975                           ; jumptable            260     6 (fixed)
  5976                           ;	Chosen strategy is simple_byte
  5977  0DF9  0852               	movf	??_Sensor_Service,w
  5978  0DFA  3A00               	xorlw	0	; case 0
  5979  0DFB  1903               	skipnz
  5980  0DFC  2DA8               	goto	l5705
  5981  0DFD  2E0F               	goto	l5729
  5982  0DFE                     l6041:	
  5983                           
  5984                           ; Switch size 1, requested type "simple"
  5985                           ; Number of cases is 5, Range of values is 251 to 255
  5986                           ; switch strategies available:
  5987                           ; Name         Instructions Cycles
  5988                           ; direct_byte           15     5 (fixed)
  5989                           ; simple_byte           16     9 (average)
  5990                           ; jumptable            263     9 (fixed)
  5991                           ;	Chosen strategy is simple_byte
  5992  0DFE  0852               	movf	??_Sensor_Service,w
  5993  0DFF  3AFB               	xorlw	251	; case 251
  5994  0E00  1903               	skipnz
  5995  0E01  2E0F               	goto	l5729
  5996  0E02  3A07               	xorlw	7	; case 252
  5997  0E03  1903               	skipnz
  5998  0E04  2E0F               	goto	l5729
  5999  0E05  3A01               	xorlw	1	; case 253
  6000  0E06  1903               	skipnz
  6001  0E07  2E0F               	goto	l5729
  6002  0E08  3A03               	xorlw	3	; case 254
  6003  0E09  1903               	skipnz
  6004  0E0A  2E0F               	goto	l5729
  6005  0E0B  3A01               	xorlw	1	; case 255
  6006  0E0C  1903               	skipnz
  6007  0E0D  2E0F               	goto	l5729
  6008  0E0E  2E0F               	goto	l5729
  6009  0E0F                     l5729:	
  6010                           
  6011                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  6012  0E0F  0020               	movlb	0	; select bank0
  6013  0E10  0856               	movf	Sensor_Service@error,w
  6014  0E11  0008               	return
  6015  0E12                     __end_of_Sensor_Service:	
  6016                           
  6017                           	psect	text29
  6018  14A4                     __ptext29:	
  6019 ;; *************** function _Sensor_setSampled *****************
  6020 ;; Defined at:
  6021 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  sensor          1    wreg     PTR struct .
  6024 ;;		 -> NULL(0), mtouch_sensor(27), 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;  sensor          1    1[COMMON] PTR struct .
  6027 ;;		 -> NULL(0), mtouch_sensor(27), 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      void 
  6030 ;; Registers used:
  6031 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6037 ;;      Params:         0       0       0       0       0       0       0       0
  6038 ;;      Locals:         1       0       0       0       0       0       0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0
  6040 ;;      Totals:         1       0       0       0       0       0       0       0
  6041 ;;Total ram usage:        1 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    4
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_Sensor_Service
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           
  6052                           ;psect for function _Sensor_setSampled
  6053  14A4                     _Sensor_setSampled:	
  6054                           
  6055                           ;incstack = 0
  6056                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  6057                           ;Sensor_setSampled@sensor stored from wreg
  6058  14A4  00F1               	movwf	Sensor_setSampled@sensor
  6059                           
  6060                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  6061  14A5  0871               	movf	Sensor_setSampled@sensor,w
  6062  14A6  3E08               	addlw	8
  6063  14A7  0086               	movwf	6
  6064  14A8  3001               	movlw	1	; select bank2/3
  6065  14A9  0087               	movwf	7
  6066  14AA  1401               	bsf	1,0
  6067  14AB  0008               	return
  6068  14AC                     __end_of_Sensor_setSampled:	
  6069                           
  6070                           	psect	text30
  6071  17D8                     __ptext30:	
  6072 ;; *************** function _Sensor_RawSample_Update *****************
  6073 ;; Defined at:
  6074 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  sensor          1    wreg     PTR struct .
  6077 ;;		 -> NULL(0), mtouch_sensor(27), 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;  sensor          1    7[COMMON] PTR struct .
  6080 ;;		 -> NULL(0), mtouch_sensor(27), 
  6081 ;;  adcIndex        1    6[COMMON] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6091 ;;      Params:         0       0       0       0       0       0       0       0
  6092 ;;      Locals:         2       0       0       0       0       0       0       0
  6093 ;;      Temps:          1       0       0       0       0       0       0       0
  6094 ;;      Totals:         3       0       0       0       0       0       0       0
  6095 ;;Total ram usage:        3 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    5
  6098 ;; This function calls:
  6099 ;;		_Sensor_getScanGroupIndex
  6100 ;; This function is called by:
  6101 ;;		_Sensor_Service
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           
  6106                           ;psect for function _Sensor_RawSample_Update
  6107  17D8                     _Sensor_RawSample_Update:	
  6108                           
  6109                           ;incstack = 0
  6110                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6111                           ;Sensor_RawSample_Update@sensor stored from wreg
  6112  17D8  00F7               	movwf	Sensor_RawSample_Update@sensor
  6113                           
  6114                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  6115  17D9  0877               	movf	Sensor_RawSample_Update@sensor,w
  6116  17DA  3188  2033  3197   	fcall	_Sensor_getScanGroupIndex
  6117  17DD  00F5               	movwf	??_Sensor_RawSample_Update
  6118  17DE  0875               	movf	??_Sensor_RawSample_Update,w
  6119  17DF  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  6120                           
  6121                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  6122  17E0  1F8B               	btfss	11,7	;volatile
  6123  17E1  2FF2               	goto	l5593
  6124                           
  6125                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  6126  17E2  138B               	bcf	11,7	;volatile
  6127                           
  6128                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  6129  17E3  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6130  17E4  3EA8               	addlw	(low (_packet_sample| 0))& (0+255)
  6131  17E5  0086               	movwf	6
  6132  17E6  0187               	clrf	7
  6133  17E7  0877               	movf	Sensor_RawSample_Update@sensor,w
  6134  17E8  3E06               	addlw	6
  6135  17E9  0084               	movwf	4
  6136  17EA  3001               	movlw	1	; select bank2/3
  6137  17EB  0085               	movwf	5
  6138  17EC  3F40               	moviw [0]fsr1
  6139  17ED  3F80               	movwi [0]fsr0
  6140  17EE  3F41               	moviw [1]fsr1
  6141  17EF  3F81               	movwi [1]fsr0
  6142                           
  6143                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  6144  17F0  178B               	bsf	11,7	;volatile
  6145                           
  6146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  6147  17F1  0008               	return
  6148  17F2                     l5593:	
  6149                           
  6150                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  6151  17F2  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  6152  17F3  3EA8               	addlw	(low (_packet_sample| 0))& (0+255)
  6153  17F4  0086               	movwf	6
  6154  17F5  0187               	clrf	7
  6155  17F6  0877               	movf	Sensor_RawSample_Update@sensor,w
  6156  17F7  3E06               	addlw	6
  6157  17F8  0084               	movwf	4
  6158  17F9  3001               	movlw	1	; select bank2/3
  6159  17FA  0085               	movwf	5
  6160  17FB  3F40               	moviw [0]fsr1
  6161  17FC  3F80               	movwi [0]fsr0
  6162  17FD  3F41               	moviw [1]fsr1
  6163  17FE  3F81               	movwi [1]fsr0
  6164  17FF  0008               	return
  6165  1800                     __end_of_Sensor_RawSample_Update:	
  6166                           
  6167                           	psect	text31
  6168  1430                     __ptext31:	
  6169 ;; *************** function _Sensor_DefaultCallback *****************
  6170 ;; Defined at:
  6171 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  sensor          1    1[COMMON] enum E2864
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;		None
  6176 ;; Return value:  Size  Location     Type
  6177 ;;                  1    wreg      void 
  6178 ;; Registers used:
  6179 ;;		None
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6185 ;;      Params:         1       0       0       0       0       0       0       0
  6186 ;;      Locals:         0       0       0       0       0       0       0       0
  6187 ;;      Temps:          0       0       0       0       0       0       0       0
  6188 ;;      Totals:         1       0       0       0       0       0       0       0
  6189 ;;Total ram usage:        1 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:    4
  6192 ;; This function calls:
  6193 ;;		Nothing
  6194 ;; This function is called by:
  6195 ;;		_Sensor_Service
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           
  6200                           ;psect for function _Sensor_DefaultCallback
  6201  1430                     _Sensor_DefaultCallback:	
  6202                           
  6203                           ;incstack = 0
  6204                           ; Regs used in _Sensor_DefaultCallback: []
  6205  1430  0008               	return
  6206  1431                     __end_of_Sensor_DefaultCallback:	
  6207                           
  6208                           	psect	text32
  6209  0AC7                     __ptext32:	
  6210 ;; *************** function _Sensor_Acquisition *****************
  6211 ;; Defined at:
  6212 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  sensor_adc1     1    wreg     PTR struct .
  6215 ;;		 -> NULL(0), mtouch_sensor(27), 
  6216 ;;  sensor_adc2     1   46[BANK0 ] PTR struct .
  6217 ;;		 -> mtouch_sensor(27), 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  sensor_adc1     1   49[BANK0 ] PTR struct .
  6220 ;;		 -> NULL(0), mtouch_sensor(27), 
  6221 ;;  retry           1   48[BANK0 ] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  1    wreg      enum E2868
  6224 ;; Registers used:
  6225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6231 ;;      Params:         0       1       0       0       0       0       0       0
  6232 ;;      Locals:         0       2       0       0       0       0       0       0
  6233 ;;      Temps:          0       1       0       0       0       0       0       0
  6234 ;;      Totals:         0       4       0       0       0       0       0       0
  6235 ;;Total ram usage:        4 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    8
  6238 ;; This function calls:
  6239 ;;		_Sensor_Acq_ExecutePacket
  6240 ;;		_Sensor_Scanfrequency_Evaluation
  6241 ;;		_Sensor_isActive
  6242 ;;		_Sensor_isCalibrated
  6243 ;;		_Sensor_postAcquisitionProcess
  6244 ;; This function is called by:
  6245 ;;		_Sensor_Service
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _Sensor_Acquisition
  6251  0AC7                     _Sensor_Acquisition:	
  6252                           
  6253                           ;incstack = 0
  6254                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6255                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  6256  0AC7  0020               	movlb	0	; select bank0
  6257  0AC8  00D1               	movwf	Sensor_Acquisition@sensor_adc1
  6258                           
  6259                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  6260  0AC9  3005               	movlw	5
  6261  0ACA  00CF               	movwf	??_Sensor_Acquisition
  6262  0ACB  084F               	movf	??_Sensor_Acquisition,w
  6263  0ACC  00D0               	movwf	Sensor_Acquisition@retry
  6264                           
  6265                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  6266  0ACD  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  6267  0ACE  1D03               	btfss	3,2
  6268  0ACF  2ADD               	goto	l5557
  6269  0AD0  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  6270  0AD1  1D03               	btfss	3,2
  6271  0AD2  2ADD               	goto	l5557
  6272                           
  6273                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  6274  0AD3  30FF               	movlw	255
  6275  0AD4  0008               	return
  6276  0AD5                     l5551:	
  6277                           
  6278                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  6279  0AD5  3001               	movlw	1
  6280  0AD6  0020               	movlb	0	; select bank0
  6281  0AD7  02D0               	subwf	Sensor_Acquisition@retry,f
  6282                           
  6283                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  6284  0AD8  0850               	movf	Sensor_Acquisition@retry,w
  6285  0AD9  1D03               	btfss	3,2
  6286  0ADA  2ADD               	goto	l5557
  6287                           
  6288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6289  0ADB  30FC               	movlw	252
  6290  0ADC  0008               	return
  6291  0ADD                     l5557:	
  6292                           
  6293                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  6294  0ADD  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  6295  0ADE  00CF               	movwf	??_Sensor_Acquisition
  6296  0ADF  084F               	movf	??_Sensor_Acquisition,w
  6297  0AE0  00B2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6298  0AE1  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  6299  0AE2  3180  2060  318A   	fcall	_Sensor_Acq_ExecutePacket
  6300  0AE5  3A00               	xorlw	0
  6301  0AE6  1D03               	skipz
  6302  0AE7  2AD5               	goto	l5551
  6303                           
  6304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  6305  0AE8  0020               	movlb	0	; select bank0
  6306  0AE9  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  6307  0AEA  1903               	btfsc	3,2
  6308  0AEB  2AF0               	goto	l5563
  6309                           
  6310                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  6311  0AEC  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  6312  0AED  3189  215A  318A   	fcall	_Sensor_postAcquisitionProcess
  6313  0AF0                     l5563:	
  6314                           
  6315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  6316  0AF0  0020               	movlb	0	; select bank0
  6317  0AF1  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  6318  0AF2  1903               	btfsc	3,2
  6319  0AF3  2AF8               	goto	l5567
  6320                           
  6321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  6322  0AF4  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  6323  0AF5  3189  215A  318A   	fcall	_Sensor_postAcquisitionProcess
  6324  0AF8                     l5567:	
  6325                           
  6326                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  6327  0AF8  0020               	movlb	0	; select bank0
  6328  0AF9  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  6329  0AFA  3195  2512  318A   	fcall	_Sensor_isActive
  6330  0AFD  3A00               	xorlw	0
  6331  0AFE  1903               	skipnz
  6332  0AFF  2B08               	goto	l5571
  6333  0B00  0020               	movlb	0	; select bank0
  6334  0B01  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  6335  0B02  3194  24BD  318A   	fcall	_Sensor_isCalibrated
  6336  0B05  3A00               	xorlw	0
  6337  0B06  1D03               	skipz
  6338  0B07  2B18               	goto	l5575
  6339  0B08                     l5571:	
  6340  0B08  0020               	movlb	0	; select bank0
  6341  0B09  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  6342  0B0A  3195  2512  318A   	fcall	_Sensor_isActive
  6343  0B0D  3A00               	xorlw	0
  6344  0B0E  1903               	skipnz
  6345  0B0F  2B21               	goto	l5579
  6346  0B10  0020               	movlb	0	; select bank0
  6347  0B11  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  6348  0B12  3194  24BD  318A   	fcall	_Sensor_isCalibrated
  6349  0B15  3A00               	xorlw	0
  6350  0B16  1903               	skipnz
  6351  0B17  2B21               	goto	l5579
  6352  0B18                     l5575:	
  6353                           
  6354                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  6355  0B18  0020               	movlb	0	; select bank0
  6356  0B19  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  6357  0B1A  00CF               	movwf	??_Sensor_Acquisition
  6358  0B1B  084F               	movf	??_Sensor_Acquisition,w
  6359  0B1C  00C1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  6360  0B1D  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  6361  0B1E  318E  26AA         	fcall	_Sensor_Scanfrequency_Evaluation
  6362  0B20  0008               	return
  6363  0B21                     l5579:	
  6364                           
  6365                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  6366  0B21  3000               	movlw	0
  6367  0B22  0008               	return
  6368  0B23                     __end_of_Sensor_Acquisition:	
  6369                           
  6370                           	psect	text33
  6371  095A                     __ptext33:	
  6372 ;; *************** function _Sensor_postAcquisitionProcess *****************
  6373 ;; Defined at:
  6374 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  sensor          1    wreg     PTR struct .
  6377 ;;		 -> NULL(0), mtouch_sensor(27), 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  sensor          1   19[BANK0 ] PTR struct .
  6380 ;;		 -> NULL(0), mtouch_sensor(27), 
  6381 ;;  deviation       2   17[BANK0 ] unsigned short 
  6382 ;;  adcIndex        1   16[BANK0 ] unsigned char 
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      void 
  6385 ;; Registers used:
  6386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6392 ;;      Params:         0       0       0       0       0       0       0       0
  6393 ;;      Locals:         0       4       0       0       0       0       0       0
  6394 ;;      Temps:          1       0       0       0       0       0       0       0
  6395 ;;      Totals:         1       4       0       0       0       0       0       0
  6396 ;;Total ram usage:        5 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    5
  6399 ;; This function calls:
  6400 ;;		_Sensor_getScanGroupIndex
  6401 ;;		_Sensor_isEnabled
  6402 ;;		_Sensor_setActive
  6403 ;;		_Sensor_setInactive
  6404 ;;		_abs
  6405 ;; This function is called by:
  6406 ;;		_Sensor_Acquisition
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           
  6411                           ;psect for function _Sensor_postAcquisitionProcess
  6412  095A                     _Sensor_postAcquisitionProcess:	
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6416                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  6417  095A  0020               	movlb	0	; select bank0
  6418  095B  00B3               	movwf	Sensor_postAcquisitionProcess@sensor
  6419                           
  6420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  6421  095C  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  6422  095D  3188  2033  3189   	fcall	_Sensor_getScanGroupIndex
  6423  0960  00F8               	movwf	??_Sensor_postAcquisitionProcess
  6424  0961  0878               	movf	??_Sensor_postAcquisitionProcess,w
  6425  0962  0020               	movlb	0	; select bank0
  6426  0963  00B0               	movwf	Sensor_postAcquisitionProcess@adcIndex
  6427                           
  6428                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  6429  0964  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  6430  0965  3195  257D  3189   	fcall	_Sensor_isEnabled
  6431  0968  3A00               	xorlw	0
  6432  0969  1903               	skipnz
  6433  096A  2985               	goto	l5421
  6434                           
  6435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  6436  096B  0020               	movlb	0	; select bank0
  6437  096C  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  6438  096D  3E06               	addlw	6
  6439  096E  0086               	movwf	6
  6440  096F  3001               	movlw	1	; select bank2/3
  6441  0970  0087               	movwf	7
  6442  0971  3530               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  6443  0972  3EA8               	addlw	(low (_packet_sample| 0))& (0+255)
  6444  0973  0084               	movwf	4
  6445  0974  0185               	clrf	5
  6446  0975  3F40               	moviw [0]fsr1
  6447  0976  0200               	subwf	0,w
  6448  0977  00F4               	movwf	abs@a
  6449  0978  3101               	addfsr 0,1
  6450  0979  3F41               	moviw [1]fsr1
  6451  097A  3B00               	subwfb	0,w
  6452  097B  00F5               	movwf	abs@a+1
  6453  097C  3196  2644  3189   	fcall	_abs
  6454  097F  0875               	movf	?_abs+1,w
  6455  0980  0020               	movlb	0	; select bank0
  6456  0981  00B2               	movwf	Sensor_postAcquisitionProcess@deviation+1
  6457  0982  0874               	movf	?_abs,w
  6458  0983  00B1               	movwf	Sensor_postAcquisitionProcess@deviation
  6459  0984  2988               	goto	l5423
  6460  0985                     l5421:	
  6461                           
  6462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  6463  0985  0020               	movlb	0	; select bank0
  6464  0986  01B1               	clrf	Sensor_postAcquisitionProcess@deviation
  6465  0987  01B2               	clrf	Sensor_postAcquisitionProcess@deviation+1
  6466  0988                     l5423:	
  6467                           
  6468                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  6469  0988  3000               	movlw	0
  6470  0989  0232               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  6471  098A  3065               	movlw	101
  6472  098B  1903               	skipnz
  6473  098C  0231               	subwf	Sensor_postAcquisitionProcess@deviation,w
  6474  098D  1C03               	skipc
  6475  098E  2993               	goto	l5427
  6476                           
  6477                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  6478  098F  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  6479  0990  3194  2494         	fcall	_Sensor_setActive
  6480  0992  0008               	return
  6481  0993                     l5427:	
  6482                           
  6483                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  6484  0993  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  6485  0994  3194  249C         	fcall	_Sensor_setInactive
  6486  0996  0008               	return
  6487  0997                     __end_of_Sensor_postAcquisitionProcess:	
  6488                           
  6489                           	psect	text34
  6490  149C                     __ptext34:	
  6491 ;; *************** function _Sensor_setInactive *****************
  6492 ;; Defined at:
  6493 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  sensor          1    wreg     PTR struct .
  6496 ;;		 -> NULL(0), mtouch_sensor(27), 
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  sensor          1    1[COMMON] PTR struct .
  6499 ;;		 -> NULL(0), mtouch_sensor(27), 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  1    wreg      void 
  6502 ;; Registers used:
  6503 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6509 ;;      Params:         0       0       0       0       0       0       0       0
  6510 ;;      Locals:         1       0       0       0       0       0       0       0
  6511 ;;      Temps:          0       0       0       0       0       0       0       0
  6512 ;;      Totals:         1       0       0       0       0       0       0       0
  6513 ;;Total ram usage:        1 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    4
  6516 ;; This function calls:
  6517 ;;		Nothing
  6518 ;; This function is called by:
  6519 ;;		_Sensor_postAcquisitionProcess
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function _Sensor_setInactive
  6525  149C                     _Sensor_setInactive:	
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6529                           ;Sensor_setInactive@sensor stored from wreg
  6530  149C  00F1               	movwf	Sensor_setInactive@sensor
  6531                           
  6532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  6533  149D  0871               	movf	Sensor_setInactive@sensor,w
  6534  149E  3E08               	addlw	8
  6535  149F  0086               	movwf	6
  6536  14A0  3001               	movlw	1	; select bank2/3
  6537  14A1  0087               	movwf	7
  6538  14A2  1081               	bcf	1,1
  6539  14A3  0008               	return
  6540  14A4                     __end_of_Sensor_setInactive:	
  6541                           
  6542                           	psect	text35
  6543  1494                     __ptext35:	
  6544 ;; *************** function _Sensor_setActive *****************
  6545 ;; Defined at:
  6546 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  sensor          1    wreg     PTR struct .
  6549 ;;		 -> NULL(0), mtouch_sensor(27), 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  sensor          1    1[COMMON] PTR struct .
  6552 ;;		 -> NULL(0), mtouch_sensor(27), 
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  1    wreg      void 
  6555 ;; Registers used:
  6556 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6562 ;;      Params:         0       0       0       0       0       0       0       0
  6563 ;;      Locals:         1       0       0       0       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0       0
  6565 ;;      Totals:         1       0       0       0       0       0       0       0
  6566 ;;Total ram usage:        1 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    4
  6569 ;; This function calls:
  6570 ;;		Nothing
  6571 ;; This function is called by:
  6572 ;;		_Sensor_postAcquisitionProcess
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           
  6577                           ;psect for function _Sensor_setActive
  6578  1494                     _Sensor_setActive:	
  6579                           
  6580                           ;incstack = 0
  6581                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  6582                           ;Sensor_setActive@sensor stored from wreg
  6583  1494  00F1               	movwf	Sensor_setActive@sensor
  6584                           
  6585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  6586  1495  0871               	movf	Sensor_setActive@sensor,w
  6587  1496  3E08               	addlw	8
  6588  1497  0086               	movwf	6
  6589  1498  3001               	movlw	1	; select bank2/3
  6590  1499  0087               	movwf	7
  6591  149A  1481               	bsf	1,1
  6592  149B  0008               	return
  6593  149C                     __end_of_Sensor_setActive:	
  6594                           
  6595                           	psect	text36
  6596  0EAA                     __ptext36:	
  6597 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  6598 ;; Defined at:
  6599 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  sensor_adc1     1    wreg     PTR struct .
  6602 ;;		 -> NULL(0), mtouch_sensor(27), 
  6603 ;;  sensor_adc2     1   33[BANK0 ] PTR struct .
  6604 ;;		 -> mtouch_sensor(27), 
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  6607 ;;		 -> NULL(0), mtouch_sensor(27), 
  6608 ;;  best_packet_    4   41[BANK0 ] unsigned short [2]
  6609 ;;  packet_noise    2   37[BANK0 ] unsigned short 
  6610 ;;  i               1   45[BANK0 ] unsigned char 
  6611 ;;  retry           1   40[BANK0 ] unsigned char 
  6612 ;;  best_sample_    1   39[BANK0 ] unsigned char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1    wreg      enum E2868
  6615 ;; Registers used:
  6616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6622 ;;      Params:         0       1       0       0       0       0       0       0
  6623 ;;      Locals:         0      10       0       0       0       0       0       0
  6624 ;;      Temps:          0       2       0       0       0       0       0       0
  6625 ;;      Totals:         0      13       0       0       0       0       0       0
  6626 ;;Total ram usage:       13 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    7
  6629 ;; This function calls:
  6630 ;;		_Sensor_Acq_ExecutePacket
  6631 ;; This function is called by:
  6632 ;;		_Sensor_Acquisition
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _Sensor_Scanfrequency_Evaluation
  6638  0EAA                     _Sensor_Scanfrequency_Evaluation:	
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6642                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  6643  0EAA  0020               	movlb	0	; select bank0
  6644  0EAB  00C4               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  6645                           
  6646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  6647  0EAC  0021               	movlb	1	; select bank1
  6648  0EAD  083B               	movf	(_packet_noise+1)^(0+128),w
  6649  0EAE  0020               	movlb	0	; select bank0
  6650  0EAF  00C3               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  6651  0EB0  0021               	movlb	1	; select bank1
  6652  0EB1  083A               	movf	_packet_noise^(0+128),w
  6653  0EB2  0020               	movlb	0	; select bank0
  6654  0EB3  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6655  0EB4  36C3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6656  0EB5  0CC2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6657  0EB6  36C3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  6658  0EB7  0CC2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  6659  0EB8  0021               	movlb	1	; select bank1
  6660  0EB9  083A               	movf	_packet_noise^(0+128),w
  6661  0EBA  0020               	movlb	0	; select bank0
  6662  0EBB  0742               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  6663  0EBC  00C5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6664  0EBD  0021               	movlb	1	; select bank1
  6665  0EBE  083B               	movf	(_packet_noise+1)^(0+128),w
  6666  0EBF  0020               	movlb	0	; select bank0
  6667  0EC0  3D43               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  6668  0EC1  00C6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6669                           
  6670                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  6671  0EC2  0021               	movlb	1	; select bank1
  6672  0EC3  0868               	movf	_sample_period^(0+128),w
  6673  0EC4  0020               	movlb	0	; select bank0
  6674  0EC5  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6675  0EC6  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6676  0EC7  00C7               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6677                           
  6678                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  6679  0EC8  0021               	movlb	1	; select bank1
  6680  0EC9  0829               	movf	(_packet_sample+1)^(0+128),w
  6681  0ECA  0020               	movlb	0	; select bank0
  6682  0ECB  00CA               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6683  0ECC  0021               	movlb	1	; select bank1
  6684  0ECD  0828               	movf	_packet_sample^(0+128),w
  6685  0ECE  0020               	movlb	0	; select bank0
  6686  0ECF  00C9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6687                           
  6688                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  6689  0ED0  0021               	movlb	1	; select bank1
  6690  0ED1  082B               	movf	((_packet_sample+1)^(0+128)+2),w
  6691  0ED2  0020               	movlb	0	; select bank0
  6692  0ED3  00CC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  6693  0ED4  0021               	movlb	1	; select bank1
  6694  0ED5  082A               	movf	(_packet_sample^(0+128)+2),w
  6695  0ED6  0020               	movlb	0	; select bank0
  6696  0ED7  00CB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  6697                           
  6698                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  6699  0ED8  01CD               	clrf	Sensor_Scanfrequency_Evaluation@i
  6700  0ED9                     l5443:	
  6701                           
  6702                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  6703  0ED9  084D               	movf	Sensor_Scanfrequency_Evaluation@i,w
  6704  0EDA  3E4B               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6705  0EDB  0084               	movwf	4
  6706  0EDC  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  6707  0EDD  1803               	skipnc
  6708  0EDE  3E01               	addlw	1
  6709  0EDF  0085               	movwf	5
  6710  0EE0  0800               	movf	0,w	;code access
  6711  0EE1  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6712  0EE2  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6713  0EE3  0021               	movlb	1	; select bank1
  6714  0EE4  07E8               	addwf	_sample_period^(0+128),f
  6715                           
  6716                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  6717  0EE5  30AE               	movlw	174
  6718  0EE6  0268               	subwf	_sample_period^(0+128),w
  6719  0EE7  1803               	skipnc
  6720  0EE8  2EEF               	goto	l5451
  6721                           
  6722                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  6723  0EE9  30AE               	movlw	174
  6724  0EEA  0020               	movlb	0	; select bank0
  6725  0EEB  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6726  0EEC  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6727  0EED  0021               	movlb	1	; select bank1
  6728  0EEE  07E8               	addwf	_sample_period^(0+128),f
  6729  0EEF                     l5451:	
  6730                           
  6731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  6732  0EEF  3005               	movlw	5
  6733  0EF0  0020               	movlb	0	; select bank0
  6734  0EF1  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6735  0EF2  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6736  0EF3  00C8               	movwf	Sensor_Scanfrequency_Evaluation@retry
  6737  0EF4                     l5459:	
  6738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  6739                           
  6740                           
  6741                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  6742  0EF4  0841               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  6743  0EF5  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6744  0EF6  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6745  0EF7  00B2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  6746  0EF8  0844               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  6747  0EF9  3180  2060  318E   	fcall	_Sensor_Acq_ExecutePacket
  6748  0EFC  3A00               	xorlw	0
  6749  0EFD  1903               	btfsc	3,2
  6750  0EFE  2F07               	goto	l5461
  6751                           
  6752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  6753  0EFF  3001               	movlw	1
  6754  0F00  0020               	movlb	0	; select bank0
  6755  0F01  02C8               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  6756                           
  6757                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  6758  0F02  0848               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  6759  0F03  1D03               	btfss	3,2
  6760  0F04  2EF4               	goto	l5459
  6761                           
  6762                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  6763  0F05  30FC               	movlw	252
  6764  0F06  0008               	return
  6765  0F07                     l5461:	
  6766                           
  6767                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  6768  0F07  0021               	movlb	1	; select bank1
  6769  0F08  083B               	movf	(_packet_noise+1)^(0+128),w
  6770  0F09  0020               	movlb	0	; select bank0
  6771  0F0A  0246               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  6772  0F0B  1D03               	skipz
  6773  0F0C  2F11               	goto	u6015
  6774  0F0D  0021               	movlb	1	; select bank1
  6775  0F0E  083A               	movf	_packet_noise^(0+128),w
  6776  0F0F  0020               	movlb	0	; select bank0
  6777  0F10  0245               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  6778  0F11                     u6015:	
  6779  0F11  1803               	skipnc
  6780  0F12  2F31               	goto	l5465
  6781                           
  6782                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  6783  0F13  0021               	movlb	1	; select bank1
  6784  0F14  083B               	movf	(_packet_noise+1)^(0+128),w
  6785  0F15  0020               	movlb	0	; select bank0
  6786  0F16  00C6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  6787  0F17  0021               	movlb	1	; select bank1
  6788  0F18  083A               	movf	_packet_noise^(0+128),w
  6789  0F19  0020               	movlb	0	; select bank0
  6790  0F1A  00C5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  6791                           
  6792                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  6793  0F1B  0021               	movlb	1	; select bank1
  6794  0F1C  0868               	movf	_sample_period^(0+128),w
  6795  0F1D  0020               	movlb	0	; select bank0
  6796  0F1E  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6797  0F1F  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6798  0F20  00C7               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  6799                           
  6800                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  6801  0F21  0021               	movlb	1	; select bank1
  6802  0F22  0829               	movf	(_packet_sample+1)^(0+128),w
  6803  0F23  0020               	movlb	0	; select bank0
  6804  0F24  00CA               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  6805  0F25  0021               	movlb	1	; select bank1
  6806  0F26  0828               	movf	_packet_sample^(0+128),w
  6807  0F27  0020               	movlb	0	; select bank0
  6808  0F28  00C9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  6809                           
  6810                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  6811  0F29  0021               	movlb	1	; select bank1
  6812  0F2A  082B               	movf	((_packet_sample+1)^(0+128)+2),w
  6813  0F2B  0020               	movlb	0	; select bank0
  6814  0F2C  00CC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  6815  0F2D  0021               	movlb	1	; select bank1
  6816  0F2E  082A               	movf	(_packet_sample^(0+128)+2),w
  6817  0F2F  0020               	movlb	0	; select bank0
  6818  0F30  00CB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  6819  0F31                     l5465:	
  6820                           
  6821                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  6822  0F31  3001               	movlw	1
  6823  0F32  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6824  0F33  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6825  0F34  07CD               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  6826  0F35  3005               	movlw	5
  6827  0F36  024D               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  6828  0F37  1C03               	skipc
  6829  0F38  2ED9               	goto	l5443
  6830                           
  6831                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  6832  0F39  0847               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  6833  0F3A  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  6834  0F3B  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  6835  0F3C  0021               	movlb	1	; select bank1
  6836  0F3D  00E8               	movwf	_sample_period^(0+128)
  6837                           
  6838                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  6839  0F3E  0020               	movlb	0	; select bank0
  6840  0F3F  084A               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  6841  0F40  0021               	movlb	1	; select bank1
  6842  0F41  00A9               	movwf	(_packet_sample+1)^(0+128)
  6843  0F42  0020               	movlb	0	; select bank0
  6844  0F43  0849               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  6845  0F44  0021               	movlb	1	; select bank1
  6846  0F45  00A8               	movwf	_packet_sample^(0+128)
  6847                           
  6848                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  6849  0F46  0020               	movlb	0	; select bank0
  6850  0F47  084C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  6851  0F48  0021               	movlb	1	; select bank1
  6852  0F49  00AB               	movwf	((_packet_sample+1)^(0+128)+2)
  6853  0F4A  0020               	movlb	0	; select bank0
  6854  0F4B  084B               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  6855  0F4C  0021               	movlb	1	; select bank1
  6856  0F4D  00AA               	movwf	(_packet_sample^(0+128)+2)
  6857                           
  6858                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  6859  0F4E  3000               	movlw	0
  6860  0F4F  0008               	return
  6861  0F50                     __end_of_Sensor_Scanfrequency_Evaluation:	
  6862                           
  6863                           	psect	text37
  6864  0060                     __ptext37:	
  6865 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  6866 ;; Defined at:
  6867 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  sensor_adc1     1    wreg     PTR struct .
  6870 ;;		 -> NULL(0), mtouch_sensor(27), 
  6871 ;;  sensor_adc2     1   18[BANK0 ] PTR struct .
  6872 ;;		 -> mtouch_sensor(27), 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  sensor_adc1     1   32[BANK0 ] PTR struct .
  6875 ;;		 -> NULL(0), mtouch_sensor(27), 
  6876 ;;  last_b          2   29[BANK0 ] unsigned short 
  6877 ;;  last_a          2   27[BANK0 ] unsigned short 
  6878 ;;  packet_count    1   31[BANK0 ] unsigned char 
  6879 ;;  activeSensor    1   26[BANK0 ] unsigned char 
  6880 ;;  ADxIF_flag      1   25[BANK0 ] unsigned char 
  6881 ;;  sensor2Force    1   24[BANK0 ] unsigned char 
  6882 ;;  sensor1Force    1   23[BANK0 ] unsigned char 
  6883 ;;  AD2CON2_temp    1   22[BANK0 ] unsigned char 
  6884 ;;  AD1CON2_temp    1   21[BANK0 ] unsigned char 
  6885 ;;  ADCOMCON_tem    1   20[BANK0 ] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      enum E2868
  6888 ;; Registers used:
  6889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6895 ;;      Params:         0       1       0       0       0       0       0       0
  6896 ;;      Locals:         0      13       0       0       0       0       0       0
  6897 ;;      Temps:          0       1       0       0       0       0       0       0
  6898 ;;      Totals:         0      15       0       0       0       0       0       0
  6899 ;;Total ram usage:       15 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    6
  6902 ;; This function calls:
  6903 ;;		_MTOUCH_Sensor_Scan_Initialize
  6904 ;;		_Sensor_autoCalibration
  6905 ;;		_Sensor_isActive
  6906 ;;		_Sensor_isCalibrated
  6907 ;;		_Sensor_isEnabled
  6908 ;;		_Sensor_loadADCSettings
  6909 ;;		_TMR2_LoadPeriodRegister
  6910 ;;		_TMR2_StartTimer
  6911 ;;		_TMR2_StopTimer
  6912 ;;		_abs
  6913 ;; This function is called by:
  6914 ;;		_Sensor_Acquisition
  6915 ;;		_Sensor_Scanfrequency_Evaluation
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function _Sensor_Acq_ExecutePacket
  6921  0060                     _Sensor_Acq_ExecutePacket:	
  6922                           
  6923                           ;incstack = 0
  6924                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6925                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  6926  0060  0020               	movlb	0	; select bank0
  6927  0061  00C0               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  6928                           
  6929                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  6930  0062  01BB               	clrf	Sensor_Acq_ExecutePacket@last_a
  6931  0063  01BC               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  6932                           
  6933                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  6934  0064  01BD               	clrf	Sensor_Acq_ExecutePacket@last_b
  6935  0065  01BE               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  6936                           
  6937                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  6938  0066  01BA               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  6939                           
  6940                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  6941  0067  01B7               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6942  0068  01B8               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  6943                           
  6944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  6945  0069  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6946  006A  1903               	btfsc	3,2
  6947  006B  28A6               	goto	l5219
  6948  006C  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6949  006D  1903               	btfsc	3,2
  6950  006E  28A6               	goto	l5219
  6951                           
  6952                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  6953  006F  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6954  0070  3E08               	addlw	8
  6955  0071  0086               	movwf	6
  6956  0072  3001               	movlw	1	; select bank2/3
  6957  0073  0087               	movwf	7
  6958  0074  1981               	btfsc	1,3
  6959  0075  2886               	goto	l5201
  6960  0076  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6961  0077  3E08               	addlw	8
  6962  0078  0086               	movwf	6
  6963  0079  3001               	movlw	1	; select bank2/3
  6964  007A  0087               	movwf	7
  6965  007B  1D81               	btfss	1,3
  6966  007C  2886               	goto	l5201
  6967                           
  6968                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  6969  007D  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6970  007E  3E08               	addlw	8
  6971  007F  0086               	movwf	6
  6972  0080  3001               	movlw	1	; select bank2/3
  6973  0081  0087               	movwf	7
  6974  0082  1581               	bsf	1,3
  6975                           
  6976                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  6977  0083  01B7               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  6978  0084  0AB7               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  6979                           
  6980                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  6981  0085  28BB               	goto	l5243
  6982  0086                     l5201:	
  6983  0086  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  6984  0087  3E08               	addlw	8
  6985  0088  0086               	movwf	6
  6986  0089  3001               	movlw	1	; select bank2/3
  6987  008A  0087               	movwf	7
  6988  008B  1981               	btfsc	1,3
  6989  008C  289D               	goto	l5209
  6990  008D  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  6991  008E  3E08               	addlw	8
  6992  008F  0086               	movwf	6
  6993  0090  3001               	movlw	1	; select bank2/3
  6994  0091  0087               	movwf	7
  6995  0092  1D81               	btfss	1,3
  6996  0093  289D               	goto	l5209
  6997                           
  6998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  6999  0094  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7000  0095  3E08               	addlw	8
  7001  0096  0086               	movwf	6
  7002  0097  3001               	movlw	1	; select bank2/3
  7003  0098  0087               	movwf	7
  7004  0099  1581               	bsf	1,3
  7005                           
  7006                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  7007  009A  01B8               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  7008  009B  0AB8               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  7009                           
  7010                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  7011  009C  28BB               	goto	l5243
  7012  009D                     l5209:	
  7013  009D  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7014  009E  3E08               	addlw	8
  7015  009F  0086               	movwf	6
  7016  00A0  3001               	movlw	1	; select bank2/3
  7017  00A1  0087               	movwf	7
  7018  00A2  1981               	btfsc	1,3
  7019  00A3  28BB               	goto	l5243
  7020  00A4                     l5211:	
  7021  00A4  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7022  00A5  28B3               	goto	L4
  7023  00A6                     l5219:	
  7024                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  7025                           
  7026  00A6  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7027  00A7  1D03               	btfss	3,2
  7028  00A8  28AC               	goto	l5231
  7029  00A9  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7030  00AA  1D03               	btfss	3,2
  7031  00AB  28A4               	goto	l5211
  7032  00AC                     l5231:	
  7033                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  7034                           
  7035  00AC  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7036  00AD  1903               	btfsc	3,2
  7037  00AE  28BB               	goto	l5243
  7038  00AF  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7039  00B0  1D03               	btfss	3,2
  7040  00B1  28BB               	goto	l5243
  7041                           
  7042                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  7043  00B2  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7044  00B3                     L4:	
  7045  00B3  3E08               	addlw	8
  7046  00B4  0086               	movwf	6
  7047  00B5  3001               	movlw	1	; select bank2/3
  7048  00B6  0087               	movwf	7
  7049  00B7  1981               	btfsc	1,3
  7050  00B8  28BB               	goto	l5243
  7051  00B9                     l5213:	
  7052                           
  7053                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  7054  00B9  3000               	movlw	0
  7055  00BA  0008               	return
  7056  00BB                     l5243:	
  7057                           
  7058                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  7059  00BB  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7060  00BC  3195  2512  3180   	fcall	_Sensor_isActive
  7061  00BF  3A00               	xorlw	0
  7062  00C0  1903               	skipnz
  7063  00C1  28C5               	goto	l5247
  7064                           
  7065                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  7066  00C2  0020               	movlb	0	; select bank0
  7067  00C3  01BA               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  7068  00C4  0ABA               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  7069  00C5                     l5247:	
  7070                           
  7071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  7072  00C5  002E               	movlb	14	; select bank14
  7073  00C6  0812               	movf	18,w	;volatile
  7074  00C7  0020               	movlb	0	; select bank0
  7075  00C8  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7076  00C9  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7077  00CA  00B4               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  7078                           
  7079                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  7080  00CB  002E               	movlb	14	; select bank14
  7081  00CC  0813               	movf	19,w	;volatile
  7082  00CD  0020               	movlb	0	; select bank0
  7083  00CE  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7084  00CF  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7085  00D0  00B5               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  7086                           
  7087                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  7088  00D1  002F               	movlb	15	; select bank15
  7089  00D2  0813               	movf	19,w	;volatile
  7090  00D3  0020               	movlb	0	; select bank0
  7091  00D4  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7092  00D5  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7093  00D6  00B6               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  7094                           
  7095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  7096  00D7  3195  255C  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  7097                           
  7098                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  7099  00DA  0020               	movlb	0	; select bank0
  7100  00DB  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7101  00DC  1903               	btfsc	3,2
  7102  00DD  28F1               	goto	l5263
  7103                           
  7104                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7105  00DE  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7106  00DF  3E04               	addlw	4
  7107  00E0  0086               	movwf	6
  7108  00E1  3001               	movlw	1	; select bank2/3
  7109  00E2  0087               	movwf	7
  7110  00E3  0801               	movf	1,w
  7111  00E4  3EFF               	addlw	255
  7112  00E5  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7113  00E6  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7114  00E7  00BF               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7115                           
  7116                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  7117  00E8  01B9               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7118                           
  7119                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  7120  00E9  3040               	movlw	64
  7121  00EA  002E               	movlb	14	; select bank14
  7122  00EB  0098               	movwf	24	;volatile
  7123                           
  7124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  7125  00EC  002F               	movlb	15	; select bank15
  7126  00ED  0198               	clrf	24	;volatile
  7127                           
  7128                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x1;
  7129  00EE  0022               	movlb	2	; select bank2
  7130  00EF  141D               	bsf	29,0	;volatile
  7131                           
  7132                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  7133  00F0  2904               	goto	l5273
  7134  00F1                     l5263:	
  7135                           
  7136                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  7137  00F1  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7138  00F2  3E04               	addlw	4
  7139  00F3  0086               	movwf	6
  7140  00F4  3001               	movlw	1	; select bank2/3
  7141  00F5  0087               	movwf	7
  7142  00F6  0801               	movf	1,w
  7143  00F7  3EFF               	addlw	255
  7144  00F8  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7145  00F9  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7146  00FA  00BF               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  7147                           
  7148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  7149  00FB  01B9               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  7150  00FC  0AB9               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  7151                           
  7152                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  7153  00FD  002E               	movlb	14	; select bank14
  7154  00FE  0198               	clrf	24	;volatile
  7155                           
  7156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  7157  00FF  3040               	movlw	64
  7158  0100  002F               	movlb	15	; select bank15
  7159  0101  0098               	movwf	24	;volatile
  7160                           
  7161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  7162  0102  0022               	movlb	2	; select bank2
  7163  0103  101D               	bcf	29,0	;volatile
  7164  0104                     l5273:	
  7165                           
  7166                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  7167  0104  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7168  0105  0020               	movlb	0	; select bank0
  7169  0106  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7170  0107  318F  2750  3180   	fcall	_Sensor_loadADCSettings
  7171                           
  7172                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  7173  010A  01F2               	clrf	Sensor_loadADCSettings@adc_index
  7174  010B  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  7175  010C  0020               	movlb	0	; select bank0
  7176  010D  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7177  010E  318F  2750  3180   	fcall	_Sensor_loadADCSettings
  7178                           
  7179                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  7180  0111  0021               	movlb	1	; select bank1
  7181  0112  1046               	bcf	_sensor_globalFlags^(0+128),0	;volatile
  7182                           
  7183                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  7184  0113  1146               	bcf	_sensor_globalFlags^(0+128),2	;volatile
  7185                           
  7186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  7187  0114  11C6               	bcf	_sensor_globalFlags^(0+128),3	;volatile
  7188                           
  7189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  7190  0115  0868               	movf	_sample_period^(0+128),w
  7191  0116  3194  244D  3180   	fcall	_TMR2_LoadPeriodRegister
  7192                           
  7193                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  7194  0119  3194  2437  3180   	fcall	_TMR2_StartTimer
  7195                           
  7196                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  7197  011C  0021               	movlb	1	; select bank1
  7198  011D  01BA               	clrf	_packet_noise^(0+128)
  7199  011E  01BB               	clrf	(_packet_noise+1)^(0+128)
  7200  011F                     l5289:	
  7201                           
  7202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  7203  011F  0020               	movlb	0	; select bank0
  7204  0120  0839               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  7205  0121  1D03               	btfss	3,2
  7206  0122  292C               	goto	l286
  7207                           
  7208                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7209  0123  1B11               	btfsc	17,6	;volatile
  7210  0124  2927               	goto	l288
  7211  0125  0021               	movlb	1	; select bank1
  7212  0126  10C6               	bcf	_sensor_globalFlags^(0+128),1	;volatile
  7213  0127                     l288:	
  7214  0127  0020               	movlb	0	; select bank0
  7215  0128  1F11               	btfss	17,6	;volatile
  7216  0129  2927               	goto	l288
  7217                           
  7218                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  7219  012A  1311               	bcf	17,6	;volatile
  7220                           
  7221                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  7222  012B  2934               	goto	l5297
  7223  012C                     l286:	
  7224                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  7225                           
  7226                           
  7227                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  7228  012C  1B12               	btfsc	18,6	;volatile
  7229  012D  2930               	goto	l293
  7230  012E  0021               	movlb	1	; select bank1
  7231  012F  10C6               	bcf	_sensor_globalFlags^(0+128),1	;volatile
  7232  0130                     l293:	
  7233  0130  0020               	movlb	0	; select bank0
  7234  0131  1F12               	btfss	18,6	;volatile
  7235  0132  2930               	goto	l293
  7236                           
  7237                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  7238  0133  1312               	bcf	18,6	;volatile
  7239  0134                     l5297:	
  7240                           
  7241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  7242  0134  3021               	movlw	33
  7243  0135  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7244  0136  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7245  0137  002E               	movlb	14	; select bank14
  7246  0138  0698               	xorwf	24,f	;volatile
  7247                           
  7248                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  7249  0139  3021               	movlw	33
  7250  013A  0020               	movlb	0	; select bank0
  7251  013B  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7252  013C  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7253  013D  002F               	movlb	15	; select bank15
  7254  013E  0698               	xorwf	24,f	;volatile
  7255                           
  7256                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  7257  013F  30C0               	movlw	192
  7258  0140  0020               	movlb	0	; select bank0
  7259  0141  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7260  0142  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7261  0143  002E               	movlb	14	; select bank14
  7262  0144  0694               	xorwf	20,f	;volatile
  7263                           
  7264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  7265  0145  30C0               	movlw	192
  7266  0146  0020               	movlb	0	; select bank0
  7267  0147  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  7268  0148  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  7269  0149  002F               	movlb	15	; select bank15
  7270  014A  0694               	xorwf	20,f	;volatile
  7271                           
  7272                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  7273  014B  0020               	movlb	0	; select bank0
  7274  014C  183F               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  7275  014D  2995               	goto	l5313
  7276                           
  7277                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  7278  014E  002E               	movlb	14	; select bank14
  7279  014F  081A               	movf	26,w	;volatile
  7280  0150  0021               	movlb	1	; select bank1
  7281  0151  07A8               	addwf	_packet_sample^(0+128),f
  7282  0152  002E               	movlb	14	; select bank14
  7283  0153  081B               	movf	27,w	;volatile
  7284  0154  0021               	movlb	1	; select bank1
  7285  0155  3DA9               	addwfc	(_packet_sample+1)^(0+128),f
  7286                           
  7287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  7288  0156  002F               	movlb	15	; select bank15
  7289  0157  081A               	movf	26,w	;volatile
  7290  0158  0021               	movlb	1	; select bank1
  7291  0159  07AA               	addwf	(_packet_sample^(0+128)+2),f
  7292  015A  002F               	movlb	15	; select bank15
  7293  015B  081B               	movf	27,w	;volatile
  7294  015C  0021               	movlb	1	; select bank1
  7295  015D  3DAB               	addwfc	((_packet_sample+1)^(0+128)+2),f
  7296                           
  7297                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  7298  015E  0020               	movlb	0	; select bank0
  7299  015F  083A               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7300  0160  1D03               	btfss	3,2
  7301  0161  297A               	goto	l5309
  7302                           
  7303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  7304  0162  002E               	movlb	14	; select bank14
  7305  0163  081A               	movf	26,w	;volatile
  7306  0164  0020               	movlb	0	; select bank0
  7307  0165  023D               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7308  0166  00F4               	movwf	abs@a
  7309  0167  002E               	movlb	14	; select bank14
  7310  0168  081B               	movf	27,w	;volatile
  7311  0169  0020               	movlb	0	; select bank0
  7312  016A  3B3E               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7313  016B  00F5               	movwf	abs@a+1
  7314  016C  3196  2644  3180   	fcall	_abs
  7315  016F  0874               	movf	?_abs,w
  7316  0170  0021               	movlb	1	; select bank1
  7317  0171  07BA               	addwf	_packet_noise^(0+128),f
  7318  0172  0875               	movf	?_abs+1,w
  7319  0173  3DBB               	addwfc	(_packet_noise+1)^(0+128),f
  7320                           
  7321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  7322  0174  002E               	movlb	14	; select bank14
  7323  0175  081B               	movf	27,w	;volatile
  7324  0176  0020               	movlb	0	; select bank0
  7325  0177  00BE               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7326  0178  002E               	movlb	14	; select bank14
  7327  0179  2991               	goto	L3
  7328  017A                     l5309:	
  7329                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  7330                           
  7331                           
  7332                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  7333  017A  002F               	movlb	15	; select bank15
  7334  017B  081A               	movf	26,w	;volatile
  7335  017C  0020               	movlb	0	; select bank0
  7336  017D  023D               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  7337  017E  00F4               	movwf	abs@a
  7338  017F  002F               	movlb	15	; select bank15
  7339  0180  081B               	movf	27,w	;volatile
  7340  0181  0020               	movlb	0	; select bank0
  7341  0182  3B3E               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  7342  0183  00F5               	movwf	abs@a+1
  7343  0184  3196  2644  3180   	fcall	_abs
  7344  0187  0874               	movf	?_abs,w
  7345  0188  0021               	movlb	1	; select bank1
  7346  0189  07BA               	addwf	_packet_noise^(0+128),f
  7347  018A  0875               	movf	?_abs+1,w
  7348  018B  3DBB               	addwfc	(_packet_noise+1)^(0+128),f
  7349                           
  7350                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  7351  018C  002F               	movlb	15	; select bank15
  7352  018D  081B               	movf	27,w	;volatile
  7353  018E  0020               	movlb	0	; select bank0
  7354  018F  00BE               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  7355  0190  002F               	movlb	15	; select bank15
  7356  0191                     L3:	
  7357  0191  081A               	movf	26,w	;volatile
  7358  0192  0020               	movlb	0	; select bank0
  7359  0193  00BD               	movwf	Sensor_Acq_ExecutePacket@last_b
  7360  0194  29CA               	goto	l5325
  7361  0195                     l5313:	
  7362                           
  7363                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  7364  0195  002E               	movlb	14	; select bank14
  7365  0196  081A               	movf	26,w	;volatile
  7366  0197  0021               	movlb	1	; select bank1
  7367  0198  02A8               	subwf	_packet_sample^(0+128),f
  7368  0199  002E               	movlb	14	; select bank14
  7369  019A  081B               	movf	27,w	;volatile
  7370  019B  0021               	movlb	1	; select bank1
  7371  019C  3BA9               	subwfb	(_packet_sample+1)^(0+128),f
  7372                           
  7373                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  7374  019D  002F               	movlb	15	; select bank15
  7375  019E  081A               	movf	26,w	;volatile
  7376  019F  0021               	movlb	1	; select bank1
  7377  01A0  02AA               	subwf	(_packet_sample^(0+128)+2),f
  7378  01A1  002F               	movlb	15	; select bank15
  7379  01A2  081B               	movf	27,w	;volatile
  7380  01A3  0021               	movlb	1	; select bank1
  7381  01A4  3BAB               	subwfb	((_packet_sample+1)^(0+128)+2),f
  7382                           
  7383                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  7384  01A5  0020               	movlb	0	; select bank0
  7385  01A6  083A               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  7386  01A7  1D03               	btfss	3,2
  7387  01A8  29B0               	goto	l5321
  7388                           
  7389                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  7390  01A9  002E               	movlb	14	; select bank14
  7391  01AA  081A               	movf	26,w	;volatile
  7392  01AB  0020               	movlb	0	; select bank0
  7393  01AC  023B               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7394  01AD  00F4               	movwf	abs@a
  7395  01AE  002E               	movlb	14	; select bank14
  7396  01AF  29B6               	goto	L6
  7397  01B0                     l5321:	
  7398                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  7399                           
  7400                           
  7401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  7402  01B0  002F               	movlb	15	; select bank15
  7403  01B1  081A               	movf	26,w	;volatile
  7404  01B2  0020               	movlb	0	; select bank0
  7405  01B3  023B               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  7406  01B4  00F4               	movwf	abs@a
  7407  01B5  002F               	movlb	15	; select bank15
  7408  01B6                     L6:	
  7409  01B6  081B               	movf	27,w	;volatile
  7410  01B7  0020               	movlb	0	; select bank0
  7411  01B8  3B3C               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  7412  01B9  00F5               	movwf	abs@a+1
  7413  01BA  3196  2644  3180   	fcall	_abs
  7414  01BD  0874               	movf	?_abs,w
  7415  01BE  0021               	movlb	1	; select bank1
  7416  01BF  07BA               	addwf	_packet_noise^(0+128),f
  7417  01C0  0875               	movf	?_abs+1,w
  7418  01C1  3DBB               	addwfc	(_packet_noise+1)^(0+128),f
  7419                           
  7420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  7421  01C2  002E               	movlb	14	; select bank14
  7422  01C3  081B               	movf	27,w	;volatile
  7423  01C4  0020               	movlb	0	; select bank0
  7424  01C5  00BC               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  7425  01C6  002E               	movlb	14	; select bank14
  7426  01C7  081A               	movf	26,w	;volatile
  7427  01C8  0020               	movlb	0	; select bank0
  7428  01C9  00BB               	movwf	Sensor_Acq_ExecutePacket@last_a
  7429  01CA                     l5325:	
  7430                           
  7431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  7432  01CA  083F               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  7433  01CB  1D03               	btfss	3,2
  7434  01CC  29CF               	goto	l5329
  7435                           
  7436                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  7437  01CD  0021               	movlb	1	; select bank1
  7438  01CE  1446               	bsf	_sensor_globalFlags^(0+128),0	;volatile
  7439  01CF                     l5329:	
  7440                           
  7441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  7442  01CF  3001               	movlw	1
  7443  01D0  0020               	movlb	0	; select bank0
  7444  01D1  02BF               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  7445                           
  7446                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  7447  01D2  0021               	movlb	1	; select bank1
  7448  01D3  1CC6               	btfss	_sensor_globalFlags^(0+128),1	;volatile
  7449  01D4  29D7               	goto	l303
  7450                           
  7451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  7452  01D5  1546               	bsf	_sensor_globalFlags^(0+128),2	;volatile
  7453                           
  7454                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  7455  01D6  1446               	bsf	_sensor_globalFlags^(0+128),0	;volatile
  7456  01D7                     l303:	
  7457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  7458                           
  7459                           
  7460                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  7461  01D7  14C6               	bsf	_sensor_globalFlags^(0+128),1	;volatile
  7462                           
  7463                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  7464  01D8  1C46               	btfss	_sensor_globalFlags^(0+128),0	;volatile
  7465  01D9  291F               	goto	l5289
  7466                           
  7467                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  7468  01DA  3194  243A  3180   	fcall	_TMR2_StopTimer
  7469                           
  7470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  7471  01DD  0020               	movlb	0	; select bank0
  7472  01DE  0834               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  7473  01DF  002E               	movlb	14	; select bank14
  7474  01E0  0092               	movwf	18	;volatile
  7475                           
  7476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  7477  01E1  0020               	movlb	0	; select bank0
  7478  01E2  0835               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  7479  01E3  002E               	movlb	14	; select bank14
  7480  01E4  0093               	movwf	19	;volatile
  7481                           
  7482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  7483  01E5  0020               	movlb	0	; select bank0
  7484  01E6  0836               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  7485  01E7  002F               	movlb	15	; select bank15
  7486  01E8  0093               	movwf	19	;volatile
  7487                           
  7488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  7489  01E9  0021               	movlb	1	; select bank1
  7490  01EA  1D46               	btfss	_sensor_globalFlags^(0+128),2	;volatile
  7491  01EB  29EE               	goto	l305
  7492                           
  7493                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  7494  01EC  30FB               	movlw	251
  7495  01ED  0008               	return
  7496  01EE                     l305:	
  7497                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  7498                           
  7499                           
  7500                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  7501  01EE  1DC6               	btfss	_sensor_globalFlags^(0+128),3	;volatile
  7502  01EF  29F2               	goto	l5353
  7503                           
  7504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  7505  01F0  30FA               	movlw	250
  7506  01F1  0008               	return
  7507  01F2                     l5353:	
  7508                           
  7509                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  7510  01F2  0020               	movlb	0	; select bank0
  7511  01F3  0837               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  7512  01F4  1903               	btfsc	3,2
  7513  01F5  29FC               	goto	l5357
  7514                           
  7515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  7516  01F6  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7517  01F7  3E08               	addlw	8
  7518  01F8  0086               	movwf	6
  7519  01F9  3001               	movlw	1	; select bank2/3
  7520  01FA  0087               	movwf	7
  7521  01FB  1181               	bcf	1,3
  7522  01FC                     l5357:	
  7523                           
  7524                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  7525  01FC  0838               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  7526  01FD  1903               	btfsc	3,2
  7527  01FE  2A05               	goto	l5361
  7528                           
  7529                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  7530  01FF  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7531  0200  3E08               	addlw	8
  7532  0201  0086               	movwf	6
  7533  0202  3001               	movlw	1	; select bank2/3
  7534  0203  0087               	movwf	7
  7535  0204  1181               	bcf	1,3
  7536  0205                     l5361:	
  7537                           
  7538                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  7539  0205  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7540  0206  3195  257D  3180   	fcall	_Sensor_isEnabled
  7541  0209  3A00               	xorlw	0
  7542  020A  1903               	skipnz
  7543  020B  2A19               	goto	l5367
  7544  020C  0020               	movlb	0	; select bank0
  7545  020D  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7546  020E  3194  24BD  3180   	fcall	_Sensor_isCalibrated
  7547  0211  3A00               	xorlw	0
  7548  0212  1D03               	skipz
  7549  0213  2A19               	goto	l5367
  7550                           
  7551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  7552  0214  0020               	movlb	0	; select bank0
  7553  0215  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  7554  0216  318E  2612  3180   	fcall	_Sensor_autoCalibration
  7555  0219                     l5367:	
  7556                           
  7557                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  7558  0219  0020               	movlb	0	; select bank0
  7559  021A  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7560  021B  3195  257D  3180   	fcall	_Sensor_isEnabled
  7561  021E  3A00               	xorlw	0
  7562  021F  1903               	skipnz
  7563  0220  2A2E               	goto	l5373
  7564  0221  0020               	movlb	0	; select bank0
  7565  0222  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7566  0223  3194  24BD  3180   	fcall	_Sensor_isCalibrated
  7567  0226  3A00               	xorlw	0
  7568  0227  1D03               	skipz
  7569  0228  2A2E               	goto	l5373
  7570                           
  7571                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  7572  0229  0020               	movlb	0	; select bank0
  7573  022A  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  7574  022B  318E  2612  3180   	fcall	_Sensor_autoCalibration
  7575  022E                     l5373:	
  7576                           
  7577                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  7578  022E  002E               	movlb	14	; select bank14
  7579  022F  0196               	clrf	22	;volatile
  7580                           
  7581                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  7582  0230  002F               	movlb	15	; select bank15
  7583  0231  0196               	clrf	22	;volatile
  7584                           
  7585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  7586  0232  002E               	movlb	14	; select bank14
  7587  0233  0197               	clrf	23	;volatile
  7588                           
  7589                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  7590  0234  002F               	movlb	15	; select bank15
  7591  0235  0197               	clrf	23	;volatile
  7592                           
  7593                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  7594  0236  002E               	movlb	14	; select bank14
  7595  0237  1011               	bcf	17,0	;volatile
  7596                           
  7597                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  7598  0238  002F               	movlb	15	; select bank15
  7599  0239  1011               	bcf	17,0	;volatile
  7600  023A  28B9               	goto	l5213
  7601  023B                     __end_of_Sensor_Acq_ExecutePacket:	
  7602                           
  7603                           	psect	text38
  7604  143A                     __ptext38:	
  7605 ;; *************** function _TMR2_StopTimer *****************
  7606 ;; Defined at:
  7607 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;		None
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      void 
  7614 ;; Registers used:
  7615 ;;		None
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7621 ;;      Params:         0       0       0       0       0       0       0       0
  7622 ;;      Locals:         0       0       0       0       0       0       0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0
  7624 ;;      Totals:         0       0       0       0       0       0       0       0
  7625 ;;Total ram usage:        0 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    4
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_Sensor_Acq_ExecutePacket
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function _TMR2_StopTimer
  7637  143A                     _TMR2_StopTimer:	
  7638                           
  7639                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _TMR2_StopTimer: []
  7643  143A  0020               	movlb	0	; select bank0
  7644  143B  111C               	bcf	28,2	;volatile
  7645  143C  0008               	return
  7646  143D                     __end_of_TMR2_StopTimer:	
  7647                           
  7648                           	psect	text39
  7649  1437                     __ptext39:	
  7650 ;; *************** function _TMR2_StartTimer *****************
  7651 ;; Defined at:
  7652 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		None
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7666 ;;      Params:         0       0       0       0       0       0       0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0
  7668 ;;      Temps:          0       0       0       0       0       0       0       0
  7669 ;;      Totals:         0       0       0       0       0       0       0       0
  7670 ;;Total ram usage:        0 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    4
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_Sensor_Acq_ExecutePacket
  7677 ;; This function uses a non-reentrant model
  7678 ;;
  7679                           
  7680                           
  7681                           ;psect for function _TMR2_StartTimer
  7682  1437                     _TMR2_StartTimer:	
  7683                           
  7684                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  7685                           
  7686                           ;incstack = 0
  7687                           ; Regs used in _TMR2_StartTimer: []
  7688  1437  0020               	movlb	0	; select bank0
  7689  1438  151C               	bsf	28,2	;volatile
  7690  1439  0008               	return
  7691  143A                     __end_of_TMR2_StartTimer:	
  7692                           
  7693                           	psect	text40
  7694  144D                     __ptext40:	
  7695 ;; *************** function _TMR2_LoadPeriodRegister *****************
  7696 ;; Defined at:
  7697 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;  periodVal       1    wreg     unsigned char 
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;  periodVal       1    1[COMMON] unsigned char 
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      void 
  7704 ;; Registers used:
  7705 ;;		wreg
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7711 ;;      Params:         0       0       0       0       0       0       0       0
  7712 ;;      Locals:         1       0       0       0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0       0       0       0
  7714 ;;      Totals:         1       0       0       0       0       0       0       0
  7715 ;;Total ram usage:        1 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:    4
  7718 ;; This function calls:
  7719 ;;		Nothing
  7720 ;; This function is called by:
  7721 ;;		_Sensor_Acq_ExecutePacket
  7722 ;; This function uses a non-reentrant model
  7723 ;;
  7724                           
  7725                           
  7726                           ;psect for function _TMR2_LoadPeriodRegister
  7727  144D                     _TMR2_LoadPeriodRegister:	
  7728                           
  7729                           ;incstack = 0
  7730                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  7731                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  7732  144D  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  7733                           
  7734                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  7735  144E  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  7736  144F  0020               	movlb	0	; select bank0
  7737  1450  009B               	movwf	27	;volatile
  7738  1451  0008               	return
  7739  1452                     __end_of_TMR2_LoadPeriodRegister:	
  7740                           
  7741                           	psect	text41
  7742  0F50                     __ptext41:	
  7743 ;; *************** function _Sensor_loadADCSettings *****************
  7744 ;; Defined at:
  7745 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  sensor          1    wreg     PTR struct .
  7748 ;;		 -> NULL(0), mtouch_sensor(27), 
  7749 ;;  adc_index       1    2[COMMON] unsigned char 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  sensor          1    9[COMMON] PTR struct .
  7752 ;;		 -> NULL(0), mtouch_sensor(27), 
  7753 ;;  addressOffse    1    8[COMMON] unsigned char 
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  1    wreg      void 
  7756 ;; Registers used:
  7757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7763 ;;      Params:         1       0       0       0       0       0       0       0
  7764 ;;      Locals:         4       0       0       0       0       0       0       0
  7765 ;;      Temps:          3       0       0       0       0       0       0       0
  7766 ;;      Totals:         8       0       0       0       0       0       0       0
  7767 ;;Total ram usage:        8 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    5
  7770 ;; This function calls:
  7771 ;;		_Sensor_isCalibrated
  7772 ;;		_Sensor_isCalibratingAcqTime
  7773 ;; This function is called by:
  7774 ;;		_Sensor_Acq_ExecutePacket
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           
  7779                           ;psect for function _Sensor_loadADCSettings
  7780  0F50                     _Sensor_loadADCSettings:	
  7781                           
  7782                           ;incstack = 0
  7783                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7784                           ;Sensor_loadADCSettings@sensor stored from wreg
  7785  0F50  00F9               	movwf	Sensor_loadADCSettings@sensor
  7786                           
  7787                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  7788  0F51  0879               	movf	Sensor_loadADCSettings@sensor,w
  7789  0F52  1903               	btfsc	3,2
  7790  0F53  0008               	return
  7791                           
  7792                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  7793  0F54  0872               	movf	Sensor_loadADCSettings@adc_index,w
  7794  0F55  1D03               	btfss	3,2
  7795  0F56  2F5A               	goto	l3621
  7796  0F57  01F6               	clrf	_Sensor_loadADCSettings$562
  7797  0F58  01F7               	clrf	_Sensor_loadADCSettings$562+1
  7798  0F59  2F5E               	goto	l257
  7799  0F5A                     l3621:	
  7800  0F5A  3080               	movlw	128
  7801  0F5B  00F6               	movwf	_Sensor_loadADCSettings$562
  7802  0F5C  3000               	movlw	0
  7803  0F5D  00F7               	movwf	_Sensor_loadADCSettings$562+1
  7804  0F5E                     l257:	
  7805  0F5E  0876               	movf	_Sensor_loadADCSettings$562,w
  7806  0F5F  00F3               	movwf	??_Sensor_loadADCSettings
  7807  0F60  0873               	movf	??_Sensor_loadADCSettings,w
  7808  0F61  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  7809                           
  7810                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  7811  0F62  0A79               	incf	Sensor_loadADCSettings@sensor,w
  7812  0F63  0086               	movwf	6
  7813  0F64  3001               	movlw	1	; select bank2/3
  7814  0F65  0087               	movwf	7
  7815  0F66  0801               	movf	1,w
  7816  0F67  00F3               	movwf	??_Sensor_loadADCSettings
  7817  0F68  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7818  0F69  3E11               	addlw	17
  7819  0F6A  00F4               	movwf	??_Sensor_loadADCSettings+1
  7820  0F6B  01F5               	clrf	??_Sensor_loadADCSettings+2
  7821  0F6C  3007               	movlw	7
  7822  0F6D  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7823  0F6E  0874               	movf	??_Sensor_loadADCSettings+1,w
  7824  0F6F  0086               	movwf	6
  7825  0F70  0875               	movf	??_Sensor_loadADCSettings+2,w
  7826  0F71  0087               	movwf	7
  7827  0F72  0873               	movf	??_Sensor_loadADCSettings,w
  7828  0F73  0081               	movwf	1
  7829                           
  7830                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  7831  0F74  0879               	movf	Sensor_loadADCSettings@sensor,w
  7832  0F75  3E05               	addlw	5
  7833  0F76  0086               	movwf	6
  7834  0F77  3001               	movlw	1	; select bank2/3
  7835  0F78  0087               	movwf	7
  7836  0F79  0801               	movf	1,w
  7837  0F7A  00F3               	movwf	??_Sensor_loadADCSettings
  7838  0F7B  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7839  0F7C  3E19               	addlw	25
  7840  0F7D  00F4               	movwf	??_Sensor_loadADCSettings+1
  7841  0F7E  01F5               	clrf	??_Sensor_loadADCSettings+2
  7842  0F7F  3007               	movlw	7
  7843  0F80  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7844  0F81  0874               	movf	??_Sensor_loadADCSettings+1,w
  7845  0F82  0086               	movwf	6
  7846  0F83  0875               	movf	??_Sensor_loadADCSettings+2,w
  7847  0F84  0087               	movwf	7
  7848  0F85  0873               	movf	??_Sensor_loadADCSettings,w
  7849  0F86  0081               	movwf	1
  7850                           
  7851                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  7852  0F87  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7853  0F88  3E13               	addlw	19
  7854  0F89  00F3               	movwf	??_Sensor_loadADCSettings
  7855  0F8A  01F4               	clrf	??_Sensor_loadADCSettings+1
  7856  0F8B  3007               	movlw	7
  7857  0F8C  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  7858  0F8D  0873               	movf	??_Sensor_loadADCSettings,w
  7859  0F8E  0086               	movwf	6
  7860  0F8F  0874               	movf	??_Sensor_loadADCSettings+1,w
  7861  0F90  0087               	movwf	7
  7862  0F91  3050               	movlw	80
  7863  0F92  0081               	movwf	1
  7864                           
  7865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  7866  0F93  30FE               	movlw	254
  7867  0F94  00F3               	movwf	??_Sensor_loadADCSettings
  7868  0F95  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7869  0F96  3E18               	addlw	24
  7870  0F97  0086               	movwf	6
  7871  0F98  0187               	clrf	7
  7872  0F99  3007               	movlw	7
  7873  0F9A  3D87               	addwfc	7,f
  7874  0F9B  0873               	movf	??_Sensor_loadADCSettings,w
  7875  0F9C  0581               	andwf	1,f
  7876                           
  7877                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  7878  0F9D  0879               	movf	Sensor_loadADCSettings@sensor,w
  7879  0F9E  3194  24BD  318F   	fcall	_Sensor_isCalibrated
  7880  0FA1  3A00               	xorlw	0
  7881  0FA2  1903               	skipnz
  7882  0FA3  2FB8               	goto	l3635
  7883                           
  7884                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  7885  0FA4  0879               	movf	Sensor_loadADCSettings@sensor,w
  7886  0FA5  3E02               	addlw	2
  7887  0FA6  0086               	movwf	6
  7888  0FA7  3001               	movlw	1	; select bank2/3
  7889  0FA8  0087               	movwf	7
  7890  0FA9  0801               	movf	1,w
  7891  0FAA  00F3               	movwf	??_Sensor_loadADCSettings
  7892  0FAB  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7893  0FAC  3E16               	addlw	22
  7894  0FAD  00F4               	movwf	??_Sensor_loadADCSettings+1
  7895  0FAE  01F5               	clrf	??_Sensor_loadADCSettings+2
  7896  0FAF  3007               	movlw	7
  7897  0FB0  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7898  0FB1  0874               	movf	??_Sensor_loadADCSettings+1,w
  7899  0FB2  0086               	movwf	6
  7900  0FB3  0875               	movf	??_Sensor_loadADCSettings+2,w
  7901  0FB4  0087               	movwf	7
  7902  0FB5  0873               	movf	??_Sensor_loadADCSettings,w
  7903  0FB6  0081               	movwf	1
  7904  0FB7  2FCB               	goto	l3639
  7905  0FB8                     l3635:	
  7906                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  7907                           
  7908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  7909                           
  7910                           
  7911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  7912  0FB8  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7913  0FB9  3E16               	addlw	22
  7914  0FBA  00F3               	movwf	??_Sensor_loadADCSettings
  7915  0FBB  01F4               	clrf	??_Sensor_loadADCSettings+1
  7916  0FBC  3007               	movlw	7
  7917  0FBD  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  7918  0FBE  0873               	movf	??_Sensor_loadADCSettings,w
  7919  0FBF  0086               	movwf	6
  7920  0FC0  0874               	movf	??_Sensor_loadADCSettings+1,w
  7921  0FC1  0087               	movwf	7
  7922  0FC2  3020               	movlw	32
  7923  0FC3  0081               	movwf	1
  7924                           
  7925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  7926  0FC4  0879               	movf	Sensor_loadADCSettings@sensor,w
  7927  0FC5  3194  24B4  318F   	fcall	_Sensor_isCalibratingAcqTime
  7928  0FC8  3A00               	xorlw	0
  7929  0FC9  1903               	skipnz
  7930  0FCA  2FDE               	goto	l3641
  7931  0FCB                     l3639:	
  7932                           
  7933                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  7934  0FCB  0879               	movf	Sensor_loadADCSettings@sensor,w
  7935  0FCC  3E03               	addlw	3
  7936  0FCD  0086               	movwf	6
  7937  0FCE  3001               	movlw	1	; select bank2/3
  7938  0FCF  0087               	movwf	7
  7939  0FD0  0801               	movf	1,w
  7940  0FD1  00F3               	movwf	??_Sensor_loadADCSettings
  7941  0FD2  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7942  0FD3  3E17               	addlw	23
  7943  0FD4  00F4               	movwf	??_Sensor_loadADCSettings+1
  7944  0FD5  01F5               	clrf	??_Sensor_loadADCSettings+2
  7945  0FD6  3007               	movlw	7
  7946  0FD7  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  7947  0FD8  0874               	movf	??_Sensor_loadADCSettings+1,w
  7948  0FD9  0086               	movwf	6
  7949  0FDA  0875               	movf	??_Sensor_loadADCSettings+2,w
  7950  0FDB  0087               	movwf	7
  7951  0FDC  0873               	movf	??_Sensor_loadADCSettings,w
  7952  0FDD  2FE9               	goto	L7
  7953  0FDE                     l3641:	
  7954                           
  7955                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  7956  0FDE  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  7957  0FDF  3E17               	addlw	23
  7958  0FE0  00F3               	movwf	??_Sensor_loadADCSettings
  7959  0FE1  01F4               	clrf	??_Sensor_loadADCSettings+1
  7960  0FE2  3007               	movlw	7
  7961  0FE3  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  7962  0FE4  0873               	movf	??_Sensor_loadADCSettings,w
  7963  0FE5  0086               	movwf	6
  7964  0FE6  0874               	movf	??_Sensor_loadADCSettings+1,w
  7965  0FE7  0087               	movwf	7
  7966  0FE8  3020               	movlw	32
  7967  0FE9                     L7:	
  7968  0FE9  0081               	movwf	1
  7969                           
  7970                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  7971                           
  7972                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  7973  0FEA  0879               	movf	Sensor_loadADCSettings@sensor,w
  7974  0FEB  3E04               	addlw	4
  7975  0FEC  0086               	movwf	6
  7976  0FED  3001               	movlw	1	; select bank2/3
  7977  0FEE  0087               	movwf	7
  7978  0FEF  0801               	movf	1,w
  7979  0FF0  00F3               	movwf	??_Sensor_loadADCSettings
  7980  0FF1  01F4               	clrf	??_Sensor_loadADCSettings+1
  7981  0FF2  3009               	movlw	9
  7982  0FF3                     u3145:	
  7983  0FF3  35F3               	lslf	??_Sensor_loadADCSettings,f
  7984  0FF4  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  7985  0FF5  0B89               	decfsz	9,f
  7986  0FF6  2FF3               	goto	u3145
  7987  0FF7  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  7988  0FF8  3EA8               	addlw	(low (_packet_sample| 0))& (0+255)
  7989  0FF9  0086               	movwf	6
  7990  0FFA  0187               	clrf	7
  7991  0FFB  0873               	movf	??_Sensor_loadADCSettings,w
  7992  0FFC  3FC0               	movwi [0]fsr1
  7993  0FFD  0874               	movf	??_Sensor_loadADCSettings+1,w
  7994  0FFE  3FC1               	movwi [1]fsr1
  7995  0FFF  0008               	return
  7996  1000                     __end_of_Sensor_loadADCSettings:	
  7997                           
  7998                           	psect	text42
  7999  14BD                     __ptext42:	
  8000 ;; *************** function _Sensor_isCalibrated *****************
  8001 ;; Defined at:
  8002 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;  sensor          1    wreg     PTR struct .
  8005 ;;		 -> NULL(0), mtouch_sensor(27), 
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;  sensor          1    1[COMMON] PTR struct .
  8008 ;;		 -> NULL(0), mtouch_sensor(27), 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      _Bool 
  8011 ;; Registers used:
  8012 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8018 ;;      Params:         0       0       0       0       0       0       0       0
  8019 ;;      Locals:         1       0       0       0       0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0
  8021 ;;      Totals:         1       0       0       0       0       0       0       0
  8022 ;;Total ram usage:        1 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    4
  8025 ;; This function calls:
  8026 ;;		Nothing
  8027 ;; This function is called by:
  8028 ;;		_Sensor_Acquisition
  8029 ;;		_Sensor_loadADCSettings
  8030 ;;		_Sensor_Acq_ExecutePacket
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           
  8035                           ;psect for function _Sensor_isCalibrated
  8036  14BD                     _Sensor_isCalibrated:	
  8037                           
  8038                           ;incstack = 0
  8039                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8040                           ;Sensor_isCalibrated@sensor stored from wreg
  8041  14BD  00F1               	movwf	Sensor_isCalibrated@sensor
  8042                           
  8043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
  8044  14BE  0871               	movf	Sensor_isCalibrated@sensor,w
  8045  14BF  3E08               	addlw	8
  8046  14C0  0086               	movwf	6
  8047  14C1  3001               	movlw	1	; select bank2/3
  8048  14C2  0087               	movwf	7
  8049  14C3  0C01               	rrf	1,w
  8050  14C4  0C89               	rrf	9,f
  8051  14C5  3901               	andlw	1
  8052  14C6  0008               	return
  8053  14C7                     __end_of_Sensor_isCalibrated:	
  8054                           
  8055                           	psect	text43
  8056  157D                     __ptext43:	
  8057 ;; *************** function _Sensor_isEnabled *****************
  8058 ;; Defined at:
  8059 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  sensor          1    wreg     PTR struct .
  8062 ;;		 -> NULL(0), mtouch_sensor(27), 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  sensor          1    2[COMMON] PTR struct .
  8065 ;;		 -> NULL(0), mtouch_sensor(27), 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  1    wreg      _Bool 
  8068 ;; Registers used:
  8069 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8075 ;;      Params:         0       0       0       0       0       0       0       0
  8076 ;;      Locals:         1       0       0       0       0       0       0       0
  8077 ;;      Temps:          1       0       0       0       0       0       0       0
  8078 ;;      Totals:         2       0       0       0       0       0       0       0
  8079 ;;Total ram usage:        2 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    4
  8082 ;; This function calls:
  8083 ;;		Nothing
  8084 ;; This function is called by:
  8085 ;;		_Sensor_Service
  8086 ;;		_Sensor_postAcquisitionProcess
  8087 ;;		_Sensor_Acq_ExecutePacket
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           
  8092                           ;psect for function _Sensor_isEnabled
  8093  157D                     _Sensor_isEnabled:	
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8097                           ;Sensor_isEnabled@sensor stored from wreg
  8098  157D  00F2               	movwf	Sensor_isEnabled@sensor
  8099                           
  8100                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
  8101  157E  0872               	movf	Sensor_isEnabled@sensor,w
  8102  157F  1903               	btfsc	3,2
  8103  1580  2D8C               	goto	l5129
  8104                           
  8105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
  8106  1581  0872               	movf	Sensor_isEnabled@sensor,w
  8107  1582  3E08               	addlw	8
  8108  1583  0086               	movwf	6
  8109  1584  3001               	movlw	1	; select bank2/3
  8110  1585  0087               	movwf	7
  8111  1586  0C01               	rrf	1,w
  8112  1587  00F1               	movwf	??_Sensor_isEnabled
  8113  1588  0CF1               	rrf	??_Sensor_isEnabled,f
  8114  1589  0C71               	rrf	??_Sensor_isEnabled,w
  8115  158A  3901               	andlw	1
  8116  158B  0008               	return
  8117  158C                     l5129:	
  8118                           
  8119                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
  8120  158C  3000               	movlw	0
  8121  158D  0008               	return
  8122  158E                     __end_of_Sensor_isEnabled:	
  8123                           
  8124                           	psect	text44
  8125  1512                     __ptext44:	
  8126 ;; *************** function _Sensor_isActive *****************
  8127 ;; Defined at:
  8128 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;  sensor          1    wreg     PTR struct .
  8131 ;;		 -> NULL(0), mtouch_sensor(27), 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  sensor          1    1[COMMON] PTR struct .
  8134 ;;		 -> NULL(0), mtouch_sensor(27), 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      _Bool 
  8137 ;; Registers used:
  8138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8144 ;;      Params:         0       0       0       0       0       0       0       0
  8145 ;;      Locals:         1       0       0       0       0       0       0       0
  8146 ;;      Temps:          0       0       0       0       0       0       0       0
  8147 ;;      Totals:         1       0       0       0       0       0       0       0
  8148 ;;Total ram usage:        1 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    4
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_Sensor_Acquisition
  8155 ;;		_Sensor_Acq_ExecutePacket
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           
  8160                           ;psect for function _Sensor_isActive
  8161  1512                     _Sensor_isActive:	
  8162                           
  8163                           ;incstack = 0
  8164                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8165                           ;Sensor_isActive@sensor stored from wreg
  8166  1512  00F1               	movwf	Sensor_isActive@sensor
  8167                           
  8168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
  8169  1513  0871               	movf	Sensor_isActive@sensor,w
  8170  1514  1D03               	btfss	3,2
  8171  1515  2D18               	goto	l3609
  8172                           
  8173                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
  8174  1516  3000               	movlw	0
  8175  1517  0008               	return
  8176  1518                     l3609:	
  8177                           
  8178                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
  8179  1518  0871               	movf	Sensor_isActive@sensor,w
  8180  1519  3E08               	addlw	8
  8181  151A  0086               	movwf	6
  8182  151B  3001               	movlw	1	; select bank2/3
  8183  151C  0087               	movwf	7
  8184  151D  0C01               	rrf	1,w
  8185  151E  3901               	andlw	1
  8186  151F  0008               	return
  8187  1520                     __end_of_Sensor_isActive:	
  8188                           
  8189                           	psect	text45
  8190  0E12                     __ptext45:	
  8191 ;; *************** function _Sensor_autoCalibration *****************
  8192 ;; Defined at:
  8193 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;  sensor          1    wreg     PTR struct .
  8196 ;;		 -> NULL(0), mtouch_sensor(27), 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  sensor          1   17[BANK0 ] PTR struct .
  8199 ;;		 -> NULL(0), mtouch_sensor(27), 
  8200 ;;  adcIndex        1   16[BANK0 ] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      void 
  8203 ;; Registers used:
  8204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8210 ;;      Params:         0       0       0       0       0       0       0       0
  8211 ;;      Locals:         0       2       0       0       0       0       0       0
  8212 ;;      Temps:          4       0       0       0       0       0       0       0
  8213 ;;      Totals:         4       2       0       0       0       0       0       0
  8214 ;;Total ram usage:        6 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    5
  8217 ;; This function calls:
  8218 ;;		_Sensor_getScanGroupIndex
  8219 ;;		_Sensor_isCalibratingAcqTime
  8220 ;;		_Sensor_setCalibratAcqTime
  8221 ;;		_Sensor_setCalibrated
  8222 ;;		_abs
  8223 ;; This function is called by:
  8224 ;;		_Sensor_Acq_ExecutePacket
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _Sensor_autoCalibration
  8230  0E12                     _Sensor_autoCalibration:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8234                           ;Sensor_autoCalibration@sensor stored from wreg
  8235  0E12  0020               	movlb	0	; select bank0
  8236  0E13  00B1               	movwf	Sensor_autoCalibration@sensor
  8237                           
  8238                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
  8239  0E14  0831               	movf	Sensor_autoCalibration@sensor,w
  8240  0E15  3188  2033  318E   	fcall	_Sensor_getScanGroupIndex
  8241  0E18  00F8               	movwf	??_Sensor_autoCalibration
  8242  0E19  0878               	movf	??_Sensor_autoCalibration,w
  8243  0E1A  0020               	movlb	0	; select bank0
  8244  0E1B  00B0               	movwf	Sensor_autoCalibration@adcIndex
  8245                           
  8246                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
  8247  0E1C  0831               	movf	Sensor_autoCalibration@sensor,w
  8248  0E1D  3194  24B4  318E   	fcall	_Sensor_isCalibratingAcqTime
  8249  0E20  3A00               	xorlw	0
  8250  0E21  1D03               	skipz
  8251  0E22  2E56               	goto	l5145
  8252                           
  8253                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
  8254  0E23  0020               	movlb	0	; select bank0
  8255  0E24  3530               	lslf	Sensor_autoCalibration@adcIndex,w
  8256  0E25  3EA8               	addlw	(low (_packet_sample| 0))& (0+255)
  8257  0E26  0086               	movwf	6
  8258  0E27  0187               	clrf	7
  8259  0E28  3F40               	moviw [0]fsr1
  8260  0E29  00F8               	movwf	??_Sensor_autoCalibration
  8261  0E2A  3F41               	moviw [1]fsr1
  8262  0E2B  00F9               	movwf	??_Sensor_autoCalibration+1
  8263  0E2C  0831               	movf	Sensor_autoCalibration@sensor,w
  8264  0E2D  3E04               	addlw	4
  8265  0E2E  0086               	movwf	6
  8266  0E2F  3001               	movlw	1	; select bank2/3
  8267  0E30  0087               	movwf	7
  8268  0E31  0801               	movf	1,w
  8269  0E32  00FA               	movwf	??_Sensor_autoCalibration+2
  8270  0E33  01FB               	clrf	??_Sensor_autoCalibration+3
  8271  0E34  3009               	movlw	9
  8272  0E35                     u5505:	
  8273  0E35  35FA               	lslf	??_Sensor_autoCalibration+2,f
  8274  0E36  0DFB               	rlf	??_Sensor_autoCalibration+3,f
  8275  0E37  0B89               	decfsz	9,f
  8276  0E38  2E35               	goto	u5505
  8277  0E39  0879               	movf	??_Sensor_autoCalibration+1,w
  8278  0E3A  027B               	subwf	??_Sensor_autoCalibration+3,w
  8279  0E3B  1D03               	skipz
  8280  0E3C  2E3F               	goto	u5515
  8281  0E3D  0878               	movf	??_Sensor_autoCalibration,w
  8282  0E3E  027A               	subwf	??_Sensor_autoCalibration+2,w
  8283  0E3F                     u5515:	
  8284  0E3F  1803               	skipnc
  8285  0E40  2E52               	goto	l5143
  8286                           
  8287                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
  8288  0E41  3001               	movlw	1
  8289  0E42  00F8               	movwf	??_Sensor_autoCalibration
  8290  0E43  0831               	movf	Sensor_autoCalibration@sensor,w
  8291  0E44  3E05               	addlw	5
  8292  0E45  0086               	movwf	6
  8293  0E46  3001               	movlw	1	; select bank2/3
  8294  0E47  0087               	movwf	7
  8295  0E48  0878               	movf	??_Sensor_autoCalibration,w
  8296  0E49  0781               	addwf	1,f
  8297  0E4A  300F               	movlw	15
  8298  0E4B  0201               	subwf	1,w
  8299  0E4C  1C03               	skipc
  8300  0E4D  0008               	return
  8301                           
  8302                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
  8303  0E4E  0831               	movf	Sensor_autoCalibration@sensor,w
  8304  0E4F  3195  253D         	fcall	_Sensor_setCalibratAcqTime
  8305  0E51  0008               	return
  8306  0E52                     l5143:	
  8307                           
  8308                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
  8309  0E52  0831               	movf	Sensor_autoCalibration@sensor,w
  8310  0E53  3195  253D         	fcall	_Sensor_setCalibratAcqTime
  8311  0E55  0008               	return
  8312  0E56                     l5145:	
  8313                           
  8314                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
  8315  0E56  0020               	movlb	0	; select bank0
  8316  0E57  0831               	movf	Sensor_autoCalibration@sensor,w
  8317  0E58  3E04               	addlw	4
  8318  0E59  0086               	movwf	6
  8319  0E5A  3001               	movlw	1	; select bank2/3
  8320  0E5B  0087               	movwf	7
  8321  0E5C  0801               	movf	1,w
  8322  0E5D  00F8               	movwf	??_Sensor_autoCalibration
  8323  0E5E  01F9               	clrf	??_Sensor_autoCalibration+1
  8324  0E5F  35F8               	lslf	??_Sensor_autoCalibration,f
  8325  0E60  0DF9               	rlf	??_Sensor_autoCalibration+1,f
  8326  0E61  0831               	movf	Sensor_autoCalibration@sensor,w
  8327  0E62  3E06               	addlw	6
  8328  0E63  0086               	movwf	6
  8329  0E64  3001               	movlw	1	; select bank2/3
  8330  0E65  0087               	movwf	7
  8331  0E66  3530               	lslf	Sensor_autoCalibration@adcIndex,w
  8332  0E67  3EA8               	addlw	(low (_packet_sample| 0))& (0+255)
  8333  0E68  0084               	movwf	4
  8334  0E69  0185               	clrf	5
  8335  0E6A  3F40               	moviw [0]fsr1
  8336  0E6B  0200               	subwf	0,w
  8337  0E6C  00F4               	movwf	abs@a
  8338  0E6D  3101               	addfsr 0,1
  8339  0E6E  3F41               	moviw [1]fsr1
  8340  0E6F  3B00               	subwfb	0,w
  8341  0E70  00F5               	movwf	abs@a+1
  8342  0E71  3196  2644  318E   	fcall	_abs
  8343  0E74  0879               	movf	??_Sensor_autoCalibration+1,w
  8344  0E75  0275               	subwf	?_abs+1,w
  8345  0E76  1D03               	skipz
  8346  0E77  2E7A               	goto	u5535
  8347  0E78  0878               	movf	??_Sensor_autoCalibration,w
  8348  0E79  0274               	subwf	?_abs,w
  8349  0E7A                     u5535:	
  8350  0E7A  1803               	skipnc
  8351  0E7B  2E8A               	goto	l5151
  8352                           
  8353                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
  8354  0E7C  3020               	movlw	32
  8355  0E7D  00F8               	movwf	??_Sensor_autoCalibration
  8356  0E7E  0020               	movlb	0	; select bank0
  8357  0E7F  0831               	movf	Sensor_autoCalibration@sensor,w
  8358  0E80  3E02               	addlw	2
  8359  0E81  0086               	movwf	6
  8360  0E82  3001               	movlw	1	; select bank2/3
  8361  0E83  0087               	movwf	7
  8362  0E84  0878               	movf	??_Sensor_autoCalibration,w
  8363  0E85  0081               	movwf	1
  8364                           
  8365                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
  8366  0E86  0831               	movf	Sensor_autoCalibration@sensor,w
  8367  0E87  3195  2504         	fcall	_Sensor_setCalibrated
  8368                           
  8369                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
  8370  0E89  0008               	return
  8371  0E8A                     l5151:	
  8372                           
  8373                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
  8374  0E8A  3002               	movlw	2
  8375  0E8B  00F8               	movwf	??_Sensor_autoCalibration
  8376  0E8C  0020               	movlb	0	; select bank0
  8377  0E8D  0831               	movf	Sensor_autoCalibration@sensor,w
  8378  0E8E  3E03               	addlw	3
  8379  0E8F  0086               	movwf	6
  8380  0E90  3001               	movlw	1	; select bank2/3
  8381  0E91  0087               	movwf	7
  8382  0E92  0878               	movf	??_Sensor_autoCalibration,w
  8383  0E93  0781               	addwf	1,f
  8384                           
  8385                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
  8386  0E94  0831               	movf	Sensor_autoCalibration@sensor,w
  8387  0E95  3E03               	addlw	3
  8388  0E96  0086               	movwf	6
  8389  0E97  3001               	movlw	1	; select bank2/3
  8390  0E98  0087               	movwf	7
  8391  0E99  3020               	movlw	32
  8392  0E9A  0201               	subwf	1,w
  8393  0E9B  1C03               	skipc
  8394  0E9C  0008               	return
  8395                           
  8396                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
  8397  0E9D  3020               	movlw	32
  8398  0E9E  00F8               	movwf	??_Sensor_autoCalibration
  8399  0E9F  0831               	movf	Sensor_autoCalibration@sensor,w
  8400  0EA0  3E02               	addlw	2
  8401  0EA1  0086               	movwf	6
  8402  0EA2  3001               	movlw	1	; select bank2/3
  8403  0EA3  0087               	movwf	7
  8404  0EA4  0878               	movf	??_Sensor_autoCalibration,w
  8405  0EA5  0081               	movwf	1
  8406                           
  8407                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
  8408  0EA6  0831               	movf	Sensor_autoCalibration@sensor,w
  8409  0EA7  3195  2504         	fcall	_Sensor_setCalibrated
  8410  0EA9  0008               	return
  8411  0EAA                     __end_of_Sensor_autoCalibration:	
  8412                           
  8413                           	psect	text46
  8414  1504                     __ptext46:	
  8415 ;; *************** function _Sensor_setCalibrated *****************
  8416 ;; Defined at:
  8417 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  sensor          1    wreg     PTR struct .
  8420 ;;		 -> NULL(0), mtouch_sensor(27), 
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;  sensor          1    1[COMMON] PTR struct .
  8423 ;;		 -> NULL(0), mtouch_sensor(27), 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8433 ;;      Params:         0       0       0       0       0       0       0       0
  8434 ;;      Locals:         1       0       0       0       0       0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0
  8436 ;;      Totals:         1       0       0       0       0       0       0       0
  8437 ;;Total ram usage:        1 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    4
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_Sensor_autoCalibration
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           
  8448                           ;psect for function _Sensor_setCalibrated
  8449  1504                     _Sensor_setCalibrated:	
  8450                           
  8451                           ;incstack = 0
  8452                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  8453                           ;Sensor_setCalibrated@sensor stored from wreg
  8454  1504  00F1               	movwf	Sensor_setCalibrated@sensor
  8455                           
  8456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
  8457  1505  0871               	movf	Sensor_setCalibrated@sensor,w
  8458  1506  3E08               	addlw	8
  8459  1507  0086               	movwf	6
  8460  1508  3001               	movlw	1	; select bank2/3
  8461  1509  0087               	movwf	7
  8462  150A  1501               	bsf	1,2
  8463                           
  8464                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
  8465  150B  0871               	movf	Sensor_setCalibrated@sensor,w
  8466  150C  3E08               	addlw	8
  8467  150D  0086               	movwf	6
  8468  150E  3001               	movlw	1	; select bank2/3
  8469  150F  0087               	movwf	7
  8470  1510  1201               	bcf	1,4
  8471  1511  0008               	return
  8472  1512                     __end_of_Sensor_setCalibrated:	
  8473                           
  8474                           	psect	text47
  8475  153D                     __ptext47:	
  8476 ;; *************** function _Sensor_setCalibratAcqTime *****************
  8477 ;; Defined at:
  8478 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;  sensor          1    wreg     PTR struct .
  8481 ;;		 -> NULL(0), mtouch_sensor(27), 
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;  sensor          1    1[COMMON] PTR struct .
  8484 ;;		 -> NULL(0), mtouch_sensor(27), 
  8485 ;; Return value:  Size  Location     Type
  8486 ;;                  1    wreg      void 
  8487 ;; Registers used:
  8488 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8489 ;; Tracked objects:
  8490 ;;		On entry : 0/0
  8491 ;;		On exit  : 0/0
  8492 ;;		Unchanged: 0/0
  8493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8494 ;;      Params:         0       0       0       0       0       0       0       0
  8495 ;;      Locals:         1       0       0       0       0       0       0       0
  8496 ;;      Temps:          0       0       0       0       0       0       0       0
  8497 ;;      Totals:         1       0       0       0       0       0       0       0
  8498 ;;Total ram usage:        1 bytes
  8499 ;; Hardware stack levels used:    1
  8500 ;; Hardware stack levels required when called:    4
  8501 ;; This function calls:
  8502 ;;		Nothing
  8503 ;; This function is called by:
  8504 ;;		_Sensor_autoCalibration
  8505 ;; This function uses a non-reentrant model
  8506 ;;
  8507                           
  8508                           
  8509                           ;psect for function _Sensor_setCalibratAcqTime
  8510  153D                     _Sensor_setCalibratAcqTime:	
  8511                           
  8512                           ;incstack = 0
  8513                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  8514                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
  8515  153D  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
  8516                           
  8517                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
  8518  153E  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  8519  153F  3E08               	addlw	8
  8520  1540  0086               	movwf	6
  8521  1541  3001               	movlw	1	; select bank2/3
  8522  1542  0087               	movwf	7
  8523  1543  1601               	bsf	1,4
  8524                           
  8525                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
  8526  1544  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
  8527  1545  3E03               	addlw	3
  8528  1546  0086               	movwf	6
  8529  1547  3001               	movlw	1	; select bank2/3
  8530  1548  0087               	movwf	7
  8531  1549  0181               	clrf	1
  8532  154A  0A81               	incf	1,f
  8533  154B  0008               	return
  8534  154C                     __end_of_Sensor_setCalibratAcqTime:	
  8535                           
  8536                           	psect	text48
  8537  14B4                     __ptext48:	
  8538 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  8539 ;; Defined at:
  8540 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  sensor          1    wreg     PTR struct .
  8543 ;;		 -> NULL(0), mtouch_sensor(27), 
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  sensor          1    1[COMMON] PTR struct .
  8546 ;;		 -> NULL(0), mtouch_sensor(27), 
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  1    wreg      _Bool 
  8549 ;; Registers used:
  8550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8556 ;;      Params:         0       0       0       0       0       0       0       0
  8557 ;;      Locals:         1       0       0       0       0       0       0       0
  8558 ;;      Temps:          0       0       0       0       0       0       0       0
  8559 ;;      Totals:         1       0       0       0       0       0       0       0
  8560 ;;Total ram usage:        1 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    4
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_Sensor_loadADCSettings
  8567 ;;		_Sensor_autoCalibration
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           
  8572                           ;psect for function _Sensor_isCalibratingAcqTime
  8573  14B4                     _Sensor_isCalibratingAcqTime:	
  8574                           
  8575                           ;incstack = 0
  8576                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
  8577                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
  8578  14B4  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
  8579                           
  8580                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
  8581  14B5  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
  8582  14B6  3E08               	addlw	8
  8583  14B7  0086               	movwf	6
  8584  14B8  3001               	movlw	1	; select bank2/3
  8585  14B9  0087               	movwf	7
  8586  14BA  0E01               	swapf	1,w
  8587  14BB  3901               	andlw	1
  8588  14BC  0008               	return
  8589  14BD                     __end_of_Sensor_isCalibratingAcqTime:	
  8590                           
  8591                           	psect	text49
  8592  0833                     __ptext49:	
  8593 ;; *************** function _Sensor_getScanGroupIndex *****************
  8594 ;; Defined at:
  8595 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  sensor          1    wreg     PTR struct .
  8598 ;;		 -> NULL(0), mtouch_sensor(27), 
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  sensor          1    3[COMMON] PTR struct .
  8601 ;;		 -> NULL(0), mtouch_sensor(27), 
  8602 ;;  sensorGroup     1    4[COMMON] unsigned char 
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  1    wreg      unsigned char 
  8605 ;; Registers used:
  8606 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8612 ;;      Params:         0       0       0       0       0       0       0       0
  8613 ;;      Locals:         2       0       0       0       0       0       0       0
  8614 ;;      Temps:          2       0       0       0       0       0       0       0
  8615 ;;      Totals:         4       0       0       0       0       0       0       0
  8616 ;;Total ram usage:        4 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    4
  8619 ;; This function calls:
  8620 ;;		Nothing
  8621 ;; This function is called by:
  8622 ;;		_Sensor_postAcquisitionProcess
  8623 ;;		_Sensor_autoCalibration
  8624 ;;		_Sensor_RawSample_Update
  8625 ;; This function uses a non-reentrant model
  8626 ;;
  8627                           
  8628                           
  8629                           ;psect for function _Sensor_getScanGroupIndex
  8630  0833                     _Sensor_getScanGroupIndex:	
  8631                           
  8632                           ;incstack = 0
  8633                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
  8634                           ;Sensor_getScanGroupIndex@sensor stored from wreg
  8635  0833  00F3               	movwf	Sensor_getScanGroupIndex@sensor
  8636                           
  8637                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
  8638  0834  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
  8639  0835                     l5057:	
  8640                           
  8641                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
  8642  0835  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  8643  0836  00F1               	movwf	??_Sensor_getScanGroupIndex
  8644  0837  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  8645  0838  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  8646  0839  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  8647  083A  3050               	movlw	low (_sensor_scan_group| (0+32768))
  8648  083B  0771               	addwf	??_Sensor_getScanGroupIndex,w
  8649  083C  0084               	movwf	4
  8650  083D  3098               	movlw	high (_sensor_scan_group| (0+32768))
  8651  083E  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  8652  083F  0085               	movwf	5
  8653  0840  0800               	movf	0,w	;code access
  8654  0841  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  8655  0842  1D03               	skipz
  8656  0843  2846               	goto	l5063
  8657  0844                     l5059:	
  8658                           
  8659                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
  8660  0844  3000               	movlw	0
  8661  0845  0008               	return
  8662  0846                     l5063:	
  8663                           
  8664                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
  8665  0846  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
  8666  0847  00F1               	movwf	??_Sensor_getScanGroupIndex
  8667  0848  01F2               	clrf	??_Sensor_getScanGroupIndex+1
  8668  0849  35F1               	lslf	??_Sensor_getScanGroupIndex,f
  8669  084A  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
  8670  084B  3051               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  8671  084C  0771               	addwf	??_Sensor_getScanGroupIndex,w
  8672  084D  0084               	movwf	4
  8673  084E  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  8674  084F  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
  8675  0850  0085               	movwf	5
  8676  0851  0800               	movf	0,w	;code access
  8677  0852  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
  8678  0853  1D03               	skipz
  8679  0854  2857               	goto	l5069
  8680                           
  8681                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
  8682  0855  3001               	movlw	1
  8683  0856  0008               	return
  8684  0857                     l5069:	
  8685                           
  8686                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
  8687  0857  3001               	movlw	1
  8688  0858  00F1               	movwf	??_Sensor_getScanGroupIndex
  8689  0859  0871               	movf	??_Sensor_getScanGroupIndex,w
  8690  085A  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
  8691  085B  3002               	movlw	2
  8692  085C  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
  8693  085D  1803               	btfsc	3,0
  8694  085E  2844               	goto	l5059
  8695  085F  2835               	goto	l5057
  8696  0860                     __end_of_Sensor_getScanGroupIndex:	
  8697                           
  8698                           	psect	text50
  8699  155C                     __ptext50:	
  8700 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  8701 ;; Defined at:
  8702 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, status,2, status,0
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8716 ;;      Params:         0       0       0       0       0       0       0       0
  8717 ;;      Locals:         0       0       0       0       0       0       0       0
  8718 ;;      Temps:          0       0       0       0       0       0       0       0
  8719 ;;      Totals:         0       0       0       0       0       0       0       0
  8720 ;;Total ram usage:        0 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    4
  8723 ;; This function calls:
  8724 ;;		Nothing
  8725 ;; This function is called by:
  8726 ;;		_MTOUCH_Initialize
  8727 ;;		_Sensor_Acq_ExecutePacket
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           
  8732                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  8733  155C                     _MTOUCH_Sensor_Scan_Initialize:	
  8734                           
  8735                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
  8736                           
  8737                           ;incstack = 0
  8738                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  8739  155C  30FC               	movlw	-4
  8740  155D  0020               	movlb	0	; select bank0
  8741  155E  059C               	andwf	28,f	;volatile
  8742                           
  8743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
  8744  155F  002E               	movlb	14	; select bank14
  8745  1560  0191               	clrf	17	;volatile
  8746                           
  8747                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
  8748  1561  002F               	movlb	15	; select bank15
  8749  1562  0191               	clrf	17	;volatile
  8750                           
  8751                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
  8752  1563  3090               	movlw	144
  8753  1564  002E               	movlb	14	; select bank14
  8754  1565  0092               	movwf	18	;volatile
  8755                           
  8756                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
  8757  1566  3040               	movlw	64
  8758  1567  0094               	movwf	20	;volatile
  8759                           
  8760                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
  8761  1568  3040               	movlw	64
  8762  1569  002F               	movlb	15	; select bank15
  8763  156A  0094               	movwf	20	;volatile
  8764  156B  0008               	return
  8765  156C                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  8766                           
  8767                           	psect	text51
  8768  154C                     __ptext51:	
  8769 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  8770 ;; Defined at:
  8771 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;		None
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  button          1   18[BANK1 ] enum E3069
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  1    wreg      void 
  8778 ;; Registers used:
  8779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8785 ;;      Params:         0       0       0       0       0       0       0       0
  8786 ;;      Locals:         0       0       1       0       0       0       0       0
  8787 ;;      Temps:          0       0       1       0       0       0       0       0
  8788 ;;      Totals:         0       0       2       0       0       0       0       0
  8789 ;;Total ram usage:        2 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:   16
  8792 ;; This function calls:
  8793 ;;		_Button_Service
  8794 ;; This function is called by:
  8795 ;;		_MTOUCH_Service_Mainloop
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           
  8800                           ;psect for function _MTOUCH_Button_ServiceAll
  8801  154C                     _MTOUCH_Button_ServiceAll:	
  8802                           
  8803                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
  8804                           
  8805                           ;incstack = 0
  8806 ;; hardware stack exceeded
  8807                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8808  154C  0021               	movlb	1	; select bank1
  8809  154D  01DB               	clrf	MTOUCH_Button_ServiceAll@button^(0+128)
  8810  154E                     l5789:	
  8811                           
  8812                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
  8813  154E  085B               	movf	MTOUCH_Button_ServiceAll@button^(0+128),w
  8814  154F  318A  2272  3195   	fcall	_Button_Service
  8815                           
  8816                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
  8817  1552  3001               	movlw	1
  8818  1553  0021               	movlb	1	; select bank1
  8819  1554  00DA               	movwf	??_MTOUCH_Button_ServiceAll^(0+128)
  8820  1555  085A               	movf	??_MTOUCH_Button_ServiceAll^(0+128),w
  8821  1556  07DB               	addwf	MTOUCH_Button_ServiceAll@button^(0+128),f
  8822  1557  3003               	movlw	3
  8823  1558  025B               	subwf	MTOUCH_Button_ServiceAll@button^(0+128),w
  8824  1559  1803               	btfsc	3,0
  8825  155A  0008               	return
  8826  155B  2D4E               	goto	l5789
  8827  155C                     __end_of_MTOUCH_Button_ServiceAll:	
  8828                           
  8829                           	psect	text52
  8830  0A72                     __ptext52:	
  8831 ;; *************** function _Button_Service *****************
  8832 ;; Defined at:
  8833 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  name            1    wreg     enum E3069
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;  name            1   15[BANK1 ] enum E3069
  8838 ;;  button          1   16[BANK1 ] PTR struct .
  8839 ;;		 -> mtouch_button(48), 
  8840 ;; Return value:  Size  Location     Type
  8841 ;;                  1    wreg      void 
  8842 ;; Registers used:
  8843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8849 ;;      Params:         0       0       0       0       0       0       0       0
  8850 ;;      Locals:         0       0       2       0       0       0       0       0
  8851 ;;      Temps:          0       0       2       0       0       0       0       0
  8852 ;;      Totals:         0       0       4       0       0       0       0       0
  8853 ;;Total ram usage:        4 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:   15
  8856 ;; This function calls:
  8857 ;;		_Button_Deviation_Update
  8858 ;;		_Button_Reading_Update
  8859 ;;		_Button_State_Initializing
  8860 ;;		_Button_State_NotPressed
  8861 ;;		_Button_State_Pressed
  8862 ;;		_MTOUCH_Button_Initialize
  8863 ;;		_MTOUCH_Sensor_isCalibrated
  8864 ;;		_MTOUCH_Sensor_wasSampled
  8865 ;; This function is called by:
  8866 ;;		_MTOUCH_Button_ServiceAll
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           
  8871                           ;psect for function _Button_Service
  8872  0A72                     _Button_Service:	
  8873                           
  8874                           ;incstack = 0
  8875 ;; hardware stack exceeded
  8876                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8877                           ;Button_Service@name stored from wreg
  8878  0A72  0021               	movlb	1	; select bank1
  8879  0A73  00D8               	movwf	Button_Service@name^(0+128)
  8880                           
  8881                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
  8882  0A74  0858               	movf	Button_Service@name^(0+128),w
  8883  0A75  00D6               	movwf	??_Button_Service^(0+128)
  8884  0A76  3003               	movlw	3
  8885  0A77                     u6435:	
  8886  0A77  35D6               	lslf	??_Button_Service^(0+128),f
  8887  0A78  3EFF               	addlw	-1
  8888  0A79  1D03               	skipz
  8889  0A7A  2A77               	goto	u6435
  8890  0A7B  3556               	lslf	??_Button_Service^(0+128),w
  8891  0A7C  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  8892  0A7D  00D7               	movwf	(??_Button_Service+1)^(0+128)
  8893  0A7E  0857               	movf	(??_Button_Service+1)^(0+128),w
  8894  0A7F  00D9               	movwf	Button_Service@button^(0+128)
  8895                           
  8896                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  8897  0A80  0A59               	incf	Button_Service@button^(0+128),w
  8898  0A81  0086               	movwf	6
  8899  0A82  3001               	movlw	1	; select bank2/3
  8900  0A83  0087               	movwf	7
  8901  0A84  0801               	movf	1,w
  8902  0A85  3195  252E  318A   	fcall	_MTOUCH_Sensor_wasSampled
  8903  0A88  3A00               	xorlw	0
  8904  0A89  1903               	skipnz
  8905  0A8A  0008               	return
  8906  0A8B  0021               	movlb	1	; select bank1
  8907  0A8C  0A59               	incf	Button_Service@button^(0+128),w
  8908  0A8D  0086               	movwf	6
  8909  0A8E  3001               	movlw	1	; select bank2/3
  8910  0A8F  0087               	movwf	7
  8911  0A90  0801               	movf	1,w
  8912  0A91  3196  2602  318A   	fcall	_MTOUCH_Sensor_isCalibrated
  8913  0A94  3A00               	xorlw	0
  8914  0A95  1903               	skipnz
  8915  0A96  0008               	return
  8916                           
  8917                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
  8918  0A97  0021               	movlb	1	; select bank1
  8919  0A98  0859               	movf	Button_Service@button^(0+128),w
  8920  0A99  3194  24F6  318A   	fcall	_Button_Reading_Update
  8921                           
  8922                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
  8923  0A9C  0021               	movlb	1	; select bank1
  8924  0A9D  0859               	movf	Button_Service@button^(0+128),w
  8925  0A9E  318C  2465  318A   	fcall	_Button_Deviation_Update
  8926                           
  8927                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  8928  0AA1  0021               	movlb	1	; select bank1
  8929  0AA2  0859               	movf	Button_Service@button^(0+128),w
  8930  0AA3  3E02               	addlw	2
  8931  0AA4  0086               	movwf	6
  8932  0AA5  3001               	movlw	1	; select bank2/3
  8933  0AA6  0087               	movwf	7
  8934  0AA7  3003               	movlw	3
  8935  0AA8  0201               	subwf	1,w
  8936  0AA9  1C03               	skipc
  8937  0AAA  2AB3               	goto	l5753
  8938                           
  8939                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
  8940  0AAB  0859               	movf	Button_Service@button^(0+128),w
  8941  0AAC  0086               	movwf	6
  8942  0AAD  3001               	movlw	1	; select bank2/3
  8943  0AAE  0087               	movwf	7
  8944  0AAF  0801               	movf	1,w
  8945  0AB0  3189  2124  318A   	fcall	_MTOUCH_Button_Initialize
  8946  0AB3                     l5753:	
  8947                           
  8948                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
  8949  0AB3  0021               	movlb	1	; select bank1
  8950  0AB4  0859               	movf	Button_Service@button^(0+128),w
  8951  0AB5  00D6               	movwf	??_Button_Service^(0+128)
  8952  0AB6  0856               	movf	??_Button_Service^(0+128),w
  8953  0AB7  00D1               	movwf	Button_State_Pressed@button^(0+128)
  8954  0AB8  0859               	movf	Button_Service@button^(0+128),w
  8955  0AB9  3E02               	addlw	2
  8956  0ABA  0086               	movwf	6
  8957  0ABB  3001               	movlw	1	; select bank2/3
  8958  0ABC  0087               	movwf	7
  8959  0ABD  3501               	lslf	1,w
  8960  0ABE  3EDC               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  8961  0ABF  0086               	movwf	6
  8962  0AC0  0187               	clrf	7
  8963  0AC1  3F41               	moviw [1]fsr1
  8964  0AC2  008A               	movwf	10
  8965  0AC3  3F40               	moviw [0]fsr1
  8966  0AC4  000A               	callw
  8967  0AC5  318A               	pagesel	$
  8968  0AC6  0008               	return
  8969  0AC7                     __end_of_Button_Service:	
  8970                           
  8971                           	psect	text53
  8972  152E                     __ptext53:	
  8973 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  8974 ;; Defined at:
  8975 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;  sensor          1    wreg     enum E2864
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;  sensor          1    6[COMMON] enum E2864
  8980 ;; Return value:  Size  Location     Type
  8981 ;;                  1    wreg      _Bool 
  8982 ;; Registers used:
  8983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8989 ;;      Params:         0       0       0       0       0       0       0       0
  8990 ;;      Locals:         1       0       0       0       0       0       0       0
  8991 ;;      Temps:          1       0       0       0       0       0       0       0
  8992 ;;      Totals:         2       0       0       0       0       0       0       0
  8993 ;;Total ram usage:        2 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    5
  8996 ;; This function calls:
  8997 ;;		___bmul
  8998 ;; This function is called by:
  8999 ;;		_Button_Service
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           
  9004                           ;psect for function _MTOUCH_Sensor_wasSampled
  9005  152E                     _MTOUCH_Sensor_wasSampled:	
  9006                           
  9007                           ;incstack = 0
  9008                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9009                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  9010  152E  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
  9011                           
  9012                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
  9013  152F  3009               	movlw	9
  9014  1530  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
  9015  1531  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
  9016  1532  00F1               	movwf	___bmul@multiplicand
  9017  1533  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  9018  1534  3195  256C         	fcall	___bmul
  9019  1536  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9020  1537  0086               	movwf	6
  9021  1538  3001               	movlw	1	; select bank2/3
  9022  1539  0087               	movwf	7
  9023  153A  0801               	movf	1,w
  9024  153B  3901               	andlw	1
  9025  153C  0008               	return
  9026  153D                     __end_of_MTOUCH_Sensor_wasSampled:	
  9027                           
  9028                           	psect	text54
  9029  1602                     __ptext54:	
  9030 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  9031 ;; Defined at:
  9032 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;  sensor          1    wreg     enum E2864
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  sensor          1    6[COMMON] enum E2864
  9037 ;; Return value:  Size  Location     Type
  9038 ;;                  1    wreg      _Bool 
  9039 ;; Registers used:
  9040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9041 ;; Tracked objects:
  9042 ;;		On entry : 0/0
  9043 ;;		On exit  : 0/0
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9046 ;;      Params:         0       0       0       0       0       0       0       0
  9047 ;;      Locals:         1       0       0       0       0       0       0       0
  9048 ;;      Temps:          1       0       0       0       0       0       0       0
  9049 ;;      Totals:         2       0       0       0       0       0       0       0
  9050 ;;Total ram usage:        2 bytes
  9051 ;; Hardware stack levels used:    1
  9052 ;; Hardware stack levels required when called:    5
  9053 ;; This function calls:
  9054 ;;		___bmul
  9055 ;; This function is called by:
  9056 ;;		_Button_Service
  9057 ;; This function uses a non-reentrant model
  9058 ;;
  9059                           
  9060                           
  9061                           ;psect for function _MTOUCH_Sensor_isCalibrated
  9062  1602                     _MTOUCH_Sensor_isCalibrated:	
  9063                           
  9064                           ;incstack = 0
  9065                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  9066                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  9067  1602  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
  9068                           
  9069                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
  9070  1603  3003               	movlw	3
  9071  1604  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
  9072  1605  1803               	skipnc
  9073  1606  2E16               	goto	l5603
  9074                           
  9075                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
  9076  1607  3009               	movlw	9
  9077  1608  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
  9078  1609  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
  9079  160A  00F1               	movwf	___bmul@multiplicand
  9080  160B  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
  9081  160C  3195  256C         	fcall	___bmul
  9082  160E  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  9083  160F  0086               	movwf	6
  9084  1610  3001               	movlw	1	; select bank2/3
  9085  1611  0087               	movwf	7
  9086  1612  0C01               	rrf	1,w
  9087  1613  0C89               	rrf	9,f
  9088  1614  3901               	andlw	1
  9089  1615  0008               	return
  9090  1616                     l5603:	
  9091                           
  9092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
  9093  1616  3000               	movlw	0
  9094  1617  0008               	return
  9095  1618                     __end_of_MTOUCH_Sensor_isCalibrated:	
  9096                           
  9097                           	psect	text55
  9098  0748                     __ptext55:	
  9099 ;; *************** function _Button_State_NotPressed *****************
  9100 ;; Defined at:
  9101 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;  button          1    8[BANK1 ] PTR struct .
  9104 ;;		 -> mtouch_button(48), 
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      void 
  9109 ;; Registers used:
  9110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9116 ;;      Params:         0       0       1       0       0       0       0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0       0
  9118 ;;      Temps:          0       2       0       0       0       0       0       0
  9119 ;;      Totals:         0       2       1       0       0       0       0       0
  9120 ;;Total ram usage:        3 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:   14
  9123 ;; This function calls:
  9124 ;;		_Button_Baseline_Update
  9125 ;;		_Button_DefaultCallback
  9126 ;;		_MTOUCH_Button_Initialize
  9127 ;;		_myButtonPressedCallback
  9128 ;; This function is called by:
  9129 ;;		_Button_Service
  9130 ;; This function uses a non-reentrant model
  9131 ;;
  9132                           
  9133                           
  9134                           ;psect for function _Button_State_NotPressed
  9135  0748                     _Button_State_NotPressed:	
  9136                           
  9137                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
  9138                           
  9139                           ;incstack = 0
  9140 ;; hardware stack exceeded
  9141                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9142  0748  0021               	movlb	1	; select bank1
  9143  0749  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9144  074A  3E09               	addlw	9
  9145  074B  0086               	movwf	6
  9146  074C  3001               	movlw	1	; select bank2/3
  9147  074D  0087               	movwf	7
  9148  074E  0801               	movf	1,w
  9149  074F  3A80               	xorlw	128
  9150  0750  0020               	movlb	0	; select bank0
  9151  0751  00EE               	movwf	??_Button_State_NotPressed
  9152  0752  0021               	movlb	1	; select bank1
  9153  0753  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9154  0754  3E0E               	addlw	14
  9155  0755  0086               	movwf	6
  9156  0756  3001               	movlw	1	; select bank2/3
  9157  0757  0087               	movwf	7
  9158  0758  0301               	decf	1,w
  9159  0759  3AFF               	xorlw	255
  9160  075A  3A80               	xorlw	128
  9161  075B  0020               	movlb	0	; select bank0
  9162  075C  02EE               	subwf	??_Button_State_NotPressed,f
  9163  075D  1803               	skipnc
  9164  075E  2F8D               	goto	l5653
  9165                           
  9166                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
  9167  075F  0021               	movlb	1	; select bank1
  9168  0760  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9169  0761  3E0A               	addlw	10
  9170  0762  0086               	movwf	6
  9171  0763  3001               	movlw	1	; select bank2/3
  9172  0764  0087               	movwf	7
  9173  0765  3001               	movlw	1
  9174  0766  0781               	addwf	1,f
  9175  0767  3141               	addfsr 1,1
  9176  0768  1803               	skipnc
  9177  0769  0A81               	incf	1,f
  9178                           
  9179                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
  9180  076A  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9181  076B  3E0A               	addlw	10
  9182  076C  0086               	movwf	6
  9183  076D  3001               	movlw	1	; select bank2/3
  9184  076E  0087               	movwf	7
  9185  076F  3F40               	moviw [0]fsr1
  9186  0770  0020               	movlb	0	; select bank0
  9187  0771  00EE               	movwf	??_Button_State_NotPressed
  9188  0772  3F41               	moviw [1]fsr1
  9189  0773  00EF               	movwf	??_Button_State_NotPressed+1
  9190  0774  3000               	movlw	0
  9191  0775  026F               	subwf	??_Button_State_NotPressed+1,w
  9192  0776  3041               	movlw	65
  9193  0777  1903               	skipnz
  9194  0778  026E               	subwf	??_Button_State_NotPressed,w
  9195  0779  1C03               	skipc
  9196  077A  2FD7               	goto	l522
  9197                           
  9198                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
  9199  077B  0021               	movlb	1	; select bank1
  9200  077C  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9201  077D  3E0A               	addlw	10
  9202  077E  0086               	movwf	6
  9203  077F  3001               	movlw	1	; select bank2/3
  9204  0780  0087               	movwf	7
  9205  0781  3000               	movlw	0
  9206  0782  3FC0               	movwi [0]fsr1
  9207  0783  3FC1               	movwi [1]fsr1
  9208                           
  9209                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
  9210  0784  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9211  0785  0086               	movwf	6
  9212  0786  3001               	movlw	1	; select bank2/3
  9213  0787  0087               	movwf	7
  9214  0788  0801               	movf	1,w
  9215  0789  3189  2124  3187   	fcall	_MTOUCH_Button_Initialize
  9216  078C  2FD7               	goto	l522
  9217  078D                     l5653:	
  9218  078D  0021               	movlb	1	; select bank1
  9219  078E  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9220  078F  3E09               	addlw	9
  9221  0790  0086               	movwf	6
  9222  0791  3001               	movlw	1	; select bank2/3
  9223  0792  0087               	movwf	7
  9224  0793  0801               	movf	1,w
  9225  0794  0020               	movlb	0	; select bank0
  9226  0795  00EE               	movwf	??_Button_State_NotPressed
  9227  0796  01EF               	clrf	??_Button_State_NotPressed+1
  9228  0797  1BEE               	btfsc	??_Button_State_NotPressed,7
  9229  0798  03EF               	decf	??_Button_State_NotPressed+1,f
  9230  0799  0021               	movlb	1	; select bank1
  9231  079A  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9232  079B  3E0E               	addlw	14
  9233  079C  0086               	movwf	6
  9234  079D  3001               	movlw	1	; select bank2/3
  9235  079E  0087               	movwf	7
  9236  079F  0020               	movlb	0	; select bank0
  9237  07A0  086F               	movf	??_Button_State_NotPressed+1,w
  9238  07A1  3A80               	xorlw	128
  9239  07A2  3C80               	sublw	128
  9240  07A3  1D03               	skipz
  9241  07A4  2FA7               	goto	u6335
  9242  07A5  086E               	movf	??_Button_State_NotPressed,w
  9243  07A6  0201               	subwf	1,w
  9244  07A7                     u6335:	
  9245  07A7  1803               	skipnc
  9246  07A8  2FCE               	goto	l5659
  9247                           
  9248                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
  9249  07A9  3002               	movlw	2
  9250  07AA  0020               	movlb	0	; select bank0
  9251  07AB  00EE               	movwf	??_Button_State_NotPressed
  9252  07AC  0021               	movlb	1	; select bank1
  9253  07AD  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9254  07AE  3E02               	addlw	2
  9255  07AF  0086               	movwf	6
  9256  07B0  3001               	movlw	1	; select bank2/3
  9257  07B1  0087               	movwf	7
  9258  07B2  0020               	movlb	0	; select bank0
  9259  07B3  086E               	movf	??_Button_State_NotPressed,w
  9260  07B4  0081               	movwf	1
  9261                           
  9262                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9263  07B5  0021               	movlb	1	; select bank1
  9264  07B6  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9265  07B7  3E0A               	addlw	10
  9266  07B8  0086               	movwf	6
  9267  07B9  3001               	movlw	1	; select bank2/3
  9268  07BA  0087               	movwf	7
  9269  07BB  3000               	movlw	0
  9270  07BC  3FC0               	movwi [0]fsr1
  9271  07BD  3FC1               	movwi [1]fsr1
  9272                           
  9273                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
  9274  07BE  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9275  07BF  0086               	movwf	6
  9276  07C0  3001               	movlw	1	; select bank2/3
  9277  07C1  0087               	movwf	7
  9278  07C2  0801               	movf	1,w
  9279  07C3  0020               	movlb	0	; select bank0
  9280  07C4  00EE               	movwf	??_Button_State_NotPressed
  9281  07C5  086E               	movf	??_Button_State_NotPressed,w
  9282  07C6  0021               	movlb	1	; select bank1
  9283  07C7  00CC               	movwf	myButtonPressedCallback@button^(0+128)
  9284  07C8  0865               	movf	(_callback_pressed+1)^(0+128),w
  9285  07C9  008A               	movwf	10
  9286  07CA  0864               	movf	_callback_pressed^(0+128),w
  9287  07CB  000A               	callw
  9288  07CC  3187               	pagesel	$
  9289                           
  9290                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
  9291  07CD  2FD7               	goto	l522
  9292  07CE                     l5659:	
  9293                           
  9294                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
  9295  07CE  0021               	movlb	1	; select bank1
  9296  07CF  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9297  07D0  3E0A               	addlw	10
  9298  07D1  0086               	movwf	6
  9299  07D2  3001               	movlw	1	; select bank2/3
  9300  07D3  0087               	movwf	7
  9301  07D4  3000               	movlw	0
  9302  07D5  3FC0               	movwi [0]fsr1
  9303  07D6  3FC1               	movwi [1]fsr1
  9304  07D7                     l522:	
  9305                           
  9306                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
  9307  07D7  0021               	movlb	1	; select bank1
  9308  07D8  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9309  07D9  3E0C               	addlw	12
  9310  07DA  0086               	movwf	6
  9311  07DB  3001               	movlw	1	; select bank2/3
  9312  07DC  0087               	movwf	7
  9313  07DD  3001               	movlw	1
  9314  07DE  0781               	addwf	1,f
  9315  07DF  3141               	addfsr 1,1
  9316  07E0  1803               	skipnc
  9317  07E1  0A81               	incf	1,f
  9318                           
  9319                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
  9320  07E2  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9321  07E3  3E0C               	addlw	12
  9322  07E4  0086               	movwf	6
  9323  07E5  3001               	movlw	1	; select bank2/3
  9324  07E6  0087               	movwf	7
  9325  07E7  0016               	moviw fsr1++
  9326  07E8  3A40               	xorlw	64
  9327  07E9  0020               	movlb	0	; select bank0
  9328  07EA  00EE               	movwf	??_Button_State_NotPressed
  9329  07EB  0016               	moviw fsr1++
  9330  07EC  04EE               	iorwf	??_Button_State_NotPressed,f
  9331  07ED  1D03               	btfss	3,2
  9332  07EE  0008               	return
  9333                           
  9334                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  9335  07EF  0021               	movlb	1	; select bank1
  9336  07F0  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9337  07F1  3E0C               	addlw	12
  9338  07F2  0086               	movwf	6
  9339  07F3  3001               	movlw	1	; select bank2/3
  9340  07F4  0087               	movwf	7
  9341  07F5  3000               	movlw	0
  9342  07F6  3FC0               	movwi [0]fsr1
  9343  07F7  3FC1               	movwi [1]fsr1
  9344                           
  9345                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
  9346  07F8  0851               	movf	Button_State_NotPressed@button^(0+128),w
  9347  07F9  318C  24EC         	fcall	_Button_Baseline_Update
  9348  07FB  0008               	return
  9349  07FC                     __end_of_Button_State_NotPressed:	
  9350                           
  9351                           	psect	text56
  9352  0B23                     __ptext56:	
  9353 ;; *************** function _Button_State_Initializing *****************
  9354 ;; Defined at:
  9355 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;  button          1    8[BANK1 ] PTR struct .
  9358 ;;		 -> mtouch_button(48), 
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;		None
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  1    wreg      void 
  9363 ;; Registers used:
  9364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9370 ;;      Params:         0       0       1       0       0       0       0       0
  9371 ;;      Locals:         0       0       0       0       0       0       0       0
  9372 ;;      Temps:          0       0       4       0       0       0       0       0
  9373 ;;      Totals:         0       0       5       0       0       0       0       0
  9374 ;;Total ram usage:        5 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    7
  9377 ;; This function calls:
  9378 ;;		_Button_Baseline_Initialize
  9379 ;;		_Button_Baseline_Update
  9380 ;; This function is called by:
  9381 ;;		_Button_Service
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           
  9386                           ;psect for function _Button_State_Initializing
  9387  0B23                     _Button_State_Initializing:	
  9388                           
  9389                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
  9390                           
  9391                           ;incstack = 0
  9392                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9393  0B23  0021               	movlb	1	; select bank1
  9394  0B24  0851               	movf	Button_State_Initializing@button^(0+128),w
  9395  0B25  3E0A               	addlw	10
  9396  0B26  0086               	movwf	6
  9397  0B27  3001               	movlw	1	; select bank2/3
  9398  0B28  0087               	movwf	7
  9399  0B29  3F40               	moviw [0]fsr1
  9400  0B2A  00D2               	movwf	??_Button_State_Initializing^(0+128)
  9401  0B2B  3F41               	moviw [1]fsr1
  9402  0B2C  00D3               	movwf	(??_Button_State_Initializing^(0+128)+1)
  9403  0B2D  3000               	movlw	0
  9404  0B2E  0253               	subwf	(??_Button_State_Initializing+1)^(0+128),w
  9405  0B2F  3009               	movlw	9
  9406  0B30  1903               	skipnz
  9407  0B31  0252               	subwf	??_Button_State_Initializing^(0+128),w
  9408  0B32  1803               	skipnc
  9409  0B33  2B39               	goto	l5637
  9410                           
  9411                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
  9412  0B34  0851               	movf	Button_State_Initializing@button^(0+128),w
  9413  0B35  3188  2060  318B   	fcall	_Button_Baseline_Initialize
  9414                           
  9415                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
  9416  0B38  2B3D               	goto	l5639
  9417  0B39                     l5637:	
  9418                           
  9419                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
  9420  0B39  0851               	movf	Button_State_Initializing@button^(0+128),w
  9421  0B3A  318C  24EC  318B   	fcall	_Button_Baseline_Update
  9422  0B3D                     l5639:	
  9423                           
  9424                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
  9425  0B3D  0021               	movlb	1	; select bank1
  9426  0B3E  0851               	movf	Button_State_Initializing@button^(0+128),w
  9427  0B3F  3E0A               	addlw	10
  9428  0B40  0086               	movwf	6
  9429  0B41  3001               	movlw	1	; select bank2/3
  9430  0B42  0087               	movwf	7
  9431  0B43  3001               	movlw	1
  9432  0B44  0781               	addwf	1,f
  9433  0B45  3141               	addfsr 1,1
  9434  0B46  1803               	skipnc
  9435  0B47  0A81               	incf	1,f
  9436                           
  9437                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  9438  0B48  0851               	movf	Button_State_Initializing@button^(0+128),w
  9439  0B49  3E0A               	addlw	10
  9440  0B4A  0086               	movwf	6
  9441  0B4B  3001               	movlw	1	; select bank2/3
  9442  0B4C  0087               	movwf	7
  9443  0B4D  3F40               	moviw [0]fsr1
  9444  0B4E  00D2               	movwf	??_Button_State_Initializing^(0+128)
  9445  0B4F  3F41               	moviw [1]fsr1
  9446  0B50  00D3               	movwf	(??_Button_State_Initializing^(0+128)+1)
  9447  0B51  3000               	movlw	0
  9448  0B52  0253               	subwf	(??_Button_State_Initializing+1)^(0+128),w
  9449  0B53  3010               	movlw	16
  9450  0B54  1903               	skipnz
  9451  0B55  0252               	subwf	??_Button_State_Initializing^(0+128),w
  9452  0B56  1C03               	skipc
  9453  0B57  0008               	return
  9454                           
  9455                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
  9456  0B58  0851               	movf	Button_State_Initializing@button^(0+128),w
  9457  0B59  3E05               	addlw	5
  9458  0B5A  0086               	movwf	6
  9459  0B5B  3001               	movlw	1	; select bank2/3
  9460  0B5C  0087               	movwf	7
  9461  0B5D  3F40               	moviw [0]fsr1
  9462  0B5E  00D2               	movwf	??_Button_State_Initializing^(0+128)
  9463  0B5F  3F41               	moviw [1]fsr1
  9464  0B60  00D3               	movwf	(??_Button_State_Initializing^(0+128)+1)
  9465  0B61  3F42               	moviw [2]fsr1
  9466  0B62  00D4               	movwf	(??_Button_State_Initializing^(0+128)+2)
  9467  0B63  3F43               	moviw [3]fsr1
  9468  0B64  00D5               	movwf	(??_Button_State_Initializing^(0+128)+3)
  9469  0B65  3004               	movlw	4
  9470  0B66                     u6305:	
  9471  0B66  36D5               	lsrf	(??_Button_State_Initializing^(0+128)+3),f
  9472  0B67  0CD4               	rrf	(??_Button_State_Initializing^(0+128)+2),f
  9473  0B68  0CD3               	rrf	(??_Button_State_Initializing^(0+128)+1),f
  9474  0B69  0CD2               	rrf	??_Button_State_Initializing^(0+128),f
  9475  0B6A  0B89               	decfsz	9,f
  9476  0B6B  2B66               	goto	u6305
  9477  0B6C  0851               	movf	Button_State_Initializing@button^(0+128),w
  9478  0B6D  3E03               	addlw	3
  9479  0B6E  0086               	movwf	6
  9480  0B6F  3001               	movlw	1	; select bank2/3
  9481  0B70  0087               	movwf	7
  9482  0B71  0852               	movf	??_Button_State_Initializing^(0+128),w
  9483  0B72  3FC0               	movwi [0]fsr1
  9484  0B73  0853               	movf	(??_Button_State_Initializing+1)^(0+128),w
  9485  0B74  3FC1               	movwi [1]fsr1
  9486                           
  9487                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
  9488  0B75  0851               	movf	Button_State_Initializing@button^(0+128),w
  9489  0B76  3E02               	addlw	2
  9490  0B77  0086               	movwf	6
  9491  0B78  3001               	movlw	1	; select bank2/3
  9492  0B79  0087               	movwf	7
  9493  0B7A  0181               	clrf	1
  9494  0B7B  0A81               	incf	1,f
  9495                           
  9496                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9497  0B7C  0851               	movf	Button_State_Initializing@button^(0+128),w
  9498  0B7D  3E0A               	addlw	10
  9499  0B7E  0086               	movwf	6
  9500  0B7F  3001               	movlw	1	; select bank2/3
  9501  0B80  0087               	movwf	7
  9502  0B81  3000               	movlw	0
  9503  0B82  3FC0               	movwi [0]fsr1
  9504  0B83  3FC1               	movwi [1]fsr1
  9505  0B84  0008               	return
  9506  0B85                     __end_of_Button_State_Initializing:	
  9507                           
  9508                           	psect	text57
  9509  0BF4                     __ptext57:	
  9510 ;; *************** function _Button_State_Pressed *****************
  9511 ;; Defined at:
  9512 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;  button          1    8[BANK1 ] PTR struct .
  9515 ;;		 -> mtouch_button(48), 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  1    wreg      void 
  9520 ;; Registers used:
  9521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9527 ;;      Params:         0       0       1       0       0       0       0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0       0
  9529 ;;      Temps:          0       2       0       0       0       0       0       0
  9530 ;;      Totals:         0       2       1       0       0       0       0       0
  9531 ;;Total ram usage:        3 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; Hardware stack levels required when called:    7
  9534 ;; This function calls:
  9535 ;;		_Button_DefaultCallback
  9536 ;;		_MTOUCH_Button_Initialize
  9537 ;;		_myButtonReleasedCallback
  9538 ;; This function is called by:
  9539 ;;		_Button_Service
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _Button_State_Pressed
  9545  0BF4                     _Button_State_Pressed:	
  9546                           
  9547                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9551  0BF4  0021               	movlb	1	; select bank1
  9552  0BF5  0851               	movf	Button_State_Pressed@button^(0+128),w
  9553  0BF6  3E0A               	addlw	10
  9554  0BF7  0086               	movwf	6
  9555  0BF8  3001               	movlw	1	; select bank2/3
  9556  0BF9  0087               	movwf	7
  9557  0BFA  3F40               	moviw [0]fsr1
  9558  0BFB  0020               	movlb	0	; select bank0
  9559  0BFC  00EE               	movwf	??_Button_State_Pressed
  9560  0BFD  3F41               	moviw [1]fsr1
  9561  0BFE  00EF               	movwf	??_Button_State_Pressed+1
  9562  0BFF  3007               	movlw	7
  9563  0C00  026F               	subwf	??_Button_State_Pressed+1,w
  9564  0C01  30D0               	movlw	208
  9565  0C02  1903               	skipnz
  9566  0C03  026E               	subwf	??_Button_State_Pressed,w
  9567  0C04  1C03               	skipc
  9568  0C05  2C20               	goto	l5669
  9569                           
  9570                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
  9571  0C06  0021               	movlb	1	; select bank1
  9572  0C07  0851               	movf	Button_State_Pressed@button^(0+128),w
  9573  0C08  0086               	movwf	6
  9574  0C09  3001               	movlw	1	; select bank2/3
  9575  0C0A  0087               	movwf	7
  9576  0C0B  0801               	movf	1,w
  9577  0C0C  3189  2124  318B   	fcall	_MTOUCH_Button_Initialize
  9578                           
  9579                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
  9580  0C0F  0021               	movlb	1	; select bank1
  9581  0C10  0851               	movf	Button_State_Pressed@button^(0+128),w
  9582  0C11  0086               	movwf	6
  9583  0C12  3001               	movlw	1	; select bank2/3
  9584  0C13  0087               	movwf	7
  9585  0C14  0801               	movf	1,w
  9586  0C15  0020               	movlb	0	; select bank0
  9587  0C16  00EE               	movwf	??_Button_State_Pressed
  9588  0C17  086E               	movf	??_Button_State_Pressed,w
  9589  0C18  0021               	movlb	1	; select bank1
  9590  0C19  00CC               	movwf	myButtonReleasedCallback@button^(0+128)
  9591  0C1A  0863               	movf	(_callback_notPressed+1)^(0+128),w
  9592  0C1B  008A               	movwf	10
  9593  0C1C  0862               	movf	_callback_notPressed^(0+128),w
  9594  0C1D  000A               	callw
  9595  0C1E  318B               	pagesel	$
  9596                           
  9597                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
  9598  0C1F  0008               	return
  9599  0C20                     l5669:	
  9600  0C20  0021               	movlb	1	; select bank1
  9601  0C21  0851               	movf	Button_State_Pressed@button^(0+128),w
  9602  0C22  3E09               	addlw	9
  9603  0C23  0086               	movwf	6
  9604  0C24  3001               	movlw	1	; select bank2/3
  9605  0C25  0087               	movwf	7
  9606  0C26  0801               	movf	1,w
  9607  0C27  3A80               	xorlw	128
  9608  0C28  0020               	movlb	0	; select bank0
  9609  0C29  00EE               	movwf	??_Button_State_Pressed
  9610  0C2A  0021               	movlb	1	; select bank1
  9611  0C2B  0851               	movf	Button_State_Pressed@button^(0+128),w
  9612  0C2C  3E0E               	addlw	14
  9613  0C2D  0086               	movwf	6
  9614  0C2E  3001               	movlw	1	; select bank2/3
  9615  0C2F  0087               	movwf	7
  9616  0C30  0851               	movf	Button_State_Pressed@button^(0+128),w
  9617  0C31  3E0E               	addlw	14
  9618  0C32  0084               	movwf	4
  9619  0C33  3001               	movlw	1	; select bank2/3
  9620  0C34  0085               	movwf	5
  9621  0C35  3600               	lsrf	0,w
  9622  0C36  0201               	subwf	1,w
  9623  0C37  3A80               	xorlw	128
  9624  0C38  0020               	movlb	0	; select bank0
  9625  0C39  02EE               	subwf	??_Button_State_Pressed,f
  9626  0C3A  1803               	skipnc
  9627  0C3B  0008               	return
  9628                           
  9629                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  9630  0C3C  0021               	movlb	1	; select bank1
  9631  0C3D  0851               	movf	Button_State_Pressed@button^(0+128),w
  9632  0C3E  3E02               	addlw	2
  9633  0C3F  0086               	movwf	6
  9634  0C40  3001               	movlw	1	; select bank2/3
  9635  0C41  0087               	movwf	7
  9636  0C42  0181               	clrf	1
  9637  0C43  0A81               	incf	1,f
  9638                           
  9639                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
  9640  0C44  0851               	movf	Button_State_Pressed@button^(0+128),w
  9641  0C45  3E0A               	addlw	10
  9642  0C46  0086               	movwf	6
  9643  0C47  3001               	movlw	1	; select bank2/3
  9644  0C48  0087               	movwf	7
  9645  0C49  3000               	movlw	0
  9646  0C4A  3FC0               	movwi [0]fsr1
  9647  0C4B  3FC1               	movwi [1]fsr1
  9648                           
  9649                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  9650  0C4C  0851               	movf	Button_State_Pressed@button^(0+128),w
  9651  0C4D  3E0C               	addlw	12
  9652  0C4E  0086               	movwf	6
  9653  0C4F  3001               	movlw	1	; select bank2/3
  9654  0C50  0087               	movwf	7
  9655  0C51  30FF               	movlw	255
  9656  0C52  3FC0               	movwi [0]fsr1
  9657  0C53  30FB               	movlw	251
  9658  0C54  3FC1               	movwi [1]fsr1
  9659                           
  9660                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
  9661  0C55  0851               	movf	Button_State_Pressed@button^(0+128),w
  9662  0C56  0086               	movwf	6
  9663  0C57  3001               	movlw	1	; select bank2/3
  9664  0C58  0087               	movwf	7
  9665  0C59  0801               	movf	1,w
  9666  0C5A  0020               	movlb	0	; select bank0
  9667  0C5B  00EE               	movwf	??_Button_State_Pressed
  9668  0C5C  086E               	movf	??_Button_State_Pressed,w
  9669  0C5D  0021               	movlb	1	; select bank1
  9670  0C5E  00CC               	movwf	myButtonReleasedCallback@button^(0+128)
  9671  0C5F  0863               	movf	(_callback_notPressed+1)^(0+128),w
  9672  0C60  008A               	movwf	10
  9673  0C61  0862               	movf	_callback_notPressed^(0+128),w
  9674  0C62  000A               	callw
  9675  0C63  318B               	pagesel	$
  9676  0C64  0008               	return
  9677  0C65                     __end_of_Button_State_Pressed:	
  9678                           
  9679                           	psect	text58
  9680  0B85                     __ptext58:	
  9681 ;; *************** function _myButtonPressedCallback *****************
  9682 ;; Defined at:
  9683 ;;		line 98 in file "main.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;  button          1    3[BANK1 ] enum E2923
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;		None
  9688 ;; Return value:  Size  Location     Type
  9689 ;;                  1    wreg      void 
  9690 ;; Registers used:
  9691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9697 ;;      Params:         0       0       1       0       0       0       0       0
  9698 ;;      Locals:         0       0       0       0       0       0       0       0
  9699 ;;      Temps:          0       0       4       0       0       0       0       0
  9700 ;;      Totals:         0       0       5       0       0       0       0       0
  9701 ;;Total ram usage:        5 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; Hardware stack levels required when called:   13
  9704 ;; This function calls:
  9705 ;;		_MTOUCH_Button_Buttonmask_Get
  9706 ;;		_printf
  9707 ;; This function is called by:
  9708 ;;		_main
  9709 ;;		_Button_State_NotPressed
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           
  9714                           ;psect for function _myButtonPressedCallback
  9715  0B85                     _myButtonPressedCallback:	
  9716                           
  9717                           ;main.c: 98: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 99: {
      +                          ;main.c: 103:     if(MTOUCH_Button_Buttonmask_Get() == 2)
  9718                           
  9719                           ;incstack = 0
  9720 ;; hardware stack exceeded
  9721                           ; Regs used in _myButtonPressedCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9722  0B85  3197  2749  318B   	fcall	_MTOUCH_Button_Buttonmask_Get
  9723  0B88  3A02               	xorlw	2
  9724  0B89  1D03               	skipz
  9725  0B8A  2BA2               	goto	l1002
  9726                           
  9727                           ;main.c: 104:     {;main.c: 105:         counter_1s = 0;
  9728  0B8B  0021               	movlb	1	; select bank1
  9729  0B8C  01B4               	clrf	_counter_1s^(0+128)
  9730  0B8D  01B5               	clrf	(_counter_1s+1)^(0+128)
  9731                           
  9732                           ;main.c: 106:         counter_ON_OFF++;
  9733  0B8E  3001               	movlw	1
  9734  0B8F  00CD               	movwf	??_myButtonPressedCallback^(0+128)
  9735  0B90  084D               	movf	??_myButtonPressedCallback^(0+128),w
  9736  0B91  07C0               	addwf	_counter_ON_OFF^(0+128),f
  9737                           
  9738                           ;main.c: 107:         if(counter_ON_OFF == 2)
  9739  0B92  3002               	movlw	2
  9740  0B93  0640               	xorwf	_counter_ON_OFF^(0+128),w
  9741  0B94  1D03               	btfss	3,2
  9742  0B95  2BA2               	goto	l1002
  9743                           
  9744                           ;main.c: 108:         {;main.c: 109:             counter_ON_OFF = 0;
  9745  0B96  01C0               	clrf	_counter_ON_OFF^(0+128)
  9746                           
  9747                           ;main.c: 111:             last_touch_status.full_status ^= 0b00000010;
  9748  0B97  3002               	movlw	2
  9749  0B98  06B6               	xorwf	_last_touch_status^(0+128),f
  9750  0B99  3000               	movlw	0
  9751  0B9A  06B7               	xorwf	(_last_touch_status+1)^(0+128),f
  9752                           
  9753                           ;main.c: 112:             if(last_touch_status.CS1)
  9754  0B9B  1CB6               	btfss	_last_touch_status^(0+128),1
  9755  0B9C  2BA0               	goto	l1004
  9756                           
  9757                           ;main.c: 113:             {;main.c: 114:                 turn_on = 1;
  9758  0B9D  01BC               	clrf	_turn_on^(0+128)
  9759  0B9E  0ABC               	incf	_turn_on^(0+128),f
  9760                           
  9761                           ;main.c: 115:             }
  9762  0B9F  2BA2               	goto	l1002
  9763  0BA0                     l1004:	
  9764                           ;main.c: 116:             else
  9765                           
  9766                           
  9767                           ;main.c: 117:             {;main.c: 118:                 turn_off = 1;
  9768  0BA0  01BD               	clrf	_turn_off^(0+128)
  9769  0BA1  0ABD               	incf	_turn_off^(0+128),f
  9770  0BA2                     l1002:	
  9771                           ;main.c: 121:     }
  9772                           
  9773                           
  9774                           ;main.c: 122:     if(last_touch_status.CS1 == 1)
  9775  0BA2  0021               	movlb	1	; select bank1
  9776  0BA3  1CB6               	btfss	_last_touch_status^(0+128),1
  9777  0BA4  0008               	return
  9778                           
  9779                           ;main.c: 123:     {;main.c: 124:         if(MTOUCH_Button_Buttonmask_Get() == 1 && triac
      +                          _level.full!=0xFF)
  9780  0BA5  3197  2749  318B   	fcall	_MTOUCH_Button_Buttonmask_Get
  9781  0BA8  3A01               	xorlw	1
  9782  0BA9  1D03               	skipz
  9783  0BAA  2BE4               	goto	l5525
  9784  0BAB  0021               	movlb	1	; select bank1
  9785  0BAC  0A38               	incf	_triac_level^(0+128),w
  9786  0BAD  0439               	iorwf	(_triac_level+1)^(0+128),w
  9787  0BAE  1903               	btfsc	3,2
  9788  0BAF  2BE4               	goto	l5525
  9789                           
  9790                           ;main.c: 125:         {;main.c: 126:             triac_level.level++;
  9791  0BB0  0838               	movf	_triac_level^(0+128),w
  9792  0BB1  390F               	andlw	15
  9793  0BB2  00CD               	movwf	??_myButtonPressedCallback^(0+128)
  9794  0BB3  0ACD               	incf	??_myButtonPressedCallback^(0+128),f
  9795  0BB4                     L8:	
  9796  0BB4  0838               	movf	_triac_level^(0+128),w
  9797  0BB5  064D               	xorwf	??_myButtonPressedCallback^(0+128),w
  9798  0BB6  39F0               	andlw	-16
  9799  0BB7  064D               	xorwf	??_myButtonPressedCallback^(0+128),w
  9800  0BB8  00B8               	movwf	_triac_level^(0+128)
  9801                           
  9802                           ;main.c: 127:             printf("lastlevel--%d|||level--%d\r\n",triac_level.last_level,
      +                          triac_level.level);
  9803  0BB9  3000               	movlw	low (STR_7| (0+32768))
  9804  0BBA  0020               	movlb	0	; select bank0
  9805  0BBB  00E7               	movwf	printf@fmt
  9806  0BBC  3098               	movlw	high (STR_7| (0+32768))
  9807  0BBD  00E8               	movwf	printf@fmt+1
  9808  0BBE  0021               	movlb	1	; select bank1
  9809  0BBF  0E38               	swapf	_triac_level^(0+128),w
  9810  0BC0  390F               	andlw	15
  9811  0BC1  00CD               	movwf	??_myButtonPressedCallback^(0+128)
  9812  0BC2  01CE               	clrf	(??_myButtonPressedCallback^(0+128)+1)
  9813  0BC3  084D               	movf	??_myButtonPressedCallback^(0+128),w
  9814  0BC4  0020               	movlb	0	; select bank0
  9815  0BC5  00E9               	movwf	?_printf+2
  9816  0BC6  0021               	movlb	1	; select bank1
  9817  0BC7  084E               	movf	(??_myButtonPressedCallback+1)^(0+128),w
  9818  0BC8  0020               	movlb	0	; select bank0
  9819  0BC9  00EA               	movwf	?_printf+3
  9820  0BCA  0021               	movlb	1	; select bank1
  9821  0BCB  0838               	movf	_triac_level^(0+128),w
  9822  0BCC  390F               	andlw	15
  9823  0BCD  00CF               	movwf	(??_myButtonPressedCallback+2)^(0+128)
  9824  0BCE  01D0               	clrf	((??_myButtonPressedCallback+2)^(0+128)+1)
  9825  0BCF  084F               	movf	(??_myButtonPressedCallback+2)^(0+128),w
  9826  0BD0  0020               	movlb	0	; select bank0
  9827  0BD1  00EB               	movwf	?_printf+4
  9828  0BD2  0021               	movlb	1	; select bank1
  9829  0BD3  0850               	movf	(??_myButtonPressedCallback+3)^(0+128),w
  9830  0BD4  0020               	movlb	0	; select bank0
  9831  0BD5  00EC               	movwf	?_printf+5
  9832  0BD6  3195  25B2         	fcall	_printf
  9833                           
  9834                           ;main.c: 128:             triac_level.last_level = triac_level.level;
  9835  0BD8  0021               	movlb	1	; select bank1
  9836  0BD9  0838               	movf	_triac_level^(0+128),w
  9837  0BDA  390F               	andlw	15
  9838  0BDB  00CD               	movwf	??_myButtonPressedCallback^(0+128)
  9839  0BDC  0ECD               	swapf	??_myButtonPressedCallback^(0+128),f
  9840  0BDD  0838               	movf	_triac_level^(0+128),w
  9841  0BDE  064D               	xorwf	??_myButtonPressedCallback^(0+128),w
  9842  0BDF  390F               	andlw	-241
  9843  0BE0  064D               	xorwf	??_myButtonPressedCallback^(0+128),w
  9844  0BE1  00B8               	movwf	_triac_level^(0+128)
  9845                           
  9846                           ;main.c: 129:             counter_PRESS = 0;
  9847  0BE2  01BF               	clrf	_counter_PRESS^(0+128)
  9848                           
  9849                           ;main.c: 130:         }
  9850  0BE3  0008               	return
  9851  0BE4                     l5525:	
  9852  0BE4  3197  2749  318B   	fcall	_MTOUCH_Button_Buttonmask_Get
  9853  0BE7  3A04               	xorlw	4
  9854  0BE8  1D03               	skipz
  9855  0BE9  0008               	return
  9856  0BEA  0021               	movlb	1	; select bank1
  9857  0BEB  0838               	movf	_triac_level^(0+128),w
  9858  0BEC  0439               	iorwf	(_triac_level+1)^(0+128),w
  9859  0BED  1903               	btfsc	3,2
  9860  0BEE  0008               	return
  9861                           
  9862                           ;main.c: 132:         {;main.c: 133:             triac_level.level--;
  9863  0BEF  0838               	movf	_triac_level^(0+128),w
  9864  0BF0  390F               	andlw	15
  9865  0BF1  00CD               	movwf	??_myButtonPressedCallback^(0+128)
  9866  0BF2  03CD               	decf	??_myButtonPressedCallback^(0+128),f
  9867  0BF3  2BB4               	goto	L8
  9868  0BF4                     __end_of_myButtonPressedCallback:	
  9869                           ;main.c: 134:             printf("lastlevel--%d|||level--%d\r\n",triac_level.last_level,
      +                          triac_level.level);
  9870                           
  9871                           
  9872                           	psect	text59
  9873  142F                     __ptext59:	
  9874 ;; *************** function _Button_DefaultCallback *****************
  9875 ;; Defined at:
  9876 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;  button          1    3[BANK1 ] enum E3069
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;		None
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  1    wreg      void 
  9883 ;; Registers used:
  9884 ;;		None
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9890 ;;      Params:         0       0       1       0       0       0       0       0
  9891 ;;      Locals:         0       0       0       0       0       0       0       0
  9892 ;;      Temps:          0       0       0       0       0       0       0       0
  9893 ;;      Totals:         0       0       1       0       0       0       0       0
  9894 ;;Total ram usage:        1 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    4
  9897 ;; This function calls:
  9898 ;;		Nothing
  9899 ;; This function is called by:
  9900 ;;		_Button_State_NotPressed
  9901 ;;		_Button_State_Pressed
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function _Button_DefaultCallback
  9907  142F                     _Button_DefaultCallback:	
  9908                           
  9909                           ;incstack = 0
  9910                           ; Regs used in _Button_DefaultCallback: []
  9911  142F  0008               	return
  9912  1430                     __end_of_Button_DefaultCallback:	
  9913                           
  9914                           	psect	text60
  9915  1434                     __ptext60:	
  9916 ;; *************** function _myButtonReleasedCallback *****************
  9917 ;; Defined at:
  9918 ;;		line 140 in file "main.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;  button          1    3[BANK1 ] enum E2923
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;		None
  9923 ;; Return value:  Size  Location     Type
  9924 ;;                  1    wreg      void 
  9925 ;; Registers used:
  9926 ;;		status,2
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9932 ;;      Params:         0       0       1       0       0       0       0       0
  9933 ;;      Locals:         0       0       0       0       0       0       0       0
  9934 ;;      Temps:          0       0       0       0       0       0       0       0
  9935 ;;      Totals:         0       0       1       0       0       0       0       0
  9936 ;;Total ram usage:        1 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    4
  9939 ;; This function calls:
  9940 ;;		Nothing
  9941 ;; This function is called by:
  9942 ;;		_main
  9943 ;;		_Button_State_Pressed
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           
  9948                           ;psect for function _myButtonReleasedCallback
  9949  1434                     _myButtonReleasedCallback:	
  9950                           
  9951                           ;main.c: 140: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 141
      +                          : {;main.c: 142:     counter_PRESS = 0;
  9952                           
  9953                           ;incstack = 0
  9954                           ; Regs used in _myButtonReleasedCallback: [status,2]
  9955  1434  0021               	movlb	1	; select bank1
  9956  1435  01BF               	clrf	_counter_PRESS^(0+128)
  9957  1436  0008               	return
  9958  1437                     __end_of_myButtonReleasedCallback:	
  9959                           
  9960                           	psect	text61
  9961  15B2                     __ptext61:	
  9962 ;; *************** function _printf *****************
  9963 ;; Defined at:
  9964 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  fmt             2   71[BANK0 ] PTR const unsigned char 
  9967 ;;		 -> STR_8(28), STR_7(28), STR_6(13), STR_5(20), 
  9968 ;;		 -> STR_4(14), STR_3(20), STR_2(20), STR_1(20), 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;  ret             2    0        int 
  9971 ;;  ap              1    2[BANK1 ] PTR void [1]
  9972 ;;		 -> ?_printf(2), 
  9973 ;; Return value:  Size  Location     Type
  9974 ;;                  2   71[BANK0 ] int 
  9975 ;; Registers used:
  9976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9977 ;; Tracked objects:
  9978 ;;		On entry : 0/0
  9979 ;;		On exit  : 0/0
  9980 ;;		Unchanged: 0/0
  9981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9982 ;;      Params:         0       6       0       0       0       0       0       0
  9983 ;;      Locals:         0       0       3       0       0       0       0       0
  9984 ;;      Temps:          0       1       0       0       0       0       0       0
  9985 ;;      Totals:         0       7       3       0       0       0       0       0
  9986 ;;Total ram usage:       10 bytes
  9987 ;; Hardware stack levels used:    1
  9988 ;; Hardware stack levels required when called:   12
  9989 ;; This function calls:
  9990 ;;		_vfprintf
  9991 ;; This function is called by:
  9992 ;;		_main
  9993 ;;		_myButtonPressedCallback
  9994 ;; This function uses a non-reentrant model
  9995 ;;
  9996                           
  9997                           
  9998                           ;psect for function _printf
  9999  15B2                     _printf:	
 10000                           
 10001                           ;incstack = 0
 10002                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10003  15B2  3069               	movlw	(low ((?_printf| 0+2)))& (0+255)
 10004  15B3  0020               	movlb	0	; select bank0
 10005  15B4  00ED               	movwf	??_printf
 10006  15B5  086D               	movf	??_printf,w
 10007  15B6  0021               	movlb	1	; select bank1
 10008  15B7  00CB               	movwf	printf@ap^(0+128)
 10009  15B8  0020               	movlb	0	; select bank0
 10010  15B9  0868               	movf	printf@fmt+1,w
 10011  15BA  00E0               	movwf	vfprintf@fmt+1
 10012  15BB  0867               	movf	printf@fmt,w
 10013  15BC  00DF               	movwf	vfprintf@fmt
 10014  15BD  30CB               	movlw	(low (printf@ap| 0))& (0+255)
 10015  15BE  00ED               	movwf	??_printf
 10016  15BF  086D               	movf	??_printf,w
 10017  15C0  00E1               	movwf	vfprintf@ap
 10018  15C1  3000               	movlw	0
 10019  15C2  3188  208E         	fcall	_vfprintf
 10020  15C4  0008               	return
 10021  15C5                     __end_of_printf:	
 10022                           
 10023                           	psect	text62
 10024  088E                     __ptext62:	
 10025 ;; *************** function _vfprintf *****************
 10026 ;; Defined at:
 10027 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  fp              1    wreg     PTR struct _IO_FILE
 10030 ;;		 -> NULL(0), 
 10031 ;;  fmt             2   63[BANK0 ] PTR const unsigned char 
 10032 ;;		 -> STR_8(28), STR_7(28), STR_6(13), STR_5(20), 
 10033 ;;		 -> STR_4(14), STR_3(20), STR_2(20), STR_1(20), 
 10034 ;;  ap              1   65[BANK0 ] PTR PTR void 
 10035 ;;		 -> printf@ap(1), 
 10036 ;; Auto vars:     Size  Location     Type
 10037 ;;  fp              1   68[BANK0 ] PTR struct _IO_FILE
 10038 ;;		 -> NULL(0), 
 10039 ;;  cfmt            2   69[BANK0 ] PTR unsigned char 
 10040 ;;		 -> STR_8(28), STR_7(28), STR_6(13), STR_5(20), 
 10041 ;;		 -> STR_4(14), STR_3(20), STR_2(20), STR_1(20), 
 10042 ;; Return value:  Size  Location     Type
 10043 ;;                  2   63[BANK0 ] int 
 10044 ;; Registers used:
 10045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10046 ;; Tracked objects:
 10047 ;;		On entry : 0/0
 10048 ;;		On exit  : 0/0
 10049 ;;		Unchanged: 0/0
 10050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10051 ;;      Params:         0       3       0       0       0       0       0       0
 10052 ;;      Locals:         0       3       0       0       0       0       0       0
 10053 ;;      Temps:          0       2       0       0       0       0       0       0
 10054 ;;      Totals:         0       8       0       0       0       0       0       0
 10055 ;;Total ram usage:        8 bytes
 10056 ;; Hardware stack levels used:    1
 10057 ;; Hardware stack levels required when called:   11
 10058 ;; This function calls:
 10059 ;;		_vfpfcnvrt
 10060 ;; This function is called by:
 10061 ;;		_printf
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           
 10066                           ;psect for function _vfprintf
 10067  088E                     _vfprintf:	
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10071                           ;vfprintf@fp stored from wreg
 10072  088E  0020               	movlb	0	; select bank0
 10073  088F  00E4               	movwf	vfprintf@fp
 10074                           
 10075                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 10076  0890  0860               	movf	vfprintf@fmt+1,w
 10077  0891  00E6               	movwf	vfprintf@cfmt+1
 10078  0892  085F               	movf	vfprintf@fmt,w
 10079  0893  00E5               	movwf	vfprintf@cfmt
 10080                           
 10081                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 10082  0894  0021               	movlb	1	; select bank1
 10083  0895  01AC               	clrf	_nout^(0+128)
 10084  0896  01AD               	clrf	(_nout+1)^(0+128)
 10085  0897                     l5163:	
 10086                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 10087                           
 10088                           
 10089                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 10090  0897  0020               	movlb	0	; select bank0
 10091  0898  0865               	movf	vfprintf@cfmt,w
 10092  0899  0084               	movwf	4
 10093  089A  0866               	movf	vfprintf@cfmt+1,w
 10094  089B  0085               	movwf	5
 10095  089C  0012               	moviw fsr0++
 10096  089D  1903               	btfsc	3,2
 10097  089E  28B4               	goto	l5165
 10098                           
 10099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 10100  089F  3065               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 10101  08A0  00E2               	movwf	??_vfprintf
 10102  08A1  0862               	movf	??_vfprintf,w
 10103  08A2  00CF               	movwf	vfpfcnvrt@fmt
 10104  08A3  0861               	movf	vfprintf@ap,w
 10105  08A4  00E3               	movwf	??_vfprintf+1
 10106  08A5  0863               	movf	??_vfprintf+1,w
 10107  08A6  00D0               	movwf	vfpfcnvrt@ap
 10108  08A7  0864               	movf	vfprintf@fp,w
 10109  08A8  3186  2678  3188   	fcall	_vfpfcnvrt
 10110  08AB  0020               	movlb	0	; select bank0
 10111  08AC  084F               	movf	?_vfpfcnvrt,w
 10112  08AD  0021               	movlb	1	; select bank1
 10113  08AE  07AC               	addwf	_nout^(0+128),f
 10114  08AF  0020               	movlb	0	; select bank0
 10115  08B0  0850               	movf	?_vfpfcnvrt+1,w
 10116  08B1  0021               	movlb	1	; select bank1
 10117  08B2  3DAD               	addwfc	(_nout+1)^(0+128),f
 10118  08B3  2897               	goto	l5163
 10119  08B4                     l5165:	
 10120                           
 10121                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 10122  08B4  0021               	movlb	1	; select bank1
 10123  08B5  082D               	movf	(_nout+1)^(0+128),w
 10124  08B6  0020               	movlb	0	; select bank0
 10125  08B7  00E0               	movwf	?_vfprintf+1
 10126  08B8  0021               	movlb	1	; select bank1
 10127  08B9  082C               	movf	_nout^(0+128),w
 10128  08BA  0020               	movlb	0	; select bank0
 10129  08BB  00DF               	movwf	?_vfprintf
 10130  08BC  0008               	return
 10131  08BD                     __end_of_vfprintf:	
 10132                           
 10133                           	psect	text63
 10134  0678                     __ptext63:	
 10135 ;; *************** function _vfpfcnvrt *****************
 10136 ;; Defined at:
 10137 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;  fp              1    wreg     PTR struct _IO_FILE
 10140 ;;		 -> NULL(0), 
 10141 ;;  fmt             1   47[BANK0 ] PTR PTR unsigned char 
 10142 ;;		 -> vfprintf@cfmt(2), 
 10143 ;;  ap              1   48[BANK0 ] PTR PTR void 
 10144 ;;		 -> printf@ap(1), 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;  fp              1   62[BANK0 ] PTR struct _IO_FILE
 10147 ;;		 -> NULL(0), 
 10148 ;;  ll              8   54[BANK0 ] long long 
 10149 ;;  llu             8    0        unsigned long long 
 10150 ;;  f               4    0        unsigned long long 
 10151 ;;  ct              3    0        unsigned char [3]
 10152 ;;  vp              2    0        PTR void 
 10153 ;;  i               2    0        int 
 10154 ;;  done            2    0        int 
 10155 ;;  cp              2    0        PTR unsigned char 
 10156 ;;  c               1    0        unsigned char 
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  2   47[BANK0 ] int 
 10159 ;; Registers used:
 10160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10166 ;;      Params:         0       2       0       0       0       0       0       0
 10167 ;;      Locals:         0       9       0       0       0       0       0       0
 10168 ;;      Temps:          0       5       0       0       0       0       0       0
 10169 ;;      Totals:         0      16       0       0       0       0       0       0
 10170 ;;Total ram usage:       16 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:   10
 10173 ;; This function calls:
 10174 ;;		_dtoa
 10175 ;;		_fputc
 10176 ;; This function is called by:
 10177 ;;		_vfprintf
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           
 10182                           ;psect for function _vfpfcnvrt
 10183  0678                     _vfpfcnvrt:	
 10184                           
 10185                           ;incstack = 0
 10186                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10187                           ;vfpfcnvrt@fp stored from wreg
 10188  0678  0020               	movlb	0	; select bank0
 10189  0679  00DE               	movwf	vfpfcnvrt@fp
 10190                           
 10191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 10192  067A  084F               	movf	vfpfcnvrt@fmt,w
 10193  067B  0086               	movwf	6
 10194  067C  0187               	clrf	7
 10195  067D  3F40               	moviw [0]fsr1
 10196  067E  00D1               	movwf	??_vfpfcnvrt
 10197  067F  3F41               	moviw [1]fsr1
 10198  0680  00D2               	movwf	??_vfpfcnvrt+1
 10199  0681  0851               	movf	??_vfpfcnvrt,w
 10200  0682  0084               	movwf	4
 10201  0683  0852               	movf	??_vfpfcnvrt+1,w
 10202  0684  0085               	movwf	5
 10203  0685  0012               	moviw fsr0++
 10204  0686  3A25               	xorlw	37
 10205  0687  1D03               	btfss	3,2
 10206  0688  2F25               	goto	l5113
 10207                           
 10208                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 10209  0689  084F               	movf	vfpfcnvrt@fmt,w
 10210  068A  0086               	movwf	6
 10211  068B  0187               	clrf	7
 10212  068C  3001               	movlw	1
 10213  068D  0781               	addwf	1,f
 10214  068E  3141               	addfsr 1,1
 10215  068F  1803               	skipnc
 10216  0690  0A81               	incf	1,f
 10217                           
 10218                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 10219  0691  0021               	movlb	1	; select bank1
 10220  0692  01AE               	clrf	_width^(0+128)
 10221  0693  01AF               	clrf	(_width+1)^(0+128)
 10222  0694  01B2               	clrf	_flags^(0+128)
 10223  0695  01B3               	clrf	(_flags+1)^(0+128)
 10224                           
 10225                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 10226  0696  30FF               	movlw	255
 10227  0697  00B0               	movwf	_prec^(0+128)
 10228  0698  30FF               	movlw	255
 10229  0699  00B1               	movwf	(_prec^(0+128)+1)
 10230                           
 10231                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 10232  069A  0020               	movlb	0	; select bank0
 10233  069B  084F               	movf	vfpfcnvrt@fmt,w
 10234  069C  0086               	movwf	6
 10235  069D  0187               	clrf	7
 10236  069E  3F40               	moviw [0]fsr1
 10237  069F  00D1               	movwf	??_vfpfcnvrt
 10238  06A0  3F41               	moviw [1]fsr1
 10239  06A1  00D2               	movwf	??_vfpfcnvrt+1
 10240  06A2  0851               	movf	??_vfpfcnvrt,w
 10241  06A3  0084               	movwf	4
 10242  06A4  0852               	movf	??_vfpfcnvrt+1,w
 10243  06A5  0085               	movwf	5
 10244  06A6  0012               	moviw fsr0++
 10245  06A7  3A64               	xorlw	100
 10246  06A8  1903               	btfsc	3,2
 10247  06A9  2EB9               	goto	l5089
 10248  06AA  084F               	movf	vfpfcnvrt@fmt,w
 10249  06AB  0086               	movwf	6
 10250  06AC  0187               	clrf	7
 10251  06AD  3F40               	moviw [0]fsr1
 10252  06AE  00D1               	movwf	??_vfpfcnvrt
 10253  06AF  3F41               	moviw [1]fsr1
 10254  06B0  00D2               	movwf	??_vfpfcnvrt+1
 10255  06B1  0851               	movf	??_vfpfcnvrt,w
 10256  06B2  0084               	movwf	4
 10257  06B3  0852               	movf	??_vfpfcnvrt+1,w
 10258  06B4  0085               	movwf	5
 10259  06B5  0012               	moviw fsr0++
 10260  06B6  3A69               	xorlw	105
 10261  06B7  1D03               	btfss	3,2
 10262  06B8  2EF3               	goto	l5097
 10263  06B9                     l5089:	
 10264                           
 10265                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 10266  06B9  084F               	movf	vfpfcnvrt@fmt,w
 10267  06BA  0086               	movwf	6
 10268  06BB  0187               	clrf	7
 10269  06BC  3001               	movlw	1
 10270  06BD  0781               	addwf	1,f
 10271  06BE  3141               	addfsr 1,1
 10272  06BF  1803               	skipnc
 10273  06C0  0A81               	incf	1,f
 10274                           
 10275                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 10276  06C1  0850               	movf	vfpfcnvrt@ap,w
 10277  06C2  0086               	movwf	6
 10278  06C3  0187               	clrf	7
 10279  06C4  0801               	movf	1,w
 10280  06C5  0084               	movwf	4
 10281  06C6  0185               	clrf	5
 10282  06C7  3002               	movlw	2
 10283  06C8  0781               	addwf	1,f
 10284  06C9  3F00               	moviw [0]fsr0
 10285  06CA  00D1               	movwf	??_vfpfcnvrt
 10286  06CB  3F01               	moviw [1]fsr0
 10287  06CC  00D2               	movwf	??_vfpfcnvrt+1
 10288  06CD  0851               	movf	??_vfpfcnvrt,w
 10289  06CE  00D6               	movwf	vfpfcnvrt@ll
 10290  06CF  0852               	movf	??_vfpfcnvrt+1,w
 10291  06D0  00D7               	movwf	vfpfcnvrt@ll+1
 10292  06D1  0D89               	rlf	9,f
 10293  06D2  3B89               	subwfb	9,f
 10294  06D3  0989               	comf	9,f
 10295  06D4  00D8               	movwf	vfpfcnvrt@ll+2
 10296  06D5  00D9               	movwf	vfpfcnvrt@ll+3
 10297  06D6  00DA               	movwf	vfpfcnvrt@ll+4
 10298  06D7  00DB               	movwf	vfpfcnvrt@ll+5
 10299  06D8  00DC               	movwf	vfpfcnvrt@ll+6
 10300  06D9  00DD               	movwf	vfpfcnvrt@ll+7
 10301                           
 10302                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 10303  06DA  0856               	movf	vfpfcnvrt@ll,w
 10304  06DB  00B1               	movwf	dtoa@d
 10305  06DC  0857               	movf	vfpfcnvrt@ll+1,w
 10306  06DD  00B2               	movwf	dtoa@d+1
 10307  06DE  0858               	movf	vfpfcnvrt@ll+2,w
 10308  06DF  00B3               	movwf	dtoa@d+2
 10309  06E0  0859               	movf	vfpfcnvrt@ll+3,w
 10310  06E1  00B4               	movwf	dtoa@d+3
 10311  06E2  085A               	movf	vfpfcnvrt@ll+4,w
 10312  06E3  00B5               	movwf	dtoa@d+4
 10313  06E4  085B               	movf	vfpfcnvrt@ll+5,w
 10314  06E5  00B6               	movwf	dtoa@d+5
 10315  06E6  085C               	movf	vfpfcnvrt@ll+6,w
 10316  06E7  00B7               	movwf	dtoa@d+6
 10317  06E8  085D               	movf	vfpfcnvrt@ll+7,w
 10318  06E9  00B8               	movwf	dtoa@d+7
 10319  06EA  085E               	movf	vfpfcnvrt@fp,w
 10320  06EB  3182  223B         	fcall	_dtoa
 10321  06ED  0020               	movlb	0	; select bank0
 10322  06EE  0832               	movf	?_dtoa+1,w
 10323  06EF  00D0               	movwf	?_vfpfcnvrt+1
 10324  06F0  0831               	movf	?_dtoa,w
 10325  06F1  00CF               	movwf	?_vfpfcnvrt
 10326  06F2  0008               	return
 10327  06F3                     l5097:	
 10328                           
 10329                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 10330  06F3  084F               	movf	vfpfcnvrt@fmt,w
 10331  06F4  0086               	movwf	6
 10332  06F5  0187               	clrf	7
 10333  06F6  3F40               	moviw [0]fsr1
 10334  06F7  00D1               	movwf	??_vfpfcnvrt
 10335  06F8  3F41               	moviw [1]fsr1
 10336  06F9  00D2               	movwf	??_vfpfcnvrt+1
 10337  06FA  0851               	movf	??_vfpfcnvrt,w
 10338  06FB  0084               	movwf	4
 10339  06FC  0852               	movf	??_vfpfcnvrt+1,w
 10340  06FD  0085               	movwf	5
 10341  06FE  0012               	moviw fsr0++
 10342  06FF  3A25               	xorlw	37
 10343  0700  1D03               	btfss	3,2
 10344  0701  2F1A               	goto	l5107
 10345                           
 10346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 10347  0702  084F               	movf	vfpfcnvrt@fmt,w
 10348  0703  0086               	movwf	6
 10349  0704  0187               	clrf	7
 10350  0705  3001               	movlw	1
 10351  0706  0781               	addwf	1,f
 10352  0707  3141               	addfsr 1,1
 10353  0708  1803               	skipnc
 10354  0709  0A81               	incf	1,f
 10355                           
 10356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 10357  070A  3025               	movlw	37
 10358  070B  00F4               	movwf	fputc@c
 10359  070C  3000               	movlw	0
 10360  070D  00F5               	movwf	fputc@c+1
 10361  070E  085E               	movf	vfpfcnvrt@fp,w
 10362  070F  00D1               	movwf	??_vfpfcnvrt
 10363  0710  0851               	movf	??_vfpfcnvrt,w
 10364  0711  00F6               	movwf	fputc@fp
 10365  0712  3188  20EF         	fcall	_fputc
 10366  0714                     l5103:	
 10367                           
 10368                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 10369  0714  3001               	movlw	1
 10370  0715  0020               	movlb	0	; select bank0
 10371  0716  00CF               	movwf	?_vfpfcnvrt
 10372  0717  3000               	movlw	0
 10373  0718  00D0               	movwf	?_vfpfcnvrt+1
 10374  0719  0008               	return
 10375  071A                     l5107:	
 10376                           
 10377                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 10378  071A  084F               	movf	vfpfcnvrt@fmt,w
 10379  071B  0086               	movwf	6
 10380  071C  0187               	clrf	7
 10381  071D  3001               	movlw	1
 10382  071E  0781               	addwf	1,f
 10383  071F  3141               	addfsr 1,1
 10384  0720  1803               	skipnc
 10385  0721  0A81               	incf	1,f
 10386                           
 10387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 10388  0722  01CF               	clrf	?_vfpfcnvrt
 10389  0723  01D0               	clrf	?_vfpfcnvrt+1
 10390  0724  0008               	return
 10391  0725                     l5113:	
 10392                           
 10393                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 10394  0725  084F               	movf	vfpfcnvrt@fmt,w
 10395  0726  0086               	movwf	6
 10396  0727  0187               	clrf	7
 10397  0728  3F40               	moviw [0]fsr1
 10398  0729  00D1               	movwf	??_vfpfcnvrt
 10399  072A  3F41               	moviw [1]fsr1
 10400  072B  00D2               	movwf	??_vfpfcnvrt+1
 10401  072C  0851               	movf	??_vfpfcnvrt,w
 10402  072D  0084               	movwf	4
 10403  072E  0852               	movf	??_vfpfcnvrt+1,w
 10404  072F  0085               	movwf	5
 10405  0730  0800               	movf	0,w	;code access
 10406  0731  00D3               	movwf	??_vfpfcnvrt+2
 10407  0732  01D4               	clrf	??_vfpfcnvrt+3
 10408  0733  0853               	movf	??_vfpfcnvrt+2,w
 10409  0734  00F4               	movwf	fputc@c
 10410  0735  0854               	movf	??_vfpfcnvrt+3,w
 10411  0736  00F5               	movwf	fputc@c+1
 10412  0737  085E               	movf	vfpfcnvrt@fp,w
 10413  0738  00D5               	movwf	??_vfpfcnvrt+4
 10414  0739  0855               	movf	??_vfpfcnvrt+4,w
 10415  073A  00F6               	movwf	fputc@fp
 10416  073B  3188  20EF  3186   	fcall	_fputc
 10417                           
 10418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 10419  073E  0020               	movlb	0	; select bank0
 10420  073F  084F               	movf	vfpfcnvrt@fmt,w
 10421  0740  0086               	movwf	6
 10422  0741  0187               	clrf	7
 10423  0742  3001               	movlw	1
 10424  0743  0781               	addwf	1,f
 10425  0744  3141               	addfsr 1,1
 10426  0745  1803               	skipnc
 10427  0746  0A81               	incf	1,f
 10428  0747  2F14               	goto	l5103
 10429  0748                     __end_of_vfpfcnvrt:	
 10430                           
 10431                           	psect	text64
 10432  023B                     __ptext64:	
 10433 ;; *************** function _dtoa *****************
 10434 ;; Defined at:
 10435 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;  fp              1    wreg     PTR struct _IO_FILE
 10438 ;;		 -> NULL(0), 
 10439 ;;  d               8   17[BANK0 ] long long 
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;  fp              1   30[BANK0 ] PTR struct _IO_FILE
 10442 ;;		 -> NULL(0), 
 10443 ;;  n               8   37[BANK0 ] long long 
 10444 ;;  i               2   45[BANK0 ] int 
 10445 ;;  s               2   35[BANK0 ] int 
 10446 ;;  w               2   33[BANK0 ] int 
 10447 ;;  p               2   31[BANK0 ] int 
 10448 ;; Return value:  Size  Location     Type
 10449 ;;                  2   17[BANK0 ] int 
 10450 ;; Registers used:
 10451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10452 ;; Tracked objects:
 10453 ;;		On entry : 0/0
 10454 ;;		On exit  : 0/0
 10455 ;;		Unchanged: 0/0
 10456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10457 ;;      Params:         0       8       0       0       0       0       0       0
 10458 ;;      Locals:         0      19       0       0       0       0       0       0
 10459 ;;      Temps:          0       3       0       0       0       0       0       0
 10460 ;;      Totals:         0      30       0       0       0       0       0       0
 10461 ;;Total ram usage:       30 bytes
 10462 ;; Hardware stack levels used:    1
 10463 ;; Hardware stack levels required when called:    9
 10464 ;; This function calls:
 10465 ;;		___aodiv
 10466 ;;		___aomod
 10467 ;;		_abs
 10468 ;;		_pad
 10469 ;; This function is called by:
 10470 ;;		_vfpfcnvrt
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           
 10475                           ;psect for function _dtoa
 10476  023B                     _dtoa:	
 10477                           
 10478                           ;incstack = 0
 10479                           ; Regs used in _dtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10480                           ;dtoa@fp stored from wreg
 10481  023B  0020               	movlb	0	; select bank0
 10482  023C  00BE               	movwf	dtoa@fp
 10483                           
 10484                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 10485  023D  0831               	movf	dtoa@d,w
 10486  023E  00C5               	movwf	dtoa@n
 10487  023F  0832               	movf	dtoa@d+1,w
 10488  0240  00C6               	movwf	dtoa@n+1
 10489  0241  0833               	movf	dtoa@d+2,w
 10490  0242  00C7               	movwf	dtoa@n+2
 10491  0243  0834               	movf	dtoa@d+3,w
 10492  0244  00C8               	movwf	dtoa@n+3
 10493  0245  0835               	movf	dtoa@d+4,w
 10494  0246  00C9               	movwf	dtoa@n+4
 10495  0247  0836               	movf	dtoa@d+5,w
 10496  0248  00CA               	movwf	dtoa@n+5
 10497  0249  0837               	movf	dtoa@d+6,w
 10498  024A  00CB               	movwf	dtoa@n+6
 10499  024B  0838               	movf	dtoa@d+7,w
 10500  024C  00CC               	movwf	dtoa@n+7
 10501                           
 10502                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 10503  024D  3045               	movlw	low dtoa@n
 10504  024E  0086               	movwf	6
 10505  024F  3000               	movlw	high dtoa@n
 10506  0250  0087               	movwf	7
 10507  0251  3F47               	moviw [7]fsr1
 10508  0252  00B9               	movwf	??_dtoa
 10509  0253  1FB9               	btfss	??_dtoa,7
 10510  0254  2A57               	goto	u5250
 10511  0255  3001               	movlw	1
 10512  0256  2A58               	goto	u5260
 10513  0257                     u5250:	
 10514  0257  3000               	movlw	0
 10515  0258                     u5260:	
 10516  0258  0020               	movlb	0	; select bank0
 10517  0259  00BA               	movwf	??_dtoa+1
 10518  025A  01BB               	clrf	??_dtoa+2
 10519  025B  083A               	movf	??_dtoa+1,w
 10520  025C  00C3               	movwf	dtoa@s
 10521  025D  083B               	movf	??_dtoa+2,w
 10522  025E  00C4               	movwf	dtoa@s+1
 10523                           
 10524                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 10525  025F  0843               	movf	dtoa@s,w
 10526  0260  0444               	iorwf	dtoa@s+1,w
 10527  0261  1903               	btfsc	3,2
 10528  0262  2A81               	goto	l1112
 10529                           
 10530                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 10531  0263  09C5               	comf	dtoa@n,f
 10532  0264  09C6               	comf	dtoa@n+1,f
 10533  0265  09C7               	comf	dtoa@n+2,f
 10534  0266  09C8               	comf	dtoa@n+3,f
 10535  0267  09C9               	comf	dtoa@n+4,f
 10536  0268  09CA               	comf	dtoa@n+5,f
 10537  0269  09CB               	comf	dtoa@n+6,f
 10538  026A  09CC               	comf	dtoa@n+7,f
 10539  026B  0AC5               	incf	dtoa@n,f
 10540  026C  1D03               	skipz
 10541  026D  2A81               	goto	l1112
 10542  026E  0AC6               	incf	dtoa@n+1,f
 10543  026F  1D03               	skipz
 10544  0270  2A81               	goto	l1112
 10545  0271  0AC7               	incf	dtoa@n+2,f
 10546  0272  1D03               	skipz
 10547  0273  2A81               	goto	l1112
 10548  0274  0AC8               	incf	dtoa@n+3,f
 10549  0275  1D03               	skipz
 10550  0276  2A81               	goto	l1112
 10551  0277  0AC9               	incf	dtoa@n+4,f
 10552  0278  1D03               	skipz
 10553  0279  2A81               	goto	l1112
 10554  027A  0ACA               	incf	dtoa@n+5,f
 10555  027B  1D03               	skipz
 10556  027C  2A81               	goto	l1112
 10557  027D  0ACB               	incf	dtoa@n+6,f
 10558  027E  1D03               	skipz
 10559  027F  2A81               	goto	l1112
 10560  0280  0ACC               	incf	dtoa@n+7,f
 10561  0281                     l1112:	
 10562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
 10563                           
 10564                           
 10565                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 10566  0281  0021               	movlb	1	; select bank1
 10567  0282  1BB1               	btfsc	(_prec+1)^(0+128),7
 10568  0283  2A88               	goto	l1113
 10569                           
 10570                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 10571  0284  30FD               	movlw	253
 10572  0285  05B2               	andwf	_flags^(0+128),f
 10573  0286  30FF               	movlw	255
 10574  0287  05B3               	andwf	(_flags+1)^(0+128),f
 10575  0288                     l1113:	
 10576                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
 10577                           
 10578                           
 10579                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 10580  0288  0831               	movf	(_prec+1)^(0+128),w
 10581  0289  3A80               	xorlw	128
 10582  028A  0020               	movlb	0	; select bank0
 10583  028B  00B9               	movwf	??_dtoa
 10584  028C  3080               	movlw	128
 10585  028D  0239               	subwf	??_dtoa,w
 10586  028E  1D03               	skipz
 10587  028F  2A93               	goto	u5305
 10588  0290  3001               	movlw	1
 10589  0291  0021               	movlb	1	; select bank1
 10590  0292  0230               	subwf	_prec^(0+128),w
 10591  0293                     u5305:	
 10592  0293  1803               	skipnc
 10593  0294  2A9B               	goto	l5005
 10594  0295  3001               	movlw	1
 10595  0296  0020               	movlb	0	; select bank0
 10596  0297  00BF               	movwf	dtoa@p
 10597  0298  3000               	movlw	0
 10598  0299  00C0               	movwf	dtoa@p+1
 10599  029A  2AA3               	goto	l1117
 10600  029B                     l5005:	
 10601  029B  0021               	movlb	1	; select bank1
 10602  029C  0831               	movf	(_prec+1)^(0+128),w
 10603  029D  0020               	movlb	0	; select bank0
 10604  029E  00C0               	movwf	dtoa@p+1
 10605  029F  0021               	movlb	1	; select bank1
 10606  02A0  0830               	movf	_prec^(0+128),w
 10607  02A1  0020               	movlb	0	; select bank0
 10608  02A2  00BF               	movwf	dtoa@p
 10609  02A3                     l1117:	
 10610                           
 10611                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 10612  02A3  0021               	movlb	1	; select bank1
 10613  02A4  082F               	movf	(_width+1)^(0+128),w
 10614  02A5  0020               	movlb	0	; select bank0
 10615  02A6  00C2               	movwf	dtoa@w+1
 10616  02A7  0021               	movlb	1	; select bank1
 10617  02A8  082E               	movf	_width^(0+128),w
 10618  02A9  0020               	movlb	0	; select bank0
 10619  02AA  00C1               	movwf	dtoa@w
 10620                           
 10621                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 10622  02AB  0843               	movf	dtoa@s,w
 10623  02AC  0444               	iorwf	dtoa@s+1,w
 10624  02AD  1D03               	btfss	3,2
 10625  02AE  2AB2               	goto	l5011
 10626  02AF  0021               	movlb	1	; select bank1
 10627  02B0  1D32               	btfss	_flags^(0+128),2
 10628  02B1  2AB7               	goto	l1118
 10629  02B2                     l5011:	
 10630                           
 10631                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 10632  02B2  30FF               	movlw	255
 10633  02B3  0020               	movlb	0	; select bank0
 10634  02B4  07C1               	addwf	dtoa@w,f
 10635  02B5  30FF               	movlw	255
 10636  02B6  3DC2               	addwfc	dtoa@w+1,f
 10637  02B7                     l1118:	
 10638                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
 10639                           
 10640                           
 10641                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 10642  02B7  301F               	movlw	31
 10643  02B8  0020               	movlb	0	; select bank0
 10644  02B9  00CD               	movwf	dtoa@i
 10645  02BA  3000               	movlw	0
 10646  02BB  00CE               	movwf	dtoa@i+1
 10647                           
 10648                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 10649  02BC  0023               	movlb	3	; select bank3
 10650  02BD  01EF               	clrf	(_dbuf^(0+384)+31)
 10651                           
 10652                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10653  02BE  2B4D               	goto	l1121
 10654  02BF                     l5025:	
 10655  02BF  0020               	movlb	0	; select bank0
 10656  02C0  0845               	movf	dtoa@n,w
 10657  02C1  0446               	iorwf	dtoa@n+1,w
 10658  02C2  0447               	iorwf	dtoa@n+2,w
 10659  02C3  0448               	iorwf	dtoa@n+3,w
 10660  02C4  0449               	iorwf	dtoa@n+4,w
 10661  02C5  044A               	iorwf	dtoa@n+5,w
 10662  02C6  044B               	iorwf	dtoa@n+6,w
 10663  02C7  044C               	iorwf	dtoa@n+7,w
 10664  02C8  1D03               	skipz
 10665  02C9  2AE4               	goto	l5015
 10666  02CA  0840               	movf	dtoa@p+1,w
 10667  02CB  3A80               	xorlw	128
 10668  02CC  00B9               	movwf	??_dtoa
 10669  02CD  3080               	movlw	128
 10670  02CE  0239               	subwf	??_dtoa,w
 10671  02CF  1D03               	skipz
 10672  02D0  2AD3               	goto	u5355
 10673  02D1  3001               	movlw	1
 10674  02D2  023F               	subwf	dtoa@p,w
 10675  02D3                     u5355:	
 10676  02D3  1803               	skipnc
 10677  02D4  2AE4               	goto	l5015
 10678  02D5  0020               	movlb	0	; select bank0
 10679  02D6  0842               	movf	dtoa@w+1,w
 10680  02D7  3A80               	xorlw	128
 10681  02D8  00B9               	movwf	??_dtoa
 10682  02D9  3080               	movlw	128
 10683  02DA  0239               	subwf	??_dtoa,w
 10684  02DB  1D03               	skipz
 10685  02DC  2ADF               	goto	u5365
 10686  02DD  3001               	movlw	1
 10687  02DE  0241               	subwf	dtoa@w,w
 10688  02DF                     u5365:	
 10689  02DF  1C03               	skipc
 10690  02E0  2B59               	goto	l5033
 10691  02E1  0021               	movlb	1	; select bank1
 10692  02E2  1CB2               	btfss	_flags^(0+128),1
 10693  02E3  2B59               	goto	l5033
 10694  02E4                     l5015:	
 10695                           
 10696                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 10697  02E4  30FF               	movlw	255
 10698  02E5  0020               	movlb	0	; select bank0
 10699  02E6  07CD               	addwf	dtoa@i,f
 10700  02E7  30FF               	movlw	255
 10701  02E8  3DCE               	addwfc	dtoa@i+1,f
 10702                           
 10703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 10704  02E9  300A               	movlw	10
 10705  02EA  00A0               	movwf	___aomod@divisor
 10706  02EB  01A1               	clrf	___aomod@divisor+1
 10707  02EC  01A2               	clrf	___aomod@divisor+2
 10708  02ED  01A3               	clrf	___aomod@divisor+3
 10709  02EE  01A4               	clrf	___aomod@divisor+4
 10710  02EF  01A5               	clrf	___aomod@divisor+5
 10711  02F0  01A6               	clrf	___aomod@divisor+6
 10712  02F1  01A7               	clrf	___aomod@divisor+7
 10713  02F2  0845               	movf	dtoa@n,w
 10714  02F3  00A8               	movwf	___aomod@dividend
 10715  02F4  0846               	movf	dtoa@n+1,w
 10716  02F5  00A9               	movwf	___aomod@dividend+1
 10717  02F6  0847               	movf	dtoa@n+2,w
 10718  02F7  00AA               	movwf	___aomod@dividend+2
 10719  02F8  0848               	movf	dtoa@n+3,w
 10720  02F9  00AB               	movwf	___aomod@dividend+3
 10721  02FA  0849               	movf	dtoa@n+4,w
 10722  02FB  00AC               	movwf	___aomod@dividend+4
 10723  02FC  084A               	movf	dtoa@n+5,w
 10724  02FD  00AD               	movwf	___aomod@dividend+5
 10725  02FE  084B               	movf	dtoa@n+6,w
 10726  02FF  00AE               	movwf	___aomod@dividend+6
 10727  0300  084C               	movf	dtoa@n+7,w
 10728  0301  00AF               	movwf	___aomod@dividend+7
 10729  0302  3185  259C  3182   	fcall	___aomod
 10730  0305  0020               	movlb	0	; select bank0
 10731  0306  0821               	movf	?___aomod+1,w
 10732  0307  00F5               	movwf	abs@a+1
 10733  0308  0820               	movf	?___aomod,w
 10734  0309  00F4               	movwf	abs@a
 10735  030A  3196  2644  3182   	fcall	_abs
 10736  030D  0874               	movf	?_abs,w
 10737  030E  3E30               	addlw	48
 10738  030F  0020               	movlb	0	; select bank0
 10739  0310  00B9               	movwf	??_dtoa
 10740  0311  084D               	movf	dtoa@i,w
 10741  0312  3ED0               	addlw	(low (_dbuf| (0+256)))& (0+255)
 10742  0313  0086               	movwf	6
 10743  0314  3001               	movlw	1	; select bank3/4
 10744  0315  0087               	movwf	7
 10745  0316  0839               	movf	??_dtoa,w
 10746  0317  0081               	movwf	1
 10747                           
 10748                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 10749  0318  30FF               	movlw	255
 10750  0319  07BF               	addwf	dtoa@p,f
 10751  031A  30FF               	movlw	255
 10752  031B  3DC0               	addwfc	dtoa@p+1,f
 10753                           
 10754                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 10755  031C  30FF               	movlw	255
 10756  031D  07C1               	addwf	dtoa@w,f
 10757  031E  30FF               	movlw	255
 10758  031F  3DC2               	addwfc	dtoa@w+1,f
 10759                           
 10760                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 10761  0320  300A               	movlw	10
 10762  0321  00A0               	movwf	___aodiv@divisor
 10763  0322  01A1               	clrf	___aodiv@divisor+1
 10764  0323  01A2               	clrf	___aodiv@divisor+2
 10765  0324  01A3               	clrf	___aodiv@divisor+3
 10766  0325  01A4               	clrf	___aodiv@divisor+4
 10767  0326  01A5               	clrf	___aodiv@divisor+5
 10768  0327  01A6               	clrf	___aodiv@divisor+6
 10769  0328  01A7               	clrf	___aodiv@divisor+7
 10770  0329  0845               	movf	dtoa@n,w
 10771  032A  00A8               	movwf	___aodiv@dividend
 10772  032B  0846               	movf	dtoa@n+1,w
 10773  032C  00A9               	movwf	___aodiv@dividend+1
 10774  032D  0847               	movf	dtoa@n+2,w
 10775  032E  00AA               	movwf	___aodiv@dividend+2
 10776  032F  0848               	movf	dtoa@n+3,w
 10777  0330  00AB               	movwf	___aodiv@dividend+3
 10778  0331  0849               	movf	dtoa@n+4,w
 10779  0332  00AC               	movwf	___aodiv@dividend+4
 10780  0333  084A               	movf	dtoa@n+5,w
 10781  0334  00AD               	movwf	___aodiv@dividend+5
 10782  0335  084B               	movf	dtoa@n+6,w
 10783  0336  00AE               	movwf	___aodiv@dividend+6
 10784  0337  084C               	movf	dtoa@n+7,w
 10785  0338  00AF               	movwf	___aodiv@dividend+7
 10786  0339  3184  24A9  3182   	fcall	___aodiv
 10787  033C  0020               	movlb	0	; select bank0
 10788  033D  0820               	movf	?___aodiv,w
 10789  033E  00C5               	movwf	dtoa@n
 10790  033F  0821               	movf	?___aodiv+1,w
 10791  0340  00C6               	movwf	dtoa@n+1
 10792  0341  0822               	movf	?___aodiv+2,w
 10793  0342  00C7               	movwf	dtoa@n+2
 10794  0343  0823               	movf	?___aodiv+3,w
 10795  0344  00C8               	movwf	dtoa@n+3
 10796  0345  0824               	movf	?___aodiv+4,w
 10797  0346  00C9               	movwf	dtoa@n+4
 10798  0347  0825               	movf	?___aodiv+5,w
 10799  0348  00CA               	movwf	dtoa@n+5
 10800  0349  0826               	movf	?___aodiv+6,w
 10801  034A  00CB               	movwf	dtoa@n+6
 10802  034B  0827               	movf	?___aodiv+7,w
 10803  034C  00CC               	movwf	dtoa@n+7
 10804  034D                     l1121:	
 10805                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
 10806                           
 10807                           
 10808                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10809  034D  0020               	movlb	0	; select bank0
 10810  034E  084E               	movf	dtoa@i+1,w
 10811  034F  3A80               	xorlw	128
 10812  0350  00B9               	movwf	??_dtoa
 10813  0351  3080               	movlw	128
 10814  0352  0239               	subwf	??_dtoa,w
 10815  0353  1D03               	skipz
 10816  0354  2B57               	goto	u5335
 10817  0355  3001               	movlw	1
 10818  0356  024D               	subwf	dtoa@i,w
 10819  0357                     u5335:	
 10820  0357  1803               	btfsc	3,0
 10821  0358  2ABF               	goto	l5025
 10822  0359                     l5033:	
 10823                           
 10824                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 10825  0359  0020               	movlb	0	; select bank0
 10826  035A  0843               	movf	dtoa@s,w
 10827  035B  0444               	iorwf	dtoa@s+1,w
 10828  035C  1D03               	btfss	3,2
 10829  035D  2B61               	goto	l5037
 10830  035E  0021               	movlb	1	; select bank1
 10831  035F  1D32               	btfss	_flags^(0+128),2
 10832  0360  2B79               	goto	l5047
 10833  0361                     l5037:	
 10834                           
 10835                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 10836  0361  30FF               	movlw	255
 10837  0362  0020               	movlb	0	; select bank0
 10838  0363  07CD               	addwf	dtoa@i,f
 10839  0364  30FF               	movlw	255
 10840  0365  3DCE               	addwfc	dtoa@i+1,f
 10841                           
 10842                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 10843  0366  0843               	movf	dtoa@s,w
 10844  0367  0444               	iorwf	dtoa@s+1,w
 10845  0368  1D03               	btfss	3,2
 10846  0369  2B6C               	goto	l5043
 10847  036A  302B               	movlw	43
 10848  036B  2B6D               	goto	L9
 10849  036C                     l5043:	
 10850  036C  302D               	movlw	45
 10851  036D                     L9:	
 10852  036D  00BC               	movwf	_dtoa$1883
 10853  036E  3000               	movlw	0
 10854  036F  00BD               	movwf	_dtoa$1883+1
 10855  0370  083C               	movf	_dtoa$1883,w
 10856  0371  00B9               	movwf	??_dtoa
 10857  0372  084D               	movf	dtoa@i,w
 10858  0373  3ED0               	addlw	(low (_dbuf| (0+256)))& (0+255)
 10859  0374  0086               	movwf	6
 10860  0375  3001               	movlw	1	; select bank3/4
 10861  0376  0087               	movwf	7
 10862  0377  0839               	movf	??_dtoa,w
 10863  0378  0081               	movwf	1
 10864  0379                     l5047:	
 10865                           
 10866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 10867  0379  0020               	movlb	0	; select bank0
 10868  037A  084D               	movf	dtoa@i,w
 10869  037B  3ED0               	addlw	(low (_dbuf| (0+256)))& (0+255)
 10870  037C  00B9               	movwf	??_dtoa
 10871  037D  0839               	movf	??_dtoa,w
 10872  037E  00A8               	movwf	pad@buf
 10873  037F  0842               	movf	dtoa@w+1,w
 10874  0380  00AA               	movwf	pad@p+1
 10875  0381  0841               	movf	dtoa@w,w
 10876  0382  00A9               	movwf	pad@p
 10877  0383  083E               	movf	dtoa@fp,w
 10878  0384  318A  2222         	fcall	_pad
 10879  0386  0020               	movlb	0	; select bank0
 10880  0387  0829               	movf	?_pad+1,w
 10881  0388  00B2               	movwf	?_dtoa+1
 10882  0389  0828               	movf	?_pad,w
 10883  038A  00B1               	movwf	?_dtoa
 10884  038B  0008               	return
 10885  038C                     __end_of_dtoa:	
 10886                           
 10887                           	psect	text65
 10888  0A22                     __ptext65:	
 10889 ;; *************** function _pad *****************
 10890 ;; Defined at:
 10891 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  fp              1    wreg     PTR struct _IO_FILE
 10894 ;;		 -> NULL(0), 
 10895 ;;  buf             1    8[BANK0 ] PTR unsigned char 
 10896 ;;		 -> dbuf(32), 
 10897 ;;  p               2    9[BANK0 ] int 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
 10900 ;;		 -> NULL(0), 
 10901 ;;  w               2   14[BANK0 ] int 
 10902 ;;  i               2   12[BANK0 ] int 
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  2    8[BANK0 ] int 
 10905 ;; Registers used:
 10906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10912 ;;      Params:         0       3       0       0       0       0       0       0
 10913 ;;      Locals:         0       5       0       0       0       0       0       0
 10914 ;;      Temps:          0       1       0       0       0       0       0       0
 10915 ;;      Totals:         0       9       0       0       0       0       0       0
 10916 ;;Total ram usage:        9 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    8
 10919 ;; This function calls:
 10920 ;;		_fputc
 10921 ;;		_fputs
 10922 ;;		_strlen
 10923 ;; This function is called by:
 10924 ;;		_dtoa
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           
 10929                           ;psect for function _pad
 10930  0A22                     _pad:	
 10931                           
 10932                           ;incstack = 0
 10933                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10934                           ;pad@fp stored from wreg
 10935  0A22  0020               	movlb	0	; select bank0
 10936  0A23  00B0               	movwf	pad@fp
 10937                           
 10938                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 10939  0A24  0021               	movlb	1	; select bank1
 10940  0A25  1C32               	btfss	_flags^(0+128),0
 10941  0A26  2A30               	goto	l4909
 10942                           
 10943                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 10944  0A27  0020               	movlb	0	; select bank0
 10945  0A28  0830               	movf	pad@fp,w
 10946  0A29  00AB               	movwf	??_pad
 10947  0A2A  082B               	movf	??_pad,w
 10948  0A2B  00A0               	movwf	fputs@fp
 10949  0A2C  0828               	movf	pad@buf,w
 10950  0A2D  3197  278B  318A   	fcall	_fputs
 10951  0A30                     l4909:	
 10952                           
 10953                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 10954  0A30  0020               	movlb	0	; select bank0
 10955  0A31  1BAA               	btfsc	pad@p+1,7
 10956  0A32  2A38               	goto	l4913
 10957  0A33  082A               	movf	pad@p+1,w
 10958  0A34  00AF               	movwf	pad@w+1
 10959  0A35  0829               	movf	pad@p,w
 10960  0A36  00AE               	movwf	pad@w
 10961  0A37  2A3A               	goto	l1104
 10962  0A38                     l4913:	
 10963  0A38  01AE               	clrf	pad@w
 10964  0A39  01AF               	clrf	pad@w+1
 10965  0A3A                     l1104:	
 10966                           
 10967                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 10968  0A3A  01AC               	clrf	pad@i
 10969  0A3B  01AD               	clrf	pad@i+1
 10970  0A3C                     l4919:	
 10971                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 10972                           
 10973                           
 10974                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 10975  0A3C  082D               	movf	pad@i+1,w
 10976  0A3D  3A80               	xorlw	128
 10977  0A3E  00AB               	movwf	??_pad
 10978  0A3F  082F               	movf	pad@w+1,w
 10979  0A40  3A80               	xorlw	128
 10980  0A41  022B               	subwf	??_pad,w
 10981  0A42  1D03               	skipz
 10982  0A43  2A46               	goto	u5025
 10983  0A44  082E               	movf	pad@w,w
 10984  0A45  022C               	subwf	pad@i,w
 10985  0A46                     u5025:	
 10986  0A46  1803               	btfsc	3,0
 10987  0A47  2A5A               	goto	l1107
 10988                           
 10989                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 10990  0A48  3020               	movlw	32
 10991  0A49  00F4               	movwf	fputc@c
 10992  0A4A  3000               	movlw	0
 10993  0A4B  00F5               	movwf	fputc@c+1
 10994  0A4C  0020               	movlb	0	; select bank0
 10995  0A4D  0830               	movf	pad@fp,w
 10996  0A4E  00AB               	movwf	??_pad
 10997  0A4F  082B               	movf	??_pad,w
 10998  0A50  00F6               	movwf	fputc@fp
 10999  0A51  3188  20EF  318A   	fcall	_fputc
 11000                           
 11001                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 11002  0A54  3001               	movlw	1
 11003  0A55  0020               	movlb	0	; select bank0
 11004  0A56  07AC               	addwf	pad@i,f
 11005  0A57  3000               	movlw	0
 11006  0A58  3DAD               	addwfc	pad@i+1,f
 11007  0A59  2A3C               	goto	l4919
 11008  0A5A                     l1107:	
 11009                           
 11010                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 11011  0A5A  0021               	movlb	1	; select bank1
 11012  0A5B  1832               	btfsc	_flags^(0+128),0
 11013  0A5C  2A66               	goto	l1108
 11014                           
 11015                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 11016  0A5D  0020               	movlb	0	; select bank0
 11017  0A5E  0830               	movf	pad@fp,w
 11018  0A5F  00AB               	movwf	??_pad
 11019  0A60  082B               	movf	??_pad,w
 11020  0A61  00A0               	movwf	fputs@fp
 11021  0A62  0828               	movf	pad@buf,w
 11022  0A63  3197  278B  318A   	fcall	_fputs
 11023  0A66                     l1108:	
 11024                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
 11025                           
 11026                           
 11027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 11028  0A66  0020               	movlb	0	; select bank0
 11029  0A67  0828               	movf	pad@buf,w
 11030  0A68  3196  268B         	fcall	_strlen
 11031  0A6A  0020               	movlb	0	; select bank0
 11032  0A6B  082E               	movf	pad@w,w
 11033  0A6C  0771               	addwf	?_strlen,w
 11034  0A6D  00A8               	movwf	?_pad
 11035  0A6E  082F               	movf	pad@w+1,w
 11036  0A6F  3D72               	addwfc	?_strlen+1,w
 11037  0A70  00A9               	movwf	?_pad+1
 11038  0A71  0008               	return
 11039  0A72                     __end_of_pad:	
 11040                           
 11041                           	psect	text66
 11042  168B                     __ptext66:	
 11043 ;; *************** function _strlen *****************
 11044 ;; Defined at:
 11045 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 11046 ;; Parameters:    Size  Location     Type
 11047 ;;  s               1    wreg     PTR const unsigned char 
 11048 ;;		 -> dbuf(32), 
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;  s               1    5[COMMON] PTR const unsigned char 
 11051 ;;		 -> dbuf(32), 
 11052 ;;  a               1    4[COMMON] PTR const unsigned char 
 11053 ;;		 -> dbuf(32), 
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  2    1[COMMON] unsigned int 
 11056 ;; Registers used:
 11057 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11063 ;;      Params:         2       0       0       0       0       0       0       0
 11064 ;;      Locals:         2       0       0       0       0       0       0       0
 11065 ;;      Temps:          1       0       0       0       0       0       0       0
 11066 ;;      Totals:         5       0       0       0       0       0       0       0
 11067 ;;Total ram usage:        5 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    4
 11070 ;; This function calls:
 11071 ;;		Nothing
 11072 ;; This function is called by:
 11073 ;;		_pad
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           
 11078                           ;psect for function _strlen
 11079  168B                     _strlen:	
 11080                           
 11081                           ;incstack = 0
 11082                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 11083                           ;strlen@s stored from wreg
 11084  168B  00F5               	movwf	strlen@s
 11085  168C  0875               	movf	strlen@s,w
 11086  168D  00F3               	movwf	??_strlen
 11087  168E  0873               	movf	??_strlen,w
 11088  168F  00F4               	movwf	strlen@a
 11089  1690                     l4895:	
 11090  1690  0875               	movf	strlen@s,w
 11091  1691  0086               	movwf	6
 11092  1692  3001               	movlw	1	; select bank2/3
 11093  1693  0087               	movwf	7
 11094  1694  0801               	movf	1,w
 11095  1695  1903               	btfsc	3,2
 11096  1696  2E9C               	goto	l4897
 11097  1697  3001               	movlw	1
 11098  1698  00F3               	movwf	??_strlen
 11099  1699  0873               	movf	??_strlen,w
 11100  169A  07F5               	addwf	strlen@s,f
 11101  169B  2E90               	goto	l4895
 11102  169C                     l4897:	
 11103  169C  0874               	movf	strlen@a,w
 11104  169D  0275               	subwf	strlen@s,w
 11105  169E  00F1               	movwf	?_strlen
 11106  169F  01F2               	clrf	?_strlen+1
 11107  16A0  1BF1               	btfsc	?_strlen,7
 11108  16A1  03F2               	decf	?_strlen+1,f
 11109  16A2  0008               	return
 11110  16A3                     __end_of_strlen:	
 11111                           
 11112                           	psect	text67
 11113  178B                     __ptext67:	
 11114 ;; *************** function _fputs *****************
 11115 ;; Defined at:
 11116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;  s               1    wreg     PTR const unsigned char 
 11119 ;;		 -> dbuf(32), 
 11120 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
 11121 ;;		 -> NULL(0), 
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;  s               1    7[BANK0 ] PTR const unsigned char 
 11124 ;;		 -> dbuf(32), 
 11125 ;;  i               2    5[BANK0 ] int 
 11126 ;;  c               1    4[BANK0 ] unsigned char 
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  2    0[BANK0 ] int 
 11129 ;; Registers used:
 11130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11136 ;;      Params:         0       1       0       0       0       0       0       0
 11137 ;;      Locals:         0       4       0       0       0       0       0       0
 11138 ;;      Temps:          0       3       0       0       0       0       0       0
 11139 ;;      Totals:         0       8       0       0       0       0       0       0
 11140 ;;Total ram usage:        8 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; Hardware stack levels required when called:    7
 11143 ;; This function calls:
 11144 ;;		_fputc
 11145 ;; This function is called by:
 11146 ;;		_pad
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           
 11151                           ;psect for function _fputs
 11152  178B                     _fputs:	
 11153                           
 11154                           ;incstack = 0
 11155                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11156                           ;fputs@s stored from wreg
 11157  178B  0020               	movlb	0	; select bank0
 11158  178C  00A7               	movwf	fputs@s
 11159  178D  01A5               	clrf	fputs@i
 11160  178E  01A6               	clrf	fputs@i+1
 11161  178F                     l4889:	
 11162  178F  0825               	movf	fputs@i,w
 11163  1790  0727               	addwf	fputs@s,w
 11164  1791  00A1               	movwf	??_fputs
 11165  1792  0821               	movf	??_fputs,w
 11166  1793  0086               	movwf	6
 11167  1794  3001               	movlw	1	; select bank2/3
 11168  1795  0087               	movwf	7
 11169  1796  0801               	movf	1,w
 11170  1797  00A2               	movwf	??_fputs+1
 11171  1798  0822               	movf	??_fputs+1,w
 11172  1799  00A4               	movwf	fputs@c
 11173  179A  0824               	movf	fputs@c,w
 11174  179B  1903               	btfsc	3,2
 11175  179C  0008               	return
 11176  179D  0824               	movf	fputs@c,w
 11177  179E  00A1               	movwf	??_fputs
 11178  179F  01A2               	clrf	??_fputs+1
 11179  17A0  0821               	movf	??_fputs,w
 11180  17A1  00F4               	movwf	fputc@c
 11181  17A2  0822               	movf	??_fputs+1,w
 11182  17A3  00F5               	movwf	fputc@c+1
 11183  17A4  0820               	movf	fputs@fp,w
 11184  17A5  00A3               	movwf	??_fputs+2
 11185  17A6  0823               	movf	??_fputs+2,w
 11186  17A7  00F6               	movwf	fputc@fp
 11187  17A8  3188  20EF  3197   	fcall	_fputc
 11188  17AB  3001               	movlw	1
 11189  17AC  0020               	movlb	0	; select bank0
 11190  17AD  07A5               	addwf	fputs@i,f
 11191  17AE  3000               	movlw	0
 11192  17AF  3DA6               	addwfc	fputs@i+1,f
 11193  17B0  2F8F               	goto	l4889
 11194  17B1                     __end_of_fputs:	
 11195                           
 11196                           	psect	text68
 11197  08EF                     __ptext68:	
 11198 ;; *************** function _fputc *****************
 11199 ;; Defined at:
 11200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 11201 ;; Parameters:    Size  Location     Type
 11202 ;;  c               2    4[COMMON] int 
 11203 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
 11204 ;;		 -> NULL(0), 
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;		None
 11207 ;; Return value:  Size  Location     Type
 11208 ;;                  2    4[COMMON] int 
 11209 ;; Registers used:
 11210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/0
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11216 ;;      Params:         3       0       0       0       0       0       0       0
 11217 ;;      Locals:         0       0       0       0       0       0       0       0
 11218 ;;      Temps:          5       0       0       0       0       0       0       0
 11219 ;;      Totals:         8       0       0       0       0       0       0       0
 11220 ;;Total ram usage:        8 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; Hardware stack levels required when called:    6
 11223 ;; This function calls:
 11224 ;;		_putch
 11225 ;; This function is called by:
 11226 ;;		_pad
 11227 ;;		_vfpfcnvrt
 11228 ;;		_fputs
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           
 11233                           ;psect for function _fputc
 11234  08EF                     _fputc:	
 11235                           
 11236                           ;incstack = 0
 11237                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11238  08EF  0876               	movf	fputc@fp,w
 11239  08F0  1D03               	btfss	3,2
 11240  08F1  0876               	movf	fputc@fp,w
 11241  08F2  1D03               	btfss	3,2
 11242  08F3  28F8               	goto	l4875
 11243  08F4  0874               	movf	fputc@c,w
 11244  08F5  3194  2448         	fcall	_putch
 11245  08F7  0008               	return
 11246  08F8                     l4875:	
 11247  08F8  0876               	movf	fputc@fp,w
 11248  08F9  3E03               	addlw	3
 11249  08FA  0086               	movwf	6
 11250  08FB  0187               	clrf	7
 11251  08FC  0016               	moviw fsr1++
 11252  08FD  0401               	iorwf	1,w
 11253  08FE  1903               	btfsc	3,2
 11254  08FF  291B               	goto	l4879
 11255  0900  0876               	movf	fputc@fp,w
 11256  0901  3E03               	addlw	3
 11257  0902  0086               	movwf	6
 11258  0903  0187               	clrf	7
 11259  0904  3F40               	moviw [0]fsr1
 11260  0905  00F7               	movwf	??_fputc
 11261  0906  3F41               	moviw [1]fsr1
 11262  0907  00F8               	movwf	??_fputc+1
 11263  0908  0A76               	incf	fputc@fp,w
 11264  0909  0086               	movwf	6
 11265  090A  0187               	clrf	7
 11266  090B  3F40               	moviw [0]fsr1
 11267  090C  00F9               	movwf	??_fputc+2
 11268  090D  3F41               	moviw [1]fsr1
 11269  090E  00FA               	movwf	??_fputc+3
 11270  090F  087A               	movf	??_fputc+3,w
 11271  0910  3A80               	xorlw	128
 11272  0911  00FB               	movwf	??_fputc+4
 11273  0912  0878               	movf	??_fputc+1,w
 11274  0913  3A80               	xorlw	128
 11275  0914  027B               	subwf	??_fputc+4,w
 11276  0915  1D03               	skipz
 11277  0916  2919               	goto	u4965
 11278  0917  0877               	movf	??_fputc,w
 11279  0918  0279               	subwf	??_fputc+2,w
 11280  0919                     u4965:	
 11281  0919  1803               	skipnc
 11282  091A  0008               	return
 11283  091B                     l4879:	
 11284  091B  0A76               	incf	fputc@fp,w
 11285  091C  0086               	movwf	6
 11286  091D  0187               	clrf	7
 11287  091E  3001               	movlw	1
 11288  091F  0781               	addwf	1,f
 11289  0920  3141               	addfsr 1,1
 11290  0921  1803               	skipnc
 11291  0922  0A81               	incf	1,f
 11292  0923  0008               	return
 11293  0924                     __end_of_fputc:	
 11294                           
 11295                           	psect	text69
 11296  1448                     __ptext69:	
 11297 ;; *************** function _putch *****************
 11298 ;; Defined at:
 11299 ;;		line 200 in file "mcc_generated_files/eusart.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  txData          1    wreg     unsigned char 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;  txData          1    3[COMMON] unsigned char 
 11304 ;; Return value:  Size  Location     Type
 11305 ;;                  1    wreg      void 
 11306 ;; Registers used:
 11307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11313 ;;      Params:         0       0       0       0       0       0       0       0
 11314 ;;      Locals:         1       0       0       0       0       0       0       0
 11315 ;;      Temps:          0       0       0       0       0       0       0       0
 11316 ;;      Totals:         1       0       0       0       0       0       0       0
 11317 ;;Total ram usage:        1 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    5
 11320 ;; This function calls:
 11321 ;;		_EUSART_Write
 11322 ;; This function is called by:
 11323 ;;		_fputc
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           
 11328                           ;psect for function _putch
 11329  1448                     _putch:	
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11333                           ;putch@txData stored from wreg
 11334  1448  00F3               	movwf	putch@txData
 11335                           
 11336                           ;mcc_generated_files/eusart.c: 200: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 201: {;mcc_generated_files/eusart.c: 202:     EUSART_Write(txData);
 11337  1449  0873               	movf	putch@txData,w
 11338  144A  3197  2767         	fcall	_EUSART_Write
 11339  144C  0008               	return
 11340  144D                     __end_of_putch:	
 11341                           
 11342                           	psect	text70
 11343  1767                     __ptext70:	
 11344 ;; *************** function _EUSART_Write *****************
 11345 ;; Defined at:
 11346 ;;		line 171 in file "mcc_generated_files/eusart.c"
 11347 ;; Parameters:    Size  Location     Type
 11348 ;;  txData          1    wreg     unsigned char 
 11349 ;; Auto vars:     Size  Location     Type
 11350 ;;  txData          1    2[COMMON] unsigned char 
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  1    wreg      void 
 11353 ;; Registers used:
 11354 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11360 ;;      Params:         0       0       0       0       0       0       0       0
 11361 ;;      Locals:         1       0       0       0       0       0       0       0
 11362 ;;      Temps:          1       0       0       0       0       0       0       0
 11363 ;;      Totals:         2       0       0       0       0       0       0       0
 11364 ;;Total ram usage:        2 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    4
 11367 ;; This function calls:
 11368 ;;		Nothing
 11369 ;; This function is called by:
 11370 ;;		_putch
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           
 11375                           ;psect for function _EUSART_Write
 11376  1767                     _EUSART_Write:	
 11377                           
 11378                           ;incstack = 0
 11379                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 11380                           ;EUSART_Write@txData stored from wreg
 11381  1767  00F2               	movwf	EUSART_Write@txData
 11382  1768                     l4851:	
 11383                           ;mcc_generated_files/eusart.c: 171: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 172: {;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemai
      +                          ning)
 11384                           
 11385                           
 11386                           ;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemaining)
 11387  1768  0021               	movlb	1	; select bank1
 11388  1769  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 11389  176A  1D03               	btfss	3,2
 11390  176B  2F6E               	goto	l741
 11391  176C  0064               	clrwdt	;# 
 11392  176D  2F68               	goto	l4851
 11393  176E                     l741:	
 11394                           
 11395                           ;mcc_generated_files/eusart.c: 178:     if(0 == PIE1bits.TXIE)
 11396  176E  1A11               	btfsc	17,4	;volatile
 11397  176F  2F74               	goto	l742
 11398                           
 11399                           ;mcc_generated_files/eusart.c: 179:     {;mcc_generated_files/eusart.c: 180:         TXR
      +                          EG = txData;
 11400  1770  0872               	movf	EUSART_Write@txData,w
 11401  1771  0023               	movlb	3	; select bank3
 11402  1772  009A               	movwf	26	;volatile
 11403                           
 11404                           ;mcc_generated_files/eusart.c: 181:     }
 11405  1773  2F88               	goto	l4865
 11406  1774                     l742:	
 11407                           ;mcc_generated_files/eusart.c: 182:     else
 11408                           
 11409                           
 11410                           ;mcc_generated_files/eusart.c: 183:     {;mcc_generated_files/eusart.c: 184:         PIE
      +                          1bits.TXIE = 0;
 11411  1774  1211               	bcf	17,4	;volatile
 11412                           
 11413                           ;mcc_generated_files/eusart.c: 185:         eusartTxBuffer[eusartTxHead++] = txData;
 11414  1775  0872               	movf	EUSART_Write@txData,w
 11415  1776  00F1               	movwf	??_EUSART_Write
 11416  1777  0845               	movf	_eusartTxHead^(0+128),w
 11417  1778  3E43               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 11418  1779  0086               	movwf	6
 11419  177A  3001               	movlw	1	; select bank2/3
 11420  177B  0087               	movwf	7
 11421  177C  0871               	movf	??_EUSART_Write,w
 11422  177D  0081               	movwf	1
 11423  177E  3001               	movlw	1
 11424  177F  00F1               	movwf	??_EUSART_Write
 11425  1780  0871               	movf	??_EUSART_Write,w
 11426  1781  07C5               	addwf	_eusartTxHead^(0+128),f	;volatile
 11427                           
 11428                           ;mcc_generated_files/eusart.c: 186:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
 11429  1782  3008               	movlw	8
 11430  1783  0245               	subwf	_eusartTxHead^(0+128),w	;volatile
 11431  1784  1803               	btfsc	3,0
 11432                           
 11433                           ;mcc_generated_files/eusart.c: 187:         {;mcc_generated_files/eusart.c: 188:        
      +                               eusartTxHead = 0;
 11434  1785  01C5               	clrf	_eusartTxHead^(0+128)	;volatile
 11435                           
 11436                           ;mcc_generated_files/eusart.c: 190:         eusartTxBufferRemaining--;
 11437  1786  3001               	movlw	1
 11438  1787  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 11439  1788                     l4865:	
 11440                           
 11441                           ;mcc_generated_files/eusart.c: 192:     PIE1bits.TXIE = 1;
 11442  1788  0021               	movlb	1	; select bank1
 11443  1789  1611               	bsf	17,4	;volatile
 11444  178A  0008               	return
 11445  178B                     __end_of_EUSART_Write:	
 11446                           
 11447                           	psect	text71
 11448  1644                     __ptext71:	
 11449 ;; *************** function _abs *****************
 11450 ;; Defined at:
 11451 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;  a               2    4[COMMON] int 
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;		None
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  2    4[COMMON] int 
 11458 ;; Registers used:
 11459 ;;		wreg, status,2, status,0
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11465 ;;      Params:         2       0       0       0       0       0       0       0
 11466 ;;      Locals:         0       0       0       0       0       0       0       0
 11467 ;;      Temps:          2       0       0       0       0       0       0       0
 11468 ;;      Totals:         4       0       0       0       0       0       0       0
 11469 ;;Total ram usage:        4 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; Hardware stack levels required when called:    4
 11472 ;; This function calls:
 11473 ;;		Nothing
 11474 ;; This function is called by:
 11475 ;;		_Sensor_postAcquisitionProcess
 11476 ;;		_Sensor_Acq_ExecutePacket
 11477 ;;		_Sensor_autoCalibration
 11478 ;;		_dtoa
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _abs
 11484  1644                     _abs:	
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in _abs: [wreg+status,2+status,0]
 11488  1644  0875               	movf	abs@a+1,w
 11489  1645  3A80               	xorlw	128
 11490  1646  00F6               	movwf	??_abs
 11491  1647  3080               	movlw	128
 11492  1648  0276               	subwf	??_abs,w
 11493  1649  1D03               	skipz
 11494  164A  2E4D               	goto	u4995
 11495  164B  3001               	movlw	1
 11496  164C  0274               	subwf	abs@a,w
 11497  164D                     u4995:	
 11498  164D  1803               	skipnc
 11499  164E  0008               	return
 11500  164F  0974               	comf	abs@a,w
 11501  1650  00F6               	movwf	??_abs
 11502  1651  0975               	comf	abs@a+1,w
 11503  1652  00F7               	movwf	??_abs+1
 11504  1653  0AF6               	incf	??_abs,f
 11505  1654  1903               	skipnz
 11506  1655  0AF7               	incf	??_abs+1,f
 11507  1656  0876               	movf	??_abs,w
 11508  1657  00F4               	movwf	?_abs
 11509  1658  0877               	movf	??_abs+1,w
 11510  1659  00F5               	movwf	?_abs+1
 11511  165A  0008               	return
 11512  165B                     __end_of_abs:	
 11513                           
 11514                           	psect	text72
 11515  059C                     __ptext72:	
 11516 ;; *************** function ___aomod *****************
 11517 ;; Defined at:
 11518 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;  divisor         8    0[BANK0 ] long long 
 11521 ;;  dividend        8    8[BANK0 ] long long 
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;  sign            1    3[COMMON] unsigned char 
 11524 ;;  counter         1    2[COMMON] unsigned char 
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  8    0[BANK0 ] long long 
 11527 ;; Registers used:
 11528 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11534 ;;      Params:         0      16       0       0       0       0       0       0
 11535 ;;      Locals:         2       0       0       0       0       0       0       0
 11536 ;;      Temps:          1       0       0       0       0       0       0       0
 11537 ;;      Totals:         3      16       0       0       0       0       0       0
 11538 ;;Total ram usage:       19 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:    4
 11541 ;; This function calls:
 11542 ;;		Nothing
 11543 ;; This function is called by:
 11544 ;;		_dtoa
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           
 11549                           ;psect for function ___aomod
 11550  059C                     ___aomod:	
 11551                           
 11552                           ;incstack = 0
 11553                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 11554  059C  01F3               	clrf	___aomod@sign
 11555  059D  3028               	movlw	low ___aomod@dividend
 11556  059E  0086               	movwf	6
 11557  059F  3000               	movlw	high ___aomod@dividend
 11558  05A0  0087               	movwf	7
 11559  05A1  3F47               	moviw [7]fsr1
 11560  05A2  00F1               	movwf	??___aomod
 11561  05A3  1FF1               	btfss	??___aomod,7
 11562  05A4  2DC6               	goto	l4969
 11563  05A5  0020               	movlb	0	; select bank0
 11564  05A6  09A8               	comf	___aomod@dividend,f
 11565  05A7  09A9               	comf	___aomod@dividend+1,f
 11566  05A8  09AA               	comf	___aomod@dividend+2,f
 11567  05A9  09AB               	comf	___aomod@dividend+3,f
 11568  05AA  09AC               	comf	___aomod@dividend+4,f
 11569  05AB  09AD               	comf	___aomod@dividend+5,f
 11570  05AC  09AE               	comf	___aomod@dividend+6,f
 11571  05AD  09AF               	comf	___aomod@dividend+7,f
 11572  05AE  0AA8               	incf	___aomod@dividend,f
 11573  05AF  1D03               	skipz
 11574  05B0  2DC4               	goto	u516lld
 11575  05B1  0AA9               	incf	___aomod@dividend+1,f
 11576  05B2  1D03               	skipz
 11577  05B3  2DC4               	goto	u516lld
 11578  05B4  0AAA               	incf	___aomod@dividend+2,f
 11579  05B5  1D03               	skipz
 11580  05B6  2DC4               	goto	u516lld
 11581  05B7  0AAB               	incf	___aomod@dividend+3,f
 11582  05B8  1D03               	skipz
 11583  05B9  2DC4               	goto	u516lld
 11584  05BA  0AAC               	incf	___aomod@dividend+4,f
 11585  05BB  1D03               	skipz
 11586  05BC  2DC4               	goto	u516lld
 11587  05BD  0AAD               	incf	___aomod@dividend+5,f
 11588  05BE  1D03               	skipz
 11589  05BF  2DC4               	goto	u516lld
 11590  05C0  0AAE               	incf	___aomod@dividend+6,f
 11591  05C1  1D03               	skipz
 11592  05C2  2DC4               	goto	u516lld
 11593  05C3  0AAF               	incf	___aomod@dividend+7,f
 11594  05C4                     u516lld:	
 11595  05C4  01F3               	clrf	___aomod@sign
 11596  05C5  0AF3               	incf	___aomod@sign,f
 11597  05C6                     l4969:	
 11598  05C6  3020               	movlw	low ___aomod@divisor
 11599  05C7  0086               	movwf	6
 11600  05C8  3000               	movlw	high ___aomod@divisor
 11601  05C9  0087               	movwf	7
 11602  05CA  3F47               	moviw [7]fsr1
 11603  05CB  00F1               	movwf	??___aomod
 11604  05CC  1FF1               	btfss	??___aomod,7
 11605  05CD  2DED               	goto	l4973
 11606  05CE  0020               	movlb	0	; select bank0
 11607  05CF  09A0               	comf	___aomod@divisor,f
 11608  05D0  09A1               	comf	___aomod@divisor+1,f
 11609  05D1  09A2               	comf	___aomod@divisor+2,f
 11610  05D2  09A3               	comf	___aomod@divisor+3,f
 11611  05D3  09A4               	comf	___aomod@divisor+4,f
 11612  05D4  09A5               	comf	___aomod@divisor+5,f
 11613  05D5  09A6               	comf	___aomod@divisor+6,f
 11614  05D6  09A7               	comf	___aomod@divisor+7,f
 11615  05D7  0AA0               	incf	___aomod@divisor,f
 11616  05D8  1D03               	skipz
 11617  05D9  2DED               	goto	l4973
 11618  05DA  0AA1               	incf	___aomod@divisor+1,f
 11619  05DB  1D03               	skipz
 11620  05DC  2DED               	goto	l4973
 11621  05DD  0AA2               	incf	___aomod@divisor+2,f
 11622  05DE  1D03               	skipz
 11623  05DF  2DED               	goto	l4973
 11624  05E0  0AA3               	incf	___aomod@divisor+3,f
 11625  05E1  1D03               	skipz
 11626  05E2  2DED               	goto	l4973
 11627  05E3  0AA4               	incf	___aomod@divisor+4,f
 11628  05E4  1D03               	skipz
 11629  05E5  2DED               	goto	l4973
 11630  05E6  0AA5               	incf	___aomod@divisor+5,f
 11631  05E7  1D03               	skipz
 11632  05E8  2DED               	goto	l4973
 11633  05E9  0AA6               	incf	___aomod@divisor+6,f
 11634  05EA  1D03               	skipz
 11635  05EB  2DED               	goto	l4973
 11636  05EC  0AA7               	incf	___aomod@divisor+7,f
 11637  05ED                     l4973:	
 11638  05ED  0020               	movlb	0	; select bank0
 11639  05EE  0820               	movf	___aomod@divisor,w
 11640  05EF  0421               	iorwf	___aomod@divisor+1,w
 11641  05F0  0422               	iorwf	___aomod@divisor+2,w
 11642  05F1  0423               	iorwf	___aomod@divisor+3,w
 11643  05F2  0424               	iorwf	___aomod@divisor+4,w
 11644  05F3  0425               	iorwf	___aomod@divisor+5,w
 11645  05F4  0426               	iorwf	___aomod@divisor+6,w
 11646  05F5  0427               	iorwf	___aomod@divisor+7,w
 11647  05F6  1903               	skipnz
 11648  05F7  2E45               	goto	l4989
 11649  05F8  01F2               	clrf	___aomod@counter
 11650  05F9  0AF2               	incf	___aomod@counter,f
 11651  05FA                     l4981:	
 11652  05FA  1BA7               	btfsc	___aomod@divisor+7,7
 11653  05FB  2E09               	goto	l4983
 11654  05FC  35A0               	lslf	___aomod@divisor,f
 11655  05FD  0DA1               	rlf	___aomod@divisor+1,f
 11656  05FE  0DA2               	rlf	___aomod@divisor+2,f
 11657  05FF  0DA3               	rlf	___aomod@divisor+3,f
 11658  0600  0DA4               	rlf	___aomod@divisor+4,f
 11659  0601  0DA5               	rlf	___aomod@divisor+5,f
 11660  0602  0DA6               	rlf	___aomod@divisor+6,f
 11661  0603  0DA7               	rlf	___aomod@divisor+7,f
 11662  0604  3001               	movlw	1
 11663  0605  00F1               	movwf	??___aomod
 11664  0606  0871               	movf	??___aomod,w
 11665  0607  07F2               	addwf	___aomod@counter,f
 11666  0608  2DFA               	goto	l4981
 11667  0609                     l4983:	
 11668  0609  0827               	movf	___aomod@divisor+7,w
 11669  060A  022F               	subwf	___aomod@dividend+7,w
 11670  060B  1D03               	skipz
 11671  060C  2E27               	goto	u5215
 11672  060D  0826               	movf	___aomod@divisor+6,w
 11673  060E  022E               	subwf	___aomod@dividend+6,w
 11674  060F  1D03               	skipz
 11675  0610  2E27               	goto	u5215
 11676  0611  0825               	movf	___aomod@divisor+5,w
 11677  0612  022D               	subwf	___aomod@dividend+5,w
 11678  0613  1D03               	skipz
 11679  0614  2E27               	goto	u5215
 11680  0615  0824               	movf	___aomod@divisor+4,w
 11681  0616  022C               	subwf	___aomod@dividend+4,w
 11682  0617  1D03               	skipz
 11683  0618  2E27               	goto	u5215
 11684  0619  0823               	movf	___aomod@divisor+3,w
 11685  061A  022B               	subwf	___aomod@dividend+3,w
 11686  061B  1D03               	skipz
 11687  061C  2E27               	goto	u5215
 11688  061D  0822               	movf	___aomod@divisor+2,w
 11689  061E  022A               	subwf	___aomod@dividend+2,w
 11690  061F  1D03               	skipz
 11691  0620  2E27               	goto	u5215
 11692  0621  0821               	movf	___aomod@divisor+1,w
 11693  0622  0229               	subwf	___aomod@dividend+1,w
 11694  0623  1D03               	skipz
 11695  0624  2E27               	goto	u5215
 11696  0625  0820               	movf	___aomod@divisor,w
 11697  0626  0228               	subwf	___aomod@dividend,w
 11698  0627                     u5215:	
 11699  0627  1C03               	skipc
 11700  0628  2E39               	goto	l4987
 11701  0629  0820               	movf	___aomod@divisor,w
 11702  062A  02A8               	subwf	___aomod@dividend,f
 11703  062B  0821               	movf	___aomod@divisor+1,w
 11704  062C  3BA9               	subwfb	___aomod@dividend+1,f
 11705  062D  0822               	movf	___aomod@divisor+2,w
 11706  062E  3BAA               	subwfb	___aomod@dividend+2,f
 11707  062F  0823               	movf	___aomod@divisor+3,w
 11708  0630  3BAB               	subwfb	___aomod@dividend+3,f
 11709  0631  0824               	movf	___aomod@divisor+4,w
 11710  0632  3BAC               	subwfb	___aomod@dividend+4,f
 11711  0633  0825               	movf	___aomod@divisor+5,w
 11712  0634  3BAD               	subwfb	___aomod@dividend+5,f
 11713  0635  0826               	movf	___aomod@divisor+6,w
 11714  0636  3BAE               	subwfb	___aomod@dividend+6,f
 11715  0637  0827               	movf	___aomod@divisor+7,w
 11716  0638  3BAF               	subwfb	___aomod@dividend+7,f
 11717  0639                     l4987:	
 11718  0639  36A7               	lsrf	___aomod@divisor+7,f
 11719  063A  0CA6               	rrf	___aomod@divisor+6,f
 11720  063B  0CA5               	rrf	___aomod@divisor+5,f
 11721  063C  0CA4               	rrf	___aomod@divisor+4,f
 11722  063D  0CA3               	rrf	___aomod@divisor+3,f
 11723  063E  0CA2               	rrf	___aomod@divisor+2,f
 11724  063F  0CA1               	rrf	___aomod@divisor+1,f
 11725  0640  0CA0               	rrf	___aomod@divisor,f
 11726  0641  3001               	movlw	1
 11727  0642  02F2               	subwf	___aomod@counter,f
 11728  0643  1D03               	btfss	3,2
 11729  0644  2E09               	goto	l4983
 11730  0645                     l4989:	
 11731  0645  0873               	movf	___aomod@sign,w
 11732  0646  1903               	btfsc	3,2
 11733  0647  2E66               	goto	l1266
 11734  0648  09A8               	comf	___aomod@dividend,f
 11735  0649  09A9               	comf	___aomod@dividend+1,f
 11736  064A  09AA               	comf	___aomod@dividend+2,f
 11737  064B  09AB               	comf	___aomod@dividend+3,f
 11738  064C  09AC               	comf	___aomod@dividend+4,f
 11739  064D  09AD               	comf	___aomod@dividend+5,f
 11740  064E  09AE               	comf	___aomod@dividend+6,f
 11741  064F  09AF               	comf	___aomod@dividend+7,f
 11742  0650  0AA8               	incf	___aomod@dividend,f
 11743  0651  1D03               	skipz
 11744  0652  2E66               	goto	l1266
 11745  0653  0AA9               	incf	___aomod@dividend+1,f
 11746  0654  1D03               	skipz
 11747  0655  2E66               	goto	l1266
 11748  0656  0AAA               	incf	___aomod@dividend+2,f
 11749  0657  1D03               	skipz
 11750  0658  2E66               	goto	l1266
 11751  0659  0AAB               	incf	___aomod@dividend+3,f
 11752  065A  1D03               	skipz
 11753  065B  2E66               	goto	l1266
 11754  065C  0AAC               	incf	___aomod@dividend+4,f
 11755  065D  1D03               	skipz
 11756  065E  2E66               	goto	l1266
 11757  065F  0AAD               	incf	___aomod@dividend+5,f
 11758  0660  1D03               	skipz
 11759  0661  2E66               	goto	l1266
 11760  0662  0AAE               	incf	___aomod@dividend+6,f
 11761  0663  1D03               	skipz
 11762  0664  2E66               	goto	l1266
 11763  0665  0AAF               	incf	___aomod@dividend+7,f
 11764  0666                     l1266:	
 11765  0666  0020               	movlb	0	; select bank0
 11766  0667  0828               	movf	___aomod@dividend,w
 11767  0668  00A0               	movwf	?___aomod
 11768  0669  0829               	movf	___aomod@dividend+1,w
 11769  066A  00A1               	movwf	?___aomod+1
 11770  066B  082A               	movf	___aomod@dividend+2,w
 11771  066C  00A2               	movwf	?___aomod+2
 11772  066D  082B               	movf	___aomod@dividend+3,w
 11773  066E  00A3               	movwf	?___aomod+3
 11774  066F  082C               	movf	___aomod@dividend+4,w
 11775  0670  00A4               	movwf	?___aomod+4
 11776  0671  082D               	movf	___aomod@dividend+5,w
 11777  0672  00A5               	movwf	?___aomod+5
 11778  0673  082E               	movf	___aomod@dividend+6,w
 11779  0674  00A6               	movwf	?___aomod+6
 11780  0675  082F               	movf	___aomod@dividend+7,w
 11781  0676  00A7               	movwf	?___aomod+7
 11782  0677  0008               	return
 11783  0678                     __end_of___aomod:	
 11784                           
 11785                           	psect	text73
 11786  04A9                     __ptext73:	
 11787 ;; *************** function ___aodiv *****************
 11788 ;; Defined at:
 11789 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;  divisor         8    0[BANK0 ] long long 
 11792 ;;  dividend        8    8[BANK0 ] long long 
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;  quotient        8    4[COMMON] long long 
 11795 ;;  sign            1    3[COMMON] unsigned char 
 11796 ;;  counter         1    2[COMMON] unsigned char 
 11797 ;; Return value:  Size  Location     Type
 11798 ;;                  8    0[BANK0 ] long long 
 11799 ;; Registers used:
 11800 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11801 ;; Tracked objects:
 11802 ;;		On entry : 0/0
 11803 ;;		On exit  : 0/0
 11804 ;;		Unchanged: 0/0
 11805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11806 ;;      Params:         0      16       0       0       0       0       0       0
 11807 ;;      Locals:        10       0       0       0       0       0       0       0
 11808 ;;      Temps:          1       0       0       0       0       0       0       0
 11809 ;;      Totals:        11      16       0       0       0       0       0       0
 11810 ;;Total ram usage:       27 bytes
 11811 ;; Hardware stack levels used:    1
 11812 ;; Hardware stack levels required when called:    4
 11813 ;; This function calls:
 11814 ;;		Nothing
 11815 ;; This function is called by:
 11816 ;;		_dtoa
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           
 11821                           ;psect for function ___aodiv
 11822  04A9                     ___aodiv:	
 11823                           
 11824                           ;incstack = 0
 11825                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 11826  04A9  01F3               	clrf	___aodiv@sign
 11827  04AA  3020               	movlw	low ___aodiv@divisor
 11828  04AB  0086               	movwf	6
 11829  04AC  3000               	movlw	high ___aodiv@divisor
 11830  04AD  0087               	movwf	7
 11831  04AE  3F47               	moviw [7]fsr1
 11832  04AF  00F1               	movwf	??___aodiv
 11833  04B0  1FF1               	btfss	??___aodiv,7
 11834  04B1  2CD3               	goto	l4931
 11835  04B2  0020               	movlb	0	; select bank0
 11836  04B3  09A0               	comf	___aodiv@divisor,f
 11837  04B4  09A1               	comf	___aodiv@divisor+1,f
 11838  04B5  09A2               	comf	___aodiv@divisor+2,f
 11839  04B6  09A3               	comf	___aodiv@divisor+3,f
 11840  04B7  09A4               	comf	___aodiv@divisor+4,f
 11841  04B8  09A5               	comf	___aodiv@divisor+5,f
 11842  04B9  09A6               	comf	___aodiv@divisor+6,f
 11843  04BA  09A7               	comf	___aodiv@divisor+7,f
 11844  04BB  0AA0               	incf	___aodiv@divisor,f
 11845  04BC  1D03               	skipz
 11846  04BD  2CD1               	goto	u505lld
 11847  04BE  0AA1               	incf	___aodiv@divisor+1,f
 11848  04BF  1D03               	skipz
 11849  04C0  2CD1               	goto	u505lld
 11850  04C1  0AA2               	incf	___aodiv@divisor+2,f
 11851  04C2  1D03               	skipz
 11852  04C3  2CD1               	goto	u505lld
 11853  04C4  0AA3               	incf	___aodiv@divisor+3,f
 11854  04C5  1D03               	skipz
 11855  04C6  2CD1               	goto	u505lld
 11856  04C7  0AA4               	incf	___aodiv@divisor+4,f
 11857  04C8  1D03               	skipz
 11858  04C9  2CD1               	goto	u505lld
 11859  04CA  0AA5               	incf	___aodiv@divisor+5,f
 11860  04CB  1D03               	skipz
 11861  04CC  2CD1               	goto	u505lld
 11862  04CD  0AA6               	incf	___aodiv@divisor+6,f
 11863  04CE  1D03               	skipz
 11864  04CF  2CD1               	goto	u505lld
 11865  04D0  0AA7               	incf	___aodiv@divisor+7,f
 11866  04D1                     u505lld:	
 11867  04D1  01F3               	clrf	___aodiv@sign
 11868  04D2  0AF3               	incf	___aodiv@sign,f
 11869  04D3                     l4931:	
 11870  04D3  3028               	movlw	low ___aodiv@dividend
 11871  04D4  0086               	movwf	6
 11872  04D5  3000               	movlw	high ___aodiv@dividend
 11873  04D6  0087               	movwf	7
 11874  04D7  3F47               	moviw [7]fsr1
 11875  04D8  00F1               	movwf	??___aodiv
 11876  04D9  1FF1               	btfss	??___aodiv,7
 11877  04DA  2CFE               	goto	l4937
 11878  04DB  0020               	movlb	0	; select bank0
 11879  04DC  09A8               	comf	___aodiv@dividend,f
 11880  04DD  09A9               	comf	___aodiv@dividend+1,f
 11881  04DE  09AA               	comf	___aodiv@dividend+2,f
 11882  04DF  09AB               	comf	___aodiv@dividend+3,f
 11883  04E0  09AC               	comf	___aodiv@dividend+4,f
 11884  04E1  09AD               	comf	___aodiv@dividend+5,f
 11885  04E2  09AE               	comf	___aodiv@dividend+6,f
 11886  04E3  09AF               	comf	___aodiv@dividend+7,f
 11887  04E4  0AA8               	incf	___aodiv@dividend,f
 11888  04E5  1D03               	skipz
 11889  04E6  2CFA               	goto	l4935
 11890  04E7  0AA9               	incf	___aodiv@dividend+1,f
 11891  04E8  1D03               	skipz
 11892  04E9  2CFA               	goto	l4935
 11893  04EA  0AAA               	incf	___aodiv@dividend+2,f
 11894  04EB  1D03               	skipz
 11895  04EC  2CFA               	goto	l4935
 11896  04ED  0AAB               	incf	___aodiv@dividend+3,f
 11897  04EE  1D03               	skipz
 11898  04EF  2CFA               	goto	l4935
 11899  04F0  0AAC               	incf	___aodiv@dividend+4,f
 11900  04F1  1D03               	skipz
 11901  04F2  2CFA               	goto	l4935
 11902  04F3  0AAD               	incf	___aodiv@dividend+5,f
 11903  04F4  1D03               	skipz
 11904  04F5  2CFA               	goto	l4935
 11905  04F6  0AAE               	incf	___aodiv@dividend+6,f
 11906  04F7  1D03               	skipz
 11907  04F8  2CFA               	goto	l4935
 11908  04F9  0AAF               	incf	___aodiv@dividend+7,f
 11909  04FA                     l4935:	
 11910  04FA  3001               	movlw	1
 11911  04FB  00F1               	movwf	??___aodiv
 11912  04FC  0871               	movf	??___aodiv,w
 11913  04FD  06F3               	xorwf	___aodiv@sign,f
 11914  04FE                     l4937:	
 11915  04FE  3074               	movlw	low ___aodiv@quotient
 11916  04FF  0086               	movwf	6
 11917  0500  3000               	movlw	high ___aodiv@quotient
 11918  0501  0087               	movwf	7
 11919  0502  3008               	movlw	8
 11920  0503  00F1               	movwf	??___aodiv
 11921  0504  3000               	movlw	0
 11922  0505                     u5080:	
 11923  0505  001E               	movwi fsr1++
 11924  0506  0BF1               	decfsz	??___aodiv,f
 11925  0507  2D05               	goto	u5080
 11926  0508  0020               	movlb	0	; select bank0
 11927  0509  0820               	movf	___aodiv@divisor,w
 11928  050A  0421               	iorwf	___aodiv@divisor+1,w
 11929  050B  0422               	iorwf	___aodiv@divisor+2,w
 11930  050C  0423               	iorwf	___aodiv@divisor+3,w
 11931  050D  0424               	iorwf	___aodiv@divisor+4,w
 11932  050E  0425               	iorwf	___aodiv@divisor+5,w
 11933  050F  0426               	iorwf	___aodiv@divisor+6,w
 11934  0510  0427               	iorwf	___aodiv@divisor+7,w
 11935  0511  1903               	skipnz
 11936  0512  2D69               	goto	l4959
 11937  0513  01F2               	clrf	___aodiv@counter
 11938  0514  0AF2               	incf	___aodiv@counter,f
 11939  0515                     l4947:	
 11940  0515  1BA7               	btfsc	___aodiv@divisor+7,7
 11941  0516  2D24               	goto	l4949
 11942  0517  35A0               	lslf	___aodiv@divisor,f
 11943  0518  0DA1               	rlf	___aodiv@divisor+1,f
 11944  0519  0DA2               	rlf	___aodiv@divisor+2,f
 11945  051A  0DA3               	rlf	___aodiv@divisor+3,f
 11946  051B  0DA4               	rlf	___aodiv@divisor+4,f
 11947  051C  0DA5               	rlf	___aodiv@divisor+5,f
 11948  051D  0DA6               	rlf	___aodiv@divisor+6,f
 11949  051E  0DA7               	rlf	___aodiv@divisor+7,f
 11950  051F  3001               	movlw	1
 11951  0520  00F1               	movwf	??___aodiv
 11952  0521  0871               	movf	??___aodiv,w
 11953  0522  07F2               	addwf	___aodiv@counter,f
 11954  0523  2D15               	goto	l4947
 11955  0524                     l4949:	
 11956  0524  35F4               	lslf	___aodiv@quotient,f
 11957  0525  0DF5               	rlf	___aodiv@quotient+1,f
 11958  0526  0DF6               	rlf	___aodiv@quotient+2,f
 11959  0527  0DF7               	rlf	___aodiv@quotient+3,f
 11960  0528  0DF8               	rlf	___aodiv@quotient+4,f
 11961  0529  0DF9               	rlf	___aodiv@quotient+5,f
 11962  052A  0DFA               	rlf	___aodiv@quotient+6,f
 11963  052B  0DFB               	rlf	___aodiv@quotient+7,f
 11964  052C  0827               	movf	___aodiv@divisor+7,w
 11965  052D  022F               	subwf	___aodiv@dividend+7,w
 11966  052E  1D03               	skipz
 11967  052F  2D4A               	goto	u5115
 11968  0530  0826               	movf	___aodiv@divisor+6,w
 11969  0531  022E               	subwf	___aodiv@dividend+6,w
 11970  0532  1D03               	skipz
 11971  0533  2D4A               	goto	u5115
 11972  0534  0825               	movf	___aodiv@divisor+5,w
 11973  0535  022D               	subwf	___aodiv@dividend+5,w
 11974  0536  1D03               	skipz
 11975  0537  2D4A               	goto	u5115
 11976  0538  0824               	movf	___aodiv@divisor+4,w
 11977  0539  022C               	subwf	___aodiv@dividend+4,w
 11978  053A  1D03               	skipz
 11979  053B  2D4A               	goto	u5115
 11980  053C  0823               	movf	___aodiv@divisor+3,w
 11981  053D  022B               	subwf	___aodiv@dividend+3,w
 11982  053E  1D03               	skipz
 11983  053F  2D4A               	goto	u5115
 11984  0540  0822               	movf	___aodiv@divisor+2,w
 11985  0541  022A               	subwf	___aodiv@dividend+2,w
 11986  0542  1D03               	skipz
 11987  0543  2D4A               	goto	u5115
 11988  0544  0821               	movf	___aodiv@divisor+1,w
 11989  0545  0229               	subwf	___aodiv@dividend+1,w
 11990  0546  1D03               	skipz
 11991  0547  2D4A               	goto	u5115
 11992  0548  0820               	movf	___aodiv@divisor,w
 11993  0549  0228               	subwf	___aodiv@dividend,w
 11994  054A                     u5115:	
 11995  054A  1C03               	skipc
 11996  054B  2D5D               	goto	l4957
 11997  054C  0820               	movf	___aodiv@divisor,w
 11998  054D  02A8               	subwf	___aodiv@dividend,f
 11999  054E  0821               	movf	___aodiv@divisor+1,w
 12000  054F  3BA9               	subwfb	___aodiv@dividend+1,f
 12001  0550  0822               	movf	___aodiv@divisor+2,w
 12002  0551  3BAA               	subwfb	___aodiv@dividend+2,f
 12003  0552  0823               	movf	___aodiv@divisor+3,w
 12004  0553  3BAB               	subwfb	___aodiv@dividend+3,f
 12005  0554  0824               	movf	___aodiv@divisor+4,w
 12006  0555  3BAC               	subwfb	___aodiv@dividend+4,f
 12007  0556  0825               	movf	___aodiv@divisor+5,w
 12008  0557  3BAD               	subwfb	___aodiv@dividend+5,f
 12009  0558  0826               	movf	___aodiv@divisor+6,w
 12010  0559  3BAE               	subwfb	___aodiv@dividend+6,f
 12011  055A  0827               	movf	___aodiv@divisor+7,w
 12012  055B  3BAF               	subwfb	___aodiv@dividend+7,f
 12013  055C  1474               	bsf	___aodiv@quotient,0
 12014  055D                     l4957:	
 12015  055D  36A7               	lsrf	___aodiv@divisor+7,f
 12016  055E  0CA6               	rrf	___aodiv@divisor+6,f
 12017  055F  0CA5               	rrf	___aodiv@divisor+5,f
 12018  0560  0CA4               	rrf	___aodiv@divisor+4,f
 12019  0561  0CA3               	rrf	___aodiv@divisor+3,f
 12020  0562  0CA2               	rrf	___aodiv@divisor+2,f
 12021  0563  0CA1               	rrf	___aodiv@divisor+1,f
 12022  0564  0CA0               	rrf	___aodiv@divisor,f
 12023  0565  3001               	movlw	1
 12024  0566  02F2               	subwf	___aodiv@counter,f
 12025  0567  1D03               	btfss	3,2
 12026  0568  2D24               	goto	l4949
 12027  0569                     l4959:	
 12028  0569  0873               	movf	___aodiv@sign,w
 12029  056A  1903               	btfsc	3,2
 12030  056B  2D8A               	goto	l1253
 12031  056C  09F4               	comf	___aodiv@quotient,f
 12032  056D  09F5               	comf	___aodiv@quotient+1,f
 12033  056E  09F6               	comf	___aodiv@quotient+2,f
 12034  056F  09F7               	comf	___aodiv@quotient+3,f
 12035  0570  09F8               	comf	___aodiv@quotient+4,f
 12036  0571  09F9               	comf	___aodiv@quotient+5,f
 12037  0572  09FA               	comf	___aodiv@quotient+6,f
 12038  0573  09FB               	comf	___aodiv@quotient+7,f
 12039  0574  0AF4               	incf	___aodiv@quotient,f
 12040  0575  1D03               	skipz
 12041  0576  2D8A               	goto	l1253
 12042  0577  0AF5               	incf	___aodiv@quotient+1,f
 12043  0578  1D03               	skipz
 12044  0579  2D8A               	goto	l1253
 12045  057A  0AF6               	incf	___aodiv@quotient+2,f
 12046  057B  1D03               	skipz
 12047  057C  2D8A               	goto	l1253
 12048  057D  0AF7               	incf	___aodiv@quotient+3,f
 12049  057E  1D03               	skipz
 12050  057F  2D8A               	goto	l1253
 12051  0580  0AF8               	incf	___aodiv@quotient+4,f
 12052  0581  1D03               	skipz
 12053  0582  2D8A               	goto	l1253
 12054  0583  0AF9               	incf	___aodiv@quotient+5,f
 12055  0584  1D03               	skipz
 12056  0585  2D8A               	goto	l1253
 12057  0586  0AFA               	incf	___aodiv@quotient+6,f
 12058  0587  1D03               	skipz
 12059  0588  2D8A               	goto	l1253
 12060  0589  0AFB               	incf	___aodiv@quotient+7,f
 12061  058A                     l1253:	
 12062  058A  0874               	movf	___aodiv@quotient,w
 12063  058B  0020               	movlb	0	; select bank0
 12064  058C  00A0               	movwf	?___aodiv
 12065  058D  0875               	movf	___aodiv@quotient+1,w
 12066  058E  00A1               	movwf	?___aodiv+1
 12067  058F  0876               	movf	___aodiv@quotient+2,w
 12068  0590  00A2               	movwf	?___aodiv+2
 12069  0591  0877               	movf	___aodiv@quotient+3,w
 12070  0592  00A3               	movwf	?___aodiv+3
 12071  0593  0878               	movf	___aodiv@quotient+4,w
 12072  0594  00A4               	movwf	?___aodiv+4
 12073  0595  0879               	movf	___aodiv@quotient+5,w
 12074  0596  00A5               	movwf	?___aodiv+5
 12075  0597  087A               	movf	___aodiv@quotient+6,w
 12076  0598  00A6               	movwf	?___aodiv+6
 12077  0599  087B               	movf	___aodiv@quotient+7,w
 12078  059A  00A7               	movwf	?___aodiv+7
 12079  059B  0008               	return
 12080  059C                     __end_of___aodiv:	
 12081                           
 12082                           	psect	text74
 12083  1749                     __ptext74:	
 12084 ;; *************** function _MTOUCH_Button_Buttonmask_Get *****************
 12085 ;; Defined at:
 12086 ;;		line 421 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12087 ;; Parameters:    Size  Location     Type
 12088 ;;		None
 12089 ;; Auto vars:     Size  Location     Type
 12090 ;;  i               1    6[COMMON] unsigned char 
 12091 ;;  output          1    5[COMMON] unsigned char 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  1    wreg      unsigned char 
 12094 ;; Registers used:
 12095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12101 ;;      Params:         0       0       0       0       0       0       0       0
 12102 ;;      Locals:         2       0       0       0       0       0       0       0
 12103 ;;      Temps:          2       0       0       0       0       0       0       0
 12104 ;;      Totals:         4       0       0       0       0       0       0       0
 12105 ;;Total ram usage:        4 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; Hardware stack levels required when called:    5
 12108 ;; This function calls:
 12109 ;;		_MTOUCH_Button_isPressed
 12110 ;; This function is called by:
 12111 ;;		_main
 12112 ;;		_myButtonPressedCallback
 12113 ;; This function uses a non-reentrant model
 12114 ;;
 12115                           
 12116                           
 12117                           ;psect for function _MTOUCH_Button_Buttonmask_Get
 12118  1749                     _MTOUCH_Button_Buttonmask_Get:	
 12119                           
 12120                           ;mcc_generated_files/mtouch/mtouch_button.c: 423:     mtouch_buttonmask_t output = 0;
 12121                           
 12122                           ;incstack = 0
 12123                           ; Regs used in _MTOUCH_Button_Buttonmask_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12124  1749  01F5               	clrf	MTOUCH_Button_Buttonmask_Get@output
 12125                           
 12126                           ;mcc_generated_files/mtouch/mtouch_button.c: 425:     for (uint8_t i = 0; i < 3u; i++)
 12127  174A  01F6               	clrf	MTOUCH_Button_Buttonmask_Get@i
 12128  174B                     l3927:	
 12129                           
 12130                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 427:         if (MTOUCH_Button_isPressed(i) == 1)
 12131  174B  0876               	movf	MTOUCH_Button_Buttonmask_Get@i,w
 12132  174C  3196  26BD  3197   	fcall	_MTOUCH_Button_isPressed
 12133  174F  3A01               	xorlw	1
 12134  1750  1D03               	skipz
 12135  1751  2F5D               	goto	l596
 12136                           
 12137                           ;mcc_generated_files/mtouch/mtouch_button.c: 428:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 429:             output |= (mtouch_buttonmask_t)0x01 << i;
 12138  1752  3001               	movlw	1
 12139  1753  00F3               	movwf	??_MTOUCH_Button_Buttonmask_Get
 12140  1754  0A76               	incf	MTOUCH_Button_Buttonmask_Get@i,w
 12141  1755  2F57               	goto	u3624
 12142  1756                     u3625:	
 12143  1756  35F3               	lslf	??_MTOUCH_Button_Buttonmask_Get,f
 12144  1757                     u3624:	
 12145  1757  0B89               	decfsz	9,f
 12146  1758  2F56               	goto	u3625
 12147  1759  0873               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 12148  175A  00F4               	movwf	??_MTOUCH_Button_Buttonmask_Get+1
 12149  175B  0874               	movf	??_MTOUCH_Button_Buttonmask_Get+1,w
 12150  175C  04F5               	iorwf	MTOUCH_Button_Buttonmask_Get@output,f
 12151  175D                     l596:	
 12152                           ;mcc_generated_files/mtouch/mtouch_button.c: 430:         }
 12153                           
 12154                           
 12155                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     }
 12156  175D  3001               	movlw	1
 12157  175E  00F3               	movwf	??_MTOUCH_Button_Buttonmask_Get
 12158  175F  0873               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 12159  1760  07F6               	addwf	MTOUCH_Button_Buttonmask_Get@i,f
 12160  1761  3003               	movlw	3
 12161  1762  0276               	subwf	MTOUCH_Button_Buttonmask_Get@i,w
 12162  1763  1C03               	skipc
 12163  1764  2F4B               	goto	l3927
 12164                           
 12165                           ;mcc_generated_files/mtouch/mtouch_button.c: 432:     return output;
 12166  1765  0875               	movf	MTOUCH_Button_Buttonmask_Get@output,w
 12167  1766  0008               	return
 12168  1767                     __end_of_MTOUCH_Button_Buttonmask_Get:	
 12169                           
 12170                           	psect	text75
 12171  16BD                     __ptext75:	
 12172 ;; *************** function _MTOUCH_Button_isPressed *****************
 12173 ;; Defined at:
 12174 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12175 ;; Parameters:    Size  Location     Type
 12176 ;;  name            1    wreg     enum E3069
 12177 ;; Auto vars:     Size  Location     Type
 12178 ;;  name            1    2[COMMON] enum E3069
 12179 ;; Return value:  Size  Location     Type
 12180 ;;                  1    wreg      _Bool 
 12181 ;; Registers used:
 12182 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12183 ;; Tracked objects:
 12184 ;;		On entry : 0/0
 12185 ;;		On exit  : 0/0
 12186 ;;		Unchanged: 0/0
 12187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12188 ;;      Params:         0       0       0       0       0       0       0       0
 12189 ;;      Locals:         1       0       0       0       0       0       0       0
 12190 ;;      Temps:          1       0       0       0       0       0       0       0
 12191 ;;      Totals:         2       0       0       0       0       0       0       0
 12192 ;;Total ram usage:        2 bytes
 12193 ;; Hardware stack levels used:    1
 12194 ;; Hardware stack levels required when called:    4
 12195 ;; This function calls:
 12196 ;;		Nothing
 12197 ;; This function is called by:
 12198 ;;		_MTOUCH_Button_Buttonmask_Get
 12199 ;;		_touch_example
 12200 ;; This function uses a non-reentrant model
 12201 ;;
 12202                           
 12203                           
 12204                           ;psect for function _MTOUCH_Button_isPressed
 12205  16BD                     _MTOUCH_Button_isPressed:	
 12206                           
 12207                           ;incstack = 0
 12208                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 12209                           ;MTOUCH_Button_isPressed@name stored from wreg
 12210  16BD  00F2               	movwf	MTOUCH_Button_isPressed@name
 12211                           
 12212                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 12213  16BE  3003               	movlw	3
 12214  16BF  0272               	subwf	MTOUCH_Button_isPressed@name,w
 12215  16C0  1803               	skipnc
 12216  16C1  2ED6               	goto	l3575
 12217                           
 12218                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 12219  16C2  0872               	movf	MTOUCH_Button_isPressed@name,w
 12220  16C3  00F1               	movwf	??_MTOUCH_Button_isPressed
 12221  16C4  3003               	movlw	3
 12222  16C5                     u3055:	
 12223  16C5  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 12224  16C6  3EFF               	addlw	-1
 12225  16C7  1D03               	skipz
 12226  16C8  2EC5               	goto	u3055
 12227  16C9  3571               	lslf	??_MTOUCH_Button_isPressed,w
 12228  16CA  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 12229  16CB  0086               	movwf	6
 12230  16CC  3001               	movlw	1	; select bank3/4
 12231  16CD  0087               	movwf	7
 12232  16CE  3002               	movlw	2
 12233  16CF  0601               	xorwf	1,w
 12234  16D0  1D03               	btfss	3,2
 12235  16D1  2ED4               	goto	u3060
 12236  16D2  3001               	movlw	1
 12237  16D3  0008               	return
 12238  16D4                     u3060:	
 12239  16D4  3000               	movlw	0
 12240  16D5  0008               	return
 12241  16D6                     l3575:	
 12242                           
 12243                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 12244  16D6  3000               	movlw	0
 12245  16D7  0008               	return
 12246  16D8                     __end_of_MTOUCH_Button_isPressed:	
 12247                           
 12248                           	psect	text76
 12249  0924                     __ptext76:	
 12250 ;; *************** function _MTOUCH_Button_Initialize *****************
 12251 ;; Defined at:
 12252 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12253 ;; Parameters:    Size  Location     Type
 12254 ;;  name            1    wreg     enum E3069
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;  name            1    9[COMMON] enum E3069
 12257 ;;  button          1   10[COMMON] PTR struct .
 12258 ;;		 -> mtouch_button(48), 
 12259 ;; Return value:  Size  Location     Type
 12260 ;;                  1    wreg      void 
 12261 ;; Registers used:
 12262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12268 ;;      Params:         0       0       0       0       0       0       0       0
 12269 ;;      Locals:         2       0       0       0       0       0       0       0
 12270 ;;      Temps:          2       0       0       0       0       0       0       0
 12271 ;;      Totals:         4       0       0       0       0       0       0       0
 12272 ;;Total ram usage:        4 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    6
 12275 ;; This function calls:
 12276 ;;		_MTOUCH_Sensor_Calibrate
 12277 ;; This function is called by:
 12278 ;;		_MTOUCH_Button_InitializeAll
 12279 ;;		_Button_Service
 12280 ;;		_Button_State_NotPressed
 12281 ;;		_Button_State_Pressed
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285                           
 12286                           ;psect for function _MTOUCH_Button_Initialize
 12287  0924                     _MTOUCH_Button_Initialize:	
 12288                           
 12289                           ;incstack = 0
 12290                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12291                           ;MTOUCH_Button_Initialize@name stored from wreg
 12292  0924  00F9               	movwf	MTOUCH_Button_Initialize@name
 12293                           
 12294                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 12295  0925  0879               	movf	MTOUCH_Button_Initialize@name,w
 12296  0926  00F7               	movwf	??_MTOUCH_Button_Initialize
 12297  0927  3003               	movlw	3
 12298  0928                     u6035:	
 12299  0928  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 12300  0929  3EFF               	addlw	-1
 12301  092A  1D03               	skipz
 12302  092B  2928               	goto	u6035
 12303  092C  3577               	lslf	??_MTOUCH_Button_Initialize,w
 12304  092D  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12305  092E  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 12306  092F  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 12307  0930  00FA               	movwf	MTOUCH_Button_Initialize@button
 12308                           
 12309                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 12310  0931  087A               	movf	MTOUCH_Button_Initialize@button,w
 12311  0932  3E02               	addlw	2
 12312  0933  0086               	movwf	6
 12313  0934  3001               	movlw	1	; select bank2/3
 12314  0935  0087               	movwf	7
 12315  0936  0181               	clrf	1
 12316                           
 12317                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 12318  0937  087A               	movf	MTOUCH_Button_Initialize@button,w
 12319  0938  3E05               	addlw	5
 12320  0939  0086               	movwf	6
 12321  093A  3001               	movlw	1	; select bank2/3
 12322  093B  0087               	movwf	7
 12323  093C  3000               	movlw	0
 12324  093D  3FC0               	movwi [0]fsr1
 12325  093E  3000               	movlw	0
 12326  093F  3FC1               	movwi [1]fsr1
 12327  0940  3FC2               	movwi [2]fsr1
 12328  0941  3FC3               	movwi [3]fsr1
 12329                           
 12330                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 12331  0942  087A               	movf	MTOUCH_Button_Initialize@button,w
 12332  0943  3E0A               	addlw	10
 12333  0944  0086               	movwf	6
 12334  0945  3001               	movlw	1	; select bank2/3
 12335  0946  0087               	movwf	7
 12336  0947  3000               	movlw	0
 12337  0948  3FC0               	movwi [0]fsr1
 12338  0949  3FC1               	movwi [1]fsr1
 12339                           
 12340                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 12341  094A  087A               	movf	MTOUCH_Button_Initialize@button,w
 12342  094B  3E0C               	addlw	12
 12343  094C  0086               	movwf	6
 12344  094D  3001               	movlw	1	; select bank2/3
 12345  094E  0087               	movwf	7
 12346  094F  3000               	movlw	0
 12347  0950  3FC0               	movwi [0]fsr1
 12348  0951  3FC1               	movwi [1]fsr1
 12349                           
 12350                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 12351  0952  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 12352  0953  0086               	movwf	6
 12353  0954  3001               	movlw	1	; select bank2/3
 12354  0955  0087               	movwf	7
 12355  0956  0801               	movf	1,w
 12356  0957  3195  258E         	fcall	_MTOUCH_Sensor_Calibrate
 12357  0959  0008               	return
 12358  095A                     __end_of_MTOUCH_Button_Initialize:	
 12359                           
 12360                           	psect	text77
 12361  158E                     __ptext77:	
 12362 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 12363 ;; Defined at:
 12364 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;  sensor          1    wreg     enum E2864
 12367 ;; Auto vars:     Size  Location     Type
 12368 ;;  sensor          1    6[COMMON] enum E2864
 12369 ;; Return value:  Size  Location     Type
 12370 ;;                  1    wreg      void 
 12371 ;; Registers used:
 12372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12373 ;; Tracked objects:
 12374 ;;		On entry : 0/0
 12375 ;;		On exit  : 0/0
 12376 ;;		Unchanged: 0/0
 12377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12378 ;;      Params:         0       0       0       0       0       0       0       0
 12379 ;;      Locals:         1       0       0       0       0       0       0       0
 12380 ;;      Temps:          1       0       0       0       0       0       0       0
 12381 ;;      Totals:         2       0       0       0       0       0       0       0
 12382 ;;Total ram usage:        2 bytes
 12383 ;; Hardware stack levels used:    1
 12384 ;; Hardware stack levels required when called:    5
 12385 ;; This function calls:
 12386 ;;		___bmul
 12387 ;; This function is called by:
 12388 ;;		_MTOUCH_Sensor_Initialize
 12389 ;;		_MTOUCH_Button_Initialize
 12390 ;; This function uses a non-reentrant model
 12391 ;;
 12392                           
 12393                           
 12394                           ;psect for function _MTOUCH_Sensor_Calibrate
 12395  158E                     _MTOUCH_Sensor_Calibrate:	
 12396                           
 12397                           ;incstack = 0
 12398                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12399                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 12400  158E  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 12401                           
 12402                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 12403  158F  3003               	movlw	3
 12404  1590  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 12405  1591  1803               	skipnc
 12406  1592  0008               	return
 12407                           
 12408                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 12409  1593  3009               	movlw	9
 12410  1594  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 12411  1595  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 12412  1596  00F1               	movwf	___bmul@multiplicand
 12413  1597  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 12414  1598  3195  256C         	fcall	___bmul
 12415  159A  3E28               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12416  159B  0086               	movwf	6
 12417  159C  3001               	movlw	1	; select bank2/3
 12418  159D  0087               	movwf	7
 12419  159E  1101               	bcf	1,2
 12420  159F  0008               	return
 12421  15A0                     __end_of_MTOUCH_Sensor_Calibrate:	
 12422                           
 12423                           	psect	text78
 12424  0CEC                     __ptext78:	
 12425 ;; *************** function _Button_Baseline_Update *****************
 12426 ;; Defined at:
 12427 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;  button          1    wreg     PTR struct .
 12430 ;;		 -> mtouch_button(48), 
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;  button          1    7[COMMON] PTR struct .
 12433 ;;		 -> mtouch_button(48), 
 12434 ;; Return value:  Size  Location     Type
 12435 ;;                  1    wreg      void 
 12436 ;; Registers used:
 12437 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12438 ;; Tracked objects:
 12439 ;;		On entry : 0/0
 12440 ;;		On exit  : 0/0
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12443 ;;      Params:         0       0       0       0       0       0       0       0
 12444 ;;      Locals:         1       0       0       0       0       0       0       0
 12445 ;;      Temps:          6       0       0       0       0       0       0       0
 12446 ;;      Totals:         7       0       0       0       0       0       0       0
 12447 ;;Total ram usage:        7 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    4
 12450 ;; This function calls:
 12451 ;;		Nothing
 12452 ;; This function is called by:
 12453 ;;		_Button_State_Initializing
 12454 ;;		_Button_State_NotPressed
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           
 12459                           ;psect for function _Button_Baseline_Update
 12460  0CEC                     _Button_Baseline_Update:	
 12461                           
 12462                           ;incstack = 0
 12463                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12464                           ;Button_Baseline_Update@button stored from wreg
 12465  0CEC  00F7               	movwf	Button_Baseline_Update@button
 12466                           
 12467                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 12468  0CED  1F8B               	btfss	11,7	;volatile
 12469  0CEE  2D36               	goto	l4031
 12470                           
 12471                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 12472  0CEF  138B               	bcf	11,7	;volatile
 12473                           
 12474                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 12475  0CF0  0877               	movf	Button_Baseline_Update@button,w
 12476  0CF1  3E05               	addlw	5
 12477  0CF2  0086               	movwf	6
 12478  0CF3  3001               	movlw	1	; select bank2/3
 12479  0CF4  0087               	movwf	7
 12480  0CF5  3F40               	moviw [0]fsr1
 12481  0CF6  00F1               	movwf	??_Button_Baseline_Update
 12482  0CF7  3F41               	moviw [1]fsr1
 12483  0CF8  00F2               	movwf	??_Button_Baseline_Update+1
 12484  0CF9  3F42               	moviw [2]fsr1
 12485  0CFA  00F3               	movwf	??_Button_Baseline_Update+2
 12486  0CFB  3F43               	moviw [3]fsr1
 12487  0CFC  00F4               	movwf	??_Button_Baseline_Update+3
 12488  0CFD  3004               	movlw	4
 12489  0CFE                     u3755:	
 12490  0CFE  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12491  0CFF  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12492  0D00  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12493  0D01  0CF1               	rrf	??_Button_Baseline_Update,f
 12494  0D02  0B89               	decfsz	9,f
 12495  0D03  2CFE               	goto	u3755
 12496  0D04  0877               	movf	Button_Baseline_Update@button,w
 12497  0D05  3E05               	addlw	5
 12498  0D06  0086               	movwf	6
 12499  0D07  3001               	movlw	1	; select bank2/3
 12500  0D08  0087               	movwf	7
 12501  0D09  0871               	movf	??_Button_Baseline_Update,w
 12502  0D0A  0281               	subwf	1,f
 12503  0D0B  3141               	addfsr 1,1
 12504  0D0C  0872               	movf	??_Button_Baseline_Update+1,w
 12505  0D0D  3B81               	subwfb	1,f
 12506  0D0E  3141               	addfsr 1,1
 12507  0D0F  0873               	movf	??_Button_Baseline_Update+2,w
 12508  0D10  3B81               	subwfb	1,f
 12509  0D11  3141               	addfsr 1,1
 12510  0D12  0874               	movf	??_Button_Baseline_Update+3,w
 12511  0D13  3B81               	subwfb	1,f
 12512  0D14  317D               	addfsr 1,-3
 12513                           
 12514                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 12515  0D15  0877               	movf	Button_Baseline_Update@button,w
 12516  0D16  3E03               	addlw	3
 12517  0D17  0086               	movwf	6
 12518  0D18  3001               	movlw	1	; select bank2/3
 12519  0D19  0087               	movwf	7
 12520  0D1A  3F40               	moviw [0]fsr1
 12521  0D1B  00F1               	movwf	??_Button_Baseline_Update
 12522  0D1C  3F41               	moviw [1]fsr1
 12523  0D1D  00F2               	movwf	??_Button_Baseline_Update+1
 12524  0D1E  0871               	movf	??_Button_Baseline_Update,w
 12525  0D1F  00F3               	movwf	??_Button_Baseline_Update+2
 12526  0D20  0872               	movf	??_Button_Baseline_Update+1,w
 12527  0D21  00F4               	movwf	??_Button_Baseline_Update+3
 12528  0D22  01F5               	clrf	??_Button_Baseline_Update+4
 12529  0D23  01F6               	clrf	??_Button_Baseline_Update+5
 12530  0D24  0877               	movf	Button_Baseline_Update@button,w
 12531  0D25  3E05               	addlw	5
 12532  0D26  0086               	movwf	6
 12533  0D27  3001               	movlw	1	; select bank2/3
 12534  0D28  0087               	movwf	7
 12535  0D29  0873               	movf	??_Button_Baseline_Update+2,w
 12536  0D2A  0781               	addwf	1,f
 12537  0D2B  3141               	addfsr 1,1
 12538  0D2C  0874               	movf	??_Button_Baseline_Update+3,w
 12539  0D2D  3D81               	addwfc	1,f
 12540  0D2E  3141               	addfsr 1,1
 12541  0D2F  0875               	movf	??_Button_Baseline_Update+4,w
 12542  0D30  3D81               	addwfc	1,f
 12543  0D31  3141               	addfsr 1,1
 12544  0D32  0876               	movf	??_Button_Baseline_Update+5,w
 12545  0D33  3D81               	addwfc	1,f
 12546                           
 12547                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 12548  0D34  178B               	bsf	11,7	;volatile
 12549                           
 12550                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 12551  0D35  0008               	return
 12552  0D36                     l4031:	
 12553                           
 12554                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12555  0D36  0877               	movf	Button_Baseline_Update@button,w
 12556  0D37  3E05               	addlw	5
 12557  0D38  0086               	movwf	6
 12558  0D39  3001               	movlw	1	; select bank2/3
 12559  0D3A  0087               	movwf	7
 12560  0D3B  3F40               	moviw [0]fsr1
 12561  0D3C  00F1               	movwf	??_Button_Baseline_Update
 12562  0D3D  3F41               	moviw [1]fsr1
 12563  0D3E  00F2               	movwf	??_Button_Baseline_Update+1
 12564  0D3F  3F42               	moviw [2]fsr1
 12565  0D40  00F3               	movwf	??_Button_Baseline_Update+2
 12566  0D41  3F43               	moviw [3]fsr1
 12567  0D42  00F4               	movwf	??_Button_Baseline_Update+3
 12568  0D43  3004               	movlw	4
 12569  0D44                     u3765:	
 12570  0D44  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12571  0D45  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12572  0D46  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12573  0D47  0CF1               	rrf	??_Button_Baseline_Update,f
 12574  0D48  0B89               	decfsz	9,f
 12575  0D49  2D44               	goto	u3765
 12576  0D4A  0877               	movf	Button_Baseline_Update@button,w
 12577  0D4B  3E05               	addlw	5
 12578  0D4C  0086               	movwf	6
 12579  0D4D  3001               	movlw	1	; select bank2/3
 12580  0D4E  0087               	movwf	7
 12581  0D4F  0871               	movf	??_Button_Baseline_Update,w
 12582  0D50  0281               	subwf	1,f
 12583  0D51  3141               	addfsr 1,1
 12584  0D52  0872               	movf	??_Button_Baseline_Update+1,w
 12585  0D53  3B81               	subwfb	1,f
 12586  0D54  3141               	addfsr 1,1
 12587  0D55  0873               	movf	??_Button_Baseline_Update+2,w
 12588  0D56  3B81               	subwfb	1,f
 12589  0D57  3141               	addfsr 1,1
 12590  0D58  0874               	movf	??_Button_Baseline_Update+3,w
 12591  0D59  3B81               	subwfb	1,f
 12592  0D5A  317D               	addfsr 1,-3
 12593                           
 12594                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 12595  0D5B  0877               	movf	Button_Baseline_Update@button,w
 12596  0D5C  3E03               	addlw	3
 12597  0D5D  0086               	movwf	6
 12598  0D5E  3001               	movlw	1	; select bank2/3
 12599  0D5F  0087               	movwf	7
 12600  0D60  3F40               	moviw [0]fsr1
 12601  0D61  00F1               	movwf	??_Button_Baseline_Update
 12602  0D62  3F41               	moviw [1]fsr1
 12603  0D63  00F2               	movwf	??_Button_Baseline_Update+1
 12604  0D64  0871               	movf	??_Button_Baseline_Update,w
 12605  0D65  00F3               	movwf	??_Button_Baseline_Update+2
 12606  0D66  0872               	movf	??_Button_Baseline_Update+1,w
 12607  0D67  00F4               	movwf	??_Button_Baseline_Update+3
 12608  0D68  01F5               	clrf	??_Button_Baseline_Update+4
 12609  0D69  01F6               	clrf	??_Button_Baseline_Update+5
 12610  0D6A  0877               	movf	Button_Baseline_Update@button,w
 12611  0D6B  3E05               	addlw	5
 12612  0D6C  0086               	movwf	6
 12613  0D6D  3001               	movlw	1	; select bank2/3
 12614  0D6E  0087               	movwf	7
 12615  0D6F  0873               	movf	??_Button_Baseline_Update+2,w
 12616  0D70  0781               	addwf	1,f
 12617  0D71  3141               	addfsr 1,1
 12618  0D72  0874               	movf	??_Button_Baseline_Update+3,w
 12619  0D73  3D81               	addwfc	1,f
 12620  0D74  3141               	addfsr 1,1
 12621  0D75  0875               	movf	??_Button_Baseline_Update+4,w
 12622  0D76  3D81               	addwfc	1,f
 12623  0D77  3141               	addfsr 1,1
 12624  0D78  0876               	movf	??_Button_Baseline_Update+5,w
 12625  0D79  3D81               	addwfc	1,f
 12626  0D7A  0008               	return
 12627  0D7B                     __end_of_Button_Baseline_Update:	
 12628                           
 12629                           	psect	text79
 12630  0860                     __ptext79:	
 12631 ;; *************** function _Button_Baseline_Initialize *****************
 12632 ;; Defined at:
 12633 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12634 ;; Parameters:    Size  Location     Type
 12635 ;;  button          1    wreg     PTR struct .
 12636 ;;		 -> mtouch_button(48), 
 12637 ;; Auto vars:     Size  Location     Type
 12638 ;;  button          1    9[COMMON] PTR struct .
 12639 ;;		 -> mtouch_button(48), 
 12640 ;; Return value:  Size  Location     Type
 12641 ;;                  1    wreg      void 
 12642 ;; Registers used:
 12643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12644 ;; Tracked objects:
 12645 ;;		On entry : 0/0
 12646 ;;		On exit  : 0/0
 12647 ;;		Unchanged: 0/0
 12648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12649 ;;      Params:         0       0       0       0       0       0       0       0
 12650 ;;      Locals:         1       0       0       0       0       0       0       0
 12651 ;;      Temps:          0       4       0       0       0       0       0       0
 12652 ;;      Totals:         1       4       0       0       0       0       0       0
 12653 ;;Total ram usage:        5 bytes
 12654 ;; Hardware stack levels used:    1
 12655 ;; Hardware stack levels required when called:    6
 12656 ;; This function calls:
 12657 ;;		_MTOUCH_Sensor_RawSample_Get
 12658 ;; This function is called by:
 12659 ;;		_Button_State_Initializing
 12660 ;; This function uses a non-reentrant model
 12661 ;;
 12662                           
 12663                           
 12664                           ;psect for function _Button_Baseline_Initialize
 12665  0860                     _Button_Baseline_Initialize:	
 12666                           
 12667                           ;incstack = 0
 12668                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12669                           ;Button_Baseline_Initialize@button stored from wreg
 12670  0860  00F9               	movwf	Button_Baseline_Initialize@button
 12671                           
 12672                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12673  0861  0A79               	incf	Button_Baseline_Initialize@button,w
 12674  0862  0086               	movwf	6
 12675  0863  3001               	movlw	1	; select bank2/3
 12676  0864  0087               	movwf	7
 12677  0865  0801               	movf	1,w
 12678  0866  3196  2673  3188   	fcall	_MTOUCH_Sensor_RawSample_Get
 12679  0869  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12680  086A  0020               	movlb	0	; select bank0
 12681  086B  00A0               	movwf	??_Button_Baseline_Initialize
 12682  086C  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12683  086D  00A1               	movwf	??_Button_Baseline_Initialize+1
 12684  086E  01A2               	clrf	??_Button_Baseline_Initialize+2
 12685  086F  01A3               	clrf	??_Button_Baseline_Initialize+3
 12686  0870  0879               	movf	Button_Baseline_Initialize@button,w
 12687  0871  3E05               	addlw	5
 12688  0872  0086               	movwf	6
 12689  0873  3001               	movlw	1	; select bank2/3
 12690  0874  0087               	movwf	7
 12691  0875  0820               	movf	??_Button_Baseline_Initialize,w
 12692  0876  3FC0               	movwi [0]fsr1
 12693  0877  0821               	movf	??_Button_Baseline_Initialize+1,w
 12694  0878  3FC1               	movwi [1]fsr1
 12695  0879  0822               	movf	??_Button_Baseline_Initialize+2,w
 12696  087A  3FC2               	movwi [2]fsr1
 12697  087B  0823               	movf	??_Button_Baseline_Initialize+3,w
 12698  087C  3FC3               	movwi [3]fsr1
 12699                           
 12700                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12701  087D  0879               	movf	Button_Baseline_Initialize@button,w
 12702  087E  3E05               	addlw	5
 12703  087F  0086               	movwf	6
 12704  0880  3001               	movlw	1	; select bank2/3
 12705  0881  0087               	movwf	7
 12706  0882  3004               	movlw	4
 12707  0883                     u6045:	
 12708  0883  3581               	lslf	1,f
 12709  0884  3141               	addfsr 1,1
 12710  0885  0D81               	rlf	1,f
 12711  0886  3141               	addfsr 1,1
 12712  0887  0D81               	rlf	1,f
 12713  0888  3141               	addfsr 1,1
 12714  0889  0D81               	rlf	1,f
 12715  088A  317D               	addfsr 1,-3
 12716  088B  0B89               	decfsz	9,f
 12717  088C  2883               	goto	u6045
 12718  088D  0008               	return
 12719  088E                     __end_of_Button_Baseline_Initialize:	
 12720                           
 12721                           	psect	text80
 12722  14F6                     __ptext80:	
 12723 ;; *************** function _Button_Reading_Update *****************
 12724 ;; Defined at:
 12725 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12726 ;; Parameters:    Size  Location     Type
 12727 ;;  button          1    wreg     PTR struct .
 12728 ;;		 -> mtouch_button(48), 
 12729 ;; Auto vars:     Size  Location     Type
 12730 ;;  button          1    0[BANK0 ] PTR struct .
 12731 ;;		 -> mtouch_button(48), 
 12732 ;; Return value:  Size  Location     Type
 12733 ;;                  1    wreg      void 
 12734 ;; Registers used:
 12735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12741 ;;      Params:         0       0       0       0       0       0       0       0
 12742 ;;      Locals:         0       1       0       0       0       0       0       0
 12743 ;;      Temps:          0       0       0       0       0       0       0       0
 12744 ;;      Totals:         0       1       0       0       0       0       0       0
 12745 ;;Total ram usage:        1 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:    7
 12748 ;; This function calls:
 12749 ;;		_Button_Reading_Update_Helper
 12750 ;; This function is called by:
 12751 ;;		_Button_Service
 12752 ;; This function uses a non-reentrant model
 12753 ;;
 12754                           
 12755                           
 12756                           ;psect for function _Button_Reading_Update
 12757  14F6                     _Button_Reading_Update:	
 12758                           
 12759                           ;incstack = 0
 12760                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12761                           ;Button_Reading_Update@button stored from wreg
 12762  14F6  0020               	movlb	0	; select bank0
 12763  14F7  00A0               	movwf	Button_Reading_Update@button
 12764                           
 12765                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 12766  14F8  1F8B               	btfss	11,7	;volatile
 12767  14F9  2D00               	goto	l5631
 12768                           
 12769                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 12770  14FA  138B               	bcf	11,7	;volatile
 12771                           
 12772                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 12773  14FB  0820               	movf	Button_Reading_Update@button,w
 12774  14FC  3189  21D5         	fcall	_Button_Reading_Update_Helper
 12775                           
 12776                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 12777  14FE  178B               	bsf	11,7	;volatile
 12778                           
 12779                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 12780  14FF  0008               	return
 12781  1500                     l5631:	
 12782                           
 12783                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 12784  1500  0820               	movf	Button_Reading_Update@button,w
 12785  1501  3189  21D5         	fcall	_Button_Reading_Update_Helper
 12786  1503  0008               	return
 12787  1504                     __end_of_Button_Reading_Update:	
 12788                           
 12789                           	psect	text81
 12790  09D5                     __ptext81:	
 12791 ;; *************** function _Button_Reading_Update_Helper *****************
 12792 ;; Defined at:
 12793 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12794 ;; Parameters:    Size  Location     Type
 12795 ;;  button          1    wreg     PTR struct .
 12796 ;;		 -> mtouch_button(48), 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  button          1   11[COMMON] PTR struct .
 12799 ;;		 -> mtouch_button(48), 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;                  1    wreg      void 
 12802 ;; Registers used:
 12803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12809 ;;      Params:         0       0       0       0       0       0       0       0
 12810 ;;      Locals:         1       0       0       0       0       0       0       0
 12811 ;;      Temps:          2       0       0       0       0       0       0       0
 12812 ;;      Totals:         3       0       0       0       0       0       0       0
 12813 ;;Total ram usage:        3 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    6
 12816 ;; This function calls:
 12817 ;;		_MTOUCH_Sensor_RawSample_Get
 12818 ;; This function is called by:
 12819 ;;		_Button_Reading_Update
 12820 ;; This function uses a non-reentrant model
 12821 ;;
 12822                           
 12823                           
 12824                           ;psect for function _Button_Reading_Update_Helper
 12825  09D5                     _Button_Reading_Update_Helper:	
 12826                           
 12827                           ;incstack = 0
 12828                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12829                           ;Button_Reading_Update_Helper@button stored from wreg
 12830  09D5  00FB               	movwf	Button_Reading_Update_Helper@button
 12831                           
 12832                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12833  09D6  087B               	movf	Button_Reading_Update_Helper@button,w
 12834  09D7  3E02               	addlw	2
 12835  09D8  0086               	movwf	6
 12836  09D9  3001               	movlw	1	; select bank2/3
 12837  09DA  0087               	movwf	7
 12838  09DB  0801               	movf	1,w
 12839  09DC  1903               	btfsc	3,2
 12840  09DD  2A11               	goto	l5495
 12841                           
 12842                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 12843  09DE  087B               	movf	Button_Reading_Update_Helper@button,w
 12844  09DF  3E03               	addlw	3
 12845  09E0  0086               	movwf	6
 12846  09E1  3001               	movlw	1	; select bank2/3
 12847  09E2  0087               	movwf	7
 12848  09E3  3F40               	moviw [0]fsr1
 12849  09E4  00F9               	movwf	??_Button_Reading_Update_Helper
 12850  09E5  3F41               	moviw [1]fsr1
 12851  09E6  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12852  09E7  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12853  09E8  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12854  09E9  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12855  09EA  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12856  09EB  087B               	movf	Button_Reading_Update_Helper@button,w
 12857  09EC  3E03               	addlw	3
 12858  09ED  0086               	movwf	6
 12859  09EE  3001               	movlw	1	; select bank2/3
 12860  09EF  0087               	movwf	7
 12861  09F0  0879               	movf	??_Button_Reading_Update_Helper,w
 12862  09F1  0281               	subwf	1,f
 12863  09F2  3141               	addfsr 1,1
 12864  09F3  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12865  09F4  3B81               	subwfb	1,f
 12866  09F5  317F               	addfsr 1,-1
 12867                           
 12868                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12869  09F6  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12870  09F7  0086               	movwf	6
 12871  09F8  3001               	movlw	1	; select bank2/3
 12872  09F9  0087               	movwf	7
 12873  09FA  0801               	movf	1,w
 12874  09FB  3196  2673         	fcall	_MTOUCH_Sensor_RawSample_Get
 12875  09FD  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12876  09FE  00F9               	movwf	??_Button_Reading_Update_Helper
 12877  09FF  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12878  0A00  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12879  0A01  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12880  0A02  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12881  0A03  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12882  0A04  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12883  0A05  087B               	movf	Button_Reading_Update_Helper@button,w
 12884  0A06  3E03               	addlw	3
 12885  0A07  0086               	movwf	6
 12886  0A08  3001               	movlw	1	; select bank2/3
 12887  0A09  0087               	movwf	7
 12888  0A0A  0879               	movf	??_Button_Reading_Update_Helper,w
 12889  0A0B  0781               	addwf	1,f
 12890  0A0C  3141               	addfsr 1,1
 12891  0A0D  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12892  0A0E  3D81               	addwfc	1,f
 12893  0A0F  317F               	addfsr 1,-1
 12894                           
 12895                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 12896  0A10  0008               	return
 12897  0A11                     l5495:	
 12898                           
 12899                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12900  0A11  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12901  0A12  0086               	movwf	6
 12902  0A13  3001               	movlw	1	; select bank2/3
 12903  0A14  0087               	movwf	7
 12904  0A15  0801               	movf	1,w
 12905  0A16  3196  2673         	fcall	_MTOUCH_Sensor_RawSample_Get
 12906  0A18  087B               	movf	Button_Reading_Update_Helper@button,w
 12907  0A19  3E03               	addlw	3
 12908  0A1A  0086               	movwf	6
 12909  0A1B  3001               	movlw	1	; select bank2/3
 12910  0A1C  0087               	movwf	7
 12911  0A1D  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12912  0A1E  3FC0               	movwi [0]fsr1
 12913  0A1F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12914  0A20  3FC1               	movwi [1]fsr1
 12915  0A21  0008               	return
 12916  0A22                     __end_of_Button_Reading_Update_Helper:	
 12917                           
 12918                           	psect	text82
 12919  1673                     __ptext82:	
 12920 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12921 ;; Defined at:
 12922 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12923 ;; Parameters:    Size  Location     Type
 12924 ;;  name            1    wreg     enum E2864
 12925 ;; Auto vars:     Size  Location     Type
 12926 ;;  name            1    8[COMMON] enum E2864
 12927 ;; Return value:  Size  Location     Type
 12928 ;;                  2    5[COMMON] unsigned short 
 12929 ;; Registers used:
 12930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12931 ;; Tracked objects:
 12932 ;;		On entry : 0/0
 12933 ;;		On exit  : 0/0
 12934 ;;		Unchanged: 0/0
 12935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12936 ;;      Params:         2       0       0       0       0       0       0       0
 12937 ;;      Locals:         1       0       0       0       0       0       0       0
 12938 ;;      Temps:          1       0       0       0       0       0       0       0
 12939 ;;      Totals:         4       0       0       0       0       0       0       0
 12940 ;;Total ram usage:        4 bytes
 12941 ;; Hardware stack levels used:    1
 12942 ;; Hardware stack levels required when called:    5
 12943 ;; This function calls:
 12944 ;;		___bmul
 12945 ;; This function is called by:
 12946 ;;		_Button_Reading_Update_Helper
 12947 ;;		_Button_Baseline_Initialize
 12948 ;; This function uses a non-reentrant model
 12949 ;;
 12950                           
 12951                           
 12952                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12953  1673                     _MTOUCH_Sensor_RawSample_Get:	
 12954                           
 12955                           ;incstack = 0
 12956                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12957                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12958  1673  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12959                           
 12960                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 12961  1674  3003               	movlw	3
 12962  1675  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 12963  1676  1803               	skipnc
 12964  1677  2E88               	goto	l5401
 12965                           
 12966                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 12967  1678  3009               	movlw	9
 12968  1679  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12969  167A  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12970  167B  00F1               	movwf	___bmul@multiplicand
 12971  167C  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12972  167D  3195  256C         	fcall	___bmul
 12973  167F  3E26               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12974  1680  0086               	movwf	6
 12975  1681  3001               	movlw	1	; select bank2/3
 12976  1682  0087               	movwf	7
 12977  1683  3F40               	moviw [0]fsr1
 12978  1684  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12979  1685  3F41               	moviw [1]fsr1
 12980  1686  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12981  1687  0008               	return
 12982  1688                     l5401:	
 12983                           
 12984                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 12985  1688  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 12986  1689  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 12987  168A  0008               	return
 12988  168B                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12989                           
 12990                           	psect	text83
 12991  156C                     __ptext83:	
 12992 ;; *************** function ___bmul *****************
 12993 ;; Defined at:
 12994 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12995 ;; Parameters:    Size  Location     Type
 12996 ;;  multiplier      1    wreg     unsigned char 
 12997 ;;  multiplicand    1    1[COMMON] unsigned char 
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  multiplier      1    4[COMMON] unsigned char 
 13000 ;;  product         1    3[COMMON] unsigned char 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  1    wreg      unsigned char 
 13003 ;; Registers used:
 13004 ;;		wreg, status,2, status,0
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13010 ;;      Params:         1       0       0       0       0       0       0       0
 13011 ;;      Locals:         2       0       0       0       0       0       0       0
 13012 ;;      Temps:          1       0       0       0       0       0       0       0
 13013 ;;      Totals:         4       0       0       0       0       0       0       0
 13014 ;;Total ram usage:        4 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    4
 13017 ;; This function calls:
 13018 ;;		Nothing
 13019 ;; This function is called by:
 13020 ;;		_MTOUCH_Sensor_Initialize
 13021 ;;		_MTOUCH_Sensor_RawSample_Get
 13022 ;;		_MTOUCH_Sensor_Enable
 13023 ;;		_MTOUCH_Sensor_Calibrate
 13024 ;;		_MTOUCH_Sensor_isCalibrated
 13025 ;;		_MTOUCH_Sensor_wasSampled
 13026 ;;		_MTOUCH_Sensor_isAnySensorActive
 13027 ;;		_MTOUCH_Sensor_Disable
 13028 ;;		_MTOUCH_Sensor_isEnabled
 13029 ;;		_MTOUCH_Sensor_isActive
 13030 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 13031 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 13032 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 13033 ;;		_MTOUCH_Sensor_Oversampling_Get
 13034 ;;		_MTOUCH_Sensor_Oversampling_Set
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038                           
 13039                           ;psect for function ___bmul
 13040  156C                     ___bmul:	
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 13044                           ;___bmul@multiplier stored from wreg
 13045  156C  00F4               	movwf	___bmul@multiplier
 13046  156D  01F3               	clrf	___bmul@product
 13047  156E                     l5171:	
 13048  156E  1C74               	btfss	___bmul@multiplier,0
 13049  156F  2D74               	goto	l5175
 13050  1570  0871               	movf	___bmul@multiplicand,w
 13051  1571  00F2               	movwf	??___bmul
 13052  1572  0872               	movf	??___bmul,w
 13053  1573  07F3               	addwf	___bmul@product,f
 13054  1574                     l5175:	
 13055  1574  1003               	clrc
 13056  1575  0DF1               	rlf	___bmul@multiplicand,f
 13057  1576  1003               	clrc
 13058  1577  0CF4               	rrf	___bmul@multiplier,f
 13059  1578  0874               	movf	___bmul@multiplier,w
 13060  1579  1D03               	btfss	3,2
 13061  157A  2D6E               	goto	l5171
 13062  157B  0873               	movf	___bmul@product,w
 13063  157C  0008               	return
 13064  157D                     __end_of___bmul:	
 13065                           
 13066                           	psect	text84
 13067  0C65                     __ptext84:	
 13068 ;; *************** function _Button_Deviation_Update *****************
 13069 ;; Defined at:
 13070 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13071 ;; Parameters:    Size  Location     Type
 13072 ;;  button          1    wreg     PTR struct .
 13073 ;;		 -> mtouch_button(48), 
 13074 ;; Auto vars:     Size  Location     Type
 13075 ;;  button          1    0[BANK0 ] PTR struct .
 13076 ;;		 -> mtouch_button(48), 
 13077 ;;  deviation       4    1[BANK0 ] long 
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      void 
 13080 ;; Registers used:
 13081 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13087 ;;      Params:         0       0       0       0       0       0       0       0
 13088 ;;      Locals:         0       5       0       0       0       0       0       0
 13089 ;;      Temps:         10       0       0       0       0       0       0       0
 13090 ;;      Totals:        10       5       0       0       0       0       0       0
 13091 ;;Total ram usage:       15 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    4
 13094 ;; This function calls:
 13095 ;;		Nothing
 13096 ;; This function is called by:
 13097 ;;		_Button_Service
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           
 13102                           ;psect for function _Button_Deviation_Update
 13103  0C65                     _Button_Deviation_Update:	
 13104                           
 13105                           ;incstack = 0
 13106                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13107                           ;Button_Deviation_Update@button stored from wreg
 13108  0C65  0020               	movlb	0	; select bank0
 13109  0C66  00A0               	movwf	Button_Deviation_Update@button
 13110                           
 13111                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 13112  0C67  0820               	movf	Button_Deviation_Update@button,w
 13113  0C68  3E05               	addlw	5
 13114  0C69  0086               	movwf	6
 13115  0C6A  3001               	movlw	1	; select bank2/3
 13116  0C6B  0087               	movwf	7
 13117  0C6C  3F40               	moviw [0]fsr1
 13118  0C6D  00F1               	movwf	??_Button_Deviation_Update
 13119  0C6E  3F41               	moviw [1]fsr1
 13120  0C6F  00F2               	movwf	??_Button_Deviation_Update+1
 13121  0C70  3F42               	moviw [2]fsr1
 13122  0C71  00F3               	movwf	??_Button_Deviation_Update+2
 13123  0C72  3F43               	moviw [3]fsr1
 13124  0C73  00F4               	movwf	??_Button_Deviation_Update+3
 13125  0C74  3004               	movlw	4
 13126  0C75                     u4005:	
 13127  0C75  36F4               	lsrf	??_Button_Deviation_Update+3,f
 13128  0C76  0CF3               	rrf	??_Button_Deviation_Update+2,f
 13129  0C77  0CF2               	rrf	??_Button_Deviation_Update+1,f
 13130  0C78  0CF1               	rrf	??_Button_Deviation_Update,f
 13131  0C79  0B89               	decfsz	9,f
 13132  0C7A  2C75               	goto	u4005
 13133  0C7B  0820               	movf	Button_Deviation_Update@button,w
 13134  0C7C  3E03               	addlw	3
 13135  0C7D  0086               	movwf	6
 13136  0C7E  3001               	movlw	1	; select bank2/3
 13137  0C7F  0087               	movwf	7
 13138  0C80  3F40               	moviw [0]fsr1
 13139  0C81  00F5               	movwf	??_Button_Deviation_Update+4
 13140  0C82  3F41               	moviw [1]fsr1
 13141  0C83  00F6               	movwf	??_Button_Deviation_Update+5
 13142  0C84  0875               	movf	??_Button_Deviation_Update+4,w
 13143  0C85  00F7               	movwf	??_Button_Deviation_Update+6
 13144  0C86  0876               	movf	??_Button_Deviation_Update+5,w
 13145  0C87  00F8               	movwf	??_Button_Deviation_Update+7
 13146  0C88  01F9               	clrf	??_Button_Deviation_Update+8
 13147  0C89  01FA               	clrf	??_Button_Deviation_Update+9
 13148  0C8A  0871               	movf	??_Button_Deviation_Update,w
 13149  0C8B  02F7               	subwf	??_Button_Deviation_Update+6,f
 13150  0C8C  0872               	movf	??_Button_Deviation_Update+1,w
 13151  0C8D  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 13152  0C8E  0873               	movf	??_Button_Deviation_Update+2,w
 13153  0C8F  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 13154  0C90  0874               	movf	??_Button_Deviation_Update+3,w
 13155  0C91  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 13156  0C92  087A               	movf	??_Button_Deviation_Update+9,w
 13157  0C93  00A4               	movwf	Button_Deviation_Update@deviation+3
 13158  0C94  0879               	movf	??_Button_Deviation_Update+8,w
 13159  0C95  00A3               	movwf	Button_Deviation_Update@deviation+2
 13160  0C96  0878               	movf	??_Button_Deviation_Update+7,w
 13161  0C97  00A2               	movwf	Button_Deviation_Update@deviation+1
 13162  0C98  0877               	movf	??_Button_Deviation_Update+6,w
 13163  0C99  00A1               	movwf	Button_Deviation_Update@deviation
 13164                           
 13165                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 13166  0C9A  0821               	movf	Button_Deviation_Update@deviation,w
 13167  0C9B  00F1               	movwf	??_Button_Deviation_Update
 13168  0C9C  0822               	movf	Button_Deviation_Update@deviation+1,w
 13169  0C9D  00F2               	movwf	??_Button_Deviation_Update+1
 13170  0C9E  0823               	movf	Button_Deviation_Update@deviation+2,w
 13171  0C9F  00F3               	movwf	??_Button_Deviation_Update+2
 13172  0CA0  0824               	movf	Button_Deviation_Update@deviation+3,w
 13173  0CA1  00F4               	movwf	??_Button_Deviation_Update+3
 13174  0CA2  0820               	movf	Button_Deviation_Update@button,w
 13175  0CA3  3E0F               	addlw	15
 13176  0CA4  0086               	movwf	6
 13177  0CA5  3001               	movlw	1	; select bank2/3
 13178  0CA6  0087               	movwf	7
 13179  0CA7  0A01               	incf	1,w
 13180  0CA8  2CAD               	goto	u4010
 13181  0CA9                     u4015:	
 13182  0CA9  37F4               	asrf	??_Button_Deviation_Update+3,f
 13183  0CAA  0CF3               	rrf	??_Button_Deviation_Update+2,f
 13184  0CAB  0CF2               	rrf	??_Button_Deviation_Update+1,f
 13185  0CAC  0CF1               	rrf	??_Button_Deviation_Update,f
 13186  0CAD                     u4010:	
 13187  0CAD  0B89               	decfsz	9,f
 13188  0CAE  2CA9               	goto	u4015
 13189  0CAF  0874               	movf	??_Button_Deviation_Update+3,w
 13190  0CB0  00A4               	movwf	Button_Deviation_Update@deviation+3
 13191  0CB1  0873               	movf	??_Button_Deviation_Update+2,w
 13192  0CB2  00A3               	movwf	Button_Deviation_Update@deviation+2
 13193  0CB3  0872               	movf	??_Button_Deviation_Update+1,w
 13194  0CB4  00A2               	movwf	Button_Deviation_Update@deviation+1
 13195  0CB5  0871               	movf	??_Button_Deviation_Update,w
 13196  0CB6  00A1               	movwf	Button_Deviation_Update@deviation
 13197                           
 13198                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 13199  0CB7  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 13200  0CB8  2CCE               	goto	l4187
 13201  0CB9  0824               	movf	Button_Deviation_Update@deviation+3,w
 13202  0CBA  1D03               	btfss	3,2
 13203  0CBB  2CC6               	goto	l4185
 13204  0CBC  0823               	movf	Button_Deviation_Update@deviation+2,w
 13205  0CBD  1D03               	btfss	3,2
 13206  0CBE  2CC6               	goto	l4185
 13207  0CBF  0822               	movf	Button_Deviation_Update@deviation+1,w
 13208  0CC0  1D03               	btfss	3,2
 13209  0CC1  2CC6               	goto	l4185
 13210  0CC2  3080               	movlw	128
 13211  0CC3  0221               	subwf	Button_Deviation_Update@deviation,w
 13212  0CC4  1C03               	btfss	3,0
 13213  0CC5  2CCE               	goto	l4187
 13214  0CC6                     l4185:	
 13215                           
 13216                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 13217  0CC6  3000               	movlw	0
 13218  0CC7  00A4               	movwf	Button_Deviation_Update@deviation+3
 13219  0CC8  3000               	movlw	0
 13220  0CC9  00A3               	movwf	Button_Deviation_Update@deviation+2
 13221  0CCA  3000               	movlw	0
 13222  0CCB  00A2               	movwf	Button_Deviation_Update@deviation+1
 13223  0CCC  307F               	movlw	127
 13224  0CCD  00A1               	movwf	Button_Deviation_Update@deviation
 13225  0CCE                     l4187:	
 13226                           
 13227                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 13228  0CCE  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 13229  0CCF  2CE2               	goto	l4191
 13230  0CD0  3080               	movlw	128
 13231  0CD1  0221               	subwf	Button_Deviation_Update@deviation,w
 13232  0CD2  30FF               	movlw	255
 13233  0CD3  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 13234  0CD4  30FF               	movlw	255
 13235  0CD5  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 13236  0CD6  30FF               	movlw	255
 13237  0CD7  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 13238  0CD8  1803               	btfsc	3,0
 13239  0CD9  2CE2               	goto	l4191
 13240                           
 13241                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 13242  0CDA  30FF               	movlw	255
 13243  0CDB  00A4               	movwf	Button_Deviation_Update@deviation+3
 13244  0CDC  30FF               	movlw	255
 13245  0CDD  00A3               	movwf	Button_Deviation_Update@deviation+2
 13246  0CDE  30FF               	movlw	255
 13247  0CDF  00A2               	movwf	Button_Deviation_Update@deviation+1
 13248  0CE0  3080               	movlw	128
 13249  0CE1  00A1               	movwf	Button_Deviation_Update@deviation
 13250  0CE2                     l4191:	
 13251                           
 13252                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 13253  0CE2  0821               	movf	Button_Deviation_Update@deviation,w
 13254  0CE3  00F1               	movwf	??_Button_Deviation_Update
 13255  0CE4  0820               	movf	Button_Deviation_Update@button,w
 13256  0CE5  3E09               	addlw	9
 13257  0CE6  0086               	movwf	6
 13258  0CE7  3001               	movlw	1	; select bank2/3
 13259  0CE8  0087               	movwf	7
 13260  0CE9  0871               	movf	??_Button_Deviation_Update,w
 13261  0CEA  0081               	movwf	1
 13262  0CEB  0008               	return
 13263  0CEC                     __end_of_Button_Deviation_Update:	
 13264                           
 13265                           	psect	text85
 13266  1458                     __ptext85:	
 13267 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 13268 ;; Defined at:
 13269 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13270 ;; Parameters:    Size  Location     Type
 13271 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 13272 ;;		 -> myButtonPressedCallback(1), 
 13273 ;; Auto vars:     Size  Location     Type
 13274 ;;		None
 13275 ;; Return value:  Size  Location     Type
 13276 ;;                  1    wreg      void 
 13277 ;; Registers used:
 13278 ;;		wreg
 13279 ;; Tracked objects:
 13280 ;;		On entry : 0/0
 13281 ;;		On exit  : 0/0
 13282 ;;		Unchanged: 0/0
 13283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13284 ;;      Params:         2       0       0       0       0       0       0       0
 13285 ;;      Locals:         0       0       0       0       0       0       0       0
 13286 ;;      Temps:          0       0       0       0       0       0       0       0
 13287 ;;      Totals:         2       0       0       0       0       0       0       0
 13288 ;;Total ram usage:        2 bytes
 13289 ;; Hardware stack levels used:    1
 13290 ;; Hardware stack levels required when called:    4
 13291 ;; This function calls:
 13292 ;;		Nothing
 13293 ;; This function is called by:
 13294 ;;		_main
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           
 13299                           ;psect for function _MTOUCH_Button_SetPressedCallback
 13300  1458                     _MTOUCH_Button_SetPressedCallback:	
 13301                           
 13302                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 13303                           
 13304                           ;incstack = 0
 13305                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 13306  1458  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 13307  1459  0021               	movlb	1	; select bank1
 13308  145A  00E5               	movwf	(_callback_pressed+1)^(0+128)
 13309  145B  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 13310  145C  00E4               	movwf	_callback_pressed^(0+128)
 13311  145D  0008               	return
 13312  145E                     __end_of_MTOUCH_Button_SetPressedCallback:	
 13313                           
 13314                           	psect	text86
 13315  1452                     __ptext86:	
 13316 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 13317 ;; Defined at:
 13318 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 13321 ;;		 -> myButtonReleasedCallback(1), 
 13322 ;; Auto vars:     Size  Location     Type
 13323 ;;		None
 13324 ;; Return value:  Size  Location     Type
 13325 ;;                  1    wreg      void 
 13326 ;; Registers used:
 13327 ;;		wreg
 13328 ;; Tracked objects:
 13329 ;;		On entry : 0/0
 13330 ;;		On exit  : 0/0
 13331 ;;		Unchanged: 0/0
 13332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13333 ;;      Params:         2       0       0       0       0       0       0       0
 13334 ;;      Locals:         0       0       0       0       0       0       0       0
 13335 ;;      Temps:          0       0       0       0       0       0       0       0
 13336 ;;      Totals:         2       0       0       0       0       0       0       0
 13337 ;;Total ram usage:        2 bytes
 13338 ;; Hardware stack levels used:    1
 13339 ;; Hardware stack levels required when called:    4
 13340 ;; This function calls:
 13341 ;;		Nothing
 13342 ;; This function is called by:
 13343 ;;		_main
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           
 13348                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 13349  1452                     _MTOUCH_Button_SetNotPressedCallback:	
 13350                           
 13351                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 13352                           
 13353                           ;incstack = 0
 13354                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 13355  1452  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 13356  1453  0021               	movlb	1	; select bank1
 13357  1454  00E3               	movwf	(_callback_notPressed+1)^(0+128)
 13358  1455  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 13359  1456  00E2               	movwf	_callback_notPressed^(0+128)
 13360  1457  0008               	return
 13361  1458                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 13362                           
 13363                           	psect	intentry
 13364  0004                     __pintentry:	
 13365 ;; *************** function _INTERRUPT_InterruptManager *****************
 13366 ;; Defined at:
 13367 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;		None
 13370 ;; Auto vars:     Size  Location     Type
 13371 ;;		None
 13372 ;; Return value:  Size  Location     Type
 13373 ;;                  1    wreg      void 
 13374 ;; Registers used:
 13375 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13376 ;; Tracked objects:
 13377 ;;		On entry : 0/0
 13378 ;;		On exit  : 0/0
 13379 ;;		Unchanged: 0/0
 13380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13381 ;;      Params:         0       0       0       0       0       0       0       0
 13382 ;;      Locals:         0       0       0       0       0       0       0       0
 13383 ;;      Temps:          0       0       0       0       0       0       0       0
 13384 ;;      Totals:         0       0       0       0       0       0       0       0
 13385 ;;Total ram usage:        0 bytes
 13386 ;; Hardware stack levels used:    1
 13387 ;; Hardware stack levels required when called:    3
 13388 ;; This function calls:
 13389 ;;		Absolute function
 13390 ;;		_EUSART_Receive_ISR
 13391 ;;		_EUSART_Transmit_ISR
 13392 ;;		_INT_ISR
 13393 ;; This function is called by:
 13394 ;;		Interrupt level 1
 13395 ;; This function uses a non-reentrant model
 13396 ;;
 13397                           
 13398  0004                     _INTERRUPT_InterruptManager:	
 13399                           
 13400                           ;incstack = 0
 13401 ;; hardware stack exceeded
 13402  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13403                           
 13404                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13405  0005  3180               	pagesel	$
 13406                           
 13407                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.INTE == 1 && INTCONbits.
      +                          INTF == 1)
 13408  0006  1A0B               	btfsc	11,4	;volatile
 13409  0007  1C8B               	btfss	11,1	;volatile
 13410  0008  280D               	goto	i1l865
 13411                           
 13412                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         INT_ISR();
 13413  0009  3194  2444  3180   	fcall	_INT_ISR
 13414                           
 13415                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13416  000C  2828               	goto	i1l873
 13417  000D                     i1l865:	
 13418                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13419                           
 13420  000D  1F0B               	btfss	11,6	;volatile
 13421  000E  2828               	goto	i1l873
 13422                           
 13423                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 13424  000F  0021               	movlb	1	; select bank1
 13425  0010  1E11               	btfss	17,4	;volatile
 13426  0011  281C               	goto	i1l868
 13427  0012  0020               	movlb	0	; select bank0
 13428  0013  1E11               	btfss	17,4	;volatile
 13429  0014  281C               	goto	i1l868
 13430                           
 13431                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 13432  0015  0021               	movlb	1	; select bank1
 13433  0016  086E               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 13434  0017  008A               	movwf	10
 13435  0018  086D               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 13436  0019  000A               	callw
 13437  001A  3180               	pagesel	$
 13438                           
 13439                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13440  001B  2828               	goto	i1l873
 13441  001C                     i1l868:	
 13442                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 13443                           
 13444  001C  0021               	movlb	1	; select bank1
 13445  001D  1E91               	btfss	17,5	;volatile
 13446  001E  2828               	goto	i1l873
 13447  001F  0020               	movlb	0	; select bank0
 13448  0020  1E91               	btfss	17,5	;volatile
 13449  0021  2828               	goto	i1l873
 13450                           
 13451                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 13452  0022  0021               	movlb	1	; select bank1
 13453  0023  086C               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 13454  0024  008A               	movwf	10
 13455  0025  086B               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 13456  0026  000A               	callw
 13457  0027  3180               	pagesel	$
 13458  0028                     i1l873:	
 13459                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 13460                           
 13461                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13462                           
 13463  0028  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13464  0029  0009               	retfie
 13465  002A                     __end_of_INTERRUPT_InterruptManager:	
 13466                           
 13467                           	psect	text88
 13468  1444                     __ptext88:	
 13469 ;; *************** function _INT_ISR *****************
 13470 ;; Defined at:
 13471 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;		None
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;		None
 13476 ;; Return value:  Size  Location     Type
 13477 ;;                  1    wreg      void 
 13478 ;; Registers used:
 13479 ;;		wreg, status,2, status,0, pclath, cstack
 13480 ;; Tracked objects:
 13481 ;;		On entry : 0/0
 13482 ;;		On exit  : 0/0
 13483 ;;		Unchanged: 0/0
 13484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13485 ;;      Params:         0       0       0       0       0       0       0       0
 13486 ;;      Locals:         0       0       0       0       0       0       0       0
 13487 ;;      Temps:          0       0       0       0       0       0       0       0
 13488 ;;      Totals:         0       0       0       0       0       0       0       0
 13489 ;;Total ram usage:        0 bytes
 13490 ;; Hardware stack levels used:    1
 13491 ;; Hardware stack levels required when called:    2
 13492 ;; This function calls:
 13493 ;;		_INT_CallBack
 13494 ;; This function is called by:
 13495 ;;		_INTERRUPT_InterruptManager
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           
 13500                           ;psect for function _INT_ISR
 13501  1444                     _INT_ISR:	
 13502                           
 13503                           ;mcc_generated_files/ext_int.c: 34:     (INTCONbits.INTF = 0);
 13504                           
 13505                           ;incstack = 0
 13506 ;; hardware stack exceeded
 13507                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 13508  1444  108B               	bcf	11,1	;volatile
 13509                           
 13510                           ;mcc_generated_files/ext_int.c: 37:     INT_CallBack();
 13511  1445  3194  24C7         	fcall	_INT_CallBack
 13512  1447  0008               	return
 13513  1448                     __end_of_INT_ISR:	
 13514                           
 13515                           	psect	text89
 13516  14C7                     __ptext89:	
 13517 ;; *************** function _INT_CallBack *****************
 13518 ;; Defined at:
 13519 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;		None
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  1    wreg      void 
 13526 ;; Registers used:
 13527 ;;		wreg, status,2, status,0, pclath, cstack
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13533 ;;      Params:         0       0       0       0       0       0       0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0
 13535 ;;      Temps:          0       0       0       0       0       0       0       0
 13536 ;;      Totals:         0       0       0       0       0       0       0       0
 13537 ;;Total ram usage:        0 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:    1
 13540 ;; This function calls:
 13541 ;;		Absolute function
 13542 ;;		_INT_DefaultInterruptHandler
 13543 ;; This function is called by:
 13544 ;;		_INT_ISR
 13545 ;; This function uses a non-reentrant model
 13546 ;;
 13547                           
 13548                           
 13549                           ;psect for function _INT_CallBack
 13550  14C7                     _INT_CallBack:	
 13551                           
 13552                           ;mcc_generated_files/ext_int.c: 44:     if(INT_InterruptHandler)
 13553                           
 13554                           ;incstack = 0
 13555 ;; hardware stack exceeded
 13556                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13557  14C7  0021               	movlb	1	; select bank1
 13558  14C8  0869               	movf	_INT_InterruptHandler^(0+128),w
 13559  14C9  046A               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 13560  14CA  1903               	btfsc	3,2
 13561  14CB  0008               	return
 13562                           
 13563                           ;mcc_generated_files/ext_int.c: 45:     {;mcc_generated_files/ext_int.c: 46:         INT
      +                          _InterruptHandler();
 13564  14CC  086A               	movf	(_INT_InterruptHandler+1)^(0+128),w
 13565  14CD  008A               	movwf	10
 13566  14CE  0869               	movf	_INT_InterruptHandler^(0+128),w
 13567  14CF  000A               	callw
 13568  14D0  3194               	pagesel	$
 13569  14D1  0008               	return
 13570  14D2                     __end_of_INT_CallBack:	
 13571                           
 13572                           	psect	text90
 13573  142E                     __ptext90:	
 13574 ;; *************** function _INT_DefaultInterruptHandler *****************
 13575 ;; Defined at:
 13576 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;		None
 13579 ;; Auto vars:     Size  Location     Type
 13580 ;;		None
 13581 ;; Return value:  Size  Location     Type
 13582 ;;                  1    wreg      void 
 13583 ;; Registers used:
 13584 ;;		None
 13585 ;; Tracked objects:
 13586 ;;		On entry : 0/0
 13587 ;;		On exit  : 0/0
 13588 ;;		Unchanged: 0/0
 13589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13590 ;;      Params:         0       0       0       0       0       0       0       0
 13591 ;;      Locals:         0       0       0       0       0       0       0       0
 13592 ;;      Temps:          0       0       0       0       0       0       0       0
 13593 ;;      Totals:         0       0       0       0       0       0       0       0
 13594 ;;Total ram usage:        0 bytes
 13595 ;; Hardware stack levels used:    1
 13596 ;; This function calls:
 13597 ;;		Nothing
 13598 ;; This function is called by:
 13599 ;;		_EXT_INT_Initialize
 13600 ;;		_INT_CallBack
 13601 ;; This function uses a non-reentrant model
 13602 ;;
 13603                           
 13604                           
 13605                           ;psect for function _INT_DefaultInterruptHandler
 13606  142E                     _INT_DefaultInterruptHandler:	
 13607                           
 13608                           ;incstack = 0
 13609 ;; hardware stack exceeded
 13610                           ; Regs used in _INT_DefaultInterruptHandler: []
 13611  142E  0008               	return
 13612  142F                     __end_of_INT_DefaultInterruptHandler:	
 13613                           
 13614                           	psect	text91
 13615  170F                     __ptext91:	
 13616 ;; *************** function _EUSART_Transmit_ISR *****************
 13617 ;; Defined at:
 13618 ;;		line 205 in file "mcc_generated_files/eusart.c"
 13619 ;; Parameters:    Size  Location     Type
 13620 ;;		None
 13621 ;; Auto vars:     Size  Location     Type
 13622 ;;		None
 13623 ;; Return value:  Size  Location     Type
 13624 ;;                  1    wreg      void 
 13625 ;; Registers used:
 13626 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13627 ;; Tracked objects:
 13628 ;;		On entry : 0/0
 13629 ;;		On exit  : 0/0
 13630 ;;		Unchanged: 0/0
 13631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13632 ;;      Params:         0       0       0       0       0       0       0       0
 13633 ;;      Locals:         0       0       0       0       0       0       0       0
 13634 ;;      Temps:          1       0       0       0       0       0       0       0
 13635 ;;      Totals:         1       0       0       0       0       0       0       0
 13636 ;;Total ram usage:        1 bytes
 13637 ;; Hardware stack levels used:    1
 13638 ;; This function calls:
 13639 ;;		Nothing
 13640 ;; This function is called by:
 13641 ;;		_EUSART_Initialize
 13642 ;;		_INTERRUPT_InterruptManager
 13643 ;; This function uses a non-reentrant model
 13644 ;;
 13645                           
 13646                           
 13647                           ;psect for function _EUSART_Transmit_ISR
 13648  170F                     _EUSART_Transmit_ISR:	
 13649                           
 13650                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 13651                           
 13652                           ;incstack = 0
 13653                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13654  170F  3008               	movlw	8
 13655  1710  0021               	movlb	1	; select bank1
 13656  1711  026F               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 13657  1712  1803               	skipnc
 13658  1713  2F2A               	goto	i1l754
 13659                           
 13660                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 13661  1714  0844               	movf	_eusartTxTail^(0+128),w
 13662  1715  3E43               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 13663  1716  0086               	movwf	6
 13664  1717  3001               	movlw	1	; select bank2/3
 13665  1718  0087               	movwf	7
 13666  1719  0801               	movf	1,w
 13667  171A  0023               	movlb	3	; select bank3
 13668  171B  009A               	movwf	26	;volatile
 13669  171C  3001               	movlw	1
 13670  171D  00F0               	movwf	??_EUSART_Transmit_ISR
 13671  171E  0870               	movf	??_EUSART_Transmit_ISR,w
 13672  171F  0021               	movlb	1	; select bank1
 13673  1720  07C4               	addwf	_eusartTxTail^(0+128),f	;volatile
 13674                           
 13675                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13676  1721  3008               	movlw	8
 13677  1722  0244               	subwf	_eusartTxTail^(0+128),w	;volatile
 13678  1723  1803               	btfsc	3,0
 13679                           
 13680                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 13681  1724  01C4               	clrf	_eusartTxTail^(0+128)	;volatile
 13682                           
 13683                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 13684  1725  3001               	movlw	1
 13685  1726  00F0               	movwf	??_EUSART_Transmit_ISR
 13686  1727  0870               	movf	??_EUSART_Transmit_ISR,w
 13687  1728  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 13688                           
 13689                           ;mcc_generated_files/eusart.c: 217:     }
 13690  1729  0008               	return
 13691  172A                     i1l754:	
 13692                           ;mcc_generated_files/eusart.c: 218:     else
 13693                           
 13694                           
 13695                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 13696  172A  1211               	bcf	17,4	;volatile
 13697  172B  0008               	return
 13698  172C                     __end_of_EUSART_Transmit_ISR:	
 13699                           
 13700                           	psect	text92
 13701  08BD                     __ptext92:	
 13702 ;; *************** function _EUSART_Receive_ISR *****************
 13703 ;; Defined at:
 13704 ;;		line 224 in file "mcc_generated_files/eusart.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;		None
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;		None
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  1    wreg      void 
 13711 ;; Registers used:
 13712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13718 ;;      Params:         0       0       0       0       0       0       0       0
 13719 ;;      Locals:         0       0       0       0       0       0       0       0
 13720 ;;      Temps:          0       0       0       0       0       0       0       0
 13721 ;;      Totals:         0       0       0       0       0       0       0       0
 13722 ;;Total ram usage:        0 bytes
 13723 ;; Hardware stack levels used:    1
 13724 ;; Hardware stack levels required when called:    2
 13725 ;; This function calls:
 13726 ;;		Absolute function
 13727 ;;		_EUSART_DefaultErrorHandler
 13728 ;;		_EUSART_DefaultFramingErrorHandler
 13729 ;;		_EUSART_DefaultOverrunErrorHandler
 13730 ;;		_EUSART_RxDataHandler
 13731 ;; This function is called by:
 13732 ;;		_EUSART_Initialize
 13733 ;;		_INTERRUPT_InterruptManager
 13734 ;; This function uses a non-reentrant model
 13735 ;;
 13736                           
 13737                           
 13738                           ;psect for function _EUSART_Receive_ISR
 13739  08BD                     _EUSART_Receive_ISR:	
 13740                           
 13741                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 13742                           
 13743                           ;incstack = 0
 13744 ;; hardware stack exceeded
 13745                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13746  08BD  087C               	movf	_eusartRxHead,w	;volatile
 13747  08BE  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13748  08BF  0086               	movwf	6
 13749  08C0  0187               	clrf	7
 13750  08C1  0181               	clrf	1
 13751                           
 13752                           ;mcc_generated_files/eusart.c: 229:     if(RCSTAbits.FERR){
 13753  08C2  0023               	movlb	3	; select bank3
 13754  08C3  1D1D               	btfss	29,2	;volatile
 13755  08C4  28D0               	goto	i1l4579
 13756                           
 13757                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13758  08C5  087C               	movf	_eusartRxHead,w	;volatile
 13759  08C6  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13760  08C7  0086               	movwf	6
 13761  08C8  0187               	clrf	7
 13762  08C9  1481               	bsf	1,1
 13763                           
 13764                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 13765  08CA  0022               	movlb	2	; select bank2
 13766  08CB  0850               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 13767  08CC  008A               	movwf	10
 13768  08CD  084F               	movf	_EUSART_FramingErrorHandler^(0+256),w
 13769  08CE  000A               	callw
 13770  08CF  3188               	pagesel	$
 13771  08D0                     i1l4579:	
 13772                           
 13773                           ;mcc_generated_files/eusart.c: 234:     if(RCSTAbits.OERR){
 13774  08D0  0023               	movlb	3	; select bank3
 13775  08D1  1C9D               	btfss	29,1	;volatile
 13776  08D2  28DE               	goto	i1l4585
 13777                           
 13778                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13779  08D3  087C               	movf	_eusartRxHead,w	;volatile
 13780  08D4  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13781  08D5  0086               	movwf	6
 13782  08D6  0187               	clrf	7
 13783  08D7  1501               	bsf	1,2
 13784                           
 13785                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 13786  08D8  0022               	movlb	2	; select bank2
 13787  08D9  084E               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 13788  08DA  008A               	movwf	10
 13789  08DB  084D               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 13790  08DC  000A               	callw
 13791  08DD  3188               	pagesel	$
 13792  08DE                     i1l4585:	
 13793                           
 13794                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 13795  08DE  087C               	movf	_eusartRxHead,w	;volatile
 13796  08DF  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13797  08E0  0086               	movwf	6
 13798  08E1  0187               	clrf	7
 13799  08E2  0801               	movf	1,w
 13800  08E3  1903               	btfsc	3,2
 13801  08E4  28EC               	goto	i1l4589
 13802                           
 13803                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 13804  08E5  0022               	movlb	2	; select bank2
 13805  08E6  084C               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 13806  08E7  008A               	movwf	10
 13807  08E8  084B               	movf	_EUSART_ErrorHandler^(0+256),w
 13808  08E9  000A               	callw
 13809  08EA  3188               	pagesel	$
 13810                           
 13811                           ;mcc_generated_files/eusart.c: 241:     } else {
 13812  08EB  0008               	return
 13813  08EC                     i1l4589:	
 13814                           
 13815                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 13816  08EC  3196  265B         	fcall	_EUSART_RxDataHandler
 13817  08EE  0008               	return
 13818  08EF                     __end_of_EUSART_Receive_ISR:	
 13819                           
 13820                           	psect	text93
 13821  1440                     __ptext93:	
 13822 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 13823 ;; Defined at:
 13824 ;;		line 260 in file "mcc_generated_files/eusart.c"
 13825 ;; Parameters:    Size  Location     Type
 13826 ;;		None
 13827 ;; Auto vars:     Size  Location     Type
 13828 ;;		None
 13829 ;; Return value:  Size  Location     Type
 13830 ;;                  1    wreg      void 
 13831 ;; Registers used:
 13832 ;;		None
 13833 ;; Tracked objects:
 13834 ;;		On entry : 0/0
 13835 ;;		On exit  : 0/0
 13836 ;;		Unchanged: 0/0
 13837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13838 ;;      Params:         0       0       0       0       0       0       0       0
 13839 ;;      Locals:         0       0       0       0       0       0       0       0
 13840 ;;      Temps:          0       0       0       0       0       0       0       0
 13841 ;;      Totals:         0       0       0       0       0       0       0       0
 13842 ;;Total ram usage:        0 bytes
 13843 ;; Hardware stack levels used:    1
 13844 ;; This function calls:
 13845 ;;		Nothing
 13846 ;; This function is called by:
 13847 ;;		_EUSART_Initialize
 13848 ;;		_EUSART_Receive_ISR
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           
 13853                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 13854  1440                     _EUSART_DefaultOverrunErrorHandler:	
 13855                           
 13856                           ;mcc_generated_files/eusart.c: 263:     RCSTAbits.CREN = 0;
 13857                           
 13858                           ;incstack = 0
 13859 ;; hardware stack exceeded
 13860                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 13861  1440  0023               	movlb	3	; select bank3
 13862  1441  121D               	bcf	29,4	;volatile
 13863                           
 13864                           ;mcc_generated_files/eusart.c: 264:     RCSTAbits.CREN = 1;
 13865  1442  161D               	bsf	29,4	;volatile
 13866  1443  0008               	return
 13867  1444                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 13868                           
 13869                           	psect	text94
 13870  142D                     __ptext94:	
 13871 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 13872 ;; Defined at:
 13873 ;;		line 258 in file "mcc_generated_files/eusart.c"
 13874 ;; Parameters:    Size  Location     Type
 13875 ;;		None
 13876 ;; Auto vars:     Size  Location     Type
 13877 ;;		None
 13878 ;; Return value:  Size  Location     Type
 13879 ;;                  1    wreg      void 
 13880 ;; Registers used:
 13881 ;;		None
 13882 ;; Tracked objects:
 13883 ;;		On entry : 0/0
 13884 ;;		On exit  : 0/0
 13885 ;;		Unchanged: 0/0
 13886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13887 ;;      Params:         0       0       0       0       0       0       0       0
 13888 ;;      Locals:         0       0       0       0       0       0       0       0
 13889 ;;      Temps:          0       0       0       0       0       0       0       0
 13890 ;;      Totals:         0       0       0       0       0       0       0       0
 13891 ;;Total ram usage:        0 bytes
 13892 ;; Hardware stack levels used:    1
 13893 ;; This function calls:
 13894 ;;		Nothing
 13895 ;; This function is called by:
 13896 ;;		_EUSART_Initialize
 13897 ;;		_EUSART_Receive_ISR
 13898 ;; This function uses a non-reentrant model
 13899 ;;
 13900                           
 13901                           
 13902                           ;psect for function _EUSART_DefaultFramingErrorHandler
 13903  142D                     _EUSART_DefaultFramingErrorHandler:	
 13904                           
 13905                           ;incstack = 0
 13906 ;; hardware stack exceeded
 13907                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 13908  142D  0008               	return
 13909  142E                     __end_of_EUSART_DefaultFramingErrorHandler:	
 13910                           
 13911                           	psect	text95
 13912  1431                     __ptext95:	
 13913 ;; *************** function _EUSART_DefaultErrorHandler *****************
 13914 ;; Defined at:
 13915 ;;		line 268 in file "mcc_generated_files/eusart.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;		None
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;		None
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  1    wreg      void 
 13922 ;; Registers used:
 13923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13929 ;;      Params:         0       0       0       0       0       0       0       0
 13930 ;;      Locals:         0       0       0       0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0
 13932 ;;      Totals:         0       0       0       0       0       0       0       0
 13933 ;;Total ram usage:        0 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    1
 13936 ;; This function calls:
 13937 ;;		_EUSART_RxDataHandler
 13938 ;; This function is called by:
 13939 ;;		_EUSART_Initialize
 13940 ;;		_EUSART_Receive_ISR
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           
 13945                           ;psect for function _EUSART_DefaultErrorHandler
 13946  1431                     _EUSART_DefaultErrorHandler:	
 13947                           
 13948                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 13949                           
 13950                           ;incstack = 0
 13951 ;; hardware stack exceeded
 13952                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13953  1431  3196  265B         	fcall	_EUSART_RxDataHandler
 13954  1433  0008               	return
 13955  1434                     __end_of_EUSART_DefaultErrorHandler:	
 13956                           
 13957                           	psect	text96
 13958  165B                     __ptext96:	
 13959 ;; *************** function _EUSART_RxDataHandler *****************
 13960 ;; Defined at:
 13961 ;;		line 248 in file "mcc_generated_files/eusart.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;		None
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;		None
 13966 ;; Return value:  Size  Location     Type
 13967 ;;                  1    wreg      void 
 13968 ;; Registers used:
 13969 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13970 ;; Tracked objects:
 13971 ;;		On entry : 0/0
 13972 ;;		On exit  : 0/0
 13973 ;;		Unchanged: 0/0
 13974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13975 ;;      Params:         0       0       0       0       0       0       0       0
 13976 ;;      Locals:         0       0       0       0       0       0       0       0
 13977 ;;      Temps:          1       0       0       0       0       0       0       0
 13978 ;;      Totals:         1       0       0       0       0       0       0       0
 13979 ;;Total ram usage:        1 bytes
 13980 ;; Hardware stack levels used:    1
 13981 ;; This function calls:
 13982 ;;		Nothing
 13983 ;; This function is called by:
 13984 ;;		_EUSART_Receive_ISR
 13985 ;;		_EUSART_DefaultErrorHandler
 13986 ;; This function uses a non-reentrant model
 13987 ;;
 13988                           
 13989                           
 13990                           ;psect for function _EUSART_RxDataHandler
 13991  165B                     _EUSART_RxDataHandler:	
 13992                           
 13993                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RCREG;
 13994                           
 13995                           ;incstack = 0
 13996 ;; hardware stack exceeded
 13997                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 13998  165B  0023               	movlb	3	; select bank3
 13999  165C  0819               	movf	25,w	;volatile
 14000  165D  00F0               	movwf	??_EUSART_RxDataHandler
 14001  165E  087C               	movf	_eusartRxHead,w
 14002  165F  3E3B               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 14003  1660  0086               	movwf	6
 14004  1661  3001               	movlw	1	; select bank2/3
 14005  1662  0087               	movwf	7
 14006  1663  0870               	movf	??_EUSART_RxDataHandler,w
 14007  1664  0081               	movwf	1
 14008  1665  3001               	movlw	1
 14009  1666  00F0               	movwf	??_EUSART_RxDataHandler
 14010  1667  0870               	movf	??_EUSART_RxDataHandler,w
 14011  1668  07FC               	addwf	_eusartRxHead,f	;volatile
 14012                           
 14013                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14014  1669  3008               	movlw	8
 14015  166A  027C               	subwf	_eusartRxHead,w	;volatile
 14016  166B  1803               	btfsc	3,0
 14017                           
 14018                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 14019  166C  01FC               	clrf	_eusartRxHead	;volatile
 14020                           
 14021                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 14022  166D  3001               	movlw	1
 14023  166E  00F0               	movwf	??_EUSART_RxDataHandler
 14024  166F  0870               	movf	??_EUSART_RxDataHandler,w
 14025  1670  0021               	movlb	1	; select bank1
 14026  1671  07C2               	addwf	_eusartRxCount^(0+128),f	;volatile
 14027  1672  0008               	return
 14028  1673                     __end_of_EUSART_RxDataHandler:	
 14029  007E                     btemp	set	126	;btemp
 14030  007E                     int$flags	set	126
 14031  007E                     wtemp0	set	126


Data Sizes:
    Strings     75
    Constant    57
    Data        40
    BSS         138
    Persistent  45
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     80      80
    BANK1            80     19      80
    BANK2            80      3      52
    BANK3            80      0      80
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2504$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Service$2504	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_8(CODE[28]), STR_7(CODE[28]), STR_6(CODE[13]), STR_5(CODE[20]), 
		 -> STR_4(CODE[14]), STR_3(CODE[20]), STR_2(CODE[20]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2189_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_8(CODE[28]), STR_7(CODE[28]), STR_6(CODE[13]), STR_5(CODE[20]), 
		 -> STR_4(CODE[14]), STR_3(CODE[20]), STR_2(CODE[20]), STR_1(CODE[20]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 28
		 -> STR_8(CODE[28]), STR_7(CODE[28]), STR_6(CODE[13]), STR_5(CODE[20]), 
		 -> STR_4(CODE[14]), STR_3(CODE[20]), STR_2(CODE[20]), STR_1(CODE[20]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S113$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S113$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2864,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _vfpfcnvrt->_fputc
    _dtoa->___aodiv
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _abs->___aomod
    _MTOUCH_Button_Buttonmask_Get->_MTOUCH_Button_isPressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Button_Service->_Button_State_NotPressed
    _Button_Service->_Button_State_Pressed
    _myButtonPressedCallback->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _abs->___aomod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_NotPressed->_myButtonPressedCallback
    _myButtonPressedCallback->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_MTOUCH_Service_Mainloop

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   48331
                                              1 BANK2      2     2      0
       _MTOUCH_Button_Buttonmask_Get
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                             _printf
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4566
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      98
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   34441
                                              0 BANK2      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   16387
                                             57 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   16288
                                             50 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     530
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   14879
                                             46 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1697
                                              8 COMMON     1     1      0
                                             16 BANK0      4     4      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6399
                                             33 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5856
                                             18 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     242
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1902
                                              8 COMMON     4     4      0
                                             16 BANK0      2     2      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     300
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   17686
                                             17 BANK1      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   17587
                                             13 BANK1      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1393
                                             78 BANK0      2     2      0
                                              8 BANK1      1     0      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     106
                                              3 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1   10861
                                             78 BANK0      2     2      0
                                              8 BANK1      1     0      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              5     4      1    9193
                                              3 BANK1      5     4      1
       _MTOUCH_Button_Buttonmask_Get
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              10     4      6    8970
                                             71 BANK0      7     1      6
                                              0 BANK1      3     3      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    8169
                                             63 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    7731
                                             47 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                30    22      8    5991
                                             17 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    3220
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     166
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1429
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3    1037
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      93
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      62
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     723
                                              4 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             19     3     16     613
                                              1 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             27    11     16     625
                                              1 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_Buttonmask_Get                         4     4      0     158
                                              3 COMMON     4     4      0
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              3 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              8 BANK1      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                            _INT_ISR
 ---------------------------------------------------------------------------------
 (16) _INT_ISR                                             0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (17) _INT_CallBack                                        0     0      0       0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (18) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (16) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_Buttonmask_Get
     _MTOUCH_Button_isPressed
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _MTOUCH_Button_Buttonmask_Get
               _MTOUCH_Button_isPressed
             _printf
               _vfprintf
                 _vfpfcnvrt
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _putch
                           _EUSART_Write
                       _fputs
                         _fputc
                           _putch
                             _EUSART_Write
                       _strlen
                   _fputc
                     _putch
                       _EUSART_Write
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
                 ___aomod (ARG)
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
               ___aomod (ARG)
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
                   ___aomod (ARG)
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
                 ___aomod (ARG)
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
               ___aomod (ARG)
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     131       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     13      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      3      34      10       65.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     131      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Jul 06 21:18:11 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                           _triac_level 00B8  
                                      ___bmul@product 0073                                           __CFG_CP$OFF 0000  
                             ?_Sensor_autoCalibration 0070                            __end_of_Sensor_setInactive 14A4  
                           _Sensor_setCalibratAcqTime 153D                                           __CFG_LVP$ON 0000  
                                                 l303 01D7                                                   l305 01EE  
                                                 l257 0F5E                                                   l522 07D7  
                                                 l293 0130                                                   l286 012C  
                                                 l288 0127                                                   l741 176E  
                                                 l742 1774                                                   l596 175D  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 _abs 1644                                ??_EUSART_RxDataHandler 0070  
                                                 _pad 0A22                        ?_EUSART_SetFramingErrorHandler 0071  
                             ?_Sensor_loadADCSettings 0072                                       _TMR2_Initialize 0800  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                                l1002 0BA2                                                  l1004 0BA0  
                                                l1104 0A3A                                                  l1112 0281  
                                                l1121 034D                                                  l1113 0288  
                                                l1107 0A5A                                                  ?_abs 0074  
                                                l1108 0A66                                                  l1117 02A3  
                                                l1118 02B7                                                  l1253 058A  
                                                l1266 0666                                                  l4031 0D36  
                                                l5011 02B2                                                  l5005 029B  
                                                l5015 02E4                                                  l5103 0714  
                                                l5025 02BF                                                  l5033 0359  
                                                l5113 0725                                                  l5201 0086  
                                                l5043 036C                                                  l5107 071A  
                                                l5211 00A4                                                  l5037 0361  
                                                l3621 0F5A                                                  l5213 00B9  
                                                l4191 0CE2                                                  l5047 0379  
                                                l5063 0846                                                  l5151 0E8A  
                                                l5143 0E52                                                  l5231 00AC  
                                                l4185 0CC6                                                  l5401 1688  
                                                l5057 0835                                                  l5145 0E56  
                                                l3609 1518                                                  l5129 158C  
                                                l3641 0FDE                                                  l5321 01B0  
                                                l5313 0195                                                  l5209 009D  
                                                l6041 0DFE                                                  l4187 0CCE  
                                                l5171 156E                                                  l5163 0897  
                                                l5059 0844                                                  l3635 0FB8  
                                                l5243 00BB                                                  l5219 00A6  
                                                l4283 162F                                                  l5165 08B4  
                                                l5069 0857                                                  l5325 01CA  
                                                l5309 017A                                                  l5421 0985  
                                                ?_pad 0028                                                  l5175 1574  
                                                l3575 16D6                                                  l3639 0FCB  
                                                l5263 00F1                                                  l5247 00C5  
                                                l5423 0988                                                  l6039 0DF9  
                                                l5097 06F3                                                  l5089 06B9  
                                                l5361 0205                                                  l5353 01F2  
                                                l5329 01CF                                                  l5273 0104  
                                                l5603 1616                                                  l5451 0EEF  
                                                l5443 0ED9                                                  l5427 0993  
                                                l5525 0BE4                                                  l5373 022E  
                                                l5357 01FC                                                  l5461 0F07  
                                                l5621 0811                                                  l5631 1500  
                                                l3927 174B                                                  l5367 0219  
                                                l5551 0AD5                                                  l5711 0DB8  
                                                l4913 0A38                                                  l5297 0134  
                                                l5289 011F                                                  l5465 0F31  
                                                l5721 0DDA                                                  l5705 0DA8  
                                                l4931 04D3                                                  l4851 1768  
                                                l5459 0EF4                                                  l5571 0B08  
                                                l5563 0AF0                                                  l5715 0DC9  
                                                l4909 0A30                                                  l5637 0B39  
                                                l5653 078D                                                  l5557 0ADD  
                                                l5805 1737                                                  l5495 0A11  
                                                l4935 04FA                                                  l4919 0A3C  
                                                l5639 0B3D                                                  l5575 0B18  
                                                l5567 0AF8                                                  l5727 0DEC  
                                                l4937 04FE                                                  l4865 1788  
                                                l5753 0AB3                                                  l5593 17F2  
                                                l5729 0E0F                                                  l5681 1521  
                                                l4947 0515                                                  l4875 08F8  
                                                l5659 07CE                                                  l5579 0B21  
                                                l4957 055D                                                  l4949 0524  
                                                l4981 05FA                                                  l4973 05ED  
                                                l5669 0C20                                                  l4959 0569  
                                                l4983 0609                                                  l4879 091B  
                                                l4895 1690                                                  l5775 1623  
                                                l5695 1701                                                  l4969 05C6  
                                                l4889 178F                                                  l4897 169C  
                                                l5769 161A                                                  l5953 03D7  
                                                l5937 03BA                                                  l5929 03A2  
                                                l4987 0639                                                  l4989 0645  
                                                l5789 154E                                                  l5983 045F  
                                                l5967 041D                                                  l5993 0492  
                                                l5977 0450                                                  STR_1 181C  
                                                STR_2 181C                                                  STR_3 181C  
                                                STR_4 1830                                                  STR_5 181C  
                                                STR_6 183E                                                  STR_7 1800  
                                                STR_8 1800                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                     __end_of_INT_ISR 1448                                                  _LATC 010E  
                                                u4010 0CAD                                                  u3060 16D4  
                                                u4005 0C75                                                  u4015 0CA9  
                                                u3055 16C5                                                  u3145 0FF3  
                                                u5025 0A46                                                  u5115 054A  
                                                u5215 0627                                                  u6015 0F11  
                                                u3624 1757                                                  u5080 0505  
                                                u3625 1756                                                  u5305 0293  
                                                u5250 0257                                                  u6035 0928  
                                                u4195 1632                                                  u5260 0258  
                                                u6045 0883                                                  u5335 0357  
                                                u6305 0B66                                                  u5505 0E35  
                                                u3755 0CFE                                                  u5355 02D3  
                                                u5515 0E3F                                                  u3765 0D44  
                                                u5365 02DF                                                  u6335 07A7  
                                                u5535 0E7A                                                  u6435 0A77  
                                                u4965 0919                                                  u4995 164D  
                          Button_State_Pressed@button 00D1                                                  _TMR2 001A  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01DB                              _Sensor_getScanGroupIndex 0833  
                           ?_Sensor_Acq_ExecutePacket 0032                                          __CFG_WRT$OFF 0000  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0074  
                                                _dbuf 01D0                                                  _main 038C  
                                                _dtoa 023B                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                _prec 00B0                                                  _nout 00AC  
                                                pad@i 002C                                                  pad@p 0029  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                                                pad@w 002E                  __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                                btemp 007E                   __end_of_INT_DefaultInterruptHandler 142F  
                         _INT_DefaultInterruptHandler 142E                                                  start 002A  
                     __end_of_INT_SetInterruptHandler 1482                                     ___bmul@multiplier 0074  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                  MTOUCH_Button_Buttonmask_Get@output 0075                        __end_of_Sensor_autoCalibration 0EAA  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1850          Sensor_Scanfrequency_Evaluation@frequency_hop 184B  
                            _myButtonReleasedCallback 1434                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 001B                         __size_of_Button_State_Pressed 0071  
                                               ??_abs 0076                                                 ??_pad 002B  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0030  
                       ??_MTOUCH_Sensor_RawSample_Get 0077                         Sensor_RawSample_Update@sensor 0077  
                       myButtonPressedCallback@button 00CC                             __size_of_Sensor_isEnabled 0011  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 1488     Sensor_Scanfrequency_Evaluation@best_packet_sample 0049  
                 __end_of_Sensor_isCalibratingAcqTime 14BD                           _Sensor_isCalibratingAcqTime 14B4  
                                     __end_of___aodiv 059C                                                 ?_main 0070  
                                               ?_dtoa 0031                                       __end_of___aomod 0678  
                      __end_of_Sensor_loadADCSettings 1000                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                                 i1l754 172A  
                                               i1l873 0028                                                 i1l865 000D  
                                               i1l868 001C                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 004F  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                                 _TXREG 019A  
                                               _TXSTA 019E                       __size_of_Button_DefaultCallback 0001  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                                               _flags 00B2                               __size_of_Sensor_Service 0097  
               __end_of_MTOUCH_Sensor_Scan_Initialize 156C                __size_of_MTOUCH_Sensor_Scan_Initialize 0010  
                       _MTOUCH_Sensor_Scan_Initialize 155C                                        _WDT_Initialize 07FC  
                             Sensor_setSampled@sensor 0071                                                 _fputc 08EF  
                                               _fputs 178B                                                 pad@fp 0030  
                                               _width 00AE                                                 _putch 1448  
                    __size_of_Button_State_NotPressed 00B4                                                 dtoa@d 0031  
                                               dtoa@i 004D                                                 dtoa@n 0045  
                                               dtoa@p 003F                                                 dtoa@s 0043  
                                               dtoa@w 0041                                                 pclath 000A  
                                _Sensor_Sampled_Reset 14AC                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 1437  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 0072                                       __initialization 002C  
                                        __end_of_main 04A9                                          __end_of_dtoa 038C  
                                _Sensor_setCalibrated 1504                                        ??_EUSART_Write 0071  
                             __end_of_TMR2_Initialize 0808                                        __CFG_LPBOR$OFF 0000  
                         ?_INTERRUPT_InterruptManager 0070                        ??_EUSART_SetRxInterruptHandler 0073  
                    __end_of_MTOUCH_Button_Initialize 095A                                                ??_main 0152  
                                              ??_dtoa 0039                                         _counter_PRESS 00BF  
                             _MTOUCH_Sensor_Calibrate 158E                             Sensor_Service@sensor_adc1 0057  
                           Sensor_Service@sensor_adc2 0058                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 0800                                             ??_INT_ISR 0070  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 142E            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 142D                            _EUSART_OverrunErrorHandler 014D  
                __size_of_MTOUCH_Sensor_RawSample_Get 0018                                                ?_fputc 0074  
                                              ?_fputs 0020                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0070  
                                              _ANSELB 018D                                                _ANSELC 018E  
                                              _BORCON 0116                                                i1l4585 08DE  
                                              i1l4579 08D0                                                i1l4589 08EC  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              u505lld 04D1                                                _WDTCON 0097  
                                              u516lld 05C4                     MTOUCH_Button_InitializeAll@button 0020  
                      ??_Button_Reading_Update_Helper 0079                                _Button_DefaultCallback 142F  
                     __end_of_MTOUCH_Service_Mainloop 1749                                        __CFG_PWRTE$OFF 0000  
                                 _Sensor_isCalibrated 14BD                                _Sensor_DefaultCallback 1430  
                                        vfprintf@cfmt 0065                                         _packet_sample 00A8  
                                              ___bmul 156C                                 ?_Sensor_setCalibrated 0070  
                                           ??___aodiv 0071                                             ??___aomod 0071  
                        Sensor_DefaultCallback@sensor 0071                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 006F                                   _EUSART_Transmit_ISR 170F  
                                              _memcpy 0808                      __end_of_MTOUCH_Button_ServiceAll 155C  
                                              _printf 15B2                                                pad@buf 0028  
                        Sensor_autoCalibration@sensor 0031                                                dtoa@fp 003E  
                                       ?_INT_CallBack 0070                                                _strlen 168B  
                                              fputc@c 0074                                                fputs@c 0024  
                                              fputs@i 0025                                                fputs@s 0027  
                             _MTOUCH_Sensor_SampleAll 1618                          Button_DefaultCallback@button 00CC  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0B23  
                    __size_of_INT_SetInterruptHandler 0006                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 08BD                   Sensor_postAcquisitionProcess@sensor 0033  
                             __end_of_TMR2_StartTimer 143A               INT_SetInterruptHandler@InterruptHandler 0071  
                  __size_of_Sensor_setCalibratAcqTime 000F              __end_of_MTOUCH_Button_SetPressedCallback 145E  
           __size_of_MTOUCH_Button_SetPressedCallback 0006                    ??_MTOUCH_Button_SetPressedCallback 0073  
                   ?_MTOUCH_Button_SetPressedCallback 0071                      _MTOUCH_Button_SetPressedCallback 1458  
                            __size_of_Sensor_isActive 000E                                  ?_EUSART_Transmit_ISR 0070  
                     MTOUCH_Sensor_RawSample_Get@name 0078                   Sensor_getScanGroupIndex@sensorGroup 0074  
                                   _SYSTEM_Initialize 15ED                               __end_of__initialization 005C  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0078                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00DC                            __end_of_Button_Tick_helper 17D8  
                       MTOUCH_Sensor_Calibrate@sensor 0076                  __end_of_EUSART_SetTxInterruptHandler 147C  
               __size_of_EUSART_SetTxInterruptHandler 0006                          _EUSART_SetTxInterruptHandler 1476  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0037                                   ___bmul@multiplicand 0071  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 16BD  
                                        __pidataBANK1 14E9                                          __pidataBANK2 16D8  
         __end_of_MTOUCH_Button_SetNotPressedCallback 1458          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 1452                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 1644                                         __end_of_fputc 0924  
                                       __end_of_fputs 17B1                      __end_of_MTOUCH_Sensor_Initialize 15ED  
                                       __end_of_putch 144D                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 157D                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0CEC                                        ??_INT_CallBack 0070  
                            Sensor_setInactive@sensor 0071                                        _Button_Service 0A72  
                    __end_of_Sensor_Acq_ExecutePacket 023B                            ?_Button_State_Initializing 00D1  
                         __size_of_EXT_INT_Initialize 000B                                  Button_Service@button 00D9  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0D7B                   Sensor_Acq_ExecutePacket@sensor_adc1 0040  
                 Sensor_Acq_ExecutePacket@sensor_adc2 0032                              _MTOUCH_Button_Initialize 0924  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0D7B  
                             _Button_State_NotPressed 0748                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 149C                                     _sensor_scan_group 1850  
                                             ??_fputc 0077                                        _count_down_off 00BE  
                           __end_of_SYSTEM_Initialize 1602                                     _lowpowerActivated 00C7  
                                             ??_fputs 0021                                 ??_EUSART_Transmit_ISR 0070  
                    MTOUCH_Sensor_isCalibrated@sensor 0076                                ??_Sensor_Sampled_Reset 0071  
                                             ??_putch 0073                                        _counter_ON_OFF 00C0  
                                          __pbssBANK1 00A0                                            __pbssBANK2 013B  
                                          __pbssBANK3 01A0                                  __end_of_EUSART_Write 178B  
                             _TMR2_LoadPeriodRegister 144D                            ??_myButtonReleasedCallback 007C  
                        Sensor_loadADCSettings@sensor 0079                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 1494                           __size_of_EUSART_Receive_ISR 0032  
                          __end_of_mtouch_button_init 1030                                     _last_touch_status 00B6  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0038                                ??_Sensor_setCalibrated 0071  
                                          __pmaintext 038C                                               ?___bmul 0071  
                       ?_EUSART_SetTxInterruptHandler 0071                      _EUSART_TxDefaultInterruptHandler 00ED  
                                             _AD1CON0 0711                                               _AD1CON2 0713  
                                             _AD1CON3 0714                                               _AD2CON0 0791  
                                             _AD2CON2 0793                                               _AD2CON3 0794  
                                             _AAD1CAP 0719                                               _AAD1GRD 0718  
                                             _AAD2GRD 0798                        MTOUCH_Sensor_wasSampled@sensor 0076  
                                          __pintentry 0004                                __end_of_Button_Service 0AC7  
                                             ?_memcpy 0071                                               _BAUDCON 019F  
                                           _AD1ACQCON 0717                   __end_of_MTOUCH_Button_InitializeAll 170F  
                         _MTOUCH_Button_InitializeAll 16F3                                             _AD2ACQCON 0797  
                        ??_EUSART_DefaultErrorHandler 0071                   __end_of_MTOUCH_Sensor_InitializeAll 152E  
                         _MTOUCH_Sensor_InitializeAll 1520                             ??_MTOUCH_Sensor_SampleAll 0059  
                                             ?_printf 0067                       __end_of_Sensor_RawSample_Update 1800  
                                ??_Sensor_setInactive 0071                                               ?_strlen 0071  
                   __size_of_MTOUCH_Sensor_wasSampled 000F                             ?_MTOUCH_Sensor_wasSampled 0070  
                                       _eusartRxCount 00C2                                             _AD1PRECON 0716  
                           Sensor_isCalibrated@sensor 0071                                             _AD2PRECON 0796  
                   __end_of_Button_State_Initializing 0B85                                __end_of_Sensor_Service 0E12  
                             Sensor_Service@scanGroup 0055                              _MTOUCH_Button_ServiceAll 154C  
                                             _INT_ISR 1444                             __end_of_sensor_scan_group 1854  
                                  __size_of_vfpfcnvrt 00D0                         __size_of_EUSART_RxDataHandler 0018  
                    __size_of_MTOUCH_Service_Mainloop 001D                          __end_of_Button_State_Pressed 0C65  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0009  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0034                             ??_MTOUCH_Button_isPressed 0071  
                                          _counter_1s 00B4                                     ??_Sensor_isActive 0071  
                 __size_of_EUSART_DefaultErrorHandler 0003                         MTOUCH_Button_Buttonmask_Get@i 0076  
               __end_of_Sensor_postAcquisitionProcess 0997                __size_of_Sensor_postAcquisitionProcess 003D  
                       _Sensor_postAcquisitionProcess 095A                               _myButtonPressedCallback 0B85  
                             Sensor_Acquisition@retry 0050                                       __size_of___bmul 0011  
                                             ___aodiv 04A9                                           _AD1CON0bits 0711  
                                             ___aomod 059C                        MTOUCH_Button_Initialize@button 007A  
                                         _AD2CON0bits 0791                                             ?_vfprintf 005F  
                                     ?_Button_Service 0070            Sensor_Scanfrequency_Evaluation@sensor_adc1 0044  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 0041                                       __size_of_memcpy 002B  
                                             __ptext1 15ED                                               __ptext2 07FC  
                                             __ptext3 0800                                               __ptext4 16A3  
                                             __ptext5 1482                                               __ptext6 14DD  
                                             __ptext7 1520                                               __ptext8 15D8  
                                             __ptext9 15A0                                       __size_of_printf 0013  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 15D8                                 _OSCILLATOR_Initialize 1482  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 006E  
                                     ?_Sensor_Service 0070                              ??_PIN_MANAGER_Initialize 0071  
                             _INT_SetInterruptHandler 147C                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 1504  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 0060  
                                    _callback_sampled 00E6                             ??_TMR2_LoadPeriodRegister 0071  
                     Sensor_RawSample_Update@adcIndex 0076                            __size_of_SYSTEM_Initialize 0015  
                                             clrloop0 1489                                      _callback_pressed 00E4  
                      MTOUCH_Sensor_Initialize@sensor 0078                                  end_of_initialization 005C  
                                             _turn_on 00BC                               ?_Button_DefaultCallback 00CC  
               __end_of_EUSART_SetOverrunErrorHandler 1470                __size_of_EUSART_SetOverrunErrorHandler 0006  
                       _EUSART_SetOverrunErrorHandler 146A                                               memcpy@d 007A  
                                             memcpy@n 0073                                               memcpy@s 0077  
                                             fputc@fp 0076                                               init_ram 148E  
                                             fputs@fp 0020                                               initloop 148F  
                                __end_of_INT_CallBack 14D2                               ?_Sensor_DefaultCallback 0071  
                       Sensor_Acquisition@sensor_adc1 0051                         Sensor_Acquisition@sensor_adc2 004E  
                    __size_of_Button_Deviation_Update 0087                                     _EUSART_Initialize 0997  
                        ??_MTOUCH_Sensor_isCalibrated 0075                                    ?_EUSART_Initialize 0070  
                                   __end_of_vfpfcnvrt 0748                   __end_of_MTOUCH_Sensor_RawSample_Get 168B  
                         _MTOUCH_Sensor_RawSample_Get 1673                                             _RCSTAbits 019D  
                                          ??_vfprintf 0062                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                        ??_EUSART_SetTxInterruptHandler 0073  
                              Sensor_setActive@sensor 0071                                      __CFG_FOSC$INTOSC 0000  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0047                         Button_Deviation_Update@button 0020  
                Sensor_Acq_ExecutePacket@AD1CON2_temp 0035                                 __size_of_EUSART_Write 0024  
            MTOUCH_Button_SetPressedCallback@callback 0071                            MTOUCH_Sensor_Enable@sensor 0076  
                Sensor_Acq_ExecutePacket@AD2CON2_temp 0036                                   _callback_notPressed 00E2  
                 __size_of_MTOUCH_Sensor_isCalibrated 0016                        __end_of_Button_DefaultCallback 1430  
                     __size_of_EUSART_SetErrorHandler 0006       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0045  
                                  _sensor_globalFlags 00C6                              __end_of_Sensor_isEnabled 158E  
                          Sensor_setCalibrated@sensor 0071                        __end_of_Sensor_DefaultCallback 1431  
                    __end_of_myButtonReleasedCallback 1437                             __end_of_EUSART_Initialize 09D5  
                            ??_Sensor_autoCalibration 0078                            _Sensor_loadADCSettings$562 0076  
                                           _TXSTAbits 019E                             ??_myButtonPressedCallback 00CD  
                    __size_of_Sensor_RawSample_Update 0028                                    _Sensor_Acquisition 0AC7  
                            ??_Sensor_loadADCSettings 0073                                  _Button_State_Pressed 0BF4  
                                      __end_of___bmul 157D                    __end_of_EUSART_DefaultErrorHandler 1434  
                          _EUSART_DefaultErrorHandler 1431                                   ?_Sensor_Acquisition 004E  
                                         vfpfcnvrt@ap 0050                                           vfpfcnvrt@fp 005E  
                                         vfpfcnvrt@ll 0056                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 1767  
                                  _Button_Tick_helper 17B1                                        __end_of_memcpy 0833  
                              ?_OSCILLATOR_Initialize 0070                             ??_INT_SetInterruptHandler 0073  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 149C  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 15C5  
                         ??_Button_State_Initializing 00D2                                        __end_of_strlen 16A3  
                                 start_initialization 002C                               _MTOUCH_Service_Mainloop 172C  
                     __size_of_PIN_MANAGER_Initialize 001A                                    _MTOUCH_Button_Tick 162E  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 165B  
                                         __end_of_pad 0A72                                        _TMR2_StopTimer 143A  
        EUSART_SetRxInterruptHandler@interruptHandler 0071          EUSART_SetTxInterruptHandler@interruptHandler 0071  
                                         putch@txData 0073                                  ??_Sensor_Acquisition 004F  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 00D1  
                      Sensor_autoCalibration@adcIndex 0030                          ?_INT_DefaultInterruptHandler 0070  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 153D  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 15B2  
                                         vfprintf@fmt 005F                                          _packet_noise 00BA  
                          _EUSART_FramingErrorHandler 014F                                              ??___bmul 0072  
                               ?_Button_State_Pressed 00D1                                _EUSART_SetErrorHandler 145E  
                          ??_MTOUCH_Button_ServiceAll 00DA                                           __pdataBANK1 00DC  
                                         __pdataBANK2 0120                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 14C7                          ??_Button_Baseline_Initialize 0020  
                          __end_of_EXT_INT_Initialize 14DD                                         _sample_period 00E8  
                                ??_MTOUCH_Button_Tick 0074                                    _mtouch_button_init 1000  
                          Sensor_Sampled_Reset@sensor 0071                                              ??_printf 006D  
                                            ??_strlen 0073                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 0BF4                           __end_of_EUSART_Transmit_ISR 172C  
                              __end_of_TMR2_StopTimer 143D                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                              ?_INT_ISR 0070  
                                       __pcstackBANK0 0020                                         __pcstackBANK1 00C9  
                                       __pcstackBANK2 0151                                      ___aodiv@dividend 0028  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 1512  
                               __size_of_INT_CallBack 000B                        MTOUCH_Button_ServiceAll@button 00DB  
                                 Sensor_Service@error 0056                            __end_of_EUSART_Receive_ISR 08EF  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 003E  
                             _Button_Deviation_Update 0C65                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00EB                             _Button_State_Initializing 0B23  
                  __end_of_MTOUCH_Sensor_isCalibrated 1618                            _MTOUCH_Sensor_isCalibrated 1602  
                                           __pnvBANK1 00E9                                             __pnvBANK2 014B  
                     __size_of_Sensor_autoCalibration 0098                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 14A4                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 1673                                _PIN_MANAGER_Initialize 16A3  
                                    ??_Button_Service 00D6                                             _dtoa$1883 003C  
                       ??_INT_DefaultInterruptHandler 0070                              ?_MTOUCH_Sensor_Calibrate 0070  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 007B  
                          ??_MTOUCH_Sensor_Initialize 0077                                              ?___aodiv 0020  
                       __size_of_Sensor_setCalibrated 000E                                              ?___aomod 0020  
                                    ___aodiv@quotient 0074                       __size_of_Sensor_loadADCSettings 00B0  
                                            _AAD1CON2 0713                                              _AAD1CON3 0714  
                                            _AAD2CON3 0794                                              _AAD1RES0 071A  
                                        _eusartRxHead 007C                                              _AAD2RES0 079A  
                                        _eusartTxHead 00C5                                          _eusartRxTail 00C3  
                                        _eusartTxTail 00C4                                      ??_Sensor_Service 0052  
                          ??_Sensor_Acq_ExecutePacket 0033                          ??_INTERRUPT_InterruptManager 0071  
                                 ??_Sensor_setSampled 0071                     __size_of_myButtonReleasedCallback 0003  
                           ?_myButtonReleasedCallback 00CC                             ??_MTOUCH_Service_Mainloop 0151  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                             _eusartTxBufferRemaining 00EF                                          _INT_CallBack 14C7  
                         __size_of_Sensor_setInactive 0008                        Sensor_Acq_ExecutePacket@last_a 003B  
                      Sensor_Acq_ExecutePacket@last_b 003D                  __end_of_MTOUCH_Button_Buttonmask_Get 1767  
               __size_of_MTOUCH_Button_Buttonmask_Get 001E                          _MTOUCH_Button_Buttonmask_Get 1749  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                      __CFG_WDTE$SWDTEN 0000  
                                      __size_of_fputc 0035                                        __size_of_fputs 0026  
                                      __size_of_putch 0005                                        _eusartRxBuffer 013B  
                                      _eusartTxBuffer 0143                             __end_of_Sensor_setSampled 14AC  
              EUSART_SetErrorHandler@interruptHandler 0071                               _Sensor_RawSample_Update 17D8  
                   __end_of_Sensor_setCalibratAcqTime 154C                                             clear_ram0 1488  
                                            _PIE1bits 0091                                     _eusartRxLastError 00C1  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 0026  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0073  
              Sensor_Acq_ExecutePacket@packet_counter 003F                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 006E                __end_of_MTOUCH_Sensor_Sampled_ResetAll 15D8  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                        _MTOUCH_Sensor_Sampled_ResetAll 15C5  
                            ?_MTOUCH_Sensor_SampleAll 0070             __end_of_EUSART_DefaultOverrunErrorHandler 1444  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0070  
                  ?_EUSART_DefaultOverrunErrorHandler 0070                     _EUSART_DefaultOverrunErrorHandler 1440  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0039                              _MTOUCH_Sensor_wasSampled 152E  
                                  _mtouch_time_toScan 00C8                                             _vfpfcnvrt 0678  
                            ??_Button_Baseline_Update 0071                               __end_of_Sensor_isActive 1520  
                              _Sensor_autoCalibration 0E12                            __end_of_MTOUCH_needReburst 0004  
                __size_of_INT_DefaultInterruptHandler 0001                        myButtonReleasedCallback@button 00CC  
                       ?_MTOUCH_Button_Buttonmask_Get 0070                                      __size_of_INT_ISR 0004  
                              _Sensor_loadADCSettings 0F50                                  _MTOUCH_Sensor_Enable 15A0  
                            Button_Tick_helper@button 0073                             ??_Button_Deviation_Update 0071  
                               _Button_Reading_Update 14F6                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                     ??_TMR2_Initialize 0071  
                                 __end_of_MTOUCH_Tick 1440                                     _MTOUCH_Initialize 14DD  
                     __end_of_MTOUCH_Sensor_Calibrate 15A0                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0031  
                                           memcpy@tmp 0076                                            vfprintf@ap 0061  
                                          vfprintf@fp 0064                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 088E  
                          _Button_Baseline_Initialize 0860                                   _EUSART_ErrorHandler 014B  
                                    __size_of___aodiv 00F3                                      __size_of___aomod 00DC  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 004F                              ?_Button_State_NotPressed 00D1  
                                     ___aodiv@divisor 0020                                       ___aodiv@counter 0072  
                                  Button_Service@name 00D8                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0048                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 165B                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 16F3                                              __ptext11 0808  
                                            __ptext20 172C                                              __ptext12 14D2  
                                            __ptext21 0002                                              __ptext13 147C  
                                            __ptext30 17D8                                              __ptext22 143D  
                                            __ptext14 0997                                              __ptext31 1430  
                                            __ptext23 162E                                              __ptext15 1476  
                                            __ptext40 144D                                              __ptext32 0AC7  
                                            __ptext24 17B1                                              __ptext16 1470  
                                            __ptext41 0F50                                              __ptext33 095A  
                                            __ptext25 15C5                                              __ptext17 146A  
                                            __ptext50 155C                                              __ptext42 14BD  
                                            __ptext34 149C                                              __ptext26 14AC  
                                            __ptext18 1464                                              __ptext51 154C  
                                            __ptext43 157D                                              __ptext35 1494  
                                            __ptext27 1618                                              __ptext19 145E  
                                            __ptext60 1434                                              __ptext52 0A72  
                                            __ptext44 1512                                              __ptext36 0EAA  
                                            __ptext28 0D7B                                              __ptext61 15B2  
                                            __ptext53 152E                                              __ptext45 0E12  
                                            __ptext37 0060                                              __ptext29 14A4  
                                            __ptext70 1767                                              __ptext62 088E  
                                            __ptext54 1602                                              __ptext46 1504  
                                            __ptext38 143A                                              __ptext71 1644  
                                            __ptext63 0678                                              __ptext55 0748  
                                            __ptext47 153D                                              __ptext39 1437  
                                            __ptext80 14F6                                              __ptext72 059C  
                                            __ptext64 023B                                              __ptext56 0B23  
                                            __ptext48 14B4                                              __ptext81 09D5  
                                            __ptext73 04A9                                              __ptext65 0A22  
                                            __ptext57 0BF4                                              __ptext49 0833  
                                            __ptext90 142E                                              __ptext82 1673  
                                            __ptext74 1749                                              __ptext66 168B  
                                            __ptext58 0B85                                              __ptext91 170F  
                                            __ptext83 156C                                              __ptext75 16BD  
                                            __ptext67 178B                                              __ptext59 142F  
                                            __ptext92 08BD                                              __ptext84 0C65  
                                            __ptext76 0924                                              __ptext68 08EF  
                                            __ptext93 1440                                              __ptext85 1458  
                                            __ptext77 158E                                              __ptext69 1448  
                                            __ptext94 142D                                              __ptext86 1452  
                                            __ptext78 0CEC                                              __ptext95 1431  
                                            __ptext79 0860                                              __ptext96 165B  
                                            __ptext88 1444                                              __ptext89 14C7  
                           __end_of_MTOUCH_Initialize 14E9                             ??_Sensor_RawSample_Update 0075  
                          __size_of_Sensor_setSampled 0008                                         __size_of_main 011D  
                                       __size_of_dtoa 0151                       __end_of_MTOUCH_Sensor_SampleAll 162E  
                    Sensor_Scanfrequency_Evaluation@i 004D                               ?_EUSART_SetErrorHandler 0071  
       EUSART_SetOverrunErrorHandler@interruptHandler 0071                                              int$flags 007E  
                                            _vfprintf 088E                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 0071                    __end_of_INTERRUPT_InterruptManager 002A  
                          _INTERRUPT_InterruptManager 0004                                             printf@fmt 0067  
               __end_of_EUSART_SetFramingErrorHandler 146A                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 1464                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 005A  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ___aomod@dividend 0028  
                                            _turn_off 00BD                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 01A0                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 0120  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                                _INT_InterruptHandler 00E9                       __end_of_MTOUCH_Button_isPressed 16D8  
                    __end_of_Sensor_getScanGroupIndex 0860                                     __CFG_BOREN$NSLEEP 0000  
                                         _MTOUCH_Tick 143D                                ?_Button_Reading_Update 0070  
                                  _EXT_INT_Initialize 14D2                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                   __size_of_MTOUCH_Button_Initialize 0036                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                      ??_MTOUCH_Button_Buttonmask_Get 0073                              ?_myButtonPressedCallback 00CC  
             __end_of_Sensor_Scanfrequency_Evaluation 0F50              __size_of_Sensor_Scanfrequency_Evaluation 00A6  
                   ??_Sensor_Scanfrequency_Evaluation 0042                      ?_Sensor_Scanfrequency_Evaluation 0041  
                     _Sensor_Scanfrequency_Evaluation 0EAA                               ?_PIN_MANAGER_Initialize 0070  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 1464  
                                   __CFG_CLKOUTEN$OFF 0000                                   ?_EXT_INT_Initialize 0070  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 1476  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 1470  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 07FC  
                                            printf@ap 00CB                                    _EUSART_Receive_ISR 08BD  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                              ?_INT_SetInterruptHandler 0071  
                                     ___aomod@divisor 0020                          __end_of_Sensor_Sampled_Reset 14B4  
                                         ??_vfpfcnvrt 0051                                      ??_TMR2_StopTimer 0071  
                                     ___aomod@counter 0072                       __end_of_TMR2_LoadPeriodRegister 1452  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 184B  
                                       __pstringtext2 1850                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 181C  
                                       __pstringtext6 1830                                         __pstringtext7 183E  
                                       __pstringtext8 0000                                  ??_EXT_INT_Initialize 0073  
                                 ?_EUSART_Receive_ISR 0070                         ??_MTOUCH_Button_InitializeAll 007B  
                            ??_Button_DefaultCallback 007C                         ??_MTOUCH_Sensor_InitializeAll 0079  
                Sensor_Acq_ExecutePacket@activeSensor 003A                      __size_of_MTOUCH_Sensor_Calibrate 0012  
                              ??_MTOUCH_Sensor_Enable 0075                     Sensor_isCalibratingAcqTime@sensor 0071  
                        __size_of_Sensor_isCalibrated 000A                              ??_Sensor_DefaultCallback 0072  
                        __end_of_Sensor_setCalibrated 1512                  __end_of_Button_Reading_Update_Helper 0A22  
               __size_of_Button_Reading_Update_Helper 004D                          _Button_Reading_Update_Helper 09D5  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 00D1                                    EUSART_Write@txData 0072  
                        __size_of_EUSART_Transmit_ISR 001D                                          ___aodiv@sign 0073  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 16BD  
                              _Button_Baseline_Update 0CEC                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
                                        ___aomod@sign 0073  
