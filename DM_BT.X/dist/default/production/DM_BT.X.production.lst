

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jul 07 18:54:57 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    86                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2,group=1
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	intentry,global,class=CODE,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	dabs	1,0x7E,2
   125  0000                     
   126                           ; Version 2.05
   127                           ; Generated 20/12/2018 GMT
   128                           ; 
   129                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   130                           ; All rights reserved.
   131                           ; 
   132                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   133                           ; 
   134                           ; Redistribution and use in source and binary forms, with or without modification, are
   135                           ; permitted provided that the following conditions are met:
   136                           ; 
   137                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   138                           ;        conditions and the following disclaimer.
   139                           ; 
   140                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   141                           ;        of conditions and the following disclaimer in the documentation and/or other
   142                           ;        materials provided with the distribution.
   143                           ; 
   144                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   145                           ;        software without specific prior written permission.
   146                           ; 
   147                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   148                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   149                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   150                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   151                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   152                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   153                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   154                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   155                           ; 
   156                           ; 
   157                           ; Code-generator required, PIC16LF1559 Definitions
   158                           ; 
   159                           ; SFR Addresses
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020C                     	;# 
   228  020D                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0391                     	;# 
   245  0392                     	;# 
   246  0393                     	;# 
   247  0394                     	;# 
   248  0395                     	;# 
   249  0396                     	;# 
   250  0611                     	;# 
   251  0612                     	;# 
   252  0613                     	;# 
   253  0613                     	;# 
   254  0614                     	;# 
   255  0615                     	;# 
   256  0616                     	;# 
   257  0616                     	;# 
   258  0711                     	;# 
   259  0711                     	;# 
   260  0711                     	;# 
   261  0712                     	;# 
   262  0712                     	;# 
   263  0713                     	;# 
   264  0713                     	;# 
   265  0713                     	;# 
   266  0714                     	;# 
   267  0714                     	;# 
   268  0714                     	;# 
   269  0715                     	;# 
   270  0715                     	;# 
   271  0716                     	;# 
   272  0716                     	;# 
   273  0716                     	;# 
   274  0716                     	;# 
   275  0717                     	;# 
   276  0717                     	;# 
   277  0717                     	;# 
   278  0717                     	;# 
   279  0718                     	;# 
   280  0718                     	;# 
   281  0718                     	;# 
   282  0719                     	;# 
   283  0719                     	;# 
   284  0719                     	;# 
   285  0719                     	;# 
   286  071A                     	;# 
   287  071A                     	;# 
   288  071A                     	;# 
   289  071A                     	;# 
   290  071A                     	;# 
   291  071B                     	;# 
   292  071B                     	;# 
   293  071C                     	;# 
   294  071C                     	;# 
   295  071C                     	;# 
   296  071C                     	;# 
   297  071C                     	;# 
   298  071D                     	;# 
   299  071D                     	;# 
   300  071E                     	;# 
   301  071E                     	;# 
   302  0791                     	;# 
   303  0791                     	;# 
   304  0793                     	;# 
   305  0793                     	;# 
   306  0794                     	;# 
   307  0794                     	;# 
   308  0796                     	;# 
   309  0796                     	;# 
   310  0796                     	;# 
   311  0797                     	;# 
   312  0797                     	;# 
   313  0797                     	;# 
   314  0798                     	;# 
   315  0798                     	;# 
   316  0799                     	;# 
   317  0799                     	;# 
   318  0799                     	;# 
   319  079A                     	;# 
   320  079A                     	;# 
   321  079A                     	;# 
   322  079B                     	;# 
   323  079C                     	;# 
   324  079C                     	;# 
   325  079C                     	;# 
   326  079D                     	;# 
   327  079E                     	;# 
   328  079E                     	;# 
   329  0F8C                     	;# 
   330  0F8D                     	;# 
   331  0F91                     	;# 
   332  0F96                     	;# 
   333  0F97                     	;# 
   334  0F9C                     	;# 
   335  0F9D                     	;# 
   336  0F9E                     	;# 
   337  0FE3                     	;# 
   338  0FE4                     	;# 
   339  0FE5                     	;# 
   340  0FE6                     	;# 
   341  0FE7                     	;# 
   342  0FE8                     	;# 
   343  0FE9                     	;# 
   344  0FEA                     	;# 
   345  0FEB                     	;# 
   346  0FED                     	;# 
   347  0FEE                     	;# 
   348  0FEF                     	;# 
   349  0000                     	;# 
   350  0001                     	;# 
   351  0002                     	;# 
   352  0003                     	;# 
   353  0004                     	;# 
   354  0005                     	;# 
   355  0006                     	;# 
   356  0007                     	;# 
   357  0008                     	;# 
   358  0009                     	;# 
   359  000A                     	;# 
   360  000B                     	;# 
   361  000C                     	;# 
   362  000D                     	;# 
   363  000E                     	;# 
   364  0011                     	;# 
   365  0012                     	;# 
   366  0015                     	;# 
   367  0016                     	;# 
   368  0016                     	;# 
   369  0017                     	;# 
   370  0018                     	;# 
   371  0019                     	;# 
   372  001A                     	;# 
   373  001B                     	;# 
   374  001C                     	;# 
   375  008C                     	;# 
   376  008D                     	;# 
   377  008E                     	;# 
   378  0091                     	;# 
   379  0092                     	;# 
   380  0095                     	;# 
   381  0096                     	;# 
   382  0097                     	;# 
   383  0099                     	;# 
   384  009A                     	;# 
   385  009B                     	;# 
   386  009B                     	;# 
   387  009C                     	;# 
   388  009D                     	;# 
   389  009E                     	;# 
   390  009F                     	;# 
   391  010C                     	;# 
   392  010D                     	;# 
   393  010E                     	;# 
   394  0116                     	;# 
   395  0117                     	;# 
   396  011D                     	;# 
   397  018C                     	;# 
   398  018D                     	;# 
   399  018E                     	;# 
   400  0191                     	;# 
   401  0191                     	;# 
   402  0192                     	;# 
   403  0193                     	;# 
   404  0193                     	;# 
   405  0194                     	;# 
   406  0195                     	;# 
   407  0196                     	;# 
   408  0199                     	;# 
   409  019A                     	;# 
   410  019B                     	;# 
   411  019B                     	;# 
   412  019C                     	;# 
   413  019D                     	;# 
   414  019E                     	;# 
   415  019F                     	;# 
   416  020C                     	;# 
   417  020D                     	;# 
   418  0211                     	;# 
   419  0211                     	;# 
   420  0212                     	;# 
   421  0212                     	;# 
   422  0213                     	;# 
   423  0213                     	;# 
   424  0214                     	;# 
   425  0214                     	;# 
   426  0215                     	;# 
   427  0215                     	;# 
   428  0215                     	;# 
   429  0216                     	;# 
   430  0216                     	;# 
   431  0217                     	;# 
   432  0217                     	;# 
   433  0391                     	;# 
   434  0392                     	;# 
   435  0393                     	;# 
   436  0394                     	;# 
   437  0395                     	;# 
   438  0396                     	;# 
   439  0611                     	;# 
   440  0612                     	;# 
   441  0613                     	;# 
   442  0613                     	;# 
   443  0614                     	;# 
   444  0615                     	;# 
   445  0616                     	;# 
   446  0616                     	;# 
   447  0711                     	;# 
   448  0711                     	;# 
   449  0711                     	;# 
   450  0712                     	;# 
   451  0712                     	;# 
   452  0713                     	;# 
   453  0713                     	;# 
   454  0713                     	;# 
   455  0714                     	;# 
   456  0714                     	;# 
   457  0714                     	;# 
   458  0715                     	;# 
   459  0715                     	;# 
   460  0716                     	;# 
   461  0716                     	;# 
   462  0716                     	;# 
   463  0716                     	;# 
   464  0717                     	;# 
   465  0717                     	;# 
   466  0717                     	;# 
   467  0717                     	;# 
   468  0718                     	;# 
   469  0718                     	;# 
   470  0718                     	;# 
   471  0719                     	;# 
   472  0719                     	;# 
   473  0719                     	;# 
   474  0719                     	;# 
   475  071A                     	;# 
   476  071A                     	;# 
   477  071A                     	;# 
   478  071A                     	;# 
   479  071A                     	;# 
   480  071B                     	;# 
   481  071B                     	;# 
   482  071C                     	;# 
   483  071C                     	;# 
   484  071C                     	;# 
   485  071C                     	;# 
   486  071C                     	;# 
   487  071D                     	;# 
   488  071D                     	;# 
   489  071E                     	;# 
   490  071E                     	;# 
   491  0791                     	;# 
   492  0791                     	;# 
   493  0793                     	;# 
   494  0793                     	;# 
   495  0794                     	;# 
   496  0794                     	;# 
   497  0796                     	;# 
   498  0796                     	;# 
   499  0796                     	;# 
   500  0797                     	;# 
   501  0797                     	;# 
   502  0797                     	;# 
   503  0798                     	;# 
   504  0798                     	;# 
   505  0799                     	;# 
   506  0799                     	;# 
   507  0799                     	;# 
   508  079A                     	;# 
   509  079A                     	;# 
   510  079A                     	;# 
   511  079B                     	;# 
   512  079C                     	;# 
   513  079C                     	;# 
   514  079C                     	;# 
   515  079D                     	;# 
   516  079E                     	;# 
   517  079E                     	;# 
   518  0F8C                     	;# 
   519  0F8D                     	;# 
   520  0F91                     	;# 
   521  0F96                     	;# 
   522  0F97                     	;# 
   523  0F9C                     	;# 
   524  0F9D                     	;# 
   525  0F9E                     	;# 
   526  0FE3                     	;# 
   527  0FE4                     	;# 
   528  0FE5                     	;# 
   529  0FE6                     	;# 
   530  0FE7                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEB                     	;# 
   535  0FED                     	;# 
   536  0FEE                     	;# 
   537  0FEF                     	;# 
   538  0000                     	;# 
   539  0001                     	;# 
   540  0002                     	;# 
   541  0003                     	;# 
   542  0004                     	;# 
   543  0005                     	;# 
   544  0006                     	;# 
   545  0007                     	;# 
   546  0008                     	;# 
   547  0009                     	;# 
   548  000A                     	;# 
   549  000B                     	;# 
   550  000C                     	;# 
   551  000D                     	;# 
   552  000E                     	;# 
   553  0011                     	;# 
   554  0012                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0016                     	;# 
   558  0017                     	;# 
   559  0018                     	;# 
   560  0019                     	;# 
   561  001A                     	;# 
   562  001B                     	;# 
   563  001C                     	;# 
   564  008C                     	;# 
   565  008D                     	;# 
   566  008E                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0095                     	;# 
   570  0096                     	;# 
   571  0097                     	;# 
   572  0099                     	;# 
   573  009A                     	;# 
   574  009B                     	;# 
   575  009B                     	;# 
   576  009C                     	;# 
   577  009D                     	;# 
   578  009E                     	;# 
   579  009F                     	;# 
   580  010C                     	;# 
   581  010D                     	;# 
   582  010E                     	;# 
   583  0116                     	;# 
   584  0117                     	;# 
   585  011D                     	;# 
   586  018C                     	;# 
   587  018D                     	;# 
   588  018E                     	;# 
   589  0191                     	;# 
   590  0191                     	;# 
   591  0192                     	;# 
   592  0193                     	;# 
   593  0193                     	;# 
   594  0194                     	;# 
   595  0195                     	;# 
   596  0196                     	;# 
   597  0199                     	;# 
   598  019A                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019C                     	;# 
   602  019D                     	;# 
   603  019E                     	;# 
   604  019F                     	;# 
   605  020C                     	;# 
   606  020D                     	;# 
   607  0211                     	;# 
   608  0211                     	;# 
   609  0212                     	;# 
   610  0212                     	;# 
   611  0213                     	;# 
   612  0213                     	;# 
   613  0214                     	;# 
   614  0214                     	;# 
   615  0215                     	;# 
   616  0215                     	;# 
   617  0215                     	;# 
   618  0216                     	;# 
   619  0216                     	;# 
   620  0217                     	;# 
   621  0217                     	;# 
   622  0391                     	;# 
   623  0392                     	;# 
   624  0393                     	;# 
   625  0394                     	;# 
   626  0395                     	;# 
   627  0396                     	;# 
   628  0611                     	;# 
   629  0612                     	;# 
   630  0613                     	;# 
   631  0613                     	;# 
   632  0614                     	;# 
   633  0615                     	;# 
   634  0616                     	;# 
   635  0616                     	;# 
   636  0711                     	;# 
   637  0711                     	;# 
   638  0711                     	;# 
   639  0712                     	;# 
   640  0712                     	;# 
   641  0713                     	;# 
   642  0713                     	;# 
   643  0713                     	;# 
   644  0714                     	;# 
   645  0714                     	;# 
   646  0714                     	;# 
   647  0715                     	;# 
   648  0715                     	;# 
   649  0716                     	;# 
   650  0716                     	;# 
   651  0716                     	;# 
   652  0716                     	;# 
   653  0717                     	;# 
   654  0717                     	;# 
   655  0717                     	;# 
   656  0717                     	;# 
   657  0718                     	;# 
   658  0718                     	;# 
   659  0718                     	;# 
   660  0719                     	;# 
   661  0719                     	;# 
   662  0719                     	;# 
   663  0719                     	;# 
   664  071A                     	;# 
   665  071A                     	;# 
   666  071A                     	;# 
   667  071A                     	;# 
   668  071A                     	;# 
   669  071B                     	;# 
   670  071B                     	;# 
   671  071C                     	;# 
   672  071C                     	;# 
   673  071C                     	;# 
   674  071C                     	;# 
   675  071C                     	;# 
   676  071D                     	;# 
   677  071D                     	;# 
   678  071E                     	;# 
   679  071E                     	;# 
   680  0791                     	;# 
   681  0791                     	;# 
   682  0793                     	;# 
   683  0793                     	;# 
   684  0794                     	;# 
   685  0794                     	;# 
   686  0796                     	;# 
   687  0796                     	;# 
   688  0796                     	;# 
   689  0797                     	;# 
   690  0797                     	;# 
   691  0797                     	;# 
   692  0798                     	;# 
   693  0798                     	;# 
   694  0799                     	;# 
   695  0799                     	;# 
   696  0799                     	;# 
   697  079A                     	;# 
   698  079A                     	;# 
   699  079A                     	;# 
   700  079B                     	;# 
   701  079C                     	;# 
   702  079C                     	;# 
   703  079C                     	;# 
   704  079D                     	;# 
   705  079E                     	;# 
   706  079E                     	;# 
   707  0F8C                     	;# 
   708  0F8D                     	;# 
   709  0F91                     	;# 
   710  0F96                     	;# 
   711  0F97                     	;# 
   712  0F9C                     	;# 
   713  0F9D                     	;# 
   714  0F9E                     	;# 
   715  0FE3                     	;# 
   716  0FE4                     	;# 
   717  0FE5                     	;# 
   718  0FE6                     	;# 
   719  0FE7                     	;# 
   720  0FE8                     	;# 
   721  0FE9                     	;# 
   722  0FEA                     	;# 
   723  0FEB                     	;# 
   724  0FED                     	;# 
   725  0FEE                     	;# 
   726  0FEF                     	;# 
   727  0000                     	;# 
   728  0001                     	;# 
   729  0002                     	;# 
   730  0003                     	;# 
   731  0004                     	;# 
   732  0005                     	;# 
   733  0006                     	;# 
   734  0007                     	;# 
   735  0008                     	;# 
   736  0009                     	;# 
   737  000A                     	;# 
   738  000B                     	;# 
   739  000C                     	;# 
   740  000D                     	;# 
   741  000E                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0015                     	;# 
   745  0016                     	;# 
   746  0016                     	;# 
   747  0017                     	;# 
   748  0018                     	;# 
   749  0019                     	;# 
   750  001A                     	;# 
   751  001B                     	;# 
   752  001C                     	;# 
   753  008C                     	;# 
   754  008D                     	;# 
   755  008E                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0095                     	;# 
   759  0096                     	;# 
   760  0097                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009B                     	;# 
   765  009C                     	;# 
   766  009D                     	;# 
   767  009E                     	;# 
   768  009F                     	;# 
   769  010C                     	;# 
   770  010D                     	;# 
   771  010E                     	;# 
   772  0116                     	;# 
   773  0117                     	;# 
   774  011D                     	;# 
   775  018C                     	;# 
   776  018D                     	;# 
   777  018E                     	;# 
   778  0191                     	;# 
   779  0191                     	;# 
   780  0192                     	;# 
   781  0193                     	;# 
   782  0193                     	;# 
   783  0194                     	;# 
   784  0195                     	;# 
   785  0196                     	;# 
   786  0199                     	;# 
   787  019A                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020C                     	;# 
   795  020D                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0391                     	;# 
   812  0392                     	;# 
   813  0393                     	;# 
   814  0394                     	;# 
   815  0395                     	;# 
   816  0396                     	;# 
   817  0611                     	;# 
   818  0612                     	;# 
   819  0613                     	;# 
   820  0613                     	;# 
   821  0614                     	;# 
   822  0615                     	;# 
   823  0616                     	;# 
   824  0616                     	;# 
   825  0711                     	;# 
   826  0711                     	;# 
   827  0711                     	;# 
   828  0712                     	;# 
   829  0712                     	;# 
   830  0713                     	;# 
   831  0713                     	;# 
   832  0713                     	;# 
   833  0714                     	;# 
   834  0714                     	;# 
   835  0714                     	;# 
   836  0715                     	;# 
   837  0715                     	;# 
   838  0716                     	;# 
   839  0716                     	;# 
   840  0716                     	;# 
   841  0716                     	;# 
   842  0717                     	;# 
   843  0717                     	;# 
   844  0717                     	;# 
   845  0717                     	;# 
   846  0718                     	;# 
   847  0718                     	;# 
   848  0718                     	;# 
   849  0719                     	;# 
   850  0719                     	;# 
   851  0719                     	;# 
   852  0719                     	;# 
   853  071A                     	;# 
   854  071A                     	;# 
   855  071A                     	;# 
   856  071A                     	;# 
   857  071A                     	;# 
   858  071B                     	;# 
   859  071B                     	;# 
   860  071C                     	;# 
   861  071C                     	;# 
   862  071C                     	;# 
   863  071C                     	;# 
   864  071C                     	;# 
   865  071D                     	;# 
   866  071D                     	;# 
   867  071E                     	;# 
   868  071E                     	;# 
   869  0791                     	;# 
   870  0791                     	;# 
   871  0793                     	;# 
   872  0793                     	;# 
   873  0794                     	;# 
   874  0794                     	;# 
   875  0796                     	;# 
   876  0796                     	;# 
   877  0796                     	;# 
   878  0797                     	;# 
   879  0797                     	;# 
   880  0797                     	;# 
   881  0798                     	;# 
   882  0798                     	;# 
   883  0799                     	;# 
   884  0799                     	;# 
   885  0799                     	;# 
   886  079A                     	;# 
   887  079A                     	;# 
   888  079A                     	;# 
   889  079B                     	;# 
   890  079C                     	;# 
   891  079C                     	;# 
   892  079C                     	;# 
   893  079D                     	;# 
   894  079E                     	;# 
   895  079E                     	;# 
   896  0F8C                     	;# 
   897  0F8D                     	;# 
   898  0F91                     	;# 
   899  0F96                     	;# 
   900  0F97                     	;# 
   901  0F9C                     	;# 
   902  0F9D                     	;# 
   903  0F9E                     	;# 
   904  0FE3                     	;# 
   905  0FE4                     	;# 
   906  0FE5                     	;# 
   907  0FE6                     	;# 
   908  0FE7                     	;# 
   909  0FE8                     	;# 
   910  0FE9                     	;# 
   911  0FEA                     	;# 
   912  0FEB                     	;# 
   913  0FED                     	;# 
   914  0FEE                     	;# 
   915  0FEF                     	;# 
   916  0000                     	;# 
   917  0001                     	;# 
   918  0002                     	;# 
   919  0003                     	;# 
   920  0004                     	;# 
   921  0005                     	;# 
   922  0006                     	;# 
   923  0007                     	;# 
   924  0008                     	;# 
   925  0009                     	;# 
   926  000A                     	;# 
   927  000B                     	;# 
   928  000C                     	;# 
   929  000D                     	;# 
   930  000E                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008D                     	;# 
   944  008E                     	;# 
   945  0091                     	;# 
   946  0092                     	;# 
   947  0095                     	;# 
   948  0096                     	;# 
   949  0097                     	;# 
   950  0099                     	;# 
   951  009A                     	;# 
   952  009B                     	;# 
   953  009B                     	;# 
   954  009C                     	;# 
   955  009D                     	;# 
   956  009E                     	;# 
   957  009F                     	;# 
   958  010C                     	;# 
   959  010D                     	;# 
   960  010E                     	;# 
   961  0116                     	;# 
   962  0117                     	;# 
   963  011D                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0199                     	;# 
   976  019A                     	;# 
   977  019B                     	;# 
   978  019B                     	;# 
   979  019C                     	;# 
   980  019D                     	;# 
   981  019E                     	;# 
   982  019F                     	;# 
   983  020C                     	;# 
   984  020D                     	;# 
   985  0211                     	;# 
   986  0211                     	;# 
   987  0212                     	;# 
   988  0212                     	;# 
   989  0213                     	;# 
   990  0213                     	;# 
   991  0214                     	;# 
   992  0214                     	;# 
   993  0215                     	;# 
   994  0215                     	;# 
   995  0215                     	;# 
   996  0216                     	;# 
   997  0216                     	;# 
   998  0217                     	;# 
   999  0217                     	;# 
  1000  0391                     	;# 
  1001  0392                     	;# 
  1002  0393                     	;# 
  1003  0394                     	;# 
  1004  0395                     	;# 
  1005  0396                     	;# 
  1006  0611                     	;# 
  1007  0612                     	;# 
  1008  0613                     	;# 
  1009  0613                     	;# 
  1010  0614                     	;# 
  1011  0615                     	;# 
  1012  0616                     	;# 
  1013  0616                     	;# 
  1014  0711                     	;# 
  1015  0711                     	;# 
  1016  0711                     	;# 
  1017  0712                     	;# 
  1018  0712                     	;# 
  1019  0713                     	;# 
  1020  0713                     	;# 
  1021  0713                     	;# 
  1022  0714                     	;# 
  1023  0714                     	;# 
  1024  0714                     	;# 
  1025  0715                     	;# 
  1026  0715                     	;# 
  1027  0716                     	;# 
  1028  0716                     	;# 
  1029  0716                     	;# 
  1030  0716                     	;# 
  1031  0717                     	;# 
  1032  0717                     	;# 
  1033  0717                     	;# 
  1034  0717                     	;# 
  1035  0718                     	;# 
  1036  0718                     	;# 
  1037  0718                     	;# 
  1038  0719                     	;# 
  1039  0719                     	;# 
  1040  0719                     	;# 
  1041  0719                     	;# 
  1042  071A                     	;# 
  1043  071A                     	;# 
  1044  071A                     	;# 
  1045  071A                     	;# 
  1046  071A                     	;# 
  1047  071B                     	;# 
  1048  071B                     	;# 
  1049  071C                     	;# 
  1050  071C                     	;# 
  1051  071C                     	;# 
  1052  071C                     	;# 
  1053  071C                     	;# 
  1054  071D                     	;# 
  1055  071D                     	;# 
  1056  071E                     	;# 
  1057  071E                     	;# 
  1058  0791                     	;# 
  1059  0791                     	;# 
  1060  0793                     	;# 
  1061  0793                     	;# 
  1062  0794                     	;# 
  1063  0794                     	;# 
  1064  0796                     	;# 
  1065  0796                     	;# 
  1066  0796                     	;# 
  1067  0797                     	;# 
  1068  0797                     	;# 
  1069  0797                     	;# 
  1070  0798                     	;# 
  1071  0798                     	;# 
  1072  0799                     	;# 
  1073  0799                     	;# 
  1074  0799                     	;# 
  1075  079A                     	;# 
  1076  079A                     	;# 
  1077  079A                     	;# 
  1078  079B                     	;# 
  1079  079C                     	;# 
  1080  079C                     	;# 
  1081  079C                     	;# 
  1082  079D                     	;# 
  1083  079E                     	;# 
  1084  079E                     	;# 
  1085  0F8C                     	;# 
  1086  0F8D                     	;# 
  1087  0F91                     	;# 
  1088  0F96                     	;# 
  1089  0F97                     	;# 
  1090  0F9C                     	;# 
  1091  0F9D                     	;# 
  1092  0F9E                     	;# 
  1093  0FE3                     	;# 
  1094  0FE4                     	;# 
  1095  0FE5                     	;# 
  1096  0FE6                     	;# 
  1097  0FE7                     	;# 
  1098  0FE8                     	;# 
  1099  0FE9                     	;# 
  1100  0FEA                     	;# 
  1101  0FEB                     	;# 
  1102  0FED                     	;# 
  1103  0FEE                     	;# 
  1104  0FEF                     	;# 
  1105  0000                     	;# 
  1106  0001                     	;# 
  1107  0002                     	;# 
  1108  0003                     	;# 
  1109  0004                     	;# 
  1110  0005                     	;# 
  1111  0006                     	;# 
  1112  0007                     	;# 
  1113  0008                     	;# 
  1114  0009                     	;# 
  1115  000A                     	;# 
  1116  000B                     	;# 
  1117  000C                     	;# 
  1118  000D                     	;# 
  1119  000E                     	;# 
  1120  0011                     	;# 
  1121  0012                     	;# 
  1122  0015                     	;# 
  1123  0016                     	;# 
  1124  0016                     	;# 
  1125  0017                     	;# 
  1126  0018                     	;# 
  1127  0019                     	;# 
  1128  001A                     	;# 
  1129  001B                     	;# 
  1130  001C                     	;# 
  1131  008C                     	;# 
  1132  008D                     	;# 
  1133  008E                     	;# 
  1134  0091                     	;# 
  1135  0092                     	;# 
  1136  0095                     	;# 
  1137  0096                     	;# 
  1138  0097                     	;# 
  1139  0099                     	;# 
  1140  009A                     	;# 
  1141  009B                     	;# 
  1142  009B                     	;# 
  1143  009C                     	;# 
  1144  009D                     	;# 
  1145  009E                     	;# 
  1146  009F                     	;# 
  1147  010C                     	;# 
  1148  010D                     	;# 
  1149  010E                     	;# 
  1150  0116                     	;# 
  1151  0117                     	;# 
  1152  011D                     	;# 
  1153  018C                     	;# 
  1154  018D                     	;# 
  1155  018E                     	;# 
  1156  0191                     	;# 
  1157  0191                     	;# 
  1158  0192                     	;# 
  1159  0193                     	;# 
  1160  0193                     	;# 
  1161  0194                     	;# 
  1162  0195                     	;# 
  1163  0196                     	;# 
  1164  0199                     	;# 
  1165  019A                     	;# 
  1166  019B                     	;# 
  1167  019B                     	;# 
  1168  019C                     	;# 
  1169  019D                     	;# 
  1170  019E                     	;# 
  1171  019F                     	;# 
  1172  020C                     	;# 
  1173  020D                     	;# 
  1174  0211                     	;# 
  1175  0211                     	;# 
  1176  0212                     	;# 
  1177  0212                     	;# 
  1178  0213                     	;# 
  1179  0213                     	;# 
  1180  0214                     	;# 
  1181  0214                     	;# 
  1182  0215                     	;# 
  1183  0215                     	;# 
  1184  0215                     	;# 
  1185  0216                     	;# 
  1186  0216                     	;# 
  1187  0217                     	;# 
  1188  0217                     	;# 
  1189  0391                     	;# 
  1190  0392                     	;# 
  1191  0393                     	;# 
  1192  0394                     	;# 
  1193  0395                     	;# 
  1194  0396                     	;# 
  1195  0611                     	;# 
  1196  0612                     	;# 
  1197  0613                     	;# 
  1198  0613                     	;# 
  1199  0614                     	;# 
  1200  0615                     	;# 
  1201  0616                     	;# 
  1202  0616                     	;# 
  1203  0711                     	;# 
  1204  0711                     	;# 
  1205  0711                     	;# 
  1206  0712                     	;# 
  1207  0712                     	;# 
  1208  0713                     	;# 
  1209  0713                     	;# 
  1210  0713                     	;# 
  1211  0714                     	;# 
  1212  0714                     	;# 
  1213  0714                     	;# 
  1214  0715                     	;# 
  1215  0715                     	;# 
  1216  0716                     	;# 
  1217  0716                     	;# 
  1218  0716                     	;# 
  1219  0716                     	;# 
  1220  0717                     	;# 
  1221  0717                     	;# 
  1222  0717                     	;# 
  1223  0717                     	;# 
  1224  0718                     	;# 
  1225  0718                     	;# 
  1226  0718                     	;# 
  1227  0719                     	;# 
  1228  0719                     	;# 
  1229  0719                     	;# 
  1230  0719                     	;# 
  1231  071A                     	;# 
  1232  071A                     	;# 
  1233  071A                     	;# 
  1234  071A                     	;# 
  1235  071A                     	;# 
  1236  071B                     	;# 
  1237  071B                     	;# 
  1238  071C                     	;# 
  1239  071C                     	;# 
  1240  071C                     	;# 
  1241  071C                     	;# 
  1242  071C                     	;# 
  1243  071D                     	;# 
  1244  071D                     	;# 
  1245  071E                     	;# 
  1246  071E                     	;# 
  1247  0791                     	;# 
  1248  0791                     	;# 
  1249  0793                     	;# 
  1250  0793                     	;# 
  1251  0794                     	;# 
  1252  0794                     	;# 
  1253  0796                     	;# 
  1254  0796                     	;# 
  1255  0796                     	;# 
  1256  0797                     	;# 
  1257  0797                     	;# 
  1258  0797                     	;# 
  1259  0798                     	;# 
  1260  0798                     	;# 
  1261  0799                     	;# 
  1262  0799                     	;# 
  1263  0799                     	;# 
  1264  079A                     	;# 
  1265  079A                     	;# 
  1266  079A                     	;# 
  1267  079B                     	;# 
  1268  079C                     	;# 
  1269  079C                     	;# 
  1270  079C                     	;# 
  1271  079D                     	;# 
  1272  079E                     	;# 
  1273  079E                     	;# 
  1274  0F8C                     	;# 
  1275  0F8D                     	;# 
  1276  0F91                     	;# 
  1277  0F96                     	;# 
  1278  0F97                     	;# 
  1279  0F9C                     	;# 
  1280  0F9D                     	;# 
  1281  0F9E                     	;# 
  1282  0FE3                     	;# 
  1283  0FE4                     	;# 
  1284  0FE5                     	;# 
  1285  0FE6                     	;# 
  1286  0FE7                     	;# 
  1287  0FE8                     	;# 
  1288  0FE9                     	;# 
  1289  0FEA                     	;# 
  1290  0FEB                     	;# 
  1291  0FED                     	;# 
  1292  0FEE                     	;# 
  1293  0FEF                     	;# 
  1294  0000                     	;# 
  1295  0001                     	;# 
  1296  0002                     	;# 
  1297  0003                     	;# 
  1298  0004                     	;# 
  1299  0005                     	;# 
  1300  0006                     	;# 
  1301  0007                     	;# 
  1302  0008                     	;# 
  1303  0009                     	;# 
  1304  000A                     	;# 
  1305  000B                     	;# 
  1306  000C                     	;# 
  1307  000D                     	;# 
  1308  000E                     	;# 
  1309  0011                     	;# 
  1310  0012                     	;# 
  1311  0015                     	;# 
  1312  0016                     	;# 
  1313  0016                     	;# 
  1314  0017                     	;# 
  1315  0018                     	;# 
  1316  0019                     	;# 
  1317  001A                     	;# 
  1318  001B                     	;# 
  1319  001C                     	;# 
  1320  008C                     	;# 
  1321  008D                     	;# 
  1322  008E                     	;# 
  1323  0091                     	;# 
  1324  0092                     	;# 
  1325  0095                     	;# 
  1326  0096                     	;# 
  1327  0097                     	;# 
  1328  0099                     	;# 
  1329  009A                     	;# 
  1330  009B                     	;# 
  1331  009B                     	;# 
  1332  009C                     	;# 
  1333  009D                     	;# 
  1334  009E                     	;# 
  1335  009F                     	;# 
  1336  010C                     	;# 
  1337  010D                     	;# 
  1338  010E                     	;# 
  1339  0116                     	;# 
  1340  0117                     	;# 
  1341  011D                     	;# 
  1342  018C                     	;# 
  1343  018D                     	;# 
  1344  018E                     	;# 
  1345  0191                     	;# 
  1346  0191                     	;# 
  1347  0192                     	;# 
  1348  0193                     	;# 
  1349  0193                     	;# 
  1350  0194                     	;# 
  1351  0195                     	;# 
  1352  0196                     	;# 
  1353  0199                     	;# 
  1354  019A                     	;# 
  1355  019B                     	;# 
  1356  019B                     	;# 
  1357  019C                     	;# 
  1358  019D                     	;# 
  1359  019E                     	;# 
  1360  019F                     	;# 
  1361  020C                     	;# 
  1362  020D                     	;# 
  1363  0211                     	;# 
  1364  0211                     	;# 
  1365  0212                     	;# 
  1366  0212                     	;# 
  1367  0213                     	;# 
  1368  0213                     	;# 
  1369  0214                     	;# 
  1370  0214                     	;# 
  1371  0215                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0216                     	;# 
  1375  0216                     	;# 
  1376  0217                     	;# 
  1377  0217                     	;# 
  1378  0391                     	;# 
  1379  0392                     	;# 
  1380  0393                     	;# 
  1381  0394                     	;# 
  1382  0395                     	;# 
  1383  0396                     	;# 
  1384  0611                     	;# 
  1385  0612                     	;# 
  1386  0613                     	;# 
  1387  0613                     	;# 
  1388  0614                     	;# 
  1389  0615                     	;# 
  1390  0616                     	;# 
  1391  0616                     	;# 
  1392  0711                     	;# 
  1393  0711                     	;# 
  1394  0711                     	;# 
  1395  0712                     	;# 
  1396  0712                     	;# 
  1397  0713                     	;# 
  1398  0713                     	;# 
  1399  0713                     	;# 
  1400  0714                     	;# 
  1401  0714                     	;# 
  1402  0714                     	;# 
  1403  0715                     	;# 
  1404  0715                     	;# 
  1405  0716                     	;# 
  1406  0716                     	;# 
  1407  0716                     	;# 
  1408  0716                     	;# 
  1409  0717                     	;# 
  1410  0717                     	;# 
  1411  0717                     	;# 
  1412  0717                     	;# 
  1413  0718                     	;# 
  1414  0718                     	;# 
  1415  0718                     	;# 
  1416  0719                     	;# 
  1417  0719                     	;# 
  1418  0719                     	;# 
  1419  0719                     	;# 
  1420  071A                     	;# 
  1421  071A                     	;# 
  1422  071A                     	;# 
  1423  071A                     	;# 
  1424  071A                     	;# 
  1425  071B                     	;# 
  1426  071B                     	;# 
  1427  071C                     	;# 
  1428  071C                     	;# 
  1429  071C                     	;# 
  1430  071C                     	;# 
  1431  071C                     	;# 
  1432  071D                     	;# 
  1433  071D                     	;# 
  1434  071E                     	;# 
  1435  071E                     	;# 
  1436  0791                     	;# 
  1437  0791                     	;# 
  1438  0793                     	;# 
  1439  0793                     	;# 
  1440  0794                     	;# 
  1441  0794                     	;# 
  1442  0796                     	;# 
  1443  0796                     	;# 
  1444  0796                     	;# 
  1445  0797                     	;# 
  1446  0797                     	;# 
  1447  0797                     	;# 
  1448  0798                     	;# 
  1449  0798                     	;# 
  1450  0799                     	;# 
  1451  0799                     	;# 
  1452  0799                     	;# 
  1453  079A                     	;# 
  1454  079A                     	;# 
  1455  079A                     	;# 
  1456  079B                     	;# 
  1457  079C                     	;# 
  1458  079C                     	;# 
  1459  079C                     	;# 
  1460  079D                     	;# 
  1461  079E                     	;# 
  1462  079E                     	;# 
  1463  0F8C                     	;# 
  1464  0F8D                     	;# 
  1465  0F91                     	;# 
  1466  0F96                     	;# 
  1467  0F97                     	;# 
  1468  0F9C                     	;# 
  1469  0F9D                     	;# 
  1470  0F9E                     	;# 
  1471  0FE3                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0011                     	;# 
  1499  0012                     	;# 
  1500  0015                     	;# 
  1501  0016                     	;# 
  1502  0016                     	;# 
  1503  0017                     	;# 
  1504  0018                     	;# 
  1505  0019                     	;# 
  1506  001A                     	;# 
  1507  001B                     	;# 
  1508  001C                     	;# 
  1509  008C                     	;# 
  1510  008D                     	;# 
  1511  008E                     	;# 
  1512  0091                     	;# 
  1513  0092                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0097                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  009F                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  010E                     	;# 
  1528  0116                     	;# 
  1529  0117                     	;# 
  1530  011D                     	;# 
  1531  018C                     	;# 
  1532  018D                     	;# 
  1533  018E                     	;# 
  1534  0191                     	;# 
  1535  0191                     	;# 
  1536  0192                     	;# 
  1537  0193                     	;# 
  1538  0193                     	;# 
  1539  0194                     	;# 
  1540  0195                     	;# 
  1541  0196                     	;# 
  1542  0199                     	;# 
  1543  019A                     	;# 
  1544  019B                     	;# 
  1545  019B                     	;# 
  1546  019C                     	;# 
  1547  019D                     	;# 
  1548  019E                     	;# 
  1549  019F                     	;# 
  1550  020C                     	;# 
  1551  020D                     	;# 
  1552  0211                     	;# 
  1553  0211                     	;# 
  1554  0212                     	;# 
  1555  0212                     	;# 
  1556  0213                     	;# 
  1557  0213                     	;# 
  1558  0214                     	;# 
  1559  0214                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0216                     	;# 
  1564  0216                     	;# 
  1565  0217                     	;# 
  1566  0217                     	;# 
  1567  0391                     	;# 
  1568  0392                     	;# 
  1569  0393                     	;# 
  1570  0394                     	;# 
  1571  0395                     	;# 
  1572  0396                     	;# 
  1573  0611                     	;# 
  1574  0612                     	;# 
  1575  0613                     	;# 
  1576  0613                     	;# 
  1577  0614                     	;# 
  1578  0615                     	;# 
  1579  0616                     	;# 
  1580  0616                     	;# 
  1581  0711                     	;# 
  1582  0711                     	;# 
  1583  0711                     	;# 
  1584  0712                     	;# 
  1585  0712                     	;# 
  1586  0713                     	;# 
  1587  0713                     	;# 
  1588  0713                     	;# 
  1589  0714                     	;# 
  1590  0714                     	;# 
  1591  0714                     	;# 
  1592  0715                     	;# 
  1593  0715                     	;# 
  1594  0716                     	;# 
  1595  0716                     	;# 
  1596  0716                     	;# 
  1597  0716                     	;# 
  1598  0717                     	;# 
  1599  0717                     	;# 
  1600  0717                     	;# 
  1601  0717                     	;# 
  1602  0718                     	;# 
  1603  0718                     	;# 
  1604  0718                     	;# 
  1605  0719                     	;# 
  1606  0719                     	;# 
  1607  0719                     	;# 
  1608  0719                     	;# 
  1609  071A                     	;# 
  1610  071A                     	;# 
  1611  071A                     	;# 
  1612  071A                     	;# 
  1613  071A                     	;# 
  1614  071B                     	;# 
  1615  071B                     	;# 
  1616  071C                     	;# 
  1617  071C                     	;# 
  1618  071C                     	;# 
  1619  071C                     	;# 
  1620  071C                     	;# 
  1621  071D                     	;# 
  1622  071D                     	;# 
  1623  071E                     	;# 
  1624  071E                     	;# 
  1625  0791                     	;# 
  1626  0791                     	;# 
  1627  0793                     	;# 
  1628  0793                     	;# 
  1629  0794                     	;# 
  1630  0794                     	;# 
  1631  0796                     	;# 
  1632  0796                     	;# 
  1633  0796                     	;# 
  1634  0797                     	;# 
  1635  0797                     	;# 
  1636  0797                     	;# 
  1637  0798                     	;# 
  1638  0798                     	;# 
  1639  0799                     	;# 
  1640  0799                     	;# 
  1641  0799                     	;# 
  1642  079A                     	;# 
  1643  079A                     	;# 
  1644  079A                     	;# 
  1645  079B                     	;# 
  1646  079C                     	;# 
  1647  079C                     	;# 
  1648  079C                     	;# 
  1649  079D                     	;# 
  1650  079E                     	;# 
  1651  079E                     	;# 
  1652  0F8C                     	;# 
  1653  0F8D                     	;# 
  1654  0F91                     	;# 
  1655  0F96                     	;# 
  1656  0F97                     	;# 
  1657  0F9C                     	;# 
  1658  0F9D                     	;# 
  1659  0F9E                     	;# 
  1660  0FE3                     	;# 
  1661  0FE4                     	;# 
  1662  0FE5                     	;# 
  1663  0FE6                     	;# 
  1664  0FE7                     	;# 
  1665  0FE8                     	;# 
  1666  0FE9                     	;# 
  1667  0FEA                     	;# 
  1668  0FEB                     	;# 
  1669  0FED                     	;# 
  1670  0FEE                     	;# 
  1671  0FEF                     	;# 
  1672  0000                     	;# 
  1673  0001                     	;# 
  1674  0002                     	;# 
  1675  0003                     	;# 
  1676  0004                     	;# 
  1677  0005                     	;# 
  1678  0006                     	;# 
  1679  0007                     	;# 
  1680  0008                     	;# 
  1681  0009                     	;# 
  1682  000A                     	;# 
  1683  000B                     	;# 
  1684  000C                     	;# 
  1685  000D                     	;# 
  1686  000E                     	;# 
  1687  0011                     	;# 
  1688  0012                     	;# 
  1689  0015                     	;# 
  1690  0016                     	;# 
  1691  0016                     	;# 
  1692  0017                     	;# 
  1693  0018                     	;# 
  1694  0019                     	;# 
  1695  001A                     	;# 
  1696  001B                     	;# 
  1697  001C                     	;# 
  1698  008C                     	;# 
  1699  008D                     	;# 
  1700  008E                     	;# 
  1701  0091                     	;# 
  1702  0092                     	;# 
  1703  0095                     	;# 
  1704  0096                     	;# 
  1705  0097                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009B                     	;# 
  1710  009C                     	;# 
  1711  009D                     	;# 
  1712  009E                     	;# 
  1713  009F                     	;# 
  1714  010C                     	;# 
  1715  010D                     	;# 
  1716  010E                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  011D                     	;# 
  1720  018C                     	;# 
  1721  018D                     	;# 
  1722  018E                     	;# 
  1723  0191                     	;# 
  1724  0191                     	;# 
  1725  0192                     	;# 
  1726  0193                     	;# 
  1727  0193                     	;# 
  1728  0194                     	;# 
  1729  0195                     	;# 
  1730  0196                     	;# 
  1731  0199                     	;# 
  1732  019A                     	;# 
  1733  019B                     	;# 
  1734  019B                     	;# 
  1735  019C                     	;# 
  1736  019D                     	;# 
  1737  019E                     	;# 
  1738  019F                     	;# 
  1739  020C                     	;# 
  1740  020D                     	;# 
  1741  0211                     	;# 
  1742  0211                     	;# 
  1743  0212                     	;# 
  1744  0212                     	;# 
  1745  0213                     	;# 
  1746  0213                     	;# 
  1747  0214                     	;# 
  1748  0214                     	;# 
  1749  0215                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0216                     	;# 
  1753  0216                     	;# 
  1754  0217                     	;# 
  1755  0217                     	;# 
  1756  0391                     	;# 
  1757  0392                     	;# 
  1758  0393                     	;# 
  1759  0394                     	;# 
  1760  0395                     	;# 
  1761  0396                     	;# 
  1762  0611                     	;# 
  1763  0612                     	;# 
  1764  0613                     	;# 
  1765  0613                     	;# 
  1766  0614                     	;# 
  1767  0615                     	;# 
  1768  0616                     	;# 
  1769  0616                     	;# 
  1770  0711                     	;# 
  1771  0711                     	;# 
  1772  0711                     	;# 
  1773  0712                     	;# 
  1774  0712                     	;# 
  1775  0713                     	;# 
  1776  0713                     	;# 
  1777  0713                     	;# 
  1778  0714                     	;# 
  1779  0714                     	;# 
  1780  0714                     	;# 
  1781  0715                     	;# 
  1782  0715                     	;# 
  1783  0716                     	;# 
  1784  0716                     	;# 
  1785  0716                     	;# 
  1786  0716                     	;# 
  1787  0717                     	;# 
  1788  0717                     	;# 
  1789  0717                     	;# 
  1790  0717                     	;# 
  1791  0718                     	;# 
  1792  0718                     	;# 
  1793  0718                     	;# 
  1794  0719                     	;# 
  1795  0719                     	;# 
  1796  0719                     	;# 
  1797  0719                     	;# 
  1798  071A                     	;# 
  1799  071A                     	;# 
  1800  071A                     	;# 
  1801  071A                     	;# 
  1802  071A                     	;# 
  1803  071B                     	;# 
  1804  071B                     	;# 
  1805  071C                     	;# 
  1806  071C                     	;# 
  1807  071C                     	;# 
  1808  071C                     	;# 
  1809  071C                     	;# 
  1810  071D                     	;# 
  1811  071D                     	;# 
  1812  071E                     	;# 
  1813  071E                     	;# 
  1814  0791                     	;# 
  1815  0791                     	;# 
  1816  0793                     	;# 
  1817  0793                     	;# 
  1818  0794                     	;# 
  1819  0794                     	;# 
  1820  0796                     	;# 
  1821  0796                     	;# 
  1822  0796                     	;# 
  1823  0797                     	;# 
  1824  0797                     	;# 
  1825  0797                     	;# 
  1826  0798                     	;# 
  1827  0798                     	;# 
  1828  0799                     	;# 
  1829  0799                     	;# 
  1830  0799                     	;# 
  1831  079A                     	;# 
  1832  079A                     	;# 
  1833  079A                     	;# 
  1834  079B                     	;# 
  1835  079C                     	;# 
  1836  079C                     	;# 
  1837  079C                     	;# 
  1838  079D                     	;# 
  1839  079E                     	;# 
  1840  079E                     	;# 
  1841  0F8C                     	;# 
  1842  0F8D                     	;# 
  1843  0F91                     	;# 
  1844  0F96                     	;# 
  1845  0F97                     	;# 
  1846  0F9C                     	;# 
  1847  0F9D                     	;# 
  1848  0F9E                     	;# 
  1849  0FE3                     	;# 
  1850  0FE4                     	;# 
  1851  0FE5                     	;# 
  1852  0FE6                     	;# 
  1853  0FE7                     	;# 
  1854  0FE8                     	;# 
  1855  0FE9                     	;# 
  1856  0FEA                     	;# 
  1857  0FEB                     	;# 
  1858  0FED                     	;# 
  1859  0FEE                     	;# 
  1860  0FEF                     	;# 
  1861  0000                     	;# 
  1862  0001                     	;# 
  1863  0002                     	;# 
  1864  0003                     	;# 
  1865  0004                     	;# 
  1866  0005                     	;# 
  1867  0006                     	;# 
  1868  0007                     	;# 
  1869  0008                     	;# 
  1870  0009                     	;# 
  1871  000A                     	;# 
  1872  000B                     	;# 
  1873  000C                     	;# 
  1874  000D                     	;# 
  1875  000E                     	;# 
  1876  0011                     	;# 
  1877  0012                     	;# 
  1878  0015                     	;# 
  1879  0016                     	;# 
  1880  0016                     	;# 
  1881  0017                     	;# 
  1882  0018                     	;# 
  1883  0019                     	;# 
  1884  001A                     	;# 
  1885  001B                     	;# 
  1886  001C                     	;# 
  1887  008C                     	;# 
  1888  008D                     	;# 
  1889  008E                     	;# 
  1890  0091                     	;# 
  1891  0092                     	;# 
  1892  0095                     	;# 
  1893  0096                     	;# 
  1894  0097                     	;# 
  1895  0099                     	;# 
  1896  009A                     	;# 
  1897  009B                     	;# 
  1898  009B                     	;# 
  1899  009C                     	;# 
  1900  009D                     	;# 
  1901  009E                     	;# 
  1902  009F                     	;# 
  1903  010C                     	;# 
  1904  010D                     	;# 
  1905  010E                     	;# 
  1906  0116                     	;# 
  1907  0117                     	;# 
  1908  011D                     	;# 
  1909  018C                     	;# 
  1910  018D                     	;# 
  1911  018E                     	;# 
  1912  0191                     	;# 
  1913  0191                     	;# 
  1914  0192                     	;# 
  1915  0193                     	;# 
  1916  0193                     	;# 
  1917  0194                     	;# 
  1918  0195                     	;# 
  1919  0196                     	;# 
  1920  0199                     	;# 
  1921  019A                     	;# 
  1922  019B                     	;# 
  1923  019B                     	;# 
  1924  019C                     	;# 
  1925  019D                     	;# 
  1926  019E                     	;# 
  1927  019F                     	;# 
  1928  020C                     	;# 
  1929  020D                     	;# 
  1930  0211                     	;# 
  1931  0211                     	;# 
  1932  0212                     	;# 
  1933  0212                     	;# 
  1934  0213                     	;# 
  1935  0213                     	;# 
  1936  0214                     	;# 
  1937  0214                     	;# 
  1938  0215                     	;# 
  1939  0215                     	;# 
  1940  0215                     	;# 
  1941  0216                     	;# 
  1942  0216                     	;# 
  1943  0217                     	;# 
  1944  0217                     	;# 
  1945  0391                     	;# 
  1946  0392                     	;# 
  1947  0393                     	;# 
  1948  0394                     	;# 
  1949  0395                     	;# 
  1950  0396                     	;# 
  1951  0611                     	;# 
  1952  0612                     	;# 
  1953  0613                     	;# 
  1954  0613                     	;# 
  1955  0614                     	;# 
  1956  0615                     	;# 
  1957  0616                     	;# 
  1958  0616                     	;# 
  1959  0711                     	;# 
  1960  0711                     	;# 
  1961  0711                     	;# 
  1962  0712                     	;# 
  1963  0712                     	;# 
  1964  0713                     	;# 
  1965  0713                     	;# 
  1966  0713                     	;# 
  1967  0714                     	;# 
  1968  0714                     	;# 
  1969  0714                     	;# 
  1970  0715                     	;# 
  1971  0715                     	;# 
  1972  0716                     	;# 
  1973  0716                     	;# 
  1974  0716                     	;# 
  1975  0716                     	;# 
  1976  0717                     	;# 
  1977  0717                     	;# 
  1978  0717                     	;# 
  1979  0717                     	;# 
  1980  0718                     	;# 
  1981  0718                     	;# 
  1982  0718                     	;# 
  1983  0719                     	;# 
  1984  0719                     	;# 
  1985  0719                     	;# 
  1986  0719                     	;# 
  1987  071A                     	;# 
  1988  071A                     	;# 
  1989  071A                     	;# 
  1990  071A                     	;# 
  1991  071A                     	;# 
  1992  071B                     	;# 
  1993  071B                     	;# 
  1994  071C                     	;# 
  1995  071C                     	;# 
  1996  071C                     	;# 
  1997  071C                     	;# 
  1998  071C                     	;# 
  1999  071D                     	;# 
  2000  071D                     	;# 
  2001  071E                     	;# 
  2002  071E                     	;# 
  2003  0791                     	;# 
  2004  0791                     	;# 
  2005  0793                     	;# 
  2006  0793                     	;# 
  2007  0794                     	;# 
  2008  0794                     	;# 
  2009  0796                     	;# 
  2010  0796                     	;# 
  2011  0796                     	;# 
  2012  0797                     	;# 
  2013  0797                     	;# 
  2014  0797                     	;# 
  2015  0798                     	;# 
  2016  0798                     	;# 
  2017  0799                     	;# 
  2018  0799                     	;# 
  2019  0799                     	;# 
  2020  079A                     	;# 
  2021  079A                     	;# 
  2022  079A                     	;# 
  2023  079B                     	;# 
  2024  079C                     	;# 
  2025  079C                     	;# 
  2026  079C                     	;# 
  2027  079D                     	;# 
  2028  079E                     	;# 
  2029  079E                     	;# 
  2030  0F8C                     	;# 
  2031  0F8D                     	;# 
  2032  0F91                     	;# 
  2033  0F96                     	;# 
  2034  0F97                     	;# 
  2035  0F9C                     	;# 
  2036  0F9D                     	;# 
  2037  0F9E                     	;# 
  2038  0FE3                     	;# 
  2039  0FE4                     	;# 
  2040  0FE5                     	;# 
  2041  0FE6                     	;# 
  2042  0FE7                     	;# 
  2043  0FE8                     	;# 
  2044  0FE9                     	;# 
  2045  0FEA                     	;# 
  2046  0FEB                     	;# 
  2047  0FED                     	;# 
  2048  0FEE                     	;# 
  2049  0FEF                     	;# 
  2050                           
  2051                           	psect	idataBANK1
  2052  159B                     __pidataBANK1:	
  2053                           
  2054                           ;initializer for _Button_StateMachine
  2055  159B  34A7               	retlw	low _Button_State_Initializing
  2056  159C  340B               	retlw	high _Button_State_Initializing
  2057  159D  34B6               	retlw	low _Button_State_NotPressed
  2058  159E  340E               	retlw	high _Button_State_NotPressed
  2059  159F  3409               	retlw	low _Button_State_Pressed
  2060  15A0  340C               	retlw	high _Button_State_Pressed
  2061                           
  2062                           ;initializer for _callback_notPressed
  2063  15A1  34E3               	retlw	low _Button_DefaultCallback
  2064  15A2  3414               	retlw	high _Button_DefaultCallback
  2065                           
  2066                           ;initializer for _callback_pressed
  2067  15A3  34E3               	retlw	low _Button_DefaultCallback
  2068  15A4  3414               	retlw	high _Button_DefaultCallback
  2069                           
  2070                           ;initializer for _callback_sampled
  2071  15A5  34E4               	retlw	low _Sensor_DefaultCallback
  2072  15A6  3414               	retlw	high _Sensor_DefaultCallback
  2073                           
  2074                           ;initializer for _sample_period
  2075  15A7  34AE               	retlw	174
  2076                           
  2077                           	psect	idataBANK2
  2078  178E                     __pidataBANK2:	
  2079                           
  2080                           ;initializer for _mtouch_sensor
  2081  178E  3400               	retlw	0
  2082  178F  3469               	retlw	105
  2083  1790  3430               	retlw	48
  2084  1791  3410               	retlw	16
  2085  1792  3420               	retlw	32
  2086  1793  3400               	retlw	0
  2087  1794  3400               	retlw	0
  2088  1795  3400               	retlw	0
  2089  1796  3400               	retlw	0
  2090  1797  3401               	retlw	1
  2091  1798  3431               	retlw	49
  2092  1799  3430               	retlw	48
  2093  179A  3410               	retlw	16
  2094  179B  3420               	retlw	32
  2095  179C  3400               	retlw	0
  2096  179D  3400               	retlw	0
  2097  179E  3400               	retlw	0
  2098  179F  3400               	retlw	0
  2099  17A0  3402               	retlw	2
  2100  17A1  3461               	retlw	97
  2101  17A2  3430               	retlw	48
  2102  17A3  3410               	retlw	16
  2103  17A4  3420               	retlw	32
  2104  17A5  3400               	retlw	0
  2105  17A6  3400               	retlw	0
  2106  17A7  3400               	retlw	0
  2107  17A8  3400               	retlw	0
  2108                           
  2109                           	psect	stringtext1
  2110  1853                     __pstringtext1:	
  2111  1853                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2112  1853  3400               	retlw	0
  2113  1854  340D               	retlw	13
  2114  1855  341C               	retlw	28
  2115  1856  341E               	retlw	30
  2116  1857  3417               	retlw	23
  2117  1858                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2118                           
  2119                           	psect	stringtext2
  2120  1858                     __pstringtext2:	
  2121  1858                     _sensor_scan_group:	
  2122  1858  3459               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2123  1859  3450               	retlw	low (_mtouch_sensor| (0+256))
  2124  185A  3400               	retlw	0
  2125  185B  3462               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2126  185C                     __end_of_sensor_scan_group:	
  2127                           
  2128                           	psect	stringtext3
  2129  1000                     __pstringtext3:	
  2130  1000                     _mtouch_button_init:	
  2131  1000  3400               	retlw	0
  2132  1001  3402               	retlw	2
  2133  1002  3400               	retlw	0
  2134  1003  3400               	retlw	0
  2135  1004  3400               	retlw	0
  2136  1005  3400               	retlw	0
  2137  1006  3400               	retlw	0
  2138  1007  3400               	retlw	0
  2139  1008  3400               	retlw	0
  2140  1009  3400               	retlw	0
  2141  100A  3400               	retlw	0
  2142  100B  3400               	retlw	0
  2143  100C  3400               	retlw	0
  2144  100D  3400               	retlw	0
  2145  100E  3464               	retlw	100
  2146  100F  3401               	retlw	1
  2147  1010  3401               	retlw	1
  2148  1011  3400               	retlw	0
  2149  1012  3400               	retlw	0
  2150  1013  3400               	retlw	0
  2151  1014  3400               	retlw	0
  2152  1015  3400               	retlw	0
  2153  1016  3400               	retlw	0
  2154  1017  3400               	retlw	0
  2155  1018  3400               	retlw	0
  2156  1019  3400               	retlw	0
  2157  101A  3400               	retlw	0
  2158  101B  3400               	retlw	0
  2159  101C  3400               	retlw	0
  2160  101D  3400               	retlw	0
  2161  101E  3464               	retlw	100
  2162  101F  3401               	retlw	1
  2163  1020  3402               	retlw	2
  2164  1021  3401               	retlw	1
  2165  1022  3400               	retlw	0
  2166  1023  3400               	retlw	0
  2167  1024  3400               	retlw	0
  2168  1025  3400               	retlw	0
  2169  1026  3400               	retlw	0
  2170  1027  3400               	retlw	0
  2171  1028  3400               	retlw	0
  2172  1029  3400               	retlw	0
  2173  102A  3400               	retlw	0
  2174  102B  3400               	retlw	0
  2175  102C  3400               	retlw	0
  2176  102D  3400               	retlw	0
  2177  102E  3464               	retlw	100
  2178  102F  3401               	retlw	1
  2179  1030                     __end_of_mtouch_button_init:	
  2180                           
  2181                           	psect	nvBANK1
  2182  00E0                     __pnvBANK1:	
  2183  00E0                     _INT_InterruptHandler:	
  2184  00E0                     	ds	2
  2185  00E2                     _EUSART_ErrorHandler:	
  2186  00E2                     	ds	2
  2187  00E4                     _EUSART_OverrunErrorHandler:	
  2188  00E4                     	ds	2
  2189  00E6                     _EUSART_FramingErrorHandler:	
  2190  00E6                     	ds	2
  2191  00E8                     _EUSART_RxDefaultInterruptHandler:	
  2192  00E8                     	ds	2
  2193  001C                     _T2CON	set	28
  2194  001A                     _TMR2	set	26
  2195  001B                     _PR2	set	27
  2196  000B                     _INTCONbits	set	11
  2197  0012                     _PIR2bits	set	18
  2198  0011                     _PIR1bits	set	17
  2199  001C                     _T2CONbits	set	28
  2200  005F                     _GIE	set	95
  2201  008E                     _TRISC	set	142
  2202  008D                     _TRISB	set	141
  2203  008C                     _TRISA	set	140
  2204  0097                     _WDTCON	set	151
  2205  0099                     _OSCCON	set	153
  2206  0095                     _OPTION_REGbits	set	149
  2207  0091                     _PIE1bits	set	145
  2208  010E                     _LATCbits	set	270
  2209  011D                     _APFCON	set	285
  2210  010E                     _LATC	set	270
  2211  010D                     _LATB	set	269
  2212  010C                     _LATA	set	268
  2213  0116                     _BORCON	set	278
  2214  011D                     _APFCONbits	set	285
  2215  018C                     _ANSELA	set	396
  2216  018D                     _ANSELB	set	397
  2217  018E                     _ANSELC	set	398
  2218  0199                     _RCREG	set	409
  2219  019D                     _RCSTAbits	set	413
  2220  019A                     _TXREG	set	410
  2221  019E                     _TXSTAbits	set	414
  2222  019C                     _SPBRGH	set	412
  2223  019B                     _SPBRGL	set	411
  2224  019E                     _TXSTA	set	414
  2225  019D                     _RCSTA	set	413
  2226  019F                     _BAUDCON	set	415
  2227  020C                     _WPUA	set	524
  2228  020D                     _WPUB	set	525
  2229  071A                     _AAD1RES0	set	1818
  2230  0711                     _AD1CON0bits	set	1809
  2231  0714                     _AAD1CON3	set	1812
  2232  0713                     _AD1CON2	set	1811
  2233  0717                     _AD1ACQCON	set	1815
  2234  0716                     _AD1PRECON	set	1814
  2235  0718                     _AAD1GRD	set	1816
  2236  0713                     _AAD1CON2	set	1811
  2237  0719                     _AAD1CAP	set	1817
  2238  0714                     _AD1CON3	set	1812
  2239  0712                     _ADCOMCON	set	1810
  2240  0711                     _AD1CON0	set	1809
  2241  079A                     _AAD2RES0	set	1946
  2242  0791                     _AD2CON0bits	set	1937
  2243  0797                     _AD2ACQCON	set	1943
  2244  0796                     _AD2PRECON	set	1942
  2245  0794                     _AAD2CON3	set	1940
  2246  0798                     _AAD2GRD	set	1944
  2247  0793                     _AD2CON2	set	1939
  2248  0794                     _AD2CON3	set	1940
  2249  0791                     _AD2CON0	set	1937
  2250                           
  2251                           	psect	stringtext4
  2252  1800                     __pstringtext4:	
  2253  1800                     STR_8:	
  2254  1800  346C               	retlw	108	;'l'
  2255  1801  3461               	retlw	97	;'a'
  2256  1802  3473               	retlw	115	;'s'
  2257  1803  3474               	retlw	116	;'t'
  2258  1804  346C               	retlw	108	;'l'
  2259  1805  3465               	retlw	101	;'e'
  2260  1806  3476               	retlw	118	;'v'
  2261  1807  3465               	retlw	101	;'e'
  2262  1808  346C               	retlw	108	;'l'
  2263  1809  342D               	retlw	45	;'-'
  2264  180A  342D               	retlw	45	;'-'
  2265  180B  3425               	retlw	37	;'%'
  2266  180C  3464               	retlw	100	;'d'
  2267  180D  347C               	retlw	124	;'|'
  2268  180E  347C               	retlw	124	;'|'
  2269  180F  347C               	retlw	124	;'|'
  2270  1810  346C               	retlw	108	;'l'
  2271  1811  3465               	retlw	101	;'e'
  2272  1812  3476               	retlw	118	;'v'
  2273  1813  3465               	retlw	101	;'e'
  2274  1814  346C               	retlw	108	;'l'
  2275  1815  342D               	retlw	45	;'-'
  2276  1816  342D               	retlw	45	;'-'
  2277  1817  3425               	retlw	37	;'%'
  2278  1818  3464               	retlw	100	;'d'
  2279  1819  340D               	retlw	13
  2280  181A  340A               	retlw	10
  2281  181B  3400               	retlw	0
  2282                           
  2283                           	psect	stringtext5
  2284  181C                     __pstringtext5:	
  2285  181C                     STR_2:	
  2286  181C  342D               	retlw	45	;'-'
  2287  181D  342D               	retlw	45	;'-'
  2288  181E  342D               	retlw	45	;'-'
  2289  181F  342D               	retlw	45	;'-'
  2290  1820  342D               	retlw	45	;'-'
  2291  1821  342D               	retlw	45	;'-'
  2292  1822  3425               	retlw	37	;'%'
  2293  1823  3464               	retlw	100	;'d'
  2294  1824  342D               	retlw	45	;'-'
  2295  1825  342D               	retlw	45	;'-'
  2296  1826  342D               	retlw	45	;'-'
  2297  1827  342D               	retlw	45	;'-'
  2298  1828  342D               	retlw	45	;'-'
  2299  1829  342D               	retlw	45	;'-'
  2300  182A  342D               	retlw	45	;'-'
  2301  182B  342D               	retlw	45	;'-'
  2302  182C  342D               	retlw	45	;'-'
  2303  182D  340D               	retlw	13
  2304  182E  340A               	retlw	10
  2305  182F  3400               	retlw	0
  2306                           
  2307                           	psect	stringtext6
  2308  1830                     __pstringtext6:	
  2309  1830                     STR_5:	
  2310  1830  342D               	retlw	45	;'-'
  2311  1831  342D               	retlw	45	;'-'
  2312  1832  342D               	retlw	45	;'-'
  2313  1833  342D               	retlw	45	;'-'
  2314  1834  344F               	retlw	79	;'O'
  2315  1835  3446               	retlw	70	;'F'
  2316  1836  3446               	retlw	70	;'F'
  2317  1837  342D               	retlw	45	;'-'
  2318  1838  342D               	retlw	45	;'-'
  2319  1839  342D               	retlw	45	;'-'
  2320  183A  342D               	retlw	45	;'-'
  2321  183B  340D               	retlw	13
  2322  183C  340A               	retlw	10
  2323  183D  3400               	retlw	0
  2324                           
  2325                           	psect	stringtext7
  2326  183E                     __pstringtext7:	
  2327  183E                     STR_7:	
  2328  183E  342D               	retlw	45	;'-'
  2329  183F  342D               	retlw	45	;'-'
  2330  1840  342D               	retlw	45	;'-'
  2331  1841  342D               	retlw	45	;'-'
  2332  1842  344F               	retlw	79	;'O'
  2333  1843  344E               	retlw	78	;'N'
  2334  1844  342D               	retlw	45	;'-'
  2335  1845  342D               	retlw	45	;'-'
  2336  1846  342D               	retlw	45	;'-'
  2337  1847  342D               	retlw	45	;'-'
  2338  1848  340D               	retlw	13
  2339  1849  340A               	retlw	10
  2340  184A  3400               	retlw	0
  2341                           
  2342                           	psect	stringtext8
  2343  184B                     __pstringtext8:	
  2344  184B                     STR_1:	
  2345  184B  3452               	retlw	82	;'R'
  2346  184C  3445               	retlw	69	;'E'
  2347  184D  3453               	retlw	83	;'S'
  2348  184E  3445               	retlw	69	;'E'
  2349  184F  3454               	retlw	84	;'T'
  2350  1850  340D               	retlw	13
  2351  1851  340A               	retlw	10
  2352  1852  3400               	retlw	0
  2353                           
  2354                           	psect	stringtext9
  2355  0000                     __pstringtext9:	
  2356  181C                     
  2357                           ; #config settings
  2358  0000                     
  2359                           	psect	cinit
  2360  001F                     start_initialization:	
  2361  001F                     __initialization:	
  2362                           
  2363                           ; Initialize objects allocated to BANK1
  2364  001F  309B               	movlw	low __pidataBANK1
  2365  0020  0084               	movwf	4
  2366  0021  3095               	movlw	(high __pidataBANK1)| (0+128)
  2367  0022  0085               	movwf	5
  2368  0023  30D3               	movlw	low __pdataBANK1
  2369  0024  0086               	movwf	6
  2370  0025  3000               	movlw	high __pdataBANK1
  2371  0026  0087               	movwf	7
  2372  0027  300D               	movlw	13
  2373  0028  3195  2543  3180   	fcall	init_ram
  2374                           
  2375                           ; Initialize objects allocated to BANK2
  2376  002B  308E               	movlw	low __pidataBANK2
  2377  002C  0084               	movwf	4
  2378  002D  3097               	movlw	(high __pidataBANK2)| (0+128)
  2379  002E  0085               	movwf	5
  2380  002F  3050               	movlw	low __pdataBANK2
  2381  0030  0086               	movwf	6
  2382  0031  3001               	movlw	high __pdataBANK2
  2383  0032  0087               	movwf	7
  2384  0033  301B               	movlw	27
  2385  0034  3195  2543  3180   	fcall	init_ram
  2386                           
  2387                           ; Clear objects allocated to COMMON
  2388  0037  01FC               	clrf	__pbssCOMMON& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK1
  2391  0038  30A0               	movlw	low __pbssBANK1
  2392  0039  0084               	movwf	4
  2393  003A  3000               	movlw	high __pbssBANK1
  2394  003B  0085               	movwf	5
  2395  003C  3033               	movlw	51
  2396  003D  3195  253D  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK2
  2399  0040  3020               	movlw	low __pbssBANK2
  2400  0041  0084               	movwf	4
  2401  0042  3001               	movlw	high __pbssBANK2
  2402  0043  0085               	movwf	5
  2403  0044  3030               	movlw	48
  2404  0045  3195  253D  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK3
  2407  0048  30A0               	movlw	low __pbssBANK3
  2408  0049  0084               	movwf	4
  2409  004A  3001               	movlw	high __pbssBANK3
  2410  004B  0085               	movwf	5
  2411  004C  3020               	movlw	32
  2412  004D  3195  253D         	fcall	clear_ram0
  2413  004F                     end_of_initialization:	
  2414                           ;End of C runtime variable initialization code
  2415                           
  2416  004F                     __end_of__initialization:	
  2417  004F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2418  0050  0020               	movlb	0
  2419  0051  3183  2B7F         	ljmp	_main	;jump to C main() function
  2420                           
  2421                           	psect	bssCOMMON
  2422  007C                     __pbssCOMMON:	
  2423  007C                     _eusartRxHead:	
  2424  007C                     	ds	1
  2425                           
  2426                           	psect	bssBANK1
  2427  00A0                     __pbssBANK1:	
  2428  00A0                     _eusartRxStatusBuffer:	
  2429  00A0                     	ds	8
  2430  00A8                     _eusartRxBuffer:	
  2431  00A8                     	ds	8
  2432  00B0                     _packet_sample:	
  2433  00B0                     	ds	4
  2434  00B4                     _nout:	
  2435  00B4                     	ds	2
  2436  00B6                     _width:	
  2437  00B6                     	ds	2
  2438  00B8                     _prec:	
  2439  00B8                     	ds	2
  2440  00BA                     _flags:	
  2441  00BA                     	ds	2
  2442  00BC                     _triac_c:	
  2443  00BC                     	ds	2
  2444  00BE                     _triac_level:	
  2445  00BE                     	ds	2
  2446  00C0                     _counter_1s:	
  2447  00C0                     	ds	2
  2448  00C2                     _last_touch_status:	
  2449  00C2                     	ds	2
  2450  00C4                     _packet_noise:	
  2451  00C4                     	ds	2
  2452  00C6                     _i:	
  2453  00C6                     	ds	1
  2454  00C7                     _ZCD_STATE:	
  2455  00C7                     	ds	1
  2456  00C8                     _turn_on:	
  2457  00C8                     	ds	1
  2458  00C9                     _turn_off:	
  2459  00C9                     	ds	1
  2460  00CA                     _count_down_off:	
  2461  00CA                     	ds	1
  2462  00CB                     _counter_PRESS:	
  2463  00CB                     	ds	1
  2464  00CC                     _counter_ON_OFF:	
  2465  00CC                     	ds	1
  2466  00CD                     _eusartRxLastError:	
  2467  00CD                     	ds	1
  2468  00CE                     _eusartRxCount:	
  2469  00CE                     	ds	1
  2470  00CF                     _eusartRxTail:	
  2471  00CF                     	ds	1
  2472  00D0                     _sensor_globalFlags:	
  2473  00D0                     	ds	1
  2474  00D1                     _lowpowerActivated:	
  2475  00D1                     	ds	1
  2476  00D2                     _mtouch_time_toScan:	
  2477  00D2                     	ds	1
  2478                           
  2479                           	psect	dataBANK1
  2480  00D3                     __pdataBANK1:	
  2481  00D3                     _Button_StateMachine:	
  2482  00D3                     	ds	6
  2483  00D9                     _callback_notPressed:	
  2484  00D9                     	ds	2
  2485  00DB                     _callback_pressed:	
  2486  00DB                     	ds	2
  2487  00DD                     _callback_sampled:	
  2488  00DD                     	ds	2
  2489  00DF                     _sample_period:	
  2490  00DF                     	ds	1
  2491                           
  2492                           	psect	bssBANK2
  2493  0120                     __pbssBANK2:	
  2494  0120                     _mtouch_button:	
  2495  0120                     	ds	48
  2496                           
  2497                           	psect	dataBANK2
  2498  0150                     __pdataBANK2:	
  2499  0150                     _mtouch_sensor:	
  2500  0150                     	ds	27
  2501                           
  2502                           	psect	bssBANK3
  2503  01A0                     __pbssBANK3:	
  2504  01A0                     _dbuf:	
  2505  01A0                     	ds	32
  2506                           
  2507                           	psect	inittext
  2508  1543                     init_ram:	
  2509  1543  00FE               	movwf	126
  2510  1544                     initloop:	
  2511  1544  0012               	moviw fsr0++
  2512  1545  001E               	movwi fsr1++
  2513  1546  0BFE               	decfsz	126,f
  2514  1547  2D44               	goto	initloop
  2515  1548  3400               	retlw	0
  2516                           
  2517                           	psect	clrtext
  2518  153D                     clear_ram0:	
  2519                           ;	Called with FSR0 containing the base address, and
  2520                           ;	WREG with the size to clear
  2521                           
  2522  153D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2523  153E                     clrloop0:	
  2524  153E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2525  153F  3101               	addfsr 0,1
  2526  1540  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2527  1541  2D3E               	goto	clrloop0	;have we reached the end yet?
  2528  1542  3400               	retlw	0	;all done for this memory range, return
  2529                           
  2530                           	psect	cstackBANK1
  2531  00EA                     __pcstackBANK1:	
  2532  00EA                     ??_main:	
  2533                           
  2534                           ; 1 bytes @ 0x0
  2535  00EA                     	ds	2
  2536                           
  2537                           	psect	cstackCOMMON
  2538  0070                     __pcstackCOMMON:	
  2539  0070                     ?_MTOUCH_Service_Mainloop:	
  2540  0070                     ?_MTOUCH_Button_isPressed:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ?_MTOUCH_Button_InitializeAll:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ?_MTOUCH_Button_ServiceAll:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ?_MTOUCH_needReburst:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ?_MTOUCH_Tick:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_MTOUCH_Button_Tick:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ?_MTOUCH_Sensor_Enable:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ?_Sensor_Sampled_Reset:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_Sensor_Service:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ?_Sensor_isEnabled:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ?_Sensor_RawSample_Update:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_Sensor_setSampled:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ?_Sensor_postAcquisitionProcess:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?_Sensor_isActive:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ?_Sensor_isCalibrated:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_Sensor_setActive:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ?_Sensor_setInactive:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ?_Sensor_isCalibratingAcqTime:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_TMR2_LoadPeriodRegister:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ?_TMR2_StartTimer:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_TMR2_StopTimer:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_Sensor_autoCalibration:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_Sensor_setCalibratAcqTime:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?_Sensor_setCalibrated:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_Button_Service:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?_Button_Reading_Update:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_Button_Deviation_Update:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_Button_Baseline_Initialize:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_Button_Baseline_Update:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_Button_Tick_helper:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_Button_Reading_Update_Helper:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_EUSART_Receive_ISR:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_EUSART_DefaultErrorHandler:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_EUSART_RxDataHandler:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ??_EUSART_RxDataHandler:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ?_INT_CallBack:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ??_INT_CallBack:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_PIN_MANAGER_Initialize:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ?_OSCILLATOR_Initialize:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ?_WDT_Initialize:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_check_on_off:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_MTOUCH_Initialize:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     ?_MTOUCH_Sensor_Initialize:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0070                     ?_Sensor_getScanGroupIndex:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0070                     ?_MTOUCH_Button_Initialize:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0070                     ?_MTOUCH_Button_Buttonmask_Get:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0070                     ?_EUSART_Initialize:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     ?_EUSART_Write:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?_putch:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ?_TMR2_Initialize:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     ?_INT_ISR:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0070                     ?_INT_DefaultInterruptHandler:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ??_INT_DefaultInterruptHandler:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_EXT_INT_Initialize:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_INTERRUPT_InterruptManager:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     ?_SYSTEM_Initialize:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0070                     ?_main:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744                           
  2745                           ; 1 bytes @ 0x0
  2746  0070                     	ds	1
  2747  0071                     ??_MTOUCH_Button_isPressed:	
  2748  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2749                           ; 1 bytes @ 0x1
  2750                           
  2751  0071                     ??_MTOUCH_needReburst:	
  2752                           ; 1 bytes @ 0x1
  2753                           
  2754  0071                     ?_Sensor_DefaultCallback:	
  2755                           ; 1 bytes @ 0x1
  2756                           
  2757  0071                     ??_Sensor_Sampled_Reset:	
  2758                           ; 1 bytes @ 0x1
  2759                           
  2760  0071                     ??_Sensor_isEnabled:	
  2761                           ; 1 bytes @ 0x1
  2762                           
  2763  0071                     ??_Sensor_setSampled:	
  2764                           ; 1 bytes @ 0x1
  2765                           
  2766  0071                     ??_Sensor_isActive:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769  0071                     ??_Sensor_isCalibrated:	
  2770                           ; 1 bytes @ 0x1
  2771                           
  2772  0071                     ??_Sensor_setActive:	
  2773                           ; 1 bytes @ 0x1
  2774                           
  2775  0071                     ??_Sensor_setInactive:	
  2776                           ; 1 bytes @ 0x1
  2777                           
  2778  0071                     ??_Sensor_isCalibratingAcqTime:	
  2779                           ; 1 bytes @ 0x1
  2780                           
  2781  0071                     ??_TMR2_LoadPeriodRegister:	
  2782                           ; 1 bytes @ 0x1
  2783                           
  2784  0071                     ??_TMR2_StartTimer:	
  2785                           ; 1 bytes @ 0x1
  2786                           
  2787  0071                     ??_TMR2_StopTimer:	
  2788                           ; 1 bytes @ 0x1
  2789                           
  2790  0071                     ??_Sensor_setCalibratAcqTime:	
  2791                           ; 1 bytes @ 0x1
  2792                           
  2793  0071                     ??_Sensor_setCalibrated:	
  2794                           ; 1 bytes @ 0x1
  2795                           
  2796  0071                     ?_memcpy:	
  2797                           ; 1 bytes @ 0x1
  2798                           
  2799  0071                     ??_Button_Deviation_Update:	
  2800                           ; 1 bytes @ 0x1
  2801                           
  2802  0071                     ??_Button_Baseline_Update:	
  2803                           ; 1 bytes @ 0x1
  2804                           
  2805  0071                     ??_Button_Tick_helper:	
  2806                           ; 1 bytes @ 0x1
  2807                           
  2808  0071                     ?_EUSART_SetRxInterruptHandler:	
  2809                           ; 1 bytes @ 0x1
  2810                           
  2811  0071                     ??_EUSART_Receive_ISR:	
  2812                           ; 1 bytes @ 0x1
  2813                           
  2814  0071                     ?_EUSART_SetFramingErrorHandler:	
  2815                           ; 1 bytes @ 0x1
  2816                           
  2817  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2818                           ; 1 bytes @ 0x1
  2819                           
  2820  0071                     ?_EUSART_SetErrorHandler:	
  2821                           ; 1 bytes @ 0x1
  2822                           
  2823  0071                     ??_EUSART_DefaultErrorHandler:	
  2824                           ; 1 bytes @ 0x1
  2825                           
  2826  0071                     ??_PIN_MANAGER_Initialize:	
  2827                           ; 1 bytes @ 0x1
  2828                           
  2829  0071                     ??_OSCILLATOR_Initialize:	
  2830                           ; 1 bytes @ 0x1
  2831                           
  2832  0071                     ??_WDT_Initialize:	
  2833                           ; 1 bytes @ 0x1
  2834                           
  2835  0071                     ??_Sensor_getScanGroupIndex:	
  2836                           ; 1 bytes @ 0x1
  2837                           
  2838  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  2839                           ; 1 bytes @ 0x1
  2840                           
  2841  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2842                           ; 1 bytes @ 0x1
  2843                           
  2844  0071                     ??_EUSART_Write:	
  2845                           ; 1 bytes @ 0x1
  2846                           
  2847  0071                     ??_TMR2_Initialize:	
  2848                           ; 1 bytes @ 0x1
  2849                           
  2850  0071                     ??_INT_ISR:	
  2851                           ; 1 bytes @ 0x1
  2852                           
  2853  0071                     ?_INT_SetInterruptHandler:	
  2854                           ; 1 bytes @ 0x1
  2855                           
  2856  0071                     ??_INTERRUPT_InterruptManager:	
  2857                           ; 1 bytes @ 0x1
  2858                           
  2859  0071                     ?___bmul:	
  2860                           ; 1 bytes @ 0x1
  2861                           
  2862  0071                     ??___aodiv:	
  2863                           ; 1 bytes @ 0x1
  2864                           
  2865  0071                     ??___aomod:	
  2866                           ; 1 bytes @ 0x1
  2867                           
  2868  0071                     ?_strlen:	
  2869                           ; 1 bytes @ 0x1
  2870                           
  2871  0071                     Sensor_DefaultCallback@sensor:	
  2872                           ; 2 bytes @ 0x1
  2873                           
  2874  0071                     Sensor_setActive@sensor:	
  2875                           ; 1 bytes @ 0x1
  2876                           
  2877  0071                     Sensor_setInactive@sensor:	
  2878                           ; 1 bytes @ 0x1
  2879                           
  2880  0071                     Sensor_isActive@sensor:	
  2881                           ; 1 bytes @ 0x1
  2882                           
  2883  0071                     Sensor_isCalibrated@sensor:	
  2884                           ; 1 bytes @ 0x1
  2885                           
  2886  0071                     Sensor_setCalibrated@sensor:	
  2887                           ; 1 bytes @ 0x1
  2888                           
  2889  0071                     Sensor_setCalibratAcqTime@sensor:	
  2890                           ; 1 bytes @ 0x1
  2891                           
  2892  0071                     Sensor_isCalibratingAcqTime@sensor:	
  2893                           ; 1 bytes @ 0x1
  2894                           
  2895  0071                     Sensor_Sampled_Reset@sensor:	
  2896                           ; 1 bytes @ 0x1
  2897                           
  2898  0071                     Sensor_setSampled@sensor:	
  2899                           ; 1 bytes @ 0x1
  2900                           
  2901  0071                     EUSART_Write@txData:	
  2902                           ; 1 bytes @ 0x1
  2903                           
  2904  0071                     TMR2_LoadPeriodRegister@periodVal:	
  2905                           ; 1 bytes @ 0x1
  2906                           
  2907  0071                     ___bmul@multiplicand:	
  2908                           ; 1 bytes @ 0x1
  2909                           
  2910  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  2911                           ; 1 bytes @ 0x1
  2912                           
  2913  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  2914                           ; 2 bytes @ 0x1
  2915                           
  2916  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2917                           ; 2 bytes @ 0x1
  2918                           
  2919  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2920                           ; 2 bytes @ 0x1
  2921                           
  2922  0071                     EUSART_SetErrorHandler@interruptHandler:	
  2923                           ; 2 bytes @ 0x1
  2924                           
  2925  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2926                           ; 2 bytes @ 0x1
  2927                           
  2928  0071                     INT_SetInterruptHandler@InterruptHandler:	
  2929                           ; 2 bytes @ 0x1
  2930                           
  2931  0071                     memcpy@s1:	
  2932                           ; 2 bytes @ 0x1
  2933                           
  2934                           
  2935                           ; 2 bytes @ 0x1
  2936  0071                     	ds	1
  2937  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2938  0072                     ??_Sensor_DefaultCallback:	
  2939                           ; 1 bytes @ 0x2
  2940                           
  2941  0072                     ?_Sensor_loadADCSettings:	
  2942                           ; 1 bytes @ 0x2
  2943                           
  2944  0072                     ??_putch:	
  2945                           ; 1 bytes @ 0x2
  2946                           
  2947  0072                     ??___bmul:	
  2948                           ; 1 bytes @ 0x2
  2949                           
  2950  0072                     Sensor_loadADCSettings@adc_index:	
  2951                           ; 1 bytes @ 0x2
  2952                           
  2953  0072                     Sensor_isEnabled@sensor:	
  2954                           ; 1 bytes @ 0x2
  2955                           
  2956  0072                     MTOUCH_Button_isPressed@name:	
  2957                           ; 1 bytes @ 0x2
  2958                           
  2959  0072                     putch@txData:	
  2960                           ; 1 bytes @ 0x2
  2961                           
  2962  0072                     ___aodiv@counter:	
  2963                           ; 1 bytes @ 0x2
  2964                           
  2965  0072                     ___aomod@counter:	
  2966                           ; 1 bytes @ 0x2
  2967                           
  2968                           
  2969                           ; 1 bytes @ 0x2
  2970  0072                     	ds	1
  2971  0073                     ??_EUSART_SetRxInterruptHandler:	
  2972  0073                     ??_EUSART_SetFramingErrorHandler:	
  2973                           ; 1 bytes @ 0x3
  2974                           
  2975  0073                     ??_EUSART_SetOverrunErrorHandler:	
  2976                           ; 1 bytes @ 0x3
  2977                           
  2978  0073                     ??_EUSART_SetErrorHandler:	
  2979                           ; 1 bytes @ 0x3
  2980                           
  2981  0073                     ??_strlen:	
  2982                           ; 1 bytes @ 0x3
  2983                           
  2984  0073                     ??_Sensor_loadADCSettings:	
  2985                           ; 1 bytes @ 0x3
  2986                           
  2987  0073                     ??_MTOUCH_Button_Buttonmask_Get:	
  2988                           ; 1 bytes @ 0x3
  2989                           
  2990  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  2991                           ; 1 bytes @ 0x3
  2992                           
  2993  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  2994                           ; 1 bytes @ 0x3
  2995                           
  2996  0073                     ??_EUSART_Initialize:	
  2997                           ; 1 bytes @ 0x3
  2998                           
  2999  0073                     ??_INT_SetInterruptHandler:	
  3000                           ; 1 bytes @ 0x3
  3001                           
  3002  0073                     ??_EXT_INT_Initialize:	
  3003                           ; 1 bytes @ 0x3
  3004                           
  3005  0073                     ?_fputc:	
  3006                           ; 1 bytes @ 0x3
  3007                           
  3008  0073                     Sensor_getScanGroupIndex@sensor:	
  3009                           ; 2 bytes @ 0x3
  3010                           
  3011  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3012                           ; 1 bytes @ 0x3
  3013                           
  3014  0073                     Button_Tick_helper@button:	
  3015                           ; 1 bytes @ 0x3
  3016                           
  3017  0073                     ___bmul@product:	
  3018                           ; 1 bytes @ 0x3
  3019                           
  3020  0073                     ___aodiv@sign:	
  3021                           ; 1 bytes @ 0x3
  3022                           
  3023  0073                     ___aomod@sign:	
  3024                           ; 1 bytes @ 0x3
  3025                           
  3026  0073                     memcpy@n:	
  3027                           ; 1 bytes @ 0x3
  3028                           
  3029  0073                     fputc@c:	
  3030                           ; 2 bytes @ 0x3
  3031                           
  3032                           
  3033                           ; 2 bytes @ 0x3
  3034  0073                     	ds	1
  3035  0074                     ??_MTOUCH_Button_Tick:	
  3036  0074                     ?_abs:	
  3037                           ; 1 bytes @ 0x4
  3038                           
  3039  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3040                           ; 2 bytes @ 0x4
  3041                           
  3042  0074                     ___bmul@multiplier:	
  3043                           ; 1 bytes @ 0x4
  3044                           
  3045  0074                     strlen@a:	
  3046                           ; 1 bytes @ 0x4
  3047                           
  3048  0074                     abs@a:	
  3049                           ; 1 bytes @ 0x4
  3050                           
  3051  0074                     ___aodiv@quotient:	
  3052                           ; 2 bytes @ 0x4
  3053                           
  3054                           
  3055                           ; 8 bytes @ 0x4
  3056  0074                     	ds	1
  3057  0075                     ??_MTOUCH_Sensor_Enable:	
  3058  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3059                           ; 1 bytes @ 0x5
  3060                           
  3061  0075                     ??_Sensor_RawSample_Update:	
  3062                           ; 1 bytes @ 0x5
  3063                           
  3064  0075                     ??_memcpy:	
  3065                           ; 1 bytes @ 0x5
  3066                           
  3067  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3068                           ; 1 bytes @ 0x5
  3069                           
  3070  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3071                           ; 1 bytes @ 0x5
  3072                           
  3073  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3074                           ; 1 bytes @ 0x5
  3075                           
  3076  0075                     MTOUCH_Button_Tick@i:	
  3077                           ; 2 bytes @ 0x5
  3078                           
  3079  0075                     MTOUCH_Button_Buttonmask_Get@output:	
  3080                           ; 1 bytes @ 0x5
  3081                           
  3082  0075                     fputc@fp:	
  3083                           ; 1 bytes @ 0x5
  3084                           
  3085  0075                     strlen@s:	
  3086                           ; 1 bytes @ 0x5
  3087                           
  3088                           
  3089                           ; 1 bytes @ 0x5
  3090  0075                     	ds	1
  3091  0076                     ??_MTOUCH_Tick:	
  3092  0076                     ??_abs:	
  3093                           ; 1 bytes @ 0x6
  3094                           
  3095  0076                     ??_fputc:	
  3096                           ; 1 bytes @ 0x6
  3097                           
  3098  0076                     Sensor_RawSample_Update@adcIndex:	
  3099                           ; 1 bytes @ 0x6
  3100                           
  3101  0076                     MTOUCH_Sensor_Enable@sensor:	
  3102                           ; 1 bytes @ 0x6
  3103                           
  3104  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3105                           ; 1 bytes @ 0x6
  3106                           
  3107  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3108                           ; 1 bytes @ 0x6
  3109                           
  3110  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3111                           ; 1 bytes @ 0x6
  3112                           
  3113  0076                     MTOUCH_Button_Buttonmask_Get@i:	
  3114                           ; 1 bytes @ 0x6
  3115                           
  3116  0076                     memcpy@tmp:	
  3117                           ; 1 bytes @ 0x6
  3118                           
  3119  0076                     _Sensor_loadADCSettings$558:	
  3120                           ; 1 bytes @ 0x6
  3121                           
  3122                           
  3123                           ; 2 bytes @ 0x6
  3124  0076                     	ds	1
  3125  0077                     ??_check_on_off:	
  3126  0077                     ??_MTOUCH_Sensor_Initialize:	
  3127                           ; 1 bytes @ 0x7
  3128                           
  3129  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3130                           ; 1 bytes @ 0x7
  3131                           
  3132  0077                     ??_MTOUCH_Button_Initialize:	
  3133                           ; 1 bytes @ 0x7
  3134                           
  3135  0077                     Sensor_RawSample_Update@sensor:	
  3136                           ; 1 bytes @ 0x7
  3137                           
  3138  0077                     Button_Baseline_Update@button:	
  3139                           ; 1 bytes @ 0x7
  3140                           
  3141  0077                     memcpy@s:	
  3142                           ; 1 bytes @ 0x7
  3143                           
  3144                           
  3145                           ; 2 bytes @ 0x7
  3146  0077                     	ds	1
  3147  0078                     ??_Sensor_postAcquisitionProcess:	
  3148  0078                     ??_Sensor_autoCalibration:	
  3149                           ; 1 bytes @ 0x8
  3150                           
  3151  0078                     ?_Button_DefaultCallback:	
  3152                           ; 1 bytes @ 0x8
  3153                           
  3154  0078                     ?_myButtonPressedCallback:	
  3155                           ; 1 bytes @ 0x8
  3156                           
  3157  0078                     ?_myButtonReleasedCallback:	
  3158                           ; 1 bytes @ 0x8
  3159                           
  3160  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3161                           ; 1 bytes @ 0x8
  3162                           
  3163  0078                     Sensor_loadADCSettings@addressOffset:	
  3164                           ; 1 bytes @ 0x8
  3165                           
  3166  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3167                           ; 1 bytes @ 0x8
  3168                           
  3169  0078                     Button_DefaultCallback@button:	
  3170                           ; 1 bytes @ 0x8
  3171                           
  3172  0078                     myButtonPressedCallback@button:	
  3173                           ; 1 bytes @ 0x8
  3174                           
  3175  0078                     myButtonReleasedCallback@button:	
  3176                           ; 1 bytes @ 0x8
  3177                           
  3178                           
  3179                           ; 1 bytes @ 0x8
  3180  0078                     	ds	1
  3181  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3182  0079                     ??_Button_DefaultCallback:	
  3183                           ; 1 bytes @ 0x9
  3184                           
  3185  0079                     ??_Button_Reading_Update_Helper:	
  3186                           ; 1 bytes @ 0x9
  3187                           
  3188  0079                     ??_myButtonPressedCallback:	
  3189                           ; 1 bytes @ 0x9
  3190                           
  3191  0079                     ??_myButtonReleasedCallback:	
  3192                           ; 1 bytes @ 0x9
  3193                           
  3194  0079                     Sensor_loadADCSettings@sensor:	
  3195                           ; 1 bytes @ 0x9
  3196                           
  3197  0079                     MTOUCH_Button_Initialize@name:	
  3198                           ; 1 bytes @ 0x9
  3199                           
  3200  0079                     Button_Baseline_Initialize@button:	
  3201                           ; 1 bytes @ 0x9
  3202                           
  3203  0079                     memcpy@d1:	
  3204                           ; 1 bytes @ 0x9
  3205                           
  3206                           
  3207                           ; 1 bytes @ 0x9
  3208  0079                     	ds	1
  3209  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3210  007A                     MTOUCH_Button_Initialize@button:	
  3211                           ; 1 bytes @ 0xA
  3212                           
  3213  007A                     memcpy@d:	
  3214                           ; 1 bytes @ 0xA
  3215                           
  3216                           
  3217                           ; 1 bytes @ 0xA
  3218  007A                     	ds	1
  3219  007B                     ??_MTOUCH_Button_InitializeAll:	
  3220  007B                     ?_fputs:	
  3221                           ; 1 bytes @ 0xB
  3222                           
  3223  007B                     Button_Reading_Update_Helper@button:	
  3224                           ; 2 bytes @ 0xB
  3225                           
  3226  007B                     fputs@fp:	
  3227                           ; 1 bytes @ 0xB
  3228                           
  3229                           
  3230                           ; 1 bytes @ 0xB
  3231  007B                     	ds	1
  3232  007C                     ??_Button_Reading_Update:	
  3233  007C                     ??_MTOUCH_Initialize:	
  3234                           ; 1 bytes @ 0xC
  3235                           
  3236  007C                     ??_SYSTEM_Initialize:	
  3237                           ; 1 bytes @ 0xC
  3238                           
  3239                           
  3240                           	psect	cstackBANK0
  3241  0020                     __pcstackBANK0:	
  3242                           ; 1 bytes @ 0xC
  3243                           
  3244  0020                     ??_Button_Baseline_Initialize:	
  3245  0020                     ??_fputs:	
  3246                           ; 1 bytes @ 0x0
  3247                           
  3248  0020                     ?___aodiv:	
  3249                           ; 1 bytes @ 0x0
  3250                           
  3251  0020                     ?___aomod:	
  3252                           ; 8 bytes @ 0x0
  3253                           
  3254  0020                     MTOUCH_Button_InitializeAll@button:	
  3255                           ; 8 bytes @ 0x0
  3256                           
  3257  0020                     Button_Deviation_Update@button:	
  3258                           ; 1 bytes @ 0x0
  3259                           
  3260  0020                     Button_Reading_Update@button:	
  3261                           ; 1 bytes @ 0x0
  3262                           
  3263  0020                     ___aodiv@divisor:	
  3264                           ; 1 bytes @ 0x0
  3265                           
  3266  0020                     ___aomod@divisor:	
  3267                           ; 8 bytes @ 0x0
  3268                           
  3269                           
  3270                           ; 8 bytes @ 0x0
  3271  0020                     	ds	1
  3272  0021                     Button_Deviation_Update@deviation:	
  3273                           
  3274                           ; 4 bytes @ 0x1
  3275  0021                     	ds	2
  3276  0023                     fputs@c:	
  3277                           
  3278                           ; 1 bytes @ 0x3
  3279  0023                     	ds	1
  3280  0024                     ?_Button_State_Initializing:	
  3281  0024                     ?_Button_State_NotPressed:	
  3282                           ; 1 bytes @ 0x4
  3283                           
  3284  0024                     ?_Button_State_Pressed:	
  3285                           ; 1 bytes @ 0x4
  3286                           
  3287  0024                     Button_State_Initializing@button:	
  3288                           ; 1 bytes @ 0x4
  3289                           
  3290  0024                     Button_State_NotPressed@button:	
  3291                           ; 1 bytes @ 0x4
  3292                           
  3293  0024                     Button_State_Pressed@button:	
  3294                           ; 1 bytes @ 0x4
  3295                           
  3296  0024                     fputs@i:	
  3297                           ; 1 bytes @ 0x4
  3298                           
  3299                           
  3300                           ; 2 bytes @ 0x4
  3301  0024                     	ds	1
  3302  0025                     ??_Button_State_Initializing:	
  3303  0025                     ??_Button_State_NotPressed:	
  3304                           ; 1 bytes @ 0x5
  3305                           
  3306  0025                     ??_Button_State_Pressed:	
  3307                           ; 1 bytes @ 0x5
  3308                           
  3309                           
  3310                           ; 1 bytes @ 0x5
  3311  0025                     	ds	1
  3312  0026                     fputs@s:	
  3313                           
  3314                           ; 1 bytes @ 0x6
  3315  0026                     	ds	1
  3316  0027                     ?_pad:	
  3317  0027                     pad@buf:	
  3318                           ; 2 bytes @ 0x7
  3319                           
  3320                           
  3321                           ; 1 bytes @ 0x7
  3322  0027                     	ds	1
  3323  0028                     pad@p:	
  3324  0028                     ___aodiv@dividend:	
  3325                           ; 2 bytes @ 0x8
  3326                           
  3327  0028                     ___aomod@dividend:	
  3328                           ; 8 bytes @ 0x8
  3329                           
  3330                           
  3331                           ; 8 bytes @ 0x8
  3332  0028                     	ds	1
  3333  0029                     ??_Button_Service:	
  3334                           
  3335                           ; 1 bytes @ 0x9
  3336  0029                     	ds	1
  3337  002A                     ??_pad:	
  3338                           
  3339                           ; 1 bytes @ 0xA
  3340  002A                     	ds	1
  3341  002B                     Button_Service@name:	
  3342  002B                     pad@i:	
  3343                           ; 1 bytes @ 0xB
  3344                           
  3345                           
  3346                           ; 2 bytes @ 0xB
  3347  002B                     	ds	1
  3348  002C                     Button_Service@button:	
  3349                           
  3350                           ; 1 bytes @ 0xC
  3351  002C                     	ds	1
  3352  002D                     ??_MTOUCH_Button_ServiceAll:	
  3353  002D                     pad@w:	
  3354                           ; 1 bytes @ 0xD
  3355                           
  3356                           
  3357                           ; 2 bytes @ 0xD
  3358  002D                     	ds	1
  3359  002E                     MTOUCH_Button_ServiceAll@button:	
  3360                           
  3361                           ; 1 bytes @ 0xE
  3362  002E                     	ds	1
  3363  002F                     pad@fp:	
  3364                           
  3365                           ; 1 bytes @ 0xF
  3366  002F                     	ds	1
  3367  0030                     ?_dtoa:	
  3368  0030                     Sensor_postAcquisitionProcess@adcIndex:	
  3369                           ; 2 bytes @ 0x10
  3370                           
  3371  0030                     Sensor_autoCalibration@adcIndex:	
  3372                           ; 1 bytes @ 0x10
  3373                           
  3374  0030                     dtoa@d:	
  3375                           ; 1 bytes @ 0x10
  3376                           
  3377                           
  3378                           ; 8 bytes @ 0x10
  3379  0030                     	ds	1
  3380  0031                     Sensor_autoCalibration@sensor:	
  3381  0031                     Sensor_postAcquisitionProcess@deviation:	
  3382                           ; 1 bytes @ 0x11
  3383                           
  3384                           
  3385                           ; 2 bytes @ 0x11
  3386  0031                     	ds	1
  3387  0032                     ?_Sensor_Acq_ExecutePacket:	
  3388  0032                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3389                           ; 1 bytes @ 0x12
  3390                           
  3391                           
  3392                           ; 1 bytes @ 0x12
  3393  0032                     	ds	1
  3394  0033                     ??_Sensor_Acq_ExecutePacket:	
  3395  0033                     Sensor_postAcquisitionProcess@sensor:	
  3396                           ; 1 bytes @ 0x13
  3397                           
  3398                           
  3399                           ; 1 bytes @ 0x13
  3400  0033                     	ds	1
  3401  0034                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3402                           
  3403                           ; 1 bytes @ 0x14
  3404  0034                     	ds	1
  3405  0035                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3406                           
  3407                           ; 1 bytes @ 0x15
  3408  0035                     	ds	1
  3409  0036                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3410                           
  3411                           ; 1 bytes @ 0x16
  3412  0036                     	ds	1
  3413  0037                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3414                           
  3415                           ; 1 bytes @ 0x17
  3416  0037                     	ds	1
  3417  0038                     ??_dtoa:	
  3418  0038                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3419                           ; 1 bytes @ 0x18
  3420                           
  3421                           
  3422                           ; 1 bytes @ 0x18
  3423  0038                     	ds	1
  3424  0039                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3425                           
  3426                           ; 1 bytes @ 0x19
  3427  0039                     	ds	1
  3428  003A                     Sensor_Acq_ExecutePacket@activeSensor:	
  3429                           
  3430                           ; 1 bytes @ 0x1A
  3431  003A                     	ds	1
  3432  003B                     Sensor_Acq_ExecutePacket@last_a:	
  3433  003B                     _dtoa$1959:	
  3434                           ; 2 bytes @ 0x1B
  3435                           
  3436                           
  3437                           ; 2 bytes @ 0x1B
  3438  003B                     	ds	2
  3439  003D                     dtoa@fp:	
  3440  003D                     Sensor_Acq_ExecutePacket@last_b:	
  3441                           ; 1 bytes @ 0x1D
  3442                           
  3443                           
  3444                           ; 2 bytes @ 0x1D
  3445  003D                     	ds	1
  3446  003E                     dtoa@p:	
  3447                           
  3448                           ; 2 bytes @ 0x1E
  3449  003E                     	ds	1
  3450  003F                     Sensor_Acq_ExecutePacket@packet_counter:	
  3451                           
  3452                           ; 1 bytes @ 0x1F
  3453  003F                     	ds	1
  3454  0040                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3455  0040                     dtoa@w:	
  3456                           ; 1 bytes @ 0x20
  3457                           
  3458                           
  3459                           ; 2 bytes @ 0x20
  3460  0040                     	ds	1
  3461  0041                     ?_Sensor_Scanfrequency_Evaluation:	
  3462  0041                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3463                           ; 1 bytes @ 0x21
  3464                           
  3465                           
  3466                           ; 1 bytes @ 0x21
  3467  0041                     	ds	1
  3468  0042                     ??_Sensor_Scanfrequency_Evaluation:	
  3469  0042                     dtoa@s:	
  3470                           ; 1 bytes @ 0x22
  3471                           
  3472                           
  3473                           ; 2 bytes @ 0x22
  3474  0042                     	ds	2
  3475  0044                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3476  0044                     dtoa@n:	
  3477                           ; 1 bytes @ 0x24
  3478                           
  3479                           
  3480                           ; 8 bytes @ 0x24
  3481  0044                     	ds	1
  3482  0045                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3483                           
  3484                           ; 2 bytes @ 0x25
  3485  0045                     	ds	2
  3486  0047                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3487                           
  3488                           ; 1 bytes @ 0x27
  3489  0047                     	ds	1
  3490  0048                     Sensor_Scanfrequency_Evaluation@retry:	
  3491                           
  3492                           ; 1 bytes @ 0x28
  3493  0048                     	ds	1
  3494  0049                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3495                           
  3496                           ; 4 bytes @ 0x29
  3497  0049                     	ds	3
  3498  004C                     dtoa@i:	
  3499                           
  3500                           ; 2 bytes @ 0x2C
  3501  004C                     	ds	1
  3502  004D                     Sensor_Scanfrequency_Evaluation@i:	
  3503                           
  3504                           ; 1 bytes @ 0x2D
  3505  004D                     	ds	1
  3506  004E                     ?_Sensor_Acquisition:	
  3507  004E                     ?_vfpfcnvrt:	
  3508                           ; 1 bytes @ 0x2E
  3509                           
  3510  004E                     Sensor_Acquisition@sensor_adc2:	
  3511                           ; 2 bytes @ 0x2E
  3512                           
  3513  004E                     vfpfcnvrt@fmt:	
  3514                           ; 1 bytes @ 0x2E
  3515                           
  3516                           
  3517                           ; 1 bytes @ 0x2E
  3518  004E                     	ds	1
  3519  004F                     ??_Sensor_Acquisition:	
  3520  004F                     vfpfcnvrt@ap:	
  3521                           ; 1 bytes @ 0x2F
  3522                           
  3523                           
  3524                           ; 1 bytes @ 0x2F
  3525  004F                     	ds	1
  3526  0050                     ??_vfpfcnvrt:	
  3527  0050                     Sensor_Acquisition@retry:	
  3528                           ; 1 bytes @ 0x30
  3529                           
  3530                           
  3531                           ; 1 bytes @ 0x30
  3532  0050                     	ds	1
  3533  0051                     Sensor_Acquisition@sensor_adc1:	
  3534                           
  3535                           ; 1 bytes @ 0x31
  3536  0051                     	ds	1
  3537  0052                     ??_Sensor_Service:	
  3538                           
  3539                           ; 1 bytes @ 0x32
  3540  0052                     	ds	3
  3541  0055                     Sensor_Service@scanGroup:	
  3542  0055                     vfpfcnvrt@ll:	
  3543                           ; 1 bytes @ 0x35
  3544                           
  3545                           
  3546                           ; 8 bytes @ 0x35
  3547  0055                     	ds	1
  3548  0056                     Sensor_Service@error:	
  3549                           
  3550                           ; 1 bytes @ 0x36
  3551  0056                     	ds	1
  3552  0057                     Sensor_Service@sensor_adc1:	
  3553                           
  3554                           ; 1 bytes @ 0x37
  3555  0057                     	ds	1
  3556  0058                     Sensor_Service@sensor_adc2:	
  3557                           
  3558                           ; 1 bytes @ 0x38
  3559  0058                     	ds	1
  3560  0059                     ??_MTOUCH_Sensor_SampleAll:	
  3561                           
  3562                           ; 1 bytes @ 0x39
  3563  0059                     	ds	1
  3564  005A                     MTOUCH_Sensor_SampleAll@group:	
  3565                           
  3566                           ; 1 bytes @ 0x3A
  3567  005A                     	ds	1
  3568  005B                     ??_MTOUCH_Service_Mainloop:	
  3569                           
  3570                           ; 1 bytes @ 0x3B
  3571  005B                     	ds	2
  3572  005D                     vfpfcnvrt@fp:	
  3573                           
  3574                           ; 1 bytes @ 0x3D
  3575  005D                     	ds	1
  3576  005E                     ?_vfprintf:	
  3577  005E                     vfprintf@fmt:	
  3578                           ; 2 bytes @ 0x3E
  3579                           
  3580                           
  3581                           ; 2 bytes @ 0x3E
  3582  005E                     	ds	2
  3583  0060                     vfprintf@ap:	
  3584                           
  3585                           ; 1 bytes @ 0x40
  3586  0060                     	ds	1
  3587  0061                     ??_vfprintf:	
  3588                           
  3589                           ; 1 bytes @ 0x41
  3590  0061                     	ds	2
  3591  0063                     vfprintf@fp:	
  3592                           
  3593                           ; 1 bytes @ 0x43
  3594  0063                     	ds	1
  3595  0064                     vfprintf@cfmt:	
  3596                           
  3597                           ; 2 bytes @ 0x44
  3598  0064                     	ds	2
  3599  0066                     ?_printf:	
  3600  0066                     printf@fmt:	
  3601                           ; 2 bytes @ 0x46
  3602                           
  3603                           
  3604                           ; 2 bytes @ 0x46
  3605  0066                     	ds	6
  3606  006C                     ??_printf:	
  3607                           
  3608                           ; 1 bytes @ 0x4C
  3609  006C                     	ds	3
  3610  006F                     printf@ap:	
  3611                           
  3612                           ; 1 bytes @ 0x4F
  3613  006F                     	ds	1
  3614                           
  3615                           	psect	maintext
  3616  037F                     __pmaintext:	
  3617 ;;
  3618 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3619 ;;
  3620 ;; *************** function _main *****************
  3621 ;; Defined at:
  3622 ;;		line 15 in file "main.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;		None
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;		None
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      void 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : B1F/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3636 ;;      Params:         0       0       0       0       0       0       0       0
  3637 ;;      Locals:         0       0       0       0       0       0       0       0
  3638 ;;      Temps:          0       0       2       0       0       0       0       0
  3639 ;;      Totals:         0       0       2       0       0       0       0       0
  3640 ;;Total ram usage:        2 bytes
  3641 ;; Hardware stack levels required when called:   13
  3642 ;; This function calls:
  3643 ;;		_MTOUCH_Button_Buttonmask_Get
  3644 ;;		_MTOUCH_Button_SetNotPressedCallback
  3645 ;;		_MTOUCH_Button_SetPressedCallback
  3646 ;;		_MTOUCH_Service_Mainloop
  3647 ;;		_SYSTEM_Initialize
  3648 ;;		_printf
  3649 ;; This function is called by:
  3650 ;;		Startup code after reset
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           
  3655                           ;psect for function _main
  3656  037F                     _main:	
  3657                           
  3658                           ;main.c: 17:     SYSTEM_Initialize();
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3662  037F  3196  26A4  3183   	fcall	_SYSTEM_Initialize
  3663                           
  3664                           ;main.c: 18:     printf("RESET\r\n");
  3665  0382  304B               	movlw	low (STR_1| (0+32768))
  3666  0383  0020               	movlb	0	; select bank0
  3667  0384  00E6               	movwf	printf@fmt
  3668  0385  3098               	movlw	high (STR_1| (0+32768))
  3669  0386  00E7               	movwf	printf@fmt+1
  3670  0387  3196  2632  3183   	fcall	_printf
  3671                           
  3672                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3673  038A  178B               	bsf	11,7	;volatile
  3674                           
  3675                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3676  038B  170B               	bsf	11,6	;volatile
  3677                           
  3678                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3679  038C  30EB               	movlw	low _myButtonPressedCallback
  3680  038D  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3681  038E  3014               	movlw	high _myButtonPressedCallback
  3682  038F  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3683  0390  3195  2513  3183   	fcall	_MTOUCH_Button_SetPressedCallback
  3684                           
  3685                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3686  0393  30E8               	movlw	low _myButtonReleasedCallback
  3687  0394  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3688  0395  3014               	movlw	high _myButtonReleasedCallback
  3689  0396  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3690  0397  3195  250D  3183   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3691                           
  3692                           ;main.c: 25:     triac_level.full = 0x00;
  3693  039A  0021               	movlb	1	; select bank1
  3694  039B  01BE               	clrf	_triac_level^(0+128)
  3695  039C  01BF               	clrf	(_triac_level+1)^(0+128)
  3696  039D                     l5753:	
  3697                           
  3698                           ;main.c: 27:     {;main.c: 29:         if(MTOUCH_Service_Mainloop())
  3699  039D  3197  27C5  3183   	fcall	_MTOUCH_Service_Mainloop
  3700  03A0  3A00               	xorlw	0
  3701  03A1  1903               	skipnz
  3702  03A2  2B9D               	goto	l5753
  3703                           
  3704                           ;main.c: 30:         {;main.c: 31:             if(ZCD_STATE == 1)
  3705  03A3  0021               	movlb	1	; select bank1
  3706  03A4  0347               	decf	_ZCD_STATE^(0+128),w
  3707  03A5  1D03               	btfss	3,2
  3708  03A6  2BBF               	goto	l5765
  3709                           
  3710                           ;main.c: 32:             {;main.c: 33:                 triac_c.cd--;
  3711  03A7  083C               	movf	_triac_c^(0+128),w
  3712  03A8  390F               	andlw	15
  3713  03A9  00EA               	movwf	??_main^(0+128)
  3714  03AA  03EA               	decf	??_main^(0+128),f
  3715  03AB  083C               	movf	_triac_c^(0+128),w
  3716  03AC  066A               	xorwf	??_main^(0+128),w
  3717  03AD  39F0               	andlw	-16
  3718  03AE  066A               	xorwf	??_main^(0+128),w
  3719  03AF  00BC               	movwf	_triac_c^(0+128)
  3720                           
  3721                           ;main.c: 34:                 if(triac_c.cd == 0)
  3722  03B0  083C               	movf	_triac_c^(0+128),w
  3723  03B1  390F               	andlw	15
  3724  03B2  3A00               	xorlw	0
  3725  03B3  1D03               	skipz
  3726  03B4  2BBF               	goto	l5765
  3727                           
  3728                           ;main.c: 35:                 {;main.c: 36:                     do { LATCbits.LATC3 = 0; 
      +                          } while(0);
  3729  03B5  0022               	movlb	2	; select bank2
  3730  03B6  118E               	bcf	14,3	;volatile
  3731                           
  3732                           ;main.c: 37:                     _delay((unsigned long)((100)*(32000000/4000000.0)));
  3733  03B7  30A0               	movlw	160
  3734  03B8                     u6457:	
  3735  03B8  3200               	nop2
  3736  03B9  0B89               	decfsz	9,f
  3737  03BA  2BB8               	goto	u6457
  3738  03BB  0022               	movlb	2	; select bank2
  3739  03BC  158E               	bsf	14,3	;volatile
  3740                           
  3741                           ;main.c: 39:                     ZCD_STATE = 0;
  3742  03BD  0021               	movlb	1	; select bank1
  3743  03BE  01C7               	clrf	_ZCD_STATE^(0+128)
  3744  03BF                     l5765:	
  3745                           
  3746                           ;main.c: 42:             if(counter_ON_OFF == 1)
  3747  03BF  034C               	decf	_counter_ON_OFF^(0+128),w
  3748  03C0  1D03               	btfss	3,2
  3749  03C1  2BD0               	goto	l5771
  3750                           
  3751                           ;main.c: 43:             {;main.c: 44:                 counter_1s++;
  3752  03C2  3001               	movlw	1
  3753  03C3  07C0               	addwf	_counter_1s^(0+128),f
  3754  03C4  3000               	movlw	0
  3755  03C5  3DC1               	addwfc	(_counter_1s+1)^(0+128),f
  3756                           
  3757                           ;main.c: 45:                 if(counter_1s >= 200)
  3758  03C6  3000               	movlw	0
  3759  03C7  0241               	subwf	(_counter_1s+1)^(0+128),w
  3760  03C8  30C8               	movlw	200
  3761  03C9  1903               	skipnz
  3762  03CA  0240               	subwf	_counter_1s^(0+128),w
  3763  03CB  1C03               	skipc
  3764  03CC  2BD0               	goto	l5771
  3765                           
  3766                           ;main.c: 46:                 {;main.c: 47:                     counter_1s = 0;
  3767  03CD  01C0               	clrf	_counter_1s^(0+128)
  3768  03CE  01C1               	clrf	(_counter_1s+1)^(0+128)
  3769                           
  3770                           ;main.c: 48:                     counter_ON_OFF = 0;
  3771  03CF  01CC               	clrf	_counter_ON_OFF^(0+128)
  3772  03D0                     l5771:	
  3773                           
  3774                           ;main.c: 51:             if(last_touch_status.CS1 == 1)
  3775  03D0  1CC2               	btfss	_last_touch_status^(0+128),1
  3776  03D1  2C25               	goto	l5801
  3777                           
  3778                           ;main.c: 52:             {;main.c: 53:                 if(MTOUCH_Button_Buttonmask_Get()
      +                           == 1 && triac_level.full!=0xFF)
  3779  03D2  3197  27E2  3183   	fcall	_MTOUCH_Button_Buttonmask_Get
  3780  03D5  3A01               	xorlw	1
  3781  03D6  1D03               	skipz
  3782  03D7  2BEA               	goto	l5787
  3783  03D8  0021               	movlb	1	; select bank1
  3784  03D9  0A3E               	incf	_triac_level^(0+128),w
  3785  03DA  043F               	iorwf	(_triac_level+1)^(0+128),w
  3786  03DB  1903               	btfsc	3,2
  3787  03DC  2BEA               	goto	l5787
  3788                           
  3789                           ;main.c: 54:                 {;main.c: 55:                     counter_PRESS++;
  3790  03DD  3001               	movlw	1
  3791  03DE  00EA               	movwf	??_main^(0+128)
  3792  03DF  086A               	movf	??_main^(0+128),w
  3793  03E0  07CB               	addwf	_counter_PRESS^(0+128),f
  3794                           
  3795                           ;main.c: 56:                     if(counter_PRESS == 100)
  3796  03E1  3064               	movlw	100
  3797  03E2  064B               	xorwf	_counter_PRESS^(0+128),w
  3798  03E3  1D03               	btfss	3,2
  3799  03E4  2C25               	goto	l5801
  3800                           
  3801                           ;main.c: 57:                     {;main.c: 58:                             triac_level.l
      +                          evel++;
  3802  03E5  083E               	movf	_triac_level^(0+128),w
  3803  03E6  390F               	andlw	15
  3804  03E7  00EA               	movwf	??_main^(0+128)
  3805  03E8  0AEA               	incf	??_main^(0+128),f
  3806  03E9  2C01               	goto	L1
  3807  03EA                     l5787:	
  3808                           ;main.c: 59:                             printf("------%d---------\r\n",triac_level.leve
      +                          l);
  3809                           
  3810  03EA  3197  27E2  3183   	fcall	_MTOUCH_Button_Buttonmask_Get
  3811  03ED  3A04               	xorlw	4
  3812  03EE  1D03               	skipz
  3813  03EF  2C25               	goto	l5801
  3814  03F0  0021               	movlb	1	; select bank1
  3815  03F1  083E               	movf	_triac_level^(0+128),w
  3816  03F2  043F               	iorwf	(_triac_level+1)^(0+128),w
  3817  03F3  1903               	btfsc	3,2
  3818  03F4  2C25               	goto	l5801
  3819                           
  3820                           ;main.c: 65:                 {;main.c: 66:                     counter_PRESS++;
  3821  03F5  3001               	movlw	1
  3822  03F6  00EA               	movwf	??_main^(0+128)
  3823  03F7  086A               	movf	??_main^(0+128),w
  3824  03F8  07CB               	addwf	_counter_PRESS^(0+128),f
  3825                           
  3826                           ;main.c: 67:                     if(counter_PRESS == 100)
  3827  03F9  3064               	movlw	100
  3828  03FA  064B               	xorwf	_counter_PRESS^(0+128),w
  3829  03FB  1D03               	btfss	3,2
  3830  03FC  2C25               	goto	l5801
  3831                           
  3832                           ;main.c: 68:                     {;main.c: 69:                         triac_level.level
      +                          --;
  3833  03FD  083E               	movf	_triac_level^(0+128),w
  3834  03FE  390F               	andlw	15
  3835  03FF  00EA               	movwf	??_main^(0+128)
  3836  0400  03EA               	decf	??_main^(0+128),f
  3837  0401                     L1:	
  3838  0401  083E               	movf	_triac_level^(0+128),w
  3839  0402  066A               	xorwf	??_main^(0+128),w
  3840  0403  39F0               	andlw	-16
  3841  0404  066A               	xorwf	??_main^(0+128),w
  3842  0405  00BE               	movwf	_triac_level^(0+128)
  3843                           
  3844                           ;main.c: 70:                         printf("------%d---------\r\n",triac_level.level);
  3845  0406  301C               	movlw	low (STR_2| (0+32768))
  3846  0407  0020               	movlb	0	; select bank0
  3847  0408  00E6               	movwf	printf@fmt
  3848  0409  3098               	movlw	high (STR_2| (0+32768))
  3849  040A  00E7               	movwf	printf@fmt+1
  3850  040B  0021               	movlb	1	; select bank1
  3851  040C  083E               	movf	_triac_level^(0+128),w
  3852  040D  390F               	andlw	15
  3853  040E  00EA               	movwf	??_main^(0+128)
  3854  040F  01EB               	clrf	(??_main^(0+128)+1)
  3855  0410  086A               	movf	??_main^(0+128),w
  3856  0411  0020               	movlb	0	; select bank0
  3857  0412  00E8               	movwf	?_printf+2
  3858  0413  0021               	movlb	1	; select bank1
  3859  0414  086B               	movf	(??_main+1)^(0+128),w
  3860  0415  0020               	movlb	0	; select bank0
  3861  0416  00E9               	movwf	?_printf+3
  3862  0417  3196  2632  3183   	fcall	_printf
  3863                           
  3864                           ;main.c: 60:                             triac_level.last_level = triac_level.level;
  3865  041A  0021               	movlb	1	; select bank1
  3866  041B  083E               	movf	_triac_level^(0+128),w
  3867  041C  390F               	andlw	15
  3868  041D  00EA               	movwf	??_main^(0+128)
  3869  041E  0EEA               	swapf	??_main^(0+128),f
  3870  041F  083E               	movf	_triac_level^(0+128),w
  3871  0420  066A               	xorwf	??_main^(0+128),w
  3872  0421  390F               	andlw	-241
  3873  0422  066A               	xorwf	??_main^(0+128),w
  3874  0423  00BE               	movwf	_triac_level^(0+128)
  3875                           
  3876                           ;main.c: 61:                             counter_PRESS = 0;
  3877  0424  01CB               	clrf	_counter_PRESS^(0+128)
  3878  0425                     l5801:	
  3879                           
  3880                           ;main.c: 78:             if(turn_off == 1)
  3881  0425  0021               	movlb	1	; select bank1
  3882  0426  0349               	decf	_turn_off^(0+128),w
  3883  0427  1D03               	btfss	3,2
  3884  0428  2C62               	goto	l5817
  3885                           
  3886                           ;main.c: 79:             {;main.c: 80:                 counter_1s++;
  3887  0429  3001               	movlw	1
  3888  042A  07C0               	addwf	_counter_1s^(0+128),f
  3889  042B  3000               	movlw	0
  3890  042C  3DC1               	addwfc	(_counter_1s+1)^(0+128),f
  3891                           
  3892                           ;main.c: 81:                 if(counter_1s >= 100)
  3893  042D  3000               	movlw	0
  3894  042E  0241               	subwf	(_counter_1s+1)^(0+128),w
  3895  042F  3064               	movlw	100
  3896  0430  1903               	skipnz
  3897  0431  0240               	subwf	_counter_1s^(0+128),w
  3898  0432  1C03               	skipc
  3899  0433  2C53               	goto	l5811
  3900                           
  3901                           ;main.c: 82:                 {;main.c: 83:                     counter_1s = 0;
  3902  0434  01C0               	clrf	_counter_1s^(0+128)
  3903  0435  01C1               	clrf	(_counter_1s+1)^(0+128)
  3904                           
  3905                           ;main.c: 84:                     triac_level.level--;
  3906  0436  083E               	movf	_triac_level^(0+128),w
  3907  0437  390F               	andlw	15
  3908  0438  00EA               	movwf	??_main^(0+128)
  3909  0439  03EA               	decf	??_main^(0+128),f
  3910  043A  083E               	movf	_triac_level^(0+128),w
  3911  043B  066A               	xorwf	??_main^(0+128),w
  3912  043C  39F0               	andlw	-16
  3913  043D  066A               	xorwf	??_main^(0+128),w
  3914  043E  00BE               	movwf	_triac_level^(0+128)
  3915                           
  3916                           ;main.c: 85:                     printf("------%d---------\r\n",triac_level.level);
  3917  043F  301C               	movlw	low (STR_2| (0+32768))
  3918  0440  0020               	movlb	0	; select bank0
  3919  0441  00E6               	movwf	printf@fmt
  3920  0442  3098               	movlw	high (STR_2| (0+32768))
  3921  0443  00E7               	movwf	printf@fmt+1
  3922  0444  0021               	movlb	1	; select bank1
  3923  0445  083E               	movf	_triac_level^(0+128),w
  3924  0446  390F               	andlw	15
  3925  0447  00EA               	movwf	??_main^(0+128)
  3926  0448  01EB               	clrf	(??_main^(0+128)+1)
  3927  0449  086A               	movf	??_main^(0+128),w
  3928  044A  0020               	movlb	0	; select bank0
  3929  044B  00E8               	movwf	?_printf+2
  3930  044C  0021               	movlb	1	; select bank1
  3931  044D  086B               	movf	(??_main+1)^(0+128),w
  3932  044E  0020               	movlb	0	; select bank0
  3933  044F  00E9               	movwf	?_printf+3
  3934  0450  3196  2632  3183   	fcall	_printf
  3935  0453                     l5811:	
  3936                           
  3937                           ;main.c: 87:                 if(triac_level.level == 0)
  3938  0453  0021               	movlb	1	; select bank1
  3939  0454  083E               	movf	_triac_level^(0+128),w
  3940  0455  390F               	andlw	15
  3941  0456  3A00               	xorlw	0
  3942  0457  1D03               	skipz
  3943  0458  2C62               	goto	l5817
  3944                           
  3945                           ;main.c: 88:                 {;main.c: 89:                     turn_off = 0;
  3946  0459  01C9               	clrf	_turn_off^(0+128)
  3947                           
  3948                           ;main.c: 90:                     printf("----OFF----\r\n");
  3949  045A  3030               	movlw	low (STR_5| (0+32768))
  3950  045B  0020               	movlb	0	; select bank0
  3951  045C  00E6               	movwf	printf@fmt
  3952  045D  3098               	movlw	high (STR_5| (0+32768))
  3953  045E  00E7               	movwf	printf@fmt+1
  3954  045F  3196  2632  3183   	fcall	_printf
  3955  0462                     l5817:	
  3956                           
  3957                           ;main.c: 94:             if(turn_on == 1)
  3958  0462  0021               	movlb	1	; select bank1
  3959  0463  0348               	decf	_turn_on^(0+128),w
  3960  0464  1D03               	btfss	3,2
  3961  0465  2B9D               	goto	l5753
  3962                           
  3963                           ;main.c: 95:             {;main.c: 96:                 counter_1s++;
  3964  0466  3001               	movlw	1
  3965  0467  07C0               	addwf	_counter_1s^(0+128),f
  3966  0468  3000               	movlw	0
  3967  0469  3DC1               	addwfc	(_counter_1s+1)^(0+128),f
  3968                           
  3969                           ;main.c: 97:                 if(counter_1s >= 100)
  3970  046A  3000               	movlw	0
  3971  046B  0241               	subwf	(_counter_1s+1)^(0+128),w
  3972  046C  3064               	movlw	100
  3973  046D  1903               	skipnz
  3974  046E  0240               	subwf	_counter_1s^(0+128),w
  3975  046F  1C03               	skipc
  3976  0470  2C90               	goto	l5827
  3977                           
  3978                           ;main.c: 98:                 {;main.c: 99:                     counter_1s = 0;
  3979  0471  01C0               	clrf	_counter_1s^(0+128)
  3980  0472  01C1               	clrf	(_counter_1s+1)^(0+128)
  3981                           
  3982                           ;main.c: 100:                     triac_level.level++;
  3983  0473  083E               	movf	_triac_level^(0+128),w
  3984  0474  390F               	andlw	15
  3985  0475  00EA               	movwf	??_main^(0+128)
  3986  0476  0AEA               	incf	??_main^(0+128),f
  3987  0477  083E               	movf	_triac_level^(0+128),w
  3988  0478  066A               	xorwf	??_main^(0+128),w
  3989  0479  39F0               	andlw	-16
  3990  047A  066A               	xorwf	??_main^(0+128),w
  3991  047B  00BE               	movwf	_triac_level^(0+128)
  3992                           
  3993                           ;main.c: 101:                     printf("------%d---------\r\n",triac_level.level);
  3994  047C  301C               	movlw	low (STR_2| (0+32768))
  3995  047D  0020               	movlb	0	; select bank0
  3996  047E  00E6               	movwf	printf@fmt
  3997  047F  3098               	movlw	high (STR_2| (0+32768))
  3998  0480  00E7               	movwf	printf@fmt+1
  3999  0481  0021               	movlb	1	; select bank1
  4000  0482  083E               	movf	_triac_level^(0+128),w
  4001  0483  390F               	andlw	15
  4002  0484  00EA               	movwf	??_main^(0+128)
  4003  0485  01EB               	clrf	(??_main^(0+128)+1)
  4004  0486  086A               	movf	??_main^(0+128),w
  4005  0487  0020               	movlb	0	; select bank0
  4006  0488  00E8               	movwf	?_printf+2
  4007  0489  0021               	movlb	1	; select bank1
  4008  048A  086B               	movf	(??_main+1)^(0+128),w
  4009  048B  0020               	movlb	0	; select bank0
  4010  048C  00E9               	movwf	?_printf+3
  4011  048D  3196  2632  3183   	fcall	_printf
  4012  0490                     l5827:	
  4013                           
  4014                           ;main.c: 103:                 if(triac_level.level == triac_level.last_level)
  4015  0490  0021               	movlb	1	; select bank1
  4016  0491  0E3E               	swapf	_triac_level^(0+128),w
  4017  0492  390F               	andlw	15
  4018  0493  00EA               	movwf	??_main^(0+128)
  4019  0494  083E               	movf	_triac_level^(0+128),w
  4020  0495  390F               	andlw	15
  4021  0496  066A               	xorwf	??_main^(0+128),w
  4022  0497  1D03               	skipz
  4023  0498  2B9D               	goto	l5753
  4024                           
  4025                           ;main.c: 104:                 {;main.c: 105:                     turn_on = 0;
  4026  0499  01C8               	clrf	_turn_on^(0+128)
  4027                           
  4028                           ;main.c: 106:                     printf("----ON----\r\n");
  4029  049A  303E               	movlw	low (STR_7| (0+32768))
  4030  049B  0020               	movlb	0	; select bank0
  4031  049C  00E6               	movwf	printf@fmt
  4032  049D  3098               	movlw	high (STR_7| (0+32768))
  4033  049E  00E7               	movwf	printf@fmt+1
  4034  049F  3196  2632  3183   	fcall	_printf
  4035                           
  4036                           ;main.c: 109:         }
  4037  04A2  2B9D               	goto	l5753
  4038  04A3                     __end_of_main:	
  4039                           
  4040                           	psect	text1
  4041  1632                     __ptext1:	
  4042 ;; *************** function _printf *****************
  4043 ;; Defined at:
  4044 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  fmt             2   70[BANK0 ] PTR const unsigned char 
  4047 ;;		 -> STR_9(28), STR_8(28), STR_7(13), STR_6(20), 
  4048 ;;		 -> STR_5(14), STR_4(20), STR_3(20), STR_2(20), 
  4049 ;;		 -> STR_1(8), 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  ret             2    0        int 
  4052 ;;  ap              1   79[BANK0 ] PTR void [1]
  4053 ;;		 -> ?_printf(2), 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  2   70[BANK0 ] int 
  4056 ;; Registers used:
  4057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4063 ;;      Params:         0       6       0       0       0       0       0       0
  4064 ;;      Locals:         0       3       0       0       0       0       0       0
  4065 ;;      Temps:          0       1       0       0       0       0       0       0
  4066 ;;      Totals:         0      10       0       0       0       0       0       0
  4067 ;;Total ram usage:       10 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:   12
  4070 ;; This function calls:
  4071 ;;		_vfprintf
  4072 ;; This function is called by:
  4073 ;;		_main
  4074 ;;		_check_up_down
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           
  4079                           ;psect for function _printf
  4080  1632                     _printf:	
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4084  1632  3068               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4085  1633  0020               	movlb	0	; select bank0
  4086  1634  00EC               	movwf	??_printf
  4087  1635  086C               	movf	??_printf,w
  4088  1636  00EF               	movwf	printf@ap
  4089  1637  0867               	movf	printf@fmt+1,w
  4090  1638  00DF               	movwf	vfprintf@fmt+1
  4091  1639  0866               	movf	printf@fmt,w
  4092  163A  00DE               	movwf	vfprintf@fmt
  4093  163B  306F               	movlw	(low (printf@ap| 0))& (0+255)
  4094  163C  00EC               	movwf	??_printf
  4095  163D  086C               	movf	??_printf,w
  4096  163E  00E0               	movwf	vfprintf@ap
  4097  163F  3000               	movlw	0
  4098  1640  3189  2150         	fcall	_vfprintf
  4099  1642  0008               	return
  4100  1643                     __end_of_printf:	
  4101                           
  4102                           	psect	text2
  4103  0950                     __ptext2:	
  4104 ;; *************** function _vfprintf *****************
  4105 ;; Defined at:
  4106 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  fp              1    wreg     PTR struct _IO_FILE
  4109 ;;		 -> NULL(0), 
  4110 ;;  fmt             2   62[BANK0 ] PTR const unsigned char 
  4111 ;;		 -> STR_9(28), STR_8(28), STR_7(13), STR_6(20), 
  4112 ;;		 -> STR_5(14), STR_4(20), STR_3(20), STR_2(20), 
  4113 ;;		 -> STR_1(8), 
  4114 ;;  ap              1   64[BANK0 ] PTR PTR void 
  4115 ;;		 -> printf@ap(1), 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;  fp              1   67[BANK0 ] PTR struct _IO_FILE
  4118 ;;		 -> NULL(0), 
  4119 ;;  cfmt            2   68[BANK0 ] PTR unsigned char 
  4120 ;;		 -> STR_9(28), STR_8(28), STR_7(13), STR_6(20), 
  4121 ;;		 -> STR_5(14), STR_4(20), STR_3(20), STR_2(20), 
  4122 ;;		 -> STR_1(8), 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  2   62[BANK0 ] int 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4132 ;;      Params:         0       3       0       0       0       0       0       0
  4133 ;;      Locals:         0       3       0       0       0       0       0       0
  4134 ;;      Temps:          0       2       0       0       0       0       0       0
  4135 ;;      Totals:         0       8       0       0       0       0       0       0
  4136 ;;Total ram usage:        8 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:   11
  4139 ;; This function calls:
  4140 ;;		_vfpfcnvrt
  4141 ;; This function is called by:
  4142 ;;		_printf
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           
  4147                           ;psect for function _vfprintf
  4148  0950                     _vfprintf:	
  4149                           
  4150                           ;incstack = 0
  4151                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4152                           ;vfprintf@fp stored from wreg
  4153  0950  0020               	movlb	0	; select bank0
  4154  0951  00E3               	movwf	vfprintf@fp
  4155                           
  4156                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  4157  0952  085F               	movf	vfprintf@fmt+1,w
  4158  0953  00E5               	movwf	vfprintf@cfmt+1
  4159  0954  085E               	movf	vfprintf@fmt,w
  4160  0955  00E4               	movwf	vfprintf@cfmt
  4161                           
  4162                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  4163  0956  0021               	movlb	1	; select bank1
  4164  0957  01B4               	clrf	_nout^(0+128)
  4165  0958  01B5               	clrf	(_nout+1)^(0+128)
  4166  0959                     l5607:	
  4167                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4168                           
  4169                           
  4170                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  4171  0959  0020               	movlb	0	; select bank0
  4172  095A  0864               	movf	vfprintf@cfmt,w
  4173  095B  0084               	movwf	4
  4174  095C  0865               	movf	vfprintf@cfmt+1,w
  4175  095D  0085               	movwf	5
  4176  095E  0012               	moviw fsr0++
  4177  095F  1903               	btfsc	3,2
  4178  0960  2976               	goto	l5609
  4179                           
  4180                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  4181  0961  3064               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4182  0962  00E1               	movwf	??_vfprintf
  4183  0963  0861               	movf	??_vfprintf,w
  4184  0964  00CE               	movwf	vfpfcnvrt@fmt
  4185  0965  0860               	movf	vfprintf@ap,w
  4186  0966  00E2               	movwf	??_vfprintf+1
  4187  0967  0862               	movf	??_vfprintf+1,w
  4188  0968  00CF               	movwf	vfpfcnvrt@ap
  4189  0969  0863               	movf	vfprintf@fp,w
  4190  096A  3186  2672  3189   	fcall	_vfpfcnvrt
  4191  096D  0020               	movlb	0	; select bank0
  4192  096E  084E               	movf	?_vfpfcnvrt,w
  4193  096F  0021               	movlb	1	; select bank1
  4194  0970  07B4               	addwf	_nout^(0+128),f
  4195  0971  0020               	movlb	0	; select bank0
  4196  0972  084F               	movf	?_vfpfcnvrt+1,w
  4197  0973  0021               	movlb	1	; select bank1
  4198  0974  3DB5               	addwfc	(_nout+1)^(0+128),f
  4199  0975  2959               	goto	l5607
  4200  0976                     l5609:	
  4201                           
  4202                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  4203  0976  0021               	movlb	1	; select bank1
  4204  0977  0835               	movf	(_nout+1)^(0+128),w
  4205  0978  0020               	movlb	0	; select bank0
  4206  0979  00DF               	movwf	?_vfprintf+1
  4207  097A  0021               	movlb	1	; select bank1
  4208  097B  0834               	movf	_nout^(0+128),w
  4209  097C  0020               	movlb	0	; select bank0
  4210  097D  00DE               	movwf	?_vfprintf
  4211  097E  0008               	return
  4212  097F                     __end_of_vfprintf:	
  4213                           
  4214                           	psect	text3
  4215  0672                     __ptext3:	
  4216 ;; *************** function _vfpfcnvrt *****************
  4217 ;; Defined at:
  4218 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  fp              1    wreg     PTR struct _IO_FILE
  4221 ;;		 -> NULL(0), 
  4222 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
  4223 ;;		 -> vfprintf@cfmt(2), 
  4224 ;;  ap              1   47[BANK0 ] PTR PTR void 
  4225 ;;		 -> printf@ap(1), 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  fp              1   61[BANK0 ] PTR struct _IO_FILE
  4228 ;;		 -> NULL(0), 
  4229 ;;  ll              8   53[BANK0 ] long long 
  4230 ;;  llu             8    0        unsigned long long 
  4231 ;;  f               4    0        unsigned long long 
  4232 ;;  ct              3    0        unsigned char [3]
  4233 ;;  vp              2    0        PTR void 
  4234 ;;  i               2    0        int 
  4235 ;;  done            2    0        int 
  4236 ;;  cp              2    0        PTR unsigned char 
  4237 ;;  c               1    0        unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  2   46[BANK0 ] int 
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4247 ;;      Params:         0       2       0       0       0       0       0       0
  4248 ;;      Locals:         0       9       0       0       0       0       0       0
  4249 ;;      Temps:          0       5       0       0       0       0       0       0
  4250 ;;      Totals:         0      16       0       0       0       0       0       0
  4251 ;;Total ram usage:       16 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:   10
  4254 ;; This function calls:
  4255 ;;		_dtoa
  4256 ;;		_fputc
  4257 ;; This function is called by:
  4258 ;;		_vfprintf
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           
  4263                           ;psect for function _vfpfcnvrt
  4264  0672                     _vfpfcnvrt:	
  4265                           
  4266                           ;incstack = 0
  4267                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4268                           ;vfpfcnvrt@fp stored from wreg
  4269  0672  0020               	movlb	0	; select bank0
  4270  0673  00DD               	movwf	vfpfcnvrt@fp
  4271                           
  4272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  4273  0674  084E               	movf	vfpfcnvrt@fmt,w
  4274  0675  0086               	movwf	6
  4275  0676  0187               	clrf	7
  4276  0677  3F40               	moviw [0]fsr1
  4277  0678  00D0               	movwf	??_vfpfcnvrt
  4278  0679  3F41               	moviw [1]fsr1
  4279  067A  00D1               	movwf	??_vfpfcnvrt+1
  4280  067B  0850               	movf	??_vfpfcnvrt,w
  4281  067C  0084               	movwf	4
  4282  067D  0851               	movf	??_vfpfcnvrt+1,w
  4283  067E  0085               	movwf	5
  4284  067F  0012               	moviw fsr0++
  4285  0680  3A25               	xorlw	37
  4286  0681  1D03               	btfss	3,2
  4287  0682  2F1F               	goto	l5553
  4288                           
  4289                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  4290  0683  084E               	movf	vfpfcnvrt@fmt,w
  4291  0684  0086               	movwf	6
  4292  0685  0187               	clrf	7
  4293  0686  3001               	movlw	1
  4294  0687  0781               	addwf	1,f
  4295  0688  3141               	addfsr 1,1
  4296  0689  1803               	skipnc
  4297  068A  0A81               	incf	1,f
  4298                           
  4299                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  4300  068B  0021               	movlb	1	; select bank1
  4301  068C  01B6               	clrf	_width^(0+128)
  4302  068D  01B7               	clrf	(_width+1)^(0+128)
  4303  068E  01BA               	clrf	_flags^(0+128)
  4304  068F  01BB               	clrf	(_flags+1)^(0+128)
  4305                           
  4306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  4307  0690  30FF               	movlw	255
  4308  0691  00B8               	movwf	_prec^(0+128)
  4309  0692  30FF               	movlw	255
  4310  0693  00B9               	movwf	(_prec^(0+128)+1)
  4311                           
  4312                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  4313  0694  0020               	movlb	0	; select bank0
  4314  0695  084E               	movf	vfpfcnvrt@fmt,w
  4315  0696  0086               	movwf	6
  4316  0697  0187               	clrf	7
  4317  0698  3F40               	moviw [0]fsr1
  4318  0699  00D0               	movwf	??_vfpfcnvrt
  4319  069A  3F41               	moviw [1]fsr1
  4320  069B  00D1               	movwf	??_vfpfcnvrt+1
  4321  069C  0850               	movf	??_vfpfcnvrt,w
  4322  069D  0084               	movwf	4
  4323  069E  0851               	movf	??_vfpfcnvrt+1,w
  4324  069F  0085               	movwf	5
  4325  06A0  0012               	moviw fsr0++
  4326  06A1  3A64               	xorlw	100
  4327  06A2  1903               	btfsc	3,2
  4328  06A3  2EB3               	goto	l5529
  4329  06A4  084E               	movf	vfpfcnvrt@fmt,w
  4330  06A5  0086               	movwf	6
  4331  06A6  0187               	clrf	7
  4332  06A7  3F40               	moviw [0]fsr1
  4333  06A8  00D0               	movwf	??_vfpfcnvrt
  4334  06A9  3F41               	moviw [1]fsr1
  4335  06AA  00D1               	movwf	??_vfpfcnvrt+1
  4336  06AB  0850               	movf	??_vfpfcnvrt,w
  4337  06AC  0084               	movwf	4
  4338  06AD  0851               	movf	??_vfpfcnvrt+1,w
  4339  06AE  0085               	movwf	5
  4340  06AF  0012               	moviw fsr0++
  4341  06B0  3A69               	xorlw	105
  4342  06B1  1D03               	btfss	3,2
  4343  06B2  2EED               	goto	l5537
  4344  06B3                     l5529:	
  4345                           
  4346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  4347  06B3  084E               	movf	vfpfcnvrt@fmt,w
  4348  06B4  0086               	movwf	6
  4349  06B5  0187               	clrf	7
  4350  06B6  3001               	movlw	1
  4351  06B7  0781               	addwf	1,f
  4352  06B8  3141               	addfsr 1,1
  4353  06B9  1803               	skipnc
  4354  06BA  0A81               	incf	1,f
  4355                           
  4356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  4357  06BB  084F               	movf	vfpfcnvrt@ap,w
  4358  06BC  0086               	movwf	6
  4359  06BD  0187               	clrf	7
  4360  06BE  0801               	movf	1,w
  4361  06BF  0084               	movwf	4
  4362  06C0  0185               	clrf	5
  4363  06C1  3002               	movlw	2
  4364  06C2  0781               	addwf	1,f
  4365  06C3  3F00               	moviw [0]fsr0
  4366  06C4  00D0               	movwf	??_vfpfcnvrt
  4367  06C5  3F01               	moviw [1]fsr0
  4368  06C6  00D1               	movwf	??_vfpfcnvrt+1
  4369  06C7  0850               	movf	??_vfpfcnvrt,w
  4370  06C8  00D5               	movwf	vfpfcnvrt@ll
  4371  06C9  0851               	movf	??_vfpfcnvrt+1,w
  4372  06CA  00D6               	movwf	vfpfcnvrt@ll+1
  4373  06CB  0D89               	rlf	9,f
  4374  06CC  3B89               	subwfb	9,f
  4375  06CD  0989               	comf	9,f
  4376  06CE  00D7               	movwf	vfpfcnvrt@ll+2
  4377  06CF  00D8               	movwf	vfpfcnvrt@ll+3
  4378  06D0  00D9               	movwf	vfpfcnvrt@ll+4
  4379  06D1  00DA               	movwf	vfpfcnvrt@ll+5
  4380  06D2  00DB               	movwf	vfpfcnvrt@ll+6
  4381  06D3  00DC               	movwf	vfpfcnvrt@ll+7
  4382                           
  4383                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  4384  06D4  0855               	movf	vfpfcnvrt@ll,w
  4385  06D5  00B0               	movwf	dtoa@d
  4386  06D6  0856               	movf	vfpfcnvrt@ll+1,w
  4387  06D7  00B1               	movwf	dtoa@d+1
  4388  06D8  0857               	movf	vfpfcnvrt@ll+2,w
  4389  06D9  00B2               	movwf	dtoa@d+2
  4390  06DA  0858               	movf	vfpfcnvrt@ll+3,w
  4391  06DB  00B3               	movwf	dtoa@d+3
  4392  06DC  0859               	movf	vfpfcnvrt@ll+4,w
  4393  06DD  00B4               	movwf	dtoa@d+4
  4394  06DE  085A               	movf	vfpfcnvrt@ll+5,w
  4395  06DF  00B5               	movwf	dtoa@d+5
  4396  06E0  085B               	movf	vfpfcnvrt@ll+6,w
  4397  06E1  00B6               	movwf	dtoa@d+6
  4398  06E2  085C               	movf	vfpfcnvrt@ll+7,w
  4399  06E3  00B7               	movwf	dtoa@d+7
  4400  06E4  085D               	movf	vfpfcnvrt@fp,w
  4401  06E5  3182  222E         	fcall	_dtoa
  4402  06E7  0020               	movlb	0	; select bank0
  4403  06E8  0831               	movf	?_dtoa+1,w
  4404  06E9  00CF               	movwf	?_vfpfcnvrt+1
  4405  06EA  0830               	movf	?_dtoa,w
  4406  06EB  00CE               	movwf	?_vfpfcnvrt
  4407  06EC  0008               	return
  4408  06ED                     l5537:	
  4409                           
  4410                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  4411  06ED  084E               	movf	vfpfcnvrt@fmt,w
  4412  06EE  0086               	movwf	6
  4413  06EF  0187               	clrf	7
  4414  06F0  3F40               	moviw [0]fsr1
  4415  06F1  00D0               	movwf	??_vfpfcnvrt
  4416  06F2  3F41               	moviw [1]fsr1
  4417  06F3  00D1               	movwf	??_vfpfcnvrt+1
  4418  06F4  0850               	movf	??_vfpfcnvrt,w
  4419  06F5  0084               	movwf	4
  4420  06F6  0851               	movf	??_vfpfcnvrt+1,w
  4421  06F7  0085               	movwf	5
  4422  06F8  0012               	moviw fsr0++
  4423  06F9  3A25               	xorlw	37
  4424  06FA  1D03               	btfss	3,2
  4425  06FB  2F14               	goto	l5547
  4426                           
  4427                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  4428  06FC  084E               	movf	vfpfcnvrt@fmt,w
  4429  06FD  0086               	movwf	6
  4430  06FE  0187               	clrf	7
  4431  06FF  3001               	movlw	1
  4432  0700  0781               	addwf	1,f
  4433  0701  3141               	addfsr 1,1
  4434  0702  1803               	skipnc
  4435  0703  0A81               	incf	1,f
  4436                           
  4437                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  4438  0704  3025               	movlw	37
  4439  0705  00F3               	movwf	fputc@c
  4440  0706  3000               	movlw	0
  4441  0707  00F4               	movwf	fputc@c+1
  4442  0708  085D               	movf	vfpfcnvrt@fp,w
  4443  0709  00D0               	movwf	??_vfpfcnvrt
  4444  070A  0850               	movf	??_vfpfcnvrt,w
  4445  070B  00F5               	movwf	fputc@fp
  4446  070C  3189  21B1         	fcall	_fputc
  4447  070E                     l5543:	
  4448                           
  4449                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  4450  070E  3001               	movlw	1
  4451  070F  0020               	movlb	0	; select bank0
  4452  0710  00CE               	movwf	?_vfpfcnvrt
  4453  0711  3000               	movlw	0
  4454  0712  00CF               	movwf	?_vfpfcnvrt+1
  4455  0713  0008               	return
  4456  0714                     l5547:	
  4457                           
  4458                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  4459  0714  084E               	movf	vfpfcnvrt@fmt,w
  4460  0715  0086               	movwf	6
  4461  0716  0187               	clrf	7
  4462  0717  3001               	movlw	1
  4463  0718  0781               	addwf	1,f
  4464  0719  3141               	addfsr 1,1
  4465  071A  1803               	skipnc
  4466  071B  0A81               	incf	1,f
  4467                           
  4468                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  4469  071C  01CE               	clrf	?_vfpfcnvrt
  4470  071D  01CF               	clrf	?_vfpfcnvrt+1
  4471  071E  0008               	return
  4472  071F                     l5553:	
  4473                           
  4474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  4475  071F  084E               	movf	vfpfcnvrt@fmt,w
  4476  0720  0086               	movwf	6
  4477  0721  0187               	clrf	7
  4478  0722  3F40               	moviw [0]fsr1
  4479  0723  00D0               	movwf	??_vfpfcnvrt
  4480  0724  3F41               	moviw [1]fsr1
  4481  0725  00D1               	movwf	??_vfpfcnvrt+1
  4482  0726  0850               	movf	??_vfpfcnvrt,w
  4483  0727  0084               	movwf	4
  4484  0728  0851               	movf	??_vfpfcnvrt+1,w
  4485  0729  0085               	movwf	5
  4486  072A  0800               	movf	0,w	;code access
  4487  072B  00D2               	movwf	??_vfpfcnvrt+2
  4488  072C  01D3               	clrf	??_vfpfcnvrt+3
  4489  072D  0852               	movf	??_vfpfcnvrt+2,w
  4490  072E  00F3               	movwf	fputc@c
  4491  072F  0853               	movf	??_vfpfcnvrt+3,w
  4492  0730  00F4               	movwf	fputc@c+1
  4493  0731  085D               	movf	vfpfcnvrt@fp,w
  4494  0732  00D4               	movwf	??_vfpfcnvrt+4
  4495  0733  0854               	movf	??_vfpfcnvrt+4,w
  4496  0734  00F5               	movwf	fputc@fp
  4497  0735  3189  21B1  3186   	fcall	_fputc
  4498                           
  4499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  4500  0738  0020               	movlb	0	; select bank0
  4501  0739  084E               	movf	vfpfcnvrt@fmt,w
  4502  073A  0086               	movwf	6
  4503  073B  0187               	clrf	7
  4504  073C  3001               	movlw	1
  4505  073D  0781               	addwf	1,f
  4506  073E  3141               	addfsr 1,1
  4507  073F  1803               	skipnc
  4508  0740  0A81               	incf	1,f
  4509  0741  2F0E               	goto	l5543
  4510  0742                     __end_of_vfpfcnvrt:	
  4511                           
  4512                           	psect	text4
  4513  022E                     __ptext4:	
  4514 ;; *************** function _dtoa *****************
  4515 ;; Defined at:
  4516 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  fp              1    wreg     PTR struct _IO_FILE
  4519 ;;		 -> NULL(0), 
  4520 ;;  d               8   16[BANK0 ] long long 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  fp              1   29[BANK0 ] PTR struct _IO_FILE
  4523 ;;		 -> NULL(0), 
  4524 ;;  n               8   36[BANK0 ] long long 
  4525 ;;  i               2   44[BANK0 ] int 
  4526 ;;  s               2   34[BANK0 ] int 
  4527 ;;  w               2   32[BANK0 ] int 
  4528 ;;  p               2   30[BANK0 ] int 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  2   16[BANK0 ] int 
  4531 ;; Registers used:
  4532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4538 ;;      Params:         0       8       0       0       0       0       0       0
  4539 ;;      Locals:         0      19       0       0       0       0       0       0
  4540 ;;      Temps:          0       3       0       0       0       0       0       0
  4541 ;;      Totals:         0      30       0       0       0       0       0       0
  4542 ;;Total ram usage:       30 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    9
  4545 ;; This function calls:
  4546 ;;		___aodiv
  4547 ;;		___aomod
  4548 ;;		_abs
  4549 ;;		_pad
  4550 ;; This function is called by:
  4551 ;;		_vfpfcnvrt
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           
  4556                           ;psect for function _dtoa
  4557  022E                     _dtoa:	
  4558                           
  4559                           ;incstack = 0
  4560                           ; Regs used in _dtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4561                           ;dtoa@fp stored from wreg
  4562  022E  0020               	movlb	0	; select bank0
  4563  022F  00BD               	movwf	dtoa@fp
  4564                           
  4565                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  4566  0230  0830               	movf	dtoa@d,w
  4567  0231  00C4               	movwf	dtoa@n
  4568  0232  0831               	movf	dtoa@d+1,w
  4569  0233  00C5               	movwf	dtoa@n+1
  4570  0234  0832               	movf	dtoa@d+2,w
  4571  0235  00C6               	movwf	dtoa@n+2
  4572  0236  0833               	movf	dtoa@d+3,w
  4573  0237  00C7               	movwf	dtoa@n+3
  4574  0238  0834               	movf	dtoa@d+4,w
  4575  0239  00C8               	movwf	dtoa@n+4
  4576  023A  0835               	movf	dtoa@d+5,w
  4577  023B  00C9               	movwf	dtoa@n+5
  4578  023C  0836               	movf	dtoa@d+6,w
  4579  023D  00CA               	movwf	dtoa@n+6
  4580  023E  0837               	movf	dtoa@d+7,w
  4581  023F  00CB               	movwf	dtoa@n+7
  4582                           
  4583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  4584  0240  3044               	movlw	low dtoa@n
  4585  0241  0086               	movwf	6
  4586  0242  3000               	movlw	high dtoa@n
  4587  0243  0087               	movwf	7
  4588  0244  3F47               	moviw [7]fsr1
  4589  0245  00B8               	movwf	??_dtoa
  4590  0246  1FB8               	btfss	??_dtoa,7
  4591  0247  2A4A               	goto	u5720
  4592  0248  3001               	movlw	1
  4593  0249  2A4B               	goto	u5730
  4594  024A                     u5720:	
  4595  024A  3000               	movlw	0
  4596  024B                     u5730:	
  4597  024B  0020               	movlb	0	; select bank0
  4598  024C  00B9               	movwf	??_dtoa+1
  4599  024D  01BA               	clrf	??_dtoa+2
  4600  024E  0839               	movf	??_dtoa+1,w
  4601  024F  00C2               	movwf	dtoa@s
  4602  0250  083A               	movf	??_dtoa+2,w
  4603  0251  00C3               	movwf	dtoa@s+1
  4604                           
  4605                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  4606  0252  0842               	movf	dtoa@s,w
  4607  0253  0443               	iorwf	dtoa@s+1,w
  4608  0254  1903               	btfsc	3,2
  4609  0255  2A74               	goto	l1122
  4610                           
  4611                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  4612  0256  09C4               	comf	dtoa@n,f
  4613  0257  09C5               	comf	dtoa@n+1,f
  4614  0258  09C6               	comf	dtoa@n+2,f
  4615  0259  09C7               	comf	dtoa@n+3,f
  4616  025A  09C8               	comf	dtoa@n+4,f
  4617  025B  09C9               	comf	dtoa@n+5,f
  4618  025C  09CA               	comf	dtoa@n+6,f
  4619  025D  09CB               	comf	dtoa@n+7,f
  4620  025E  0AC4               	incf	dtoa@n,f
  4621  025F  1D03               	skipz
  4622  0260  2A74               	goto	l1122
  4623  0261  0AC5               	incf	dtoa@n+1,f
  4624  0262  1D03               	skipz
  4625  0263  2A74               	goto	l1122
  4626  0264  0AC6               	incf	dtoa@n+2,f
  4627  0265  1D03               	skipz
  4628  0266  2A74               	goto	l1122
  4629  0267  0AC7               	incf	dtoa@n+3,f
  4630  0268  1D03               	skipz
  4631  0269  2A74               	goto	l1122
  4632  026A  0AC8               	incf	dtoa@n+4,f
  4633  026B  1D03               	skipz
  4634  026C  2A74               	goto	l1122
  4635  026D  0AC9               	incf	dtoa@n+5,f
  4636  026E  1D03               	skipz
  4637  026F  2A74               	goto	l1122
  4638  0270  0ACA               	incf	dtoa@n+6,f
  4639  0271  1D03               	skipz
  4640  0272  2A74               	goto	l1122
  4641  0273  0ACB               	incf	dtoa@n+7,f
  4642  0274                     l1122:	
  4643                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
  4644                           
  4645                           
  4646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  4647  0274  0021               	movlb	1	; select bank1
  4648  0275  1BB9               	btfsc	(_prec+1)^(0+128),7
  4649  0276  2A7B               	goto	l1123
  4650                           
  4651                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  4652  0277  30FD               	movlw	253
  4653  0278  05BA               	andwf	_flags^(0+128),f
  4654  0279  30FF               	movlw	255
  4655  027A  05BB               	andwf	(_flags+1)^(0+128),f
  4656  027B                     l1123:	
  4657                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
  4658                           
  4659                           
  4660                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  4661  027B  0839               	movf	(_prec+1)^(0+128),w
  4662  027C  3A80               	xorlw	128
  4663  027D  0020               	movlb	0	; select bank0
  4664  027E  00B8               	movwf	??_dtoa
  4665  027F  3080               	movlw	128
  4666  0280  0238               	subwf	??_dtoa,w
  4667  0281  1D03               	skipz
  4668  0282  2A86               	goto	u5775
  4669  0283  3001               	movlw	1
  4670  0284  0021               	movlb	1	; select bank1
  4671  0285  0238               	subwf	_prec^(0+128),w
  4672  0286                     u5775:	
  4673  0286  1803               	skipnc
  4674  0287  2A8E               	goto	l5391
  4675  0288  3001               	movlw	1
  4676  0289  0020               	movlb	0	; select bank0
  4677  028A  00BE               	movwf	dtoa@p
  4678  028B  3000               	movlw	0
  4679  028C  00BF               	movwf	dtoa@p+1
  4680  028D  2A96               	goto	l1127
  4681  028E                     l5391:	
  4682  028E  0021               	movlb	1	; select bank1
  4683  028F  0839               	movf	(_prec+1)^(0+128),w
  4684  0290  0020               	movlb	0	; select bank0
  4685  0291  00BF               	movwf	dtoa@p+1
  4686  0292  0021               	movlb	1	; select bank1
  4687  0293  0838               	movf	_prec^(0+128),w
  4688  0294  0020               	movlb	0	; select bank0
  4689  0295  00BE               	movwf	dtoa@p
  4690  0296                     l1127:	
  4691                           
  4692                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  4693  0296  0021               	movlb	1	; select bank1
  4694  0297  0837               	movf	(_width+1)^(0+128),w
  4695  0298  0020               	movlb	0	; select bank0
  4696  0299  00C1               	movwf	dtoa@w+1
  4697  029A  0021               	movlb	1	; select bank1
  4698  029B  0836               	movf	_width^(0+128),w
  4699  029C  0020               	movlb	0	; select bank0
  4700  029D  00C0               	movwf	dtoa@w
  4701                           
  4702                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  4703  029E  0842               	movf	dtoa@s,w
  4704  029F  0443               	iorwf	dtoa@s+1,w
  4705  02A0  1D03               	btfss	3,2
  4706  02A1  2AA5               	goto	l5397
  4707  02A2  0021               	movlb	1	; select bank1
  4708  02A3  1D3A               	btfss	_flags^(0+128),2
  4709  02A4  2AAA               	goto	l1128
  4710  02A5                     l5397:	
  4711                           
  4712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  4713  02A5  30FF               	movlw	255
  4714  02A6  0020               	movlb	0	; select bank0
  4715  02A7  07C0               	addwf	dtoa@w,f
  4716  02A8  30FF               	movlw	255
  4717  02A9  3DC1               	addwfc	dtoa@w+1,f
  4718  02AA                     l1128:	
  4719                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
  4720                           
  4721                           
  4722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  4723  02AA  301F               	movlw	31
  4724  02AB  0020               	movlb	0	; select bank0
  4725  02AC  00CC               	movwf	dtoa@i
  4726  02AD  3000               	movlw	0
  4727  02AE  00CD               	movwf	dtoa@i+1
  4728                           
  4729                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  4730  02AF  0023               	movlb	3	; select bank3
  4731  02B0  01BF               	clrf	(_dbuf^(0+384)+31)
  4732                           
  4733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  4734  02B1  2B40               	goto	l1131
  4735  02B2                     l5411:	
  4736  02B2  0020               	movlb	0	; select bank0
  4737  02B3  0844               	movf	dtoa@n,w
  4738  02B4  0445               	iorwf	dtoa@n+1,w
  4739  02B5  0446               	iorwf	dtoa@n+2,w
  4740  02B6  0447               	iorwf	dtoa@n+3,w
  4741  02B7  0448               	iorwf	dtoa@n+4,w
  4742  02B8  0449               	iorwf	dtoa@n+5,w
  4743  02B9  044A               	iorwf	dtoa@n+6,w
  4744  02BA  044B               	iorwf	dtoa@n+7,w
  4745  02BB  1D03               	skipz
  4746  02BC  2AD7               	goto	l5401
  4747  02BD  083F               	movf	dtoa@p+1,w
  4748  02BE  3A80               	xorlw	128
  4749  02BF  00B8               	movwf	??_dtoa
  4750  02C0  3080               	movlw	128
  4751  02C1  0238               	subwf	??_dtoa,w
  4752  02C2  1D03               	skipz
  4753  02C3  2AC6               	goto	u5825
  4754  02C4  3001               	movlw	1
  4755  02C5  023E               	subwf	dtoa@p,w
  4756  02C6                     u5825:	
  4757  02C6  1803               	skipnc
  4758  02C7  2AD7               	goto	l5401
  4759  02C8  0020               	movlb	0	; select bank0
  4760  02C9  0841               	movf	dtoa@w+1,w
  4761  02CA  3A80               	xorlw	128
  4762  02CB  00B8               	movwf	??_dtoa
  4763  02CC  3080               	movlw	128
  4764  02CD  0238               	subwf	??_dtoa,w
  4765  02CE  1D03               	skipz
  4766  02CF  2AD2               	goto	u5835
  4767  02D0  3001               	movlw	1
  4768  02D1  0240               	subwf	dtoa@w,w
  4769  02D2                     u5835:	
  4770  02D2  1C03               	skipc
  4771  02D3  2B4C               	goto	l5419
  4772  02D4  0021               	movlb	1	; select bank1
  4773  02D5  1CBA               	btfss	_flags^(0+128),1
  4774  02D6  2B4C               	goto	l5419
  4775  02D7                     l5401:	
  4776                           
  4777                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  4778  02D7  30FF               	movlw	255
  4779  02D8  0020               	movlb	0	; select bank0
  4780  02D9  07CC               	addwf	dtoa@i,f
  4781  02DA  30FF               	movlw	255
  4782  02DB  3DCD               	addwfc	dtoa@i+1,f
  4783                           
  4784                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  4785  02DC  300A               	movlw	10
  4786  02DD  00A0               	movwf	___aomod@divisor
  4787  02DE  01A1               	clrf	___aomod@divisor+1
  4788  02DF  01A2               	clrf	___aomod@divisor+2
  4789  02E0  01A3               	clrf	___aomod@divisor+3
  4790  02E1  01A4               	clrf	___aomod@divisor+4
  4791  02E2  01A5               	clrf	___aomod@divisor+5
  4792  02E3  01A6               	clrf	___aomod@divisor+6
  4793  02E4  01A7               	clrf	___aomod@divisor+7
  4794  02E5  0844               	movf	dtoa@n,w
  4795  02E6  00A8               	movwf	___aomod@dividend
  4796  02E7  0845               	movf	dtoa@n+1,w
  4797  02E8  00A9               	movwf	___aomod@dividend+1
  4798  02E9  0846               	movf	dtoa@n+2,w
  4799  02EA  00AA               	movwf	___aomod@dividend+2
  4800  02EB  0847               	movf	dtoa@n+3,w
  4801  02EC  00AB               	movwf	___aomod@dividend+3
  4802  02ED  0848               	movf	dtoa@n+4,w
  4803  02EE  00AC               	movwf	___aomod@dividend+4
  4804  02EF  0849               	movf	dtoa@n+5,w
  4805  02F0  00AD               	movwf	___aomod@dividend+5
  4806  02F1  084A               	movf	dtoa@n+6,w
  4807  02F2  00AE               	movwf	___aomod@dividend+6
  4808  02F3  084B               	movf	dtoa@n+7,w
  4809  02F4  00AF               	movwf	___aomod@dividend+7
  4810  02F5  3185  2596  3182   	fcall	___aomod
  4811  02F8  0020               	movlb	0	; select bank0
  4812  02F9  0821               	movf	?___aomod+1,w
  4813  02FA  00F5               	movwf	abs@a+1
  4814  02FB  0820               	movf	?___aomod,w
  4815  02FC  00F4               	movwf	abs@a
  4816  02FD  3197  2712  3182   	fcall	_abs
  4817  0300  0874               	movf	?_abs,w
  4818  0301  3E30               	addlw	48
  4819  0302  0020               	movlb	0	; select bank0
  4820  0303  00B8               	movwf	??_dtoa
  4821  0304  084C               	movf	dtoa@i,w
  4822  0305  3EA0               	addlw	(low (_dbuf| (0+256)))& (0+255)
  4823  0306  0086               	movwf	6
  4824  0307  3001               	movlw	1	; select bank3/4
  4825  0308  0087               	movwf	7
  4826  0309  0838               	movf	??_dtoa,w
  4827  030A  0081               	movwf	1
  4828                           
  4829                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  4830  030B  30FF               	movlw	255
  4831  030C  07BE               	addwf	dtoa@p,f
  4832  030D  30FF               	movlw	255
  4833  030E  3DBF               	addwfc	dtoa@p+1,f
  4834                           
  4835                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  4836  030F  30FF               	movlw	255
  4837  0310  07C0               	addwf	dtoa@w,f
  4838  0311  30FF               	movlw	255
  4839  0312  3DC1               	addwfc	dtoa@w+1,f
  4840                           
  4841                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  4842  0313  300A               	movlw	10
  4843  0314  00A0               	movwf	___aodiv@divisor
  4844  0315  01A1               	clrf	___aodiv@divisor+1
  4845  0316  01A2               	clrf	___aodiv@divisor+2
  4846  0317  01A3               	clrf	___aodiv@divisor+3
  4847  0318  01A4               	clrf	___aodiv@divisor+4
  4848  0319  01A5               	clrf	___aodiv@divisor+5
  4849  031A  01A6               	clrf	___aodiv@divisor+6
  4850  031B  01A7               	clrf	___aodiv@divisor+7
  4851  031C  0844               	movf	dtoa@n,w
  4852  031D  00A8               	movwf	___aodiv@dividend
  4853  031E  0845               	movf	dtoa@n+1,w
  4854  031F  00A9               	movwf	___aodiv@dividend+1
  4855  0320  0846               	movf	dtoa@n+2,w
  4856  0321  00AA               	movwf	___aodiv@dividend+2
  4857  0322  0847               	movf	dtoa@n+3,w
  4858  0323  00AB               	movwf	___aodiv@dividend+3
  4859  0324  0848               	movf	dtoa@n+4,w
  4860  0325  00AC               	movwf	___aodiv@dividend+4
  4861  0326  0849               	movf	dtoa@n+5,w
  4862  0327  00AD               	movwf	___aodiv@dividend+5
  4863  0328  084A               	movf	dtoa@n+6,w
  4864  0329  00AE               	movwf	___aodiv@dividend+6
  4865  032A  084B               	movf	dtoa@n+7,w
  4866  032B  00AF               	movwf	___aodiv@dividend+7
  4867  032C  3184  24A3  3182   	fcall	___aodiv
  4868  032F  0020               	movlb	0	; select bank0
  4869  0330  0820               	movf	?___aodiv,w
  4870  0331  00C4               	movwf	dtoa@n
  4871  0332  0821               	movf	?___aodiv+1,w
  4872  0333  00C5               	movwf	dtoa@n+1
  4873  0334  0822               	movf	?___aodiv+2,w
  4874  0335  00C6               	movwf	dtoa@n+2
  4875  0336  0823               	movf	?___aodiv+3,w
  4876  0337  00C7               	movwf	dtoa@n+3
  4877  0338  0824               	movf	?___aodiv+4,w
  4878  0339  00C8               	movwf	dtoa@n+4
  4879  033A  0825               	movf	?___aodiv+5,w
  4880  033B  00C9               	movwf	dtoa@n+5
  4881  033C  0826               	movf	?___aodiv+6,w
  4882  033D  00CA               	movwf	dtoa@n+6
  4883  033E  0827               	movf	?___aodiv+7,w
  4884  033F  00CB               	movwf	dtoa@n+7
  4885  0340                     l1131:	
  4886                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
  4887                           
  4888                           
  4889                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  4890  0340  0020               	movlb	0	; select bank0
  4891  0341  084D               	movf	dtoa@i+1,w
  4892  0342  3A80               	xorlw	128
  4893  0343  00B8               	movwf	??_dtoa
  4894  0344  3080               	movlw	128
  4895  0345  0238               	subwf	??_dtoa,w
  4896  0346  1D03               	skipz
  4897  0347  2B4A               	goto	u5805
  4898  0348  3001               	movlw	1
  4899  0349  024C               	subwf	dtoa@i,w
  4900  034A                     u5805:	
  4901  034A  1803               	btfsc	3,0
  4902  034B  2AB2               	goto	l5411
  4903  034C                     l5419:	
  4904                           
  4905                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  4906  034C  0020               	movlb	0	; select bank0
  4907  034D  0842               	movf	dtoa@s,w
  4908  034E  0443               	iorwf	dtoa@s+1,w
  4909  034F  1D03               	btfss	3,2
  4910  0350  2B54               	goto	l5423
  4911  0351  0021               	movlb	1	; select bank1
  4912  0352  1D3A               	btfss	_flags^(0+128),2
  4913  0353  2B6C               	goto	l5433
  4914  0354                     l5423:	
  4915                           
  4916                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  4917  0354  30FF               	movlw	255
  4918  0355  0020               	movlb	0	; select bank0
  4919  0356  07CC               	addwf	dtoa@i,f
  4920  0357  30FF               	movlw	255
  4921  0358  3DCD               	addwfc	dtoa@i+1,f
  4922                           
  4923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  4924  0359  0842               	movf	dtoa@s,w
  4925  035A  0443               	iorwf	dtoa@s+1,w
  4926  035B  1D03               	btfss	3,2
  4927  035C  2B5F               	goto	l5429
  4928  035D  302B               	movlw	43
  4929  035E  2B60               	goto	L2
  4930  035F                     l5429:	
  4931  035F  302D               	movlw	45
  4932  0360                     L2:	
  4933  0360  00BB               	movwf	_dtoa$1959
  4934  0361  3000               	movlw	0
  4935  0362  00BC               	movwf	_dtoa$1959+1
  4936  0363  083B               	movf	_dtoa$1959,w
  4937  0364  00B8               	movwf	??_dtoa
  4938  0365  084C               	movf	dtoa@i,w
  4939  0366  3EA0               	addlw	(low (_dbuf| (0+256)))& (0+255)
  4940  0367  0086               	movwf	6
  4941  0368  3001               	movlw	1	; select bank3/4
  4942  0369  0087               	movwf	7
  4943  036A  0838               	movf	??_dtoa,w
  4944  036B  0081               	movwf	1
  4945  036C                     l5433:	
  4946                           
  4947                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  4948  036C  0020               	movlb	0	; select bank0
  4949  036D  084C               	movf	dtoa@i,w
  4950  036E  3EA0               	addlw	(low (_dbuf| (0+256)))& (0+255)
  4951  036F  00B8               	movwf	??_dtoa
  4952  0370  0838               	movf	??_dtoa,w
  4953  0371  00A7               	movwf	pad@buf
  4954  0372  0841               	movf	dtoa@w+1,w
  4955  0373  00A9               	movwf	pad@p+1
  4956  0374  0840               	movf	dtoa@w,w
  4957  0375  00A8               	movwf	pad@p
  4958  0376  083D               	movf	dtoa@fp,w
  4959  0377  318A  22A6         	fcall	_pad
  4960  0379  0020               	movlb	0	; select bank0
  4961  037A  0828               	movf	?_pad+1,w
  4962  037B  00B1               	movwf	?_dtoa+1
  4963  037C  0827               	movf	?_pad,w
  4964  037D  00B0               	movwf	?_dtoa
  4965  037E  0008               	return
  4966  037F                     __end_of_dtoa:	
  4967                           
  4968                           	psect	text5
  4969  0AA6                     __ptext5:	
  4970 ;; *************** function _pad *****************
  4971 ;; Defined at:
  4972 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  fp              1    wreg     PTR struct _IO_FILE
  4975 ;;		 -> NULL(0), 
  4976 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  4977 ;;		 -> dbuf(32), 
  4978 ;;  p               2    8[BANK0 ] int 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  fp              1   15[BANK0 ] PTR struct _IO_FILE
  4981 ;;		 -> NULL(0), 
  4982 ;;  w               2   13[BANK0 ] int 
  4983 ;;  i               2   11[BANK0 ] int 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  2    7[BANK0 ] int 
  4986 ;; Registers used:
  4987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4993 ;;      Params:         0       3       0       0       0       0       0       0
  4994 ;;      Locals:         0       5       0       0       0       0       0       0
  4995 ;;      Temps:          0       1       0       0       0       0       0       0
  4996 ;;      Totals:         0       9       0       0       0       0       0       0
  4997 ;;Total ram usage:        9 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    8
  5000 ;; This function calls:
  5001 ;;		_fputc
  5002 ;;		_fputs
  5003 ;;		_strlen
  5004 ;; This function is called by:
  5005 ;;		_dtoa
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           
  5010                           ;psect for function _pad
  5011  0AA6                     _pad:	
  5012                           
  5013                           ;incstack = 0
  5014                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5015                           ;pad@fp stored from wreg
  5016  0AA6  0020               	movlb	0	; select bank0
  5017  0AA7  00AF               	movwf	pad@fp
  5018                           
  5019                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5020  0AA8  0021               	movlb	1	; select bank1
  5021  0AA9  1C3A               	btfss	_flags^(0+128),0
  5022  0AAA  2AB4               	goto	l5225
  5023                           
  5024                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5025  0AAB  0020               	movlb	0	; select bank0
  5026  0AAC  082F               	movf	pad@fp,w
  5027  0AAD  00AA               	movwf	??_pad
  5028  0AAE  082A               	movf	??_pad,w
  5029  0AAF  00FB               	movwf	fputs@fp
  5030  0AB0  0827               	movf	pad@buf,w
  5031  0AB1  3188  2026  318A   	fcall	_fputs
  5032  0AB4                     l5225:	
  5033                           
  5034                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5035  0AB4  0020               	movlb	0	; select bank0
  5036  0AB5  1BA9               	btfsc	pad@p+1,7
  5037  0AB6  2ABC               	goto	l5229
  5038  0AB7  0829               	movf	pad@p+1,w
  5039  0AB8  00AE               	movwf	pad@w+1
  5040  0AB9  0828               	movf	pad@p,w
  5041  0ABA  00AD               	movwf	pad@w
  5042  0ABB  2ABE               	goto	l1114
  5043  0ABC                     l5229:	
  5044  0ABC  01AD               	clrf	pad@w
  5045  0ABD  01AE               	clrf	pad@w+1
  5046  0ABE                     l1114:	
  5047                           
  5048                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5049  0ABE  01AB               	clrf	pad@i
  5050  0ABF  01AC               	clrf	pad@i+1
  5051  0AC0                     l5235:	
  5052                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5053                           
  5054                           
  5055                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5056  0AC0  082C               	movf	pad@i+1,w
  5057  0AC1  3A80               	xorlw	128
  5058  0AC2  00AA               	movwf	??_pad
  5059  0AC3  082E               	movf	pad@w+1,w
  5060  0AC4  3A80               	xorlw	128
  5061  0AC5  022A               	subwf	??_pad,w
  5062  0AC6  1D03               	skipz
  5063  0AC7  2ACA               	goto	u5475
  5064  0AC8  082D               	movf	pad@w,w
  5065  0AC9  022B               	subwf	pad@i,w
  5066  0ACA                     u5475:	
  5067  0ACA  1803               	btfsc	3,0
  5068  0ACB  2ADE               	goto	l1117
  5069                           
  5070                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5071  0ACC  3020               	movlw	32
  5072  0ACD  00F3               	movwf	fputc@c
  5073  0ACE  3000               	movlw	0
  5074  0ACF  00F4               	movwf	fputc@c+1
  5075  0AD0  0020               	movlb	0	; select bank0
  5076  0AD1  082F               	movf	pad@fp,w
  5077  0AD2  00AA               	movwf	??_pad
  5078  0AD3  082A               	movf	??_pad,w
  5079  0AD4  00F5               	movwf	fputc@fp
  5080  0AD5  3189  21B1  318A   	fcall	_fputc
  5081                           
  5082                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5083  0AD8  3001               	movlw	1
  5084  0AD9  0020               	movlb	0	; select bank0
  5085  0ADA  07AB               	addwf	pad@i,f
  5086  0ADB  3000               	movlw	0
  5087  0ADC  3DAC               	addwfc	pad@i+1,f
  5088  0ADD  2AC0               	goto	l5235
  5089  0ADE                     l1117:	
  5090                           
  5091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5092  0ADE  0021               	movlb	1	; select bank1
  5093  0ADF  183A               	btfsc	_flags^(0+128),0
  5094  0AE0  2AEA               	goto	l1118
  5095                           
  5096                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5097  0AE1  0020               	movlb	0	; select bank0
  5098  0AE2  082F               	movf	pad@fp,w
  5099  0AE3  00AA               	movwf	??_pad
  5100  0AE4  082A               	movf	??_pad,w
  5101  0AE5  00FB               	movwf	fputs@fp
  5102  0AE6  0827               	movf	pad@buf,w
  5103  0AE7  3188  2026  318A   	fcall	_fputs
  5104  0AEA                     l1118:	
  5105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5106                           
  5107                           
  5108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5109  0AEA  0020               	movlb	0	; select bank0
  5110  0AEB  0827               	movf	pad@buf,w
  5111  0AEC  3197  2741         	fcall	_strlen
  5112  0AEE  0020               	movlb	0	; select bank0
  5113  0AEF  082D               	movf	pad@w,w
  5114  0AF0  0771               	addwf	?_strlen,w
  5115  0AF1  00A7               	movwf	?_pad
  5116  0AF2  082E               	movf	pad@w+1,w
  5117  0AF3  3D72               	addwfc	?_strlen+1,w
  5118  0AF4  00A8               	movwf	?_pad+1
  5119  0AF5  0008               	return
  5120  0AF6                     __end_of_pad:	
  5121                           
  5122                           	psect	text6
  5123  1741                     __ptext6:	
  5124 ;; *************** function _strlen *****************
  5125 ;; Defined at:
  5126 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  s               1    wreg     PTR const unsigned char 
  5129 ;;		 -> dbuf(32), 
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  s               1    5[COMMON] PTR const unsigned char 
  5132 ;;		 -> dbuf(32), 
  5133 ;;  a               1    4[COMMON] PTR const unsigned char 
  5134 ;;		 -> dbuf(32), 
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  2    1[COMMON] unsigned int 
  5137 ;; Registers used:
  5138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5144 ;;      Params:         2       0       0       0       0       0       0       0
  5145 ;;      Locals:         2       0       0       0       0       0       0       0
  5146 ;;      Temps:          1       0       0       0       0       0       0       0
  5147 ;;      Totals:         5       0       0       0       0       0       0       0
  5148 ;;Total ram usage:        5 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    4
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_pad
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           
  5159                           ;psect for function _strlen
  5160  1741                     _strlen:	
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5164                           ;strlen@s stored from wreg
  5165  1741  00F5               	movwf	strlen@s
  5166  1742  0875               	movf	strlen@s,w
  5167  1743  00F3               	movwf	??_strlen
  5168  1744  0873               	movf	??_strlen,w
  5169  1745  00F4               	movwf	strlen@a
  5170  1746                     l3731:	
  5171  1746  0875               	movf	strlen@s,w
  5172  1747  0086               	movwf	6
  5173  1748  3001               	movlw	1	; select bank2/3
  5174  1749  0087               	movwf	7
  5175  174A  0801               	movf	1,w
  5176  174B  1903               	btfsc	3,2
  5177  174C  2F52               	goto	l3733
  5178  174D  3001               	movlw	1
  5179  174E  00F3               	movwf	??_strlen
  5180  174F  0873               	movf	??_strlen,w
  5181  1750  07F5               	addwf	strlen@s,f
  5182  1751  2F46               	goto	l3731
  5183  1752                     l3733:	
  5184  1752  0874               	movf	strlen@a,w
  5185  1753  0275               	subwf	strlen@s,w
  5186  1754  00F1               	movwf	?_strlen
  5187  1755  01F2               	clrf	?_strlen+1
  5188  1756  1BF1               	btfsc	?_strlen,7
  5189  1757  03F2               	decf	?_strlen+1,f
  5190  1758  0008               	return
  5191  1759                     __end_of_strlen:	
  5192                           
  5193                           	psect	text7
  5194  0826                     __ptext7:	
  5195 ;; *************** function _fputs *****************
  5196 ;; Defined at:
  5197 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  s               1    wreg     PTR const unsigned char 
  5200 ;;		 -> dbuf(32), 
  5201 ;;  fp              1   11[COMMON] PTR struct _IO_FILE
  5202 ;;		 -> NULL(0), 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  5205 ;;		 -> dbuf(32), 
  5206 ;;  i               2    4[BANK0 ] int 
  5207 ;;  c               1    3[BANK0 ] unsigned char 
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  2   11[COMMON] int 
  5210 ;; Registers used:
  5211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5217 ;;      Params:         1       0       0       0       0       0       0       0
  5218 ;;      Locals:         0       4       0       0       0       0       0       0
  5219 ;;      Temps:          0       3       0       0       0       0       0       0
  5220 ;;      Totals:         1       7       0       0       0       0       0       0
  5221 ;;Total ram usage:        8 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    7
  5224 ;; This function calls:
  5225 ;;		_fputc
  5226 ;; This function is called by:
  5227 ;;		_pad
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _fputs
  5233  0826                     _fputs:	
  5234                           
  5235                           ;incstack = 0
  5236                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5237                           ;fputs@s stored from wreg
  5238  0826  0020               	movlb	0	; select bank0
  5239  0827  00A6               	movwf	fputs@s
  5240  0828  01A4               	clrf	fputs@i
  5241  0829  01A5               	clrf	fputs@i+1
  5242  082A                     l3725:	
  5243  082A  0824               	movf	fputs@i,w
  5244  082B  0726               	addwf	fputs@s,w
  5245  082C  00A0               	movwf	??_fputs
  5246  082D  0820               	movf	??_fputs,w
  5247  082E  0086               	movwf	6
  5248  082F  3001               	movlw	1	; select bank2/3
  5249  0830  0087               	movwf	7
  5250  0831  0801               	movf	1,w
  5251  0832  00A1               	movwf	??_fputs+1
  5252  0833  0821               	movf	??_fputs+1,w
  5253  0834  00A3               	movwf	fputs@c
  5254  0835  0823               	movf	fputs@c,w
  5255  0836  1903               	btfsc	3,2
  5256  0837  0008               	return
  5257  0838  0823               	movf	fputs@c,w
  5258  0839  00A0               	movwf	??_fputs
  5259  083A  01A1               	clrf	??_fputs+1
  5260  083B  0820               	movf	??_fputs,w
  5261  083C  00F3               	movwf	fputc@c
  5262  083D  0821               	movf	??_fputs+1,w
  5263  083E  00F4               	movwf	fputc@c+1
  5264  083F  087B               	movf	fputs@fp,w
  5265  0840  00A2               	movwf	??_fputs+2
  5266  0841  0822               	movf	??_fputs+2,w
  5267  0842  00F5               	movwf	fputc@fp
  5268  0843  3189  21B1  3188   	fcall	_fputc
  5269  0846  3001               	movlw	1
  5270  0847  0020               	movlb	0	; select bank0
  5271  0848  07A4               	addwf	fputs@i,f
  5272  0849  3000               	movlw	0
  5273  084A  3DA5               	addwfc	fputs@i+1,f
  5274  084B  282A               	goto	l3725
  5275  084C                     __end_of_fputs:	
  5276                           
  5277                           	psect	text8
  5278  09B1                     __ptext8:	
  5279 ;; *************** function _fputc *****************
  5280 ;; Defined at:
  5281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  c               2    3[COMMON] int 
  5284 ;;  fp              1    5[COMMON] PTR struct _IO_FILE
  5285 ;;		 -> NULL(0), 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;		None
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  2    3[COMMON] int 
  5290 ;; Registers used:
  5291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5297 ;;      Params:         3       0       0       0       0       0       0       0
  5298 ;;      Locals:         0       0       0       0       0       0       0       0
  5299 ;;      Temps:          5       0       0       0       0       0       0       0
  5300 ;;      Totals:         8       0       0       0       0       0       0       0
  5301 ;;Total ram usage:        8 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    6
  5304 ;; This function calls:
  5305 ;;		_putch
  5306 ;; This function is called by:
  5307 ;;		_pad
  5308 ;;		_vfpfcnvrt
  5309 ;;		_fputs
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           
  5314                           ;psect for function _fputc
  5315  09B1                     _fputc:	
  5316                           
  5317                           ;incstack = 0
  5318                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5319  09B1  0875               	movf	fputc@fp,w
  5320  09B2  1D03               	btfss	3,2
  5321  09B3  0875               	movf	fputc@fp,w
  5322  09B4  1D03               	btfss	3,2
  5323  09B5  29BA               	goto	l3459
  5324  09B6  0873               	movf	fputc@c,w
  5325  09B7  3195  2508         	fcall	_putch
  5326  09B9  0008               	return
  5327  09BA                     l3459:	
  5328  09BA  0875               	movf	fputc@fp,w
  5329  09BB  3E03               	addlw	3
  5330  09BC  0086               	movwf	6
  5331  09BD  0187               	clrf	7
  5332  09BE  0016               	moviw fsr1++
  5333  09BF  0401               	iorwf	1,w
  5334  09C0  1903               	btfsc	3,2
  5335  09C1  29DD               	goto	l3463
  5336  09C2  0875               	movf	fputc@fp,w
  5337  09C3  3E03               	addlw	3
  5338  09C4  0086               	movwf	6
  5339  09C5  0187               	clrf	7
  5340  09C6  3F40               	moviw [0]fsr1
  5341  09C7  00F6               	movwf	??_fputc
  5342  09C8  3F41               	moviw [1]fsr1
  5343  09C9  00F7               	movwf	??_fputc+1
  5344  09CA  0A75               	incf	fputc@fp,w
  5345  09CB  0086               	movwf	6
  5346  09CC  0187               	clrf	7
  5347  09CD  3F40               	moviw [0]fsr1
  5348  09CE  00F8               	movwf	??_fputc+2
  5349  09CF  3F41               	moviw [1]fsr1
  5350  09D0  00F9               	movwf	??_fputc+3
  5351  09D1  0879               	movf	??_fputc+3,w
  5352  09D2  3A80               	xorlw	128
  5353  09D3  00FA               	movwf	??_fputc+4
  5354  09D4  0877               	movf	??_fputc+1,w
  5355  09D5  3A80               	xorlw	128
  5356  09D6  027A               	subwf	??_fputc+4,w
  5357  09D7  1D03               	skipz
  5358  09D8  29DB               	goto	u2725
  5359  09D9  0876               	movf	??_fputc,w
  5360  09DA  0278               	subwf	??_fputc+2,w
  5361  09DB                     u2725:	
  5362  09DB  1803               	skipnc
  5363  09DC  0008               	return
  5364  09DD                     l3463:	
  5365  09DD  0A75               	incf	fputc@fp,w
  5366  09DE  0086               	movwf	6
  5367  09DF  0187               	clrf	7
  5368  09E0  3001               	movlw	1
  5369  09E1  0781               	addwf	1,f
  5370  09E2  3141               	addfsr 1,1
  5371  09E3  1803               	skipnc
  5372  09E4  0A81               	incf	1,f
  5373  09E5  0008               	return
  5374  09E6                     __end_of_fputc:	
  5375                           
  5376                           	psect	text9
  5377  1508                     __ptext9:	
  5378 ;; *************** function _putch *****************
  5379 ;; Defined at:
  5380 ;;		line 174 in file "mcc_generated_files/eusart.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  txData          1    wreg     unsigned char 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  txData          1    2[COMMON] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5394 ;;      Params:         0       0       0       0       0       0       0       0
  5395 ;;      Locals:         1       0       0       0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0
  5397 ;;      Totals:         1       0       0       0       0       0       0       0
  5398 ;;Total ram usage:        1 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    5
  5401 ;; This function calls:
  5402 ;;		_EUSART_Write
  5403 ;; This function is called by:
  5404 ;;		_fputc
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _putch
  5410  1508                     _putch:	
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  5414                           ;putch@txData stored from wreg
  5415  1508  00F2               	movwf	putch@txData
  5416                           
  5417                           ;mcc_generated_files/eusart.c: 174: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 175: {;mcc_generated_files/eusart.c: 176:     EUSART_Write(txData);
  5418  1509  0872               	movf	putch@txData,w
  5419  150A  3188  2000         	fcall	_EUSART_Write
  5420  150C  0008               	return
  5421  150D                     __end_of_putch:	
  5422                           
  5423                           	psect	text10
  5424  0800                     __ptext10:	
  5425 ;; *************** function _EUSART_Write *****************
  5426 ;; Defined at:
  5427 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  txData          1    wreg     unsigned char 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  txData          1    1[COMMON] unsigned char 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      void 
  5434 ;; Registers used:
  5435 ;;		wreg
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5441 ;;      Params:         0       0       0       0       0       0       0       0
  5442 ;;      Locals:         1       0       0       0       0       0       0       0
  5443 ;;      Temps:          0       0       0       0       0       0       0       0
  5444 ;;      Totals:         1       0       0       0       0       0       0       0
  5445 ;;Total ram usage:        1 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    4
  5448 ;; This function calls:
  5449 ;;		Nothing
  5450 ;; This function is called by:
  5451 ;;		_putch
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           
  5456                           ;psect for function _EUSART_Write
  5457  0800                     _EUSART_Write:	
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in _EUSART_Write: [wreg]
  5461                           ;EUSART_Write@txData stored from wreg
  5462  0800  00F1               	movwf	EUSART_Write@txData
  5463  0801                     l725:	
  5464                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:     }
  5465                           
  5466                           
  5467                           ;mcc_generated_files/eusart.c: 162:     while(0 == PIR1bits.TXIF)
  5468  0801  0020               	movlb	0	; select bank0
  5469  0802  1E11               	btfss	17,4	;volatile
  5470  0803  2801               	goto	l725
  5471                           
  5472                           ;mcc_generated_files/eusart.c: 166:     TXREG = txData;
  5473  0804  0871               	movf	EUSART_Write@txData,w
  5474  0805  0023               	movlb	3	; select bank3
  5475  0806  009A               	movwf	26	;volatile
  5476  0807  0008               	return
  5477  0808                     __end_of_EUSART_Write:	
  5478                           
  5479                           	psect	text11
  5480  0596                     __ptext11:	
  5481 ;; *************** function ___aomod *****************
  5482 ;; Defined at:
  5483 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  divisor         8    0[BANK0 ] long long 
  5486 ;;  dividend        8    8[BANK0 ] long long 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  sign            1    3[COMMON] unsigned char 
  5489 ;;  counter         1    2[COMMON] unsigned char 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  8    0[BANK0 ] long long 
  5492 ;; Registers used:
  5493 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5499 ;;      Params:         0      16       0       0       0       0       0       0
  5500 ;;      Locals:         2       0       0       0       0       0       0       0
  5501 ;;      Temps:          1       0       0       0       0       0       0       0
  5502 ;;      Totals:         3      16       0       0       0       0       0       0
  5503 ;;Total ram usage:       19 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    4
  5506 ;; This function calls:
  5507 ;;		Nothing
  5508 ;; This function is called by:
  5509 ;;		_dtoa
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function ___aomod
  5515  0596                     ___aomod:	
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
  5519  0596  01F3               	clrf	___aomod@sign
  5520  0597  3028               	movlw	low ___aomod@dividend
  5521  0598  0086               	movwf	6
  5522  0599  3000               	movlw	high ___aomod@dividend
  5523  059A  0087               	movwf	7
  5524  059B  3F47               	moviw [7]fsr1
  5525  059C  00F1               	movwf	??___aomod
  5526  059D  1FF1               	btfss	??___aomod,7
  5527  059E  2DC0               	goto	l3903
  5528  059F  0020               	movlb	0	; select bank0
  5529  05A0  09A8               	comf	___aomod@dividend,f
  5530  05A1  09A9               	comf	___aomod@dividend+1,f
  5531  05A2  09AA               	comf	___aomod@dividend+2,f
  5532  05A3  09AB               	comf	___aomod@dividend+3,f
  5533  05A4  09AC               	comf	___aomod@dividend+4,f
  5534  05A5  09AD               	comf	___aomod@dividend+5,f
  5535  05A6  09AE               	comf	___aomod@dividend+6,f
  5536  05A7  09AF               	comf	___aomod@dividend+7,f
  5537  05A8  0AA8               	incf	___aomod@dividend,f
  5538  05A9  1D03               	skipz
  5539  05AA  2DBE               	goto	u347lld
  5540  05AB  0AA9               	incf	___aomod@dividend+1,f
  5541  05AC  1D03               	skipz
  5542  05AD  2DBE               	goto	u347lld
  5543  05AE  0AAA               	incf	___aomod@dividend+2,f
  5544  05AF  1D03               	skipz
  5545  05B0  2DBE               	goto	u347lld
  5546  05B1  0AAB               	incf	___aomod@dividend+3,f
  5547  05B2  1D03               	skipz
  5548  05B3  2DBE               	goto	u347lld
  5549  05B4  0AAC               	incf	___aomod@dividend+4,f
  5550  05B5  1D03               	skipz
  5551  05B6  2DBE               	goto	u347lld
  5552  05B7  0AAD               	incf	___aomod@dividend+5,f
  5553  05B8  1D03               	skipz
  5554  05B9  2DBE               	goto	u347lld
  5555  05BA  0AAE               	incf	___aomod@dividend+6,f
  5556  05BB  1D03               	skipz
  5557  05BC  2DBE               	goto	u347lld
  5558  05BD  0AAF               	incf	___aomod@dividend+7,f
  5559  05BE                     u347lld:	
  5560  05BE  01F3               	clrf	___aomod@sign
  5561  05BF  0AF3               	incf	___aomod@sign,f
  5562  05C0                     l3903:	
  5563  05C0  3020               	movlw	low ___aomod@divisor
  5564  05C1  0086               	movwf	6
  5565  05C2  3000               	movlw	high ___aomod@divisor
  5566  05C3  0087               	movwf	7
  5567  05C4  3F47               	moviw [7]fsr1
  5568  05C5  00F1               	movwf	??___aomod
  5569  05C6  1FF1               	btfss	??___aomod,7
  5570  05C7  2DE7               	goto	l3907
  5571  05C8  0020               	movlb	0	; select bank0
  5572  05C9  09A0               	comf	___aomod@divisor,f
  5573  05CA  09A1               	comf	___aomod@divisor+1,f
  5574  05CB  09A2               	comf	___aomod@divisor+2,f
  5575  05CC  09A3               	comf	___aomod@divisor+3,f
  5576  05CD  09A4               	comf	___aomod@divisor+4,f
  5577  05CE  09A5               	comf	___aomod@divisor+5,f
  5578  05CF  09A6               	comf	___aomod@divisor+6,f
  5579  05D0  09A7               	comf	___aomod@divisor+7,f
  5580  05D1  0AA0               	incf	___aomod@divisor,f
  5581  05D2  1D03               	skipz
  5582  05D3  2DE7               	goto	l3907
  5583  05D4  0AA1               	incf	___aomod@divisor+1,f
  5584  05D5  1D03               	skipz
  5585  05D6  2DE7               	goto	l3907
  5586  05D7  0AA2               	incf	___aomod@divisor+2,f
  5587  05D8  1D03               	skipz
  5588  05D9  2DE7               	goto	l3907
  5589  05DA  0AA3               	incf	___aomod@divisor+3,f
  5590  05DB  1D03               	skipz
  5591  05DC  2DE7               	goto	l3907
  5592  05DD  0AA4               	incf	___aomod@divisor+4,f
  5593  05DE  1D03               	skipz
  5594  05DF  2DE7               	goto	l3907
  5595  05E0  0AA5               	incf	___aomod@divisor+5,f
  5596  05E1  1D03               	skipz
  5597  05E2  2DE7               	goto	l3907
  5598  05E3  0AA6               	incf	___aomod@divisor+6,f
  5599  05E4  1D03               	skipz
  5600  05E5  2DE7               	goto	l3907
  5601  05E6  0AA7               	incf	___aomod@divisor+7,f
  5602  05E7                     l3907:	
  5603  05E7  0020               	movlb	0	; select bank0
  5604  05E8  0820               	movf	___aomod@divisor,w
  5605  05E9  0421               	iorwf	___aomod@divisor+1,w
  5606  05EA  0422               	iorwf	___aomod@divisor+2,w
  5607  05EB  0423               	iorwf	___aomod@divisor+3,w
  5608  05EC  0424               	iorwf	___aomod@divisor+4,w
  5609  05ED  0425               	iorwf	___aomod@divisor+5,w
  5610  05EE  0426               	iorwf	___aomod@divisor+6,w
  5611  05EF  0427               	iorwf	___aomod@divisor+7,w
  5612  05F0  1903               	skipnz
  5613  05F1  2E3F               	goto	l3923
  5614  05F2  01F2               	clrf	___aomod@counter
  5615  05F3  0AF2               	incf	___aomod@counter,f
  5616  05F4                     l3915:	
  5617  05F4  1BA7               	btfsc	___aomod@divisor+7,7
  5618  05F5  2E03               	goto	l3917
  5619  05F6  35A0               	lslf	___aomod@divisor,f
  5620  05F7  0DA1               	rlf	___aomod@divisor+1,f
  5621  05F8  0DA2               	rlf	___aomod@divisor+2,f
  5622  05F9  0DA3               	rlf	___aomod@divisor+3,f
  5623  05FA  0DA4               	rlf	___aomod@divisor+4,f
  5624  05FB  0DA5               	rlf	___aomod@divisor+5,f
  5625  05FC  0DA6               	rlf	___aomod@divisor+6,f
  5626  05FD  0DA7               	rlf	___aomod@divisor+7,f
  5627  05FE  3001               	movlw	1
  5628  05FF  00F1               	movwf	??___aomod
  5629  0600  0871               	movf	??___aomod,w
  5630  0601  07F2               	addwf	___aomod@counter,f
  5631  0602  2DF4               	goto	l3915
  5632  0603                     l3917:	
  5633  0603  0827               	movf	___aomod@divisor+7,w
  5634  0604  022F               	subwf	___aomod@dividend+7,w
  5635  0605  1D03               	skipz
  5636  0606  2E21               	goto	u3525
  5637  0607  0826               	movf	___aomod@divisor+6,w
  5638  0608  022E               	subwf	___aomod@dividend+6,w
  5639  0609  1D03               	skipz
  5640  060A  2E21               	goto	u3525
  5641  060B  0825               	movf	___aomod@divisor+5,w
  5642  060C  022D               	subwf	___aomod@dividend+5,w
  5643  060D  1D03               	skipz
  5644  060E  2E21               	goto	u3525
  5645  060F  0824               	movf	___aomod@divisor+4,w
  5646  0610  022C               	subwf	___aomod@dividend+4,w
  5647  0611  1D03               	skipz
  5648  0612  2E21               	goto	u3525
  5649  0613  0823               	movf	___aomod@divisor+3,w
  5650  0614  022B               	subwf	___aomod@dividend+3,w
  5651  0615  1D03               	skipz
  5652  0616  2E21               	goto	u3525
  5653  0617  0822               	movf	___aomod@divisor+2,w
  5654  0618  022A               	subwf	___aomod@dividend+2,w
  5655  0619  1D03               	skipz
  5656  061A  2E21               	goto	u3525
  5657  061B  0821               	movf	___aomod@divisor+1,w
  5658  061C  0229               	subwf	___aomod@dividend+1,w
  5659  061D  1D03               	skipz
  5660  061E  2E21               	goto	u3525
  5661  061F  0820               	movf	___aomod@divisor,w
  5662  0620  0228               	subwf	___aomod@dividend,w
  5663  0621                     u3525:	
  5664  0621  1C03               	skipc
  5665  0622  2E33               	goto	l3921
  5666  0623  0820               	movf	___aomod@divisor,w
  5667  0624  02A8               	subwf	___aomod@dividend,f
  5668  0625  0821               	movf	___aomod@divisor+1,w
  5669  0626  3BA9               	subwfb	___aomod@dividend+1,f
  5670  0627  0822               	movf	___aomod@divisor+2,w
  5671  0628  3BAA               	subwfb	___aomod@dividend+2,f
  5672  0629  0823               	movf	___aomod@divisor+3,w
  5673  062A  3BAB               	subwfb	___aomod@dividend+3,f
  5674  062B  0824               	movf	___aomod@divisor+4,w
  5675  062C  3BAC               	subwfb	___aomod@dividend+4,f
  5676  062D  0825               	movf	___aomod@divisor+5,w
  5677  062E  3BAD               	subwfb	___aomod@dividend+5,f
  5678  062F  0826               	movf	___aomod@divisor+6,w
  5679  0630  3BAE               	subwfb	___aomod@dividend+6,f
  5680  0631  0827               	movf	___aomod@divisor+7,w
  5681  0632  3BAF               	subwfb	___aomod@dividend+7,f
  5682  0633                     l3921:	
  5683  0633  36A7               	lsrf	___aomod@divisor+7,f
  5684  0634  0CA6               	rrf	___aomod@divisor+6,f
  5685  0635  0CA5               	rrf	___aomod@divisor+5,f
  5686  0636  0CA4               	rrf	___aomod@divisor+4,f
  5687  0637  0CA3               	rrf	___aomod@divisor+3,f
  5688  0638  0CA2               	rrf	___aomod@divisor+2,f
  5689  0639  0CA1               	rrf	___aomod@divisor+1,f
  5690  063A  0CA0               	rrf	___aomod@divisor,f
  5691  063B  3001               	movlw	1
  5692  063C  02F2               	subwf	___aomod@counter,f
  5693  063D  1D03               	btfss	3,2
  5694  063E  2E03               	goto	l3917
  5695  063F                     l3923:	
  5696  063F  0873               	movf	___aomod@sign,w
  5697  0640  1903               	btfsc	3,2
  5698  0641  2E60               	goto	l1276
  5699  0642  09A8               	comf	___aomod@dividend,f
  5700  0643  09A9               	comf	___aomod@dividend+1,f
  5701  0644  09AA               	comf	___aomod@dividend+2,f
  5702  0645  09AB               	comf	___aomod@dividend+3,f
  5703  0646  09AC               	comf	___aomod@dividend+4,f
  5704  0647  09AD               	comf	___aomod@dividend+5,f
  5705  0648  09AE               	comf	___aomod@dividend+6,f
  5706  0649  09AF               	comf	___aomod@dividend+7,f
  5707  064A  0AA8               	incf	___aomod@dividend,f
  5708  064B  1D03               	skipz
  5709  064C  2E60               	goto	l1276
  5710  064D  0AA9               	incf	___aomod@dividend+1,f
  5711  064E  1D03               	skipz
  5712  064F  2E60               	goto	l1276
  5713  0650  0AAA               	incf	___aomod@dividend+2,f
  5714  0651  1D03               	skipz
  5715  0652  2E60               	goto	l1276
  5716  0653  0AAB               	incf	___aomod@dividend+3,f
  5717  0654  1D03               	skipz
  5718  0655  2E60               	goto	l1276
  5719  0656  0AAC               	incf	___aomod@dividend+4,f
  5720  0657  1D03               	skipz
  5721  0658  2E60               	goto	l1276
  5722  0659  0AAD               	incf	___aomod@dividend+5,f
  5723  065A  1D03               	skipz
  5724  065B  2E60               	goto	l1276
  5725  065C  0AAE               	incf	___aomod@dividend+6,f
  5726  065D  1D03               	skipz
  5727  065E  2E60               	goto	l1276
  5728  065F  0AAF               	incf	___aomod@dividend+7,f
  5729  0660                     l1276:	
  5730  0660  0020               	movlb	0	; select bank0
  5731  0661  0828               	movf	___aomod@dividend,w
  5732  0662  00A0               	movwf	?___aomod
  5733  0663  0829               	movf	___aomod@dividend+1,w
  5734  0664  00A1               	movwf	?___aomod+1
  5735  0665  082A               	movf	___aomod@dividend+2,w
  5736  0666  00A2               	movwf	?___aomod+2
  5737  0667  082B               	movf	___aomod@dividend+3,w
  5738  0668  00A3               	movwf	?___aomod+3
  5739  0669  082C               	movf	___aomod@dividend+4,w
  5740  066A  00A4               	movwf	?___aomod+4
  5741  066B  082D               	movf	___aomod@dividend+5,w
  5742  066C  00A5               	movwf	?___aomod+5
  5743  066D  082E               	movf	___aomod@dividend+6,w
  5744  066E  00A6               	movwf	?___aomod+6
  5745  066F  082F               	movf	___aomod@dividend+7,w
  5746  0670  00A7               	movwf	?___aomod+7
  5747  0671  0008               	return
  5748  0672                     __end_of___aomod:	
  5749                           
  5750                           	psect	text12
  5751  04A3                     __ptext12:	
  5752 ;; *************** function ___aodiv *****************
  5753 ;; Defined at:
  5754 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  divisor         8    0[BANK0 ] long long 
  5757 ;;  dividend        8    8[BANK0 ] long long 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  quotient        8    4[COMMON] long long 
  5760 ;;  sign            1    3[COMMON] unsigned char 
  5761 ;;  counter         1    2[COMMON] unsigned char 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  8    0[BANK0 ] long long 
  5764 ;; Registers used:
  5765 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5771 ;;      Params:         0      16       0       0       0       0       0       0
  5772 ;;      Locals:        10       0       0       0       0       0       0       0
  5773 ;;      Temps:          1       0       0       0       0       0       0       0
  5774 ;;      Totals:        11      16       0       0       0       0       0       0
  5775 ;;Total ram usage:       27 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    4
  5778 ;; This function calls:
  5779 ;;		Nothing
  5780 ;; This function is called by:
  5781 ;;		_dtoa
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function ___aodiv
  5787  04A3                     ___aodiv:	
  5788                           
  5789                           ;incstack = 0
  5790                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  5791  04A3  01F3               	clrf	___aodiv@sign
  5792  04A4  3020               	movlw	low ___aodiv@divisor
  5793  04A5  0086               	movwf	6
  5794  04A6  3000               	movlw	high ___aodiv@divisor
  5795  04A7  0087               	movwf	7
  5796  04A8  3F47               	moviw [7]fsr1
  5797  04A9  00F1               	movwf	??___aodiv
  5798  04AA  1FF1               	btfss	??___aodiv,7
  5799  04AB  2CCD               	goto	l3865
  5800  04AC  0020               	movlb	0	; select bank0
  5801  04AD  09A0               	comf	___aodiv@divisor,f
  5802  04AE  09A1               	comf	___aodiv@divisor+1,f
  5803  04AF  09A2               	comf	___aodiv@divisor+2,f
  5804  04B0  09A3               	comf	___aodiv@divisor+3,f
  5805  04B1  09A4               	comf	___aodiv@divisor+4,f
  5806  04B2  09A5               	comf	___aodiv@divisor+5,f
  5807  04B3  09A6               	comf	___aodiv@divisor+6,f
  5808  04B4  09A7               	comf	___aodiv@divisor+7,f
  5809  04B5  0AA0               	incf	___aodiv@divisor,f
  5810  04B6  1D03               	skipz
  5811  04B7  2CCB               	goto	u336lld
  5812  04B8  0AA1               	incf	___aodiv@divisor+1,f
  5813  04B9  1D03               	skipz
  5814  04BA  2CCB               	goto	u336lld
  5815  04BB  0AA2               	incf	___aodiv@divisor+2,f
  5816  04BC  1D03               	skipz
  5817  04BD  2CCB               	goto	u336lld
  5818  04BE  0AA3               	incf	___aodiv@divisor+3,f
  5819  04BF  1D03               	skipz
  5820  04C0  2CCB               	goto	u336lld
  5821  04C1  0AA4               	incf	___aodiv@divisor+4,f
  5822  04C2  1D03               	skipz
  5823  04C3  2CCB               	goto	u336lld
  5824  04C4  0AA5               	incf	___aodiv@divisor+5,f
  5825  04C5  1D03               	skipz
  5826  04C6  2CCB               	goto	u336lld
  5827  04C7  0AA6               	incf	___aodiv@divisor+6,f
  5828  04C8  1D03               	skipz
  5829  04C9  2CCB               	goto	u336lld
  5830  04CA  0AA7               	incf	___aodiv@divisor+7,f
  5831  04CB                     u336lld:	
  5832  04CB  01F3               	clrf	___aodiv@sign
  5833  04CC  0AF3               	incf	___aodiv@sign,f
  5834  04CD                     l3865:	
  5835  04CD  3028               	movlw	low ___aodiv@dividend
  5836  04CE  0086               	movwf	6
  5837  04CF  3000               	movlw	high ___aodiv@dividend
  5838  04D0  0087               	movwf	7
  5839  04D1  3F47               	moviw [7]fsr1
  5840  04D2  00F1               	movwf	??___aodiv
  5841  04D3  1FF1               	btfss	??___aodiv,7
  5842  04D4  2CF8               	goto	l3871
  5843  04D5  0020               	movlb	0	; select bank0
  5844  04D6  09A8               	comf	___aodiv@dividend,f
  5845  04D7  09A9               	comf	___aodiv@dividend+1,f
  5846  04D8  09AA               	comf	___aodiv@dividend+2,f
  5847  04D9  09AB               	comf	___aodiv@dividend+3,f
  5848  04DA  09AC               	comf	___aodiv@dividend+4,f
  5849  04DB  09AD               	comf	___aodiv@dividend+5,f
  5850  04DC  09AE               	comf	___aodiv@dividend+6,f
  5851  04DD  09AF               	comf	___aodiv@dividend+7,f
  5852  04DE  0AA8               	incf	___aodiv@dividend,f
  5853  04DF  1D03               	skipz
  5854  04E0  2CF4               	goto	l3869
  5855  04E1  0AA9               	incf	___aodiv@dividend+1,f
  5856  04E2  1D03               	skipz
  5857  04E3  2CF4               	goto	l3869
  5858  04E4  0AAA               	incf	___aodiv@dividend+2,f
  5859  04E5  1D03               	skipz
  5860  04E6  2CF4               	goto	l3869
  5861  04E7  0AAB               	incf	___aodiv@dividend+3,f
  5862  04E8  1D03               	skipz
  5863  04E9  2CF4               	goto	l3869
  5864  04EA  0AAC               	incf	___aodiv@dividend+4,f
  5865  04EB  1D03               	skipz
  5866  04EC  2CF4               	goto	l3869
  5867  04ED  0AAD               	incf	___aodiv@dividend+5,f
  5868  04EE  1D03               	skipz
  5869  04EF  2CF4               	goto	l3869
  5870  04F0  0AAE               	incf	___aodiv@dividend+6,f
  5871  04F1  1D03               	skipz
  5872  04F2  2CF4               	goto	l3869
  5873  04F3  0AAF               	incf	___aodiv@dividend+7,f
  5874  04F4                     l3869:	
  5875  04F4  3001               	movlw	1
  5876  04F5  00F1               	movwf	??___aodiv
  5877  04F6  0871               	movf	??___aodiv,w
  5878  04F7  06F3               	xorwf	___aodiv@sign,f
  5879  04F8                     l3871:	
  5880  04F8  3074               	movlw	low ___aodiv@quotient
  5881  04F9  0086               	movwf	6
  5882  04FA  3000               	movlw	high ___aodiv@quotient
  5883  04FB  0087               	movwf	7
  5884  04FC  3008               	movlw	8
  5885  04FD  00F1               	movwf	??___aodiv
  5886  04FE  3000               	movlw	0
  5887  04FF                     u3390:	
  5888  04FF  001E               	movwi fsr1++
  5889  0500  0BF1               	decfsz	??___aodiv,f
  5890  0501  2CFF               	goto	u3390
  5891  0502  0020               	movlb	0	; select bank0
  5892  0503  0820               	movf	___aodiv@divisor,w
  5893  0504  0421               	iorwf	___aodiv@divisor+1,w
  5894  0505  0422               	iorwf	___aodiv@divisor+2,w
  5895  0506  0423               	iorwf	___aodiv@divisor+3,w
  5896  0507  0424               	iorwf	___aodiv@divisor+4,w
  5897  0508  0425               	iorwf	___aodiv@divisor+5,w
  5898  0509  0426               	iorwf	___aodiv@divisor+6,w
  5899  050A  0427               	iorwf	___aodiv@divisor+7,w
  5900  050B  1903               	skipnz
  5901  050C  2D63               	goto	l3893
  5902  050D  01F2               	clrf	___aodiv@counter
  5903  050E  0AF2               	incf	___aodiv@counter,f
  5904  050F                     l3881:	
  5905  050F  1BA7               	btfsc	___aodiv@divisor+7,7
  5906  0510  2D1E               	goto	l3883
  5907  0511  35A0               	lslf	___aodiv@divisor,f
  5908  0512  0DA1               	rlf	___aodiv@divisor+1,f
  5909  0513  0DA2               	rlf	___aodiv@divisor+2,f
  5910  0514  0DA3               	rlf	___aodiv@divisor+3,f
  5911  0515  0DA4               	rlf	___aodiv@divisor+4,f
  5912  0516  0DA5               	rlf	___aodiv@divisor+5,f
  5913  0517  0DA6               	rlf	___aodiv@divisor+6,f
  5914  0518  0DA7               	rlf	___aodiv@divisor+7,f
  5915  0519  3001               	movlw	1
  5916  051A  00F1               	movwf	??___aodiv
  5917  051B  0871               	movf	??___aodiv,w
  5918  051C  07F2               	addwf	___aodiv@counter,f
  5919  051D  2D0F               	goto	l3881
  5920  051E                     l3883:	
  5921  051E  35F4               	lslf	___aodiv@quotient,f
  5922  051F  0DF5               	rlf	___aodiv@quotient+1,f
  5923  0520  0DF6               	rlf	___aodiv@quotient+2,f
  5924  0521  0DF7               	rlf	___aodiv@quotient+3,f
  5925  0522  0DF8               	rlf	___aodiv@quotient+4,f
  5926  0523  0DF9               	rlf	___aodiv@quotient+5,f
  5927  0524  0DFA               	rlf	___aodiv@quotient+6,f
  5928  0525  0DFB               	rlf	___aodiv@quotient+7,f
  5929  0526  0827               	movf	___aodiv@divisor+7,w
  5930  0527  022F               	subwf	___aodiv@dividend+7,w
  5931  0528  1D03               	skipz
  5932  0529  2D44               	goto	u3425
  5933  052A  0826               	movf	___aodiv@divisor+6,w
  5934  052B  022E               	subwf	___aodiv@dividend+6,w
  5935  052C  1D03               	skipz
  5936  052D  2D44               	goto	u3425
  5937  052E  0825               	movf	___aodiv@divisor+5,w
  5938  052F  022D               	subwf	___aodiv@dividend+5,w
  5939  0530  1D03               	skipz
  5940  0531  2D44               	goto	u3425
  5941  0532  0824               	movf	___aodiv@divisor+4,w
  5942  0533  022C               	subwf	___aodiv@dividend+4,w
  5943  0534  1D03               	skipz
  5944  0535  2D44               	goto	u3425
  5945  0536  0823               	movf	___aodiv@divisor+3,w
  5946  0537  022B               	subwf	___aodiv@dividend+3,w
  5947  0538  1D03               	skipz
  5948  0539  2D44               	goto	u3425
  5949  053A  0822               	movf	___aodiv@divisor+2,w
  5950  053B  022A               	subwf	___aodiv@dividend+2,w
  5951  053C  1D03               	skipz
  5952  053D  2D44               	goto	u3425
  5953  053E  0821               	movf	___aodiv@divisor+1,w
  5954  053F  0229               	subwf	___aodiv@dividend+1,w
  5955  0540  1D03               	skipz
  5956  0541  2D44               	goto	u3425
  5957  0542  0820               	movf	___aodiv@divisor,w
  5958  0543  0228               	subwf	___aodiv@dividend,w
  5959  0544                     u3425:	
  5960  0544  1C03               	skipc
  5961  0545  2D57               	goto	l3891
  5962  0546  0820               	movf	___aodiv@divisor,w
  5963  0547  02A8               	subwf	___aodiv@dividend,f
  5964  0548  0821               	movf	___aodiv@divisor+1,w
  5965  0549  3BA9               	subwfb	___aodiv@dividend+1,f
  5966  054A  0822               	movf	___aodiv@divisor+2,w
  5967  054B  3BAA               	subwfb	___aodiv@dividend+2,f
  5968  054C  0823               	movf	___aodiv@divisor+3,w
  5969  054D  3BAB               	subwfb	___aodiv@dividend+3,f
  5970  054E  0824               	movf	___aodiv@divisor+4,w
  5971  054F  3BAC               	subwfb	___aodiv@dividend+4,f
  5972  0550  0825               	movf	___aodiv@divisor+5,w
  5973  0551  3BAD               	subwfb	___aodiv@dividend+5,f
  5974  0552  0826               	movf	___aodiv@divisor+6,w
  5975  0553  3BAE               	subwfb	___aodiv@dividend+6,f
  5976  0554  0827               	movf	___aodiv@divisor+7,w
  5977  0555  3BAF               	subwfb	___aodiv@dividend+7,f
  5978  0556  1474               	bsf	___aodiv@quotient,0
  5979  0557                     l3891:	
  5980  0557  36A7               	lsrf	___aodiv@divisor+7,f
  5981  0558  0CA6               	rrf	___aodiv@divisor+6,f
  5982  0559  0CA5               	rrf	___aodiv@divisor+5,f
  5983  055A  0CA4               	rrf	___aodiv@divisor+4,f
  5984  055B  0CA3               	rrf	___aodiv@divisor+3,f
  5985  055C  0CA2               	rrf	___aodiv@divisor+2,f
  5986  055D  0CA1               	rrf	___aodiv@divisor+1,f
  5987  055E  0CA0               	rrf	___aodiv@divisor,f
  5988  055F  3001               	movlw	1
  5989  0560  02F2               	subwf	___aodiv@counter,f
  5990  0561  1D03               	btfss	3,2
  5991  0562  2D1E               	goto	l3883
  5992  0563                     l3893:	
  5993  0563  0873               	movf	___aodiv@sign,w
  5994  0564  1903               	btfsc	3,2
  5995  0565  2D84               	goto	l1263
  5996  0566  09F4               	comf	___aodiv@quotient,f
  5997  0567  09F5               	comf	___aodiv@quotient+1,f
  5998  0568  09F6               	comf	___aodiv@quotient+2,f
  5999  0569  09F7               	comf	___aodiv@quotient+3,f
  6000  056A  09F8               	comf	___aodiv@quotient+4,f
  6001  056B  09F9               	comf	___aodiv@quotient+5,f
  6002  056C  09FA               	comf	___aodiv@quotient+6,f
  6003  056D  09FB               	comf	___aodiv@quotient+7,f
  6004  056E  0AF4               	incf	___aodiv@quotient,f
  6005  056F  1D03               	skipz
  6006  0570  2D84               	goto	l1263
  6007  0571  0AF5               	incf	___aodiv@quotient+1,f
  6008  0572  1D03               	skipz
  6009  0573  2D84               	goto	l1263
  6010  0574  0AF6               	incf	___aodiv@quotient+2,f
  6011  0575  1D03               	skipz
  6012  0576  2D84               	goto	l1263
  6013  0577  0AF7               	incf	___aodiv@quotient+3,f
  6014  0578  1D03               	skipz
  6015  0579  2D84               	goto	l1263
  6016  057A  0AF8               	incf	___aodiv@quotient+4,f
  6017  057B  1D03               	skipz
  6018  057C  2D84               	goto	l1263
  6019  057D  0AF9               	incf	___aodiv@quotient+5,f
  6020  057E  1D03               	skipz
  6021  057F  2D84               	goto	l1263
  6022  0580  0AFA               	incf	___aodiv@quotient+6,f
  6023  0581  1D03               	skipz
  6024  0582  2D84               	goto	l1263
  6025  0583  0AFB               	incf	___aodiv@quotient+7,f
  6026  0584                     l1263:	
  6027  0584  0874               	movf	___aodiv@quotient,w
  6028  0585  0020               	movlb	0	; select bank0
  6029  0586  00A0               	movwf	?___aodiv
  6030  0587  0875               	movf	___aodiv@quotient+1,w
  6031  0588  00A1               	movwf	?___aodiv+1
  6032  0589  0876               	movf	___aodiv@quotient+2,w
  6033  058A  00A2               	movwf	?___aodiv+2
  6034  058B  0877               	movf	___aodiv@quotient+3,w
  6035  058C  00A3               	movwf	?___aodiv+3
  6036  058D  0878               	movf	___aodiv@quotient+4,w
  6037  058E  00A4               	movwf	?___aodiv+4
  6038  058F  0879               	movf	___aodiv@quotient+5,w
  6039  0590  00A5               	movwf	?___aodiv+5
  6040  0591  087A               	movf	___aodiv@quotient+6,w
  6041  0592  00A6               	movwf	?___aodiv+6
  6042  0593  087B               	movf	___aodiv@quotient+7,w
  6043  0594  00A7               	movwf	?___aodiv+7
  6044  0595  0008               	return
  6045  0596                     __end_of___aodiv:	
  6046                           
  6047                           	psect	text13
  6048  16A4                     __ptext13:	
  6049 ;; *************** function _SYSTEM_Initialize *****************
  6050 ;; Defined at:
  6051 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;		None
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6065 ;;      Params:         0       0       0       0       0       0       0       0
  6066 ;;      Locals:         0       0       0       0       0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0       0
  6068 ;;      Totals:         0       0       0       0       0       0       0       0
  6069 ;;Total ram usage:        0 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    9
  6072 ;; This function calls:
  6073 ;;		_EUSART_Initialize
  6074 ;;		_EXT_INT_Initialize
  6075 ;;		_MTOUCH_Initialize
  6076 ;;		_OSCILLATOR_Initialize
  6077 ;;		_PIN_MANAGER_Initialize
  6078 ;;		_TMR2_Initialize
  6079 ;;		_WDT_Initialize
  6080 ;; This function is called by:
  6081 ;;		_main
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           
  6086                           ;psect for function _SYSTEM_Initialize
  6087  16A4                     _SYSTEM_Initialize:	
  6088                           
  6089                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6090                           
  6091                           ;incstack = 0
  6092                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6093  16A4  3197  2759  3196   	fcall	_PIN_MANAGER_Initialize
  6094                           
  6095                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6096  16A7  3195  2537  3196   	fcall	_OSCILLATOR_Initialize
  6097                           
  6098                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6099  16AA  3194  24FF  3196   	fcall	_WDT_Initialize
  6100                           
  6101                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6102  16AD  3195  2569  3196   	fcall	_TMR2_Initialize
  6103                           
  6104                           ;mcc_generated_files/mcc.c: 57:     EXT_INT_Initialize();
  6105  16B0  3195  2584  3196   	fcall	_EXT_INT_Initialize
  6106                           
  6107                           ;mcc_generated_files/mcc.c: 58:     EUSART_Initialize();
  6108  16B3  3189  2121  3196   	fcall	_EUSART_Initialize
  6109                           
  6110                           ;mcc_generated_files/mcc.c: 59:     MTOUCH_Initialize();
  6111  16B6  3195  258F         	fcall	_MTOUCH_Initialize
  6112  16B8  0008               	return
  6113  16B9                     __end_of_SYSTEM_Initialize:	
  6114                           
  6115                           	psect	text14
  6116  14FF                     __ptext14:	
  6117 ;; *************** function _WDT_Initialize *****************
  6118 ;; Defined at:
  6119 ;;		line 70 in file "mcc_generated_files/mcc.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;		None
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6133 ;;      Params:         0       0       0       0       0       0       0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0
  6136 ;;      Totals:         0       0       0       0       0       0       0       0
  6137 ;;Total ram usage:        0 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    4
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_SYSTEM_Initialize
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _WDT_Initialize
  6149  14FF                     _WDT_Initialize:	
  6150                           
  6151                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x19;
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _WDT_Initialize: [wreg]
  6155  14FF  3019               	movlw	25
  6156  1500  0021               	movlb	1	; select bank1
  6157  1501  0097               	movwf	23	;volatile
  6158  1502  0008               	return
  6159  1503                     __end_of_WDT_Initialize:	
  6160                           
  6161                           	psect	text15
  6162  1569                     __ptext15:	
  6163 ;; *************** function _TMR2_Initialize *****************
  6164 ;; Defined at:
  6165 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;		None
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;		None
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6179 ;;      Params:         0       0       0       0       0       0       0       0
  6180 ;;      Locals:         0       0       0       0       0       0       0       0
  6181 ;;      Temps:          0       0       0       0       0       0       0       0
  6182 ;;      Totals:         0       0       0       0       0       0       0       0
  6183 ;;Total ram usage:        0 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    4
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_SYSTEM_Initialize
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function _TMR2_Initialize
  6195  1569                     _TMR2_Initialize:	
  6196                           
  6197                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6201  1569  30FF               	movlw	255
  6202  156A  0020               	movlb	0	; select bank0
  6203  156B  009B               	movwf	27	;volatile
  6204                           
  6205                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6206  156C  019A               	clrf	26	;volatile
  6207                           
  6208                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6209  156D  1091               	bcf	17,1	;volatile
  6210                           
  6211                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6212  156E  3004               	movlw	4
  6213  156F  009C               	movwf	28	;volatile
  6214  1570  0008               	return
  6215  1571                     __end_of_TMR2_Initialize:	
  6216                           
  6217                           	psect	text16
  6218  1759                     __ptext16:	
  6219 ;; *************** function _PIN_MANAGER_Initialize *****************
  6220 ;; Defined at:
  6221 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;		None
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;		None
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6235 ;;      Params:         0       0       0       0       0       0       0       0
  6236 ;;      Locals:         0       0       0       0       0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0       0       0       0
  6238 ;;      Totals:         0       0       0       0       0       0       0       0
  6239 ;;Total ram usage:        0 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    4
  6242 ;; This function calls:
  6243 ;;		Nothing
  6244 ;; This function is called by:
  6245 ;;		_SYSTEM_Initialize
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _PIN_MANAGER_Initialize
  6251  1759                     _PIN_MANAGER_Initialize:	
  6252                           
  6253                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  6254                           
  6255                           ;incstack = 0
  6256                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6257  1759  0022               	movlb	2	; select bank2
  6258  175A  018C               	clrf	12	;volatile
  6259                           
  6260                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  6261  175B  018D               	clrf	13	;volatile
  6262                           
  6263                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  6264  175C  018E               	clrf	14	;volatile
  6265                           
  6266                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  6267  175D  303F               	movlw	63
  6268  175E  0021               	movlb	1	; select bank1
  6269  175F  008C               	movwf	12	;volatile
  6270                           
  6271                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  6272  1760  3060               	movlw	96
  6273  1761  008D               	movwf	13	;volatile
  6274                           
  6275                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x53;
  6276  1762  3053               	movlw	83
  6277  1763  008E               	movwf	14	;volatile
  6278                           
  6279                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  6280  1764  30FF               	movlw	255
  6281  1765  0023               	movlb	3	; select bank3
  6282  1766  008E               	movwf	14	;volatile
  6283                           
  6284                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  6285  1767  3050               	movlw	80
  6286  1768  008D               	movwf	13	;volatile
  6287                           
  6288                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x33;
  6289  1769  3033               	movlw	51
  6290  176A  008C               	movwf	12	;volatile
  6291                           
  6292                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6293  176B  0024               	movlb	4	; select bank4
  6294  176C  018D               	clrf	13	;volatile
  6295                           
  6296                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6297  176D  018C               	clrf	12	;volatile
  6298                           
  6299                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6300  176E  0021               	movlb	1	; select bank1
  6301  176F  1795               	bsf	21,7	;volatile
  6302                           
  6303                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6304  1770  0022               	movlb	2	; select bank2
  6305  1771  019D               	clrf	29	;volatile
  6306  1772  0008               	return
  6307  1773                     __end_of_PIN_MANAGER_Initialize:	
  6308                           
  6309                           	psect	text17
  6310  1537                     __ptext17:	
  6311 ;; *************** function _OSCILLATOR_Initialize *****************
  6312 ;; Defined at:
  6313 ;;		line 62 in file "mcc_generated_files/mcc.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, status,2
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6327 ;;      Params:         0       0       0       0       0       0       0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0       0
  6330 ;;      Totals:         0       0       0       0       0       0       0       0
  6331 ;;Total ram usage:        0 bytes
  6332 ;; Hardware stack levels used:    1
  6333 ;; Hardware stack levels required when called:    4
  6334 ;; This function calls:
  6335 ;;		Nothing
  6336 ;; This function is called by:
  6337 ;;		_SYSTEM_Initialize
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function _OSCILLATOR_Initialize
  6343  1537                     _OSCILLATOR_Initialize:	
  6344                           
  6345                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0xF0;
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6349  1537  30F0               	movlw	240
  6350  1538  0021               	movlb	1	; select bank1
  6351  1539  0099               	movwf	25	;volatile
  6352                           
  6353                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  6354  153A  0022               	movlb	2	; select bank2
  6355  153B  0196               	clrf	22	;volatile
  6356  153C  0008               	return
  6357  153D                     __end_of_OSCILLATOR_Initialize:	
  6358                           
  6359                           	psect	text18
  6360  158F                     __ptext18:	
  6361 ;; *************** function _MTOUCH_Initialize *****************
  6362 ;; Defined at:
  6363 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      void 
  6370 ;; Registers used:
  6371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6377 ;;      Params:         0       0       0       0       0       0       0       0
  6378 ;;      Locals:         0       0       0       0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0       0       0       0
  6380 ;;      Totals:         0       0       0       0       0       0       0       0
  6381 ;;Total ram usage:        0 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    8
  6384 ;; This function calls:
  6385 ;;		_MTOUCH_Button_InitializeAll
  6386 ;;		_MTOUCH_Sensor_InitializeAll
  6387 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6388 ;;		_MTOUCH_Sensor_Scan_Initialize
  6389 ;; This function is called by:
  6390 ;;		_SYSTEM_Initialize
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           
  6395                           ;psect for function _MTOUCH_Initialize
  6396  158F                     _MTOUCH_Initialize:	
  6397                           
  6398                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  6399                           
  6400                           ;incstack = 0
  6401                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6402  158F  3187  27F2  3195   	fcall	_MTOUCH_Sensor_InitializeAll
  6403                           
  6404                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  6405  1592  3197  27A9  3195   	fcall	_MTOUCH_Button_InitializeAll
  6406                           
  6407                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  6408  1595  3196  2667  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6409                           
  6410                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  6411  1598  3196  2600         	fcall	_MTOUCH_Sensor_Scan_Initialize
  6412  159A  0008               	return
  6413  159B                     __end_of_MTOUCH_Initialize:	
  6414                           
  6415                           	psect	text19
  6416  07F2                     __ptext19:	
  6417 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6418 ;; Defined at:
  6419 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;		None
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  sensor          1   10[COMMON] enum E2864
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6433 ;;      Params:         0       0       0       0       0       0       0       0
  6434 ;;      Locals:         1       0       0       0       0       0       0       0
  6435 ;;      Temps:          1       0       0       0       0       0       0       0
  6436 ;;      Totals:         2       0       0       0       0       0       0       0
  6437 ;;Total ram usage:        2 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    7
  6440 ;; This function calls:
  6441 ;;		_MTOUCH_Sensor_Initialize
  6442 ;; This function is called by:
  6443 ;;		_MTOUCH_Initialize
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6449  07F2                     _MTOUCH_Sensor_InitializeAll:	
  6450                           
  6451                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  6452                           
  6453                           ;incstack = 0
  6454                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6455  07F2  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  6456  07F3                     l5443:	
  6457                           
  6458                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  6459  07F3  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6460  07F4  3196  268F  3187   	fcall	_MTOUCH_Sensor_Initialize
  6461                           
  6462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  6463  07F7  3001               	movlw	1
  6464  07F8  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  6465  07F9  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  6466  07FA  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  6467  07FB  3003               	movlw	3
  6468  07FC  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  6469  07FD  1803               	btfsc	3,0
  6470  07FE  0008               	return
  6471  07FF  2FF3               	goto	l5443
  6472  0800                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6473                           
  6474                           	psect	text20
  6475  168F                     __ptext20:	
  6476 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6477 ;; Defined at:
  6478 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;  sensor          1    wreg     enum E2864
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  sensor          1    8[COMMON] enum E2864
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  1    wreg      enum E2868
  6485 ;; Registers used:
  6486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6492 ;;      Params:         0       0       0       0       0       0       0       0
  6493 ;;      Locals:         1       0       0       0       0       0       0       0
  6494 ;;      Temps:          1       0       0       0       0       0       0       0
  6495 ;;      Totals:         2       0       0       0       0       0       0       0
  6496 ;;Total ram usage:        2 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    6
  6499 ;; This function calls:
  6500 ;;		_MTOUCH_Sensor_Calibrate
  6501 ;;		_MTOUCH_Sensor_Enable
  6502 ;;		_Sensor_Sampled_Reset
  6503 ;;		___bmul
  6504 ;; This function is called by:
  6505 ;;		_MTOUCH_Sensor_InitializeAll
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _MTOUCH_Sensor_Initialize
  6511  168F                     _MTOUCH_Sensor_Initialize:	
  6512                           
  6513                           ;incstack = 0
  6514                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6515                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6516  168F  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  6517                           
  6518                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  6519  1690  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6520  1691  3196  2655  3196   	fcall	_MTOUCH_Sensor_Enable
  6521                           
  6522                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  6523  1694  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6524  1695  3196  2643  3196   	fcall	_MTOUCH_Sensor_Calibrate
  6525                           
  6526                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  6527  1698  3009               	movlw	9
  6528  1699  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  6529  169A  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  6530  169B  00F1               	movwf	___bmul@multiplicand
  6531  169C  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6532  169D  3196  2610  3196   	fcall	___bmul
  6533  16A0  3E50               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6534  16A1  3195  2561         	fcall	_Sensor_Sampled_Reset
  6535  16A3  0008               	return
  6536  16A4                     __end_of_MTOUCH_Sensor_Initialize:	
  6537                           
  6538                           	psect	text21
  6539  1655                     __ptext21:	
  6540 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6541 ;; Defined at:
  6542 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  sensor          1    wreg     enum E2864
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  sensor          1    6[COMMON] enum E2864
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      void 
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6556 ;;      Params:         0       0       0       0       0       0       0       0
  6557 ;;      Locals:         1       0       0       0       0       0       0       0
  6558 ;;      Temps:          1       0       0       0       0       0       0       0
  6559 ;;      Totals:         2       0       0       0       0       0       0       0
  6560 ;;Total ram usage:        2 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    5
  6563 ;; This function calls:
  6564 ;;		___bmul
  6565 ;; This function is called by:
  6566 ;;		_MTOUCH_Sensor_Initialize
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _MTOUCH_Sensor_Enable
  6572  1655                     _MTOUCH_Sensor_Enable:	
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6576                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6577  1655  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  6578                           
  6579                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  6580  1656  3003               	movlw	3
  6581  1657  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  6582  1658  1803               	skipnc
  6583  1659  0008               	return
  6584                           
  6585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  6586  165A  3009               	movlw	9
  6587  165B  00F5               	movwf	??_MTOUCH_Sensor_Enable
  6588  165C  0875               	movf	??_MTOUCH_Sensor_Enable,w
  6589  165D  00F1               	movwf	___bmul@multiplicand
  6590  165E  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  6591  165F  3196  2610         	fcall	___bmul
  6592  1661  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  6593  1662  0086               	movwf	6
  6594  1663  3001               	movlw	1	; select bank2/3
  6595  1664  0087               	movwf	7
  6596  1665  1581               	bsf	1,3
  6597  1666  0008               	return
  6598  1667                     __end_of_MTOUCH_Sensor_Enable:	
  6599                           
  6600                           	psect	text22
  6601  17A9                     __ptext22:	
  6602 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6603 ;; Defined at:
  6604 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;		None
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  button          1    0[BANK0 ] enum E3069
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  1    wreg      void 
  6611 ;; Registers used:
  6612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6618 ;;      Params:         0       0       0       0       0       0       0       0
  6619 ;;      Locals:         0       1       0       0       0       0       0       0
  6620 ;;      Temps:          1       0       0       0       0       0       0       0
  6621 ;;      Totals:         1       1       0       0       0       0       0       0
  6622 ;;Total ram usage:        2 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    7
  6625 ;; This function calls:
  6626 ;;		_MTOUCH_Button_Initialize
  6627 ;;		_memcpy
  6628 ;; This function is called by:
  6629 ;;		_MTOUCH_Initialize
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function _MTOUCH_Button_InitializeAll
  6635  17A9                     _MTOUCH_Button_InitializeAll:	
  6636                           
  6637                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  6638                           
  6639                           ;incstack = 0
  6640                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6641  17A9  3000               	movlw	low (_mtouch_button_init| (0+32768))
  6642  17AA  00F1               	movwf	memcpy@s1
  6643  17AB  3090               	movlw	high (_mtouch_button_init| (0+32768))
  6644  17AC  00F2               	movwf	memcpy@s1+1
  6645  17AD  3030               	movlw	48
  6646  17AE  00F3               	movwf	memcpy@n
  6647  17AF  3000               	movlw	0
  6648  17B0  00F4               	movwf	memcpy@n+1
  6649  17B1  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  6650  17B2  3188  209B  3197   	fcall	_memcpy
  6651                           
  6652                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  6653  17B5  0020               	movlb	0	; select bank0
  6654  17B6  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  6655  17B7                     l5457:	
  6656                           
  6657                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  6658  17B7  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  6659  17B8  3189  21E6  3197   	fcall	_MTOUCH_Button_Initialize
  6660                           
  6661                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  6662  17BB  3001               	movlw	1
  6663  17BC  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  6664  17BD  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  6665  17BE  0020               	movlb	0	; select bank0
  6666  17BF  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  6667  17C0  3003               	movlw	3
  6668  17C1  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  6669  17C2  1803               	btfsc	3,0
  6670  17C3  0008               	return
  6671  17C4  2FB7               	goto	l5457
  6672  17C5                     __end_of_MTOUCH_Button_InitializeAll:	
  6673                           
  6674                           	psect	text23
  6675  089B                     __ptext23:	
  6676 ;; *************** function _memcpy *****************
  6677 ;; Defined at:
  6678 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  d1              1    wreg     PTR void 
  6681 ;;		 -> mtouch_button(48), 
  6682 ;;  s1              2    1[COMMON] PTR const void 
  6683 ;;		 -> mtouch_button_init(48), 
  6684 ;;  n               2    3[COMMON] unsigned int 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  d1              1    9[COMMON] PTR void 
  6687 ;;		 -> mtouch_button(48), 
  6688 ;;  s               2    7[COMMON] PTR const unsigned char 
  6689 ;;		 -> mtouch_button_init(48), 
  6690 ;;  d               1   10[COMMON] PTR unsigned char 
  6691 ;;		 -> mtouch_button(48), 
  6692 ;;  tmp             1    6[COMMON] unsigned char 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      PTR void 
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6702 ;;      Params:         4       0       0       0       0       0       0       0
  6703 ;;      Locals:         5       0       0       0       0       0       0       0
  6704 ;;      Temps:          1       0       0       0       0       0       0       0
  6705 ;;      Totals:        10       0       0       0       0       0       0       0
  6706 ;;Total ram usage:       10 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    4
  6709 ;; This function calls:
  6710 ;;		Nothing
  6711 ;; This function is called by:
  6712 ;;		_MTOUCH_Button_InitializeAll
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           
  6717                           ;psect for function _memcpy
  6718  089B                     _memcpy:	
  6719                           
  6720                           ;incstack = 0
  6721                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6722                           ;memcpy@d1 stored from wreg
  6723  089B  00F9               	movwf	memcpy@d1
  6724  089C  0872               	movf	memcpy@s1+1,w
  6725  089D  00F8               	movwf	memcpy@s+1
  6726  089E  0871               	movf	memcpy@s1,w
  6727  089F  00F7               	movwf	memcpy@s
  6728  08A0  0879               	movf	memcpy@d1,w
  6729  08A1  00F5               	movwf	??_memcpy
  6730  08A2  0875               	movf	??_memcpy,w
  6731  08A3  00FA               	movwf	memcpy@d
  6732  08A4                     l5325:	
  6733  08A4  3001               	movlw	1
  6734  08A5  02F3               	subwf	memcpy@n,f
  6735  08A6  3000               	movlw	0
  6736  08A7  3BF4               	subwfb	memcpy@n+1,f
  6737  08A8  0A73               	incf	memcpy@n,w
  6738  08A9  1903               	btfsc	3,2
  6739  08AA  0A74               	incf	memcpy@n+1,w
  6740  08AB  1903               	btfsc	3,2
  6741  08AC  0008               	return
  6742  08AD  0877               	movf	memcpy@s,w
  6743  08AE  0084               	movwf	4
  6744  08AF  0878               	movf	memcpy@s+1,w
  6745  08B0  0085               	movwf	5
  6746  08B1  0800               	movf	0,w	;code access
  6747  08B2  00F5               	movwf	??_memcpy
  6748  08B3  0875               	movf	??_memcpy,w
  6749  08B4  00F6               	movwf	memcpy@tmp
  6750  08B5  3001               	movlw	1
  6751  08B6  07F7               	addwf	memcpy@s,f
  6752  08B7  3000               	movlw	0
  6753  08B8  3DF8               	addwfc	memcpy@s+1,f
  6754  08B9  0876               	movf	memcpy@tmp,w
  6755  08BA  00F5               	movwf	??_memcpy
  6756  08BB  087A               	movf	memcpy@d,w
  6757  08BC  0086               	movwf	6
  6758  08BD  3001               	movlw	1	; select bank2/3
  6759  08BE  0087               	movwf	7
  6760  08BF  0875               	movf	??_memcpy,w
  6761  08C0  0081               	movwf	1
  6762  08C1  3001               	movlw	1
  6763  08C2  00F5               	movwf	??_memcpy
  6764  08C3  0875               	movf	??_memcpy,w
  6765  08C4  07FA               	addwf	memcpy@d,f
  6766  08C5  28A4               	goto	l5325
  6767  08C6                     __end_of_memcpy:	
  6768                           
  6769                           	psect	text24
  6770  1584                     __ptext24:	
  6771 ;; *************** function _EXT_INT_Initialize *****************
  6772 ;; Defined at:
  6773 ;;		line 74 in file "mcc_generated_files/ext_int.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0, pclath, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6787 ;;      Params:         0       0       0       0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0
  6790 ;;      Totals:         0       0       0       0       0       0       0       0
  6791 ;;Total ram usage:        0 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    5
  6794 ;; This function calls:
  6795 ;;		_INT_SetInterruptHandler
  6796 ;; This function is called by:
  6797 ;;		_SYSTEM_Initialize
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _EXT_INT_Initialize
  6803  1584                     _EXT_INT_Initialize:	
  6804                           
  6805                           ;mcc_generated_files/ext_int.c: 79:     (INTCONbits.INTF = 0);
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6809  1584  108B               	bcf	11,1	;volatile
  6810                           
  6811                           ;mcc_generated_files/ext_int.c: 80:     (OPTION_REGbits.INTEDG = 0);
  6812  1585  0021               	movlb	1	; select bank1
  6813  1586  1315               	bcf	21,6	;volatile
  6814                           
  6815                           ;mcc_generated_files/ext_int.c: 82:     INT_SetInterruptHandler(INT_DefaultInterruptHand
      +                          ler);
  6816  1587  30E2               	movlw	low _INT_DefaultInterruptHandler
  6817  1588  00F1               	movwf	INT_SetInterruptHandler@InterruptHandler
  6818  1589  3014               	movlw	high _INT_DefaultInterruptHandler
  6819  158A  00F2               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  6820  158B  3195  2531         	fcall	_INT_SetInterruptHandler
  6821                           
  6822                           ;mcc_generated_files/ext_int.c: 83:     (INTCONbits.INTE = 1);
  6823  158D  160B               	bsf	11,4	;volatile
  6824  158E  0008               	return
  6825  158F                     __end_of_EXT_INT_Initialize:	
  6826                           
  6827                           	psect	text25
  6828  1531                     __ptext25:	
  6829 ;; *************** function _INT_SetInterruptHandler *****************
  6830 ;; Defined at:
  6831 ;;		line 65 in file "mcc_generated_files/ext_int.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  6834 ;;		 -> INT_DefaultInterruptHandler(1), 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;		None
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  1    wreg      void 
  6839 ;; Registers used:
  6840 ;;		wreg
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6846 ;;      Params:         2       0       0       0       0       0       0       0
  6847 ;;      Locals:         0       0       0       0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0       0       0       0
  6849 ;;      Totals:         2       0       0       0       0       0       0       0
  6850 ;;Total ram usage:        2 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    4
  6853 ;; This function calls:
  6854 ;;		Nothing
  6855 ;; This function is called by:
  6856 ;;		_EXT_INT_Initialize
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           
  6861                           ;psect for function _INT_SetInterruptHandler
  6862  1531                     _INT_SetInterruptHandler:	
  6863                           
  6864                           ;mcc_generated_files/ext_int.c: 66:     INT_InterruptHandler = InterruptHandler;
  6865                           
  6866                           ;incstack = 0
  6867                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  6868  1531  0872               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  6869  1532  0021               	movlb	1	; select bank1
  6870  1533  00E1               	movwf	(_INT_InterruptHandler+1)^(0+128)
  6871  1534  0871               	movf	INT_SetInterruptHandler@InterruptHandler,w
  6872  1535  00E0               	movwf	_INT_InterruptHandler^(0+128)
  6873  1536  0008               	return
  6874  1537                     __end_of_INT_SetInterruptHandler:	
  6875                           
  6876                           	psect	text26
  6877  0921                     __ptext26:	
  6878 ;; *************** function _EUSART_Initialize *****************
  6879 ;; Defined at:
  6880 ;;		line 81 in file "mcc_generated_files/eusart.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;		None
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;		None
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      void 
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0, pclath, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6894 ;;      Params:         0       0       0       0       0       0       0       0
  6895 ;;      Locals:         0       0       0       0       0       0       0       0
  6896 ;;      Temps:          0       0       0       0       0       0       0       0
  6897 ;;      Totals:         0       0       0       0       0       0       0       0
  6898 ;;Total ram usage:        0 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    5
  6901 ;; This function calls:
  6902 ;;		_EUSART_SetErrorHandler
  6903 ;;		_EUSART_SetFramingErrorHandler
  6904 ;;		_EUSART_SetOverrunErrorHandler
  6905 ;;		_EUSART_SetRxInterruptHandler
  6906 ;; This function is called by:
  6907 ;;		_SYSTEM_Initialize
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function _EUSART_Initialize
  6913  0921                     _EUSART_Initialize:	
  6914                           
  6915                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  6916                           
  6917                           ;incstack = 0
  6918                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6919  0921  0021               	movlb	1	; select bank1
  6920  0922  1291               	bcf	17,5	;volatile
  6921                           
  6922                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6923  0923  307F               	movlw	low _EUSART_Receive_ISR
  6924  0924  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6925  0925  3009               	movlw	high _EUSART_Receive_ISR
  6926  0926  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6927  0927  3195  252B  3189   	fcall	_EUSART_SetRxInterruptHandler
  6928                           
  6929                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  6930  092A  3008               	movlw	8
  6931  092B  0023               	movlb	3	; select bank3
  6932  092C  009F               	movwf	31	;volatile
  6933                           
  6934                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x90;
  6935  092D  3090               	movlw	144
  6936  092E  009D               	movwf	29	;volatile
  6937                           
  6938                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0x24;
  6939  092F  3024               	movlw	36
  6940  0930  009E               	movwf	30	;volatile
  6941                           
  6942                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x40;
  6943  0931  3040               	movlw	64
  6944  0932  009B               	movwf	27	;volatile
  6945                           
  6946                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x03;
  6947  0933  3003               	movlw	3
  6948  0934  009C               	movwf	28	;volatile
  6949                           
  6950                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6951  0935  30E1               	movlw	low _EUSART_DefaultFramingErrorHandler
  6952  0936  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6953  0937  3014               	movlw	high _EUSART_DefaultFramingErrorHandler
  6954  0938  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6955  0939  3195  251F  3189   	fcall	_EUSART_SetFramingErrorHandler
  6956                           
  6957                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6958  093C  30F7               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6959  093D  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6960  093E  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6961  093F  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6962  0940  3195  2525  3189   	fcall	_EUSART_SetOverrunErrorHandler
  6963                           
  6964                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6965  0943  30E5               	movlw	low _EUSART_DefaultErrorHandler
  6966  0944  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6967  0945  3014               	movlw	high _EUSART_DefaultErrorHandler
  6968  0946  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6969  0947  3195  2519         	fcall	_EUSART_SetErrorHandler
  6970                           
  6971                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  6972  0949  0021               	movlb	1	; select bank1
  6973  094A  01CD               	clrf	_eusartRxLastError^(0+128)	;volatile
  6974                           
  6975                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  6976  094B  01FC               	clrf	_eusartRxHead	;volatile
  6977                           
  6978                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  6979  094C  01CF               	clrf	_eusartRxTail^(0+128)	;volatile
  6980                           
  6981                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  6982  094D  01CE               	clrf	_eusartRxCount^(0+128)	;volatile
  6983                           
  6984                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  6985  094E  1691               	bsf	17,5	;volatile
  6986  094F  0008               	return
  6987  0950                     __end_of_EUSART_Initialize:	
  6988                           
  6989                           	psect	text27
  6990  152B                     __ptext27:	
  6991 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6992 ;; Defined at:
  6993 ;;		line 241 in file "mcc_generated_files/eusart.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6996 ;;		 -> EUSART_Receive_ISR(1), 
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;		None
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  1    wreg      void 
  7001 ;; Registers used:
  7002 ;;		wreg
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7008 ;;      Params:         2       0       0       0       0       0       0       0
  7009 ;;      Locals:         0       0       0       0       0       0       0       0
  7010 ;;      Temps:          0       0       0       0       0       0       0       0
  7011 ;;      Totals:         2       0       0       0       0       0       0       0
  7012 ;;Total ram usage:        2 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    4
  7015 ;; This function calls:
  7016 ;;		Nothing
  7017 ;; This function is called by:
  7018 ;;		_EUSART_Initialize
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function _EUSART_SetRxInterruptHandler
  7024  152B                     _EUSART_SetRxInterruptHandler:	
  7025                           
  7026                           ;mcc_generated_files/eusart.c: 242:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7027                           
  7028                           ;incstack = 0
  7029                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7030  152B  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  7031  152C  0021               	movlb	1	; select bank1
  7032  152D  00E9               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  7033  152E  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  7034  152F  00E8               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  7035  1530  0008               	return
  7036  1531                     __end_of_EUSART_SetRxInterruptHandler:	
  7037                           
  7038                           	psect	text28
  7039  1525                     __ptext28:	
  7040 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7041 ;; Defined at:
  7042 ;;		line 232 in file "mcc_generated_files/eusart.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7045 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		wreg
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7057 ;;      Params:         2       0       0       0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0
  7060 ;;      Totals:         2       0       0       0       0       0       0       0
  7061 ;;Total ram usage:        2 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    4
  7064 ;; This function calls:
  7065 ;;		Nothing
  7066 ;; This function is called by:
  7067 ;;		_EUSART_Initialize
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           
  7072                           ;psect for function _EUSART_SetOverrunErrorHandler
  7073  1525                     _EUSART_SetOverrunErrorHandler:	
  7074                           
  7075                           ;mcc_generated_files/eusart.c: 233:     EUSART_OverrunErrorHandler = interruptHandler;
  7076                           
  7077                           ;incstack = 0
  7078                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7079  1525  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7080  1526  0021               	movlb	1	; select bank1
  7081  1527  00E5               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7082  1528  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7083  1529  00E4               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7084  152A  0008               	return
  7085  152B                     __end_of_EUSART_SetOverrunErrorHandler:	
  7086                           
  7087                           	psect	text29
  7088  151F                     __ptext29:	
  7089 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7090 ;; Defined at:
  7091 ;;		line 228 in file "mcc_generated_files/eusart.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7094 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;		None
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      void 
  7099 ;; Registers used:
  7100 ;;		wreg
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7106 ;;      Params:         2       0       0       0       0       0       0       0
  7107 ;;      Locals:         0       0       0       0       0       0       0       0
  7108 ;;      Temps:          0       0       0       0       0       0       0       0
  7109 ;;      Totals:         2       0       0       0       0       0       0       0
  7110 ;;Total ram usage:        2 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:    4
  7113 ;; This function calls:
  7114 ;;		Nothing
  7115 ;; This function is called by:
  7116 ;;		_EUSART_Initialize
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           
  7121                           ;psect for function _EUSART_SetFramingErrorHandler
  7122  151F                     _EUSART_SetFramingErrorHandler:	
  7123                           
  7124                           ;mcc_generated_files/eusart.c: 229:     EUSART_FramingErrorHandler = interruptHandler;
  7125                           
  7126                           ;incstack = 0
  7127                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7128  151F  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7129  1520  0021               	movlb	1	; select bank1
  7130  1521  00E7               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7131  1522  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7132  1523  00E6               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7133  1524  0008               	return
  7134  1525                     __end_of_EUSART_SetFramingErrorHandler:	
  7135                           
  7136                           	psect	text30
  7137  1519                     __ptext30:	
  7138 ;; *************** function _EUSART_SetErrorHandler *****************
  7139 ;; Defined at:
  7140 ;;		line 236 in file "mcc_generated_files/eusart.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7143 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      void 
  7148 ;; Registers used:
  7149 ;;		wreg
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7155 ;;      Params:         2       0       0       0       0       0       0       0
  7156 ;;      Locals:         0       0       0       0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0
  7158 ;;      Totals:         2       0       0       0       0       0       0       0
  7159 ;;Total ram usage:        2 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    4
  7162 ;; This function calls:
  7163 ;;		Nothing
  7164 ;; This function is called by:
  7165 ;;		_EUSART_Initialize
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           
  7170                           ;psect for function _EUSART_SetErrorHandler
  7171  1519                     _EUSART_SetErrorHandler:	
  7172                           
  7173                           ;mcc_generated_files/eusart.c: 237:     EUSART_ErrorHandler = interruptHandler;
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7177  1519  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7178  151A  0021               	movlb	1	; select bank1
  7179  151B  00E3               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7180  151C  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7181  151D  00E2               	movwf	_EUSART_ErrorHandler^(0+128)
  7182  151E  0008               	return
  7183  151F                     __end_of_EUSART_SetErrorHandler:	
  7184                           
  7185                           	psect	text31
  7186  17C5                     __ptext31:	
  7187 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7188 ;; Defined at:
  7189 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      _Bool 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7203 ;;      Params:         0       0       0       0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0
  7205 ;;      Temps:          0       1       0       0       0       0       0       0
  7206 ;;      Totals:         0       1       0       0       0       0       0       0
  7207 ;;Total ram usage:        1 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:   11
  7210 ;; This function calls:
  7211 ;;		_MTOUCH_Button_ServiceAll
  7212 ;;		_MTOUCH_Sensor_SampleAll
  7213 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7214 ;;		_MTOUCH_Tick
  7215 ;;		_MTOUCH_needReburst
  7216 ;; This function is called by:
  7217 ;;		_main
  7218 ;;		_touch_example
  7219 ;; This function uses a non-reentrant model
  7220 ;;
  7221                           
  7222                           
  7223                           ;psect for function _MTOUCH_Service_Mainloop
  7224  17C5                     _MTOUCH_Service_Mainloop:	
  7225                           
  7226                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  7227                           
  7228                           ;incstack = 0
  7229                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7230  17C5  0021               	movlb	1	; select bank1
  7231  17C6  01D2               	clrf	_mtouch_time_toScan^(0+128)
  7232  17C7  0AD2               	incf	_mtouch_time_toScan^(0+128),f
  7233                           
  7234                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  7235                           
  7236                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  7237  17C8  3196  26CF  3197   	fcall	_MTOUCH_Sensor_SampleAll
  7238  17CB  3A00               	xorlw	0
  7239  17CC  1D03               	skipz
  7240  17CD  2FD0               	goto	l5623
  7241                           
  7242                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  7243  17CE  3000               	movlw	0
  7244  17CF  0008               	return
  7245  17D0                     l5623:	
  7246                           
  7247                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  7248  17D0  3195  25F0  3197   	fcall	_MTOUCH_Button_ServiceAll
  7249                           
  7250                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7251  17D3  3180  2002  3197   	fcall	_MTOUCH_needReburst
  7252  17D6  0020               	movlb	0	; select bank0
  7253  17D7  00DB               	movwf	??_MTOUCH_Service_Mainloop
  7254  17D8  085B               	movf	??_MTOUCH_Service_Mainloop,w
  7255  17D9  0021               	movlb	1	; select bank1
  7256  17DA  00D2               	movwf	_mtouch_time_toScan^(0+128)
  7257                           
  7258                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  7259  17DB  3196  2667  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7260                           
  7261                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  7262  17DE  3194  24F4         	fcall	_MTOUCH_Tick
  7263                           
  7264                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  7265  17E0  3001               	movlw	1
  7266  17E1  0008               	return
  7267  17E2                     __end_of_MTOUCH_Service_Mainloop:	
  7268                           
  7269                           	psect	text32
  7270  0002                     __ptext32:	
  7271 ;; *************** function _MTOUCH_needReburst *****************
  7272 ;; Defined at:
  7273 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;		None
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;  needReburst     1    0        _Bool 
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  1    wreg      _Bool 
  7280 ;; Registers used:
  7281 ;;		wreg, status,2
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7287 ;;      Params:         0       0       0       0       0       0       0       0
  7288 ;;      Locals:         1       0       0       0       0       0       0       0
  7289 ;;      Temps:          0       0       0       0       0       0       0       0
  7290 ;;      Totals:         1       0       0       0       0       0       0       0
  7291 ;;Total ram usage:        1 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; Hardware stack levels required when called:    4
  7294 ;; This function calls:
  7295 ;;		Nothing
  7296 ;; This function is called by:
  7297 ;;		_MTOUCH_Service_Mainloop
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           
  7302                           ;psect for function _MTOUCH_needReburst
  7303  0002                     _MTOUCH_needReburst:	
  7304                           
  7305                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  7306                           
  7307                           ;incstack = 0
  7308                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7309  0002  3000               	movlw	0
  7310  0003  0008               	return
  7311  0004                     __end_of_MTOUCH_needReburst:	
  7312                           
  7313                           	psect	text33
  7314  14F4                     __ptext33:	
  7315 ;; *************** function _MTOUCH_Tick *****************
  7316 ;; Defined at:
  7317 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;		None
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;		None
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  1    wreg      void 
  7324 ;; Registers used:
  7325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7331 ;;      Params:         0       0       0       0       0       0       0       0
  7332 ;;      Locals:         0       0       0       0       0       0       0       0
  7333 ;;      Temps:          0       0       0       0       0       0       0       0
  7334 ;;      Totals:         0       0       0       0       0       0       0       0
  7335 ;;Total ram usage:        0 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:    6
  7338 ;; This function calls:
  7339 ;;		_MTOUCH_Button_Tick
  7340 ;; This function is called by:
  7341 ;;		_MTOUCH_Service_Mainloop
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           
  7346                           ;psect for function _MTOUCH_Tick
  7347  14F4                     _MTOUCH_Tick:	
  7348                           
  7349                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7353  14F4  3196  26E5         	fcall	_MTOUCH_Button_Tick
  7354  14F6  0008               	return
  7355  14F7                     __end_of_MTOUCH_Tick:	
  7356                           
  7357                           	psect	text34
  7358  16E5                     __ptext34:	
  7359 ;; *************** function _MTOUCH_Button_Tick *****************
  7360 ;; Defined at:
  7361 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;		None
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;  i               1    5[COMMON] unsigned char 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7375 ;;      Params:         0       0       0       0       0       0       0       0
  7376 ;;      Locals:         1       0       0       0       0       0       0       0
  7377 ;;      Temps:          1       0       0       0       0       0       0       0
  7378 ;;      Totals:         2       0       0       0       0       0       0       0
  7379 ;;Total ram usage:        2 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    5
  7382 ;; This function calls:
  7383 ;;		_Button_Tick_helper
  7384 ;; This function is called by:
  7385 ;;		_MTOUCH_Tick
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _MTOUCH_Button_Tick
  7391  16E5                     _MTOUCH_Button_Tick:	
  7392                           
  7393                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7397  16E5  01F5               	clrf	MTOUCH_Button_Tick@i
  7398  16E6                     l4185:	
  7399                           
  7400                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  7401  16E6  0875               	movf	MTOUCH_Button_Tick@i,w
  7402  16E7  00F4               	movwf	??_MTOUCH_Button_Tick
  7403  16E8  3003               	movlw	3
  7404  16E9                     u4055:	
  7405  16E9  35F4               	lslf	??_MTOUCH_Button_Tick,f
  7406  16EA  3EFF               	addlw	-1
  7407  16EB  1D03               	skipz
  7408  16EC  2EE9               	goto	u4055
  7409  16ED  3574               	lslf	??_MTOUCH_Button_Tick,w
  7410  16EE  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7411  16EF  3188  204C  3196   	fcall	_Button_Tick_helper
  7412                           
  7413                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  7414  16F2  3001               	movlw	1
  7415  16F3  00F4               	movwf	??_MTOUCH_Button_Tick
  7416  16F4  0874               	movf	??_MTOUCH_Button_Tick,w
  7417  16F5  07F5               	addwf	MTOUCH_Button_Tick@i,f
  7418  16F6  3003               	movlw	3
  7419  16F7  0275               	subwf	MTOUCH_Button_Tick@i,w
  7420  16F8  1803               	btfsc	3,0
  7421  16F9  0008               	return
  7422  16FA  2EE6               	goto	l4185
  7423  16FB                     __end_of_MTOUCH_Button_Tick:	
  7424                           
  7425                           	psect	text35
  7426  084C                     __ptext35:	
  7427 ;; *************** function _Button_Tick_helper *****************
  7428 ;; Defined at:
  7429 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  button          1    wreg     PTR struct .
  7432 ;;		 -> mtouch_button(48), 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;  button          1    3[COMMON] PTR struct .
  7435 ;;		 -> mtouch_button(48), 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  1    wreg      void 
  7438 ;; Registers used:
  7439 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7445 ;;      Params:         0       0       0       0       0       0       0       0
  7446 ;;      Locals:         1       0       0       0       0       0       0       0
  7447 ;;      Temps:          2       0       0       0       0       0       0       0
  7448 ;;      Totals:         3       0       0       0       0       0       0       0
  7449 ;;Total ram usage:        3 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    4
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_MTOUCH_Button_Tick
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _Button_Tick_helper
  7461  084C                     _Button_Tick_helper:	
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7465                           ;Button_Tick_helper@button stored from wreg
  7466  084C  00F3               	movwf	Button_Tick_helper@button
  7467                           
  7468                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7469  084D  0873               	movf	Button_Tick_helper@button,w
  7470  084E  3E02               	addlw	2
  7471  084F  0086               	movwf	6
  7472  0850  3001               	movlw	1	; select bank2/3
  7473  0851  0087               	movwf	7
  7474  0852  3002               	movlw	2
  7475  0853  0601               	xorwf	1,w
  7476  0854  1D03               	btfss	3,2
  7477  0855  0008               	return
  7478                           
  7479                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  7480  0856  0873               	movf	Button_Tick_helper@button,w
  7481  0857  3E0A               	addlw	10
  7482  0858  0086               	movwf	6
  7483  0859  3001               	movlw	1	; select bank2/3
  7484  085A  0087               	movwf	7
  7485  085B  3001               	movlw	1
  7486  085C  0781               	addwf	1,f
  7487  085D  3141               	addfsr 1,1
  7488  085E  1803               	skipnc
  7489  085F  0A81               	incf	1,f
  7490                           
  7491                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7492  0860  0873               	movf	Button_Tick_helper@button,w
  7493  0861  3E0A               	addlw	10
  7494  0862  0086               	movwf	6
  7495  0863  3001               	movlw	1	; select bank2/3
  7496  0864  0087               	movwf	7
  7497  0865  0016               	moviw fsr1++
  7498  0866  0401               	iorwf	1,w
  7499  0867  1D03               	btfss	3,2
  7500  0868  0008               	return
  7501                           
  7502                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7503  0869  0873               	movf	Button_Tick_helper@button,w
  7504  086A  3E0A               	addlw	10
  7505  086B  0086               	movwf	6
  7506  086C  3001               	movlw	1	; select bank2/3
  7507  086D  0087               	movwf	7
  7508  086E  30FF               	movlw	255
  7509  086F  3FC0               	movwi [0]fsr1
  7510  0870  30FF               	movlw	255
  7511  0871  3FC1               	movwi [1]fsr1
  7512  0872  0008               	return
  7513  0873                     __end_of_Button_Tick_helper:	
  7514                           
  7515                           	psect	text36
  7516  1667                     __ptext36:	
  7517 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7518 ;; Defined at:
  7519 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;		None
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  sensor          1    3[COMMON] PTR struct .
  7524 ;;		 -> mtouch_sensor(27), 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  1    wreg      void 
  7527 ;; Registers used:
  7528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7534 ;;      Params:         0       0       0       0       0       0       0       0
  7535 ;;      Locals:         1       0       0       0       0       0       0       0
  7536 ;;      Temps:          1       0       0       0       0       0       0       0
  7537 ;;      Totals:         2       0       0       0       0       0       0       0
  7538 ;;Total ram usage:        2 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:    5
  7541 ;; This function calls:
  7542 ;;		_Sensor_Sampled_Reset
  7543 ;; This function is called by:
  7544 ;;		_MTOUCH_Initialize
  7545 ;;		_MTOUCH_Service_Mainloop
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           
  7550                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7551  1667                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7552                           
  7553                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  7554                           
  7555                           ;incstack = 0
  7556                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7557  1667  3050               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7558  1668  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7559  1669  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7560  166A  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7561  166B                     L3:	
  7562  166B  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  7563  166C  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7564  166D  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7565  166E  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7566  166F  1C03               	btfss	3,0
  7567  1670  0008               	return
  7568                           
  7569                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  7570  1671  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7571  1672  3195  2561  3196   	fcall	_Sensor_Sampled_Reset
  7572                           
  7573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  7574  1675  3009               	movlw	9
  7575  1676  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7576  1677  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7577  1678  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7578  1679  2E6B               	goto	L3
  7579  167A                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7580                           
  7581                           	psect	text37
  7582  1561                     __ptext37:	
  7583 ;; *************** function _Sensor_Sampled_Reset *****************
  7584 ;; Defined at:
  7585 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  sensor          1    wreg     PTR struct .
  7588 ;;		 -> mtouch_sensor(27), 
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;  sensor          1    1[COMMON] PTR struct .
  7591 ;;		 -> mtouch_sensor(27), 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7601 ;;      Params:         0       0       0       0       0       0       0       0
  7602 ;;      Locals:         1       0       0       0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0       0
  7604 ;;      Totals:         1       0       0       0       0       0       0       0
  7605 ;;Total ram usage:        1 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    4
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_MTOUCH_Sensor_Initialize
  7612 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _Sensor_Sampled_Reset
  7618  1561                     _Sensor_Sampled_Reset:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7622                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7623  1561  00F1               	movwf	Sensor_Sampled_Reset@sensor
  7624                           
  7625                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  7626  1562  0871               	movf	Sensor_Sampled_Reset@sensor,w
  7627  1563  3E08               	addlw	8
  7628  1564  0086               	movwf	6
  7629  1565  3001               	movlw	1	; select bank2/3
  7630  1566  0087               	movwf	7
  7631  1567  1001               	bcf	1,0
  7632  1568  0008               	return
  7633  1569                     __end_of_Sensor_Sampled_Reset:	
  7634                           
  7635                           	psect	text38
  7636  16CF                     __ptext38:	
  7637 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  7638 ;; Defined at:
  7639 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  group           1   58[BANK0 ] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      _Bool 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7653 ;;      Params:         0       0       0       0       0       0       0       0
  7654 ;;      Locals:         0       1       0       0       0       0       0       0
  7655 ;;      Temps:          0       1       0       0       0       0       0       0
  7656 ;;      Totals:         0       2       0       0       0       0       0       0
  7657 ;;Total ram usage:        2 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:   10
  7660 ;; This function calls:
  7661 ;;		_Sensor_Service
  7662 ;; This function is called by:
  7663 ;;		_MTOUCH_Service_Mainloop
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           
  7668                           ;psect for function _MTOUCH_Sensor_SampleAll
  7669  16CF                     _MTOUCH_Sensor_SampleAll:	
  7670                           
  7671                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  7672                           
  7673                           ;incstack = 0
  7674                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7675  16CF  0020               	movlb	0	; select bank0
  7676  16D0  01DA               	clrf	MTOUCH_Sensor_SampleAll@group
  7677  16D1                     l5575:	
  7678                           
  7679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  7680  16D1  085A               	movf	MTOUCH_Sensor_SampleAll@group,w
  7681  16D2  318D  2587  3196   	fcall	_Sensor_Service
  7682  16D5  3A00               	xorlw	0
  7683  16D6  1903               	skipnz
  7684  16D7  2EDA               	goto	l5581
  7685                           
  7686                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  7687  16D8  3000               	movlw	0
  7688  16D9  0008               	return
  7689  16DA                     l5581:	
  7690                           
  7691                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  7692  16DA  3001               	movlw	1
  7693  16DB  0020               	movlb	0	; select bank0
  7694  16DC  00D9               	movwf	??_MTOUCH_Sensor_SampleAll
  7695  16DD  0859               	movf	??_MTOUCH_Sensor_SampleAll,w
  7696  16DE  07DA               	addwf	MTOUCH_Sensor_SampleAll@group,f
  7697  16DF  3002               	movlw	2
  7698  16E0  025A               	subwf	MTOUCH_Sensor_SampleAll@group,w
  7699  16E1  1C03               	skipc
  7700  16E2  2ED1               	goto	l5575
  7701                           
  7702                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  7703  16E3  3001               	movlw	1
  7704  16E4  0008               	return
  7705  16E5                     __end_of_MTOUCH_Sensor_SampleAll:	
  7706                           
  7707                           	psect	text39
  7708  0D87                     __ptext39:	
  7709 ;; *************** function _Sensor_Service *****************
  7710 ;; Defined at:
  7711 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  scanGroup       1    wreg     unsigned char 
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;  scanGroup       1   53[BANK0 ] unsigned char 
  7716 ;;  sensor_adc2     1   56[BANK0 ] PTR struct .
  7717 ;;		 -> mtouch_sensor(27), 
  7718 ;;  sensor_adc1     1   55[BANK0 ] PTR struct .
  7719 ;;		 -> NULL(0), mtouch_sensor(27), 
  7720 ;;  error           1   54[BANK0 ] enum E2868
  7721 ;; Return value:  Size  Location     Type
  7722 ;;                  1    wreg      enum E2868
  7723 ;; Registers used:
  7724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 0/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7730 ;;      Params:         0       0       0       0       0       0       0       0
  7731 ;;      Locals:         0       4       0       0       0       0       0       0
  7732 ;;      Temps:          0       3       0       0       0       0       0       0
  7733 ;;      Totals:         0       7       0       0       0       0       0       0
  7734 ;;Total ram usage:        7 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; Hardware stack levels required when called:    9
  7737 ;; This function calls:
  7738 ;;		_Sensor_Acquisition
  7739 ;;		_Sensor_DefaultCallback
  7740 ;;		_Sensor_RawSample_Update
  7741 ;;		_Sensor_isEnabled
  7742 ;;		_Sensor_setSampled
  7743 ;; This function is called by:
  7744 ;;		_MTOUCH_Sensor_SampleAll
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function _Sensor_Service
  7750  0D87                     _Sensor_Service:	
  7751                           
  7752                           ;incstack = 0
  7753                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7754                           ;Sensor_Service@scanGroup stored from wreg
  7755  0D87  0020               	movlb	0	; select bank0
  7756  0D88  00D5               	movwf	Sensor_Service@scanGroup
  7757                           
  7758                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  7759  0D89  0855               	movf	Sensor_Service@scanGroup,w
  7760  0D8A  00D2               	movwf	??_Sensor_Service
  7761  0D8B  01D3               	clrf	??_Sensor_Service+1
  7762  0D8C  35D2               	lslf	??_Sensor_Service,f
  7763  0D8D  0DD3               	rlf	??_Sensor_Service+1,f
  7764  0D8E  3058               	movlw	low (_sensor_scan_group| (0+32768))
  7765  0D8F  0752               	addwf	??_Sensor_Service,w
  7766  0D90  0084               	movwf	4
  7767  0D91  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7768  0D92  3D53               	addwfc	??_Sensor_Service+1,w
  7769  0D93  0085               	movwf	5
  7770  0D94  0800               	movf	0,w	;code access
  7771  0D95  00D4               	movwf	??_Sensor_Service+2
  7772  0D96  0854               	movf	??_Sensor_Service+2,w
  7773  0D97  00D7               	movwf	Sensor_Service@sensor_adc1
  7774                           
  7775                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  7776  0D98  0855               	movf	Sensor_Service@scanGroup,w
  7777  0D99  00D2               	movwf	??_Sensor_Service
  7778  0D9A  01D3               	clrf	??_Sensor_Service+1
  7779  0D9B  35D2               	lslf	??_Sensor_Service,f
  7780  0D9C  0DD3               	rlf	??_Sensor_Service+1,f
  7781  0D9D  3059               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7782  0D9E  0752               	addwf	??_Sensor_Service,w
  7783  0D9F  0084               	movwf	4
  7784  0DA0  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7785  0DA1  3D53               	addwfc	??_Sensor_Service+1,w
  7786  0DA2  0085               	movwf	5
  7787  0DA3  0800               	movf	0,w	;code access
  7788  0DA4  00D4               	movwf	??_Sensor_Service+2
  7789  0DA5  0854               	movf	??_Sensor_Service+2,w
  7790  0DA6  00D8               	movwf	Sensor_Service@sensor_adc2
  7791                           
  7792                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  7793  0DA7  0858               	movf	Sensor_Service@sensor_adc2,w
  7794  0DA8  00D2               	movwf	??_Sensor_Service
  7795  0DA9  0852               	movf	??_Sensor_Service,w
  7796  0DAA  00CE               	movwf	Sensor_Acquisition@sensor_adc2
  7797  0DAB  0857               	movf	Sensor_Service@sensor_adc1,w
  7798  0DAC  318B  234B  318D   	fcall	_Sensor_Acquisition
  7799  0DAF  0020               	movlb	0	; select bank0
  7800  0DB0  00D3               	movwf	??_Sensor_Service+1
  7801  0DB1  0853               	movf	??_Sensor_Service+1,w
  7802  0DB2  00D6               	movwf	Sensor_Service@error
  7803                           
  7804                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  7805  0DB3  2DF8               	goto	l5489
  7806  0DB4                     l5467:	
  7807                           
  7808                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  7809  0DB4  0857               	movf	Sensor_Service@sensor_adc1,w
  7810  0DB5  3196  2621  318D   	fcall	_Sensor_isEnabled
  7811  0DB8  3A00               	xorlw	0
  7812  0DB9  1903               	skipnz
  7813  0DBA  2DD5               	goto	l5477
  7814                           
  7815                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  7816  0DBB  0021               	movlb	1	; select bank1
  7817  0DBC  0851               	movf	_lowpowerActivated^(0+128),w
  7818  0DBD  1D03               	btfss	3,2
  7819  0DBE  2DC4               	goto	l5473
  7820                           
  7821                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  7822  0DBF  0020               	movlb	0	; select bank0
  7823  0DC0  0857               	movf	Sensor_Service@sensor_adc1,w
  7824  0DC1  3188  2073  318D   	fcall	_Sensor_RawSample_Update
  7825  0DC4                     l5473:	
  7826                           
  7827                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  7828  0DC4  0020               	movlb	0	; select bank0
  7829  0DC5  0857               	movf	Sensor_Service@sensor_adc1,w
  7830  0DC6  3195  2559  318D   	fcall	_Sensor_setSampled
  7831                           
  7832                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  7833  0DC9  0020               	movlb	0	; select bank0
  7834  0DCA  0857               	movf	Sensor_Service@sensor_adc1,w
  7835  0DCB  0086               	movwf	6
  7836  0DCC  3001               	movlw	1	; select bank2/3
  7837  0DCD  0087               	movwf	7
  7838  0DCE  0801               	movf	1,w
  7839  0DCF  00D2               	movwf	??_Sensor_Service
  7840  0DD0  0852               	movf	??_Sensor_Service,w
  7841  0DD1  00F1               	movwf	Sensor_DefaultCallback@sensor
  7842  0DD2  3194  24E4  318D   	fcall	_Sensor_DefaultCallback
  7843  0DD5                     l5477:	
  7844                           
  7845                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  7846  0DD5  0020               	movlb	0	; select bank0
  7847  0DD6  0858               	movf	Sensor_Service@sensor_adc2,w
  7848  0DD7  3196  2621  318D   	fcall	_Sensor_isEnabled
  7849  0DDA  3A00               	xorlw	0
  7850  0DDB  1903               	skipnz
  7851  0DDC  2E1B               	goto	l5491
  7852                           
  7853                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  7854  0DDD  0021               	movlb	1	; select bank1
  7855  0DDE  0851               	movf	_lowpowerActivated^(0+128),w
  7856  0DDF  1D03               	btfss	3,2
  7857  0DE0  2DE6               	goto	l5483
  7858                           
  7859                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  7860  0DE1  0020               	movlb	0	; select bank0
  7861  0DE2  0858               	movf	Sensor_Service@sensor_adc2,w
  7862  0DE3  3188  2073  318D   	fcall	_Sensor_RawSample_Update
  7863  0DE6                     l5483:	
  7864                           
  7865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  7866  0DE6  0020               	movlb	0	; select bank0
  7867  0DE7  0858               	movf	Sensor_Service@sensor_adc2,w
  7868  0DE8  3195  2559  318D   	fcall	_Sensor_setSampled
  7869                           
  7870                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  7871  0DEB  0020               	movlb	0	; select bank0
  7872  0DEC  0858               	movf	Sensor_Service@sensor_adc2,w
  7873  0DED  0086               	movwf	6
  7874  0DEE  3001               	movlw	1	; select bank2/3
  7875  0DEF  0087               	movwf	7
  7876  0DF0  0801               	movf	1,w
  7877  0DF1  00D2               	movwf	??_Sensor_Service
  7878  0DF2  0852               	movf	??_Sensor_Service,w
  7879  0DF3  00F1               	movwf	Sensor_DefaultCallback@sensor
  7880  0DF4  3194  24E4  318D   	fcall	_Sensor_DefaultCallback
  7881  0DF7  2E1B               	goto	l5491
  7882  0DF8                     l5489:	
  7883  0DF8  0856               	movf	Sensor_Service@error,w
  7884  0DF9  00D2               	movwf	??_Sensor_Service
  7885  0DFA  01D3               	clrf	??_Sensor_Service+1
  7886  0DFB  1BD2               	btfsc	??_Sensor_Service,7
  7887  0DFC  03D3               	decf	??_Sensor_Service+1,f
  7888                           
  7889                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7890                           ; Switch size 1, requested type "simple"
  7891                           ; Number of cases is 2, Range of values is 0 to 255
  7892                           ; switch strategies available:
  7893                           ; Name         Instructions Cycles
  7894                           ; simple_byte            7     4 (average)
  7895                           ; jumptable            260     6 (fixed)
  7896                           ;	Chosen strategy is simple_byte
  7897  0DFD  0853               	movf	??_Sensor_Service+1,w
  7898  0DFE  3A00               	xorlw	0	; case 0
  7899  0DFF  1903               	skipnz
  7900  0E00  2E05               	goto	l5901
  7901  0E01  3AFF               	xorlw	255	; case 255
  7902  0E02  1903               	skipnz
  7903  0E03  2E0A               	goto	l5903
  7904  0E04  2E1B               	goto	l5491
  7905  0E05                     l5901:	
  7906                           
  7907                           ; Switch size 1, requested type "simple"
  7908                           ; Number of cases is 1, Range of values is 0 to 0
  7909                           ; switch strategies available:
  7910                           ; Name         Instructions Cycles
  7911                           ; simple_byte            4     3 (average)
  7912                           ; direct_byte            8     6 (fixed)
  7913                           ; jumptable            260     6 (fixed)
  7914                           ;	Chosen strategy is simple_byte
  7915  0E05  0852               	movf	??_Sensor_Service,w
  7916  0E06  3A00               	xorlw	0	; case 0
  7917  0E07  1903               	skipnz
  7918  0E08  2DB4               	goto	l5467
  7919  0E09  2E1B               	goto	l5491
  7920  0E0A                     l5903:	
  7921                           
  7922                           ; Switch size 1, requested type "simple"
  7923                           ; Number of cases is 5, Range of values is 251 to 255
  7924                           ; switch strategies available:
  7925                           ; Name         Instructions Cycles
  7926                           ; direct_byte           15     5 (fixed)
  7927                           ; simple_byte           16     9 (average)
  7928                           ; jumptable            263     9 (fixed)
  7929                           ;	Chosen strategy is simple_byte
  7930  0E0A  0852               	movf	??_Sensor_Service,w
  7931  0E0B  3AFB               	xorlw	251	; case 251
  7932  0E0C  1903               	skipnz
  7933  0E0D  2E1B               	goto	l5491
  7934  0E0E  3A07               	xorlw	7	; case 252
  7935  0E0F  1903               	skipnz
  7936  0E10  2E1B               	goto	l5491
  7937  0E11  3A01               	xorlw	1	; case 253
  7938  0E12  1903               	skipnz
  7939  0E13  2E1B               	goto	l5491
  7940  0E14  3A03               	xorlw	3	; case 254
  7941  0E15  1903               	skipnz
  7942  0E16  2E1B               	goto	l5491
  7943  0E17  3A01               	xorlw	1	; case 255
  7944  0E18  1903               	skipnz
  7945  0E19  2E1B               	goto	l5491
  7946  0E1A  2E1B               	goto	l5491
  7947  0E1B                     l5491:	
  7948                           
  7949                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  7950  0E1B  0020               	movlb	0	; select bank0
  7951  0E1C  0856               	movf	Sensor_Service@error,w
  7952  0E1D  0008               	return
  7953  0E1E                     __end_of_Sensor_Service:	
  7954                           
  7955                           	psect	text40
  7956  1559                     __ptext40:	
  7957 ;; *************** function _Sensor_setSampled *****************
  7958 ;; Defined at:
  7959 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  sensor          1    wreg     PTR struct .
  7962 ;;		 -> NULL(0), mtouch_sensor(27), 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  sensor          1    1[COMMON] PTR struct .
  7965 ;;		 -> NULL(0), mtouch_sensor(27), 
  7966 ;; Return value:  Size  Location     Type
  7967 ;;                  1    wreg      void 
  7968 ;; Registers used:
  7969 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7970 ;; Tracked objects:
  7971 ;;		On entry : 0/0
  7972 ;;		On exit  : 0/0
  7973 ;;		Unchanged: 0/0
  7974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7975 ;;      Params:         0       0       0       0       0       0       0       0
  7976 ;;      Locals:         1       0       0       0       0       0       0       0
  7977 ;;      Temps:          0       0       0       0       0       0       0       0
  7978 ;;      Totals:         1       0       0       0       0       0       0       0
  7979 ;;Total ram usage:        1 bytes
  7980 ;; Hardware stack levels used:    1
  7981 ;; Hardware stack levels required when called:    4
  7982 ;; This function calls:
  7983 ;;		Nothing
  7984 ;; This function is called by:
  7985 ;;		_Sensor_Service
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           
  7990                           ;psect for function _Sensor_setSampled
  7991  1559                     _Sensor_setSampled:	
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  7995                           ;Sensor_setSampled@sensor stored from wreg
  7996  1559  00F1               	movwf	Sensor_setSampled@sensor
  7997                           
  7998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  7999  155A  0871               	movf	Sensor_setSampled@sensor,w
  8000  155B  3E08               	addlw	8
  8001  155C  0086               	movwf	6
  8002  155D  3001               	movlw	1	; select bank2/3
  8003  155E  0087               	movwf	7
  8004  155F  1401               	bsf	1,0
  8005  1560  0008               	return
  8006  1561                     __end_of_Sensor_setSampled:	
  8007                           
  8008                           	psect	text41
  8009  0873                     __ptext41:	
  8010 ;; *************** function _Sensor_RawSample_Update *****************
  8011 ;; Defined at:
  8012 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;  sensor          1    wreg     PTR struct .
  8015 ;;		 -> NULL(0), mtouch_sensor(27), 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  sensor          1    7[COMMON] PTR struct .
  8018 ;;		 -> NULL(0), mtouch_sensor(27), 
  8019 ;;  adcIndex        1    6[COMMON] unsigned char 
  8020 ;; Return value:  Size  Location     Type
  8021 ;;                  1    wreg      void 
  8022 ;; Registers used:
  8023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 0/0
  8026 ;;		On exit  : 0/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8029 ;;      Params:         0       0       0       0       0       0       0       0
  8030 ;;      Locals:         2       0       0       0       0       0       0       0
  8031 ;;      Temps:          1       0       0       0       0       0       0       0
  8032 ;;      Totals:         3       0       0       0       0       0       0       0
  8033 ;;Total ram usage:        3 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    5
  8036 ;; This function calls:
  8037 ;;		_Sensor_getScanGroupIndex
  8038 ;; This function is called by:
  8039 ;;		_Sensor_Service
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           
  8044                           ;psect for function _Sensor_RawSample_Update
  8045  0873                     _Sensor_RawSample_Update:	
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8049                           ;Sensor_RawSample_Update@sensor stored from wreg
  8050  0873  00F7               	movwf	Sensor_RawSample_Update@sensor
  8051                           
  8052                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  8053  0874  0877               	movf	Sensor_RawSample_Update@sensor,w
  8054  0875  3188  20C6  3188   	fcall	_Sensor_getScanGroupIndex
  8055  0878  00F5               	movwf	??_Sensor_RawSample_Update
  8056  0879  0875               	movf	??_Sensor_RawSample_Update,w
  8057  087A  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  8058                           
  8059                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  8060  087B  1F8B               	btfss	11,7	;volatile
  8061  087C  288D               	goto	l5297
  8062                           
  8063                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  8064  087D  138B               	bcf	11,7	;volatile
  8065                           
  8066                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  8067  087E  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8068  087F  3EB0               	addlw	(low (_packet_sample| 0))& (0+255)
  8069  0880  0086               	movwf	6
  8070  0881  0187               	clrf	7
  8071  0882  0877               	movf	Sensor_RawSample_Update@sensor,w
  8072  0883  3E06               	addlw	6
  8073  0884  0084               	movwf	4
  8074  0885  3001               	movlw	1	; select bank2/3
  8075  0886  0085               	movwf	5
  8076  0887  3F40               	moviw [0]fsr1
  8077  0888  3F80               	movwi [0]fsr0
  8078  0889  3F41               	moviw [1]fsr1
  8079  088A  3F81               	movwi [1]fsr0
  8080                           
  8081                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  8082  088B  178B               	bsf	11,7	;volatile
  8083                           
  8084                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  8085  088C  0008               	return
  8086  088D                     l5297:	
  8087                           
  8088                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  8089  088D  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8090  088E  3EB0               	addlw	(low (_packet_sample| 0))& (0+255)
  8091  088F  0086               	movwf	6
  8092  0890  0187               	clrf	7
  8093  0891  0877               	movf	Sensor_RawSample_Update@sensor,w
  8094  0892  3E06               	addlw	6
  8095  0893  0084               	movwf	4
  8096  0894  3001               	movlw	1	; select bank2/3
  8097  0895  0085               	movwf	5
  8098  0896  3F40               	moviw [0]fsr1
  8099  0897  3F80               	movwi [0]fsr0
  8100  0898  3F41               	moviw [1]fsr1
  8101  0899  3F81               	movwi [1]fsr0
  8102  089A  0008               	return
  8103  089B                     __end_of_Sensor_RawSample_Update:	
  8104                           
  8105                           	psect	text42
  8106  14E4                     __ptext42:	
  8107 ;; *************** function _Sensor_DefaultCallback *****************
  8108 ;; Defined at:
  8109 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  sensor          1    1[COMMON] enum E2864
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;		None
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  1    wreg      void 
  8116 ;; Registers used:
  8117 ;;		None
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8123 ;;      Params:         1       0       0       0       0       0       0       0
  8124 ;;      Locals:         0       0       0       0       0       0       0       0
  8125 ;;      Temps:          0       0       0       0       0       0       0       0
  8126 ;;      Totals:         1       0       0       0       0       0       0       0
  8127 ;;Total ram usage:        1 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    4
  8130 ;; This function calls:
  8131 ;;		Nothing
  8132 ;; This function is called by:
  8133 ;;		_Sensor_Service
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _Sensor_DefaultCallback
  8139  14E4                     _Sensor_DefaultCallback:	
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in _Sensor_DefaultCallback: []
  8143  14E4  0008               	return
  8144  14E5                     __end_of_Sensor_DefaultCallback:	
  8145                           
  8146                           	psect	text43
  8147  0B4B                     __ptext43:	
  8148 ;; *************** function _Sensor_Acquisition *****************
  8149 ;; Defined at:
  8150 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;  sensor_adc1     1    wreg     PTR struct .
  8153 ;;		 -> NULL(0), mtouch_sensor(27), 
  8154 ;;  sensor_adc2     1   46[BANK0 ] PTR struct .
  8155 ;;		 -> mtouch_sensor(27), 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  sensor_adc1     1   49[BANK0 ] PTR struct .
  8158 ;;		 -> NULL(0), mtouch_sensor(27), 
  8159 ;;  retry           1   48[BANK0 ] unsigned char 
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      enum E2868
  8162 ;; Registers used:
  8163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8169 ;;      Params:         0       1       0       0       0       0       0       0
  8170 ;;      Locals:         0       2       0       0       0       0       0       0
  8171 ;;      Temps:          0       1       0       0       0       0       0       0
  8172 ;;      Totals:         0       4       0       0       0       0       0       0
  8173 ;;Total ram usage:        4 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    8
  8176 ;; This function calls:
  8177 ;;		_Sensor_Acq_ExecutePacket
  8178 ;;		_Sensor_Scanfrequency_Evaluation
  8179 ;;		_Sensor_isActive
  8180 ;;		_Sensor_isCalibrated
  8181 ;;		_Sensor_postAcquisitionProcess
  8182 ;; This function is called by:
  8183 ;;		_Sensor_Service
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           
  8188                           ;psect for function _Sensor_Acquisition
  8189  0B4B                     _Sensor_Acquisition:	
  8190                           
  8191                           ;incstack = 0
  8192                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8193                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  8194  0B4B  0020               	movlb	0	; select bank0
  8195  0B4C  00D1               	movwf	Sensor_Acquisition@sensor_adc1
  8196                           
  8197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  8198  0B4D  3005               	movlw	5
  8199  0B4E  00CF               	movwf	??_Sensor_Acquisition
  8200  0B4F  084F               	movf	??_Sensor_Acquisition,w
  8201  0B50  00D0               	movwf	Sensor_Acquisition@retry
  8202                           
  8203                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  8204  0B51  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  8205  0B52  1D03               	btfss	3,2
  8206  0B53  2B61               	goto	l5261
  8207  0B54  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  8208  0B55  1D03               	btfss	3,2
  8209  0B56  2B61               	goto	l5261
  8210                           
  8211                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8212  0B57  30FF               	movlw	255
  8213  0B58  0008               	return
  8214  0B59                     l5255:	
  8215                           
  8216                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  8217  0B59  3001               	movlw	1
  8218  0B5A  0020               	movlb	0	; select bank0
  8219  0B5B  02D0               	subwf	Sensor_Acquisition@retry,f
  8220                           
  8221                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  8222  0B5C  0850               	movf	Sensor_Acquisition@retry,w
  8223  0B5D  1D03               	btfss	3,2
  8224  0B5E  2B61               	goto	l5261
  8225                           
  8226                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8227  0B5F  30FC               	movlw	252
  8228  0B60  0008               	return
  8229  0B61                     l5261:	
  8230                           
  8231                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8232  0B61  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  8233  0B62  00CF               	movwf	??_Sensor_Acquisition
  8234  0B63  084F               	movf	??_Sensor_Acquisition,w
  8235  0B64  00B2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8236  0B65  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  8237  0B66  3180  2053  318B   	fcall	_Sensor_Acq_ExecutePacket
  8238  0B69  3A00               	xorlw	0
  8239  0B6A  1D03               	skipz
  8240  0B6B  2B59               	goto	l5255
  8241                           
  8242                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  8243  0B6C  0020               	movlb	0	; select bank0
  8244  0B6D  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  8245  0B6E  1903               	btfsc	3,2
  8246  0B6F  2B74               	goto	l5267
  8247                           
  8248                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  8249  0B70  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  8250  0B71  318A  221C  318B   	fcall	_Sensor_postAcquisitionProcess
  8251  0B74                     l5267:	
  8252                           
  8253                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  8254  0B74  0020               	movlb	0	; select bank0
  8255  0B75  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  8256  0B76  1903               	btfsc	3,2
  8257  0B77  2B7C               	goto	l5271
  8258                           
  8259                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  8260  0B78  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  8261  0B79  318A  221C  318B   	fcall	_Sensor_postAcquisitionProcess
  8262  0B7C                     l5271:	
  8263                           
  8264                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8265  0B7C  0020               	movlb	0	; select bank0
  8266  0B7D  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  8267  0B7E  3195  25C4  318B   	fcall	_Sensor_isActive
  8268  0B81  3A00               	xorlw	0
  8269  0B82  1903               	skipnz
  8270  0B83  2B8C               	goto	l5275
  8271  0B84  0020               	movlb	0	; select bank0
  8272  0B85  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  8273  0B86  3195  257A  318B   	fcall	_Sensor_isCalibrated
  8274  0B89  3A00               	xorlw	0
  8275  0B8A  1D03               	skipz
  8276  0B8B  2B9C               	goto	l5279
  8277  0B8C                     l5275:	
  8278  0B8C  0020               	movlb	0	; select bank0
  8279  0B8D  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  8280  0B8E  3195  25C4  318B   	fcall	_Sensor_isActive
  8281  0B91  3A00               	xorlw	0
  8282  0B92  1903               	skipnz
  8283  0B93  2BA5               	goto	l5283
  8284  0B94  0020               	movlb	0	; select bank0
  8285  0B95  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  8286  0B96  3195  257A  318B   	fcall	_Sensor_isCalibrated
  8287  0B99  3A00               	xorlw	0
  8288  0B9A  1903               	skipnz
  8289  0B9B  2BA5               	goto	l5283
  8290  0B9C                     l5279:	
  8291                           
  8292                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8293  0B9C  0020               	movlb	0	; select bank0
  8294  0B9D  084E               	movf	Sensor_Acquisition@sensor_adc2,w
  8295  0B9E  00CF               	movwf	??_Sensor_Acquisition
  8296  0B9F  084F               	movf	??_Sensor_Acquisition,w
  8297  0BA0  00C1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8298  0BA1  0851               	movf	Sensor_Acquisition@sensor_adc1,w
  8299  0BA2  318F  275A         	fcall	_Sensor_Scanfrequency_Evaluation
  8300  0BA4  0008               	return
  8301  0BA5                     l5283:	
  8302                           
  8303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  8304  0BA5  3000               	movlw	0
  8305  0BA6  0008               	return
  8306  0BA7                     __end_of_Sensor_Acquisition:	
  8307                           
  8308                           	psect	text44
  8309  0A1C                     __ptext44:	
  8310 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8311 ;; Defined at:
  8312 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;  sensor          1    wreg     PTR struct .
  8315 ;;		 -> NULL(0), mtouch_sensor(27), 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  sensor          1   19[BANK0 ] PTR struct .
  8318 ;;		 -> NULL(0), mtouch_sensor(27), 
  8319 ;;  deviation       2   17[BANK0 ] unsigned short 
  8320 ;;  adcIndex        1   16[BANK0 ] unsigned char 
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  1    wreg      void 
  8323 ;; Registers used:
  8324 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8330 ;;      Params:         0       0       0       0       0       0       0       0
  8331 ;;      Locals:         0       4       0       0       0       0       0       0
  8332 ;;      Temps:          1       0       0       0       0       0       0       0
  8333 ;;      Totals:         1       4       0       0       0       0       0       0
  8334 ;;Total ram usage:        5 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    5
  8337 ;; This function calls:
  8338 ;;		_Sensor_getScanGroupIndex
  8339 ;;		_Sensor_isEnabled
  8340 ;;		_Sensor_setActive
  8341 ;;		_Sensor_setInactive
  8342 ;;		_abs
  8343 ;; This function is called by:
  8344 ;;		_Sensor_Acquisition
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           
  8349                           ;psect for function _Sensor_postAcquisitionProcess
  8350  0A1C                     _Sensor_postAcquisitionProcess:	
  8351                           
  8352                           ;incstack = 0
  8353                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8354                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8355  0A1C  0020               	movlb	0	; select bank0
  8356  0A1D  00B3               	movwf	Sensor_postAcquisitionProcess@sensor
  8357                           
  8358                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8359  0A1E  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  8360  0A1F  3188  20C6  318A   	fcall	_Sensor_getScanGroupIndex
  8361  0A22  00F8               	movwf	??_Sensor_postAcquisitionProcess
  8362  0A23  0878               	movf	??_Sensor_postAcquisitionProcess,w
  8363  0A24  0020               	movlb	0	; select bank0
  8364  0A25  00B0               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8365                           
  8366                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  8367  0A26  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  8368  0A27  3196  2621  318A   	fcall	_Sensor_isEnabled
  8369  0A2A  3A00               	xorlw	0
  8370  0A2B  1903               	skipnz
  8371  0A2C  2A47               	goto	l5145
  8372                           
  8373                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8374  0A2D  0020               	movlb	0	; select bank0
  8375  0A2E  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  8376  0A2F  3E06               	addlw	6
  8377  0A30  0086               	movwf	6
  8378  0A31  3001               	movlw	1	; select bank2/3
  8379  0A32  0087               	movwf	7
  8380  0A33  3530               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8381  0A34  3EB0               	addlw	(low (_packet_sample| 0))& (0+255)
  8382  0A35  0084               	movwf	4
  8383  0A36  0185               	clrf	5
  8384  0A37  3F40               	moviw [0]fsr1
  8385  0A38  0200               	subwf	0,w
  8386  0A39  00F4               	movwf	abs@a
  8387  0A3A  3101               	addfsr 0,1
  8388  0A3B  3F41               	moviw [1]fsr1
  8389  0A3C  3B00               	subwfb	0,w
  8390  0A3D  00F5               	movwf	abs@a+1
  8391  0A3E  3197  2712  318A   	fcall	_abs
  8392  0A41  0875               	movf	?_abs+1,w
  8393  0A42  0020               	movlb	0	; select bank0
  8394  0A43  00B2               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8395  0A44  0874               	movf	?_abs,w
  8396  0A45  00B1               	movwf	Sensor_postAcquisitionProcess@deviation
  8397  0A46  2A4A               	goto	l5147
  8398  0A47                     l5145:	
  8399                           
  8400                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  8401  0A47  0020               	movlb	0	; select bank0
  8402  0A48  01B1               	clrf	Sensor_postAcquisitionProcess@deviation
  8403  0A49  01B2               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8404  0A4A                     l5147:	
  8405                           
  8406                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  8407  0A4A  3000               	movlw	0
  8408  0A4B  0232               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8409  0A4C  3065               	movlw	101
  8410  0A4D  1903               	skipnz
  8411  0A4E  0231               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8412  0A4F  1C03               	skipc
  8413  0A50  2A55               	goto	l5151
  8414                           
  8415                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  8416  0A51  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  8417  0A52  3195  2549         	fcall	_Sensor_setActive
  8418  0A54  0008               	return
  8419  0A55                     l5151:	
  8420                           
  8421                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  8422  0A55  0833               	movf	Sensor_postAcquisitionProcess@sensor,w
  8423  0A56  3195  2551         	fcall	_Sensor_setInactive
  8424  0A58  0008               	return
  8425  0A59                     __end_of_Sensor_postAcquisitionProcess:	
  8426                           
  8427                           	psect	text45
  8428  1551                     __ptext45:	
  8429 ;; *************** function _Sensor_setInactive *****************
  8430 ;; Defined at:
  8431 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;  sensor          1    wreg     PTR struct .
  8434 ;;		 -> NULL(0), mtouch_sensor(27), 
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  sensor          1    1[COMMON] PTR struct .
  8437 ;;		 -> NULL(0), mtouch_sensor(27), 
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  1    wreg      void 
  8440 ;; Registers used:
  8441 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8447 ;;      Params:         0       0       0       0       0       0       0       0
  8448 ;;      Locals:         1       0       0       0       0       0       0       0
  8449 ;;      Temps:          0       0       0       0       0       0       0       0
  8450 ;;      Totals:         1       0       0       0       0       0       0       0
  8451 ;;Total ram usage:        1 bytes
  8452 ;; Hardware stack levels used:    1
  8453 ;; Hardware stack levels required when called:    4
  8454 ;; This function calls:
  8455 ;;		Nothing
  8456 ;; This function is called by:
  8457 ;;		_Sensor_postAcquisitionProcess
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           
  8462                           ;psect for function _Sensor_setInactive
  8463  1551                     _Sensor_setInactive:	
  8464                           
  8465                           ;incstack = 0
  8466                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8467                           ;Sensor_setInactive@sensor stored from wreg
  8468  1551  00F1               	movwf	Sensor_setInactive@sensor
  8469                           
  8470                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  8471  1552  0871               	movf	Sensor_setInactive@sensor,w
  8472  1553  3E08               	addlw	8
  8473  1554  0086               	movwf	6
  8474  1555  3001               	movlw	1	; select bank2/3
  8475  1556  0087               	movwf	7
  8476  1557  1081               	bcf	1,1
  8477  1558  0008               	return
  8478  1559                     __end_of_Sensor_setInactive:	
  8479                           
  8480                           	psect	text46
  8481  1549                     __ptext46:	
  8482 ;; *************** function _Sensor_setActive *****************
  8483 ;; Defined at:
  8484 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  sensor          1    wreg     PTR struct .
  8487 ;;		 -> NULL(0), mtouch_sensor(27), 
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;  sensor          1    1[COMMON] PTR struct .
  8490 ;;		 -> NULL(0), mtouch_sensor(27), 
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  1    wreg      void 
  8493 ;; Registers used:
  8494 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8500 ;;      Params:         0       0       0       0       0       0       0       0
  8501 ;;      Locals:         1       0       0       0       0       0       0       0
  8502 ;;      Temps:          0       0       0       0       0       0       0       0
  8503 ;;      Totals:         1       0       0       0       0       0       0       0
  8504 ;;Total ram usage:        1 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    4
  8507 ;; This function calls:
  8508 ;;		Nothing
  8509 ;; This function is called by:
  8510 ;;		_Sensor_postAcquisitionProcess
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           
  8515                           ;psect for function _Sensor_setActive
  8516  1549                     _Sensor_setActive:	
  8517                           
  8518                           ;incstack = 0
  8519                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8520                           ;Sensor_setActive@sensor stored from wreg
  8521  1549  00F1               	movwf	Sensor_setActive@sensor
  8522                           
  8523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  8524  154A  0871               	movf	Sensor_setActive@sensor,w
  8525  154B  3E08               	addlw	8
  8526  154C  0086               	movwf	6
  8527  154D  3001               	movlw	1	; select bank2/3
  8528  154E  0087               	movwf	7
  8529  154F  1481               	bsf	1,1
  8530  1550  0008               	return
  8531  1551                     __end_of_Sensor_setActive:	
  8532                           
  8533                           	psect	text47
  8534  0F5A                     __ptext47:	
  8535 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8536 ;; Defined at:
  8537 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  sensor_adc1     1    wreg     PTR struct .
  8540 ;;		 -> NULL(0), mtouch_sensor(27), 
  8541 ;;  sensor_adc2     1   33[BANK0 ] PTR struct .
  8542 ;;		 -> mtouch_sensor(27), 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  8545 ;;		 -> NULL(0), mtouch_sensor(27), 
  8546 ;;  best_packet_    4   41[BANK0 ] unsigned short [2]
  8547 ;;  packet_noise    2   37[BANK0 ] unsigned short 
  8548 ;;  i               1   45[BANK0 ] unsigned char 
  8549 ;;  retry           1   40[BANK0 ] unsigned char 
  8550 ;;  best_sample_    1   39[BANK0 ] unsigned char 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      enum E2868
  8553 ;; Registers used:
  8554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8560 ;;      Params:         0       1       0       0       0       0       0       0
  8561 ;;      Locals:         0      10       0       0       0       0       0       0
  8562 ;;      Temps:          0       2       0       0       0       0       0       0
  8563 ;;      Totals:         0      13       0       0       0       0       0       0
  8564 ;;Total ram usage:       13 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    7
  8567 ;; This function calls:
  8568 ;;		_Sensor_Acq_ExecutePacket
  8569 ;; This function is called by:
  8570 ;;		_Sensor_Acquisition
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8576  0F5A                     _Sensor_Scanfrequency_Evaluation:	
  8577                           
  8578                           ;incstack = 0
  8579                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8580                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8581  0F5A  0020               	movlb	0	; select bank0
  8582  0F5B  00C4               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8583                           
  8584                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  8585  0F5C  0021               	movlb	1	; select bank1
  8586  0F5D  0845               	movf	(_packet_noise+1)^(0+128),w
  8587  0F5E  0020               	movlb	0	; select bank0
  8588  0F5F  00C3               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8589  0F60  0021               	movlb	1	; select bank1
  8590  0F61  0844               	movf	_packet_noise^(0+128),w
  8591  0F62  0020               	movlb	0	; select bank0
  8592  0F63  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8593  0F64  36C3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8594  0F65  0CC2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8595  0F66  36C3               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8596  0F67  0CC2               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8597  0F68  0021               	movlb	1	; select bank1
  8598  0F69  0844               	movf	_packet_noise^(0+128),w
  8599  0F6A  0020               	movlb	0	; select bank0
  8600  0F6B  0742               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8601  0F6C  00C5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8602  0F6D  0021               	movlb	1	; select bank1
  8603  0F6E  0845               	movf	(_packet_noise+1)^(0+128),w
  8604  0F6F  0020               	movlb	0	; select bank0
  8605  0F70  3D43               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8606  0F71  00C6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8607                           
  8608                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  8609  0F72  0021               	movlb	1	; select bank1
  8610  0F73  085F               	movf	_sample_period^(0+128),w
  8611  0F74  0020               	movlb	0	; select bank0
  8612  0F75  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8613  0F76  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8614  0F77  00C7               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8615                           
  8616                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8617  0F78  0021               	movlb	1	; select bank1
  8618  0F79  0831               	movf	(_packet_sample+1)^(0+128),w
  8619  0F7A  0020               	movlb	0	; select bank0
  8620  0F7B  00CA               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8621  0F7C  0021               	movlb	1	; select bank1
  8622  0F7D  0830               	movf	_packet_sample^(0+128),w
  8623  0F7E  0020               	movlb	0	; select bank0
  8624  0F7F  00C9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8625                           
  8626                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  8627  0F80  0021               	movlb	1	; select bank1
  8628  0F81  0833               	movf	((_packet_sample+1)^(0+128)+2),w
  8629  0F82  0020               	movlb	0	; select bank0
  8630  0F83  00CC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8631  0F84  0021               	movlb	1	; select bank1
  8632  0F85  0832               	movf	(_packet_sample^(0+128)+2),w
  8633  0F86  0020               	movlb	0	; select bank0
  8634  0F87  00CB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8635                           
  8636                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  8637  0F88  01CD               	clrf	Sensor_Scanfrequency_Evaluation@i
  8638  0F89                     l5167:	
  8639                           
  8640                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  8641  0F89  084D               	movf	Sensor_Scanfrequency_Evaluation@i,w
  8642  0F8A  3E53               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8643  0F8B  0084               	movwf	4
  8644  0F8C  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8645  0F8D  1803               	skipnc
  8646  0F8E  3E01               	addlw	1
  8647  0F8F  0085               	movwf	5
  8648  0F90  0800               	movf	0,w	;code access
  8649  0F91  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8650  0F92  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8651  0F93  0021               	movlb	1	; select bank1
  8652  0F94  07DF               	addwf	_sample_period^(0+128),f
  8653                           
  8654                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  8655  0F95  30AE               	movlw	174
  8656  0F96  025F               	subwf	_sample_period^(0+128),w
  8657  0F97  1803               	skipnc
  8658  0F98  2F9F               	goto	l5175
  8659                           
  8660                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  8661  0F99  30AE               	movlw	174
  8662  0F9A  0020               	movlb	0	; select bank0
  8663  0F9B  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8664  0F9C  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8665  0F9D  0021               	movlb	1	; select bank1
  8666  0F9E  07DF               	addwf	_sample_period^(0+128),f
  8667  0F9F                     l5175:	
  8668                           
  8669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  8670  0F9F  3005               	movlw	5
  8671  0FA0  0020               	movlb	0	; select bank0
  8672  0FA1  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8673  0FA2  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8674  0FA3  00C8               	movwf	Sensor_Scanfrequency_Evaluation@retry
  8675  0FA4                     l5183:	
  8676                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8677                           
  8678                           
  8679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8680  0FA4  0841               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  8681  0FA5  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8682  0FA6  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8683  0FA7  00B2               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8684  0FA8  0844               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  8685  0FA9  3180  2053  318F   	fcall	_Sensor_Acq_ExecutePacket
  8686  0FAC  3A00               	xorlw	0
  8687  0FAD  1903               	btfsc	3,2
  8688  0FAE  2FB7               	goto	l5185
  8689                           
  8690                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  8691  0FAF  3001               	movlw	1
  8692  0FB0  0020               	movlb	0	; select bank0
  8693  0FB1  02C8               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  8694                           
  8695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  8696  0FB2  0848               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  8697  0FB3  1D03               	btfss	3,2
  8698  0FB4  2FA4               	goto	l5183
  8699                           
  8700                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8701  0FB5  30FC               	movlw	252
  8702  0FB6  0008               	return
  8703  0FB7                     l5185:	
  8704                           
  8705                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  8706  0FB7  0021               	movlb	1	; select bank1
  8707  0FB8  0845               	movf	(_packet_noise+1)^(0+128),w
  8708  0FB9  0020               	movlb	0	; select bank0
  8709  0FBA  0246               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  8710  0FBB  1D03               	skipz
  8711  0FBC  2FC1               	goto	u5405
  8712  0FBD  0021               	movlb	1	; select bank1
  8713  0FBE  0844               	movf	_packet_noise^(0+128),w
  8714  0FBF  0020               	movlb	0	; select bank0
  8715  0FC0  0245               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  8716  0FC1                     u5405:	
  8717  0FC1  1803               	skipnc
  8718  0FC2  2FE1               	goto	l5189
  8719                           
  8720                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  8721  0FC3  0021               	movlb	1	; select bank1
  8722  0FC4  0845               	movf	(_packet_noise+1)^(0+128),w
  8723  0FC5  0020               	movlb	0	; select bank0
  8724  0FC6  00C6               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8725  0FC7  0021               	movlb	1	; select bank1
  8726  0FC8  0844               	movf	_packet_noise^(0+128),w
  8727  0FC9  0020               	movlb	0	; select bank0
  8728  0FCA  00C5               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8729                           
  8730                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  8731  0FCB  0021               	movlb	1	; select bank1
  8732  0FCC  085F               	movf	_sample_period^(0+128),w
  8733  0FCD  0020               	movlb	0	; select bank0
  8734  0FCE  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8735  0FCF  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8736  0FD0  00C7               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8737                           
  8738                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  8739  0FD1  0021               	movlb	1	; select bank1
  8740  0FD2  0831               	movf	(_packet_sample+1)^(0+128),w
  8741  0FD3  0020               	movlb	0	; select bank0
  8742  0FD4  00CA               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8743  0FD5  0021               	movlb	1	; select bank1
  8744  0FD6  0830               	movf	_packet_sample^(0+128),w
  8745  0FD7  0020               	movlb	0	; select bank0
  8746  0FD8  00C9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8747                           
  8748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  8749  0FD9  0021               	movlb	1	; select bank1
  8750  0FDA  0833               	movf	((_packet_sample+1)^(0+128)+2),w
  8751  0FDB  0020               	movlb	0	; select bank0
  8752  0FDC  00CC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8753  0FDD  0021               	movlb	1	; select bank1
  8754  0FDE  0832               	movf	(_packet_sample^(0+128)+2),w
  8755  0FDF  0020               	movlb	0	; select bank0
  8756  0FE0  00CB               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8757  0FE1                     l5189:	
  8758                           
  8759                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  8760  0FE1  3001               	movlw	1
  8761  0FE2  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8762  0FE3  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8763  0FE4  07CD               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  8764  0FE5  3005               	movlw	5
  8765  0FE6  024D               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  8766  0FE7  1C03               	skipc
  8767  0FE8  2F89               	goto	l5167
  8768                           
  8769                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  8770  0FE9  0847               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  8771  0FEA  00C2               	movwf	??_Sensor_Scanfrequency_Evaluation
  8772  0FEB  0842               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8773  0FEC  0021               	movlb	1	; select bank1
  8774  0FED  00DF               	movwf	_sample_period^(0+128)
  8775                           
  8776                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  8777  0FEE  0020               	movlb	0	; select bank0
  8778  0FEF  084A               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  8779  0FF0  0021               	movlb	1	; select bank1
  8780  0FF1  00B1               	movwf	(_packet_sample+1)^(0+128)
  8781  0FF2  0020               	movlb	0	; select bank0
  8782  0FF3  0849               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  8783  0FF4  0021               	movlb	1	; select bank1
  8784  0FF5  00B0               	movwf	_packet_sample^(0+128)
  8785                           
  8786                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  8787  0FF6  0020               	movlb	0	; select bank0
  8788  0FF7  084C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  8789  0FF8  0021               	movlb	1	; select bank1
  8790  0FF9  00B3               	movwf	((_packet_sample+1)^(0+128)+2)
  8791  0FFA  0020               	movlb	0	; select bank0
  8792  0FFB  084B               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  8793  0FFC  0021               	movlb	1	; select bank1
  8794  0FFD  00B2               	movwf	(_packet_sample^(0+128)+2)
  8795                           
  8796                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  8797  0FFE  3000               	movlw	0
  8798  0FFF  0008               	return
  8799  1000                     __end_of_Sensor_Scanfrequency_Evaluation:	
  8800                           
  8801                           	psect	text48
  8802  0053                     __ptext48:	
  8803 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8804 ;; Defined at:
  8805 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  sensor_adc1     1    wreg     PTR struct .
  8808 ;;		 -> NULL(0), mtouch_sensor(27), 
  8809 ;;  sensor_adc2     1   18[BANK0 ] PTR struct .
  8810 ;;		 -> mtouch_sensor(27), 
  8811 ;; Auto vars:     Size  Location     Type
  8812 ;;  sensor_adc1     1   32[BANK0 ] PTR struct .
  8813 ;;		 -> NULL(0), mtouch_sensor(27), 
  8814 ;;  last_b          2   29[BANK0 ] unsigned short 
  8815 ;;  last_a          2   27[BANK0 ] unsigned short 
  8816 ;;  packet_count    1   31[BANK0 ] unsigned char 
  8817 ;;  activeSensor    1   26[BANK0 ] unsigned char 
  8818 ;;  ADxIF_flag      1   25[BANK0 ] unsigned char 
  8819 ;;  sensor2Force    1   24[BANK0 ] unsigned char 
  8820 ;;  sensor1Force    1   23[BANK0 ] unsigned char 
  8821 ;;  AD2CON2_temp    1   22[BANK0 ] unsigned char 
  8822 ;;  AD1CON2_temp    1   21[BANK0 ] unsigned char 
  8823 ;;  ADCOMCON_tem    1   20[BANK0 ] unsigned char 
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  1    wreg      enum E2868
  8826 ;; Registers used:
  8827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8833 ;;      Params:         0       1       0       0       0       0       0       0
  8834 ;;      Locals:         0      13       0       0       0       0       0       0
  8835 ;;      Temps:          0       1       0       0       0       0       0       0
  8836 ;;      Totals:         0      15       0       0       0       0       0       0
  8837 ;;Total ram usage:       15 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    6
  8840 ;; This function calls:
  8841 ;;		_MTOUCH_Sensor_Scan_Initialize
  8842 ;;		_Sensor_autoCalibration
  8843 ;;		_Sensor_isActive
  8844 ;;		_Sensor_isCalibrated
  8845 ;;		_Sensor_isEnabled
  8846 ;;		_Sensor_loadADCSettings
  8847 ;;		_TMR2_LoadPeriodRegister
  8848 ;;		_TMR2_StartTimer
  8849 ;;		_TMR2_StopTimer
  8850 ;;		_abs
  8851 ;; This function is called by:
  8852 ;;		_Sensor_Acquisition
  8853 ;;		_Sensor_Scanfrequency_Evaluation
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           
  8858                           ;psect for function _Sensor_Acq_ExecutePacket
  8859  0053                     _Sensor_Acq_ExecutePacket:	
  8860                           
  8861                           ;incstack = 0
  8862                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8863                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  8864  0053  0020               	movlb	0	; select bank0
  8865  0054  00C0               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  8866                           
  8867                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  8868  0055  01BB               	clrf	Sensor_Acq_ExecutePacket@last_a
  8869  0056  01BC               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  8870                           
  8871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  8872  0057  01BD               	clrf	Sensor_Acq_ExecutePacket@last_b
  8873  0058  01BE               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  8874                           
  8875                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  8876  0059  01BA               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8877                           
  8878                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  8879  005A  01B7               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8880  005B  01B8               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8881                           
  8882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  8883  005C  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8884  005D  1903               	btfsc	3,2
  8885  005E  2899               	goto	l4949
  8886  005F  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8887  0060  1903               	btfsc	3,2
  8888  0061  2899               	goto	l4949
  8889                           
  8890                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  8891  0062  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8892  0063  3E08               	addlw	8
  8893  0064  0086               	movwf	6
  8894  0065  3001               	movlw	1	; select bank2/3
  8895  0066  0087               	movwf	7
  8896  0067  1981               	btfsc	1,3
  8897  0068  2879               	goto	l4931
  8898  0069  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8899  006A  3E08               	addlw	8
  8900  006B  0086               	movwf	6
  8901  006C  3001               	movlw	1	; select bank2/3
  8902  006D  0087               	movwf	7
  8903  006E  1D81               	btfss	1,3
  8904  006F  2879               	goto	l4931
  8905                           
  8906                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  8907  0070  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8908  0071  3E08               	addlw	8
  8909  0072  0086               	movwf	6
  8910  0073  3001               	movlw	1	; select bank2/3
  8911  0074  0087               	movwf	7
  8912  0075  1581               	bsf	1,3
  8913                           
  8914                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  8915  0076  01B7               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8916  0077  0AB7               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  8917                           
  8918                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  8919  0078  28AE               	goto	l4973
  8920  0079                     l4931:	
  8921  0079  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8922  007A  3E08               	addlw	8
  8923  007B  0086               	movwf	6
  8924  007C  3001               	movlw	1	; select bank2/3
  8925  007D  0087               	movwf	7
  8926  007E  1981               	btfsc	1,3
  8927  007F  2890               	goto	l4939
  8928  0080  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8929  0081  3E08               	addlw	8
  8930  0082  0086               	movwf	6
  8931  0083  3001               	movlw	1	; select bank2/3
  8932  0084  0087               	movwf	7
  8933  0085  1D81               	btfss	1,3
  8934  0086  2890               	goto	l4939
  8935                           
  8936                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  8937  0087  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8938  0088  3E08               	addlw	8
  8939  0089  0086               	movwf	6
  8940  008A  3001               	movlw	1	; select bank2/3
  8941  008B  0087               	movwf	7
  8942  008C  1581               	bsf	1,3
  8943                           
  8944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  8945  008D  01B8               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8946  008E  0AB8               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  8947                           
  8948                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  8949  008F  28AE               	goto	l4973
  8950  0090                     l4939:	
  8951  0090  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8952  0091  3E08               	addlw	8
  8953  0092  0086               	movwf	6
  8954  0093  3001               	movlw	1	; select bank2/3
  8955  0094  0087               	movwf	7
  8956  0095  1981               	btfsc	1,3
  8957  0096  28AE               	goto	l4973
  8958  0097                     l4941:	
  8959  0097  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8960  0098  28A6               	goto	L5
  8961  0099                     l4949:	
  8962                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  8963                           
  8964  0099  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8965  009A  1D03               	btfss	3,2
  8966  009B  289F               	goto	l4961
  8967  009C  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8968  009D  1D03               	btfss	3,2
  8969  009E  2897               	goto	l4941
  8970  009F                     l4961:	
  8971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  8972                           
  8973  009F  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8974  00A0  1903               	btfsc	3,2
  8975  00A1  28AE               	goto	l4973
  8976  00A2  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8977  00A3  1D03               	btfss	3,2
  8978  00A4  28AE               	goto	l4973
  8979                           
  8980                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  8981  00A5  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8982  00A6                     L5:	
  8983  00A6  3E08               	addlw	8
  8984  00A7  0086               	movwf	6
  8985  00A8  3001               	movlw	1	; select bank2/3
  8986  00A9  0087               	movwf	7
  8987  00AA  1981               	btfsc	1,3
  8988  00AB  28AE               	goto	l4973
  8989  00AC                     l4943:	
  8990                           
  8991                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  8992  00AC  3000               	movlw	0
  8993  00AD  0008               	return
  8994  00AE                     l4973:	
  8995                           
  8996                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  8997  00AE  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8998  00AF  3195  25C4  3180   	fcall	_Sensor_isActive
  8999  00B2  3A00               	xorlw	0
  9000  00B3  1903               	skipnz
  9001  00B4  28B8               	goto	l4977
  9002                           
  9003                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  9004  00B5  0020               	movlb	0	; select bank0
  9005  00B6  01BA               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9006  00B7  0ABA               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  9007  00B8                     l4977:	
  9008                           
  9009                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  9010  00B8  002E               	movlb	14	; select bank14
  9011  00B9  0812               	movf	18,w	;volatile
  9012  00BA  0020               	movlb	0	; select bank0
  9013  00BB  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9014  00BC  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9015  00BD  00B4               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  9016                           
  9017                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  9018  00BE  002E               	movlb	14	; select bank14
  9019  00BF  0813               	movf	19,w	;volatile
  9020  00C0  0020               	movlb	0	; select bank0
  9021  00C1  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9022  00C2  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9023  00C3  00B5               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  9024                           
  9025                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  9026  00C4  002F               	movlb	15	; select bank15
  9027  00C5  0813               	movf	19,w	;volatile
  9028  00C6  0020               	movlb	0	; select bank0
  9029  00C7  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9030  00C8  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9031  00C9  00B6               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  9032                           
  9033                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  9034  00CA  3196  2600  3180   	fcall	_MTOUCH_Sensor_Scan_Initialize
  9035                           
  9036                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  9037  00CD  0020               	movlb	0	; select bank0
  9038  00CE  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9039  00CF  1903               	btfsc	3,2
  9040  00D0  28E4               	goto	l4993
  9041                           
  9042                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9043  00D1  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9044  00D2  3E04               	addlw	4
  9045  00D3  0086               	movwf	6
  9046  00D4  3001               	movlw	1	; select bank2/3
  9047  00D5  0087               	movwf	7
  9048  00D6  0801               	movf	1,w
  9049  00D7  3EFF               	addlw	255
  9050  00D8  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9051  00D9  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9052  00DA  00BF               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9053                           
  9054                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  9055  00DB  01B9               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9056                           
  9057                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  9058  00DC  3040               	movlw	64
  9059  00DD  002E               	movlb	14	; select bank14
  9060  00DE  0098               	movwf	24	;volatile
  9061                           
  9062                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  9063  00DF  002F               	movlb	15	; select bank15
  9064  00E0  0198               	clrf	24	;volatile
  9065                           
  9066                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x1;
  9067  00E1  0022               	movlb	2	; select bank2
  9068  00E2  141D               	bsf	29,0	;volatile
  9069                           
  9070                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  9071  00E3  28F7               	goto	l5003
  9072  00E4                     l4993:	
  9073                           
  9074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9075  00E4  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9076  00E5  3E04               	addlw	4
  9077  00E6  0086               	movwf	6
  9078  00E7  3001               	movlw	1	; select bank2/3
  9079  00E8  0087               	movwf	7
  9080  00E9  0801               	movf	1,w
  9081  00EA  3EFF               	addlw	255
  9082  00EB  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9083  00EC  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9084  00ED  00BF               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9085                           
  9086                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  9087  00EE  01B9               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9088  00EF  0AB9               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  9089                           
  9090                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  9091  00F0  002E               	movlb	14	; select bank14
  9092  00F1  0198               	clrf	24	;volatile
  9093                           
  9094                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  9095  00F2  3040               	movlw	64
  9096  00F3  002F               	movlb	15	; select bank15
  9097  00F4  0098               	movwf	24	;volatile
  9098                           
  9099                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  9100  00F5  0022               	movlb	2	; select bank2
  9101  00F6  101D               	bcf	29,0	;volatile
  9102  00F7                     l5003:	
  9103                           
  9104                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  9105  00F7  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9106  00F8  0020               	movlb	0	; select bank0
  9107  00F9  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9108  00FA  3187  2742  3180   	fcall	_Sensor_loadADCSettings
  9109                           
  9110                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  9111  00FD  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9112  00FE  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  9113  00FF  0020               	movlb	0	; select bank0
  9114  0100  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9115  0101  3187  2742  3180   	fcall	_Sensor_loadADCSettings
  9116                           
  9117                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  9118  0104  0021               	movlb	1	; select bank1
  9119  0105  1050               	bcf	_sensor_globalFlags^(0+128),0	;volatile
  9120                           
  9121                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  9122  0106  1150               	bcf	_sensor_globalFlags^(0+128),2	;volatile
  9123                           
  9124                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  9125  0107  11D0               	bcf	_sensor_globalFlags^(0+128),3	;volatile
  9126                           
  9127                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  9128  0108  085F               	movf	_sample_period^(0+128),w
  9129  0109  3195  2503  3180   	fcall	_TMR2_LoadPeriodRegister
  9130                           
  9131                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  9132  010C  3194  24EE  3180   	fcall	_TMR2_StartTimer
  9133                           
  9134                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  9135  010F  0021               	movlb	1	; select bank1
  9136  0110  01C4               	clrf	_packet_noise^(0+128)
  9137  0111  01C5               	clrf	(_packet_noise+1)^(0+128)
  9138  0112                     l5019:	
  9139                           
  9140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  9141  0112  0020               	movlb	0	; select bank0
  9142  0113  0839               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  9143  0114  1D03               	btfss	3,2
  9144  0115  291F               	goto	l282
  9145                           
  9146                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9147  0116  1B11               	btfsc	17,6	;volatile
  9148  0117  291A               	goto	l284
  9149  0118  0021               	movlb	1	; select bank1
  9150  0119  10D0               	bcf	_sensor_globalFlags^(0+128),1	;volatile
  9151  011A                     l284:	
  9152  011A  0020               	movlb	0	; select bank0
  9153  011B  1F11               	btfss	17,6	;volatile
  9154  011C  291A               	goto	l284
  9155                           
  9156                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  9157  011D  1311               	bcf	17,6	;volatile
  9158                           
  9159                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  9160  011E  2927               	goto	l5027
  9161  011F                     l282:	
  9162                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  9163                           
  9164                           
  9165                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9166  011F  1B12               	btfsc	18,6	;volatile
  9167  0120  2923               	goto	l289
  9168  0121  0021               	movlb	1	; select bank1
  9169  0122  10D0               	bcf	_sensor_globalFlags^(0+128),1	;volatile
  9170  0123                     l289:	
  9171  0123  0020               	movlb	0	; select bank0
  9172  0124  1F12               	btfss	18,6	;volatile
  9173  0125  2923               	goto	l289
  9174                           
  9175                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  9176  0126  1312               	bcf	18,6	;volatile
  9177  0127                     l5027:	
  9178                           
  9179                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  9180  0127  3021               	movlw	33
  9181  0128  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9182  0129  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9183  012A  002E               	movlb	14	; select bank14
  9184  012B  0698               	xorwf	24,f	;volatile
  9185                           
  9186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  9187  012C  3021               	movlw	33
  9188  012D  0020               	movlb	0	; select bank0
  9189  012E  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9190  012F  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9191  0130  002F               	movlb	15	; select bank15
  9192  0131  0698               	xorwf	24,f	;volatile
  9193                           
  9194                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  9195  0132  30C0               	movlw	192
  9196  0133  0020               	movlb	0	; select bank0
  9197  0134  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9198  0135  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9199  0136  002E               	movlb	14	; select bank14
  9200  0137  0694               	xorwf	20,f	;volatile
  9201                           
  9202                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  9203  0138  30C0               	movlw	192
  9204  0139  0020               	movlb	0	; select bank0
  9205  013A  00B3               	movwf	??_Sensor_Acq_ExecutePacket
  9206  013B  0833               	movf	??_Sensor_Acq_ExecutePacket,w
  9207  013C  002F               	movlb	15	; select bank15
  9208  013D  0694               	xorwf	20,f	;volatile
  9209                           
  9210                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  9211  013E  0020               	movlb	0	; select bank0
  9212  013F  183F               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  9213  0140  2988               	goto	l5043
  9214                           
  9215                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  9216  0141  002E               	movlb	14	; select bank14
  9217  0142  081A               	movf	26,w	;volatile
  9218  0143  0021               	movlb	1	; select bank1
  9219  0144  07B0               	addwf	_packet_sample^(0+128),f
  9220  0145  002E               	movlb	14	; select bank14
  9221  0146  081B               	movf	27,w	;volatile
  9222  0147  0021               	movlb	1	; select bank1
  9223  0148  3DB1               	addwfc	(_packet_sample+1)^(0+128),f
  9224                           
  9225                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  9226  0149  002F               	movlb	15	; select bank15
  9227  014A  081A               	movf	26,w	;volatile
  9228  014B  0021               	movlb	1	; select bank1
  9229  014C  07B2               	addwf	(_packet_sample^(0+128)+2),f
  9230  014D  002F               	movlb	15	; select bank15
  9231  014E  081B               	movf	27,w	;volatile
  9232  014F  0021               	movlb	1	; select bank1
  9233  0150  3DB3               	addwfc	((_packet_sample+1)^(0+128)+2),f
  9234                           
  9235                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  9236  0151  0020               	movlb	0	; select bank0
  9237  0152  083A               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9238  0153  1D03               	btfss	3,2
  9239  0154  296D               	goto	l5039
  9240                           
  9241                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  9242  0155  002E               	movlb	14	; select bank14
  9243  0156  081A               	movf	26,w	;volatile
  9244  0157  0020               	movlb	0	; select bank0
  9245  0158  023D               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9246  0159  00F4               	movwf	abs@a
  9247  015A  002E               	movlb	14	; select bank14
  9248  015B  081B               	movf	27,w	;volatile
  9249  015C  0020               	movlb	0	; select bank0
  9250  015D  3B3E               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9251  015E  00F5               	movwf	abs@a+1
  9252  015F  3197  2712  3180   	fcall	_abs
  9253  0162  0874               	movf	?_abs,w
  9254  0163  0021               	movlb	1	; select bank1
  9255  0164  07C4               	addwf	_packet_noise^(0+128),f
  9256  0165  0875               	movf	?_abs+1,w
  9257  0166  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
  9258                           
  9259                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  9260  0167  002E               	movlb	14	; select bank14
  9261  0168  081B               	movf	27,w	;volatile
  9262  0169  0020               	movlb	0	; select bank0
  9263  016A  00BE               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9264  016B  002E               	movlb	14	; select bank14
  9265  016C  2984               	goto	L4
  9266  016D                     l5039:	
  9267                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  9268                           
  9269                           
  9270                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  9271  016D  002F               	movlb	15	; select bank15
  9272  016E  081A               	movf	26,w	;volatile
  9273  016F  0020               	movlb	0	; select bank0
  9274  0170  023D               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9275  0171  00F4               	movwf	abs@a
  9276  0172  002F               	movlb	15	; select bank15
  9277  0173  081B               	movf	27,w	;volatile
  9278  0174  0020               	movlb	0	; select bank0
  9279  0175  3B3E               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9280  0176  00F5               	movwf	abs@a+1
  9281  0177  3197  2712  3180   	fcall	_abs
  9282  017A  0874               	movf	?_abs,w
  9283  017B  0021               	movlb	1	; select bank1
  9284  017C  07C4               	addwf	_packet_noise^(0+128),f
  9285  017D  0875               	movf	?_abs+1,w
  9286  017E  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
  9287                           
  9288                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  9289  017F  002F               	movlb	15	; select bank15
  9290  0180  081B               	movf	27,w	;volatile
  9291  0181  0020               	movlb	0	; select bank0
  9292  0182  00BE               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9293  0183  002F               	movlb	15	; select bank15
  9294  0184                     L4:	
  9295  0184  081A               	movf	26,w	;volatile
  9296  0185  0020               	movlb	0	; select bank0
  9297  0186  00BD               	movwf	Sensor_Acq_ExecutePacket@last_b
  9298  0187  29BD               	goto	l5055
  9299  0188                     l5043:	
  9300                           
  9301                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  9302  0188  002E               	movlb	14	; select bank14
  9303  0189  081A               	movf	26,w	;volatile
  9304  018A  0021               	movlb	1	; select bank1
  9305  018B  02B0               	subwf	_packet_sample^(0+128),f
  9306  018C  002E               	movlb	14	; select bank14
  9307  018D  081B               	movf	27,w	;volatile
  9308  018E  0021               	movlb	1	; select bank1
  9309  018F  3BB1               	subwfb	(_packet_sample+1)^(0+128),f
  9310                           
  9311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  9312  0190  002F               	movlb	15	; select bank15
  9313  0191  081A               	movf	26,w	;volatile
  9314  0192  0021               	movlb	1	; select bank1
  9315  0193  02B2               	subwf	(_packet_sample^(0+128)+2),f
  9316  0194  002F               	movlb	15	; select bank15
  9317  0195  081B               	movf	27,w	;volatile
  9318  0196  0021               	movlb	1	; select bank1
  9319  0197  3BB3               	subwfb	((_packet_sample+1)^(0+128)+2),f
  9320                           
  9321                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  9322  0198  0020               	movlb	0	; select bank0
  9323  0199  083A               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9324  019A  1D03               	btfss	3,2
  9325  019B  29A3               	goto	l5051
  9326                           
  9327                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9328  019C  002E               	movlb	14	; select bank14
  9329  019D  081A               	movf	26,w	;volatile
  9330  019E  0020               	movlb	0	; select bank0
  9331  019F  023B               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9332  01A0  00F4               	movwf	abs@a
  9333  01A1  002E               	movlb	14	; select bank14
  9334  01A2  29A9               	goto	L7
  9335  01A3                     l5051:	
  9336                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  9337                           
  9338                           
  9339                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9340  01A3  002F               	movlb	15	; select bank15
  9341  01A4  081A               	movf	26,w	;volatile
  9342  01A5  0020               	movlb	0	; select bank0
  9343  01A6  023B               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9344  01A7  00F4               	movwf	abs@a
  9345  01A8  002F               	movlb	15	; select bank15
  9346  01A9                     L7:	
  9347  01A9  081B               	movf	27,w	;volatile
  9348  01AA  0020               	movlb	0	; select bank0
  9349  01AB  3B3C               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9350  01AC  00F5               	movwf	abs@a+1
  9351  01AD  3197  2712  3180   	fcall	_abs
  9352  01B0  0874               	movf	?_abs,w
  9353  01B1  0021               	movlb	1	; select bank1
  9354  01B2  07C4               	addwf	_packet_noise^(0+128),f
  9355  01B3  0875               	movf	?_abs+1,w
  9356  01B4  3DC5               	addwfc	(_packet_noise+1)^(0+128),f
  9357                           
  9358                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  9359  01B5  002E               	movlb	14	; select bank14
  9360  01B6  081B               	movf	27,w	;volatile
  9361  01B7  0020               	movlb	0	; select bank0
  9362  01B8  00BC               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9363  01B9  002E               	movlb	14	; select bank14
  9364  01BA  081A               	movf	26,w	;volatile
  9365  01BB  0020               	movlb	0	; select bank0
  9366  01BC  00BB               	movwf	Sensor_Acq_ExecutePacket@last_a
  9367  01BD                     l5055:	
  9368                           
  9369                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  9370  01BD  083F               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9371  01BE  1D03               	btfss	3,2
  9372  01BF  29C2               	goto	l5059
  9373                           
  9374                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  9375  01C0  0021               	movlb	1	; select bank1
  9376  01C1  1450               	bsf	_sensor_globalFlags^(0+128),0	;volatile
  9377  01C2                     l5059:	
  9378                           
  9379                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  9380  01C2  3001               	movlw	1
  9381  01C3  0020               	movlb	0	; select bank0
  9382  01C4  02BF               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9383                           
  9384                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  9385  01C5  0021               	movlb	1	; select bank1
  9386  01C6  1CD0               	btfss	_sensor_globalFlags^(0+128),1	;volatile
  9387  01C7  29CA               	goto	l299
  9388                           
  9389                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  9390  01C8  1550               	bsf	_sensor_globalFlags^(0+128),2	;volatile
  9391                           
  9392                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  9393  01C9  1450               	bsf	_sensor_globalFlags^(0+128),0	;volatile
  9394  01CA                     l299:	
  9395                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  9396                           
  9397                           
  9398                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  9399  01CA  14D0               	bsf	_sensor_globalFlags^(0+128),1	;volatile
  9400                           
  9401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  9402  01CB  1C50               	btfss	_sensor_globalFlags^(0+128),0	;volatile
  9403  01CC  2912               	goto	l5019
  9404                           
  9405                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  9406  01CD  3194  24F1  3180   	fcall	_TMR2_StopTimer
  9407                           
  9408                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  9409  01D0  0020               	movlb	0	; select bank0
  9410  01D1  0834               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9411  01D2  002E               	movlb	14	; select bank14
  9412  01D3  0092               	movwf	18	;volatile
  9413                           
  9414                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  9415  01D4  0020               	movlb	0	; select bank0
  9416  01D5  0835               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9417  01D6  002E               	movlb	14	; select bank14
  9418  01D7  0093               	movwf	19	;volatile
  9419                           
  9420                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  9421  01D8  0020               	movlb	0	; select bank0
  9422  01D9  0836               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9423  01DA  002F               	movlb	15	; select bank15
  9424  01DB  0093               	movwf	19	;volatile
  9425                           
  9426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  9427  01DC  0021               	movlb	1	; select bank1
  9428  01DD  1D50               	btfss	_sensor_globalFlags^(0+128),2	;volatile
  9429  01DE  29E1               	goto	l301
  9430                           
  9431                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9432  01DF  30FB               	movlw	251
  9433  01E0  0008               	return
  9434  01E1                     l301:	
  9435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  9436                           
  9437                           
  9438                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  9439  01E1  1DD0               	btfss	_sensor_globalFlags^(0+128),3	;volatile
  9440  01E2  29E5               	goto	l5083
  9441                           
  9442                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9443  01E3  30FA               	movlw	250
  9444  01E4  0008               	return
  9445  01E5                     l5083:	
  9446                           
  9447                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  9448  01E5  0020               	movlb	0	; select bank0
  9449  01E6  0837               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9450  01E7  1903               	btfsc	3,2
  9451  01E8  29EF               	goto	l5087
  9452                           
  9453                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  9454  01E9  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9455  01EA  3E08               	addlw	8
  9456  01EB  0086               	movwf	6
  9457  01EC  3001               	movlw	1	; select bank2/3
  9458  01ED  0087               	movwf	7
  9459  01EE  1181               	bcf	1,3
  9460  01EF                     l5087:	
  9461                           
  9462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  9463  01EF  0838               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9464  01F0  1903               	btfsc	3,2
  9465  01F1  29F8               	goto	l5091
  9466                           
  9467                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  9468  01F2  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9469  01F3  3E08               	addlw	8
  9470  01F4  0086               	movwf	6
  9471  01F5  3001               	movlw	1	; select bank2/3
  9472  01F6  0087               	movwf	7
  9473  01F7  1181               	bcf	1,3
  9474  01F8                     l5091:	
  9475                           
  9476                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9477  01F8  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9478  01F9  3196  2621  3180   	fcall	_Sensor_isEnabled
  9479  01FC  3A00               	xorlw	0
  9480  01FD  1903               	skipnz
  9481  01FE  2A0C               	goto	l5097
  9482  01FF  0020               	movlb	0	; select bank0
  9483  0200  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9484  0201  3195  257A  3180   	fcall	_Sensor_isCalibrated
  9485  0204  3A00               	xorlw	0
  9486  0205  1D03               	skipz
  9487  0206  2A0C               	goto	l5097
  9488                           
  9489                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9490  0207  0020               	movlb	0	; select bank0
  9491  0208  0840               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9492  0209  318E  261E  3180   	fcall	_Sensor_autoCalibration
  9493  020C                     l5097:	
  9494                           
  9495                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9496  020C  0020               	movlb	0	; select bank0
  9497  020D  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9498  020E  3196  2621  3180   	fcall	_Sensor_isEnabled
  9499  0211  3A00               	xorlw	0
  9500  0212  1903               	skipnz
  9501  0213  2A21               	goto	l5103
  9502  0214  0020               	movlb	0	; select bank0
  9503  0215  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9504  0216  3195  257A  3180   	fcall	_Sensor_isCalibrated
  9505  0219  3A00               	xorlw	0
  9506  021A  1D03               	skipz
  9507  021B  2A21               	goto	l5103
  9508                           
  9509                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9510  021C  0020               	movlb	0	; select bank0
  9511  021D  0832               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9512  021E  318E  261E  3180   	fcall	_Sensor_autoCalibration
  9513  0221                     l5103:	
  9514                           
  9515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  9516  0221  002E               	movlb	14	; select bank14
  9517  0222  0196               	clrf	22	;volatile
  9518                           
  9519                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  9520  0223  002F               	movlb	15	; select bank15
  9521  0224  0196               	clrf	22	;volatile
  9522                           
  9523                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  9524  0225  002E               	movlb	14	; select bank14
  9525  0226  0197               	clrf	23	;volatile
  9526                           
  9527                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  9528  0227  002F               	movlb	15	; select bank15
  9529  0228  0197               	clrf	23	;volatile
  9530                           
  9531                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  9532  0229  002E               	movlb	14	; select bank14
  9533  022A  1011               	bcf	17,0	;volatile
  9534                           
  9535                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  9536  022B  002F               	movlb	15	; select bank15
  9537  022C  1011               	bcf	17,0	;volatile
  9538  022D  28AC               	goto	l4943
  9539  022E                     __end_of_Sensor_Acq_ExecutePacket:	
  9540                           
  9541                           	psect	text49
  9542  14F1                     __ptext49:	
  9543 ;; *************** function _TMR2_StopTimer *****************
  9544 ;; Defined at:
  9545 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;		None
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;		None
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  1    wreg      void 
  9552 ;; Registers used:
  9553 ;;		None
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9559 ;;      Params:         0       0       0       0       0       0       0       0
  9560 ;;      Locals:         0       0       0       0       0       0       0       0
  9561 ;;      Temps:          0       0       0       0       0       0       0       0
  9562 ;;      Totals:         0       0       0       0       0       0       0       0
  9563 ;;Total ram usage:        0 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    4
  9566 ;; This function calls:
  9567 ;;		Nothing
  9568 ;; This function is called by:
  9569 ;;		_Sensor_Acq_ExecutePacket
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           
  9574                           ;psect for function _TMR2_StopTimer
  9575  14F1                     _TMR2_StopTimer:	
  9576                           
  9577                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9578                           
  9579                           ;incstack = 0
  9580                           ; Regs used in _TMR2_StopTimer: []
  9581  14F1  0020               	movlb	0	; select bank0
  9582  14F2  111C               	bcf	28,2	;volatile
  9583  14F3  0008               	return
  9584  14F4                     __end_of_TMR2_StopTimer:	
  9585                           
  9586                           	psect	text50
  9587  14EE                     __ptext50:	
  9588 ;; *************** function _TMR2_StartTimer *****************
  9589 ;; Defined at:
  9590 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;		None
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  1    wreg      void 
  9597 ;; Registers used:
  9598 ;;		None
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9604 ;;      Params:         0       0       0       0       0       0       0       0
  9605 ;;      Locals:         0       0       0       0       0       0       0       0
  9606 ;;      Temps:          0       0       0       0       0       0       0       0
  9607 ;;      Totals:         0       0       0       0       0       0       0       0
  9608 ;;Total ram usage:        0 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    4
  9611 ;; This function calls:
  9612 ;;		Nothing
  9613 ;; This function is called by:
  9614 ;;		_Sensor_Acq_ExecutePacket
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _TMR2_StartTimer
  9620  14EE                     _TMR2_StartTimer:	
  9621                           
  9622                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _TMR2_StartTimer: []
  9626  14EE  0020               	movlb	0	; select bank0
  9627  14EF  151C               	bsf	28,2	;volatile
  9628  14F0  0008               	return
  9629  14F1                     __end_of_TMR2_StartTimer:	
  9630                           
  9631                           	psect	text51
  9632  1503                     __ptext51:	
  9633 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9634 ;; Defined at:
  9635 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;  periodVal       1    wreg     unsigned char 
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;  periodVal       1    1[COMMON] unsigned char 
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  1    wreg      void 
  9642 ;; Registers used:
  9643 ;;		wreg
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9649 ;;      Params:         0       0       0       0       0       0       0       0
  9650 ;;      Locals:         1       0       0       0       0       0       0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0       0
  9652 ;;      Totals:         1       0       0       0       0       0       0       0
  9653 ;;Total ram usage:        1 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    4
  9656 ;; This function calls:
  9657 ;;		Nothing
  9658 ;; This function is called by:
  9659 ;;		_Sensor_Acq_ExecutePacket
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           
  9664                           ;psect for function _TMR2_LoadPeriodRegister
  9665  1503                     _TMR2_LoadPeriodRegister:	
  9666                           
  9667                           ;incstack = 0
  9668                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  9669                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  9670  1503  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  9671                           
  9672                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  9673  1504  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  9674  1505  0020               	movlb	0	; select bank0
  9675  1506  009B               	movwf	27	;volatile
  9676  1507  0008               	return
  9677  1508                     __end_of_TMR2_LoadPeriodRegister:	
  9678                           
  9679                           	psect	text52
  9680  0742                     __ptext52:	
  9681 ;; *************** function _Sensor_loadADCSettings *****************
  9682 ;; Defined at:
  9683 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;  sensor          1    wreg     PTR struct .
  9686 ;;		 -> NULL(0), mtouch_sensor(27), 
  9687 ;;  adc_index       1    2[COMMON] unsigned char 
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  sensor          1    9[COMMON] PTR struct .
  9690 ;;		 -> NULL(0), mtouch_sensor(27), 
  9691 ;;  addressOffse    1    8[COMMON] unsigned char 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9701 ;;      Params:         1       0       0       0       0       0       0       0
  9702 ;;      Locals:         4       0       0       0       0       0       0       0
  9703 ;;      Temps:          3       0       0       0       0       0       0       0
  9704 ;;      Totals:         8       0       0       0       0       0       0       0
  9705 ;;Total ram usage:        8 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    5
  9708 ;; This function calls:
  9709 ;;		_Sensor_isCalibrated
  9710 ;;		_Sensor_isCalibratingAcqTime
  9711 ;; This function is called by:
  9712 ;;		_Sensor_Acq_ExecutePacket
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           
  9717                           ;psect for function _Sensor_loadADCSettings
  9718  0742                     _Sensor_loadADCSettings:	
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9722                           ;Sensor_loadADCSettings@sensor stored from wreg
  9723  0742  00F9               	movwf	Sensor_loadADCSettings@sensor
  9724                           
  9725                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  9726  0743  0879               	movf	Sensor_loadADCSettings@sensor,w
  9727  0744  1903               	btfsc	3,2
  9728  0745  0008               	return
  9729                           
  9730                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  9731  0746  0872               	movf	Sensor_loadADCSettings@adc_index,w
  9732  0747  1D03               	btfss	3,2
  9733  0748  2F4C               	goto	l3385
  9734  0749  01F6               	clrf	_Sensor_loadADCSettings$558
  9735  074A  01F7               	clrf	_Sensor_loadADCSettings$558+1
  9736  074B  2F50               	goto	l253
  9737  074C                     l3385:	
  9738  074C  3080               	movlw	128
  9739  074D  00F6               	movwf	_Sensor_loadADCSettings$558
  9740  074E  3000               	movlw	0
  9741  074F  00F7               	movwf	_Sensor_loadADCSettings$558+1
  9742  0750                     l253:	
  9743  0750  0876               	movf	_Sensor_loadADCSettings$558,w
  9744  0751  00F3               	movwf	??_Sensor_loadADCSettings
  9745  0752  0873               	movf	??_Sensor_loadADCSettings,w
  9746  0753  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  9747                           
  9748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  9749  0754  0A79               	incf	Sensor_loadADCSettings@sensor,w
  9750  0755  0086               	movwf	6
  9751  0756  3001               	movlw	1	; select bank2/3
  9752  0757  0087               	movwf	7
  9753  0758  0801               	movf	1,w
  9754  0759  00F3               	movwf	??_Sensor_loadADCSettings
  9755  075A  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9756  075B  3E11               	addlw	17
  9757  075C  00F4               	movwf	??_Sensor_loadADCSettings+1
  9758  075D  01F5               	clrf	??_Sensor_loadADCSettings+2
  9759  075E  3007               	movlw	7
  9760  075F  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9761  0760  0874               	movf	??_Sensor_loadADCSettings+1,w
  9762  0761  0086               	movwf	6
  9763  0762  0875               	movf	??_Sensor_loadADCSettings+2,w
  9764  0763  0087               	movwf	7
  9765  0764  0873               	movf	??_Sensor_loadADCSettings,w
  9766  0765  0081               	movwf	1
  9767                           
  9768                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  9769  0766  0879               	movf	Sensor_loadADCSettings@sensor,w
  9770  0767  3E05               	addlw	5
  9771  0768  0086               	movwf	6
  9772  0769  3001               	movlw	1	; select bank2/3
  9773  076A  0087               	movwf	7
  9774  076B  0801               	movf	1,w
  9775  076C  00F3               	movwf	??_Sensor_loadADCSettings
  9776  076D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9777  076E  3E19               	addlw	25
  9778  076F  00F4               	movwf	??_Sensor_loadADCSettings+1
  9779  0770  01F5               	clrf	??_Sensor_loadADCSettings+2
  9780  0771  3007               	movlw	7
  9781  0772  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9782  0773  0874               	movf	??_Sensor_loadADCSettings+1,w
  9783  0774  0086               	movwf	6
  9784  0775  0875               	movf	??_Sensor_loadADCSettings+2,w
  9785  0776  0087               	movwf	7
  9786  0777  0873               	movf	??_Sensor_loadADCSettings,w
  9787  0778  0081               	movwf	1
  9788                           
  9789                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  9790  0779  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9791  077A  3E13               	addlw	19
  9792  077B  00F3               	movwf	??_Sensor_loadADCSettings
  9793  077C  01F4               	clrf	??_Sensor_loadADCSettings+1
  9794  077D  3007               	movlw	7
  9795  077E  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9796  077F  0873               	movf	??_Sensor_loadADCSettings,w
  9797  0780  0086               	movwf	6
  9798  0781  0874               	movf	??_Sensor_loadADCSettings+1,w
  9799  0782  0087               	movwf	7
  9800  0783  3050               	movlw	80
  9801  0784  0081               	movwf	1
  9802                           
  9803                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  9804  0785  30FE               	movlw	254
  9805  0786  00F3               	movwf	??_Sensor_loadADCSettings
  9806  0787  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9807  0788  3E18               	addlw	24
  9808  0789  0086               	movwf	6
  9809  078A  0187               	clrf	7
  9810  078B  3007               	movlw	7
  9811  078C  3D87               	addwfc	7,f
  9812  078D  0873               	movf	??_Sensor_loadADCSettings,w
  9813  078E  0581               	andwf	1,f
  9814                           
  9815                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  9816  078F  0879               	movf	Sensor_loadADCSettings@sensor,w
  9817  0790  3195  257A  3187   	fcall	_Sensor_isCalibrated
  9818  0793  3A00               	xorlw	0
  9819  0794  1903               	skipnz
  9820  0795  2FAA               	goto	l3399
  9821                           
  9822                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  9823  0796  0879               	movf	Sensor_loadADCSettings@sensor,w
  9824  0797  3E02               	addlw	2
  9825  0798  0086               	movwf	6
  9826  0799  3001               	movlw	1	; select bank2/3
  9827  079A  0087               	movwf	7
  9828  079B  0801               	movf	1,w
  9829  079C  00F3               	movwf	??_Sensor_loadADCSettings
  9830  079D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9831  079E  3E16               	addlw	22
  9832  079F  00F4               	movwf	??_Sensor_loadADCSettings+1
  9833  07A0  01F5               	clrf	??_Sensor_loadADCSettings+2
  9834  07A1  3007               	movlw	7
  9835  07A2  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9836  07A3  0874               	movf	??_Sensor_loadADCSettings+1,w
  9837  07A4  0086               	movwf	6
  9838  07A5  0875               	movf	??_Sensor_loadADCSettings+2,w
  9839  07A6  0087               	movwf	7
  9840  07A7  0873               	movf	??_Sensor_loadADCSettings,w
  9841  07A8  0081               	movwf	1
  9842  07A9  2FBD               	goto	l3403
  9843  07AA                     l3399:	
  9844                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  9845                           
  9846                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  9847                           
  9848                           
  9849                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  9850  07AA  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9851  07AB  3E16               	addlw	22
  9852  07AC  00F3               	movwf	??_Sensor_loadADCSettings
  9853  07AD  01F4               	clrf	??_Sensor_loadADCSettings+1
  9854  07AE  3007               	movlw	7
  9855  07AF  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9856  07B0  0873               	movf	??_Sensor_loadADCSettings,w
  9857  07B1  0086               	movwf	6
  9858  07B2  0874               	movf	??_Sensor_loadADCSettings+1,w
  9859  07B3  0087               	movwf	7
  9860  07B4  3020               	movlw	32
  9861  07B5  0081               	movwf	1
  9862                           
  9863                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  9864  07B6  0879               	movf	Sensor_loadADCSettings@sensor,w
  9865  07B7  3195  2571  3187   	fcall	_Sensor_isCalibratingAcqTime
  9866  07BA  3A00               	xorlw	0
  9867  07BB  1903               	skipnz
  9868  07BC  2FD0               	goto	l3405
  9869  07BD                     l3403:	
  9870                           
  9871                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  9872  07BD  0879               	movf	Sensor_loadADCSettings@sensor,w
  9873  07BE  3E03               	addlw	3
  9874  07BF  0086               	movwf	6
  9875  07C0  3001               	movlw	1	; select bank2/3
  9876  07C1  0087               	movwf	7
  9877  07C2  0801               	movf	1,w
  9878  07C3  00F3               	movwf	??_Sensor_loadADCSettings
  9879  07C4  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9880  07C5  3E17               	addlw	23
  9881  07C6  00F4               	movwf	??_Sensor_loadADCSettings+1
  9882  07C7  01F5               	clrf	??_Sensor_loadADCSettings+2
  9883  07C8  3007               	movlw	7
  9884  07C9  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9885  07CA  0874               	movf	??_Sensor_loadADCSettings+1,w
  9886  07CB  0086               	movwf	6
  9887  07CC  0875               	movf	??_Sensor_loadADCSettings+2,w
  9888  07CD  0087               	movwf	7
  9889  07CE  0873               	movf	??_Sensor_loadADCSettings,w
  9890  07CF  2FDB               	goto	L8
  9891  07D0                     l3405:	
  9892                           
  9893                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  9894  07D0  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9895  07D1  3E17               	addlw	23
  9896  07D2  00F3               	movwf	??_Sensor_loadADCSettings
  9897  07D3  01F4               	clrf	??_Sensor_loadADCSettings+1
  9898  07D4  3007               	movlw	7
  9899  07D5  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9900  07D6  0873               	movf	??_Sensor_loadADCSettings,w
  9901  07D7  0086               	movwf	6
  9902  07D8  0874               	movf	??_Sensor_loadADCSettings+1,w
  9903  07D9  0087               	movwf	7
  9904  07DA  3020               	movlw	32
  9905  07DB                     L8:	
  9906  07DB  0081               	movwf	1
  9907                           
  9908                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  9909                           
  9910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  9911  07DC  0879               	movf	Sensor_loadADCSettings@sensor,w
  9912  07DD  3E04               	addlw	4
  9913  07DE  0086               	movwf	6
  9914  07DF  3001               	movlw	1	; select bank2/3
  9915  07E0  0087               	movwf	7
  9916  07E1  0801               	movf	1,w
  9917  07E2  00F3               	movwf	??_Sensor_loadADCSettings
  9918  07E3  01F4               	clrf	??_Sensor_loadADCSettings+1
  9919  07E4  3009               	movlw	9
  9920  07E5                     u2595:	
  9921  07E5  35F3               	lslf	??_Sensor_loadADCSettings,f
  9922  07E6  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  9923  07E7  0B89               	decfsz	9,f
  9924  07E8  2FE5               	goto	u2595
  9925  07E9  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  9926  07EA  3EB0               	addlw	(low (_packet_sample| 0))& (0+255)
  9927  07EB  0086               	movwf	6
  9928  07EC  0187               	clrf	7
  9929  07ED  0873               	movf	??_Sensor_loadADCSettings,w
  9930  07EE  3FC0               	movwi [0]fsr1
  9931  07EF  0874               	movf	??_Sensor_loadADCSettings+1,w
  9932  07F0  3FC1               	movwi [1]fsr1
  9933  07F1  0008               	return
  9934  07F2                     __end_of_Sensor_loadADCSettings:	
  9935                           
  9936                           	psect	text53
  9937  157A                     __ptext53:	
  9938 ;; *************** function _Sensor_isCalibrated *****************
  9939 ;; Defined at:
  9940 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;  sensor          1    wreg     PTR struct .
  9943 ;;		 -> NULL(0), mtouch_sensor(27), 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;  sensor          1    1[COMMON] PTR struct .
  9946 ;;		 -> NULL(0), mtouch_sensor(27), 
  9947 ;; Return value:  Size  Location     Type
  9948 ;;                  1    wreg      _Bool 
  9949 ;; Registers used:
  9950 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9951 ;; Tracked objects:
  9952 ;;		On entry : 0/0
  9953 ;;		On exit  : 0/0
  9954 ;;		Unchanged: 0/0
  9955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9956 ;;      Params:         0       0       0       0       0       0       0       0
  9957 ;;      Locals:         1       0       0       0       0       0       0       0
  9958 ;;      Temps:          0       0       0       0       0       0       0       0
  9959 ;;      Totals:         1       0       0       0       0       0       0       0
  9960 ;;Total ram usage:        1 bytes
  9961 ;; Hardware stack levels used:    1
  9962 ;; Hardware stack levels required when called:    4
  9963 ;; This function calls:
  9964 ;;		Nothing
  9965 ;; This function is called by:
  9966 ;;		_Sensor_Acquisition
  9967 ;;		_Sensor_loadADCSettings
  9968 ;;		_Sensor_Acq_ExecutePacket
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           
  9973                           ;psect for function _Sensor_isCalibrated
  9974  157A                     _Sensor_isCalibrated:	
  9975                           
  9976                           ;incstack = 0
  9977                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9978                           ;Sensor_isCalibrated@sensor stored from wreg
  9979  157A  00F1               	movwf	Sensor_isCalibrated@sensor
  9980                           
  9981                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
  9982  157B  0871               	movf	Sensor_isCalibrated@sensor,w
  9983  157C  3E08               	addlw	8
  9984  157D  0086               	movwf	6
  9985  157E  3001               	movlw	1	; select bank2/3
  9986  157F  0087               	movwf	7
  9987  1580  0C01               	rrf	1,w
  9988  1581  0C89               	rrf	9,f
  9989  1582  3901               	andlw	1
  9990  1583  0008               	return
  9991  1584                     __end_of_Sensor_isCalibrated:	
  9992                           
  9993                           	psect	text54
  9994  1621                     __ptext54:	
  9995 ;; *************** function _Sensor_isEnabled *****************
  9996 ;; Defined at:
  9997 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  sensor          1    wreg     PTR struct .
 10000 ;;		 -> NULL(0), mtouch_sensor(27), 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;  sensor          1    2[COMMON] PTR struct .
 10003 ;;		 -> NULL(0), mtouch_sensor(27), 
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  1    wreg      _Bool 
 10006 ;; Registers used:
 10007 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10013 ;;      Params:         0       0       0       0       0       0       0       0
 10014 ;;      Locals:         1       0       0       0       0       0       0       0
 10015 ;;      Temps:          1       0       0       0       0       0       0       0
 10016 ;;      Totals:         2       0       0       0       0       0       0       0
 10017 ;;Total ram usage:        2 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    4
 10020 ;; This function calls:
 10021 ;;		Nothing
 10022 ;; This function is called by:
 10023 ;;		_Sensor_Service
 10024 ;;		_Sensor_postAcquisitionProcess
 10025 ;;		_Sensor_Acq_ExecutePacket
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029                           
 10030                           ;psect for function _Sensor_isEnabled
 10031  1621                     _Sensor_isEnabled:	
 10032                           
 10033                           ;incstack = 0
 10034                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10035                           ;Sensor_isEnabled@sensor stored from wreg
 10036  1621  00F2               	movwf	Sensor_isEnabled@sensor
 10037                           
 10038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
 10039  1622  0872               	movf	Sensor_isEnabled@sensor,w
 10040  1623  1903               	btfsc	3,2
 10041  1624  2E30               	goto	l4871
 10042                           
 10043                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
 10044  1625  0872               	movf	Sensor_isEnabled@sensor,w
 10045  1626  3E08               	addlw	8
 10046  1627  0086               	movwf	6
 10047  1628  3001               	movlw	1	; select bank2/3
 10048  1629  0087               	movwf	7
 10049  162A  0C01               	rrf	1,w
 10050  162B  00F1               	movwf	??_Sensor_isEnabled
 10051  162C  0CF1               	rrf	??_Sensor_isEnabled,f
 10052  162D  0C71               	rrf	??_Sensor_isEnabled,w
 10053  162E  3901               	andlw	1
 10054  162F  0008               	return
 10055  1630                     l4871:	
 10056                           
 10057                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
 10058  1630  3000               	movlw	0
 10059  1631  0008               	return
 10060  1632                     __end_of_Sensor_isEnabled:	
 10061                           
 10062                           	psect	text55
 10063  15C4                     __ptext55:	
 10064 ;; *************** function _Sensor_isActive *****************
 10065 ;; Defined at:
 10066 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;  sensor          1    wreg     PTR struct .
 10069 ;;		 -> NULL(0), mtouch_sensor(27), 
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;  sensor          1    1[COMMON] PTR struct .
 10072 ;;		 -> NULL(0), mtouch_sensor(27), 
 10073 ;; Return value:  Size  Location     Type
 10074 ;;                  1    wreg      _Bool 
 10075 ;; Registers used:
 10076 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10082 ;;      Params:         0       0       0       0       0       0       0       0
 10083 ;;      Locals:         1       0       0       0       0       0       0       0
 10084 ;;      Temps:          0       0       0       0       0       0       0       0
 10085 ;;      Totals:         1       0       0       0       0       0       0       0
 10086 ;;Total ram usage:        1 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; Hardware stack levels required when called:    4
 10089 ;; This function calls:
 10090 ;;		Nothing
 10091 ;; This function is called by:
 10092 ;;		_Sensor_Acquisition
 10093 ;;		_Sensor_Acq_ExecutePacket
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097                           
 10098                           ;psect for function _Sensor_isActive
 10099  15C4                     _Sensor_isActive:	
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10103                           ;Sensor_isActive@sensor stored from wreg
 10104  15C4  00F1               	movwf	Sensor_isActive@sensor
 10105                           
 10106                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
 10107  15C5  0871               	movf	Sensor_isActive@sensor,w
 10108  15C6  1D03               	btfss	3,2
 10109  15C7  2DCA               	goto	l3373
 10110                           
 10111                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
 10112  15C8  3000               	movlw	0
 10113  15C9  0008               	return
 10114  15CA                     l3373:	
 10115                           
 10116                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
 10117  15CA  0871               	movf	Sensor_isActive@sensor,w
 10118  15CB  3E08               	addlw	8
 10119  15CC  0086               	movwf	6
 10120  15CD  3001               	movlw	1	; select bank2/3
 10121  15CE  0087               	movwf	7
 10122  15CF  0C01               	rrf	1,w
 10123  15D0  3901               	andlw	1
 10124  15D1  0008               	return
 10125  15D2                     __end_of_Sensor_isActive:	
 10126                           
 10127                           	psect	text56
 10128  0E1E                     __ptext56:	
 10129 ;; *************** function _Sensor_autoCalibration *****************
 10130 ;; Defined at:
 10131 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;  sensor          1    wreg     PTR struct .
 10134 ;;		 -> NULL(0), mtouch_sensor(27), 
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;  sensor          1   17[BANK0 ] PTR struct .
 10137 ;;		 -> NULL(0), mtouch_sensor(27), 
 10138 ;;  adcIndex        1   16[BANK0 ] unsigned char 
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  1    wreg      void 
 10141 ;; Registers used:
 10142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10148 ;;      Params:         0       0       0       0       0       0       0       0
 10149 ;;      Locals:         0       2       0       0       0       0       0       0
 10150 ;;      Temps:          4       0       0       0       0       0       0       0
 10151 ;;      Totals:         4       2       0       0       0       0       0       0
 10152 ;;Total ram usage:        6 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    5
 10155 ;; This function calls:
 10156 ;;		_Sensor_getScanGroupIndex
 10157 ;;		_Sensor_isCalibratingAcqTime
 10158 ;;		_Sensor_setCalibratAcqTime
 10159 ;;		_Sensor_setCalibrated
 10160 ;;		_abs
 10161 ;; This function is called by:
 10162 ;;		_Sensor_Acq_ExecutePacket
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           
 10167                           ;psect for function _Sensor_autoCalibration
 10168  0E1E                     _Sensor_autoCalibration:	
 10169                           
 10170                           ;incstack = 0
 10171                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10172                           ;Sensor_autoCalibration@sensor stored from wreg
 10173  0E1E  0020               	movlb	0	; select bank0
 10174  0E1F  00B1               	movwf	Sensor_autoCalibration@sensor
 10175                           
 10176                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 10177  0E20  0831               	movf	Sensor_autoCalibration@sensor,w
 10178  0E21  3188  20C6  318E   	fcall	_Sensor_getScanGroupIndex
 10179  0E24  00F8               	movwf	??_Sensor_autoCalibration
 10180  0E25  0878               	movf	??_Sensor_autoCalibration,w
 10181  0E26  0020               	movlb	0	; select bank0
 10182  0E27  00B0               	movwf	Sensor_autoCalibration@adcIndex
 10183                           
 10184                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 10185  0E28  0831               	movf	Sensor_autoCalibration@sensor,w
 10186  0E29  3195  2571  318E   	fcall	_Sensor_isCalibratingAcqTime
 10187  0E2C  3A00               	xorlw	0
 10188  0E2D  1D03               	skipz
 10189  0E2E  2E62               	goto	l4887
 10190                           
 10191                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 10192  0E2F  0020               	movlb	0	; select bank0
 10193  0E30  3530               	lslf	Sensor_autoCalibration@adcIndex,w
 10194  0E31  3EB0               	addlw	(low (_packet_sample| 0))& (0+255)
 10195  0E32  0086               	movwf	6
 10196  0E33  0187               	clrf	7
 10197  0E34  3F40               	moviw [0]fsr1
 10198  0E35  00F8               	movwf	??_Sensor_autoCalibration
 10199  0E36  3F41               	moviw [1]fsr1
 10200  0E37  00F9               	movwf	??_Sensor_autoCalibration+1
 10201  0E38  0831               	movf	Sensor_autoCalibration@sensor,w
 10202  0E39  3E04               	addlw	4
 10203  0E3A  0086               	movwf	6
 10204  0E3B  3001               	movlw	1	; select bank2/3
 10205  0E3C  0087               	movwf	7
 10206  0E3D  0801               	movf	1,w
 10207  0E3E  00FA               	movwf	??_Sensor_autoCalibration+2
 10208  0E3F  01FB               	clrf	??_Sensor_autoCalibration+3
 10209  0E40  3009               	movlw	9
 10210  0E41                     u4905:	
 10211  0E41  35FA               	lslf	??_Sensor_autoCalibration+2,f
 10212  0E42  0DFB               	rlf	??_Sensor_autoCalibration+3,f
 10213  0E43  0B89               	decfsz	9,f
 10214  0E44  2E41               	goto	u4905
 10215  0E45  0879               	movf	??_Sensor_autoCalibration+1,w
 10216  0E46  027B               	subwf	??_Sensor_autoCalibration+3,w
 10217  0E47  1D03               	skipz
 10218  0E48  2E4B               	goto	u4915
 10219  0E49  0878               	movf	??_Sensor_autoCalibration,w
 10220  0E4A  027A               	subwf	??_Sensor_autoCalibration+2,w
 10221  0E4B                     u4915:	
 10222  0E4B  1803               	skipnc
 10223  0E4C  2E5E               	goto	l4885
 10224                           
 10225                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 10226  0E4D  3001               	movlw	1
 10227  0E4E  00F8               	movwf	??_Sensor_autoCalibration
 10228  0E4F  0831               	movf	Sensor_autoCalibration@sensor,w
 10229  0E50  3E05               	addlw	5
 10230  0E51  0086               	movwf	6
 10231  0E52  3001               	movlw	1	; select bank2/3
 10232  0E53  0087               	movwf	7
 10233  0E54  0878               	movf	??_Sensor_autoCalibration,w
 10234  0E55  0781               	addwf	1,f
 10235  0E56  300F               	movlw	15
 10236  0E57  0201               	subwf	1,w
 10237  0E58  1C03               	skipc
 10238  0E59  0008               	return
 10239                           
 10240                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 10241  0E5A  0831               	movf	Sensor_autoCalibration@sensor,w
 10242  0E5B  3195  25E1         	fcall	_Sensor_setCalibratAcqTime
 10243  0E5D  0008               	return
 10244  0E5E                     l4885:	
 10245                           
 10246                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
 10247  0E5E  0831               	movf	Sensor_autoCalibration@sensor,w
 10248  0E5F  3195  25E1         	fcall	_Sensor_setCalibratAcqTime
 10249  0E61  0008               	return
 10250  0E62                     l4887:	
 10251                           
 10252                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 10253  0E62  0020               	movlb	0	; select bank0
 10254  0E63  0831               	movf	Sensor_autoCalibration@sensor,w
 10255  0E64  3E04               	addlw	4
 10256  0E65  0086               	movwf	6
 10257  0E66  3001               	movlw	1	; select bank2/3
 10258  0E67  0087               	movwf	7
 10259  0E68  0801               	movf	1,w
 10260  0E69  00F8               	movwf	??_Sensor_autoCalibration
 10261  0E6A  01F9               	clrf	??_Sensor_autoCalibration+1
 10262  0E6B  35F8               	lslf	??_Sensor_autoCalibration,f
 10263  0E6C  0DF9               	rlf	??_Sensor_autoCalibration+1,f
 10264  0E6D  0831               	movf	Sensor_autoCalibration@sensor,w
 10265  0E6E  3E06               	addlw	6
 10266  0E6F  0086               	movwf	6
 10267  0E70  3001               	movlw	1	; select bank2/3
 10268  0E71  0087               	movwf	7
 10269  0E72  3530               	lslf	Sensor_autoCalibration@adcIndex,w
 10270  0E73  3EB0               	addlw	(low (_packet_sample| 0))& (0+255)
 10271  0E74  0084               	movwf	4
 10272  0E75  0185               	clrf	5
 10273  0E76  3F40               	moviw [0]fsr1
 10274  0E77  0200               	subwf	0,w
 10275  0E78  00F4               	movwf	abs@a
 10276  0E79  3101               	addfsr 0,1
 10277  0E7A  3F41               	moviw [1]fsr1
 10278  0E7B  3B00               	subwfb	0,w
 10279  0E7C  00F5               	movwf	abs@a+1
 10280  0E7D  3197  2712  318E   	fcall	_abs
 10281  0E80  0879               	movf	??_Sensor_autoCalibration+1,w
 10282  0E81  0275               	subwf	?_abs+1,w
 10283  0E82  1D03               	skipz
 10284  0E83  2E86               	goto	u4935
 10285  0E84  0878               	movf	??_Sensor_autoCalibration,w
 10286  0E85  0274               	subwf	?_abs,w
 10287  0E86                     u4935:	
 10288  0E86  1803               	skipnc
 10289  0E87  2E96               	goto	l4893
 10290                           
 10291                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 10292  0E88  3020               	movlw	32
 10293  0E89  00F8               	movwf	??_Sensor_autoCalibration
 10294  0E8A  0020               	movlb	0	; select bank0
 10295  0E8B  0831               	movf	Sensor_autoCalibration@sensor,w
 10296  0E8C  3E02               	addlw	2
 10297  0E8D  0086               	movwf	6
 10298  0E8E  3001               	movlw	1	; select bank2/3
 10299  0E8F  0087               	movwf	7
 10300  0E90  0878               	movf	??_Sensor_autoCalibration,w
 10301  0E91  0081               	movwf	1
 10302                           
 10303                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
 10304  0E92  0831               	movf	Sensor_autoCalibration@sensor,w
 10305  0E93  3195  25B6         	fcall	_Sensor_setCalibrated
 10306                           
 10307                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
 10308  0E95  0008               	return
 10309  0E96                     l4893:	
 10310                           
 10311                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
 10312  0E96  3002               	movlw	2
 10313  0E97  00F8               	movwf	??_Sensor_autoCalibration
 10314  0E98  0020               	movlb	0	; select bank0
 10315  0E99  0831               	movf	Sensor_autoCalibration@sensor,w
 10316  0E9A  3E03               	addlw	3
 10317  0E9B  0086               	movwf	6
 10318  0E9C  3001               	movlw	1	; select bank2/3
 10319  0E9D  0087               	movwf	7
 10320  0E9E  0878               	movf	??_Sensor_autoCalibration,w
 10321  0E9F  0781               	addwf	1,f
 10322                           
 10323                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10324  0EA0  0831               	movf	Sensor_autoCalibration@sensor,w
 10325  0EA1  3E03               	addlw	3
 10326  0EA2  0086               	movwf	6
 10327  0EA3  3001               	movlw	1	; select bank2/3
 10328  0EA4  0087               	movwf	7
 10329  0EA5  3020               	movlw	32
 10330  0EA6  0201               	subwf	1,w
 10331  0EA7  1C03               	skipc
 10332  0EA8  0008               	return
 10333                           
 10334                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10335  0EA9  3020               	movlw	32
 10336  0EAA  00F8               	movwf	??_Sensor_autoCalibration
 10337  0EAB  0831               	movf	Sensor_autoCalibration@sensor,w
 10338  0EAC  3E02               	addlw	2
 10339  0EAD  0086               	movwf	6
 10340  0EAE  3001               	movlw	1	; select bank2/3
 10341  0EAF  0087               	movwf	7
 10342  0EB0  0878               	movf	??_Sensor_autoCalibration,w
 10343  0EB1  0081               	movwf	1
 10344                           
 10345                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
 10346  0EB2  0831               	movf	Sensor_autoCalibration@sensor,w
 10347  0EB3  3195  25B6         	fcall	_Sensor_setCalibrated
 10348  0EB5  0008               	return
 10349  0EB6                     __end_of_Sensor_autoCalibration:	
 10350                           
 10351                           	psect	text57
 10352  1712                     __ptext57:	
 10353 ;; *************** function _abs *****************
 10354 ;; Defined at:
 10355 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10356 ;; Parameters:    Size  Location     Type
 10357 ;;  a               2    4[COMMON] int 
 10358 ;; Auto vars:     Size  Location     Type
 10359 ;;		None
 10360 ;; Return value:  Size  Location     Type
 10361 ;;                  2    4[COMMON] int 
 10362 ;; Registers used:
 10363 ;;		wreg, status,2, status,0
 10364 ;; Tracked objects:
 10365 ;;		On entry : 0/0
 10366 ;;		On exit  : 0/0
 10367 ;;		Unchanged: 0/0
 10368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10369 ;;      Params:         2       0       0       0       0       0       0       0
 10370 ;;      Locals:         0       0       0       0       0       0       0       0
 10371 ;;      Temps:          2       0       0       0       0       0       0       0
 10372 ;;      Totals:         4       0       0       0       0       0       0       0
 10373 ;;Total ram usage:        4 bytes
 10374 ;; Hardware stack levels used:    1
 10375 ;; Hardware stack levels required when called:    4
 10376 ;; This function calls:
 10377 ;;		Nothing
 10378 ;; This function is called by:
 10379 ;;		_Sensor_postAcquisitionProcess
 10380 ;;		_Sensor_Acq_ExecutePacket
 10381 ;;		_Sensor_autoCalibration
 10382 ;;		_dtoa
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           
 10387                           ;psect for function _abs
 10388  1712                     _abs:	
 10389                           
 10390                           ;incstack = 0
 10391                           ; Regs used in _abs: [wreg+status,2+status,0]
 10392  1712  0875               	movf	abs@a+1,w
 10393  1713  3A80               	xorlw	128
 10394  1714  00F6               	movwf	??_abs
 10395  1715  3080               	movlw	128
 10396  1716  0276               	subwf	??_abs,w
 10397  1717  1D03               	skipz
 10398  1718  2F1B               	goto	u4875
 10399  1719  3001               	movlw	1
 10400  171A  0274               	subwf	abs@a,w
 10401  171B                     u4875:	
 10402  171B  1803               	skipnc
 10403  171C  0008               	return
 10404  171D  0974               	comf	abs@a,w
 10405  171E  00F6               	movwf	??_abs
 10406  171F  0975               	comf	abs@a+1,w
 10407  1720  00F7               	movwf	??_abs+1
 10408  1721  0AF6               	incf	??_abs,f
 10409  1722  1903               	skipnz
 10410  1723  0AF7               	incf	??_abs+1,f
 10411  1724  0876               	movf	??_abs,w
 10412  1725  00F4               	movwf	?_abs
 10413  1726  0877               	movf	??_abs+1,w
 10414  1727  00F5               	movwf	?_abs+1
 10415  1728  0008               	return
 10416  1729                     __end_of_abs:	
 10417                           
 10418                           	psect	text58
 10419  15B6                     __ptext58:	
 10420 ;; *************** function _Sensor_setCalibrated *****************
 10421 ;; Defined at:
 10422 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  sensor          1    wreg     PTR struct .
 10425 ;;		 -> NULL(0), mtouch_sensor(27), 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  sensor          1    1[COMMON] PTR struct .
 10428 ;;		 -> NULL(0), mtouch_sensor(27), 
 10429 ;; Return value:  Size  Location     Type
 10430 ;;                  1    wreg      void 
 10431 ;; Registers used:
 10432 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10433 ;; Tracked objects:
 10434 ;;		On entry : 0/0
 10435 ;;		On exit  : 0/0
 10436 ;;		Unchanged: 0/0
 10437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10438 ;;      Params:         0       0       0       0       0       0       0       0
 10439 ;;      Locals:         1       0       0       0       0       0       0       0
 10440 ;;      Temps:          0       0       0       0       0       0       0       0
 10441 ;;      Totals:         1       0       0       0       0       0       0       0
 10442 ;;Total ram usage:        1 bytes
 10443 ;; Hardware stack levels used:    1
 10444 ;; Hardware stack levels required when called:    4
 10445 ;; This function calls:
 10446 ;;		Nothing
 10447 ;; This function is called by:
 10448 ;;		_Sensor_autoCalibration
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           
 10453                           ;psect for function _Sensor_setCalibrated
 10454  15B6                     _Sensor_setCalibrated:	
 10455                           
 10456                           ;incstack = 0
 10457                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10458                           ;Sensor_setCalibrated@sensor stored from wreg
 10459  15B6  00F1               	movwf	Sensor_setCalibrated@sensor
 10460                           
 10461                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
 10462  15B7  0871               	movf	Sensor_setCalibrated@sensor,w
 10463  15B8  3E08               	addlw	8
 10464  15B9  0086               	movwf	6
 10465  15BA  3001               	movlw	1	; select bank2/3
 10466  15BB  0087               	movwf	7
 10467  15BC  1501               	bsf	1,2
 10468                           
 10469                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
 10470  15BD  0871               	movf	Sensor_setCalibrated@sensor,w
 10471  15BE  3E08               	addlw	8
 10472  15BF  0086               	movwf	6
 10473  15C0  3001               	movlw	1	; select bank2/3
 10474  15C1  0087               	movwf	7
 10475  15C2  1201               	bcf	1,4
 10476  15C3  0008               	return
 10477  15C4                     __end_of_Sensor_setCalibrated:	
 10478                           
 10479                           	psect	text59
 10480  15E1                     __ptext59:	
 10481 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10482 ;; Defined at:
 10483 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;  sensor          1    wreg     PTR struct .
 10486 ;;		 -> NULL(0), mtouch_sensor(27), 
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;  sensor          1    1[COMMON] PTR struct .
 10489 ;;		 -> NULL(0), mtouch_sensor(27), 
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  1    wreg      void 
 10492 ;; Registers used:
 10493 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10494 ;; Tracked objects:
 10495 ;;		On entry : 0/0
 10496 ;;		On exit  : 0/0
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10499 ;;      Params:         0       0       0       0       0       0       0       0
 10500 ;;      Locals:         1       0       0       0       0       0       0       0
 10501 ;;      Temps:          0       0       0       0       0       0       0       0
 10502 ;;      Totals:         1       0       0       0       0       0       0       0
 10503 ;;Total ram usage:        1 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:    4
 10506 ;; This function calls:
 10507 ;;		Nothing
 10508 ;; This function is called by:
 10509 ;;		_Sensor_autoCalibration
 10510 ;; This function uses a non-reentrant model
 10511 ;;
 10512                           
 10513                           
 10514                           ;psect for function _Sensor_setCalibratAcqTime
 10515  15E1                     _Sensor_setCalibratAcqTime:	
 10516                           
 10517                           ;incstack = 0
 10518                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10519                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10520  15E1  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 10521                           
 10522                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
 10523  15E2  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10524  15E3  3E08               	addlw	8
 10525  15E4  0086               	movwf	6
 10526  15E5  3001               	movlw	1	; select bank2/3
 10527  15E6  0087               	movwf	7
 10528  15E7  1601               	bsf	1,4
 10529                           
 10530                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10531  15E8  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10532  15E9  3E03               	addlw	3
 10533  15EA  0086               	movwf	6
 10534  15EB  3001               	movlw	1	; select bank2/3
 10535  15EC  0087               	movwf	7
 10536  15ED  0181               	clrf	1
 10537  15EE  0A81               	incf	1,f
 10538  15EF  0008               	return
 10539  15F0                     __end_of_Sensor_setCalibratAcqTime:	
 10540                           
 10541                           	psect	text60
 10542  1571                     __ptext60:	
 10543 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10544 ;; Defined at:
 10545 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;  sensor          1    wreg     PTR struct .
 10548 ;;		 -> NULL(0), mtouch_sensor(27), 
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;  sensor          1    1[COMMON] PTR struct .
 10551 ;;		 -> NULL(0), mtouch_sensor(27), 
 10552 ;; Return value:  Size  Location     Type
 10553 ;;                  1    wreg      _Bool 
 10554 ;; Registers used:
 10555 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10561 ;;      Params:         0       0       0       0       0       0       0       0
 10562 ;;      Locals:         1       0       0       0       0       0       0       0
 10563 ;;      Temps:          0       0       0       0       0       0       0       0
 10564 ;;      Totals:         1       0       0       0       0       0       0       0
 10565 ;;Total ram usage:        1 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:    4
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		_Sensor_loadADCSettings
 10572 ;;		_Sensor_autoCalibration
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           
 10577                           ;psect for function _Sensor_isCalibratingAcqTime
 10578  1571                     _Sensor_isCalibratingAcqTime:	
 10579                           
 10580                           ;incstack = 0
 10581                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10582                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10583  1571  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
 10584                           
 10585                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10586  1572  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10587  1573  3E08               	addlw	8
 10588  1574  0086               	movwf	6
 10589  1575  3001               	movlw	1	; select bank2/3
 10590  1576  0087               	movwf	7
 10591  1577  0E01               	swapf	1,w
 10592  1578  3901               	andlw	1
 10593  1579  0008               	return
 10594  157A                     __end_of_Sensor_isCalibratingAcqTime:	
 10595                           
 10596                           	psect	text61
 10597  08C6                     __ptext61:	
 10598 ;; *************** function _Sensor_getScanGroupIndex *****************
 10599 ;; Defined at:
 10600 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;  sensor          1    wreg     PTR struct .
 10603 ;;		 -> NULL(0), mtouch_sensor(27), 
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  sensor          1    3[COMMON] PTR struct .
 10606 ;;		 -> NULL(0), mtouch_sensor(27), 
 10607 ;;  sensorGroup     1    4[COMMON] unsigned char 
 10608 ;; Return value:  Size  Location     Type
 10609 ;;                  1    wreg      unsigned char 
 10610 ;; Registers used:
 10611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10612 ;; Tracked objects:
 10613 ;;		On entry : 0/0
 10614 ;;		On exit  : 0/0
 10615 ;;		Unchanged: 0/0
 10616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10617 ;;      Params:         0       0       0       0       0       0       0       0
 10618 ;;      Locals:         2       0       0       0       0       0       0       0
 10619 ;;      Temps:          2       0       0       0       0       0       0       0
 10620 ;;      Totals:         4       0       0       0       0       0       0       0
 10621 ;;Total ram usage:        4 bytes
 10622 ;; Hardware stack levels used:    1
 10623 ;; Hardware stack levels required when called:    4
 10624 ;; This function calls:
 10625 ;;		Nothing
 10626 ;; This function is called by:
 10627 ;;		_Sensor_postAcquisitionProcess
 10628 ;;		_Sensor_autoCalibration
 10629 ;;		_Sensor_RawSample_Update
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           
 10634                           ;psect for function _Sensor_getScanGroupIndex
 10635  08C6                     _Sensor_getScanGroupIndex:	
 10636                           
 10637                           ;incstack = 0
 10638                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10639                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10640  08C6  00F3               	movwf	Sensor_getScanGroupIndex@sensor
 10641                           
 10642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 10643  08C7  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10644  08C8                     l4839:	
 10645                           
 10646                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10647  08C8  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10648  08C9  00F1               	movwf	??_Sensor_getScanGroupIndex
 10649  08CA  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10650  08CB  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10651  08CC  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10652  08CD  3058               	movlw	low (_sensor_scan_group| (0+32768))
 10653  08CE  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10654  08CF  0084               	movwf	4
 10655  08D0  3098               	movlw	high (_sensor_scan_group| (0+32768))
 10656  08D1  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10657  08D2  0085               	movwf	5
 10658  08D3  0800               	movf	0,w	;code access
 10659  08D4  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10660  08D5  1D03               	skipz
 10661  08D6  28D9               	goto	l4845
 10662  08D7                     l4841:	
 10663                           
 10664                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
 10665  08D7  3000               	movlw	0
 10666  08D8  0008               	return
 10667  08D9                     l4845:	
 10668                           
 10669                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 10670  08D9  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10671  08DA  00F1               	movwf	??_Sensor_getScanGroupIndex
 10672  08DB  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10673  08DC  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10674  08DD  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10675  08DE  3059               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 10676  08DF  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10677  08E0  0084               	movwf	4
 10678  08E1  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 10679  08E2  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10680  08E3  0085               	movwf	5
 10681  08E4  0800               	movf	0,w	;code access
 10682  08E5  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10683  08E6  1D03               	skipz
 10684  08E7  28EA               	goto	l4851
 10685                           
 10686                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
 10687  08E8  3001               	movlw	1
 10688  08E9  0008               	return
 10689  08EA                     l4851:	
 10690                           
 10691                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
 10692  08EA  3001               	movlw	1
 10693  08EB  00F1               	movwf	??_Sensor_getScanGroupIndex
 10694  08EC  0871               	movf	??_Sensor_getScanGroupIndex,w
 10695  08ED  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 10696  08EE  3002               	movlw	2
 10697  08EF  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 10698  08F0  1803               	btfsc	3,0
 10699  08F1  28D7               	goto	l4841
 10700  08F2  28C8               	goto	l4839
 10701  08F3                     __end_of_Sensor_getScanGroupIndex:	
 10702                           
 10703                           	psect	text62
 10704  1600                     __ptext62:	
 10705 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10706 ;; Defined at:
 10707 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		wreg, status,2, status,0
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10721 ;;      Params:         0       0       0       0       0       0       0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0
 10724 ;;      Totals:         0       0       0       0       0       0       0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:    4
 10728 ;; This function calls:
 10729 ;;		Nothing
 10730 ;; This function is called by:
 10731 ;;		_MTOUCH_Initialize
 10732 ;;		_Sensor_Acq_ExecutePacket
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           
 10737                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10738  1600                     _MTOUCH_Sensor_Scan_Initialize:	
 10739                           
 10740                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
 10741                           
 10742                           ;incstack = 0
 10743                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10744  1600  30FC               	movlw	-4
 10745  1601  0020               	movlb	0	; select bank0
 10746  1602  059C               	andwf	28,f	;volatile
 10747                           
 10748                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
 10749  1603  002E               	movlb	14	; select bank14
 10750  1604  0191               	clrf	17	;volatile
 10751                           
 10752                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
 10753  1605  002F               	movlb	15	; select bank15
 10754  1606  0191               	clrf	17	;volatile
 10755                           
 10756                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 10757  1607  3090               	movlw	144
 10758  1608  002E               	movlb	14	; select bank14
 10759  1609  0092               	movwf	18	;volatile
 10760                           
 10761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
 10762  160A  3040               	movlw	64
 10763  160B  0094               	movwf	20	;volatile
 10764                           
 10765                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
 10766  160C  3040               	movlw	64
 10767  160D  002F               	movlb	15	; select bank15
 10768  160E  0094               	movwf	20	;volatile
 10769  160F  0008               	return
 10770  1610                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10771                           
 10772                           	psect	text63
 10773  15F0                     __ptext63:	
 10774 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10775 ;; Defined at:
 10776 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;		None
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  button          1   14[BANK0 ] enum E3069
 10781 ;; Return value:  Size  Location     Type
 10782 ;;                  1    wreg      void 
 10783 ;; Registers used:
 10784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10785 ;; Tracked objects:
 10786 ;;		On entry : 0/0
 10787 ;;		On exit  : 0/0
 10788 ;;		Unchanged: 0/0
 10789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10790 ;;      Params:         0       0       0       0       0       0       0       0
 10791 ;;      Locals:         0       1       0       0       0       0       0       0
 10792 ;;      Temps:          0       1       0       0       0       0       0       0
 10793 ;;      Totals:         0       2       0       0       0       0       0       0
 10794 ;;Total ram usage:        2 bytes
 10795 ;; Hardware stack levels used:    1
 10796 ;; Hardware stack levels required when called:   10
 10797 ;; This function calls:
 10798 ;;		_Button_Service
 10799 ;; This function is called by:
 10800 ;;		_MTOUCH_Service_Mainloop
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           
 10805                           ;psect for function _MTOUCH_Button_ServiceAll
 10806  15F0                     _MTOUCH_Button_ServiceAll:	
 10807                           
 10808                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
 10809                           
 10810                           ;incstack = 0
 10811                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10812  15F0  0020               	movlb	0	; select bank0
 10813  15F1  01AE               	clrf	MTOUCH_Button_ServiceAll@button
 10814  15F2                     l5595:	
 10815                           
 10816                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
 10817  15F2  082E               	movf	MTOUCH_Button_ServiceAll@button,w
 10818  15F3  318A  22F6  3195   	fcall	_Button_Service
 10819                           
 10820                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
 10821  15F6  3001               	movlw	1
 10822  15F7  0020               	movlb	0	; select bank0
 10823  15F8  00AD               	movwf	??_MTOUCH_Button_ServiceAll
 10824  15F9  082D               	movf	??_MTOUCH_Button_ServiceAll,w
 10825  15FA  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
 10826  15FB  3003               	movlw	3
 10827  15FC  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
 10828  15FD  1803               	btfsc	3,0
 10829  15FE  0008               	return
 10830  15FF  2DF2               	goto	l5595
 10831  1600                     __end_of_MTOUCH_Button_ServiceAll:	
 10832                           
 10833                           	psect	text64
 10834  0AF6                     __ptext64:	
 10835 ;; *************** function _Button_Service *****************
 10836 ;; Defined at:
 10837 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;  name            1    wreg     enum E3069
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;  name            1   11[BANK0 ] enum E3069
 10842 ;;  button          1   12[BANK0 ] PTR struct .
 10843 ;;		 -> mtouch_button(48), 
 10844 ;; Return value:  Size  Location     Type
 10845 ;;                  1    wreg      void 
 10846 ;; Registers used:
 10847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10853 ;;      Params:         0       0       0       0       0       0       0       0
 10854 ;;      Locals:         0       2       0       0       0       0       0       0
 10855 ;;      Temps:          0       2       0       0       0       0       0       0
 10856 ;;      Totals:         0       4       0       0       0       0       0       0
 10857 ;;Total ram usage:        4 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    9
 10860 ;; This function calls:
 10861 ;;		_Button_Deviation_Update
 10862 ;;		_Button_Reading_Update
 10863 ;;		_Button_State_Initializing
 10864 ;;		_Button_State_NotPressed
 10865 ;;		_Button_State_Pressed
 10866 ;;		_MTOUCH_Button_Initialize
 10867 ;;		_MTOUCH_Sensor_isCalibrated
 10868 ;;		_MTOUCH_Sensor_wasSampled
 10869 ;; This function is called by:
 10870 ;;		_MTOUCH_Button_ServiceAll
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           
 10875                           ;psect for function _Button_Service
 10876  0AF6                     _Button_Service:	
 10877                           
 10878                           ;incstack = 0
 10879                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10880                           ;Button_Service@name stored from wreg
 10881  0AF6  0020               	movlb	0	; select bank0
 10882  0AF7  00AB               	movwf	Button_Service@name
 10883                           
 10884                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
 10885  0AF8  082B               	movf	Button_Service@name,w
 10886  0AF9  00A9               	movwf	??_Button_Service
 10887  0AFA  3003               	movlw	3
 10888  0AFB                     u5945:	
 10889  0AFB  35A9               	lslf	??_Button_Service,f
 10890  0AFC  3EFF               	addlw	-1
 10891  0AFD  1D03               	skipz
 10892  0AFE  2AFB               	goto	u5945
 10893  0AFF  3529               	lslf	??_Button_Service,w
 10894  0B00  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10895  0B01  00AA               	movwf	??_Button_Service+1
 10896  0B02  082A               	movf	??_Button_Service+1,w
 10897  0B03  00AC               	movwf	Button_Service@button
 10898                           
 10899                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10900  0B04  0A2C               	incf	Button_Service@button,w
 10901  0B05  0086               	movwf	6
 10902  0B06  3001               	movlw	1	; select bank2/3
 10903  0B07  0087               	movwf	7
 10904  0B08  0801               	movf	1,w
 10905  0B09  3195  25D2  318A   	fcall	_MTOUCH_Sensor_wasSampled
 10906  0B0C  3A00               	xorlw	0
 10907  0B0D  1903               	skipnz
 10908  0B0E  0008               	return
 10909  0B0F  0020               	movlb	0	; select bank0
 10910  0B10  0A2C               	incf	Button_Service@button,w
 10911  0B11  0086               	movwf	6
 10912  0B12  3001               	movlw	1	; select bank2/3
 10913  0B13  0087               	movwf	7
 10914  0B14  0801               	movf	1,w
 10915  0B15  3196  26B9  318A   	fcall	_MTOUCH_Sensor_isCalibrated
 10916  0B18  3A00               	xorlw	0
 10917  0B19  1903               	skipnz
 10918  0B1A  0008               	return
 10919                           
 10920                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
 10921  0B1B  0020               	movlb	0	; select bank0
 10922  0B1C  082C               	movf	Button_Service@button,w
 10923  0B1D  3195  25A8  318A   	fcall	_Button_Reading_Update
 10924                           
 10925                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
 10926  0B20  0020               	movlb	0	; select bank0
 10927  0B21  082C               	movf	Button_Service@button,w
 10928  0B22  318C  2471  318A   	fcall	_Button_Deviation_Update
 10929                           
 10930                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10931  0B25  0020               	movlb	0	; select bank0
 10932  0B26  082C               	movf	Button_Service@button,w
 10933  0B27  3E02               	addlw	2
 10934  0B28  0086               	movwf	6
 10935  0B29  3001               	movlw	1	; select bank2/3
 10936  0B2A  0087               	movwf	7
 10937  0B2B  3003               	movlw	3
 10938  0B2C  0201               	subwf	1,w
 10939  0B2D  1C03               	skipc
 10940  0B2E  2B37               	goto	l5515
 10941                           
 10942                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
 10943  0B2F  082C               	movf	Button_Service@button,w
 10944  0B30  0086               	movwf	6
 10945  0B31  3001               	movlw	1	; select bank2/3
 10946  0B32  0087               	movwf	7
 10947  0B33  0801               	movf	1,w
 10948  0B34  3189  21E6  318A   	fcall	_MTOUCH_Button_Initialize
 10949  0B37                     l5515:	
 10950                           
 10951                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10952  0B37  0020               	movlb	0	; select bank0
 10953  0B38  082C               	movf	Button_Service@button,w
 10954  0B39  00A9               	movwf	??_Button_Service
 10955  0B3A  0829               	movf	??_Button_Service,w
 10956  0B3B  00A4               	movwf	Button_State_Pressed@button
 10957  0B3C  082C               	movf	Button_Service@button,w
 10958  0B3D  3E02               	addlw	2
 10959  0B3E  0086               	movwf	6
 10960  0B3F  3001               	movlw	1	; select bank2/3
 10961  0B40  0087               	movwf	7
 10962  0B41  3501               	lslf	1,w
 10963  0B42  3ED3               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 10964  0B43  0086               	movwf	6
 10965  0B44  0187               	clrf	7
 10966  0B45  3F41               	moviw [1]fsr1
 10967  0B46  008A               	movwf	10
 10968  0B47  3F40               	moviw [0]fsr1
 10969  0B48  000A               	callw
 10970  0B49  318A               	pagesel	$
 10971  0B4A  0008               	return
 10972  0B4B                     __end_of_Button_Service:	
 10973                           
 10974                           	psect	text65
 10975  15D2                     __ptext65:	
 10976 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10977 ;; Defined at:
 10978 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;  sensor          1    wreg     enum E2864
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;  sensor          1    6[COMMON] enum E2864
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      _Bool 
 10985 ;; Registers used:
 10986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10992 ;;      Params:         0       0       0       0       0       0       0       0
 10993 ;;      Locals:         1       0       0       0       0       0       0       0
 10994 ;;      Temps:          1       0       0       0       0       0       0       0
 10995 ;;      Totals:         2       0       0       0       0       0       0       0
 10996 ;;Total ram usage:        2 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    5
 10999 ;; This function calls:
 11000 ;;		___bmul
 11001 ;; This function is called by:
 11002 ;;		_Button_Service
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           
 11007                           ;psect for function _MTOUCH_Sensor_wasSampled
 11008  15D2                     _MTOUCH_Sensor_wasSampled:	
 11009                           
 11010                           ;incstack = 0
 11011                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11012                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 11013  15D2  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
 11014                           
 11015                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
 11016  15D3  3009               	movlw	9
 11017  15D4  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
 11018  15D5  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
 11019  15D6  00F1               	movwf	___bmul@multiplicand
 11020  15D7  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 11021  15D8  3196  2610         	fcall	___bmul
 11022  15DA  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11023  15DB  0086               	movwf	6
 11024  15DC  3001               	movlw	1	; select bank2/3
 11025  15DD  0087               	movwf	7
 11026  15DE  0801               	movf	1,w
 11027  15DF  3901               	andlw	1
 11028  15E0  0008               	return
 11029  15E1                     __end_of_MTOUCH_Sensor_wasSampled:	
 11030                           
 11031                           	psect	text66
 11032  16B9                     __ptext66:	
 11033 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 11034 ;; Defined at:
 11035 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;  sensor          1    wreg     enum E2864
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  sensor          1    6[COMMON] enum E2864
 11040 ;; Return value:  Size  Location     Type
 11041 ;;                  1    wreg      _Bool 
 11042 ;; Registers used:
 11043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11049 ;;      Params:         0       0       0       0       0       0       0       0
 11050 ;;      Locals:         1       0       0       0       0       0       0       0
 11051 ;;      Temps:          1       0       0       0       0       0       0       0
 11052 ;;      Totals:         2       0       0       0       0       0       0       0
 11053 ;;Total ram usage:        2 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    5
 11056 ;; This function calls:
 11057 ;;		___bmul
 11058 ;; This function is called by:
 11059 ;;		_Button_Service
 11060 ;; This function uses a non-reentrant model
 11061 ;;
 11062                           
 11063                           
 11064                           ;psect for function _MTOUCH_Sensor_isCalibrated
 11065  16B9                     _MTOUCH_Sensor_isCalibrated:	
 11066                           
 11067                           ;incstack = 0
 11068                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11069                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 11070  16B9  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 11071                           
 11072                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
 11073  16BA  3003               	movlw	3
 11074  16BB  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 11075  16BC  1803               	skipnc
 11076  16BD  2ECD               	goto	l5307
 11077                           
 11078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 11079  16BE  3009               	movlw	9
 11080  16BF  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
 11081  16C0  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
 11082  16C1  00F1               	movwf	___bmul@multiplicand
 11083  16C2  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 11084  16C3  3196  2610         	fcall	___bmul
 11085  16C5  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11086  16C6  0086               	movwf	6
 11087  16C7  3001               	movlw	1	; select bank2/3
 11088  16C8  0087               	movwf	7
 11089  16C9  0C01               	rrf	1,w
 11090  16CA  0C89               	rrf	9,f
 11091  16CB  3901               	andlw	1
 11092  16CC  0008               	return
 11093  16CD                     l5307:	
 11094                           
 11095                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
 11096  16CD  3000               	movlw	0
 11097  16CE  0008               	return
 11098  16CF                     __end_of_MTOUCH_Sensor_isCalibrated:	
 11099                           
 11100                           	psect	text67
 11101  0EB6                     __ptext67:	
 11102 ;; *************** function _Button_State_NotPressed *****************
 11103 ;; Defined at:
 11104 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;  button          1    4[BANK0 ] PTR struct .
 11107 ;;		 -> mtouch_button(48), 
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;		None
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      void 
 11112 ;; Registers used:
 11113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11114 ;; Tracked objects:
 11115 ;;		On entry : 0/0
 11116 ;;		On exit  : 0/0
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11119 ;;      Params:         0       1       0       0       0       0       0       0
 11120 ;;      Locals:         0       0       0       0       0       0       0       0
 11121 ;;      Temps:          0       2       0       0       0       0       0       0
 11122 ;;      Totals:         0       3       0       0       0       0       0       0
 11123 ;;Total ram usage:        3 bytes
 11124 ;; Hardware stack levels used:    1
 11125 ;; Hardware stack levels required when called:    8
 11126 ;; This function calls:
 11127 ;;		_Button_Baseline_Update
 11128 ;;		_Button_DefaultCallback
 11129 ;;		_MTOUCH_Button_Initialize
 11130 ;;		_myButtonPressedCallback
 11131 ;; This function is called by:
 11132 ;;		_Button_Service
 11133 ;; This function uses a non-reentrant model
 11134 ;;
 11135                           
 11136                           
 11137                           ;psect for function _Button_State_NotPressed
 11138  0EB6                     _Button_State_NotPressed:	
 11139                           
 11140                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 11141                           
 11142                           ;incstack = 0
 11143                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11144  0EB6  0020               	movlb	0	; select bank0
 11145  0EB7  0824               	movf	Button_State_NotPressed@button,w
 11146  0EB8  3E09               	addlw	9
 11147  0EB9  0086               	movwf	6
 11148  0EBA  3001               	movlw	1	; select bank2/3
 11149  0EBB  0087               	movwf	7
 11150  0EBC  0801               	movf	1,w
 11151  0EBD  3A80               	xorlw	128
 11152  0EBE  00A5               	movwf	??_Button_State_NotPressed
 11153  0EBF  0824               	movf	Button_State_NotPressed@button,w
 11154  0EC0  3E0E               	addlw	14
 11155  0EC1  0086               	movwf	6
 11156  0EC2  3001               	movlw	1	; select bank2/3
 11157  0EC3  0087               	movwf	7
 11158  0EC4  0301               	decf	1,w
 11159  0EC5  3AFF               	xorlw	255
 11160  0EC6  3A80               	xorlw	128
 11161  0EC7  02A5               	subwf	??_Button_State_NotPressed,f
 11162  0EC8  1803               	skipnc
 11163  0EC9  2EF5               	goto	l5357
 11164                           
 11165                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
 11166  0ECA  0824               	movf	Button_State_NotPressed@button,w
 11167  0ECB  3E0A               	addlw	10
 11168  0ECC  0086               	movwf	6
 11169  0ECD  3001               	movlw	1	; select bank2/3
 11170  0ECE  0087               	movwf	7
 11171  0ECF  3001               	movlw	1
 11172  0ED0  0781               	addwf	1,f
 11173  0ED1  3141               	addfsr 1,1
 11174  0ED2  1803               	skipnc
 11175  0ED3  0A81               	incf	1,f
 11176                           
 11177                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 11178  0ED4  0824               	movf	Button_State_NotPressed@button,w
 11179  0ED5  3E0A               	addlw	10
 11180  0ED6  0086               	movwf	6
 11181  0ED7  3001               	movlw	1	; select bank2/3
 11182  0ED8  0087               	movwf	7
 11183  0ED9  3F40               	moviw [0]fsr1
 11184  0EDA  00A5               	movwf	??_Button_State_NotPressed
 11185  0EDB  3F41               	moviw [1]fsr1
 11186  0EDC  00A6               	movwf	??_Button_State_NotPressed+1
 11187  0EDD  3000               	movlw	0
 11188  0EDE  0226               	subwf	??_Button_State_NotPressed+1,w
 11189  0EDF  3041               	movlw	65
 11190  0EE0  1903               	skipnz
 11191  0EE1  0225               	subwf	??_Button_State_NotPressed,w
 11192  0EE2  1C03               	skipc
 11193  0EE3  2F37               	goto	l518
 11194                           
 11195                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
 11196  0EE4  0824               	movf	Button_State_NotPressed@button,w
 11197  0EE5  3E0A               	addlw	10
 11198  0EE6  0086               	movwf	6
 11199  0EE7  3001               	movlw	1	; select bank2/3
 11200  0EE8  0087               	movwf	7
 11201  0EE9  3000               	movlw	0
 11202  0EEA  3FC0               	movwi [0]fsr1
 11203  0EEB  3FC1               	movwi [1]fsr1
 11204                           
 11205                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 11206  0EEC  0824               	movf	Button_State_NotPressed@button,w
 11207  0EED  0086               	movwf	6
 11208  0EEE  3001               	movlw	1	; select bank2/3
 11209  0EEF  0087               	movwf	7
 11210  0EF0  0801               	movf	1,w
 11211  0EF1  3189  21E6  318E   	fcall	_MTOUCH_Button_Initialize
 11212  0EF4  2F37               	goto	l518
 11213  0EF5                     l5357:	
 11214  0EF5  0824               	movf	Button_State_NotPressed@button,w
 11215  0EF6  3E09               	addlw	9
 11216  0EF7  0086               	movwf	6
 11217  0EF8  3001               	movlw	1	; select bank2/3
 11218  0EF9  0087               	movwf	7
 11219  0EFA  0801               	movf	1,w
 11220  0EFB  00A5               	movwf	??_Button_State_NotPressed
 11221  0EFC  01A6               	clrf	??_Button_State_NotPressed+1
 11222  0EFD  1BA5               	btfsc	??_Button_State_NotPressed,7
 11223  0EFE  03A6               	decf	??_Button_State_NotPressed+1,f
 11224  0EFF  0824               	movf	Button_State_NotPressed@button,w
 11225  0F00  3E0E               	addlw	14
 11226  0F01  0086               	movwf	6
 11227  0F02  3001               	movlw	1	; select bank2/3
 11228  0F03  0087               	movwf	7
 11229  0F04  0826               	movf	??_Button_State_NotPressed+1,w
 11230  0F05  3A80               	xorlw	128
 11231  0F06  3C80               	sublw	128
 11232  0F07  1D03               	skipz
 11233  0F08  2F0B               	goto	u5685
 11234  0F09  0825               	movf	??_Button_State_NotPressed,w
 11235  0F0A  0201               	subwf	1,w
 11236  0F0B                     u5685:	
 11237  0F0B  1803               	skipnc
 11238  0F0C  2F2E               	goto	l5363
 11239                           
 11240                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
 11241  0F0D  3002               	movlw	2
 11242  0F0E  0020               	movlb	0	; select bank0
 11243  0F0F  00A5               	movwf	??_Button_State_NotPressed
 11244  0F10  0824               	movf	Button_State_NotPressed@button,w
 11245  0F11  3E02               	addlw	2
 11246  0F12  0086               	movwf	6
 11247  0F13  3001               	movlw	1	; select bank2/3
 11248  0F14  0087               	movwf	7
 11249  0F15  0825               	movf	??_Button_State_NotPressed,w
 11250  0F16  0081               	movwf	1
 11251                           
 11252                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11253  0F17  0824               	movf	Button_State_NotPressed@button,w
 11254  0F18  3E0A               	addlw	10
 11255  0F19  0086               	movwf	6
 11256  0F1A  3001               	movlw	1	; select bank2/3
 11257  0F1B  0087               	movwf	7
 11258  0F1C  3000               	movlw	0
 11259  0F1D  3FC0               	movwi [0]fsr1
 11260  0F1E  3FC1               	movwi [1]fsr1
 11261                           
 11262                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
 11263  0F1F  0824               	movf	Button_State_NotPressed@button,w
 11264  0F20  0086               	movwf	6
 11265  0F21  3001               	movlw	1	; select bank2/3
 11266  0F22  0087               	movwf	7
 11267  0F23  0801               	movf	1,w
 11268  0F24  00A5               	movwf	??_Button_State_NotPressed
 11269  0F25  0825               	movf	??_Button_State_NotPressed,w
 11270  0F26  00F8               	movwf	myButtonPressedCallback@button
 11271  0F27  0021               	movlb	1	; select bank1
 11272  0F28  085C               	movf	(_callback_pressed+1)^(0+128),w
 11273  0F29  008A               	movwf	10
 11274  0F2A  085B               	movf	_callback_pressed^(0+128),w
 11275  0F2B  000A               	callw
 11276  0F2C  318E               	pagesel	$
 11277                           
 11278                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
 11279  0F2D  2F37               	goto	l518
 11280  0F2E                     l5363:	
 11281                           
 11282                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
 11283  0F2E  0020               	movlb	0	; select bank0
 11284  0F2F  0824               	movf	Button_State_NotPressed@button,w
 11285  0F30  3E0A               	addlw	10
 11286  0F31  0086               	movwf	6
 11287  0F32  3001               	movlw	1	; select bank2/3
 11288  0F33  0087               	movwf	7
 11289  0F34  3000               	movlw	0
 11290  0F35  3FC0               	movwi [0]fsr1
 11291  0F36  3FC1               	movwi [1]fsr1
 11292  0F37                     l518:	
 11293                           
 11294                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
 11295  0F37  0020               	movlb	0	; select bank0
 11296  0F38  0824               	movf	Button_State_NotPressed@button,w
 11297  0F39  3E0C               	addlw	12
 11298  0F3A  0086               	movwf	6
 11299  0F3B  3001               	movlw	1	; select bank2/3
 11300  0F3C  0087               	movwf	7
 11301  0F3D  3001               	movlw	1
 11302  0F3E  0781               	addwf	1,f
 11303  0F3F  3141               	addfsr 1,1
 11304  0F40  1803               	skipnc
 11305  0F41  0A81               	incf	1,f
 11306                           
 11307                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 11308  0F42  0824               	movf	Button_State_NotPressed@button,w
 11309  0F43  3E0C               	addlw	12
 11310  0F44  0086               	movwf	6
 11311  0F45  3001               	movlw	1	; select bank2/3
 11312  0F46  0087               	movwf	7
 11313  0F47  0016               	moviw fsr1++
 11314  0F48  3A40               	xorlw	64
 11315  0F49  00A5               	movwf	??_Button_State_NotPressed
 11316  0F4A  0016               	moviw fsr1++
 11317  0F4B  04A5               	iorwf	??_Button_State_NotPressed,f
 11318  0F4C  1D03               	btfss	3,2
 11319  0F4D  0008               	return
 11320                           
 11321                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11322  0F4E  0824               	movf	Button_State_NotPressed@button,w
 11323  0F4F  3E0C               	addlw	12
 11324  0F50  0086               	movwf	6
 11325  0F51  3001               	movlw	1	; select bank2/3
 11326  0F52  0087               	movwf	7
 11327  0F53  3000               	movlw	0
 11328  0F54  3FC0               	movwi [0]fsr1
 11329  0F55  3FC1               	movwi [1]fsr1
 11330                           
 11331                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
 11332  0F56  0824               	movf	Button_State_NotPressed@button,w
 11333  0F57  318C  24F8         	fcall	_Button_Baseline_Update
 11334  0F59  0008               	return
 11335  0F5A                     __end_of_Button_State_NotPressed:	
 11336                           
 11337                           	psect	text68
 11338  0BA7                     __ptext68:	
 11339 ;; *************** function _Button_State_Initializing *****************
 11340 ;; Defined at:
 11341 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11342 ;; Parameters:    Size  Location     Type
 11343 ;;  button          1    4[BANK0 ] PTR struct .
 11344 ;;		 -> mtouch_button(48), 
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;		None
 11347 ;; Return value:  Size  Location     Type
 11348 ;;                  1    wreg      void 
 11349 ;; Registers used:
 11350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11356 ;;      Params:         0       1       0       0       0       0       0       0
 11357 ;;      Locals:         0       0       0       0       0       0       0       0
 11358 ;;      Temps:          0       4       0       0       0       0       0       0
 11359 ;;      Totals:         0       5       0       0       0       0       0       0
 11360 ;;Total ram usage:        5 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:    7
 11363 ;; This function calls:
 11364 ;;		_Button_Baseline_Initialize
 11365 ;;		_Button_Baseline_Update
 11366 ;; This function is called by:
 11367 ;;		_Button_Service
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           
 11372                           ;psect for function _Button_State_Initializing
 11373  0BA7                     _Button_State_Initializing:	
 11374                           
 11375                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11376                           
 11377                           ;incstack = 0
 11378                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11379  0BA7  0020               	movlb	0	; select bank0
 11380  0BA8  0824               	movf	Button_State_Initializing@button,w
 11381  0BA9  3E0A               	addlw	10
 11382  0BAA  0086               	movwf	6
 11383  0BAB  3001               	movlw	1	; select bank2/3
 11384  0BAC  0087               	movwf	7
 11385  0BAD  3F40               	moviw [0]fsr1
 11386  0BAE  00A5               	movwf	??_Button_State_Initializing
 11387  0BAF  3F41               	moviw [1]fsr1
 11388  0BB0  00A6               	movwf	??_Button_State_Initializing+1
 11389  0BB1  3000               	movlw	0
 11390  0BB2  0226               	subwf	??_Button_State_Initializing+1,w
 11391  0BB3  3009               	movlw	9
 11392  0BB4  1903               	skipnz
 11393  0BB5  0225               	subwf	??_Button_State_Initializing,w
 11394  0BB6  1803               	skipnc
 11395  0BB7  2BBD               	goto	l5341
 11396                           
 11397                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
 11398  0BB8  0824               	movf	Button_State_Initializing@button,w
 11399  0BB9  3188  20F3  318B   	fcall	_Button_Baseline_Initialize
 11400                           
 11401                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
 11402  0BBC  2BC1               	goto	l5343
 11403  0BBD                     l5341:	
 11404                           
 11405                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
 11406  0BBD  0824               	movf	Button_State_Initializing@button,w
 11407  0BBE  318C  24F8  318B   	fcall	_Button_Baseline_Update
 11408  0BC1                     l5343:	
 11409                           
 11410                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
 11411  0BC1  0020               	movlb	0	; select bank0
 11412  0BC2  0824               	movf	Button_State_Initializing@button,w
 11413  0BC3  3E0A               	addlw	10
 11414  0BC4  0086               	movwf	6
 11415  0BC5  3001               	movlw	1	; select bank2/3
 11416  0BC6  0087               	movwf	7
 11417  0BC7  3001               	movlw	1
 11418  0BC8  0781               	addwf	1,f
 11419  0BC9  3141               	addfsr 1,1
 11420  0BCA  1803               	skipnc
 11421  0BCB  0A81               	incf	1,f
 11422                           
 11423                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11424  0BCC  0824               	movf	Button_State_Initializing@button,w
 11425  0BCD  3E0A               	addlw	10
 11426  0BCE  0086               	movwf	6
 11427  0BCF  3001               	movlw	1	; select bank2/3
 11428  0BD0  0087               	movwf	7
 11429  0BD1  3F40               	moviw [0]fsr1
 11430  0BD2  00A5               	movwf	??_Button_State_Initializing
 11431  0BD3  3F41               	moviw [1]fsr1
 11432  0BD4  00A6               	movwf	??_Button_State_Initializing+1
 11433  0BD5  3000               	movlw	0
 11434  0BD6  0226               	subwf	??_Button_State_Initializing+1,w
 11435  0BD7  3010               	movlw	16
 11436  0BD8  1903               	skipnz
 11437  0BD9  0225               	subwf	??_Button_State_Initializing,w
 11438  0BDA  1C03               	skipc
 11439  0BDB  0008               	return
 11440                           
 11441                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11442  0BDC  0824               	movf	Button_State_Initializing@button,w
 11443  0BDD  3E05               	addlw	5
 11444  0BDE  0086               	movwf	6
 11445  0BDF  3001               	movlw	1	; select bank2/3
 11446  0BE0  0087               	movwf	7
 11447  0BE1  3F40               	moviw [0]fsr1
 11448  0BE2  00A5               	movwf	??_Button_State_Initializing
 11449  0BE3  3F41               	moviw [1]fsr1
 11450  0BE4  00A6               	movwf	??_Button_State_Initializing+1
 11451  0BE5  3F42               	moviw [2]fsr1
 11452  0BE6  00A7               	movwf	??_Button_State_Initializing+2
 11453  0BE7  3F43               	moviw [3]fsr1
 11454  0BE8  00A8               	movwf	??_Button_State_Initializing+3
 11455  0BE9  3004               	movlw	4
 11456  0BEA                     u5655:	
 11457  0BEA  36A8               	lsrf	??_Button_State_Initializing+3,f
 11458  0BEB  0CA7               	rrf	??_Button_State_Initializing+2,f
 11459  0BEC  0CA6               	rrf	??_Button_State_Initializing+1,f
 11460  0BED  0CA5               	rrf	??_Button_State_Initializing,f
 11461  0BEE  0B89               	decfsz	9,f
 11462  0BEF  2BEA               	goto	u5655
 11463  0BF0  0824               	movf	Button_State_Initializing@button,w
 11464  0BF1  3E03               	addlw	3
 11465  0BF2  0086               	movwf	6
 11466  0BF3  3001               	movlw	1	; select bank2/3
 11467  0BF4  0087               	movwf	7
 11468  0BF5  0825               	movf	??_Button_State_Initializing,w
 11469  0BF6  3FC0               	movwi [0]fsr1
 11470  0BF7  0826               	movf	??_Button_State_Initializing+1,w
 11471  0BF8  3FC1               	movwi [1]fsr1
 11472                           
 11473                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11474  0BF9  0824               	movf	Button_State_Initializing@button,w
 11475  0BFA  3E02               	addlw	2
 11476  0BFB  0086               	movwf	6
 11477  0BFC  3001               	movlw	1	; select bank2/3
 11478  0BFD  0087               	movwf	7
 11479  0BFE  0181               	clrf	1
 11480  0BFF  0A81               	incf	1,f
 11481                           
 11482                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11483  0C00  0824               	movf	Button_State_Initializing@button,w
 11484  0C01  3E0A               	addlw	10
 11485  0C02  0086               	movwf	6
 11486  0C03  3001               	movlw	1	; select bank2/3
 11487  0C04  0087               	movwf	7
 11488  0C05  3000               	movlw	0
 11489  0C06  3FC0               	movwi [0]fsr1
 11490  0C07  3FC1               	movwi [1]fsr1
 11491  0C08  0008               	return
 11492  0C09                     __end_of_Button_State_Initializing:	
 11493                           
 11494                           	psect	text69
 11495  0C09                     __ptext69:	
 11496 ;; *************** function _Button_State_Pressed *****************
 11497 ;; Defined at:
 11498 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  button          1    4[BANK0 ] PTR struct .
 11501 ;;		 -> mtouch_button(48), 
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;		None
 11504 ;; Return value:  Size  Location     Type
 11505 ;;                  1    wreg      void 
 11506 ;; Registers used:
 11507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : 0/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11513 ;;      Params:         0       1       0       0       0       0       0       0
 11514 ;;      Locals:         0       0       0       0       0       0       0       0
 11515 ;;      Temps:          0       2       0       0       0       0       0       0
 11516 ;;      Totals:         0       3       0       0       0       0       0       0
 11517 ;;Total ram usage:        3 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    7
 11520 ;; This function calls:
 11521 ;;		_Button_DefaultCallback
 11522 ;;		_MTOUCH_Button_Initialize
 11523 ;;		_myButtonReleasedCallback
 11524 ;; This function is called by:
 11525 ;;		_Button_Service
 11526 ;; This function uses a non-reentrant model
 11527 ;;
 11528                           
 11529                           
 11530                           ;psect for function _Button_State_Pressed
 11531  0C09                     _Button_State_Pressed:	
 11532                           
 11533                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11534                           
 11535                           ;incstack = 0
 11536                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11537  0C09  0020               	movlb	0	; select bank0
 11538  0C0A  0824               	movf	Button_State_Pressed@button,w
 11539  0C0B  3E0A               	addlw	10
 11540  0C0C  0086               	movwf	6
 11541  0C0D  3001               	movlw	1	; select bank2/3
 11542  0C0E  0087               	movwf	7
 11543  0C0F  3F40               	moviw [0]fsr1
 11544  0C10  00A5               	movwf	??_Button_State_Pressed
 11545  0C11  3F41               	moviw [1]fsr1
 11546  0C12  00A6               	movwf	??_Button_State_Pressed+1
 11547  0C13  3007               	movlw	7
 11548  0C14  0226               	subwf	??_Button_State_Pressed+1,w
 11549  0C15  30D0               	movlw	208
 11550  0C16  1903               	skipnz
 11551  0C17  0225               	subwf	??_Button_State_Pressed,w
 11552  0C18  1C03               	skipc
 11553  0C19  2C32               	goto	l5373
 11554                           
 11555                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 11556  0C1A  0824               	movf	Button_State_Pressed@button,w
 11557  0C1B  0086               	movwf	6
 11558  0C1C  3001               	movlw	1	; select bank2/3
 11559  0C1D  0087               	movwf	7
 11560  0C1E  0801               	movf	1,w
 11561  0C1F  3189  21E6  318C   	fcall	_MTOUCH_Button_Initialize
 11562                           
 11563                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 11564  0C22  0020               	movlb	0	; select bank0
 11565  0C23  0824               	movf	Button_State_Pressed@button,w
 11566  0C24  0086               	movwf	6
 11567  0C25  3001               	movlw	1	; select bank2/3
 11568  0C26  0087               	movwf	7
 11569  0C27  0801               	movf	1,w
 11570  0C28  00A5               	movwf	??_Button_State_Pressed
 11571  0C29  0825               	movf	??_Button_State_Pressed,w
 11572  0C2A  00F8               	movwf	myButtonReleasedCallback@button
 11573  0C2B  0021               	movlb	1	; select bank1
 11574  0C2C  085A               	movf	(_callback_notPressed+1)^(0+128),w
 11575  0C2D  008A               	movwf	10
 11576  0C2E  0859               	movf	_callback_notPressed^(0+128),w
 11577  0C2F  000A               	callw
 11578  0C30  318C               	pagesel	$
 11579                           
 11580                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 11581  0C31  0008               	return
 11582  0C32                     l5373:	
 11583  0C32  0824               	movf	Button_State_Pressed@button,w
 11584  0C33  3E09               	addlw	9
 11585  0C34  0086               	movwf	6
 11586  0C35  3001               	movlw	1	; select bank2/3
 11587  0C36  0087               	movwf	7
 11588  0C37  0801               	movf	1,w
 11589  0C38  3A80               	xorlw	128
 11590  0C39  00A5               	movwf	??_Button_State_Pressed
 11591  0C3A  0824               	movf	Button_State_Pressed@button,w
 11592  0C3B  3E0E               	addlw	14
 11593  0C3C  0086               	movwf	6
 11594  0C3D  3001               	movlw	1	; select bank2/3
 11595  0C3E  0087               	movwf	7
 11596  0C3F  0824               	movf	Button_State_Pressed@button,w
 11597  0C40  3E0E               	addlw	14
 11598  0C41  0084               	movwf	4
 11599  0C42  3001               	movlw	1	; select bank2/3
 11600  0C43  0085               	movwf	5
 11601  0C44  3600               	lsrf	0,w
 11602  0C45  0201               	subwf	1,w
 11603  0C46  3A80               	xorlw	128
 11604  0C47  02A5               	subwf	??_Button_State_Pressed,f
 11605  0C48  1803               	skipnc
 11606  0C49  0008               	return
 11607                           
 11608                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11609  0C4A  0824               	movf	Button_State_Pressed@button,w
 11610  0C4B  3E02               	addlw	2
 11611  0C4C  0086               	movwf	6
 11612  0C4D  3001               	movlw	1	; select bank2/3
 11613  0C4E  0087               	movwf	7
 11614  0C4F  0181               	clrf	1
 11615  0C50  0A81               	incf	1,f
 11616                           
 11617                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11618  0C51  0824               	movf	Button_State_Pressed@button,w
 11619  0C52  3E0A               	addlw	10
 11620  0C53  0086               	movwf	6
 11621  0C54  3001               	movlw	1	; select bank2/3
 11622  0C55  0087               	movwf	7
 11623  0C56  3000               	movlw	0
 11624  0C57  3FC0               	movwi [0]fsr1
 11625  0C58  3FC1               	movwi [1]fsr1
 11626                           
 11627                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11628  0C59  0824               	movf	Button_State_Pressed@button,w
 11629  0C5A  3E0C               	addlw	12
 11630  0C5B  0086               	movwf	6
 11631  0C5C  3001               	movlw	1	; select bank2/3
 11632  0C5D  0087               	movwf	7
 11633  0C5E  30FF               	movlw	255
 11634  0C5F  3FC0               	movwi [0]fsr1
 11635  0C60  30FB               	movlw	251
 11636  0C61  3FC1               	movwi [1]fsr1
 11637                           
 11638                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 11639  0C62  0824               	movf	Button_State_Pressed@button,w
 11640  0C63  0086               	movwf	6
 11641  0C64  3001               	movlw	1	; select bank2/3
 11642  0C65  0087               	movwf	7
 11643  0C66  0801               	movf	1,w
 11644  0C67  00A5               	movwf	??_Button_State_Pressed
 11645  0C68  0825               	movf	??_Button_State_Pressed,w
 11646  0C69  00F8               	movwf	myButtonReleasedCallback@button
 11647  0C6A  0021               	movlb	1	; select bank1
 11648  0C6B  085A               	movf	(_callback_notPressed+1)^(0+128),w
 11649  0C6C  008A               	movwf	10
 11650  0C6D  0859               	movf	_callback_notPressed^(0+128),w
 11651  0C6E  000A               	callw
 11652  0C6F  318C               	pagesel	$
 11653  0C70  0008               	return
 11654  0C71                     __end_of_Button_State_Pressed:	
 11655                           
 11656                           	psect	text70
 11657  14EB                     __ptext70:	
 11658 ;; *************** function _myButtonPressedCallback *****************
 11659 ;; Defined at:
 11660 ;;		line 115 in file "main.c"
 11661 ;; Parameters:    Size  Location     Type
 11662 ;;  button          1    8[COMMON] enum E2923
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;		None
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  1    wreg      void 
 11667 ;; Registers used:
 11668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11674 ;;      Params:         1       0       0       0       0       0       0       0
 11675 ;;      Locals:         0       0       0       0       0       0       0       0
 11676 ;;      Temps:          0       0       0       0       0       0       0       0
 11677 ;;      Totals:         1       0       0       0       0       0       0       0
 11678 ;;Total ram usage:        1 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    7
 11681 ;; This function calls:
 11682 ;;		_check_on_off
 11683 ;; This function is called by:
 11684 ;;		_main
 11685 ;;		_Button_State_NotPressed
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           
 11690                           ;psect for function _myButtonPressedCallback
 11691  14EB                     _myButtonPressedCallback:	
 11692                           
 11693                           ;main.c: 115: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 116:
      +                           {;main.c: 117:     check_on_off();
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _myButtonPressedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11697  14EB  3188  2008         	fcall	_check_on_off
 11698  14ED  0008               	return
 11699  14EE                     __end_of_myButtonPressedCallback:	
 11700                           
 11701                           	psect	text71
 11702  14E3                     __ptext71:	
 11703 ;; *************** function _Button_DefaultCallback *****************
 11704 ;; Defined at:
 11705 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;  button          1    8[COMMON] enum E3069
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      void 
 11712 ;; Registers used:
 11713 ;;		None
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11719 ;;      Params:         1       0       0       0       0       0       0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0       0
 11722 ;;      Totals:         1       0       0       0       0       0       0       0
 11723 ;;Total ram usage:        1 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    4
 11726 ;; This function calls:
 11727 ;;		Nothing
 11728 ;; This function is called by:
 11729 ;;		_Button_State_NotPressed
 11730 ;;		_Button_State_Pressed
 11731 ;; This function uses a non-reentrant model
 11732 ;;
 11733                           
 11734                           
 11735                           ;psect for function _Button_DefaultCallback
 11736  14E3                     _Button_DefaultCallback:	
 11737                           
 11738                           ;incstack = 0
 11739                           ; Regs used in _Button_DefaultCallback: []
 11740  14E3  0008               	return
 11741  14E4                     __end_of_Button_DefaultCallback:	
 11742                           
 11743                           	psect	text72
 11744  14E8                     __ptext72:	
 11745 ;; *************** function _myButtonReleasedCallback *****************
 11746 ;; Defined at:
 11747 ;;		line 120 in file "main.c"
 11748 ;; Parameters:    Size  Location     Type
 11749 ;;  button          1    8[COMMON] enum E2923
 11750 ;; Auto vars:     Size  Location     Type
 11751 ;;		None
 11752 ;; Return value:  Size  Location     Type
 11753 ;;                  1    wreg      void 
 11754 ;; Registers used:
 11755 ;;		status,2
 11756 ;; Tracked objects:
 11757 ;;		On entry : 0/0
 11758 ;;		On exit  : 0/0
 11759 ;;		Unchanged: 0/0
 11760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11761 ;;      Params:         1       0       0       0       0       0       0       0
 11762 ;;      Locals:         0       0       0       0       0       0       0       0
 11763 ;;      Temps:          0       0       0       0       0       0       0       0
 11764 ;;      Totals:         1       0       0       0       0       0       0       0
 11765 ;;Total ram usage:        1 bytes
 11766 ;; Hardware stack levels used:    1
 11767 ;; Hardware stack levels required when called:    4
 11768 ;; This function calls:
 11769 ;;		Nothing
 11770 ;; This function is called by:
 11771 ;;		_main
 11772 ;;		_Button_State_Pressed
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function _myButtonReleasedCallback
 11778  14E8                     _myButtonReleasedCallback:	
 11779                           
 11780                           ;main.c: 120: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 121
      +                          : {;main.c: 122:     counter_PRESS = 0;
 11781                           
 11782                           ;incstack = 0
 11783                           ; Regs used in _myButtonReleasedCallback: [status,2]
 11784  14E8  0021               	movlb	1	; select bank1
 11785  14E9  01CB               	clrf	_counter_PRESS^(0+128)
 11786  14EA  0008               	return
 11787  14EB                     __end_of_myButtonReleasedCallback:	
 11788                           
 11789                           	psect	text73
 11790  0808                     __ptext73:	
 11791 ;; *************** function _check_on_off *****************
 11792 ;; Defined at:
 11793 ;;		line 124 in file "main.c"
 11794 ;; Parameters:    Size  Location     Type
 11795 ;;		None
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;		None
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  1    wreg      void 
 11800 ;; Registers used:
 11801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11802 ;; Tracked objects:
 11803 ;;		On entry : 0/0
 11804 ;;		On exit  : 0/0
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11807 ;;      Params:         0       0       0       0       0       0       0       0
 11808 ;;      Locals:         0       0       0       0       0       0       0       0
 11809 ;;      Temps:          1       0       0       0       0       0       0       0
 11810 ;;      Totals:         1       0       0       0       0       0       0       0
 11811 ;;Total ram usage:        1 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; Hardware stack levels required when called:    6
 11814 ;; This function calls:
 11815 ;;		_MTOUCH_Button_Buttonmask_Get
 11816 ;; This function is called by:
 11817 ;;		_myButtonPressedCallback
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           
 11822                           ;psect for function _check_on_off
 11823  0808                     _check_on_off:	
 11824                           
 11825                           ;main.c: 126:     if(MTOUCH_Button_Buttonmask_Get() == 2)
 11826                           
 11827                           ;incstack = 0
 11828                           ; Regs used in _check_on_off: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11829  0808  3197  27E2  3188   	fcall	_MTOUCH_Button_Buttonmask_Get
 11830  080B  3A02               	xorlw	2
 11831  080C  1D03               	skipz
 11832  080D  0008               	return
 11833                           
 11834                           ;main.c: 127:     {;main.c: 128:         counter_1s = 0;
 11835  080E  0021               	movlb	1	; select bank1
 11836  080F  01C0               	clrf	_counter_1s^(0+128)
 11837  0810  01C1               	clrf	(_counter_1s+1)^(0+128)
 11838                           
 11839                           ;main.c: 129:         counter_ON_OFF++;
 11840  0811  3001               	movlw	1
 11841  0812  00F7               	movwf	??_check_on_off
 11842  0813  0877               	movf	??_check_on_off,w
 11843  0814  07CC               	addwf	_counter_ON_OFF^(0+128),f
 11844                           
 11845                           ;main.c: 130:         if(counter_ON_OFF == 2)
 11846  0815  3002               	movlw	2
 11847  0816  064C               	xorwf	_counter_ON_OFF^(0+128),w
 11848  0817  1D03               	btfss	3,2
 11849  0818  0008               	return
 11850                           
 11851                           ;main.c: 131:         {;main.c: 132:             counter_ON_OFF = 0;
 11852  0819  01CC               	clrf	_counter_ON_OFF^(0+128)
 11853                           
 11854                           ;main.c: 134:             last_touch_status.full_status ^= 0b00000010;
 11855  081A  3002               	movlw	2
 11856  081B  06C2               	xorwf	_last_touch_status^(0+128),f
 11857  081C  3000               	movlw	0
 11858  081D  06C3               	xorwf	(_last_touch_status+1)^(0+128),f
 11859                           
 11860                           ;main.c: 135:             if(last_touch_status.CS1)
 11861  081E  1CC2               	btfss	_last_touch_status^(0+128),1
 11862  081F  2823               	goto	l1014
 11863                           
 11864                           ;main.c: 136:             {;main.c: 137:                 turn_on = 1;
 11865  0820  01C8               	clrf	_turn_on^(0+128)
 11866  0821  0AC8               	incf	_turn_on^(0+128),f
 11867                           
 11868                           ;main.c: 138:             }
 11869  0822  0008               	return
 11870  0823                     l1014:	
 11871                           ;main.c: 139:             else
 11872                           
 11873                           
 11874                           ;main.c: 140:             {;main.c: 141:                 turn_off = 1;
 11875  0823  01C9               	clrf	_turn_off^(0+128)
 11876  0824  0AC9               	incf	_turn_off^(0+128),f
 11877  0825  0008               	return
 11878  0826                     __end_of_check_on_off:	
 11879                           
 11880                           	psect	text74
 11881  17E2                     __ptext74:	
 11882 ;; *************** function _MTOUCH_Button_Buttonmask_Get *****************
 11883 ;; Defined at:
 11884 ;;		line 421 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11885 ;; Parameters:    Size  Location     Type
 11886 ;;		None
 11887 ;; Auto vars:     Size  Location     Type
 11888 ;;  i               1    6[COMMON] unsigned char 
 11889 ;;  output          1    5[COMMON] unsigned char 
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      unsigned char 
 11892 ;; Registers used:
 11893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11899 ;;      Params:         0       0       0       0       0       0       0       0
 11900 ;;      Locals:         2       0       0       0       0       0       0       0
 11901 ;;      Temps:          2       0       0       0       0       0       0       0
 11902 ;;      Totals:         4       0       0       0       0       0       0       0
 11903 ;;Total ram usage:        4 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    5
 11906 ;; This function calls:
 11907 ;;		_MTOUCH_Button_isPressed
 11908 ;; This function is called by:
 11909 ;;		_main
 11910 ;;		_check_on_off
 11911 ;;		_check_up_down
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           
 11916                           ;psect for function _MTOUCH_Button_Buttonmask_Get
 11917  17E2                     _MTOUCH_Button_Buttonmask_Get:	
 11918                           
 11919                           ;mcc_generated_files/mtouch/mtouch_button.c: 423:     mtouch_buttonmask_t output = 0;
 11920                           
 11921                           ;incstack = 0
 11922                           ; Regs used in _MTOUCH_Button_Buttonmask_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11923  17E2  01F5               	clrf	MTOUCH_Button_Buttonmask_Get@output
 11924                           
 11925                           ;mcc_generated_files/mtouch/mtouch_button.c: 425:     for (uint8_t i = 0; i < 3u; i++)
 11926  17E3  01F6               	clrf	MTOUCH_Button_Buttonmask_Get@i
 11927  17E4                     l3443:	
 11928                           
 11929                           ;mcc_generated_files/mtouch/mtouch_button.c: 426:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 427:         if (MTOUCH_Button_isPressed(i) == 1)
 11930  17E4  0876               	movf	MTOUCH_Button_Buttonmask_Get@i,w
 11931  17E5  3197  2773  3197   	fcall	_MTOUCH_Button_isPressed
 11932  17E8  3A01               	xorlw	1
 11933  17E9  1D03               	skipz
 11934  17EA  2FF6               	goto	l592
 11935                           
 11936                           ;mcc_generated_files/mtouch/mtouch_button.c: 428:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 429:             output |= (mtouch_buttonmask_t)0x01 << i;
 11937  17EB  3001               	movlw	1
 11938  17EC  00F3               	movwf	??_MTOUCH_Button_Buttonmask_Get
 11939  17ED  0A76               	incf	MTOUCH_Button_Buttonmask_Get@i,w
 11940  17EE  2FF0               	goto	u2674
 11941  17EF                     u2675:	
 11942  17EF  35F3               	lslf	??_MTOUCH_Button_Buttonmask_Get,f
 11943  17F0                     u2674:	
 11944  17F0  0B89               	decfsz	9,f
 11945  17F1  2FEF               	goto	u2675
 11946  17F2  0873               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 11947  17F3  00F4               	movwf	??_MTOUCH_Button_Buttonmask_Get+1
 11948  17F4  0874               	movf	??_MTOUCH_Button_Buttonmask_Get+1,w
 11949  17F5  04F5               	iorwf	MTOUCH_Button_Buttonmask_Get@output,f
 11950  17F6                     l592:	
 11951                           ;mcc_generated_files/mtouch/mtouch_button.c: 430:         }
 11952                           
 11953                           
 11954                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     }
 11955  17F6  3001               	movlw	1
 11956  17F7  00F3               	movwf	??_MTOUCH_Button_Buttonmask_Get
 11957  17F8  0873               	movf	??_MTOUCH_Button_Buttonmask_Get,w
 11958  17F9  07F6               	addwf	MTOUCH_Button_Buttonmask_Get@i,f
 11959  17FA  3003               	movlw	3
 11960  17FB  0276               	subwf	MTOUCH_Button_Buttonmask_Get@i,w
 11961  17FC  1C03               	skipc
 11962  17FD  2FE4               	goto	l3443
 11963                           
 11964                           ;mcc_generated_files/mtouch/mtouch_button.c: 432:     return output;
 11965  17FE  0875               	movf	MTOUCH_Button_Buttonmask_Get@output,w
 11966  17FF  0008               	return
 11967  1800                     __end_of_MTOUCH_Button_Buttonmask_Get:	
 11968                           
 11969                           	psect	text75
 11970  1773                     __ptext75:	
 11971 ;; *************** function _MTOUCH_Button_isPressed *****************
 11972 ;; Defined at:
 11973 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;  name            1    wreg     enum E3069
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;  name            1    2[COMMON] enum E3069
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  1    wreg      _Bool 
 11980 ;; Registers used:
 11981 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11987 ;;      Params:         0       0       0       0       0       0       0       0
 11988 ;;      Locals:         1       0       0       0       0       0       0       0
 11989 ;;      Temps:          1       0       0       0       0       0       0       0
 11990 ;;      Totals:         2       0       0       0       0       0       0       0
 11991 ;;Total ram usage:        2 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    4
 11994 ;; This function calls:
 11995 ;;		Nothing
 11996 ;; This function is called by:
 11997 ;;		_MTOUCH_Button_Buttonmask_Get
 11998 ;;		_touch_example
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           
 12003                           ;psect for function _MTOUCH_Button_isPressed
 12004  1773                     _MTOUCH_Button_isPressed:	
 12005                           
 12006                           ;incstack = 0
 12007                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 12008                           ;MTOUCH_Button_isPressed@name stored from wreg
 12009  1773  00F2               	movwf	MTOUCH_Button_isPressed@name
 12010                           
 12011                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 12012  1774  3003               	movlw	3
 12013  1775  0272               	subwf	MTOUCH_Button_isPressed@name,w
 12014  1776  1803               	skipnc
 12015  1777  2F8C               	goto	l3295
 12016                           
 12017                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 12018  1778  0872               	movf	MTOUCH_Button_isPressed@name,w
 12019  1779  00F1               	movwf	??_MTOUCH_Button_isPressed
 12020  177A  3003               	movlw	3
 12021  177B                     u2465:	
 12022  177B  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 12023  177C  3EFF               	addlw	-1
 12024  177D  1D03               	skipz
 12025  177E  2F7B               	goto	u2465
 12026  177F  3571               	lslf	??_MTOUCH_Button_isPressed,w
 12027  1780  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 12028  1781  0086               	movwf	6
 12029  1782  3001               	movlw	1	; select bank2/3
 12030  1783  0087               	movwf	7
 12031  1784  3002               	movlw	2
 12032  1785  0601               	xorwf	1,w
 12033  1786  1D03               	btfss	3,2
 12034  1787  2F8A               	goto	u2470
 12035  1788  3001               	movlw	1
 12036  1789  0008               	return
 12037  178A                     u2470:	
 12038  178A  3000               	movlw	0
 12039  178B  0008               	return
 12040  178C                     l3295:	
 12041                           
 12042                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 12043  178C  3000               	movlw	0
 12044  178D  0008               	return
 12045  178E                     __end_of_MTOUCH_Button_isPressed:	
 12046                           
 12047                           	psect	text76
 12048  09E6                     __ptext76:	
 12049 ;; *************** function _MTOUCH_Button_Initialize *****************
 12050 ;; Defined at:
 12051 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;  name            1    wreg     enum E3069
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  name            1    9[COMMON] enum E3069
 12056 ;;  button          1   10[COMMON] PTR struct .
 12057 ;;		 -> mtouch_button(48), 
 12058 ;; Return value:  Size  Location     Type
 12059 ;;                  1    wreg      void 
 12060 ;; Registers used:
 12061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12062 ;; Tracked objects:
 12063 ;;		On entry : 0/0
 12064 ;;		On exit  : 0/0
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12067 ;;      Params:         0       0       0       0       0       0       0       0
 12068 ;;      Locals:         2       0       0       0       0       0       0       0
 12069 ;;      Temps:          2       0       0       0       0       0       0       0
 12070 ;;      Totals:         4       0       0       0       0       0       0       0
 12071 ;;Total ram usage:        4 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:    6
 12074 ;; This function calls:
 12075 ;;		_MTOUCH_Sensor_Calibrate
 12076 ;; This function is called by:
 12077 ;;		_MTOUCH_Button_InitializeAll
 12078 ;;		_Button_Service
 12079 ;;		_Button_State_NotPressed
 12080 ;;		_Button_State_Pressed
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           
 12085                           ;psect for function _MTOUCH_Button_Initialize
 12086  09E6                     _MTOUCH_Button_Initialize:	
 12087                           
 12088                           ;incstack = 0
 12089                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12090                           ;MTOUCH_Button_Initialize@name stored from wreg
 12091  09E6  00F9               	movwf	MTOUCH_Button_Initialize@name
 12092                           
 12093                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 12094  09E7  0879               	movf	MTOUCH_Button_Initialize@name,w
 12095  09E8  00F7               	movwf	??_MTOUCH_Button_Initialize
 12096  09E9  3003               	movlw	3
 12097  09EA                     u5425:	
 12098  09EA  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 12099  09EB  3EFF               	addlw	-1
 12100  09EC  1D03               	skipz
 12101  09ED  29EA               	goto	u5425
 12102  09EE  3577               	lslf	??_MTOUCH_Button_Initialize,w
 12103  09EF  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12104  09F0  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 12105  09F1  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 12106  09F2  00FA               	movwf	MTOUCH_Button_Initialize@button
 12107                           
 12108                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 12109  09F3  087A               	movf	MTOUCH_Button_Initialize@button,w
 12110  09F4  3E02               	addlw	2
 12111  09F5  0086               	movwf	6
 12112  09F6  3001               	movlw	1	; select bank2/3
 12113  09F7  0087               	movwf	7
 12114  09F8  0181               	clrf	1
 12115                           
 12116                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 12117  09F9  087A               	movf	MTOUCH_Button_Initialize@button,w
 12118  09FA  3E05               	addlw	5
 12119  09FB  0086               	movwf	6
 12120  09FC  3001               	movlw	1	; select bank2/3
 12121  09FD  0087               	movwf	7
 12122  09FE  3000               	movlw	0
 12123  09FF  3FC0               	movwi [0]fsr1
 12124  0A00  3000               	movlw	0
 12125  0A01  3FC1               	movwi [1]fsr1
 12126  0A02  3FC2               	movwi [2]fsr1
 12127  0A03  3FC3               	movwi [3]fsr1
 12128                           
 12129                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 12130  0A04  087A               	movf	MTOUCH_Button_Initialize@button,w
 12131  0A05  3E0A               	addlw	10
 12132  0A06  0086               	movwf	6
 12133  0A07  3001               	movlw	1	; select bank2/3
 12134  0A08  0087               	movwf	7
 12135  0A09  3000               	movlw	0
 12136  0A0A  3FC0               	movwi [0]fsr1
 12137  0A0B  3FC1               	movwi [1]fsr1
 12138                           
 12139                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 12140  0A0C  087A               	movf	MTOUCH_Button_Initialize@button,w
 12141  0A0D  3E0C               	addlw	12
 12142  0A0E  0086               	movwf	6
 12143  0A0F  3001               	movlw	1	; select bank2/3
 12144  0A10  0087               	movwf	7
 12145  0A11  3000               	movlw	0
 12146  0A12  3FC0               	movwi [0]fsr1
 12147  0A13  3FC1               	movwi [1]fsr1
 12148                           
 12149                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 12150  0A14  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 12151  0A15  0086               	movwf	6
 12152  0A16  3001               	movlw	1	; select bank2/3
 12153  0A17  0087               	movwf	7
 12154  0A18  0801               	movf	1,w
 12155  0A19  3196  2643         	fcall	_MTOUCH_Sensor_Calibrate
 12156  0A1B  0008               	return
 12157  0A1C                     __end_of_MTOUCH_Button_Initialize:	
 12158                           
 12159                           	psect	text77
 12160  1643                     __ptext77:	
 12161 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 12162 ;; Defined at:
 12163 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12164 ;; Parameters:    Size  Location     Type
 12165 ;;  sensor          1    wreg     enum E2864
 12166 ;; Auto vars:     Size  Location     Type
 12167 ;;  sensor          1    6[COMMON] enum E2864
 12168 ;; Return value:  Size  Location     Type
 12169 ;;                  1    wreg      void 
 12170 ;; Registers used:
 12171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12172 ;; Tracked objects:
 12173 ;;		On entry : 0/0
 12174 ;;		On exit  : 0/0
 12175 ;;		Unchanged: 0/0
 12176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12177 ;;      Params:         0       0       0       0       0       0       0       0
 12178 ;;      Locals:         1       0       0       0       0       0       0       0
 12179 ;;      Temps:          1       0       0       0       0       0       0       0
 12180 ;;      Totals:         2       0       0       0       0       0       0       0
 12181 ;;Total ram usage:        2 bytes
 12182 ;; Hardware stack levels used:    1
 12183 ;; Hardware stack levels required when called:    5
 12184 ;; This function calls:
 12185 ;;		___bmul
 12186 ;; This function is called by:
 12187 ;;		_MTOUCH_Sensor_Initialize
 12188 ;;		_MTOUCH_Button_Initialize
 12189 ;; This function uses a non-reentrant model
 12190 ;;
 12191                           
 12192                           
 12193                           ;psect for function _MTOUCH_Sensor_Calibrate
 12194  1643                     _MTOUCH_Sensor_Calibrate:	
 12195                           
 12196                           ;incstack = 0
 12197                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12198                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 12199  1643  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 12200                           
 12201                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 12202  1644  3003               	movlw	3
 12203  1645  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 12204  1646  1803               	skipnc
 12205  1647  0008               	return
 12206                           
 12207                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 12208  1648  3009               	movlw	9
 12209  1649  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 12210  164A  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 12211  164B  00F1               	movwf	___bmul@multiplicand
 12212  164C  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 12213  164D  3196  2610         	fcall	___bmul
 12214  164F  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12215  1650  0086               	movwf	6
 12216  1651  3001               	movlw	1	; select bank2/3
 12217  1652  0087               	movwf	7
 12218  1653  1101               	bcf	1,2
 12219  1654  0008               	return
 12220  1655                     __end_of_MTOUCH_Sensor_Calibrate:	
 12221                           
 12222                           	psect	text78
 12223  0CF8                     __ptext78:	
 12224 ;; *************** function _Button_Baseline_Update *****************
 12225 ;; Defined at:
 12226 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  button          1    wreg     PTR struct .
 12229 ;;		 -> mtouch_button(48), 
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;  button          1    7[COMMON] PTR struct .
 12232 ;;		 -> mtouch_button(48), 
 12233 ;; Return value:  Size  Location     Type
 12234 ;;                  1    wreg      void 
 12235 ;; Registers used:
 12236 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12237 ;; Tracked objects:
 12238 ;;		On entry : 0/0
 12239 ;;		On exit  : 0/0
 12240 ;;		Unchanged: 0/0
 12241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12242 ;;      Params:         0       0       0       0       0       0       0       0
 12243 ;;      Locals:         1       0       0       0       0       0       0       0
 12244 ;;      Temps:          6       0       0       0       0       0       0       0
 12245 ;;      Totals:         7       0       0       0       0       0       0       0
 12246 ;;Total ram usage:        7 bytes
 12247 ;; Hardware stack levels used:    1
 12248 ;; Hardware stack levels required when called:    4
 12249 ;; This function calls:
 12250 ;;		Nothing
 12251 ;; This function is called by:
 12252 ;;		_Button_State_Initializing
 12253 ;;		_Button_State_NotPressed
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           
 12258                           ;psect for function _Button_Baseline_Update
 12259  0CF8                     _Button_Baseline_Update:	
 12260                           
 12261                           ;incstack = 0
 12262                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12263                           ;Button_Baseline_Update@button stored from wreg
 12264  0CF8  00F7               	movwf	Button_Baseline_Update@button
 12265                           
 12266                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 12267  0CF9  1F8B               	btfss	11,7	;volatile
 12268  0CFA  2D42               	goto	l3825
 12269                           
 12270                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 12271  0CFB  138B               	bcf	11,7	;volatile
 12272                           
 12273                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 12274  0CFC  0877               	movf	Button_Baseline_Update@button,w
 12275  0CFD  3E05               	addlw	5
 12276  0CFE  0086               	movwf	6
 12277  0CFF  3001               	movlw	1	; select bank2/3
 12278  0D00  0087               	movwf	7
 12279  0D01  3F40               	moviw [0]fsr1
 12280  0D02  00F1               	movwf	??_Button_Baseline_Update
 12281  0D03  3F41               	moviw [1]fsr1
 12282  0D04  00F2               	movwf	??_Button_Baseline_Update+1
 12283  0D05  3F42               	moviw [2]fsr1
 12284  0D06  00F3               	movwf	??_Button_Baseline_Update+2
 12285  0D07  3F43               	moviw [3]fsr1
 12286  0D08  00F4               	movwf	??_Button_Baseline_Update+3
 12287  0D09  3004               	movlw	4
 12288  0D0A                     u3285:	
 12289  0D0A  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12290  0D0B  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12291  0D0C  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12292  0D0D  0CF1               	rrf	??_Button_Baseline_Update,f
 12293  0D0E  0B89               	decfsz	9,f
 12294  0D0F  2D0A               	goto	u3285
 12295  0D10  0877               	movf	Button_Baseline_Update@button,w
 12296  0D11  3E05               	addlw	5
 12297  0D12  0086               	movwf	6
 12298  0D13  3001               	movlw	1	; select bank2/3
 12299  0D14  0087               	movwf	7
 12300  0D15  0871               	movf	??_Button_Baseline_Update,w
 12301  0D16  0281               	subwf	1,f
 12302  0D17  3141               	addfsr 1,1
 12303  0D18  0872               	movf	??_Button_Baseline_Update+1,w
 12304  0D19  3B81               	subwfb	1,f
 12305  0D1A  3141               	addfsr 1,1
 12306  0D1B  0873               	movf	??_Button_Baseline_Update+2,w
 12307  0D1C  3B81               	subwfb	1,f
 12308  0D1D  3141               	addfsr 1,1
 12309  0D1E  0874               	movf	??_Button_Baseline_Update+3,w
 12310  0D1F  3B81               	subwfb	1,f
 12311  0D20  317D               	addfsr 1,-3
 12312                           
 12313                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 12314  0D21  0877               	movf	Button_Baseline_Update@button,w
 12315  0D22  3E03               	addlw	3
 12316  0D23  0086               	movwf	6
 12317  0D24  3001               	movlw	1	; select bank2/3
 12318  0D25  0087               	movwf	7
 12319  0D26  3F40               	moviw [0]fsr1
 12320  0D27  00F1               	movwf	??_Button_Baseline_Update
 12321  0D28  3F41               	moviw [1]fsr1
 12322  0D29  00F2               	movwf	??_Button_Baseline_Update+1
 12323  0D2A  0871               	movf	??_Button_Baseline_Update,w
 12324  0D2B  00F3               	movwf	??_Button_Baseline_Update+2
 12325  0D2C  0872               	movf	??_Button_Baseline_Update+1,w
 12326  0D2D  00F4               	movwf	??_Button_Baseline_Update+3
 12327  0D2E  01F5               	clrf	??_Button_Baseline_Update+4
 12328  0D2F  01F6               	clrf	??_Button_Baseline_Update+5
 12329  0D30  0877               	movf	Button_Baseline_Update@button,w
 12330  0D31  3E05               	addlw	5
 12331  0D32  0086               	movwf	6
 12332  0D33  3001               	movlw	1	; select bank2/3
 12333  0D34  0087               	movwf	7
 12334  0D35  0873               	movf	??_Button_Baseline_Update+2,w
 12335  0D36  0781               	addwf	1,f
 12336  0D37  3141               	addfsr 1,1
 12337  0D38  0874               	movf	??_Button_Baseline_Update+3,w
 12338  0D39  3D81               	addwfc	1,f
 12339  0D3A  3141               	addfsr 1,1
 12340  0D3B  0875               	movf	??_Button_Baseline_Update+4,w
 12341  0D3C  3D81               	addwfc	1,f
 12342  0D3D  3141               	addfsr 1,1
 12343  0D3E  0876               	movf	??_Button_Baseline_Update+5,w
 12344  0D3F  3D81               	addwfc	1,f
 12345                           
 12346                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 12347  0D40  178B               	bsf	11,7	;volatile
 12348                           
 12349                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 12350  0D41  0008               	return
 12351  0D42                     l3825:	
 12352                           
 12353                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12354  0D42  0877               	movf	Button_Baseline_Update@button,w
 12355  0D43  3E05               	addlw	5
 12356  0D44  0086               	movwf	6
 12357  0D45  3001               	movlw	1	; select bank2/3
 12358  0D46  0087               	movwf	7
 12359  0D47  3F40               	moviw [0]fsr1
 12360  0D48  00F1               	movwf	??_Button_Baseline_Update
 12361  0D49  3F41               	moviw [1]fsr1
 12362  0D4A  00F2               	movwf	??_Button_Baseline_Update+1
 12363  0D4B  3F42               	moviw [2]fsr1
 12364  0D4C  00F3               	movwf	??_Button_Baseline_Update+2
 12365  0D4D  3F43               	moviw [3]fsr1
 12366  0D4E  00F4               	movwf	??_Button_Baseline_Update+3
 12367  0D4F  3004               	movlw	4
 12368  0D50                     u3295:	
 12369  0D50  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12370  0D51  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12371  0D52  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12372  0D53  0CF1               	rrf	??_Button_Baseline_Update,f
 12373  0D54  0B89               	decfsz	9,f
 12374  0D55  2D50               	goto	u3295
 12375  0D56  0877               	movf	Button_Baseline_Update@button,w
 12376  0D57  3E05               	addlw	5
 12377  0D58  0086               	movwf	6
 12378  0D59  3001               	movlw	1	; select bank2/3
 12379  0D5A  0087               	movwf	7
 12380  0D5B  0871               	movf	??_Button_Baseline_Update,w
 12381  0D5C  0281               	subwf	1,f
 12382  0D5D  3141               	addfsr 1,1
 12383  0D5E  0872               	movf	??_Button_Baseline_Update+1,w
 12384  0D5F  3B81               	subwfb	1,f
 12385  0D60  3141               	addfsr 1,1
 12386  0D61  0873               	movf	??_Button_Baseline_Update+2,w
 12387  0D62  3B81               	subwfb	1,f
 12388  0D63  3141               	addfsr 1,1
 12389  0D64  0874               	movf	??_Button_Baseline_Update+3,w
 12390  0D65  3B81               	subwfb	1,f
 12391  0D66  317D               	addfsr 1,-3
 12392                           
 12393                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 12394  0D67  0877               	movf	Button_Baseline_Update@button,w
 12395  0D68  3E03               	addlw	3
 12396  0D69  0086               	movwf	6
 12397  0D6A  3001               	movlw	1	; select bank2/3
 12398  0D6B  0087               	movwf	7
 12399  0D6C  3F40               	moviw [0]fsr1
 12400  0D6D  00F1               	movwf	??_Button_Baseline_Update
 12401  0D6E  3F41               	moviw [1]fsr1
 12402  0D6F  00F2               	movwf	??_Button_Baseline_Update+1
 12403  0D70  0871               	movf	??_Button_Baseline_Update,w
 12404  0D71  00F3               	movwf	??_Button_Baseline_Update+2
 12405  0D72  0872               	movf	??_Button_Baseline_Update+1,w
 12406  0D73  00F4               	movwf	??_Button_Baseline_Update+3
 12407  0D74  01F5               	clrf	??_Button_Baseline_Update+4
 12408  0D75  01F6               	clrf	??_Button_Baseline_Update+5
 12409  0D76  0877               	movf	Button_Baseline_Update@button,w
 12410  0D77  3E05               	addlw	5
 12411  0D78  0086               	movwf	6
 12412  0D79  3001               	movlw	1	; select bank2/3
 12413  0D7A  0087               	movwf	7
 12414  0D7B  0873               	movf	??_Button_Baseline_Update+2,w
 12415  0D7C  0781               	addwf	1,f
 12416  0D7D  3141               	addfsr 1,1
 12417  0D7E  0874               	movf	??_Button_Baseline_Update+3,w
 12418  0D7F  3D81               	addwfc	1,f
 12419  0D80  3141               	addfsr 1,1
 12420  0D81  0875               	movf	??_Button_Baseline_Update+4,w
 12421  0D82  3D81               	addwfc	1,f
 12422  0D83  3141               	addfsr 1,1
 12423  0D84  0876               	movf	??_Button_Baseline_Update+5,w
 12424  0D85  3D81               	addwfc	1,f
 12425  0D86  0008               	return
 12426  0D87                     __end_of_Button_Baseline_Update:	
 12427                           
 12428                           	psect	text79
 12429  08F3                     __ptext79:	
 12430 ;; *************** function _Button_Baseline_Initialize *****************
 12431 ;; Defined at:
 12432 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;  button          1    wreg     PTR struct .
 12435 ;;		 -> mtouch_button(48), 
 12436 ;; Auto vars:     Size  Location     Type
 12437 ;;  button          1    9[COMMON] PTR struct .
 12438 ;;		 -> mtouch_button(48), 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;                  1    wreg      void 
 12441 ;; Registers used:
 12442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12448 ;;      Params:         0       0       0       0       0       0       0       0
 12449 ;;      Locals:         1       0       0       0       0       0       0       0
 12450 ;;      Temps:          0       4       0       0       0       0       0       0
 12451 ;;      Totals:         1       4       0       0       0       0       0       0
 12452 ;;Total ram usage:        5 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    6
 12455 ;; This function calls:
 12456 ;;		_MTOUCH_Sensor_RawSample_Get
 12457 ;; This function is called by:
 12458 ;;		_Button_State_Initializing
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           
 12463                           ;psect for function _Button_Baseline_Initialize
 12464  08F3                     _Button_Baseline_Initialize:	
 12465                           
 12466                           ;incstack = 0
 12467                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12468                           ;Button_Baseline_Initialize@button stored from wreg
 12469  08F3  00F9               	movwf	Button_Baseline_Initialize@button
 12470                           
 12471                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12472  08F4  0A79               	incf	Button_Baseline_Initialize@button,w
 12473  08F5  0086               	movwf	6
 12474  08F6  3001               	movlw	1	; select bank2/3
 12475  08F7  0087               	movwf	7
 12476  08F8  0801               	movf	1,w
 12477  08F9  3197  2729  3188   	fcall	_MTOUCH_Sensor_RawSample_Get
 12478  08FC  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12479  08FD  0020               	movlb	0	; select bank0
 12480  08FE  00A0               	movwf	??_Button_Baseline_Initialize
 12481  08FF  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12482  0900  00A1               	movwf	??_Button_Baseline_Initialize+1
 12483  0901  01A2               	clrf	??_Button_Baseline_Initialize+2
 12484  0902  01A3               	clrf	??_Button_Baseline_Initialize+3
 12485  0903  0879               	movf	Button_Baseline_Initialize@button,w
 12486  0904  3E05               	addlw	5
 12487  0905  0086               	movwf	6
 12488  0906  3001               	movlw	1	; select bank2/3
 12489  0907  0087               	movwf	7
 12490  0908  0820               	movf	??_Button_Baseline_Initialize,w
 12491  0909  3FC0               	movwi [0]fsr1
 12492  090A  0821               	movf	??_Button_Baseline_Initialize+1,w
 12493  090B  3FC1               	movwi [1]fsr1
 12494  090C  0822               	movf	??_Button_Baseline_Initialize+2,w
 12495  090D  3FC2               	movwi [2]fsr1
 12496  090E  0823               	movf	??_Button_Baseline_Initialize+3,w
 12497  090F  3FC3               	movwi [3]fsr1
 12498                           
 12499                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12500  0910  0879               	movf	Button_Baseline_Initialize@button,w
 12501  0911  3E05               	addlw	5
 12502  0912  0086               	movwf	6
 12503  0913  3001               	movlw	1	; select bank2/3
 12504  0914  0087               	movwf	7
 12505  0915  3004               	movlw	4
 12506  0916                     u5435:	
 12507  0916  3581               	lslf	1,f
 12508  0917  3141               	addfsr 1,1
 12509  0918  0D81               	rlf	1,f
 12510  0919  3141               	addfsr 1,1
 12511  091A  0D81               	rlf	1,f
 12512  091B  3141               	addfsr 1,1
 12513  091C  0D81               	rlf	1,f
 12514  091D  317D               	addfsr 1,-3
 12515  091E  0B89               	decfsz	9,f
 12516  091F  2916               	goto	u5435
 12517  0920  0008               	return
 12518  0921                     __end_of_Button_Baseline_Initialize:	
 12519                           
 12520                           	psect	text80
 12521  15A8                     __ptext80:	
 12522 ;; *************** function _Button_Reading_Update *****************
 12523 ;; Defined at:
 12524 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;  button          1    wreg     PTR struct .
 12527 ;;		 -> mtouch_button(48), 
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;  button          1    0[BANK0 ] PTR struct .
 12530 ;;		 -> mtouch_button(48), 
 12531 ;; Return value:  Size  Location     Type
 12532 ;;                  1    wreg      void 
 12533 ;; Registers used:
 12534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12535 ;; Tracked objects:
 12536 ;;		On entry : 0/0
 12537 ;;		On exit  : 0/0
 12538 ;;		Unchanged: 0/0
 12539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12540 ;;      Params:         0       0       0       0       0       0       0       0
 12541 ;;      Locals:         0       1       0       0       0       0       0       0
 12542 ;;      Temps:          0       0       0       0       0       0       0       0
 12543 ;;      Totals:         0       1       0       0       0       0       0       0
 12544 ;;Total ram usage:        1 bytes
 12545 ;; Hardware stack levels used:    1
 12546 ;; Hardware stack levels required when called:    7
 12547 ;; This function calls:
 12548 ;;		_Button_Reading_Update_Helper
 12549 ;; This function is called by:
 12550 ;;		_Button_Service
 12551 ;; This function uses a non-reentrant model
 12552 ;;
 12553                           
 12554                           
 12555                           ;psect for function _Button_Reading_Update
 12556  15A8                     _Button_Reading_Update:	
 12557                           
 12558                           ;incstack = 0
 12559                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12560                           ;Button_Reading_Update@button stored from wreg
 12561  15A8  0020               	movlb	0	; select bank0
 12562  15A9  00A0               	movwf	Button_Reading_Update@button
 12563                           
 12564                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 12565  15AA  1F8B               	btfss	11,7	;volatile
 12566  15AB  2DB2               	goto	l5335
 12567                           
 12568                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 12569  15AC  138B               	bcf	11,7	;volatile
 12570                           
 12571                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 12572  15AD  0820               	movf	Button_Reading_Update@button,w
 12573  15AE  318A  2259         	fcall	_Button_Reading_Update_Helper
 12574                           
 12575                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 12576  15B0  178B               	bsf	11,7	;volatile
 12577                           
 12578                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 12579  15B1  0008               	return
 12580  15B2                     l5335:	
 12581                           
 12582                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 12583  15B2  0820               	movf	Button_Reading_Update@button,w
 12584  15B3  318A  2259         	fcall	_Button_Reading_Update_Helper
 12585  15B5  0008               	return
 12586  15B6                     __end_of_Button_Reading_Update:	
 12587                           
 12588                           	psect	text81
 12589  0A59                     __ptext81:	
 12590 ;; *************** function _Button_Reading_Update_Helper *****************
 12591 ;; Defined at:
 12592 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12593 ;; Parameters:    Size  Location     Type
 12594 ;;  button          1    wreg     PTR struct .
 12595 ;;		 -> mtouch_button(48), 
 12596 ;; Auto vars:     Size  Location     Type
 12597 ;;  button          1   11[COMMON] PTR struct .
 12598 ;;		 -> mtouch_button(48), 
 12599 ;; Return value:  Size  Location     Type
 12600 ;;                  1    wreg      void 
 12601 ;; Registers used:
 12602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12603 ;; Tracked objects:
 12604 ;;		On entry : 0/0
 12605 ;;		On exit  : 0/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12608 ;;      Params:         0       0       0       0       0       0       0       0
 12609 ;;      Locals:         1       0       0       0       0       0       0       0
 12610 ;;      Temps:          2       0       0       0       0       0       0       0
 12611 ;;      Totals:         3       0       0       0       0       0       0       0
 12612 ;;Total ram usage:        3 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    6
 12615 ;; This function calls:
 12616 ;;		_MTOUCH_Sensor_RawSample_Get
 12617 ;; This function is called by:
 12618 ;;		_Button_Reading_Update
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           
 12623                           ;psect for function _Button_Reading_Update_Helper
 12624  0A59                     _Button_Reading_Update_Helper:	
 12625                           
 12626                           ;incstack = 0
 12627                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12628                           ;Button_Reading_Update_Helper@button stored from wreg
 12629  0A59  00FB               	movwf	Button_Reading_Update_Helper@button
 12630                           
 12631                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12632  0A5A  087B               	movf	Button_Reading_Update_Helper@button,w
 12633  0A5B  3E02               	addlw	2
 12634  0A5C  0086               	movwf	6
 12635  0A5D  3001               	movlw	1	; select bank2/3
 12636  0A5E  0087               	movwf	7
 12637  0A5F  0801               	movf	1,w
 12638  0A60  1903               	btfsc	3,2
 12639  0A61  2A95               	goto	l5219
 12640                           
 12641                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 12642  0A62  087B               	movf	Button_Reading_Update_Helper@button,w
 12643  0A63  3E03               	addlw	3
 12644  0A64  0086               	movwf	6
 12645  0A65  3001               	movlw	1	; select bank2/3
 12646  0A66  0087               	movwf	7
 12647  0A67  3F40               	moviw [0]fsr1
 12648  0A68  00F9               	movwf	??_Button_Reading_Update_Helper
 12649  0A69  3F41               	moviw [1]fsr1
 12650  0A6A  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12651  0A6B  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12652  0A6C  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12653  0A6D  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12654  0A6E  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12655  0A6F  087B               	movf	Button_Reading_Update_Helper@button,w
 12656  0A70  3E03               	addlw	3
 12657  0A71  0086               	movwf	6
 12658  0A72  3001               	movlw	1	; select bank2/3
 12659  0A73  0087               	movwf	7
 12660  0A74  0879               	movf	??_Button_Reading_Update_Helper,w
 12661  0A75  0281               	subwf	1,f
 12662  0A76  3141               	addfsr 1,1
 12663  0A77  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12664  0A78  3B81               	subwfb	1,f
 12665  0A79  317F               	addfsr 1,-1
 12666                           
 12667                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12668  0A7A  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12669  0A7B  0086               	movwf	6
 12670  0A7C  3001               	movlw	1	; select bank2/3
 12671  0A7D  0087               	movwf	7
 12672  0A7E  0801               	movf	1,w
 12673  0A7F  3197  2729         	fcall	_MTOUCH_Sensor_RawSample_Get
 12674  0A81  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12675  0A82  00F9               	movwf	??_Button_Reading_Update_Helper
 12676  0A83  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12677  0A84  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12678  0A85  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12679  0A86  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12680  0A87  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12681  0A88  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12682  0A89  087B               	movf	Button_Reading_Update_Helper@button,w
 12683  0A8A  3E03               	addlw	3
 12684  0A8B  0086               	movwf	6
 12685  0A8C  3001               	movlw	1	; select bank2/3
 12686  0A8D  0087               	movwf	7
 12687  0A8E  0879               	movf	??_Button_Reading_Update_Helper,w
 12688  0A8F  0781               	addwf	1,f
 12689  0A90  3141               	addfsr 1,1
 12690  0A91  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12691  0A92  3D81               	addwfc	1,f
 12692  0A93  317F               	addfsr 1,-1
 12693                           
 12694                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 12695  0A94  0008               	return
 12696  0A95                     l5219:	
 12697                           
 12698                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12699  0A95  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12700  0A96  0086               	movwf	6
 12701  0A97  3001               	movlw	1	; select bank2/3
 12702  0A98  0087               	movwf	7
 12703  0A99  0801               	movf	1,w
 12704  0A9A  3197  2729         	fcall	_MTOUCH_Sensor_RawSample_Get
 12705  0A9C  087B               	movf	Button_Reading_Update_Helper@button,w
 12706  0A9D  3E03               	addlw	3
 12707  0A9E  0086               	movwf	6
 12708  0A9F  3001               	movlw	1	; select bank2/3
 12709  0AA0  0087               	movwf	7
 12710  0AA1  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12711  0AA2  3FC0               	movwi [0]fsr1
 12712  0AA3  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12713  0AA4  3FC1               	movwi [1]fsr1
 12714  0AA5  0008               	return
 12715  0AA6                     __end_of_Button_Reading_Update_Helper:	
 12716                           
 12717                           	psect	text82
 12718  1729                     __ptext82:	
 12719 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12720 ;; Defined at:
 12721 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  name            1    wreg     enum E2864
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  name            1    8[COMMON] enum E2864
 12726 ;; Return value:  Size  Location     Type
 12727 ;;                  2    5[COMMON] unsigned short 
 12728 ;; Registers used:
 12729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12730 ;; Tracked objects:
 12731 ;;		On entry : 0/0
 12732 ;;		On exit  : 0/0
 12733 ;;		Unchanged: 0/0
 12734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12735 ;;      Params:         2       0       0       0       0       0       0       0
 12736 ;;      Locals:         1       0       0       0       0       0       0       0
 12737 ;;      Temps:          1       0       0       0       0       0       0       0
 12738 ;;      Totals:         4       0       0       0       0       0       0       0
 12739 ;;Total ram usage:        4 bytes
 12740 ;; Hardware stack levels used:    1
 12741 ;; Hardware stack levels required when called:    5
 12742 ;; This function calls:
 12743 ;;		___bmul
 12744 ;; This function is called by:
 12745 ;;		_Button_Reading_Update_Helper
 12746 ;;		_Button_Baseline_Initialize
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           
 12751                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12752  1729                     _MTOUCH_Sensor_RawSample_Get:	
 12753                           
 12754                           ;incstack = 0
 12755                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12756                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12757  1729  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12758                           
 12759                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 12760  172A  3003               	movlw	3
 12761  172B  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 12762  172C  1803               	skipnc
 12763  172D  2F3E               	goto	l5131
 12764                           
 12765                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 12766  172E  3009               	movlw	9
 12767  172F  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12768  1730  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12769  1731  00F1               	movwf	___bmul@multiplicand
 12770  1732  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12771  1733  3196  2610         	fcall	___bmul
 12772  1735  3E56               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12773  1736  0086               	movwf	6
 12774  1737  3001               	movlw	1	; select bank2/3
 12775  1738  0087               	movwf	7
 12776  1739  3F40               	moviw [0]fsr1
 12777  173A  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12778  173B  3F41               	moviw [1]fsr1
 12779  173C  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12780  173D  0008               	return
 12781  173E                     l5131:	
 12782                           
 12783                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 12784  173E  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 12785  173F  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 12786  1740  0008               	return
 12787  1741                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12788                           
 12789                           	psect	text83
 12790  1610                     __ptext83:	
 12791 ;; *************** function ___bmul *****************
 12792 ;; Defined at:
 12793 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12794 ;; Parameters:    Size  Location     Type
 12795 ;;  multiplier      1    wreg     unsigned char 
 12796 ;;  multiplicand    1    1[COMMON] unsigned char 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  multiplier      1    4[COMMON] unsigned char 
 12799 ;;  product         1    3[COMMON] unsigned char 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;                  1    wreg      unsigned char 
 12802 ;; Registers used:
 12803 ;;		wreg, status,2, status,0
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12809 ;;      Params:         1       0       0       0       0       0       0       0
 12810 ;;      Locals:         2       0       0       0       0       0       0       0
 12811 ;;      Temps:          1       0       0       0       0       0       0       0
 12812 ;;      Totals:         4       0       0       0       0       0       0       0
 12813 ;;Total ram usage:        4 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    4
 12816 ;; This function calls:
 12817 ;;		Nothing
 12818 ;; This function is called by:
 12819 ;;		_MTOUCH_Sensor_Initialize
 12820 ;;		_MTOUCH_Sensor_RawSample_Get
 12821 ;;		_MTOUCH_Sensor_Enable
 12822 ;;		_MTOUCH_Sensor_Calibrate
 12823 ;;		_MTOUCH_Sensor_isCalibrated
 12824 ;;		_MTOUCH_Sensor_wasSampled
 12825 ;;		_MTOUCH_Sensor_isAnySensorActive
 12826 ;;		_MTOUCH_Sensor_Disable
 12827 ;;		_MTOUCH_Sensor_isEnabled
 12828 ;;		_MTOUCH_Sensor_isActive
 12829 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 12830 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 12831 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 12832 ;;		_MTOUCH_Sensor_Oversampling_Get
 12833 ;;		_MTOUCH_Sensor_Oversampling_Set
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           
 12838                           ;psect for function ___bmul
 12839  1610                     ___bmul:	
 12840                           
 12841                           ;incstack = 0
 12842                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12843                           ;___bmul@multiplier stored from wreg
 12844  1610  00F4               	movwf	___bmul@multiplier
 12845  1611  01F3               	clrf	___bmul@product
 12846  1612                     l4901:	
 12847  1612  1C74               	btfss	___bmul@multiplier,0
 12848  1613  2E18               	goto	l4905
 12849  1614  0871               	movf	___bmul@multiplicand,w
 12850  1615  00F2               	movwf	??___bmul
 12851  1616  0872               	movf	??___bmul,w
 12852  1617  07F3               	addwf	___bmul@product,f
 12853  1618                     l4905:	
 12854  1618  1003               	clrc
 12855  1619  0DF1               	rlf	___bmul@multiplicand,f
 12856  161A  1003               	clrc
 12857  161B  0CF4               	rrf	___bmul@multiplier,f
 12858  161C  0874               	movf	___bmul@multiplier,w
 12859  161D  1D03               	btfss	3,2
 12860  161E  2E12               	goto	l4901
 12861  161F  0873               	movf	___bmul@product,w
 12862  1620  0008               	return
 12863  1621                     __end_of___bmul:	
 12864                           
 12865                           	psect	text84
 12866  0C71                     __ptext84:	
 12867 ;; *************** function _Button_Deviation_Update *****************
 12868 ;; Defined at:
 12869 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12870 ;; Parameters:    Size  Location     Type
 12871 ;;  button          1    wreg     PTR struct .
 12872 ;;		 -> mtouch_button(48), 
 12873 ;; Auto vars:     Size  Location     Type
 12874 ;;  button          1    0[BANK0 ] PTR struct .
 12875 ;;		 -> mtouch_button(48), 
 12876 ;;  deviation       4    1[BANK0 ] long 
 12877 ;; Return value:  Size  Location     Type
 12878 ;;                  1    wreg      void 
 12879 ;; Registers used:
 12880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12881 ;; Tracked objects:
 12882 ;;		On entry : 0/0
 12883 ;;		On exit  : 0/0
 12884 ;;		Unchanged: 0/0
 12885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12886 ;;      Params:         0       0       0       0       0       0       0       0
 12887 ;;      Locals:         0       5       0       0       0       0       0       0
 12888 ;;      Temps:         10       0       0       0       0       0       0       0
 12889 ;;      Totals:        10       5       0       0       0       0       0       0
 12890 ;;Total ram usage:       15 bytes
 12891 ;; Hardware stack levels used:    1
 12892 ;; Hardware stack levels required when called:    4
 12893 ;; This function calls:
 12894 ;;		Nothing
 12895 ;; This function is called by:
 12896 ;;		_Button_Service
 12897 ;; This function uses a non-reentrant model
 12898 ;;
 12899                           
 12900                           
 12901                           ;psect for function _Button_Deviation_Update
 12902  0C71                     _Button_Deviation_Update:	
 12903                           
 12904                           ;incstack = 0
 12905                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12906                           ;Button_Deviation_Update@button stored from wreg
 12907  0C71  0020               	movlb	0	; select bank0
 12908  0C72  00A0               	movwf	Button_Deviation_Update@button
 12909                           
 12910                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12911  0C73  0820               	movf	Button_Deviation_Update@button,w
 12912  0C74  3E05               	addlw	5
 12913  0C75  0086               	movwf	6
 12914  0C76  3001               	movlw	1	; select bank2/3
 12915  0C77  0087               	movwf	7
 12916  0C78  3F40               	moviw [0]fsr1
 12917  0C79  00F1               	movwf	??_Button_Deviation_Update
 12918  0C7A  3F41               	moviw [1]fsr1
 12919  0C7B  00F2               	movwf	??_Button_Deviation_Update+1
 12920  0C7C  3F42               	moviw [2]fsr1
 12921  0C7D  00F3               	movwf	??_Button_Deviation_Update+2
 12922  0C7E  3F43               	moviw [3]fsr1
 12923  0C7F  00F4               	movwf	??_Button_Deviation_Update+3
 12924  0C80  3004               	movlw	4
 12925  0C81                     u3705:	
 12926  0C81  36F4               	lsrf	??_Button_Deviation_Update+3,f
 12927  0C82  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12928  0C83  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12929  0C84  0CF1               	rrf	??_Button_Deviation_Update,f
 12930  0C85  0B89               	decfsz	9,f
 12931  0C86  2C81               	goto	u3705
 12932  0C87  0820               	movf	Button_Deviation_Update@button,w
 12933  0C88  3E03               	addlw	3
 12934  0C89  0086               	movwf	6
 12935  0C8A  3001               	movlw	1	; select bank2/3
 12936  0C8B  0087               	movwf	7
 12937  0C8C  3F40               	moviw [0]fsr1
 12938  0C8D  00F5               	movwf	??_Button_Deviation_Update+4
 12939  0C8E  3F41               	moviw [1]fsr1
 12940  0C8F  00F6               	movwf	??_Button_Deviation_Update+5
 12941  0C90  0875               	movf	??_Button_Deviation_Update+4,w
 12942  0C91  00F7               	movwf	??_Button_Deviation_Update+6
 12943  0C92  0876               	movf	??_Button_Deviation_Update+5,w
 12944  0C93  00F8               	movwf	??_Button_Deviation_Update+7
 12945  0C94  01F9               	clrf	??_Button_Deviation_Update+8
 12946  0C95  01FA               	clrf	??_Button_Deviation_Update+9
 12947  0C96  0871               	movf	??_Button_Deviation_Update,w
 12948  0C97  02F7               	subwf	??_Button_Deviation_Update+6,f
 12949  0C98  0872               	movf	??_Button_Deviation_Update+1,w
 12950  0C99  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 12951  0C9A  0873               	movf	??_Button_Deviation_Update+2,w
 12952  0C9B  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 12953  0C9C  0874               	movf	??_Button_Deviation_Update+3,w
 12954  0C9D  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 12955  0C9E  087A               	movf	??_Button_Deviation_Update+9,w
 12956  0C9F  00A4               	movwf	Button_Deviation_Update@deviation+3
 12957  0CA0  0879               	movf	??_Button_Deviation_Update+8,w
 12958  0CA1  00A3               	movwf	Button_Deviation_Update@deviation+2
 12959  0CA2  0878               	movf	??_Button_Deviation_Update+7,w
 12960  0CA3  00A2               	movwf	Button_Deviation_Update@deviation+1
 12961  0CA4  0877               	movf	??_Button_Deviation_Update+6,w
 12962  0CA5  00A1               	movwf	Button_Deviation_Update@deviation
 12963                           
 12964                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 12965  0CA6  0821               	movf	Button_Deviation_Update@deviation,w
 12966  0CA7  00F1               	movwf	??_Button_Deviation_Update
 12967  0CA8  0822               	movf	Button_Deviation_Update@deviation+1,w
 12968  0CA9  00F2               	movwf	??_Button_Deviation_Update+1
 12969  0CAA  0823               	movf	Button_Deviation_Update@deviation+2,w
 12970  0CAB  00F3               	movwf	??_Button_Deviation_Update+2
 12971  0CAC  0824               	movf	Button_Deviation_Update@deviation+3,w
 12972  0CAD  00F4               	movwf	??_Button_Deviation_Update+3
 12973  0CAE  0820               	movf	Button_Deviation_Update@button,w
 12974  0CAF  3E0F               	addlw	15
 12975  0CB0  0086               	movwf	6
 12976  0CB1  3001               	movlw	1	; select bank2/3
 12977  0CB2  0087               	movwf	7
 12978  0CB3  0A01               	incf	1,w
 12979  0CB4  2CB9               	goto	u3710
 12980  0CB5                     u3715:	
 12981  0CB5  37F4               	asrf	??_Button_Deviation_Update+3,f
 12982  0CB6  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12983  0CB7  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12984  0CB8  0CF1               	rrf	??_Button_Deviation_Update,f
 12985  0CB9                     u3710:	
 12986  0CB9  0B89               	decfsz	9,f
 12987  0CBA  2CB5               	goto	u3715
 12988  0CBB  0874               	movf	??_Button_Deviation_Update+3,w
 12989  0CBC  00A4               	movwf	Button_Deviation_Update@deviation+3
 12990  0CBD  0873               	movf	??_Button_Deviation_Update+2,w
 12991  0CBE  00A3               	movwf	Button_Deviation_Update@deviation+2
 12992  0CBF  0872               	movf	??_Button_Deviation_Update+1,w
 12993  0CC0  00A2               	movwf	Button_Deviation_Update@deviation+1
 12994  0CC1  0871               	movf	??_Button_Deviation_Update,w
 12995  0CC2  00A1               	movwf	Button_Deviation_Update@deviation
 12996                           
 12997                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 12998  0CC3  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 12999  0CC4  2CDA               	goto	l4031
 13000  0CC5  0824               	movf	Button_Deviation_Update@deviation+3,w
 13001  0CC6  1D03               	btfss	3,2
 13002  0CC7  2CD2               	goto	l4029
 13003  0CC8  0823               	movf	Button_Deviation_Update@deviation+2,w
 13004  0CC9  1D03               	btfss	3,2
 13005  0CCA  2CD2               	goto	l4029
 13006  0CCB  0822               	movf	Button_Deviation_Update@deviation+1,w
 13007  0CCC  1D03               	btfss	3,2
 13008  0CCD  2CD2               	goto	l4029
 13009  0CCE  3080               	movlw	128
 13010  0CCF  0221               	subwf	Button_Deviation_Update@deviation,w
 13011  0CD0  1C03               	btfss	3,0
 13012  0CD1  2CDA               	goto	l4031
 13013  0CD2                     l4029:	
 13014                           
 13015                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 13016  0CD2  3000               	movlw	0
 13017  0CD3  00A4               	movwf	Button_Deviation_Update@deviation+3
 13018  0CD4  3000               	movlw	0
 13019  0CD5  00A3               	movwf	Button_Deviation_Update@deviation+2
 13020  0CD6  3000               	movlw	0
 13021  0CD7  00A2               	movwf	Button_Deviation_Update@deviation+1
 13022  0CD8  307F               	movlw	127
 13023  0CD9  00A1               	movwf	Button_Deviation_Update@deviation
 13024  0CDA                     l4031:	
 13025                           
 13026                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 13027  0CDA  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 13028  0CDB  2CEE               	goto	l4035
 13029  0CDC  3080               	movlw	128
 13030  0CDD  0221               	subwf	Button_Deviation_Update@deviation,w
 13031  0CDE  30FF               	movlw	255
 13032  0CDF  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 13033  0CE0  30FF               	movlw	255
 13034  0CE1  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 13035  0CE2  30FF               	movlw	255
 13036  0CE3  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 13037  0CE4  1803               	btfsc	3,0
 13038  0CE5  2CEE               	goto	l4035
 13039                           
 13040                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 13041  0CE6  30FF               	movlw	255
 13042  0CE7  00A4               	movwf	Button_Deviation_Update@deviation+3
 13043  0CE8  30FF               	movlw	255
 13044  0CE9  00A3               	movwf	Button_Deviation_Update@deviation+2
 13045  0CEA  30FF               	movlw	255
 13046  0CEB  00A2               	movwf	Button_Deviation_Update@deviation+1
 13047  0CEC  3080               	movlw	128
 13048  0CED  00A1               	movwf	Button_Deviation_Update@deviation
 13049  0CEE                     l4035:	
 13050                           
 13051                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 13052  0CEE  0821               	movf	Button_Deviation_Update@deviation,w
 13053  0CEF  00F1               	movwf	??_Button_Deviation_Update
 13054  0CF0  0820               	movf	Button_Deviation_Update@button,w
 13055  0CF1  3E09               	addlw	9
 13056  0CF2  0086               	movwf	6
 13057  0CF3  3001               	movlw	1	; select bank2/3
 13058  0CF4  0087               	movwf	7
 13059  0CF5  0871               	movf	??_Button_Deviation_Update,w
 13060  0CF6  0081               	movwf	1
 13061  0CF7  0008               	return
 13062  0CF8                     __end_of_Button_Deviation_Update:	
 13063                           
 13064                           	psect	text85
 13065  1513                     __ptext85:	
 13066 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 13067 ;; Defined at:
 13068 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 13071 ;;		 -> myButtonPressedCallback(1), 
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;		None
 13074 ;; Return value:  Size  Location     Type
 13075 ;;                  1    wreg      void 
 13076 ;; Registers used:
 13077 ;;		wreg
 13078 ;; Tracked objects:
 13079 ;;		On entry : 0/0
 13080 ;;		On exit  : 0/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13083 ;;      Params:         2       0       0       0       0       0       0       0
 13084 ;;      Locals:         0       0       0       0       0       0       0       0
 13085 ;;      Temps:          0       0       0       0       0       0       0       0
 13086 ;;      Totals:         2       0       0       0       0       0       0       0
 13087 ;;Total ram usage:        2 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; Hardware stack levels required when called:    4
 13090 ;; This function calls:
 13091 ;;		Nothing
 13092 ;; This function is called by:
 13093 ;;		_main
 13094 ;; This function uses a non-reentrant model
 13095 ;;
 13096                           
 13097                           
 13098                           ;psect for function _MTOUCH_Button_SetPressedCallback
 13099  1513                     _MTOUCH_Button_SetPressedCallback:	
 13100                           
 13101                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 13102                           
 13103                           ;incstack = 0
 13104                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 13105  1513  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 13106  1514  0021               	movlb	1	; select bank1
 13107  1515  00DC               	movwf	(_callback_pressed+1)^(0+128)
 13108  1516  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 13109  1517  00DB               	movwf	_callback_pressed^(0+128)
 13110  1518  0008               	return
 13111  1519                     __end_of_MTOUCH_Button_SetPressedCallback:	
 13112                           
 13113                           	psect	text86
 13114  150D                     __ptext86:	
 13115 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 13116 ;; Defined at:
 13117 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13118 ;; Parameters:    Size  Location     Type
 13119 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 13120 ;;		 -> myButtonReleasedCallback(1), 
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;		None
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  1    wreg      void 
 13125 ;; Registers used:
 13126 ;;		wreg
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13132 ;;      Params:         2       0       0       0       0       0       0       0
 13133 ;;      Locals:         0       0       0       0       0       0       0       0
 13134 ;;      Temps:          0       0       0       0       0       0       0       0
 13135 ;;      Totals:         2       0       0       0       0       0       0       0
 13136 ;;Total ram usage:        2 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    4
 13139 ;; This function calls:
 13140 ;;		Nothing
 13141 ;; This function is called by:
 13142 ;;		_main
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           
 13147                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 13148  150D                     _MTOUCH_Button_SetNotPressedCallback:	
 13149                           
 13150                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 13151                           
 13152                           ;incstack = 0
 13153                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 13154  150D  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 13155  150E  0021               	movlb	1	; select bank1
 13156  150F  00DA               	movwf	(_callback_notPressed+1)^(0+128)
 13157  1510  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 13158  1511  00D9               	movwf	_callback_notPressed^(0+128)
 13159  1512  0008               	return
 13160  1513                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 13161                           
 13162                           	psect	intentry
 13163  0004                     __pintentry:	
 13164 ;; *************** function _INTERRUPT_InterruptManager *****************
 13165 ;; Defined at:
 13166 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13167 ;; Parameters:    Size  Location     Type
 13168 ;;		None
 13169 ;; Auto vars:     Size  Location     Type
 13170 ;;		None
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  1    wreg      void 
 13173 ;; Registers used:
 13174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13180 ;;      Params:         0       0       0       0       0       0       0       0
 13181 ;;      Locals:         0       0       0       0       0       0       0       0
 13182 ;;      Temps:          0       0       0       0       0       0       0       0
 13183 ;;      Totals:         0       0       0       0       0       0       0       0
 13184 ;;Total ram usage:        0 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; Hardware stack levels required when called:    3
 13187 ;; This function calls:
 13188 ;;		Absolute function
 13189 ;;		_EUSART_Receive_ISR
 13190 ;;		_INT_ISR
 13191 ;; This function is called by:
 13192 ;;		Interrupt level 1
 13193 ;; This function uses a non-reentrant model
 13194 ;;
 13195                           
 13196  0004                     _INTERRUPT_InterruptManager:	
 13197                           
 13198                           ;incstack = 0
 13199  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13200                           
 13201                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13202  0005  3180               	pagesel	$
 13203                           
 13204                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.INTE == 1 && INTCONbits.
      +                          INTF == 1)
 13205  0006  1A0B               	btfsc	11,4	;volatile
 13206  0007  1C8B               	btfss	11,1	;volatile
 13207  0008  280D               	goto	i1l859
 13208                           
 13209                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         INT_ISR();
 13210  0009  3194  24FB  3180   	fcall	_INT_ISR
 13211                           
 13212                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13213  000C  281B               	goto	i1l865
 13214  000D                     i1l859:	
 13215                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13216                           
 13217  000D  1F0B               	btfss	11,6	;volatile
 13218  000E  281B               	goto	i1l865
 13219                           
 13220                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 13221  000F  0021               	movlb	1	; select bank1
 13222  0010  1E91               	btfss	17,5	;volatile
 13223  0011  281B               	goto	i1l865
 13224  0012  0020               	movlb	0	; select bank0
 13225  0013  1E91               	btfss	17,5	;volatile
 13226  0014  281B               	goto	i1l865
 13227                           
 13228                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 13229  0015  0021               	movlb	1	; select bank1
 13230  0016  0869               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 13231  0017  008A               	movwf	10
 13232  0018  0868               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 13233  0019  000A               	callw
 13234  001A  3180               	pagesel	$
 13235  001B                     i1l865:	
 13236                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
 13237                           
 13238                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13239                           
 13240  001B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13241  001C  0009               	retfie
 13242  001D                     __end_of_INTERRUPT_InterruptManager:	
 13243                           
 13244                           	psect	text88
 13245  14FB                     __ptext88:	
 13246 ;; *************** function _INT_ISR *****************
 13247 ;; Defined at:
 13248 ;;		line 38 in file "mcc_generated_files/ext_int.c"
 13249 ;; Parameters:    Size  Location     Type
 13250 ;;		None
 13251 ;; Auto vars:     Size  Location     Type
 13252 ;;		None
 13253 ;; Return value:  Size  Location     Type
 13254 ;;                  1    wreg      void 
 13255 ;; Registers used:
 13256 ;;		wreg, status,2, status,0, pclath, cstack
 13257 ;; Tracked objects:
 13258 ;;		On entry : 0/0
 13259 ;;		On exit  : 0/0
 13260 ;;		Unchanged: 0/0
 13261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13262 ;;      Params:         0       0       0       0       0       0       0       0
 13263 ;;      Locals:         0       0       0       0       0       0       0       0
 13264 ;;      Temps:          0       0       0       0       0       0       0       0
 13265 ;;      Totals:         0       0       0       0       0       0       0       0
 13266 ;;Total ram usage:        0 bytes
 13267 ;; Hardware stack levels used:    1
 13268 ;; Hardware stack levels required when called:    2
 13269 ;; This function calls:
 13270 ;;		_INT_CallBack
 13271 ;; This function is called by:
 13272 ;;		_INTERRUPT_InterruptManager
 13273 ;; This function uses a non-reentrant model
 13274 ;;
 13275                           
 13276                           
 13277                           ;psect for function _INT_ISR
 13278  14FB                     _INT_ISR:	
 13279                           
 13280                           ;mcc_generated_files/ext_int.c: 40:     (INTCONbits.INTF = 0);
 13281                           
 13282                           ;incstack = 0
 13283                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 13284  14FB  108B               	bcf	11,1	;volatile
 13285                           
 13286                           ;mcc_generated_files/ext_int.c: 43:     INT_CallBack();
 13287  14FC  3196  267A         	fcall	_INT_CallBack
 13288  14FE  0008               	return
 13289  14FF                     __end_of_INT_ISR:	
 13290                           
 13291                           	psect	text89
 13292  167A                     __ptext89:	
 13293 ;; *************** function _INT_CallBack *****************
 13294 ;; Defined at:
 13295 ;;		line 47 in file "mcc_generated_files/ext_int.c"
 13296 ;; Parameters:    Size  Location     Type
 13297 ;;		None
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;		None
 13300 ;; Return value:  Size  Location     Type
 13301 ;;                  1    wreg      void 
 13302 ;; Registers used:
 13303 ;;		wreg, status,2, status,0, pclath, cstack
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13309 ;;      Params:         0       0       0       0       0       0       0       0
 13310 ;;      Locals:         0       0       0       0       0       0       0       0
 13311 ;;      Temps:          1       0       0       0       0       0       0       0
 13312 ;;      Totals:         1       0       0       0       0       0       0       0
 13313 ;;Total ram usage:        1 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    1
 13316 ;; This function calls:
 13317 ;;		Absolute function
 13318 ;;		_INT_DefaultInterruptHandler
 13319 ;; This function is called by:
 13320 ;;		_INT_ISR
 13321 ;; This function uses a non-reentrant model
 13322 ;;
 13323                           
 13324                           
 13325                           ;psect for function _INT_CallBack
 13326  167A                     _INT_CallBack:	
 13327                           
 13328                           ;mcc_generated_files/ext_int.c: 57:     triac_c.cd = triac_level.level;
 13329                           
 13330                           ;incstack = 0
 13331                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13332  167A  0021               	movlb	1	; select bank1
 13333  167B  083E               	movf	_triac_level^(0+128),w
 13334  167C  390F               	andlw	15
 13335  167D  00F0               	movwf	??_INT_CallBack
 13336  167E  083C               	movf	_triac_c^(0+128),w
 13337  167F  0670               	xorwf	??_INT_CallBack,w
 13338  1680  39F0               	andlw	-16
 13339  1681  0670               	xorwf	??_INT_CallBack,w
 13340  1682  00BC               	movwf	_triac_c^(0+128)
 13341                           
 13342                           ;mcc_generated_files/ext_int.c: 58:     ZCD_STATE = 1;
 13343  1683  01C7               	clrf	_ZCD_STATE^(0+128)
 13344  1684  0AC7               	incf	_ZCD_STATE^(0+128),f
 13345                           
 13346                           ;mcc_generated_files/ext_int.c: 59:     if(INT_InterruptHandler)
 13347  1685  0860               	movf	_INT_InterruptHandler^(0+128),w
 13348  1686  0461               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 13349  1687  1903               	btfsc	3,2
 13350  1688  0008               	return
 13351                           
 13352                           ;mcc_generated_files/ext_int.c: 60:     {;mcc_generated_files/ext_int.c: 61:         INT
      +                          _InterruptHandler();
 13353  1689  0861               	movf	(_INT_InterruptHandler+1)^(0+128),w
 13354  168A  008A               	movwf	10
 13355  168B  0860               	movf	_INT_InterruptHandler^(0+128),w
 13356  168C  000A               	callw
 13357  168D  3196               	pagesel	$
 13358  168E  0008               	return
 13359  168F                     __end_of_INT_CallBack:	
 13360                           
 13361                           	psect	text90
 13362  14E2                     __ptext90:	
 13363 ;; *************** function _INT_DefaultInterruptHandler *****************
 13364 ;; Defined at:
 13365 ;;		line 69 in file "mcc_generated_files/ext_int.c"
 13366 ;; Parameters:    Size  Location     Type
 13367 ;;		None
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;		None
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  1    wreg      void 
 13372 ;; Registers used:
 13373 ;;		None
 13374 ;; Tracked objects:
 13375 ;;		On entry : 0/0
 13376 ;;		On exit  : 0/0
 13377 ;;		Unchanged: 0/0
 13378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13379 ;;      Params:         0       0       0       0       0       0       0       0
 13380 ;;      Locals:         0       0       0       0       0       0       0       0
 13381 ;;      Temps:          0       0       0       0       0       0       0       0
 13382 ;;      Totals:         0       0       0       0       0       0       0       0
 13383 ;;Total ram usage:        0 bytes
 13384 ;; Hardware stack levels used:    1
 13385 ;; This function calls:
 13386 ;;		Nothing
 13387 ;; This function is called by:
 13388 ;;		_EXT_INT_Initialize
 13389 ;;		_INT_CallBack
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           
 13394                           ;psect for function _INT_DefaultInterruptHandler
 13395  14E2                     _INT_DefaultInterruptHandler:	
 13396                           
 13397                           ;incstack = 0
 13398                           ; Regs used in _INT_DefaultInterruptHandler: []
 13399  14E2  0008               	return
 13400  14E3                     __end_of_INT_DefaultInterruptHandler:	
 13401                           
 13402                           	psect	text91
 13403  097F                     __ptext91:	
 13404 ;; *************** function _EUSART_Receive_ISR *****************
 13405 ;; Defined at:
 13406 ;;		line 180 in file "mcc_generated_files/eusart.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;		None
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;		None
 13411 ;; Return value:  Size  Location     Type
 13412 ;;                  1    wreg      void 
 13413 ;; Registers used:
 13414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13415 ;; Tracked objects:
 13416 ;;		On entry : 0/0
 13417 ;;		On exit  : 0/0
 13418 ;;		Unchanged: 0/0
 13419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13420 ;;      Params:         0       0       0       0       0       0       0       0
 13421 ;;      Locals:         0       0       0       0       0       0       0       0
 13422 ;;      Temps:          0       0       0       0       0       0       0       0
 13423 ;;      Totals:         0       0       0       0       0       0       0       0
 13424 ;;Total ram usage:        0 bytes
 13425 ;; Hardware stack levels used:    1
 13426 ;; Hardware stack levels required when called:    2
 13427 ;; This function calls:
 13428 ;;		Absolute function
 13429 ;;		_EUSART_DefaultErrorHandler
 13430 ;;		_EUSART_DefaultFramingErrorHandler
 13431 ;;		_EUSART_DefaultOverrunErrorHandler
 13432 ;;		_EUSART_RxDataHandler
 13433 ;; This function is called by:
 13434 ;;		_EUSART_Initialize
 13435 ;;		_INTERRUPT_InterruptManager
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           
 13440                           ;psect for function _EUSART_Receive_ISR
 13441  097F                     _EUSART_Receive_ISR:	
 13442                           
 13443                           ;mcc_generated_files/eusart.c: 183:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 13444                           
 13445                           ;incstack = 0
 13446                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13447  097F  087C               	movf	_eusartRxHead,w	;volatile
 13448  0980  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13449  0981  0086               	movwf	6
 13450  0982  0187               	clrf	7
 13451  0983  0181               	clrf	1
 13452                           
 13453                           ;mcc_generated_files/eusart.c: 185:     if(RCSTAbits.FERR){
 13454  0984  0023               	movlb	3	; select bank3
 13455  0985  1D1D               	btfss	29,2	;volatile
 13456  0986  2992               	goto	i1l4523
 13457                           
 13458                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13459  0987  087C               	movf	_eusartRxHead,w	;volatile
 13460  0988  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13461  0989  0086               	movwf	6
 13462  098A  0187               	clrf	7
 13463  098B  1481               	bsf	1,1
 13464                           
 13465                           ;mcc_generated_files/eusart.c: 187:         EUSART_FramingErrorHandler();
 13466  098C  0021               	movlb	1	; select bank1
 13467  098D  0867               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 13468  098E  008A               	movwf	10
 13469  098F  0866               	movf	_EUSART_FramingErrorHandler^(0+128),w
 13470  0990  000A               	callw
 13471  0991  3189               	pagesel	$
 13472  0992                     i1l4523:	
 13473                           
 13474                           ;mcc_generated_files/eusart.c: 190:     if(RCSTAbits.OERR){
 13475  0992  0023               	movlb	3	; select bank3
 13476  0993  1C9D               	btfss	29,1	;volatile
 13477  0994  29A0               	goto	i1l4529
 13478                           
 13479                           ;mcc_generated_files/eusart.c: 191:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13480  0995  087C               	movf	_eusartRxHead,w	;volatile
 13481  0996  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13482  0997  0086               	movwf	6
 13483  0998  0187               	clrf	7
 13484  0999  1501               	bsf	1,2
 13485                           
 13486                           ;mcc_generated_files/eusart.c: 192:         EUSART_OverrunErrorHandler();
 13487  099A  0021               	movlb	1	; select bank1
 13488  099B  0865               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 13489  099C  008A               	movwf	10
 13490  099D  0864               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 13491  099E  000A               	callw
 13492  099F  3189               	pagesel	$
 13493  09A0                     i1l4529:	
 13494                           
 13495                           ;mcc_generated_files/eusart.c: 195:     if(eusartRxStatusBuffer[eusartRxHead].status){
 13496  09A0  087C               	movf	_eusartRxHead,w	;volatile
 13497  09A1  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13498  09A2  0086               	movwf	6
 13499  09A3  0187               	clrf	7
 13500  09A4  0801               	movf	1,w
 13501  09A5  1903               	btfsc	3,2
 13502  09A6  29AE               	goto	i1l4533
 13503                           
 13504                           ;mcc_generated_files/eusart.c: 196:         EUSART_ErrorHandler();
 13505  09A7  0021               	movlb	1	; select bank1
 13506  09A8  0863               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 13507  09A9  008A               	movwf	10
 13508  09AA  0862               	movf	_EUSART_ErrorHandler^(0+128),w
 13509  09AB  000A               	callw
 13510  09AC  3189               	pagesel	$
 13511                           
 13512                           ;mcc_generated_files/eusart.c: 197:     } else {
 13513  09AD  0008               	return
 13514  09AE                     i1l4533:	
 13515                           
 13516                           ;mcc_generated_files/eusart.c: 198:         EUSART_RxDataHandler();
 13517  09AE  3196  26FB         	fcall	_EUSART_RxDataHandler
 13518  09B0  0008               	return
 13519  09B1                     __end_of_EUSART_Receive_ISR:	
 13520                           
 13521                           	psect	text92
 13522  14F7                     __ptext92:	
 13523 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 13524 ;; Defined at:
 13525 ;;		line 216 in file "mcc_generated_files/eusart.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;		None
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;		None
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		None
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13539 ;;      Params:         0       0       0       0       0       0       0       0
 13540 ;;      Locals:         0       0       0       0       0       0       0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0       0
 13542 ;;      Totals:         0       0       0       0       0       0       0       0
 13543 ;;Total ram usage:        0 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; This function calls:
 13546 ;;		Nothing
 13547 ;; This function is called by:
 13548 ;;		_EUSART_Initialize
 13549 ;;		_EUSART_Receive_ISR
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           
 13554                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 13555  14F7                     _EUSART_DefaultOverrunErrorHandler:	
 13556                           
 13557                           ;mcc_generated_files/eusart.c: 219:     RCSTAbits.CREN = 0;
 13558                           
 13559                           ;incstack = 0
 13560                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 13561  14F7  0023               	movlb	3	; select bank3
 13562  14F8  121D               	bcf	29,4	;volatile
 13563                           
 13564                           ;mcc_generated_files/eusart.c: 220:     RCSTAbits.CREN = 1;
 13565  14F9  161D               	bsf	29,4	;volatile
 13566  14FA  0008               	return
 13567  14FB                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 13568                           
 13569                           	psect	text93
 13570  14E1                     __ptext93:	
 13571 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 13572 ;; Defined at:
 13573 ;;		line 214 in file "mcc_generated_files/eusart.c"
 13574 ;; Parameters:    Size  Location     Type
 13575 ;;		None
 13576 ;; Auto vars:     Size  Location     Type
 13577 ;;		None
 13578 ;; Return value:  Size  Location     Type
 13579 ;;                  1    wreg      void 
 13580 ;; Registers used:
 13581 ;;		None
 13582 ;; Tracked objects:
 13583 ;;		On entry : 0/0
 13584 ;;		On exit  : 0/0
 13585 ;;		Unchanged: 0/0
 13586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13587 ;;      Params:         0       0       0       0       0       0       0       0
 13588 ;;      Locals:         0       0       0       0       0       0       0       0
 13589 ;;      Temps:          0       0       0       0       0       0       0       0
 13590 ;;      Totals:         0       0       0       0       0       0       0       0
 13591 ;;Total ram usage:        0 bytes
 13592 ;; Hardware stack levels used:    1
 13593 ;; This function calls:
 13594 ;;		Nothing
 13595 ;; This function is called by:
 13596 ;;		_EUSART_Initialize
 13597 ;;		_EUSART_Receive_ISR
 13598 ;; This function uses a non-reentrant model
 13599 ;;
 13600                           
 13601                           
 13602                           ;psect for function _EUSART_DefaultFramingErrorHandler
 13603  14E1                     _EUSART_DefaultFramingErrorHandler:	
 13604                           
 13605                           ;incstack = 0
 13606                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 13607  14E1  0008               	return
 13608  14E2                     __end_of_EUSART_DefaultFramingErrorHandler:	
 13609                           
 13610                           	psect	text94
 13611  14E5                     __ptext94:	
 13612 ;; *************** function _EUSART_DefaultErrorHandler *****************
 13613 ;; Defined at:
 13614 ;;		line 224 in file "mcc_generated_files/eusart.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;		None
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;		None
 13619 ;; Return value:  Size  Location     Type
 13620 ;;                  1    wreg      void 
 13621 ;; Registers used:
 13622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13628 ;;      Params:         0       0       0       0       0       0       0       0
 13629 ;;      Locals:         0       0       0       0       0       0       0       0
 13630 ;;      Temps:          0       0       0       0       0       0       0       0
 13631 ;;      Totals:         0       0       0       0       0       0       0       0
 13632 ;;Total ram usage:        0 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    1
 13635 ;; This function calls:
 13636 ;;		_EUSART_RxDataHandler
 13637 ;; This function is called by:
 13638 ;;		_EUSART_Initialize
 13639 ;;		_EUSART_Receive_ISR
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           
 13644                           ;psect for function _EUSART_DefaultErrorHandler
 13645  14E5                     _EUSART_DefaultErrorHandler:	
 13646                           
 13647                           ;mcc_generated_files/eusart.c: 225:     EUSART_RxDataHandler();
 13648                           
 13649                           ;incstack = 0
 13650                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13651  14E5  3196  26FB         	fcall	_EUSART_RxDataHandler
 13652  14E7  0008               	return
 13653  14E8                     __end_of_EUSART_DefaultErrorHandler:	
 13654                           
 13655                           	psect	text95
 13656  16FB                     __ptext95:	
 13657 ;; *************** function _EUSART_RxDataHandler *****************
 13658 ;; Defined at:
 13659 ;;		line 204 in file "mcc_generated_files/eusart.c"
 13660 ;; Parameters:    Size  Location     Type
 13661 ;;		None
 13662 ;; Auto vars:     Size  Location     Type
 13663 ;;		None
 13664 ;; Return value:  Size  Location     Type
 13665 ;;                  1    wreg      void 
 13666 ;; Registers used:
 13667 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/0
 13670 ;;		On exit  : 0/0
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13673 ;;      Params:         0       0       0       0       0       0       0       0
 13674 ;;      Locals:         0       0       0       0       0       0       0       0
 13675 ;;      Temps:          1       0       0       0       0       0       0       0
 13676 ;;      Totals:         1       0       0       0       0       0       0       0
 13677 ;;Total ram usage:        1 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; This function calls:
 13680 ;;		Nothing
 13681 ;; This function is called by:
 13682 ;;		_EUSART_Receive_ISR
 13683 ;;		_EUSART_DefaultErrorHandler
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           
 13688                           ;psect for function _EUSART_RxDataHandler
 13689  16FB                     _EUSART_RxDataHandler:	
 13690                           
 13691                           ;mcc_generated_files/eusart.c: 206:     eusartRxBuffer[eusartRxHead++] = RCREG;
 13692                           
 13693                           ;incstack = 0
 13694                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 13695  16FB  0023               	movlb	3	; select bank3
 13696  16FC  0819               	movf	25,w	;volatile
 13697  16FD  00F0               	movwf	??_EUSART_RxDataHandler
 13698  16FE  087C               	movf	_eusartRxHead,w
 13699  16FF  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13700  1700  0086               	movwf	6
 13701  1701  0187               	clrf	7
 13702  1702  0870               	movf	??_EUSART_RxDataHandler,w
 13703  1703  0081               	movwf	1
 13704  1704  3001               	movlw	1
 13705  1705  00F0               	movwf	??_EUSART_RxDataHandler
 13706  1706  0870               	movf	??_EUSART_RxDataHandler,w
 13707  1707  07FC               	addwf	_eusartRxHead,f	;volatile
 13708                           
 13709                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13710  1708  3008               	movlw	8
 13711  1709  027C               	subwf	_eusartRxHead,w	;volatile
 13712  170A  1803               	btfsc	3,0
 13713                           
 13714                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         eus
      +                          artRxHead = 0;
 13715  170B  01FC               	clrf	_eusartRxHead	;volatile
 13716                           
 13717                           ;mcc_generated_files/eusart.c: 211:     eusartRxCount++;
 13718  170C  3001               	movlw	1
 13719  170D  00F0               	movwf	??_EUSART_RxDataHandler
 13720  170E  0870               	movf	??_EUSART_RxDataHandler,w
 13721  170F  0021               	movlb	1	; select bank1
 13722  1710  07CE               	addwf	_eusartRxCount^(0+128),f	;volatile
 13723  1711  0008               	return
 13724  1712                     __end_of_EUSART_RxDataHandler:	
 13725  007E                     btemp	set	126	;btemp
 13726  007E                     int$flags	set	126
 13727  007E                     wtemp0	set	126


Data Sizes:
    Strings     83
    Constant    57
    Data        40
    BSS         132
    Persistent  42
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     80      80
    BANK1            80      2      76
    BANK2            80      0      75
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2583$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2583	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_9(CODE[28]), STR_8(CODE[28]), STR_7(CODE[13]), STR_6(CODE[20]), 
		 -> STR_5(CODE[14]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[20]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2265_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_9(CODE[28]), STR_8(CODE[28]), STR_7(CODE[13]), STR_6(CODE[20]), 
		 -> STR_5(CODE[14]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[20]), 
		 -> STR_1(CODE[8]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 28
		 -> STR_9(CODE[28]), STR_8(CODE[28]), STR_7(CODE[13]), STR_6(CODE[20]), 
		 -> STR_5(CODE[14]), STR_4(CODE[20]), STR_3(CODE[20]), STR_2(CODE[20]), 
		 -> STR_1(CODE[8]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S110$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S110$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2864,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_abs
    _abs->___aomod
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_check_on_off
    _check_on_off->_MTOUCH_Button_Buttonmask_Get
    _MTOUCH_Button_Buttonmask_Get->_MTOUCH_Button_isPressed
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INT_ISR->_INT_CallBack
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _dtoa->___aomod
    _dtoa->_pad
    _pad->_fputs
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _abs->___aomod
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   38208
                                              0 BANK1      2     2      0
       _MTOUCH_Button_Buttonmask_Get
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              10     4      6    7927
                                             70 BANK0     10     4      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     5      3    7036
                                             62 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    38      2    6598
                                             46 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                30    22      8    5083
                                             16 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2650
                                              7 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     7      1    1127
                                             11 COMMON     1     0      1
                                              0 BANK0      7     7      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     812
                                              3 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      44
                                              2 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             19     3     16     448
                                              1 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             27    11     16     452
                                              1 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4468
                  _EUSART_Initialize
                 _EXT_INT_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      98
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   25459
                                             59 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   16387
                                             57 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   16288
                                             50 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     530
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   14879
                                             46 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1697
                                              8 COMMON     1     1      0
                                             16 BANK0      4     4      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      67
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      67
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    6399
                                             33 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5856
                                             18 BANK0     15    14      1
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     242
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1902
                                              8 COMMON     4     4      0
                                             16 BANK0      2     2      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     723
                                              4 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     300
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8704
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8605
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1393
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     106
                                              8 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1879
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     211
                                              8 COMMON     1     0      1
                       _check_on_off
 ---------------------------------------------------------------------------------
 (6) _check_on_off                                         1     1      0     158
                                              7 COMMON     1     1      0
       _MTOUCH_Button_Buttonmask_Get
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Button_Buttonmask_Get                         4     4      0     158
                                              3 COMMON     4     4      0
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (8) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              8 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                            _INT_ISR
 ---------------------------------------------------------------------------------
 (11) _INT_ISR                                             0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (12) _INT_CallBack                                        1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _INT_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (12) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_Buttonmask_Get
     _MTOUCH_Button_isPressed
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _check_on_off
               _MTOUCH_Button_Buttonmask_Get
                 _MTOUCH_Button_isPressed
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
                 ___aomod (ARG)
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
               ___aomod (ARG)
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
                   ___aomod (ARG)
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
                 ___aomod (ARG)
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
               ___aomod (ARG)
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _INT_ISR *
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     114       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     114      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jul 07 18:54:57 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                           _triac_level 00BE  
                                                   _i 00C6                                        ___bmul@product 0073  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 1559                             _Sensor_setCalibratAcqTime 15E1  
                                         __CFG_LVP$ON 0000                                                   l301 01E1  
                                                 l253 0750                                                   l282 011F  
                                                 l284 011A                                                   l518 0F37  
                                                 l289 0123                                                   l299 01CA  
                                                 l725 0801                                                   l592 17F6  
                                                 _GIE 005F                                                   _PR2 001B  
                                __end_of_check_on_off 0826                                                   _abs 1712  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0AA6  
                      ?_EUSART_SetFramingErrorHandler 0071                               ?_Sensor_loadADCSettings 0072  
                                     _TMR2_Initialize 1569                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0072  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 0016  
                      Sensor_getScanGroupIndex@sensor 0073                     __size_of_MTOUCH_Sensor_Initialize 0015  
                           ?_MTOUCH_Sensor_Initialize 0070                                                  l1014 0823  
                                                l1114 0ABE                                                  l1122 0274  
                                                l1131 0340                                                  l1123 027B  
                                                ?_abs 0074                                                  l1117 0ADE  
                                                l1118 0AEA                                                  l1127 0296  
                                                l1128 02AA                                                  l1263 0584  
                                                l1276 0660                                                  l4031 0CDA  
                                                l4035 0CEE                                                  l3403 07BD  
                                                l5003 00F7                                                  l4029 0CD2  
                                                l3405 07D0                                                  l5103 0221  
                                                l5131 173E                                                  l3443 17E4  
                                                l5051 01A3                                                  l5043 0188  
                                                l5027 0127                                                  l5019 0112  
                                                l3373 15CA                                                  l3295 178C  
                                                l5055 01BD                                                  l5039 016D  
                                                l5151 0A55                                                  l3463 09DD  
                                                l3385 074C                                                  l5145 0A47  
                                                l4185 16E6                                                  l5225 0AB4  
                                                l5401 02D7                                                  l5219 0A95  
                                                l5307 16CD                                                  l5091 01F8  
                                                l5083 01E5                                                  l5059 01C2  
                                                l5147 0A4A                                                  l3459 09BA  
                                                l3731 1746                                                  l5235 0AC0  
                                                l5411 02B2                                                  l5341 0BBD  
                                                l5261 0B61                                                  l5325 08A4  
                                                l3725 082A                                                  l3733 1752  
                                                l5229 0ABC                                                  ?_pad 0027  
                                                l5335 15B2                                                  l5343 0BC1  
                                                l3399 07AA                                                  l5087 01EF  
                                                l5183 0FA4                                                  l5175 0F9F  
                                                l5167 0F89                                                  l5271 0B7C  
                                                l5255 0B59                                                  l3903 05C0  
                                                l5423 0354                                                  l3825 0D42  
                                                l5097 020C                                                  l5185 0FB7  
                                                l3921 0633                                                  l5433 036C  
                                                l5363 0F2E                                                  l5515 0B37  
                                                l5283 0BA5                                                  l5275 0B8C  
                                                l5267 0B74                                                  l5443 07F3  
                                                l3915 05F4                                                  l3923 063F  
                                                l3907 05E7                                                  l5419 034C  
                                                l4901 1612                                                  l5373 0C32  
                                                l5357 0EF5                                                  l5189 0FE1  
                                                l3917 0603                                                  l5429 035F  
                                                l5279 0B9C                                                  l5623 17D0  
                                                l3871 04F8                                                  l5391 028E  
                                                l5543 070E                                                  l5607 0959  
                                                l4905 1618                                                  l4841 08D7  
                                                l5297 088D                                                  l5473 0DC4  
                                                l5457 17B7                                                  l3881 050F  
                                                l3865 04CD                                                  l5537 06ED  
                                                l5529 06B3                                                  l5553 071F  
                                                l5609 0976                                                  l5801 0425  
                                                l4851 08EA                                                  l4931 0079  
                                                l5483 0DE6                                                  l5491 0E1B  
                                                l5467 0DB4                                                  l3891 0557  
                                                l3883 051E                                                  l5547 0714  
                                                l5811 0453                                                  l4845 08D9  
                                                l4941 0097                                                  l5901 0E05  
                                                l5477 0DD5                                                  l5581 16DA  
                                                l3893 0563                                                  l3869 04F4  
                                                l5397 02A5                                                  l4839 08C8  
                                                l4871 1630                                                  l4943 00AC  
                                                l5903 0E0A                                                  l5575 16D1  
                                                l4961 009F                                                  l5489 0DF8  
                                                l5817 0462                                                  l5753 039D  
                                                l5595 15F2                                                  l4939 0090  
                                                l5827 0490                                                  l5771 03D0  
                                                l4893 0E96                                                  l4885 0E5E  
                                                l4973 00AE                                                  l4949 0099  
                                                l5765 03BF                                                  l4887 0E62  
                                                l4993 00E4                                                  l4977 00B8  
                                                l5787 03EA                                                  STR_1 184B  
                                                STR_2 181C                                                  STR_3 181C  
                                                STR_4 181C                                                  STR_5 1830  
                                                STR_6 181C                                                  STR_7 183E  
                                                STR_8 1800                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                     __end_of_INT_ISR 14FF                                                  _LATC 010E  
                                                u2470 178A                                                  u4055 16E9  
                                                u2465 177B                                                  u3425 0544  
                                                u3285 0D0A                                                  u3525 0621  
                                                u2725 09DB                                                  u3710 0CB9  
                                                u3390 04FF                                                  u3295 0D50  
                                                u3705 0C81                                                  u2674 17F0  
                                                u3715 0CB5                                                  u2675 17EF  
                                                u2595 07E5                                                  u5405 0FC1  
                                                u5425 09EA                                                  u5435 0916  
                                                u5720 024A                                                  u4905 0E41  
                                                u5730 024B                                                  u4915 0E4B  
                                                u5475 0ACA                                                  u5805 034A  
                                                u5655 0BEA                                                  u4935 0E86  
                                                u5825 02C6                                                  u6457 03B8  
                                                u4875 171B                                                  u5835 02D2  
                                                u5685 0F0B                                                  u5775 0286  
                                                u5945 0AFB                            Button_State_Pressed@button 0024  
                                                _TMR2 001A                                                  _WPUA 020C  
                                                _WPUB 020D                     __size_of_Sensor_Acq_ExecutePacket 01DB  
                            _Sensor_getScanGroupIndex 08C6                             ?_Sensor_Acq_ExecutePacket 0032  
                                        __CFG_WRT$OFF 0000                                    _MTOUCH_needReburst 0002  
                                                abs@a 0074                                                  _dbuf 01A0  
                                                _main 037F                                                  _dtoa 022E  
                __size_of_MTOUCH_Button_InitializeAll 001C                                                  _prec 00B8  
                                                _nout 00B4                                                  pad@i 002B  
                                                pad@p 0028                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  pad@w 002D  
                __size_of_MTOUCH_Sensor_InitializeAll 000E                                                  btemp 007E  
                 __end_of_INT_DefaultInterruptHandler 14E3                           _INT_DefaultInterruptHandler 14E2  
                                                start 001D                       __end_of_INT_SetInterruptHandler 1537  
                                   ___bmul@multiplier 0074                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                    MTOUCH_Button_Buttonmask_Get@output 0075  
                      __end_of_Sensor_autoCalibration 0EB6  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1858  
        Sensor_Scanfrequency_Evaluation@frequency_hop 1853                                         __CFG_LPBOR$ON 0000  
                            _myButtonReleasedCallback 14E8                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 001B                         __size_of_Button_State_Pressed 0068  
                                               ??_abs 0076                                                 ??_pad 002A  
                         ?_Button_Baseline_Initialize 0070                 Sensor_postAcquisitionProcess@adcIndex 0030  
                       ??_MTOUCH_Sensor_RawSample_Get 0077                         Sensor_RawSample_Update@sensor 0077  
                       myButtonPressedCallback@button 0078                             __size_of_Sensor_isEnabled 0011  
                                       ?_EUSART_Write 0070                        __size_of_OSCILLATOR_Initialize 0006  
                       __end_of_OSCILLATOR_Initialize 153D     Sensor_Scanfrequency_Evaluation@best_packet_sample 0049  
                 __end_of_Sensor_isCalibratingAcqTime 157A                           _Sensor_isCalibratingAcqTime 1571  
                                     __end_of___aodiv 0596                                                 ?_main 0070  
                                               ?_dtoa 0030                                       __end_of___aomod 0672  
                                       __CFG_WDTE$OFF 0000                        __end_of_Sensor_loadADCSettings 07F2  
                                               _T2CON 001C                               __size_of_Button_Service 0055  
                                               i1l865 001B                                                 i1l859 000D  
                                               _RCREG 0199                                                 _RCSTA 019D  
                                        vfpfcnvrt@fmt 004E                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                  ??_MTOUCH_needReburst 0071  
                     __size_of_Sensor_DefaultCallback 0001                                                 _flags 00BA  
                             __size_of_Sensor_Service 0097                 __end_of_MTOUCH_Sensor_Scan_Initialize 1610  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 1600  
                                      _WDT_Initialize 14FF                               Sensor_setSampled@sensor 0071  
                                               _fputc 09B1                                                 _fputs 0826  
                                               pad@fp 002F                                                 _width 00B6  
                                               _putch 1508                      __size_of_Button_State_NotPressed 00A4  
                                               dtoa@d 0030                                                 dtoa@i 004C  
                                               dtoa@n 0044                                                 dtoa@p 003E  
                                               dtoa@s 0042                                                 dtoa@w 0040  
                                               pclath 000A                                  _Sensor_Sampled_Reset 1561  
                                               status 0003                                                 wtemp0 007E  
                                     _TMR2_StartTimer 14EE                      __size_of_TMR2_LoadPeriodRegister 0005  
                           __size_of_Sensor_setActive 0008                                Sensor_isEnabled@sensor 0072  
                                     __initialization 001F                                          __end_of_main 04A3  
                                        __end_of_dtoa 037F                                  _Sensor_setCalibrated 15B6  
                                      ??_EUSART_Write 0071                               __end_of_TMR2_Initialize 1571  
                         ?_INTERRUPT_InterruptManager 0070                        ??_EUSART_SetRxInterruptHandler 0073  
                    __end_of_MTOUCH_Button_Initialize 0A1C                                                ??_main 00EA  
                                              ??_dtoa 0038                                         _counter_PRESS 00CB  
                             _MTOUCH_Sensor_Calibrate 1643                             Sensor_Service@sensor_adc1 0057  
                           Sensor_Service@sensor_adc2 0058                               ??_Button_Reading_Update 007C  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0073                              ?_Button_Deviation_Update 0070  
                              __end_of_WDT_Initialize 1503                                             ??_INT_ISR 0071  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 14E2            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 14E1                            _EUSART_OverrunErrorHandler 00E4  
                __size_of_MTOUCH_Sensor_RawSample_Get 0018                                                ?_fputc 0073  
                                              ?_fputs 007B                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0070  
                                              _ANSELB 018D                                                _ANSELC 018E  
                                              _BORCON 0116                                                i1l4523 0992  
                                              i1l4533 09AE                                                i1l4529 09A0  
                               ?_Sensor_Sampled_Reset 0070                                                _OSCCON 0099  
                                              _SPBRGH 019C                                                _SPBRGL 019B  
                                              u336lld 04CB                                                _WDTCON 0097  
                                              u347lld 05BE                     MTOUCH_Button_InitializeAll@button 0020  
                      ??_Button_Reading_Update_Helper 0079                                _Button_DefaultCallback 14E3  
                     __end_of_MTOUCH_Service_Mainloop 17E2                                        __CFG_PWRTE$OFF 0000  
                                 _Sensor_isCalibrated 157A                                _Sensor_DefaultCallback 14E4  
                                        vfprintf@cfmt 0064                                         _packet_sample 00B0  
                                              ___bmul 1610                                 ?_Sensor_setCalibrated 0070  
                                           ??___aodiv 0071                                             ??___aomod 0071  
                        Sensor_DefaultCallback@sensor 0071                      __size_of_myButtonPressedCallback 0003  
                               __size_of_check_on_off 001E                                                _memcpy 089B  
                    __end_of_MTOUCH_Button_ServiceAll 1600                                                _printf 1632  
                                              pad@buf 0027                          Sensor_autoCalibration@sensor 0031  
                                              dtoa@fp 003D                                         ?_INT_CallBack 0070  
                                              _strlen 1741                                                fputc@c 0073  
                                              fputs@c 0023                                                fputs@i 0024  
                                              fputs@s 0026                               _MTOUCH_Sensor_SampleAll 16CF  
                        Button_DefaultCallback@button 0078                                  ?_Sensor_isCalibrated 0070  
                                     ?_WDT_Initialize 0070                              ?_Sensor_RawSample_Update 0070  
                          __end_of_Sensor_Acquisition 0BA7                      __size_of_INT_SetInterruptHandler 0006  
                             ?_Button_Baseline_Update 0070                                      __end_of_vfprintf 097F  
                 Sensor_postAcquisitionProcess@sensor 0033                               __end_of_TMR2_StartTimer 14F1  
             INT_SetInterruptHandler@InterruptHandler 0071                    __size_of_Sensor_setCalibratAcqTime 000F  
            __end_of_MTOUCH_Button_SetPressedCallback 1519             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 1513                              __size_of_Sensor_isActive 000E  
                     MTOUCH_Sensor_RawSample_Get@name 0078                   Sensor_getScanGroupIndex@sensorGroup 0074  
                                   _SYSTEM_Initialize 16A4                               __end_of__initialization 004F  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0078                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00D3                            __end_of_Button_Tick_helper 0873  
                                        _check_on_off 0808                         MTOUCH_Sensor_Calibrate@sensor 0076  
         Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0037                                   ___bmul@multiplicand 0071  
                                      __pcstackCOMMON 0070                               _MTOUCH_Button_isPressed 1773  
                                        __pidataBANK1 159B                                          __pidataBANK2 178E  
         __end_of_MTOUCH_Button_SetNotPressedCallback 1513          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 150D                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 16FB                                         __end_of_fputc 09E6  
                                       __end_of_fputs 084C                      __end_of_MTOUCH_Sensor_Initialize 16A4  
                                       __end_of_putch 150D                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 1621                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0CF8                                        ??_INT_CallBack 0070  
                            Sensor_setInactive@sensor 0071                                        _Button_Service 0AF6  
                    __end_of_Sensor_Acq_ExecutePacket 022E                            ?_Button_State_Initializing 0024  
                         __size_of_EXT_INT_Initialize 000B                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0D87                   Sensor_Acq_ExecutePacket@sensor_adc1 0040  
                 Sensor_Acq_ExecutePacket@sensor_adc2 0032                              _MTOUCH_Button_Initialize 09E6  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0D87  
                             _Button_State_NotPressed 0EB6                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 1551                                     _sensor_scan_group 1858  
                                             ??_fputc 0076                                        _count_down_off 00CA  
                           __end_of_SYSTEM_Initialize 16B9                                     _lowpowerActivated 00D1  
                                             ??_fputs 0020                      MTOUCH_Sensor_isCalibrated@sensor 0076  
                              ??_Sensor_Sampled_Reset 0071                                               ??_putch 0072  
                                      _counter_ON_OFF 00CC                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                __end_of_EUSART_Write 0808                               _TMR2_LoadPeriodRegister 1503  
                          ??_myButtonReleasedCallback 0079                          Sensor_loadADCSettings@sensor 0079  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 1549  
                         __size_of_EUSART_Receive_ISR 0032                            __end_of_mtouch_button_init 1030  
                                   _last_touch_status 00C2           Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0038  
                              ??_Sensor_setCalibrated 0071                                            __pmaintext 037F  
                                             ?___bmul 0071                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0076                                            __pintentry 0004  
                              __end_of_Button_Service 0B4B                                               ?_memcpy 0071  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 17C5                           _MTOUCH_Button_InitializeAll 17A9  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 0800                           _MTOUCH_Sensor_InitializeAll 07F2  
                           ??_MTOUCH_Sensor_SampleAll 0059                                               ?_printf 0066  
                     __end_of_Sensor_RawSample_Update 089B                                  ??_Sensor_setInactive 0071  
                                             ?_strlen 0071                     __size_of_MTOUCH_Sensor_wasSampled 000F  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 00CE  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0071  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0C09  
                              __end_of_Sensor_Service 0E1E                               Sensor_Service@scanGroup 0055  
                            _MTOUCH_Button_ServiceAll 15F0                                               _INT_ISR 14FB  
                           __end_of_sensor_scan_group 185C                                    __size_of_vfpfcnvrt 00D0  
                       __size_of_EUSART_RxDataHandler 0017                      __size_of_MTOUCH_Service_Mainloop 001D  
                        __end_of_Button_State_Pressed 0C71                               __size_of_TMR2_StopTimer 0003  
                            ??_EUSART_SetErrorHandler 0073                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0079                       Sensor_setCalibratAcqTime@sensor 0071  
                                __size_of_MTOUCH_Tick 0003                   Sensor_loadADCSettings@addressOffset 0078  
                __size_of_Sensor_isCalibratingAcqTime 0009                 Sensor_Acq_ExecutePacket@ADCOMCON_temp 0034  
                           ??_MTOUCH_Button_isPressed 0071                                            _counter_1s 00C0  
                                   ??_Sensor_isActive 0071                   __size_of_EUSART_DefaultErrorHandler 0003  
                       MTOUCH_Button_Buttonmask_Get@i 0076                 __end_of_Sensor_postAcquisitionProcess 0A59  
              __size_of_Sensor_postAcquisitionProcess 003D                         _Sensor_postAcquisitionProcess 0A1C  
                             _myButtonPressedCallback 14EB                               Sensor_Acquisition@retry 0050  
                                     __size_of___bmul 0011                                               ___aodiv 04A3  
                                         _AD1CON0bits 0711                                               ___aomod 0596  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 005E                                       ?_Button_Service 0070  
                                     __CFG_STVREN$OFF 0000            Sensor_Scanfrequency_Evaluation@sensor_adc1 0044  
          Sensor_Scanfrequency_Evaluation@sensor_adc2 0041                                       __size_of_memcpy 002B  
                                             __ptext1 1632                                               __ptext2 0950  
                                             __ptext3 0672                                               __ptext4 022E  
                                             __ptext5 0AA6                                               __ptext6 1741  
                                             __ptext7 0826                                               __ptext8 09B1  
                                             __ptext9 1508                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 168F                                 _OSCILLATOR_Initialize 1537  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0025  
                                     ?_Sensor_Service 0070                              ??_PIN_MANAGER_Initialize 0071  
                             _INT_SetInterruptHandler 1531                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 15B6  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 0053  
                                             _triac_c 00BC                                      _callback_sampled 00DD  
                           ??_TMR2_LoadPeriodRegister 0071                       Sensor_RawSample_Update@adcIndex 0076  
                          __size_of_SYSTEM_Initialize 0015                                               clrloop0 153E  
                                    _callback_pressed 00DB                        MTOUCH_Sensor_Initialize@sensor 0078  
                                end_of_initialization 004F                                               _turn_on 00C8  
                             ?_Button_DefaultCallback 0078                 __end_of_EUSART_SetOverrunErrorHandler 152B  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 1525  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               fputc@fp 0075  
                                             init_ram 1543                                               fputs@fp 007B  
                                             initloop 1544                                  __end_of_INT_CallBack 168F  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 0051  
                       Sensor_Acquisition@sensor_adc2 004E                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 0921                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 0742  
                 __end_of_MTOUCH_Sensor_RawSample_Get 1741                           _MTOUCH_Sensor_RawSample_Get 1729  
                                           _RCSTAbits 019D                                            ??_vfprintf 0061  
                                             strlen@a 0074                                               strlen@s 0075  
                                 ??_EUSART_Initialize 0073                                      ??_WDT_Initialize 0071  
                              Sensor_setActive@sensor 0071                                             _ZCD_STATE 00C7  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0047  
                       Button_Deviation_Update@button 0020                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0035  
                               __size_of_EUSART_Write 0008              MTOUCH_Button_SetPressedCallback@callback 0071  
                          MTOUCH_Sensor_Enable@sensor 0076                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0036  
                                 _callback_notPressed 00D9                   __size_of_MTOUCH_Sensor_isCalibrated 0016  
                      __end_of_Button_DefaultCallback 14E4                       __size_of_EUSART_SetErrorHandler 0006  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0045                                    _sensor_globalFlags 00D0  
                            __end_of_Sensor_isEnabled 1632                            Sensor_setCalibrated@sensor 0071  
                      __end_of_Sensor_DefaultCallback 14E5                      __end_of_myButtonReleasedCallback 14EB  
                           __end_of_EUSART_Initialize 0950                              ??_Sensor_autoCalibration 0078  
                          _Sensor_loadADCSettings$558 0076                                             _TXSTAbits 019E  
                           ??_myButtonPressedCallback 0079                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 0B4B                              ??_Sensor_loadADCSettings 0073  
                                _Button_State_Pressed 0C09                                        __end_of___bmul 1621  
                  __end_of_EUSART_DefaultErrorHandler 14E8                            _EUSART_DefaultErrorHandler 14E5  
                                 ?_Sensor_Acquisition 004E                                           vfpfcnvrt@ap 004F  
                                         vfpfcnvrt@fp 005D                                           vfpfcnvrt@ll 0055  
                          ??_MTOUCH_Button_Initialize 0077           MTOUCH_Button_SetNotPressedCallback@callback 0071  
                     ??_MTOUCH_Sensor_Scan_Initialize 0071                        ?_Sensor_postAcquisitionProcess 0070  
                                        _EUSART_Write 0800                                    _Button_Tick_helper 084C  
                                      __end_of_memcpy 08C6                                ?_OSCILLATOR_Initialize 0070  
                           ??_INT_SetInterruptHandler 0073                                   MTOUCH_Button_Tick@i 0075  
                            __end_of_Sensor_setActive 1551                      TMR2_LoadPeriodRegister@periodVal 0071  
                                      __end_of_printf 1643                           ??_Button_State_Initializing 0025  
                                      __end_of_strlen 1759                                   start_initialization 001F  
                             _MTOUCH_Service_Mainloop 17C5                       __size_of_PIN_MANAGER_Initialize 001A  
                                  _MTOUCH_Button_Tick 16E5                                   ?_Button_Tick_helper 0070  
                                         __end_of_abs 1729                                           __end_of_pad 0AF6  
                                      _TMR2_StopTimer 14F1          EUSART_SetRxInterruptHandler@interruptHandler 0071  
                                         putch@txData 0072                                  ??_Sensor_Acquisition 004F  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0024  
                      Sensor_autoCalibration@adcIndex 0030                          ?_INT_DefaultInterruptHandler 0070  
                      ?_EUSART_SetOverrunErrorHandler 0071                      __end_of_MTOUCH_Sensor_wasSampled 15E1  
                                ??_Button_Tick_helper 0071                          __end_of_MTOUCH_Sensor_Enable 1667  
                                         vfprintf@fmt 005E                                          _packet_noise 00C4  
                          _EUSART_FramingErrorHandler 00E6                                              ??___bmul 0072  
                               ?_Button_State_Pressed 0024                                _EUSART_SetErrorHandler 1519  
                          ??_MTOUCH_Button_ServiceAll 002D                                           __pdataBANK1 00D3  
                                         __pdataBANK2 0150                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 1584                          ??_Button_Baseline_Initialize 0020  
                          __end_of_EXT_INT_Initialize 158F                                         _sample_period 00DF  
                                ??_MTOUCH_Button_Tick 0074                                    _mtouch_button_init 1000  
                          Sensor_Sampled_Reset@sensor 0071                                              ??_printf 006C  
                                            ??_strlen 0073                          ?_Sensor_isCalibratingAcqTime 0070  
                     __end_of_myButtonPressedCallback 14EE                                __end_of_TMR2_StopTimer 14F4  
                                         __pbssCOMMON 007C                                             ___latbits 0002  
                                            ?_INT_ISR 0070                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00EA                                      ___aodiv@dividend 0028  
                            __size_of_TMR2_Initialize 0008                                       _Sensor_isActive 15C4  
                               __size_of_INT_CallBack 0015                        MTOUCH_Button_ServiceAll@button 002E  
                                 Sensor_Service@error 0056                            __end_of_EUSART_Receive_ISR 09B1  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 002F  
                             _Button_Deviation_Update 0C71                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00E8                             _Button_State_Initializing 0BA7  
                  __end_of_MTOUCH_Sensor_isCalibrated 16CF                            _MTOUCH_Sensor_isCalibrated 16B9  
                                           __pnvBANK1 00E0                       __size_of_Sensor_autoCalibration 0098  
                   __size_of_Sensor_getScanGroupIndex 002D                                     _Sensor_setSampled 1559  
                           ?_Sensor_getScanGroupIndex 0070                          __end_of_EUSART_RxDataHandler 1712  
                              _PIN_MANAGER_Initialize 1759                                      ??_Button_Service 0029  
                                           _dtoa$1959 003B                         ??_INT_DefaultInterruptHandler 0070  
                            ?_MTOUCH_Sensor_Calibrate 0070                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                                            ?___aodiv 0020                         __size_of_Sensor_setCalibrated 000E  
                                            ?___aomod 0020                                      ___aodiv@quotient 0074  
                     __size_of_Sensor_loadADCSettings 00B0                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartRxTail 00CF  
                                    ??_Sensor_Service 0052                            ??_Sensor_Acq_ExecutePacket 0033  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 0003                             ?_myButtonReleasedCallback 0078  
                           ??_MTOUCH_Service_Mainloop 005B                                     __size_of_vfprintf 002F  
                                            _ADCOMCON 0712                                          _INT_CallBack 167A  
                         __size_of_Sensor_setInactive 0008                        Sensor_Acq_ExecutePacket@last_a 003B  
                      Sensor_Acq_ExecutePacket@last_b 003D                  __end_of_MTOUCH_Button_Buttonmask_Get 1800  
               __size_of_MTOUCH_Button_Buttonmask_Get 001E                          _MTOUCH_Button_Buttonmask_Get 17E2  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                        __size_of_fputc 0035  
                                      __size_of_fputs 0026                                        __size_of_putch 0005  
                                      _eusartRxBuffer 00A8                             __end_of_Sensor_setSampled 1561  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATCbits 010E  
                             _Sensor_RawSample_Update 0873                     __end_of_Sensor_setCalibratAcqTime 15F0  
                                           clear_ram0 153D                                              _PIE1bits 0091  
                                   _eusartRxLastError 00CD                              __size_of_TMR2_StartTimer 0003  
                 __size_of_INTERRUPT_InterruptManager 0019                                              _PIR1bits 0011  
                     ??_EUSART_SetFramingErrorHandler 0073                Sensor_Acq_ExecutePacket@packet_counter 003F  
                                            _PIR2bits 0012                                ??_Button_State_Pressed 0025  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 167A               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013  
                      _MTOUCH_Sensor_Sampled_ResetAll 1667                              ?_MTOUCH_Sensor_SampleAll 0070  
           __end_of_EUSART_DefaultOverrunErrorHandler 14FB            __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                 ??_EUSART_DefaultOverrunErrorHandler 0070                    ?_EUSART_DefaultOverrunErrorHandler 0070  
                   _EUSART_DefaultOverrunErrorHandler 14F7                    Sensor_Acq_ExecutePacket@ADxIF_flag 0039  
                            _MTOUCH_Sensor_wasSampled 15D2                                    _mtouch_time_toScan 00D2  
                                           _vfpfcnvrt 0672                              ??_Button_Baseline_Update 0071  
                             __end_of_Sensor_isActive 15D2                                _Sensor_autoCalibration 0E1E  
                          __end_of_MTOUCH_needReburst 0004                  __size_of_INT_DefaultInterruptHandler 0001  
                      myButtonReleasedCallback@button 0078                         ?_MTOUCH_Button_Buttonmask_Get 0070  
                                    __size_of_INT_ISR 0004                                _Sensor_loadADCSettings 0742  
                                _MTOUCH_Sensor_Enable 1655                              Button_Tick_helper@button 0073  
                           ??_Button_Deviation_Update 0071                                 _Button_Reading_Update 15A8  
                            ?_MTOUCH_Button_isPressed 0070                                     ?_Sensor_isEnabled 0070  
                                   ??_TMR2_Initialize 0071                                   __end_of_MTOUCH_Tick 14F7  
                                   _MTOUCH_Initialize 158F                       __end_of_MTOUCH_Sensor_Calibrate 1655  
                                       ?_check_on_off 0070                                    ??_Sensor_isEnabled 0071  
                                  ?_MTOUCH_Initialize 0070                Sensor_postAcquisitionProcess@deviation 0031  
                                           memcpy@tmp 0076                                            vfprintf@ap 0060  
                                          vfprintf@fp 0063                                            _APFCONbits 011D  
                             ??_OSCILLATOR_Initialize 0071                    __end_of_Button_Baseline_Initialize 0921  
                          _Button_Baseline_Initialize 08F3                                   _EUSART_ErrorHandler 00E2  
                                    __size_of___aodiv 00F3                                      __size_of___aomod 00DC  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 004E                              ?_Button_State_NotPressed 0024  
                                     ___aodiv@divisor 0020                                       ___aodiv@counter 0072  
                                  Button_Service@name 002B                                     ?_Sensor_setActive 0070  
                            ?_TMR2_LoadPeriodRegister 0070                                 Sensor_isActive@sensor 0071  
                Sensor_Scanfrequency_Evaluation@retry 0048                                    ??_Sensor_setActive 0071  
                                _EUSART_RxDataHandler 16FB                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 0800                                              __ptext11 0596  
                                            __ptext20 168F                                              __ptext12 04A3  
                                            __ptext21 1655                                              __ptext13 16A4  
                                            __ptext30 1519                                              __ptext22 17A9  
                                            __ptext14 14FF                                              __ptext31 17C5  
                                            __ptext23 089B                                              __ptext15 1569  
                                            __ptext40 1559                                              __ptext32 0002  
                                            __ptext24 1584                                              __ptext16 1759  
                                            __ptext41 0873                                              __ptext33 14F4  
                                            __ptext25 1531                                              __ptext17 1537  
                                            __ptext50 14EE                                              __ptext42 14E4  
                                            __ptext34 16E5                                              __ptext26 0921  
                                            __ptext18 158F                                              __ptext51 1503  
                                            __ptext43 0B4B                                              __ptext35 084C  
                                            __ptext27 152B                                              __ptext19 07F2  
                                            __ptext60 1571                                              __ptext52 0742  
                                            __ptext44 0A1C                                              __ptext36 1667  
                                            __ptext28 1525                                              __ptext61 08C6  
                                            __ptext53 157A                                              __ptext45 1551  
                                            __ptext37 1561                                              __ptext29 151F  
                                            __ptext70 14EB                                              __ptext62 1600  
                                            __ptext54 1621                                              __ptext46 1549  
                                            __ptext38 16CF                                              __ptext71 14E3  
                                            __ptext63 15F0                                              __ptext55 15C4  
                                            __ptext47 0F5A                                              __ptext39 0D87  
                                            __ptext80 15A8                                              __ptext72 14E8  
                                            __ptext64 0AF6                                              __ptext56 0E1E  
                                            __ptext48 0053                                              __ptext81 0A59  
                                            __ptext73 0808                                              __ptext65 15D2  
                                            __ptext57 1712                                              __ptext49 14F1  
                                            __ptext90 14E2                                              __ptext82 1729  
                                            __ptext74 17E2                                              __ptext66 16B9  
                                            __ptext58 15B6                                              __ptext91 097F  
                                            __ptext83 1610                                              __ptext75 1773  
                                            __ptext67 0EB6                                              __ptext59 15E1  
                                            __ptext92 14F7                                              __ptext84 0C71  
                                            __ptext76 09E6                                              __ptext68 0BA7  
                                            __ptext93 14E1                                              __ptext85 1513  
                                            __ptext77 1643                                              __ptext69 0C09  
                                            __ptext94 14E5                                              __ptext86 150D  
                                            __ptext78 0CF8                                              __ptext95 16FB  
                                            __ptext79 08F3                                              __ptext88 14FB  
                                            __ptext89 167A                             __end_of_MTOUCH_Initialize 159B  
                           ??_Sensor_RawSample_Update 0075                            __size_of_Sensor_setSampled 0008  
                                       __size_of_main 0124                                         __size_of_dtoa 0151  
                                      ??_check_on_off 0077                       __end_of_MTOUCH_Sensor_SampleAll 16E5  
                    Sensor_Scanfrequency_Evaluation@i 004D                               ?_EUSART_SetErrorHandler 0071  
       EUSART_SetOverrunErrorHandler@interruptHandler 0071                                              int$flags 007E  
                                            _vfprintf 0950                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 0071                    __end_of_INTERRUPT_InterruptManager 001D  
                          _INTERRUPT_InterruptManager 0004                                             printf@fmt 0066  
               __end_of_EUSART_SetFramingErrorHandler 1525                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 151F                       __size_of_Button_Baseline_Update 008F  
                        ?_MTOUCH_Button_InitializeAll 0070                          MTOUCH_Sensor_SampleAll@group 005A  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                      ___aomod@dividend 0028  
                                            _turn_off 00C9                                      ?_Sensor_isActive 0070  
                                       _mtouch_button 0120                                            _INTCONbits 000B  
                               ?_EUSART_RxDataHandler 0070                                         _mtouch_sensor 0150  
                                            memcpy@d1 0079                                              memcpy@s1 0071  
                                _INT_InterruptHandler 00E0                       __end_of_MTOUCH_Button_isPressed 178E  
                    __end_of_Sensor_getScanGroupIndex 08F3                                     __CFG_BOREN$NSLEEP 0000  
                                         _MTOUCH_Tick 14F4                                ?_Button_Reading_Update 0070  
                                  _EXT_INT_Initialize 1584                      Button_Deviation_Update@deviation 0021  
                             __size_of_WDT_Initialize 0004                          MTOUCH_Button_Initialize@name 0079  
                   __size_of_MTOUCH_Button_Initialize 0036                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                      ??_MTOUCH_Button_Buttonmask_Get 0073                              ?_myButtonPressedCallback 0078  
             __end_of_Sensor_Scanfrequency_Evaluation 1000              __size_of_Sensor_Scanfrequency_Evaluation 00A6  
                   ??_Sensor_Scanfrequency_Evaluation 0042                      ?_Sensor_Scanfrequency_Evaluation 0041  
                     _Sensor_Scanfrequency_Evaluation 0F5A                               ?_PIN_MANAGER_Initialize 0070  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 151F  
                                   __CFG_CLKOUTEN$OFF 0000                                   ?_EXT_INT_Initialize 0070  
                         ?_MTOUCH_Sensor_isCalibrated 0070                  __end_of_EUSART_SetRxInterruptHandler 1531  
               __size_of_EUSART_SetRxInterruptHandler 0006                          _EUSART_SetRxInterruptHandler 152B  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 0F5A  
                                            printf@ap 006F                                    _EUSART_Receive_ISR 097F  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                              ?_INT_SetInterruptHandler 0071  
                                     ___aomod@divisor 0020                          __end_of_Sensor_Sampled_Reset 1569  
                                         ??_vfpfcnvrt 0050                                      ??_TMR2_StopTimer 0071  
                                     ___aomod@counter 0072                       __end_of_TMR2_LoadPeriodRegister 1508  
                         __size_of_MTOUCH_Button_Tick 0016                                         __pstringtext1 1853  
                                       __pstringtext2 1858                                         __pstringtext3 1000  
                                       __pstringtext4 1800                                         __pstringtext5 181C  
                                       __pstringtext6 1830                                         __pstringtext7 183E  
                                       __pstringtext8 184B                                         __pstringtext9 0000  
                                ??_EXT_INT_Initialize 0073                                   ?_EUSART_Receive_ISR 0070  
                       ??_MTOUCH_Button_InitializeAll 007B                              ??_Button_DefaultCallback 0079  
                       ??_MTOUCH_Sensor_InitializeAll 0079                  Sensor_Acq_ExecutePacket@activeSensor 003A  
                    __size_of_MTOUCH_Sensor_Calibrate 0012                                ??_MTOUCH_Sensor_Enable 0075  
                   Sensor_isCalibratingAcqTime@sensor 0071                          __size_of_Sensor_isCalibrated 000A  
                            ??_Sensor_DefaultCallback 0072                          __end_of_Sensor_setCalibrated 15C4  
                __end_of_Button_Reading_Update_Helper 0AA6                 __size_of_Button_Reading_Update_Helper 004D  
                        _Button_Reading_Update_Helper 0A59                     __size_of_MTOUCH_Button_ServiceAll 0010  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0024  
                                  EUSART_Write@txData 0071                                          ___aodiv@sign 0073  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 1773  
                              _Button_Baseline_Update 0CF8                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
                                        ___aomod@sign 0073  
